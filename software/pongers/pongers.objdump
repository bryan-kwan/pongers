
pongers.elf:     file format elf32-littlenios2
pongers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08020230

Program Header:
    LOAD off    0x00001000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x08020020 align 2**12
         filesz 0x0000730c memsz 0x0000730c flags r-x
    LOAD off    0x0000832c vaddr 0x0802732c paddr 0x08028dec align 2**12
         filesz 0x00001ac0 memsz 0x00001ac0 flags rw-
    LOAD off    0x0000a8ac vaddr 0x0802a8ac paddr 0x0802a8ac align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08020020  08020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007024  08020230  08020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  08027254  08027254  00008254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac0  0802732c  08028dec  0000832c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0802a8ac  0802a8ac  0000a8ac  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  00009dec  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0802aa00  0802aa00  00009dec  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  00009dec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a90  00000000  00000000  00009e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000175a0  00000000  00000000  0000a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006325  00000000  00000000  00021e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000705f  00000000  00000000  0002818d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001908  00000000  00000000  0002f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002be5  00000000  00000000  00030af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004c37  00000000  00000000  000336d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00038310  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006b0  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003b322  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  0003b325  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003b32e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003b32f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003b330  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003b334  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003b338  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003b33c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0003b347  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0003b352  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0003b35d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0003b366  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d27  00000000  00000000  0003b38c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00073956  00000000  00000000  0003f0b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
08020230 l    d  .text	00000000 .text
08027254 l    d  .rodata	00000000 .rodata
0802732c l    d  .rwdata	00000000 .rwdata
0802a8ac l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0802aa00 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pongers_bsp//obj/HAL/src/crt0.o
08020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pongers.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08020c68 l     F .text	00000008 __fp_unlock
08020c7c l     F .text	0000019c __sinit.part.1
08020e18 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0802732c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
080238e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080239f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08023a20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08023b14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08023bfc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08023ce8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08023ec4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08028ddc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08024168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080242a4 l     F .text	00000034 alt_dev_reg
08027d00 l     O .rwdata	00001060 jtag_uart_0
08028d60 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0802475c l     F .text	0000020c altera_avalon_jtag_uart_irq
08024968 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080261bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080266ac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0802680c l     F .text	0000003c alt_get_errno
08026848 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0802a8d4 g     O .bss	00000004 alt_instruction_exception_handler
080236d8 g     F .text	00000054 _isatty_r
08023e00 g     F .text	0000007c alt_main
080258dc g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
08020afc g     F .text	000000c0 _puts_r
0802a900 g     O .bss	00000100 alt_irq
08023400 g     F .text	00000060 _lseek_r
08028dec g       *ABS*	00000000 __flash_rwdata_start
0802aa00 g       *ABS*	00000000 __alt_heap_start
080229b4 g     F .text	0000005c __sseek
08020fc8 g     F .text	00000010 __sinit
08020e20 g     F .text	00000078 __sfmoreglue
08023ea0 g     F .text	00000024 __malloc_unlock
080220a0 g     F .text	0000015c memmove
08020fb0 g     F .text	00000018 _cleanup
08024fdc g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
08026c34 g     F .text	00000024 altera_nios2_gen2_irq_init
08024fa0 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08020000 g     F .entry	0000000c __reset
08020020 g       *ABS*	00000000 __flash_exceptions_start
0802367c g     F .text	0000005c _fstat_r
0802a8b8 g     O .bss	00000004 errno
08022930 g     F .text	00000008 __seofread
0802a8c0 g     O .bss	00000004 alt_argv
08030db4 g       *ABS*	00000000 _gp
08024138 g     F .text	00000030 usleep
08025184 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
08027b80 g     O .rwdata	00000180 alt_fd_list
0802635c g     F .text	00000090 alt_find_dev
08021f58 g     F .text	00000148 memcpy
08020c70 g     F .text	0000000c _cleanup_r
08026790 g     F .text	0000007c alt_io_redirect
08027254 g       *ABS*	00000000 __DTOR_END__
08020bbc g     F .text	00000014 puts
08026e24 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0802026c g     F .text	000003f4 update_rect
08025240 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08024b60 g     F .text	0000021c altera_avalon_jtag_uart_read
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08023824 g     F .text	00000064 .hidden __udivsi3
08023b50 g     F .text	000000ac isatty
080256ac g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
0802a8b4 g     O .bss	00000004 __malloc_top_pad
08021018 g     F .text	000004c8 __sfvwrite_r
08022888 g     F .text	00000054 _sbrk_r
08025c10 g     F .text	000000c0 helper_plot_pixel
0802361c g     F .text	00000060 _read_r
08028dd4 g     O .rwdata	00000004 alt_max_fd
08022c20 g     F .text	000000f0 _fclose_r
08022f9c g     F .text	00000030 fflush
0802a8b0 g     O .bss	00000004 __malloc_max_sbrked_mem
08025274 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
08023d24 g     F .text	000000dc lseek
08028db4 g     O .rwdata	00000004 _global_impure_ptr
08022324 g     F .text	00000564 _realloc_r
0802aa00 g       *ABS*	00000000 __bss_end
080265bc g     F .text	000000f0 alt_iic_isr_register
080253b0 g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
08026b2c g     F .text	00000108 alt_tick
08020fe8 g     F .text	00000018 __fp_lock_all
08026570 g     F .text	0000004c alt_ic_irq_enabled
08026a90 g     F .text	0000009c alt_alarm_stop
0802a8c8 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
08027b58 g     O .rwdata	00000028 alt_dev_null
0802619c g     F .text	00000020 alt_dcache_flush_all
08025b48 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
08028dec g       *ABS*	00000000 __ram_rwdata_end
08028dcc g     O .rwdata	00000008 alt_dev_list
080241a4 g     F .text	00000100 write
08025cd0 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
0802732c g       *ABS*	00000000 __ram_rodata_end
08023a5c g     F .text	000000b8 fstat
08023888 g     F .text	00000058 .hidden __umodsi3
0802aa00 g       *ABS*	00000000 end
0802469c g     F .text	000000c0 altera_avalon_jtag_uart_init
080201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08027254 g       *ABS*	00000000 __CTOR_LIST__
0803f400 g       *ABS*	00000000 __alt_stack_pointer
08024d7c g     F .text	00000224 altera_avalon_jtag_uart_write
08020fd8 g     F .text	00000004 __sfp_lock_acquire
08021e74 g     F .text	000000e4 memchr
080230f0 g     F .text	00000310 _free_r
080270a0 g     F .text	00000180 __call_exitprocs
08028dbc g     O .rwdata	00000004 __malloc_sbrk_base
08020230 g     F .text	0000003c _start
0802a8cc g     O .bss	00000004 _alt_tick_rate
0802a8d0 g     O .bss	00000004 _alt_nticks
08023f00 g     F .text	00000104 read
08024310 g     F .text	00000228 alt_sys_init
08026f88 g     F .text	00000118 __register_exitproc
08024a08 g     F .text	00000068 altera_avalon_jtag_uart_close
08020ad4 g     F .text	00000028 .hidden __mulsi3
0802732c g       *ABS*	00000000 __ram_rwdata_start
08027254 g       *ABS*	00000000 __ram_rodata_start
0802a8d8 g     O .bss	00000028 __malloc_current_mallinfo
08024538 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08026d60 g     F .text	000000c4 alt_get_fd
08026044 g     F .text	00000158 alt_busy_sleep
08022bcc g     F .text	00000054 _close_r
08026f0c g     F .text	0000007c memcmp
080245f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802aa00 g       *ABS*	00000000 __alt_stack_base
08024648 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08022a78 g     F .text	00000154 __swsetup_r
08020e98 g     F .text	00000118 __sfp
08027750 g     O .rwdata	00000408 __malloc_av_
08020fe4 g     F .text	00000004 __sinit_lock_release
080228dc g     F .text	00000054 __sread
08026c58 g     F .text	00000108 alt_find_file
080261f8 g     F .text	000000a4 alt_dev_llist_insert
08023e7c g     F .text	00000024 __malloc_lock
08024088 g     F .text	000000b0 sbrk
08022f40 g     F .text	0000005c _fflush_r
0802a8ac g       *ABS*	00000000 __bss_start
080221fc g     F .text	00000128 memset
080207f8 g     F .text	000001d0 main
0802a8c4 g     O .bss	00000004 alt_envp
0802a8ac g     O .bss	00000004 __malloc_max_total_mem
080251e0 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08024598 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08022a10 g     F .text	00000008 __sclose
0803f400 g       *ABS*	00000000 __alt_heap_limit
08022d10 g     F .text	00000014 fclose
08021668 g     F .text	0000080c _malloc_r
08028dd8 g     O .rwdata	00000004 alt_errno
080214e0 g     F .text	000000c4 _fwalk
0802372c g     F .text	00000084 .hidden __divsi3
08022fcc g     F .text	00000124 _malloc_trim_r
08027254 g       *ABS*	00000000 __CTOR_END__
08027254 g       *ABS*	00000000 __flash_rodata_start
08027254 g       *ABS*	00000000 __DTOR_LIST__
080242d8 g     F .text	00000038 alt_irq_init
08024004 g     F .text	00000084 alt_release_fd
08026ec0 g     F .text	00000014 atexit
08022a18 g     F .text	00000060 _write_r
08028db8 g     O .rwdata	00000004 _impure_ptr
0802a8bc g     O .bss	00000004 alt_argc
08022d24 g     F .text	0000021c __sflush_r
080262fc g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
08021000 g     F .text	00000018 __fp_unlock_all
08028dc4 g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0802640c g     F .text	00000050 alt_ic_isr_register
08028dec g       *ABS*	00000000 _edata
0802aa00 g       *ABS*	00000000 _end
08020230 g       *ABS*	00000000 __ram_exceptions_end
08024a70 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080264e4 g     F .text	0000008c alt_ic_irq_disable
08022938 g     F .text	0000007c __swrite
08028dc0 g     O .rwdata	00000004 __malloc_trim_threshold
08026ed4 g     F .text	00000038 exit
080215a4 g     F .text	000000c4 _fwalk_reent
080237b0 g     F .text	00000074 .hidden __modsi3
0803f400 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
08020fdc g     F .text	00000004 __sfp_lock_release
08020660 g     F .text	00000198 draw
08027220 g     F .text	00000034 _exit
08025f18 g     F .text	0000012c alt_alarm_start
080209c8 g     F .text	0000010c .hidden __muldi3
08023460 g     F .text	000001bc __smakebuf_r
08020bd0 g     F .text	00000098 strlen
08026934 g     F .text	0000015c open
080263ec g     F .text	00000020 alt_icache_flush_all
08028de0 g     O .rwdata	00000004 alt_priority_mask
0802645c g     F .text	00000088 alt_ic_irq_enable
08028de4 g     O .rwdata	00000008 alt_alarm_list
0802629c g     F .text	00000060 _do_ctors
0802391c g     F .text	000000d8 close
08023c64 g     F .text	00000084 alt_load
08020fe0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020000:	004200b4 	movhi	at,2050
    ori r1, r1, %lo(_start)
 8020004:	08408c14 	ori	at,at,560
    jmp r1
 8020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	008200f4 	movhi	r2,2051
 8020140:	10aa4004 	addi	r2,r2,-22272
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	008200f4 	movhi	r2,2051
 8020158:	10aa4004 	addi	r2,r2,-22272
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80201e4:	00bfffc4 	movi	r2,-1
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80201f0:	d0a6c817 	ldw	r2,-25824(gp)
 80201f4:	10000726 	beq	r2,zero,8020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80201f8:	d0a6c817 	ldw	r2,-25824(gp)
 80201fc:	e0fffd17 	ldw	r3,-12(fp)
 8020200:	e1bffe17 	ldw	r6,-8(fp)
 8020204:	e17fff17 	ldw	r5,-4(fp)
 8020208:	1809883a 	mov	r4,r3
 802020c:	103ee83a 	callr	r2
 8020210:	00000206 	br	802021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020218:	0005883a 	mov	r2,zero
}
 802021c:	e037883a 	mov	sp,fp
 8020220:	dfc00117 	ldw	ra,4(sp)
 8020224:	df000017 	ldw	fp,0(sp)
 8020228:	dec00204 	addi	sp,sp,8
 802022c:	f800283a 	ret

Disassembly of section .text:

08020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8020230:	06c200f4 	movhi	sp,2051
    ori sp, sp, %lo(__alt_stack_pointer)
 8020234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
 8020238:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 802023c:	d6836d14 	ori	gp,gp,3508
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8020240:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 8020244:	10aa2b14 	ori	r2,r2,43180

    movhi r3, %hi(__bss_end)
 8020248:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 802024c:	18ea8014 	ori	r3,r3,43520

    beq r2, r3, 1f
 8020250:	10c00326 	beq	r2,r3,8020260 <_start+0x30>

0:
    stw zero, (r2)
 8020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 802025c:	10fffd36 	bltu	r2,r3,8020254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8020260:	8023c640 	call	8023c64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8020264:	8023e000 	call	8023e00 <alt_main>

08020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8020268:	003fff06 	br	8020268 <__alt_data_end+0xfffe0e68>

0802026c <update_rect>:
	int colour;
};
typedef struct Rectangle Rectangle;

// Updates the position of each Rectangle object
void update_rect(Rectangle rect[], int len) {
 802026c:	defff904 	addi	sp,sp,-28
 8020270:	dfc00615 	stw	ra,24(sp)
 8020274:	df000515 	stw	fp,20(sp)
 8020278:	dc400415 	stw	r17,16(sp)
 802027c:	dc000315 	stw	r16,12(sp)
 8020280:	df000504 	addi	fp,sp,20
 8020284:	e13ffc15 	stw	r4,-16(fp)
 8020288:	e17ffd15 	stw	r5,-12(fp)
	for(int i = 0; i< len; i++) {
 802028c:	e03ffb15 	stw	zero,-20(fp)
 8020290:	0000e806 	br	8020634 <update_rect+0x3c8>
		// Update position
		rect[i].x += rect[i].xspeed;
 8020294:	e0bffb17 	ldw	r2,-20(fp)
 8020298:	01400704 	movi	r5,28
 802029c:	1009883a 	mov	r4,r2
 80202a0:	8020ad40 	call	8020ad4 <__mulsi3>
 80202a4:	1007883a 	mov	r3,r2
 80202a8:	e0bffc17 	ldw	r2,-16(fp)
 80202ac:	10e1883a 	add	r16,r2,r3
 80202b0:	e0bffb17 	ldw	r2,-20(fp)
 80202b4:	01400704 	movi	r5,28
 80202b8:	1009883a 	mov	r4,r2
 80202bc:	8020ad40 	call	8020ad4 <__mulsi3>
 80202c0:	1007883a 	mov	r3,r2
 80202c4:	e0bffc17 	ldw	r2,-16(fp)
 80202c8:	10c5883a 	add	r2,r2,r3
 80202cc:	14400017 	ldw	r17,0(r2)
 80202d0:	e0bffb17 	ldw	r2,-20(fp)
 80202d4:	01400704 	movi	r5,28
 80202d8:	1009883a 	mov	r4,r2
 80202dc:	8020ad40 	call	8020ad4 <__mulsi3>
 80202e0:	1007883a 	mov	r3,r2
 80202e4:	e0bffc17 	ldw	r2,-16(fp)
 80202e8:	10c5883a 	add	r2,r2,r3
 80202ec:	10800217 	ldw	r2,8(r2)
 80202f0:	8885883a 	add	r2,r17,r2
 80202f4:	80800015 	stw	r2,0(r16)
		rect[i].y += rect[i].yspeed;
 80202f8:	e0bffb17 	ldw	r2,-20(fp)
 80202fc:	01400704 	movi	r5,28
 8020300:	1009883a 	mov	r4,r2
 8020304:	8020ad40 	call	8020ad4 <__mulsi3>
 8020308:	1007883a 	mov	r3,r2
 802030c:	e0bffc17 	ldw	r2,-16(fp)
 8020310:	10e1883a 	add	r16,r2,r3
 8020314:	e0bffb17 	ldw	r2,-20(fp)
 8020318:	01400704 	movi	r5,28
 802031c:	1009883a 	mov	r4,r2
 8020320:	8020ad40 	call	8020ad4 <__mulsi3>
 8020324:	1007883a 	mov	r3,r2
 8020328:	e0bffc17 	ldw	r2,-16(fp)
 802032c:	10c5883a 	add	r2,r2,r3
 8020330:	14400117 	ldw	r17,4(r2)
 8020334:	e0bffb17 	ldw	r2,-20(fp)
 8020338:	01400704 	movi	r5,28
 802033c:	1009883a 	mov	r4,r2
 8020340:	8020ad40 	call	8020ad4 <__mulsi3>
 8020344:	1007883a 	mov	r3,r2
 8020348:	e0bffc17 	ldw	r2,-16(fp)
 802034c:	10c5883a 	add	r2,r2,r3
 8020350:	10800317 	ldw	r2,12(r2)
 8020354:	8885883a 	add	r2,r17,r2
 8020358:	80800115 	stw	r2,4(r16)
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH) {
 802035c:	e0bffb17 	ldw	r2,-20(fp)
 8020360:	01400704 	movi	r5,28
 8020364:	1009883a 	mov	r4,r2
 8020368:	8020ad40 	call	8020ad4 <__mulsi3>
 802036c:	1007883a 	mov	r3,r2
 8020370:	e0bffc17 	ldw	r2,-16(fp)
 8020374:	10c5883a 	add	r2,r2,r3
 8020378:	14000017 	ldw	r16,0(r2)
 802037c:	e0bffb17 	ldw	r2,-20(fp)
 8020380:	01400704 	movi	r5,28
 8020384:	1009883a 	mov	r4,r2
 8020388:	8020ad40 	call	8020ad4 <__mulsi3>
 802038c:	1007883a 	mov	r3,r2
 8020390:	e0bffc17 	ldw	r2,-16(fp)
 8020394:	10c5883a 	add	r2,r2,r3
 8020398:	10800417 	ldw	r2,16(r2)
 802039c:	8085883a 	add	r2,r16,r2
 80203a0:	10805010 	cmplti	r2,r2,320
 80203a4:	1000241e 	bne	r2,zero,8020438 <update_rect+0x1cc>
			rect[i].x = SCREEN_WIDTH - rect[i].width;
 80203a8:	e0bffb17 	ldw	r2,-20(fp)
 80203ac:	01400704 	movi	r5,28
 80203b0:	1009883a 	mov	r4,r2
 80203b4:	8020ad40 	call	8020ad4 <__mulsi3>
 80203b8:	1007883a 	mov	r3,r2
 80203bc:	e0bffc17 	ldw	r2,-16(fp)
 80203c0:	10e1883a 	add	r16,r2,r3
 80203c4:	e0bffb17 	ldw	r2,-20(fp)
 80203c8:	01400704 	movi	r5,28
 80203cc:	1009883a 	mov	r4,r2
 80203d0:	8020ad40 	call	8020ad4 <__mulsi3>
 80203d4:	1007883a 	mov	r3,r2
 80203d8:	e0bffc17 	ldw	r2,-16(fp)
 80203dc:	10c5883a 	add	r2,r2,r3
 80203e0:	10800417 	ldw	r2,16(r2)
 80203e4:	00c05004 	movi	r3,320
 80203e8:	1885c83a 	sub	r2,r3,r2
 80203ec:	80800015 	stw	r2,0(r16)
			rect[i].xspeed *= -1;
 80203f0:	e0bffb17 	ldw	r2,-20(fp)
 80203f4:	01400704 	movi	r5,28
 80203f8:	1009883a 	mov	r4,r2
 80203fc:	8020ad40 	call	8020ad4 <__mulsi3>
 8020400:	1007883a 	mov	r3,r2
 8020404:	e0bffc17 	ldw	r2,-16(fp)
 8020408:	10e1883a 	add	r16,r2,r3
 802040c:	e0bffb17 	ldw	r2,-20(fp)
 8020410:	01400704 	movi	r5,28
 8020414:	1009883a 	mov	r4,r2
 8020418:	8020ad40 	call	8020ad4 <__mulsi3>
 802041c:	1007883a 	mov	r3,r2
 8020420:	e0bffc17 	ldw	r2,-16(fp)
 8020424:	10c5883a 	add	r2,r2,r3
 8020428:	10800217 	ldw	r2,8(r2)
 802042c:	0085c83a 	sub	r2,zero,r2
 8020430:	80800215 	stw	r2,8(r16)
 8020434:	00007c06 	br	8020628 <update_rect+0x3bc>
		}
		else if (rect[i].x <= 0) {
 8020438:	e0bffb17 	ldw	r2,-20(fp)
 802043c:	01400704 	movi	r5,28
 8020440:	1009883a 	mov	r4,r2
 8020444:	8020ad40 	call	8020ad4 <__mulsi3>
 8020448:	1007883a 	mov	r3,r2
 802044c:	e0bffc17 	ldw	r2,-16(fp)
 8020450:	10c5883a 	add	r2,r2,r3
 8020454:	10800017 	ldw	r2,0(r2)
 8020458:	00801a16 	blt	zero,r2,80204c4 <update_rect+0x258>
			rect[i].x = 0;
 802045c:	e0bffb17 	ldw	r2,-20(fp)
 8020460:	01400704 	movi	r5,28
 8020464:	1009883a 	mov	r4,r2
 8020468:	8020ad40 	call	8020ad4 <__mulsi3>
 802046c:	1007883a 	mov	r3,r2
 8020470:	e0bffc17 	ldw	r2,-16(fp)
 8020474:	10c5883a 	add	r2,r2,r3
 8020478:	10000015 	stw	zero,0(r2)
			rect[i].xspeed *= -1;
 802047c:	e0bffb17 	ldw	r2,-20(fp)
 8020480:	01400704 	movi	r5,28
 8020484:	1009883a 	mov	r4,r2
 8020488:	8020ad40 	call	8020ad4 <__mulsi3>
 802048c:	1007883a 	mov	r3,r2
 8020490:	e0bffc17 	ldw	r2,-16(fp)
 8020494:	10e1883a 	add	r16,r2,r3
 8020498:	e0bffb17 	ldw	r2,-20(fp)
 802049c:	01400704 	movi	r5,28
 80204a0:	1009883a 	mov	r4,r2
 80204a4:	8020ad40 	call	8020ad4 <__mulsi3>
 80204a8:	1007883a 	mov	r3,r2
 80204ac:	e0bffc17 	ldw	r2,-16(fp)
 80204b0:	10c5883a 	add	r2,r2,r3
 80204b4:	10800217 	ldw	r2,8(r2)
 80204b8:	0085c83a 	sub	r2,zero,r2
 80204bc:	80800215 	stw	r2,8(r16)
 80204c0:	00005906 	br	8020628 <update_rect+0x3bc>
		}
		else if (rect[i].y + rect[i].height >= SCREEN_HEIGHT) {
 80204c4:	e0bffb17 	ldw	r2,-20(fp)
 80204c8:	01400704 	movi	r5,28
 80204cc:	1009883a 	mov	r4,r2
 80204d0:	8020ad40 	call	8020ad4 <__mulsi3>
 80204d4:	1007883a 	mov	r3,r2
 80204d8:	e0bffc17 	ldw	r2,-16(fp)
 80204dc:	10c5883a 	add	r2,r2,r3
 80204e0:	14000117 	ldw	r16,4(r2)
 80204e4:	e0bffb17 	ldw	r2,-20(fp)
 80204e8:	01400704 	movi	r5,28
 80204ec:	1009883a 	mov	r4,r2
 80204f0:	8020ad40 	call	8020ad4 <__mulsi3>
 80204f4:	1007883a 	mov	r3,r2
 80204f8:	e0bffc17 	ldw	r2,-16(fp)
 80204fc:	10c5883a 	add	r2,r2,r3
 8020500:	10800517 	ldw	r2,20(r2)
 8020504:	8085883a 	add	r2,r16,r2
 8020508:	10803c10 	cmplti	r2,r2,240
 802050c:	1000241e 	bne	r2,zero,80205a0 <update_rect+0x334>
			rect[i].y = SCREEN_HEIGHT - rect[i].height;
 8020510:	e0bffb17 	ldw	r2,-20(fp)
 8020514:	01400704 	movi	r5,28
 8020518:	1009883a 	mov	r4,r2
 802051c:	8020ad40 	call	8020ad4 <__mulsi3>
 8020520:	1007883a 	mov	r3,r2
 8020524:	e0bffc17 	ldw	r2,-16(fp)
 8020528:	10e1883a 	add	r16,r2,r3
 802052c:	e0bffb17 	ldw	r2,-20(fp)
 8020530:	01400704 	movi	r5,28
 8020534:	1009883a 	mov	r4,r2
 8020538:	8020ad40 	call	8020ad4 <__mulsi3>
 802053c:	1007883a 	mov	r3,r2
 8020540:	e0bffc17 	ldw	r2,-16(fp)
 8020544:	10c5883a 	add	r2,r2,r3
 8020548:	10800517 	ldw	r2,20(r2)
 802054c:	00c03c04 	movi	r3,240
 8020550:	1885c83a 	sub	r2,r3,r2
 8020554:	80800115 	stw	r2,4(r16)
			rect[i].yspeed *= -1;
 8020558:	e0bffb17 	ldw	r2,-20(fp)
 802055c:	01400704 	movi	r5,28
 8020560:	1009883a 	mov	r4,r2
 8020564:	8020ad40 	call	8020ad4 <__mulsi3>
 8020568:	1007883a 	mov	r3,r2
 802056c:	e0bffc17 	ldw	r2,-16(fp)
 8020570:	10e1883a 	add	r16,r2,r3
 8020574:	e0bffb17 	ldw	r2,-20(fp)
 8020578:	01400704 	movi	r5,28
 802057c:	1009883a 	mov	r4,r2
 8020580:	8020ad40 	call	8020ad4 <__mulsi3>
 8020584:	1007883a 	mov	r3,r2
 8020588:	e0bffc17 	ldw	r2,-16(fp)
 802058c:	10c5883a 	add	r2,r2,r3
 8020590:	10800317 	ldw	r2,12(r2)
 8020594:	0085c83a 	sub	r2,zero,r2
 8020598:	80800315 	stw	r2,12(r16)
 802059c:	00002206 	br	8020628 <update_rect+0x3bc>
		}
		else if (rect[i].y <= 0) {
 80205a0:	e0bffb17 	ldw	r2,-20(fp)
 80205a4:	01400704 	movi	r5,28
 80205a8:	1009883a 	mov	r4,r2
 80205ac:	8020ad40 	call	8020ad4 <__mulsi3>
 80205b0:	1007883a 	mov	r3,r2
 80205b4:	e0bffc17 	ldw	r2,-16(fp)
 80205b8:	10c5883a 	add	r2,r2,r3
 80205bc:	10800117 	ldw	r2,4(r2)
 80205c0:	00801916 	blt	zero,r2,8020628 <update_rect+0x3bc>
			rect[i].y = 0;
 80205c4:	e0bffb17 	ldw	r2,-20(fp)
 80205c8:	01400704 	movi	r5,28
 80205cc:	1009883a 	mov	r4,r2
 80205d0:	8020ad40 	call	8020ad4 <__mulsi3>
 80205d4:	1007883a 	mov	r3,r2
 80205d8:	e0bffc17 	ldw	r2,-16(fp)
 80205dc:	10c5883a 	add	r2,r2,r3
 80205e0:	10000115 	stw	zero,4(r2)
			rect[i].yspeed *= -1;
 80205e4:	e0bffb17 	ldw	r2,-20(fp)
 80205e8:	01400704 	movi	r5,28
 80205ec:	1009883a 	mov	r4,r2
 80205f0:	8020ad40 	call	8020ad4 <__mulsi3>
 80205f4:	1007883a 	mov	r3,r2
 80205f8:	e0bffc17 	ldw	r2,-16(fp)
 80205fc:	10e1883a 	add	r16,r2,r3
 8020600:	e0bffb17 	ldw	r2,-20(fp)
 8020604:	01400704 	movi	r5,28
 8020608:	1009883a 	mov	r4,r2
 802060c:	8020ad40 	call	8020ad4 <__mulsi3>
 8020610:	1007883a 	mov	r3,r2
 8020614:	e0bffc17 	ldw	r2,-16(fp)
 8020618:	10c5883a 	add	r2,r2,r3
 802061c:	10800317 	ldw	r2,12(r2)
 8020620:	0085c83a 	sub	r2,zero,r2
 8020624:	80800315 	stw	r2,12(r16)
};
typedef struct Rectangle Rectangle;

// Updates the position of each Rectangle object
void update_rect(Rectangle rect[], int len) {
	for(int i = 0; i< len; i++) {
 8020628:	e0bffb17 	ldw	r2,-20(fp)
 802062c:	10800044 	addi	r2,r2,1
 8020630:	e0bffb15 	stw	r2,-20(fp)
 8020634:	e0fffb17 	ldw	r3,-20(fp)
 8020638:	e0bffd17 	ldw	r2,-12(fp)
 802063c:	18bf1516 	blt	r3,r2,8020294 <__alt_data_end+0xfffe0e94>
		else if (rect[i].y <= 0) {
			rect[i].y = 0;
			rect[i].yspeed *= -1;
		}
	}
}
 8020640:	0001883a 	nop
 8020644:	e6fffe04 	addi	sp,fp,-8
 8020648:	dfc00317 	ldw	ra,12(sp)
 802064c:	df000217 	ldw	fp,8(sp)
 8020650:	dc400117 	ldw	r17,4(sp)
 8020654:	dc000017 	ldw	r16,0(sp)
 8020658:	dec00404 	addi	sp,sp,16
 802065c:	f800283a 	ret

08020660 <draw>:
// Renders game components on the screen
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
 8020660:	defff204 	addi	sp,sp,-56
 8020664:	dfc00d15 	stw	ra,52(sp)
 8020668:	df000c15 	stw	fp,48(sp)
 802066c:	dcc00b15 	stw	r19,44(sp)
 8020670:	dc800a15 	stw	r18,40(sp)
 8020674:	dc400915 	stw	r17,36(sp)
 8020678:	dc000815 	stw	r16,32(sp)
 802067c:	df000c04 	addi	fp,sp,48
 8020680:	e13ff815 	stw	r4,-32(fp)
 8020684:	e17ff915 	stw	r5,-28(fp)
 8020688:	e1bffa15 	stw	r6,-24(fp)
 802068c:	e1fffb15 	stw	r7,-20(fp)
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
 8020690:	e17ffb17 	ldw	r5,-20(fp)
 8020694:	e13ffa17 	ldw	r4,-24(fp)
 8020698:	80252740 	call	8025274 <alt_up_pixel_buffer_dma_clear_screen>
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
 802069c:	e03ff715 	stw	zero,-36(fp)
 80206a0:	00004806 	br	80207c4 <draw+0x164>
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80206a4:	e0bff717 	ldw	r2,-36(fp)
 80206a8:	01400704 	movi	r5,28
 80206ac:	1009883a 	mov	r4,r2
 80206b0:	8020ad40 	call	8020ad4 <__mulsi3>
 80206b4:	1007883a 	mov	r3,r2
 80206b8:	e0bff817 	ldw	r2,-32(fp)
 80206bc:	10c5883a 	add	r2,r2,r3
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 80206c0:	14400017 	ldw	r17,0(r2)
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80206c4:	e0bff717 	ldw	r2,-36(fp)
 80206c8:	01400704 	movi	r5,28
 80206cc:	1009883a 	mov	r4,r2
 80206d0:	8020ad40 	call	8020ad4 <__mulsi3>
 80206d4:	1007883a 	mov	r3,r2
 80206d8:	e0bff817 	ldw	r2,-32(fp)
 80206dc:	10c5883a 	add	r2,r2,r3
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 80206e0:	14800117 	ldw	r18,4(r2)
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80206e4:	e0bff717 	ldw	r2,-36(fp)
 80206e8:	01400704 	movi	r5,28
 80206ec:	1009883a 	mov	r4,r2
 80206f0:	8020ad40 	call	8020ad4 <__mulsi3>
 80206f4:	1007883a 	mov	r3,r2
 80206f8:	e0bff817 	ldw	r2,-32(fp)
 80206fc:	10c5883a 	add	r2,r2,r3
 8020700:	14000017 	ldw	r16,0(r2)
 8020704:	e0bff717 	ldw	r2,-36(fp)
 8020708:	01400704 	movi	r5,28
 802070c:	1009883a 	mov	r4,r2
 8020710:	8020ad40 	call	8020ad4 <__mulsi3>
 8020714:	1007883a 	mov	r3,r2
 8020718:	e0bff817 	ldw	r2,-32(fp)
 802071c:	10c5883a 	add	r2,r2,r3
 8020720:	10800417 	ldw	r2,16(r2)
 8020724:	8085883a 	add	r2,r16,r2
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020728:	14ffffc4 	addi	r19,r2,-1
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
 802072c:	e0bff717 	ldw	r2,-36(fp)
 8020730:	01400704 	movi	r5,28
 8020734:	1009883a 	mov	r4,r2
 8020738:	8020ad40 	call	8020ad4 <__mulsi3>
 802073c:	1007883a 	mov	r3,r2
 8020740:	e0bff817 	ldw	r2,-32(fp)
 8020744:	10c5883a 	add	r2,r2,r3
 8020748:	14000117 	ldw	r16,4(r2)
 802074c:	e0bff717 	ldw	r2,-36(fp)
 8020750:	01400704 	movi	r5,28
 8020754:	1009883a 	mov	r4,r2
 8020758:	8020ad40 	call	8020ad4 <__mulsi3>
 802075c:	1007883a 	mov	r3,r2
 8020760:	e0bff817 	ldw	r2,-32(fp)
 8020764:	10c5883a 	add	r2,r2,r3
 8020768:	10800517 	ldw	r2,20(r2)
 802076c:	8085883a 	add	r2,r16,r2
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020770:	143fffc4 	addi	r16,r2,-1
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
				rect[i].colour, buffer);
 8020774:	e0bff717 	ldw	r2,-36(fp)
 8020778:	01400704 	movi	r5,28
 802077c:	1009883a 	mov	r4,r2
 8020780:	8020ad40 	call	8020ad4 <__mulsi3>
 8020784:	1007883a 	mov	r3,r2
 8020788:	e0bff817 	ldw	r2,-32(fp)
 802078c:	10c5883a 	add	r2,r2,r3
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020790:	10800617 	ldw	r2,24(r2)
 8020794:	e0fffb17 	ldw	r3,-20(fp)
 8020798:	d8c00215 	stw	r3,8(sp)
 802079c:	d8800115 	stw	r2,4(sp)
 80207a0:	dc000015 	stw	r16,0(sp)
 80207a4:	980f883a 	mov	r7,r19
 80207a8:	900d883a 	mov	r6,r18
 80207ac:	880b883a 	mov	r5,r17
 80207b0:	e13ffa17 	ldw	r4,-24(fp)
 80207b4:	80253b00 	call	80253b0 <alt_up_pixel_buffer_dma_draw_box>
// Renders game components on the screen
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
 80207b8:	e0bff717 	ldw	r2,-36(fp)
 80207bc:	10800044 	addi	r2,r2,1
 80207c0:	e0bff715 	stw	r2,-36(fp)
 80207c4:	e0fff717 	ldw	r3,-36(fp)
 80207c8:	e0bff917 	ldw	r2,-28(fp)
 80207cc:	18bfb516 	blt	r3,r2,80206a4 <__alt_data_end+0xfffe12a4>
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
				rect[i].colour, buffer);
	}
}
 80207d0:	0001883a 	nop
 80207d4:	e6fffc04 	addi	sp,fp,-16
 80207d8:	dfc00517 	ldw	ra,20(sp)
 80207dc:	df000417 	ldw	fp,16(sp)
 80207e0:	dcc00317 	ldw	r19,12(sp)
 80207e4:	dc800217 	ldw	r18,8(sp)
 80207e8:	dc400117 	ldw	r17,4(sp)
 80207ec:	dc000017 	ldw	r16,0(sp)
 80207f0:	dec00604 	addi	sp,sp,24
 80207f4:	f800283a 	ret

080207f8 <main>:
int main()
{
 80207f8:	deffee04 	addi	sp,sp,-72
 80207fc:	dfc01115 	stw	ra,68(sp)
 8020800:	df001015 	stw	fp,64(sp)
 8020804:	dd000f15 	stw	r20,60(sp)
 8020808:	dcc00e15 	stw	r19,56(sp)
 802080c:	dc800d15 	stw	r18,52(sp)
 8020810:	dc400c15 	stw	r17,48(sp)
 8020814:	dc000b15 	stw	r16,44(sp)
 8020818:	df001004 	addi	fp,sp,64
	printf("Test from Nios II!\n");
 802081c:	010200b4 	movhi	r4,2050
 8020820:	211c9504 	addi	r4,r4,29268
 8020824:	8020bbc0 	call	8020bbc <puts>
	// Have to set up these pointers to open the device
	// Reference : https://faculty-web.msoe.edu/johnsontimoj/EE3921/files3921/nios_pixel_sw.pdf
	alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
 8020828:	010200b4 	movhi	r4,2050
 802082c:	211c9a04 	addi	r4,r4,29288
 8020830:	8024fa00 	call	8024fa0 <alt_up_pixel_buffer_dma_open_dev>
 8020834:	e0bff015 	stw	r2,-64(fp)
	// Check for error
	if ( pixel_buf_dma_dev == NULL)
 8020838:	e0bff017 	ldw	r2,-64(fp)
 802083c:	1000041e 	bne	r2,zero,8020850 <main+0x58>
		printf ("Error: could not open pixel buffer device \n");
 8020840:	010200b4 	movhi	r4,2050
 8020844:	211ca204 	addi	r4,r4,29320
 8020848:	8020bbc0 	call	8020bbc <puts>
 802084c:	00000306 	br	802085c <main+0x64>
	else
		printf ("Opened pixel buffer device \n");
 8020850:	010200b4 	movhi	r4,2050
 8020854:	211cad04 	addi	r4,r4,29364
 8020858:	8020bbc0 	call	8020bbc <puts>

	// Game objects
	int num_rectangles = 1;
 802085c:	00800044 	movi	r2,1
 8020860:	e0bff115 	stw	r2,-60(fp)
	Rectangle rect[num_rectangles];
 8020864:	e43ff117 	ldw	r16,-60(fp)
 8020868:	80bfffc4 	addi	r2,r16,-1
 802086c:	e0bff215 	stw	r2,-56(fp)
 8020870:	8005883a 	mov	r2,r16
 8020874:	1027883a 	mov	r19,r2
 8020878:	0029883a 	mov	r20,zero
 802087c:	01803804 	movi	r6,224
 8020880:	000f883a 	mov	r7,zero
 8020884:	9809883a 	mov	r4,r19
 8020888:	a00b883a 	mov	r5,r20
 802088c:	80209c80 	call	80209c8 <__muldi3>
 8020890:	1009883a 	mov	r4,r2
 8020894:	180b883a 	mov	r5,r3
 8020898:	2005883a 	mov	r2,r4
 802089c:	2807883a 	mov	r3,r5
 80208a0:	8005883a 	mov	r2,r16
 80208a4:	01400704 	movi	r5,28
 80208a8:	1009883a 	mov	r4,r2
 80208ac:	8020ad40 	call	8020ad4 <__mulsi3>
 80208b0:	8005883a 	mov	r2,r16
 80208b4:	1023883a 	mov	r17,r2
 80208b8:	0025883a 	mov	r18,zero
 80208bc:	01803804 	movi	r6,224
 80208c0:	000f883a 	mov	r7,zero
 80208c4:	8809883a 	mov	r4,r17
 80208c8:	900b883a 	mov	r5,r18
 80208cc:	80209c80 	call	80209c8 <__muldi3>
 80208d0:	1009883a 	mov	r4,r2
 80208d4:	180b883a 	mov	r5,r3
 80208d8:	2005883a 	mov	r2,r4
 80208dc:	2807883a 	mov	r3,r5
 80208e0:	8005883a 	mov	r2,r16
 80208e4:	01400704 	movi	r5,28
 80208e8:	1009883a 	mov	r4,r2
 80208ec:	8020ad40 	call	8020ad4 <__mulsi3>
 80208f0:	108000c4 	addi	r2,r2,3
 80208f4:	108000c4 	addi	r2,r2,3
 80208f8:	1004d0ba 	srli	r2,r2,2
 80208fc:	1085883a 	add	r2,r2,r2
 8020900:	1085883a 	add	r2,r2,r2
 8020904:	d8b7c83a 	sub	sp,sp,r2
 8020908:	d805883a 	mov	r2,sp
 802090c:	108000c4 	addi	r2,r2,3
 8020910:	1004d0ba 	srli	r2,r2,2
 8020914:	1085883a 	add	r2,r2,r2
 8020918:	1085883a 	add	r2,r2,r2
 802091c:	e0bff315 	stw	r2,-52(fp)
	Rectangle ball = {100, 100, 10, 5, 50, 50, 0xFFFF};
 8020920:	00801904 	movi	r2,100
 8020924:	e0bff415 	stw	r2,-48(fp)
 8020928:	00801904 	movi	r2,100
 802092c:	e0bff515 	stw	r2,-44(fp)
 8020930:	00800284 	movi	r2,10
 8020934:	e0bff615 	stw	r2,-40(fp)
 8020938:	00800144 	movi	r2,5
 802093c:	e0bff715 	stw	r2,-36(fp)
 8020940:	00800c84 	movi	r2,50
 8020944:	e0bff815 	stw	r2,-32(fp)
 8020948:	00800c84 	movi	r2,50
 802094c:	e0bff915 	stw	r2,-28(fp)
 8020950:	00bfffd4 	movui	r2,65535
 8020954:	e0bffa15 	stw	r2,-24(fp)
	rect[0] = ball;
 8020958:	e0bff317 	ldw	r2,-52(fp)
 802095c:	e0fff417 	ldw	r3,-48(fp)
 8020960:	10c00015 	stw	r3,0(r2)
 8020964:	e0fff517 	ldw	r3,-44(fp)
 8020968:	10c00115 	stw	r3,4(r2)
 802096c:	e0fff617 	ldw	r3,-40(fp)
 8020970:	10c00215 	stw	r3,8(r2)
 8020974:	e0fff717 	ldw	r3,-36(fp)
 8020978:	10c00315 	stw	r3,12(r2)
 802097c:	e0fff817 	ldw	r3,-32(fp)
 8020980:	10c00415 	stw	r3,16(r2)
 8020984:	e0fff917 	ldw	r3,-28(fp)
 8020988:	10c00515 	stw	r3,20(r2)
 802098c:	e0fffa17 	ldw	r3,-24(fp)
 8020990:	10c00615 	stw	r3,24(r2)
	while(1) {
		// Game logic
		update_rect(rect, num_rectangles);
 8020994:	e0bff317 	ldw	r2,-52(fp)
 8020998:	e17ff117 	ldw	r5,-60(fp)
 802099c:	1009883a 	mov	r4,r2
 80209a0:	802026c0 	call	802026c <update_rect>
		// Render the screen
		draw(rect, num_rectangles, pixel_buf_dma_dev, 1);
 80209a4:	e0bff317 	ldw	r2,-52(fp)
 80209a8:	01c00044 	movi	r7,1
 80209ac:	e1bff017 	ldw	r6,-64(fp)
 80209b0:	e17ff117 	ldw	r5,-60(fp)
 80209b4:	1009883a 	mov	r4,r2
 80209b8:	80206600 	call	8020660 <draw>
		usleep(10000);// 0.01sec
 80209bc:	0109c404 	movi	r4,10000
 80209c0:	80241380 	call	8024138 <usleep>
	}
 80209c4:	003ff306 	br	8020994 <__alt_data_end+0xfffe1594>

080209c8 <__muldi3>:
 80209c8:	defff604 	addi	sp,sp,-40
 80209cc:	dd800615 	stw	r22,24(sp)
 80209d0:	dd400515 	stw	r21,20(sp)
 80209d4:	dc400115 	stw	r17,4(sp)
 80209d8:	357fffcc 	andi	r21,r6,65535
 80209dc:	2022d43a 	srli	r17,r4,16
 80209e0:	25bfffcc 	andi	r22,r4,65535
 80209e4:	dcc00315 	stw	r19,12(sp)
 80209e8:	dc800215 	stw	r18,8(sp)
 80209ec:	2027883a 	mov	r19,r4
 80209f0:	2825883a 	mov	r18,r5
 80209f4:	b009883a 	mov	r4,r22
 80209f8:	a80b883a 	mov	r5,r21
 80209fc:	dfc00915 	stw	ra,36(sp)
 8020a00:	df000815 	stw	fp,32(sp)
 8020a04:	ddc00715 	stw	r23,28(sp)
 8020a08:	3839883a 	mov	fp,r7
 8020a0c:	302ed43a 	srli	r23,r6,16
 8020a10:	dd000415 	stw	r20,16(sp)
 8020a14:	dc000015 	stw	r16,0(sp)
 8020a18:	3029883a 	mov	r20,r6
 8020a1c:	8020ad40 	call	8020ad4 <__mulsi3>
 8020a20:	a80b883a 	mov	r5,r21
 8020a24:	8809883a 	mov	r4,r17
 8020a28:	1021883a 	mov	r16,r2
 8020a2c:	8020ad40 	call	8020ad4 <__mulsi3>
 8020a30:	8809883a 	mov	r4,r17
 8020a34:	b80b883a 	mov	r5,r23
 8020a38:	102b883a 	mov	r21,r2
 8020a3c:	8020ad40 	call	8020ad4 <__mulsi3>
 8020a40:	b80b883a 	mov	r5,r23
 8020a44:	b009883a 	mov	r4,r22
 8020a48:	1023883a 	mov	r17,r2
 8020a4c:	8020ad40 	call	8020ad4 <__mulsi3>
 8020a50:	8006d43a 	srli	r3,r16,16
 8020a54:	1545883a 	add	r2,r2,r21
 8020a58:	1885883a 	add	r2,r3,r2
 8020a5c:	1540022e 	bgeu	r2,r21,8020a68 <__muldi3+0xa0>
 8020a60:	00c00074 	movhi	r3,1
 8020a64:	88e3883a 	add	r17,r17,r3
 8020a68:	1006d43a 	srli	r3,r2,16
 8020a6c:	1004943a 	slli	r2,r2,16
 8020a70:	e00b883a 	mov	r5,fp
 8020a74:	9809883a 	mov	r4,r19
 8020a78:	843fffcc 	andi	r16,r16,65535
 8020a7c:	1c63883a 	add	r17,r3,r17
 8020a80:	1421883a 	add	r16,r2,r16
 8020a84:	8020ad40 	call	8020ad4 <__mulsi3>
 8020a88:	900b883a 	mov	r5,r18
 8020a8c:	a009883a 	mov	r4,r20
 8020a90:	1027883a 	mov	r19,r2
 8020a94:	8020ad40 	call	8020ad4 <__mulsi3>
 8020a98:	9885883a 	add	r2,r19,r2
 8020a9c:	1447883a 	add	r3,r2,r17
 8020aa0:	8005883a 	mov	r2,r16
 8020aa4:	dfc00917 	ldw	ra,36(sp)
 8020aa8:	df000817 	ldw	fp,32(sp)
 8020aac:	ddc00717 	ldw	r23,28(sp)
 8020ab0:	dd800617 	ldw	r22,24(sp)
 8020ab4:	dd400517 	ldw	r21,20(sp)
 8020ab8:	dd000417 	ldw	r20,16(sp)
 8020abc:	dcc00317 	ldw	r19,12(sp)
 8020ac0:	dc800217 	ldw	r18,8(sp)
 8020ac4:	dc400117 	ldw	r17,4(sp)
 8020ac8:	dc000017 	ldw	r16,0(sp)
 8020acc:	dec00a04 	addi	sp,sp,40
 8020ad0:	f800283a 	ret

08020ad4 <__mulsi3>:
 8020ad4:	0005883a 	mov	r2,zero
 8020ad8:	20000726 	beq	r4,zero,8020af8 <__mulsi3+0x24>
 8020adc:	20c0004c 	andi	r3,r4,1
 8020ae0:	2008d07a 	srli	r4,r4,1
 8020ae4:	18000126 	beq	r3,zero,8020aec <__mulsi3+0x18>
 8020ae8:	1145883a 	add	r2,r2,r5
 8020aec:	294b883a 	add	r5,r5,r5
 8020af0:	203ffa1e 	bne	r4,zero,8020adc <__alt_data_end+0xfffe16dc>
 8020af4:	f800283a 	ret
 8020af8:	f800283a 	ret

08020afc <_puts_r>:
 8020afc:	defff604 	addi	sp,sp,-40
 8020b00:	dc000715 	stw	r16,28(sp)
 8020b04:	2021883a 	mov	r16,r4
 8020b08:	2809883a 	mov	r4,r5
 8020b0c:	dc400815 	stw	r17,32(sp)
 8020b10:	dfc00915 	stw	ra,36(sp)
 8020b14:	2823883a 	mov	r17,r5
 8020b18:	8020bd00 	call	8020bd0 <strlen>
 8020b1c:	10c00044 	addi	r3,r2,1
 8020b20:	d8800115 	stw	r2,4(sp)
 8020b24:	008200b4 	movhi	r2,2050
 8020b28:	109cb404 	addi	r2,r2,29392
 8020b2c:	d8800215 	stw	r2,8(sp)
 8020b30:	00800044 	movi	r2,1
 8020b34:	d8800315 	stw	r2,12(sp)
 8020b38:	00800084 	movi	r2,2
 8020b3c:	dc400015 	stw	r17,0(sp)
 8020b40:	d8c00615 	stw	r3,24(sp)
 8020b44:	dec00415 	stw	sp,16(sp)
 8020b48:	d8800515 	stw	r2,20(sp)
 8020b4c:	80000226 	beq	r16,zero,8020b58 <_puts_r+0x5c>
 8020b50:	80800e17 	ldw	r2,56(r16)
 8020b54:	10001426 	beq	r2,zero,8020ba8 <_puts_r+0xac>
 8020b58:	81400217 	ldw	r5,8(r16)
 8020b5c:	2880030b 	ldhu	r2,12(r5)
 8020b60:	10c8000c 	andi	r3,r2,8192
 8020b64:	1800061e 	bne	r3,zero,8020b80 <_puts_r+0x84>
 8020b68:	29001917 	ldw	r4,100(r5)
 8020b6c:	00f7ffc4 	movi	r3,-8193
 8020b70:	10880014 	ori	r2,r2,8192
 8020b74:	20c6703a 	and	r3,r4,r3
 8020b78:	2880030d 	sth	r2,12(r5)
 8020b7c:	28c01915 	stw	r3,100(r5)
 8020b80:	d9800404 	addi	r6,sp,16
 8020b84:	8009883a 	mov	r4,r16
 8020b88:	80210180 	call	8021018 <__sfvwrite_r>
 8020b8c:	1000091e 	bne	r2,zero,8020bb4 <_puts_r+0xb8>
 8020b90:	00800284 	movi	r2,10
 8020b94:	dfc00917 	ldw	ra,36(sp)
 8020b98:	dc400817 	ldw	r17,32(sp)
 8020b9c:	dc000717 	ldw	r16,28(sp)
 8020ba0:	dec00a04 	addi	sp,sp,40
 8020ba4:	f800283a 	ret
 8020ba8:	8009883a 	mov	r4,r16
 8020bac:	8020fc80 	call	8020fc8 <__sinit>
 8020bb0:	003fe906 	br	8020b58 <__alt_data_end+0xfffe1758>
 8020bb4:	00bfffc4 	movi	r2,-1
 8020bb8:	003ff606 	br	8020b94 <__alt_data_end+0xfffe1794>

08020bbc <puts>:
 8020bbc:	008200f4 	movhi	r2,2051
 8020bc0:	10a36e04 	addi	r2,r2,-29256
 8020bc4:	200b883a 	mov	r5,r4
 8020bc8:	11000017 	ldw	r4,0(r2)
 8020bcc:	8020afc1 	jmpi	8020afc <_puts_r>

08020bd0 <strlen>:
 8020bd0:	208000cc 	andi	r2,r4,3
 8020bd4:	10002026 	beq	r2,zero,8020c58 <strlen+0x88>
 8020bd8:	20800007 	ldb	r2,0(r4)
 8020bdc:	10002026 	beq	r2,zero,8020c60 <strlen+0x90>
 8020be0:	2005883a 	mov	r2,r4
 8020be4:	00000206 	br	8020bf0 <strlen+0x20>
 8020be8:	10c00007 	ldb	r3,0(r2)
 8020bec:	18001826 	beq	r3,zero,8020c50 <strlen+0x80>
 8020bf0:	10800044 	addi	r2,r2,1
 8020bf4:	10c000cc 	andi	r3,r2,3
 8020bf8:	183ffb1e 	bne	r3,zero,8020be8 <__alt_data_end+0xfffe17e8>
 8020bfc:	10c00017 	ldw	r3,0(r2)
 8020c00:	01ffbff4 	movhi	r7,65279
 8020c04:	39ffbfc4 	addi	r7,r7,-257
 8020c08:	00ca303a 	nor	r5,zero,r3
 8020c0c:	01a02074 	movhi	r6,32897
 8020c10:	19c7883a 	add	r3,r3,r7
 8020c14:	31a02004 	addi	r6,r6,-32640
 8020c18:	1946703a 	and	r3,r3,r5
 8020c1c:	1986703a 	and	r3,r3,r6
 8020c20:	1800091e 	bne	r3,zero,8020c48 <strlen+0x78>
 8020c24:	10800104 	addi	r2,r2,4
 8020c28:	10c00017 	ldw	r3,0(r2)
 8020c2c:	19cb883a 	add	r5,r3,r7
 8020c30:	00c6303a 	nor	r3,zero,r3
 8020c34:	28c6703a 	and	r3,r5,r3
 8020c38:	1986703a 	and	r3,r3,r6
 8020c3c:	183ff926 	beq	r3,zero,8020c24 <__alt_data_end+0xfffe1824>
 8020c40:	00000106 	br	8020c48 <strlen+0x78>
 8020c44:	10800044 	addi	r2,r2,1
 8020c48:	10c00007 	ldb	r3,0(r2)
 8020c4c:	183ffd1e 	bne	r3,zero,8020c44 <__alt_data_end+0xfffe1844>
 8020c50:	1105c83a 	sub	r2,r2,r4
 8020c54:	f800283a 	ret
 8020c58:	2005883a 	mov	r2,r4
 8020c5c:	003fe706 	br	8020bfc <__alt_data_end+0xfffe17fc>
 8020c60:	0005883a 	mov	r2,zero
 8020c64:	f800283a 	ret

08020c68 <__fp_unlock>:
 8020c68:	0005883a 	mov	r2,zero
 8020c6c:	f800283a 	ret

08020c70 <_cleanup_r>:
 8020c70:	014200b4 	movhi	r5,2050
 8020c74:	294b0804 	addi	r5,r5,11296
 8020c78:	80215a41 	jmpi	80215a4 <_fwalk_reent>

08020c7c <__sinit.part.1>:
 8020c7c:	defff704 	addi	sp,sp,-36
 8020c80:	00c200b4 	movhi	r3,2050
 8020c84:	dfc00815 	stw	ra,32(sp)
 8020c88:	ddc00715 	stw	r23,28(sp)
 8020c8c:	dd800615 	stw	r22,24(sp)
 8020c90:	dd400515 	stw	r21,20(sp)
 8020c94:	dd000415 	stw	r20,16(sp)
 8020c98:	dcc00315 	stw	r19,12(sp)
 8020c9c:	dc800215 	stw	r18,8(sp)
 8020ca0:	dc400115 	stw	r17,4(sp)
 8020ca4:	dc000015 	stw	r16,0(sp)
 8020ca8:	18c31c04 	addi	r3,r3,3184
 8020cac:	24000117 	ldw	r16,4(r4)
 8020cb0:	20c00f15 	stw	r3,60(r4)
 8020cb4:	2080bb04 	addi	r2,r4,748
 8020cb8:	00c000c4 	movi	r3,3
 8020cbc:	20c0b915 	stw	r3,740(r4)
 8020cc0:	2080ba15 	stw	r2,744(r4)
 8020cc4:	2000b815 	stw	zero,736(r4)
 8020cc8:	05c00204 	movi	r23,8
 8020ccc:	00800104 	movi	r2,4
 8020cd0:	2025883a 	mov	r18,r4
 8020cd4:	b80d883a 	mov	r6,r23
 8020cd8:	81001704 	addi	r4,r16,92
 8020cdc:	000b883a 	mov	r5,zero
 8020ce0:	80000015 	stw	zero,0(r16)
 8020ce4:	80000115 	stw	zero,4(r16)
 8020ce8:	80000215 	stw	zero,8(r16)
 8020cec:	8080030d 	sth	r2,12(r16)
 8020cf0:	80001915 	stw	zero,100(r16)
 8020cf4:	8000038d 	sth	zero,14(r16)
 8020cf8:	80000415 	stw	zero,16(r16)
 8020cfc:	80000515 	stw	zero,20(r16)
 8020d00:	80000615 	stw	zero,24(r16)
 8020d04:	80221fc0 	call	80221fc <memset>
 8020d08:	058200b4 	movhi	r22,2050
 8020d0c:	94400217 	ldw	r17,8(r18)
 8020d10:	054200b4 	movhi	r21,2050
 8020d14:	050200b4 	movhi	r20,2050
 8020d18:	04c200b4 	movhi	r19,2050
 8020d1c:	b58a3704 	addi	r22,r22,10460
 8020d20:	ad4a4e04 	addi	r21,r21,10552
 8020d24:	a50a6d04 	addi	r20,r20,10676
 8020d28:	9cca8404 	addi	r19,r19,10768
 8020d2c:	85800815 	stw	r22,32(r16)
 8020d30:	85400915 	stw	r21,36(r16)
 8020d34:	85000a15 	stw	r20,40(r16)
 8020d38:	84c00b15 	stw	r19,44(r16)
 8020d3c:	84000715 	stw	r16,28(r16)
 8020d40:	00800284 	movi	r2,10
 8020d44:	8880030d 	sth	r2,12(r17)
 8020d48:	00800044 	movi	r2,1
 8020d4c:	b80d883a 	mov	r6,r23
 8020d50:	89001704 	addi	r4,r17,92
 8020d54:	000b883a 	mov	r5,zero
 8020d58:	88000015 	stw	zero,0(r17)
 8020d5c:	88000115 	stw	zero,4(r17)
 8020d60:	88000215 	stw	zero,8(r17)
 8020d64:	88001915 	stw	zero,100(r17)
 8020d68:	8880038d 	sth	r2,14(r17)
 8020d6c:	88000415 	stw	zero,16(r17)
 8020d70:	88000515 	stw	zero,20(r17)
 8020d74:	88000615 	stw	zero,24(r17)
 8020d78:	80221fc0 	call	80221fc <memset>
 8020d7c:	94000317 	ldw	r16,12(r18)
 8020d80:	00800484 	movi	r2,18
 8020d84:	8c400715 	stw	r17,28(r17)
 8020d88:	8d800815 	stw	r22,32(r17)
 8020d8c:	8d400915 	stw	r21,36(r17)
 8020d90:	8d000a15 	stw	r20,40(r17)
 8020d94:	8cc00b15 	stw	r19,44(r17)
 8020d98:	8080030d 	sth	r2,12(r16)
 8020d9c:	00800084 	movi	r2,2
 8020da0:	80000015 	stw	zero,0(r16)
 8020da4:	80000115 	stw	zero,4(r16)
 8020da8:	80000215 	stw	zero,8(r16)
 8020dac:	80001915 	stw	zero,100(r16)
 8020db0:	8080038d 	sth	r2,14(r16)
 8020db4:	80000415 	stw	zero,16(r16)
 8020db8:	80000515 	stw	zero,20(r16)
 8020dbc:	80000615 	stw	zero,24(r16)
 8020dc0:	b80d883a 	mov	r6,r23
 8020dc4:	000b883a 	mov	r5,zero
 8020dc8:	81001704 	addi	r4,r16,92
 8020dcc:	80221fc0 	call	80221fc <memset>
 8020dd0:	00800044 	movi	r2,1
 8020dd4:	84000715 	stw	r16,28(r16)
 8020dd8:	85800815 	stw	r22,32(r16)
 8020ddc:	85400915 	stw	r21,36(r16)
 8020de0:	85000a15 	stw	r20,40(r16)
 8020de4:	84c00b15 	stw	r19,44(r16)
 8020de8:	90800e15 	stw	r2,56(r18)
 8020dec:	dfc00817 	ldw	ra,32(sp)
 8020df0:	ddc00717 	ldw	r23,28(sp)
 8020df4:	dd800617 	ldw	r22,24(sp)
 8020df8:	dd400517 	ldw	r21,20(sp)
 8020dfc:	dd000417 	ldw	r20,16(sp)
 8020e00:	dcc00317 	ldw	r19,12(sp)
 8020e04:	dc800217 	ldw	r18,8(sp)
 8020e08:	dc400117 	ldw	r17,4(sp)
 8020e0c:	dc000017 	ldw	r16,0(sp)
 8020e10:	dec00904 	addi	sp,sp,36
 8020e14:	f800283a 	ret

08020e18 <__fp_lock>:
 8020e18:	0005883a 	mov	r2,zero
 8020e1c:	f800283a 	ret

08020e20 <__sfmoreglue>:
 8020e20:	defffc04 	addi	sp,sp,-16
 8020e24:	dc800215 	stw	r18,8(sp)
 8020e28:	2825883a 	mov	r18,r5
 8020e2c:	dc000015 	stw	r16,0(sp)
 8020e30:	01401a04 	movi	r5,104
 8020e34:	2021883a 	mov	r16,r4
 8020e38:	913fffc4 	addi	r4,r18,-1
 8020e3c:	dfc00315 	stw	ra,12(sp)
 8020e40:	dc400115 	stw	r17,4(sp)
 8020e44:	8020ad40 	call	8020ad4 <__mulsi3>
 8020e48:	8009883a 	mov	r4,r16
 8020e4c:	11401d04 	addi	r5,r2,116
 8020e50:	1023883a 	mov	r17,r2
 8020e54:	80216680 	call	8021668 <_malloc_r>
 8020e58:	1021883a 	mov	r16,r2
 8020e5c:	10000726 	beq	r2,zero,8020e7c <__sfmoreglue+0x5c>
 8020e60:	11000304 	addi	r4,r2,12
 8020e64:	10000015 	stw	zero,0(r2)
 8020e68:	14800115 	stw	r18,4(r2)
 8020e6c:	11000215 	stw	r4,8(r2)
 8020e70:	89801a04 	addi	r6,r17,104
 8020e74:	000b883a 	mov	r5,zero
 8020e78:	80221fc0 	call	80221fc <memset>
 8020e7c:	8005883a 	mov	r2,r16
 8020e80:	dfc00317 	ldw	ra,12(sp)
 8020e84:	dc800217 	ldw	r18,8(sp)
 8020e88:	dc400117 	ldw	r17,4(sp)
 8020e8c:	dc000017 	ldw	r16,0(sp)
 8020e90:	dec00404 	addi	sp,sp,16
 8020e94:	f800283a 	ret

08020e98 <__sfp>:
 8020e98:	defffb04 	addi	sp,sp,-20
 8020e9c:	dc000015 	stw	r16,0(sp)
 8020ea0:	040200f4 	movhi	r16,2051
 8020ea4:	84236d04 	addi	r16,r16,-29260
 8020ea8:	dcc00315 	stw	r19,12(sp)
 8020eac:	2027883a 	mov	r19,r4
 8020eb0:	81000017 	ldw	r4,0(r16)
 8020eb4:	dfc00415 	stw	ra,16(sp)
 8020eb8:	dc800215 	stw	r18,8(sp)
 8020ebc:	20800e17 	ldw	r2,56(r4)
 8020ec0:	dc400115 	stw	r17,4(sp)
 8020ec4:	1000021e 	bne	r2,zero,8020ed0 <__sfp+0x38>
 8020ec8:	8020c7c0 	call	8020c7c <__sinit.part.1>
 8020ecc:	81000017 	ldw	r4,0(r16)
 8020ed0:	2480b804 	addi	r18,r4,736
 8020ed4:	047fffc4 	movi	r17,-1
 8020ed8:	91000117 	ldw	r4,4(r18)
 8020edc:	94000217 	ldw	r16,8(r18)
 8020ee0:	213fffc4 	addi	r4,r4,-1
 8020ee4:	20000a16 	blt	r4,zero,8020f10 <__sfp+0x78>
 8020ee8:	8080030f 	ldh	r2,12(r16)
 8020eec:	10000c26 	beq	r2,zero,8020f20 <__sfp+0x88>
 8020ef0:	80c01d04 	addi	r3,r16,116
 8020ef4:	00000206 	br	8020f00 <__sfp+0x68>
 8020ef8:	18bfe60f 	ldh	r2,-104(r3)
 8020efc:	10000826 	beq	r2,zero,8020f20 <__sfp+0x88>
 8020f00:	213fffc4 	addi	r4,r4,-1
 8020f04:	1c3ffd04 	addi	r16,r3,-12
 8020f08:	18c01a04 	addi	r3,r3,104
 8020f0c:	247ffa1e 	bne	r4,r17,8020ef8 <__alt_data_end+0xfffe1af8>
 8020f10:	90800017 	ldw	r2,0(r18)
 8020f14:	10001d26 	beq	r2,zero,8020f8c <__sfp+0xf4>
 8020f18:	1025883a 	mov	r18,r2
 8020f1c:	003fee06 	br	8020ed8 <__alt_data_end+0xfffe1ad8>
 8020f20:	00bfffc4 	movi	r2,-1
 8020f24:	8080038d 	sth	r2,14(r16)
 8020f28:	00800044 	movi	r2,1
 8020f2c:	8080030d 	sth	r2,12(r16)
 8020f30:	80001915 	stw	zero,100(r16)
 8020f34:	80000015 	stw	zero,0(r16)
 8020f38:	80000215 	stw	zero,8(r16)
 8020f3c:	80000115 	stw	zero,4(r16)
 8020f40:	80000415 	stw	zero,16(r16)
 8020f44:	80000515 	stw	zero,20(r16)
 8020f48:	80000615 	stw	zero,24(r16)
 8020f4c:	01800204 	movi	r6,8
 8020f50:	000b883a 	mov	r5,zero
 8020f54:	81001704 	addi	r4,r16,92
 8020f58:	80221fc0 	call	80221fc <memset>
 8020f5c:	8005883a 	mov	r2,r16
 8020f60:	80000c15 	stw	zero,48(r16)
 8020f64:	80000d15 	stw	zero,52(r16)
 8020f68:	80001115 	stw	zero,68(r16)
 8020f6c:	80001215 	stw	zero,72(r16)
 8020f70:	dfc00417 	ldw	ra,16(sp)
 8020f74:	dcc00317 	ldw	r19,12(sp)
 8020f78:	dc800217 	ldw	r18,8(sp)
 8020f7c:	dc400117 	ldw	r17,4(sp)
 8020f80:	dc000017 	ldw	r16,0(sp)
 8020f84:	dec00504 	addi	sp,sp,20
 8020f88:	f800283a 	ret
 8020f8c:	01400104 	movi	r5,4
 8020f90:	9809883a 	mov	r4,r19
 8020f94:	8020e200 	call	8020e20 <__sfmoreglue>
 8020f98:	90800015 	stw	r2,0(r18)
 8020f9c:	103fde1e 	bne	r2,zero,8020f18 <__alt_data_end+0xfffe1b18>
 8020fa0:	00800304 	movi	r2,12
 8020fa4:	98800015 	stw	r2,0(r19)
 8020fa8:	0005883a 	mov	r2,zero
 8020fac:	003ff006 	br	8020f70 <__alt_data_end+0xfffe1b70>

08020fb0 <_cleanup>:
 8020fb0:	008200f4 	movhi	r2,2051
 8020fb4:	10a36d04 	addi	r2,r2,-29260
 8020fb8:	11000017 	ldw	r4,0(r2)
 8020fbc:	014200b4 	movhi	r5,2050
 8020fc0:	294b0804 	addi	r5,r5,11296
 8020fc4:	80215a41 	jmpi	80215a4 <_fwalk_reent>

08020fc8 <__sinit>:
 8020fc8:	20800e17 	ldw	r2,56(r4)
 8020fcc:	10000126 	beq	r2,zero,8020fd4 <__sinit+0xc>
 8020fd0:	f800283a 	ret
 8020fd4:	8020c7c1 	jmpi	8020c7c <__sinit.part.1>

08020fd8 <__sfp_lock_acquire>:
 8020fd8:	f800283a 	ret

08020fdc <__sfp_lock_release>:
 8020fdc:	f800283a 	ret

08020fe0 <__sinit_lock_acquire>:
 8020fe0:	f800283a 	ret

08020fe4 <__sinit_lock_release>:
 8020fe4:	f800283a 	ret

08020fe8 <__fp_lock_all>:
 8020fe8:	008200f4 	movhi	r2,2051
 8020fec:	10a36e04 	addi	r2,r2,-29256
 8020ff0:	11000017 	ldw	r4,0(r2)
 8020ff4:	014200b4 	movhi	r5,2050
 8020ff8:	29438604 	addi	r5,r5,3608
 8020ffc:	80214e01 	jmpi	80214e0 <_fwalk>

08021000 <__fp_unlock_all>:
 8021000:	008200f4 	movhi	r2,2051
 8021004:	10a36e04 	addi	r2,r2,-29256
 8021008:	11000017 	ldw	r4,0(r2)
 802100c:	014200b4 	movhi	r5,2050
 8021010:	29431a04 	addi	r5,r5,3176
 8021014:	80214e01 	jmpi	80214e0 <_fwalk>

08021018 <__sfvwrite_r>:
 8021018:	30800217 	ldw	r2,8(r6)
 802101c:	10006726 	beq	r2,zero,80211bc <__sfvwrite_r+0x1a4>
 8021020:	28c0030b 	ldhu	r3,12(r5)
 8021024:	defff404 	addi	sp,sp,-48
 8021028:	dd400715 	stw	r21,28(sp)
 802102c:	dd000615 	stw	r20,24(sp)
 8021030:	dc000215 	stw	r16,8(sp)
 8021034:	dfc00b15 	stw	ra,44(sp)
 8021038:	df000a15 	stw	fp,40(sp)
 802103c:	ddc00915 	stw	r23,36(sp)
 8021040:	dd800815 	stw	r22,32(sp)
 8021044:	dcc00515 	stw	r19,20(sp)
 8021048:	dc800415 	stw	r18,16(sp)
 802104c:	dc400315 	stw	r17,12(sp)
 8021050:	1880020c 	andi	r2,r3,8
 8021054:	2821883a 	mov	r16,r5
 8021058:	202b883a 	mov	r21,r4
 802105c:	3029883a 	mov	r20,r6
 8021060:	10002726 	beq	r2,zero,8021100 <__sfvwrite_r+0xe8>
 8021064:	28800417 	ldw	r2,16(r5)
 8021068:	10002526 	beq	r2,zero,8021100 <__sfvwrite_r+0xe8>
 802106c:	1880008c 	andi	r2,r3,2
 8021070:	a4400017 	ldw	r17,0(r20)
 8021074:	10002a26 	beq	r2,zero,8021120 <__sfvwrite_r+0x108>
 8021078:	05a00034 	movhi	r22,32768
 802107c:	0027883a 	mov	r19,zero
 8021080:	0025883a 	mov	r18,zero
 8021084:	b5bf0004 	addi	r22,r22,-1024
 8021088:	980d883a 	mov	r6,r19
 802108c:	a809883a 	mov	r4,r21
 8021090:	90004626 	beq	r18,zero,80211ac <__sfvwrite_r+0x194>
 8021094:	900f883a 	mov	r7,r18
 8021098:	b480022e 	bgeu	r22,r18,80210a4 <__sfvwrite_r+0x8c>
 802109c:	01e00034 	movhi	r7,32768
 80210a0:	39ff0004 	addi	r7,r7,-1024
 80210a4:	80800917 	ldw	r2,36(r16)
 80210a8:	81400717 	ldw	r5,28(r16)
 80210ac:	103ee83a 	callr	r2
 80210b0:	00805a0e 	bge	zero,r2,802121c <__sfvwrite_r+0x204>
 80210b4:	a0c00217 	ldw	r3,8(r20)
 80210b8:	98a7883a 	add	r19,r19,r2
 80210bc:	90a5c83a 	sub	r18,r18,r2
 80210c0:	1885c83a 	sub	r2,r3,r2
 80210c4:	a0800215 	stw	r2,8(r20)
 80210c8:	103fef1e 	bne	r2,zero,8021088 <__alt_data_end+0xfffe1c88>
 80210cc:	0005883a 	mov	r2,zero
 80210d0:	dfc00b17 	ldw	ra,44(sp)
 80210d4:	df000a17 	ldw	fp,40(sp)
 80210d8:	ddc00917 	ldw	r23,36(sp)
 80210dc:	dd800817 	ldw	r22,32(sp)
 80210e0:	dd400717 	ldw	r21,28(sp)
 80210e4:	dd000617 	ldw	r20,24(sp)
 80210e8:	dcc00517 	ldw	r19,20(sp)
 80210ec:	dc800417 	ldw	r18,16(sp)
 80210f0:	dc400317 	ldw	r17,12(sp)
 80210f4:	dc000217 	ldw	r16,8(sp)
 80210f8:	dec00c04 	addi	sp,sp,48
 80210fc:	f800283a 	ret
 8021100:	800b883a 	mov	r5,r16
 8021104:	a809883a 	mov	r4,r21
 8021108:	8022a780 	call	8022a78 <__swsetup_r>
 802110c:	1000ee1e 	bne	r2,zero,80214c8 <__sfvwrite_r+0x4b0>
 8021110:	80c0030b 	ldhu	r3,12(r16)
 8021114:	a4400017 	ldw	r17,0(r20)
 8021118:	1880008c 	andi	r2,r3,2
 802111c:	103fd61e 	bne	r2,zero,8021078 <__alt_data_end+0xfffe1c78>
 8021120:	1880004c 	andi	r2,r3,1
 8021124:	1000421e 	bne	r2,zero,8021230 <__sfvwrite_r+0x218>
 8021128:	0039883a 	mov	fp,zero
 802112c:	0025883a 	mov	r18,zero
 8021130:	90001a26 	beq	r18,zero,802119c <__sfvwrite_r+0x184>
 8021134:	1880800c 	andi	r2,r3,512
 8021138:	84c00217 	ldw	r19,8(r16)
 802113c:	10002126 	beq	r2,zero,80211c4 <__sfvwrite_r+0x1ac>
 8021140:	982f883a 	mov	r23,r19
 8021144:	94c09636 	bltu	r18,r19,80213a0 <__sfvwrite_r+0x388>
 8021148:	1881200c 	andi	r2,r3,1152
 802114c:	1000a11e 	bne	r2,zero,80213d4 <__sfvwrite_r+0x3bc>
 8021150:	81000017 	ldw	r4,0(r16)
 8021154:	b80d883a 	mov	r6,r23
 8021158:	e00b883a 	mov	r5,fp
 802115c:	80220a00 	call	80220a0 <memmove>
 8021160:	80c00217 	ldw	r3,8(r16)
 8021164:	81000017 	ldw	r4,0(r16)
 8021168:	9005883a 	mov	r2,r18
 802116c:	1ce7c83a 	sub	r19,r3,r19
 8021170:	25cf883a 	add	r7,r4,r23
 8021174:	84c00215 	stw	r19,8(r16)
 8021178:	81c00015 	stw	r7,0(r16)
 802117c:	a0c00217 	ldw	r3,8(r20)
 8021180:	e0b9883a 	add	fp,fp,r2
 8021184:	90a5c83a 	sub	r18,r18,r2
 8021188:	18a7c83a 	sub	r19,r3,r2
 802118c:	a4c00215 	stw	r19,8(r20)
 8021190:	983fce26 	beq	r19,zero,80210cc <__alt_data_end+0xfffe1ccc>
 8021194:	80c0030b 	ldhu	r3,12(r16)
 8021198:	903fe61e 	bne	r18,zero,8021134 <__alt_data_end+0xfffe1d34>
 802119c:	8f000017 	ldw	fp,0(r17)
 80211a0:	8c800117 	ldw	r18,4(r17)
 80211a4:	8c400204 	addi	r17,r17,8
 80211a8:	003fe106 	br	8021130 <__alt_data_end+0xfffe1d30>
 80211ac:	8cc00017 	ldw	r19,0(r17)
 80211b0:	8c800117 	ldw	r18,4(r17)
 80211b4:	8c400204 	addi	r17,r17,8
 80211b8:	003fb306 	br	8021088 <__alt_data_end+0xfffe1c88>
 80211bc:	0005883a 	mov	r2,zero
 80211c0:	f800283a 	ret
 80211c4:	81000017 	ldw	r4,0(r16)
 80211c8:	80800417 	ldw	r2,16(r16)
 80211cc:	11005a36 	bltu	r2,r4,8021338 <__sfvwrite_r+0x320>
 80211d0:	85c00517 	ldw	r23,20(r16)
 80211d4:	95c05836 	bltu	r18,r23,8021338 <__sfvwrite_r+0x320>
 80211d8:	00a00034 	movhi	r2,32768
 80211dc:	10bfffc4 	addi	r2,r2,-1
 80211e0:	9009883a 	mov	r4,r18
 80211e4:	1480012e 	bgeu	r2,r18,80211ec <__sfvwrite_r+0x1d4>
 80211e8:	1009883a 	mov	r4,r2
 80211ec:	b80b883a 	mov	r5,r23
 80211f0:	802372c0 	call	802372c <__divsi3>
 80211f4:	b80b883a 	mov	r5,r23
 80211f8:	1009883a 	mov	r4,r2
 80211fc:	8020ad40 	call	8020ad4 <__mulsi3>
 8021200:	81400717 	ldw	r5,28(r16)
 8021204:	80c00917 	ldw	r3,36(r16)
 8021208:	100f883a 	mov	r7,r2
 802120c:	e00d883a 	mov	r6,fp
 8021210:	a809883a 	mov	r4,r21
 8021214:	183ee83a 	callr	r3
 8021218:	00bfd816 	blt	zero,r2,802117c <__alt_data_end+0xfffe1d7c>
 802121c:	8080030b 	ldhu	r2,12(r16)
 8021220:	10801014 	ori	r2,r2,64
 8021224:	8080030d 	sth	r2,12(r16)
 8021228:	00bfffc4 	movi	r2,-1
 802122c:	003fa806 	br	80210d0 <__alt_data_end+0xfffe1cd0>
 8021230:	0027883a 	mov	r19,zero
 8021234:	0011883a 	mov	r8,zero
 8021238:	0039883a 	mov	fp,zero
 802123c:	0025883a 	mov	r18,zero
 8021240:	90001f26 	beq	r18,zero,80212c0 <__sfvwrite_r+0x2a8>
 8021244:	40005a26 	beq	r8,zero,80213b0 <__sfvwrite_r+0x398>
 8021248:	982d883a 	mov	r22,r19
 802124c:	94c0012e 	bgeu	r18,r19,8021254 <__sfvwrite_r+0x23c>
 8021250:	902d883a 	mov	r22,r18
 8021254:	81000017 	ldw	r4,0(r16)
 8021258:	80800417 	ldw	r2,16(r16)
 802125c:	b02f883a 	mov	r23,r22
 8021260:	81c00517 	ldw	r7,20(r16)
 8021264:	1100032e 	bgeu	r2,r4,8021274 <__sfvwrite_r+0x25c>
 8021268:	80c00217 	ldw	r3,8(r16)
 802126c:	38c7883a 	add	r3,r7,r3
 8021270:	1d801816 	blt	r3,r22,80212d4 <__sfvwrite_r+0x2bc>
 8021274:	b1c03e16 	blt	r22,r7,8021370 <__sfvwrite_r+0x358>
 8021278:	80800917 	ldw	r2,36(r16)
 802127c:	81400717 	ldw	r5,28(r16)
 8021280:	e00d883a 	mov	r6,fp
 8021284:	da000115 	stw	r8,4(sp)
 8021288:	a809883a 	mov	r4,r21
 802128c:	103ee83a 	callr	r2
 8021290:	102f883a 	mov	r23,r2
 8021294:	da000117 	ldw	r8,4(sp)
 8021298:	00bfe00e 	bge	zero,r2,802121c <__alt_data_end+0xfffe1e1c>
 802129c:	9de7c83a 	sub	r19,r19,r23
 80212a0:	98001f26 	beq	r19,zero,8021320 <__sfvwrite_r+0x308>
 80212a4:	a0800217 	ldw	r2,8(r20)
 80212a8:	e5f9883a 	add	fp,fp,r23
 80212ac:	95e5c83a 	sub	r18,r18,r23
 80212b0:	15efc83a 	sub	r23,r2,r23
 80212b4:	a5c00215 	stw	r23,8(r20)
 80212b8:	b83f8426 	beq	r23,zero,80210cc <__alt_data_end+0xfffe1ccc>
 80212bc:	903fe11e 	bne	r18,zero,8021244 <__alt_data_end+0xfffe1e44>
 80212c0:	8f000017 	ldw	fp,0(r17)
 80212c4:	8c800117 	ldw	r18,4(r17)
 80212c8:	0011883a 	mov	r8,zero
 80212cc:	8c400204 	addi	r17,r17,8
 80212d0:	003fdb06 	br	8021240 <__alt_data_end+0xfffe1e40>
 80212d4:	180d883a 	mov	r6,r3
 80212d8:	e00b883a 	mov	r5,fp
 80212dc:	da000115 	stw	r8,4(sp)
 80212e0:	d8c00015 	stw	r3,0(sp)
 80212e4:	80220a00 	call	80220a0 <memmove>
 80212e8:	d8c00017 	ldw	r3,0(sp)
 80212ec:	80800017 	ldw	r2,0(r16)
 80212f0:	800b883a 	mov	r5,r16
 80212f4:	a809883a 	mov	r4,r21
 80212f8:	10c5883a 	add	r2,r2,r3
 80212fc:	80800015 	stw	r2,0(r16)
 8021300:	d8c00015 	stw	r3,0(sp)
 8021304:	8022f400 	call	8022f40 <_fflush_r>
 8021308:	d8c00017 	ldw	r3,0(sp)
 802130c:	da000117 	ldw	r8,4(sp)
 8021310:	103fc21e 	bne	r2,zero,802121c <__alt_data_end+0xfffe1e1c>
 8021314:	182f883a 	mov	r23,r3
 8021318:	9de7c83a 	sub	r19,r19,r23
 802131c:	983fe11e 	bne	r19,zero,80212a4 <__alt_data_end+0xfffe1ea4>
 8021320:	800b883a 	mov	r5,r16
 8021324:	a809883a 	mov	r4,r21
 8021328:	8022f400 	call	8022f40 <_fflush_r>
 802132c:	103fbb1e 	bne	r2,zero,802121c <__alt_data_end+0xfffe1e1c>
 8021330:	0011883a 	mov	r8,zero
 8021334:	003fdb06 	br	80212a4 <__alt_data_end+0xfffe1ea4>
 8021338:	94c0012e 	bgeu	r18,r19,8021340 <__sfvwrite_r+0x328>
 802133c:	9027883a 	mov	r19,r18
 8021340:	980d883a 	mov	r6,r19
 8021344:	e00b883a 	mov	r5,fp
 8021348:	80220a00 	call	80220a0 <memmove>
 802134c:	80800217 	ldw	r2,8(r16)
 8021350:	80c00017 	ldw	r3,0(r16)
 8021354:	14c5c83a 	sub	r2,r2,r19
 8021358:	1cc7883a 	add	r3,r3,r19
 802135c:	80800215 	stw	r2,8(r16)
 8021360:	80c00015 	stw	r3,0(r16)
 8021364:	10004326 	beq	r2,zero,8021474 <__sfvwrite_r+0x45c>
 8021368:	9805883a 	mov	r2,r19
 802136c:	003f8306 	br	802117c <__alt_data_end+0xfffe1d7c>
 8021370:	b00d883a 	mov	r6,r22
 8021374:	e00b883a 	mov	r5,fp
 8021378:	da000115 	stw	r8,4(sp)
 802137c:	80220a00 	call	80220a0 <memmove>
 8021380:	80800217 	ldw	r2,8(r16)
 8021384:	80c00017 	ldw	r3,0(r16)
 8021388:	da000117 	ldw	r8,4(sp)
 802138c:	1585c83a 	sub	r2,r2,r22
 8021390:	1dad883a 	add	r22,r3,r22
 8021394:	80800215 	stw	r2,8(r16)
 8021398:	85800015 	stw	r22,0(r16)
 802139c:	003fbf06 	br	802129c <__alt_data_end+0xfffe1e9c>
 80213a0:	81000017 	ldw	r4,0(r16)
 80213a4:	9027883a 	mov	r19,r18
 80213a8:	902f883a 	mov	r23,r18
 80213ac:	003f6906 	br	8021154 <__alt_data_end+0xfffe1d54>
 80213b0:	900d883a 	mov	r6,r18
 80213b4:	01400284 	movi	r5,10
 80213b8:	e009883a 	mov	r4,fp
 80213bc:	8021e740 	call	8021e74 <memchr>
 80213c0:	10003e26 	beq	r2,zero,80214bc <__sfvwrite_r+0x4a4>
 80213c4:	10800044 	addi	r2,r2,1
 80213c8:	1727c83a 	sub	r19,r2,fp
 80213cc:	02000044 	movi	r8,1
 80213d0:	003f9d06 	br	8021248 <__alt_data_end+0xfffe1e48>
 80213d4:	80800517 	ldw	r2,20(r16)
 80213d8:	81400417 	ldw	r5,16(r16)
 80213dc:	81c00017 	ldw	r7,0(r16)
 80213e0:	10a7883a 	add	r19,r2,r2
 80213e4:	9885883a 	add	r2,r19,r2
 80213e8:	1026d7fa 	srli	r19,r2,31
 80213ec:	396dc83a 	sub	r22,r7,r5
 80213f0:	b1000044 	addi	r4,r22,1
 80213f4:	9885883a 	add	r2,r19,r2
 80213f8:	1027d07a 	srai	r19,r2,1
 80213fc:	2485883a 	add	r2,r4,r18
 8021400:	980d883a 	mov	r6,r19
 8021404:	9880022e 	bgeu	r19,r2,8021410 <__sfvwrite_r+0x3f8>
 8021408:	1027883a 	mov	r19,r2
 802140c:	100d883a 	mov	r6,r2
 8021410:	18c1000c 	andi	r3,r3,1024
 8021414:	18001c26 	beq	r3,zero,8021488 <__sfvwrite_r+0x470>
 8021418:	300b883a 	mov	r5,r6
 802141c:	a809883a 	mov	r4,r21
 8021420:	80216680 	call	8021668 <_malloc_r>
 8021424:	102f883a 	mov	r23,r2
 8021428:	10002926 	beq	r2,zero,80214d0 <__sfvwrite_r+0x4b8>
 802142c:	81400417 	ldw	r5,16(r16)
 8021430:	b00d883a 	mov	r6,r22
 8021434:	1009883a 	mov	r4,r2
 8021438:	8021f580 	call	8021f58 <memcpy>
 802143c:	8080030b 	ldhu	r2,12(r16)
 8021440:	00fedfc4 	movi	r3,-1153
 8021444:	10c4703a 	and	r2,r2,r3
 8021448:	10802014 	ori	r2,r2,128
 802144c:	8080030d 	sth	r2,12(r16)
 8021450:	bd89883a 	add	r4,r23,r22
 8021454:	9d8fc83a 	sub	r7,r19,r22
 8021458:	85c00415 	stw	r23,16(r16)
 802145c:	84c00515 	stw	r19,20(r16)
 8021460:	81000015 	stw	r4,0(r16)
 8021464:	9027883a 	mov	r19,r18
 8021468:	81c00215 	stw	r7,8(r16)
 802146c:	902f883a 	mov	r23,r18
 8021470:	003f3806 	br	8021154 <__alt_data_end+0xfffe1d54>
 8021474:	800b883a 	mov	r5,r16
 8021478:	a809883a 	mov	r4,r21
 802147c:	8022f400 	call	8022f40 <_fflush_r>
 8021480:	103fb926 	beq	r2,zero,8021368 <__alt_data_end+0xfffe1f68>
 8021484:	003f6506 	br	802121c <__alt_data_end+0xfffe1e1c>
 8021488:	a809883a 	mov	r4,r21
 802148c:	80223240 	call	8022324 <_realloc_r>
 8021490:	102f883a 	mov	r23,r2
 8021494:	103fee1e 	bne	r2,zero,8021450 <__alt_data_end+0xfffe2050>
 8021498:	81400417 	ldw	r5,16(r16)
 802149c:	a809883a 	mov	r4,r21
 80214a0:	80230f00 	call	80230f0 <_free_r>
 80214a4:	8080030b 	ldhu	r2,12(r16)
 80214a8:	00ffdfc4 	movi	r3,-129
 80214ac:	1884703a 	and	r2,r3,r2
 80214b0:	00c00304 	movi	r3,12
 80214b4:	a8c00015 	stw	r3,0(r21)
 80214b8:	003f5906 	br	8021220 <__alt_data_end+0xfffe1e20>
 80214bc:	94c00044 	addi	r19,r18,1
 80214c0:	02000044 	movi	r8,1
 80214c4:	003f6006 	br	8021248 <__alt_data_end+0xfffe1e48>
 80214c8:	00bfffc4 	movi	r2,-1
 80214cc:	003f0006 	br	80210d0 <__alt_data_end+0xfffe1cd0>
 80214d0:	00800304 	movi	r2,12
 80214d4:	a8800015 	stw	r2,0(r21)
 80214d8:	8080030b 	ldhu	r2,12(r16)
 80214dc:	003f5006 	br	8021220 <__alt_data_end+0xfffe1e20>

080214e0 <_fwalk>:
 80214e0:	defff704 	addi	sp,sp,-36
 80214e4:	dd000415 	stw	r20,16(sp)
 80214e8:	dfc00815 	stw	ra,32(sp)
 80214ec:	ddc00715 	stw	r23,28(sp)
 80214f0:	dd800615 	stw	r22,24(sp)
 80214f4:	dd400515 	stw	r21,20(sp)
 80214f8:	dcc00315 	stw	r19,12(sp)
 80214fc:	dc800215 	stw	r18,8(sp)
 8021500:	dc400115 	stw	r17,4(sp)
 8021504:	dc000015 	stw	r16,0(sp)
 8021508:	2500b804 	addi	r20,r4,736
 802150c:	a0002326 	beq	r20,zero,802159c <_fwalk+0xbc>
 8021510:	282b883a 	mov	r21,r5
 8021514:	002f883a 	mov	r23,zero
 8021518:	05800044 	movi	r22,1
 802151c:	04ffffc4 	movi	r19,-1
 8021520:	a4400117 	ldw	r17,4(r20)
 8021524:	a4800217 	ldw	r18,8(r20)
 8021528:	8c7fffc4 	addi	r17,r17,-1
 802152c:	88000d16 	blt	r17,zero,8021564 <_fwalk+0x84>
 8021530:	94000304 	addi	r16,r18,12
 8021534:	94800384 	addi	r18,r18,14
 8021538:	8080000b 	ldhu	r2,0(r16)
 802153c:	8c7fffc4 	addi	r17,r17,-1
 8021540:	813ffd04 	addi	r4,r16,-12
 8021544:	b080042e 	bgeu	r22,r2,8021558 <_fwalk+0x78>
 8021548:	9080000f 	ldh	r2,0(r18)
 802154c:	14c00226 	beq	r2,r19,8021558 <_fwalk+0x78>
 8021550:	a83ee83a 	callr	r21
 8021554:	b8aeb03a 	or	r23,r23,r2
 8021558:	84001a04 	addi	r16,r16,104
 802155c:	94801a04 	addi	r18,r18,104
 8021560:	8cfff51e 	bne	r17,r19,8021538 <__alt_data_end+0xfffe2138>
 8021564:	a5000017 	ldw	r20,0(r20)
 8021568:	a03fed1e 	bne	r20,zero,8021520 <__alt_data_end+0xfffe2120>
 802156c:	b805883a 	mov	r2,r23
 8021570:	dfc00817 	ldw	ra,32(sp)
 8021574:	ddc00717 	ldw	r23,28(sp)
 8021578:	dd800617 	ldw	r22,24(sp)
 802157c:	dd400517 	ldw	r21,20(sp)
 8021580:	dd000417 	ldw	r20,16(sp)
 8021584:	dcc00317 	ldw	r19,12(sp)
 8021588:	dc800217 	ldw	r18,8(sp)
 802158c:	dc400117 	ldw	r17,4(sp)
 8021590:	dc000017 	ldw	r16,0(sp)
 8021594:	dec00904 	addi	sp,sp,36
 8021598:	f800283a 	ret
 802159c:	002f883a 	mov	r23,zero
 80215a0:	003ff206 	br	802156c <__alt_data_end+0xfffe216c>

080215a4 <_fwalk_reent>:
 80215a4:	defff704 	addi	sp,sp,-36
 80215a8:	dd000415 	stw	r20,16(sp)
 80215ac:	dfc00815 	stw	ra,32(sp)
 80215b0:	ddc00715 	stw	r23,28(sp)
 80215b4:	dd800615 	stw	r22,24(sp)
 80215b8:	dd400515 	stw	r21,20(sp)
 80215bc:	dcc00315 	stw	r19,12(sp)
 80215c0:	dc800215 	stw	r18,8(sp)
 80215c4:	dc400115 	stw	r17,4(sp)
 80215c8:	dc000015 	stw	r16,0(sp)
 80215cc:	2500b804 	addi	r20,r4,736
 80215d0:	a0002326 	beq	r20,zero,8021660 <_fwalk_reent+0xbc>
 80215d4:	282b883a 	mov	r21,r5
 80215d8:	2027883a 	mov	r19,r4
 80215dc:	002f883a 	mov	r23,zero
 80215e0:	05800044 	movi	r22,1
 80215e4:	04bfffc4 	movi	r18,-1
 80215e8:	a4400117 	ldw	r17,4(r20)
 80215ec:	a4000217 	ldw	r16,8(r20)
 80215f0:	8c7fffc4 	addi	r17,r17,-1
 80215f4:	88000c16 	blt	r17,zero,8021628 <_fwalk_reent+0x84>
 80215f8:	84000304 	addi	r16,r16,12
 80215fc:	8080000b 	ldhu	r2,0(r16)
 8021600:	8c7fffc4 	addi	r17,r17,-1
 8021604:	817ffd04 	addi	r5,r16,-12
 8021608:	b080052e 	bgeu	r22,r2,8021620 <_fwalk_reent+0x7c>
 802160c:	8080008f 	ldh	r2,2(r16)
 8021610:	9809883a 	mov	r4,r19
 8021614:	14800226 	beq	r2,r18,8021620 <_fwalk_reent+0x7c>
 8021618:	a83ee83a 	callr	r21
 802161c:	b8aeb03a 	or	r23,r23,r2
 8021620:	84001a04 	addi	r16,r16,104
 8021624:	8cbff51e 	bne	r17,r18,80215fc <__alt_data_end+0xfffe21fc>
 8021628:	a5000017 	ldw	r20,0(r20)
 802162c:	a03fee1e 	bne	r20,zero,80215e8 <__alt_data_end+0xfffe21e8>
 8021630:	b805883a 	mov	r2,r23
 8021634:	dfc00817 	ldw	ra,32(sp)
 8021638:	ddc00717 	ldw	r23,28(sp)
 802163c:	dd800617 	ldw	r22,24(sp)
 8021640:	dd400517 	ldw	r21,20(sp)
 8021644:	dd000417 	ldw	r20,16(sp)
 8021648:	dcc00317 	ldw	r19,12(sp)
 802164c:	dc800217 	ldw	r18,8(sp)
 8021650:	dc400117 	ldw	r17,4(sp)
 8021654:	dc000017 	ldw	r16,0(sp)
 8021658:	dec00904 	addi	sp,sp,36
 802165c:	f800283a 	ret
 8021660:	002f883a 	mov	r23,zero
 8021664:	003ff206 	br	8021630 <__alt_data_end+0xfffe2230>

08021668 <_malloc_r>:
 8021668:	defff504 	addi	sp,sp,-44
 802166c:	dc800315 	stw	r18,12(sp)
 8021670:	dfc00a15 	stw	ra,40(sp)
 8021674:	df000915 	stw	fp,36(sp)
 8021678:	ddc00815 	stw	r23,32(sp)
 802167c:	dd800715 	stw	r22,28(sp)
 8021680:	dd400615 	stw	r21,24(sp)
 8021684:	dd000515 	stw	r20,20(sp)
 8021688:	dcc00415 	stw	r19,16(sp)
 802168c:	dc400215 	stw	r17,8(sp)
 8021690:	dc000115 	stw	r16,4(sp)
 8021694:	288002c4 	addi	r2,r5,11
 8021698:	00c00584 	movi	r3,22
 802169c:	2025883a 	mov	r18,r4
 80216a0:	18807f2e 	bgeu	r3,r2,80218a0 <_malloc_r+0x238>
 80216a4:	047ffe04 	movi	r17,-8
 80216a8:	1462703a 	and	r17,r2,r17
 80216ac:	8800a316 	blt	r17,zero,802193c <_malloc_r+0x2d4>
 80216b0:	8940a236 	bltu	r17,r5,802193c <_malloc_r+0x2d4>
 80216b4:	8023e7c0 	call	8023e7c <__malloc_lock>
 80216b8:	00807dc4 	movi	r2,503
 80216bc:	1441e92e 	bgeu	r2,r17,8021e64 <_malloc_r+0x7fc>
 80216c0:	8804d27a 	srli	r2,r17,9
 80216c4:	1000a126 	beq	r2,zero,802194c <_malloc_r+0x2e4>
 80216c8:	00c00104 	movi	r3,4
 80216cc:	18811e36 	bltu	r3,r2,8021b48 <_malloc_r+0x4e0>
 80216d0:	8804d1ba 	srli	r2,r17,6
 80216d4:	12000e44 	addi	r8,r2,57
 80216d8:	11c00e04 	addi	r7,r2,56
 80216dc:	4209883a 	add	r4,r8,r8
 80216e0:	04c200b4 	movhi	r19,2050
 80216e4:	2109883a 	add	r4,r4,r4
 80216e8:	9cddd404 	addi	r19,r19,30544
 80216ec:	2109883a 	add	r4,r4,r4
 80216f0:	9909883a 	add	r4,r19,r4
 80216f4:	24000117 	ldw	r16,4(r4)
 80216f8:	213ffe04 	addi	r4,r4,-8
 80216fc:	24009726 	beq	r4,r16,802195c <_malloc_r+0x2f4>
 8021700:	80800117 	ldw	r2,4(r16)
 8021704:	01bfff04 	movi	r6,-4
 8021708:	014003c4 	movi	r5,15
 802170c:	1184703a 	and	r2,r2,r6
 8021710:	1447c83a 	sub	r3,r2,r17
 8021714:	28c00716 	blt	r5,r3,8021734 <_malloc_r+0xcc>
 8021718:	1800920e 	bge	r3,zero,8021964 <_malloc_r+0x2fc>
 802171c:	84000317 	ldw	r16,12(r16)
 8021720:	24008e26 	beq	r4,r16,802195c <_malloc_r+0x2f4>
 8021724:	80800117 	ldw	r2,4(r16)
 8021728:	1184703a 	and	r2,r2,r6
 802172c:	1447c83a 	sub	r3,r2,r17
 8021730:	28fff90e 	bge	r5,r3,8021718 <__alt_data_end+0xfffe2318>
 8021734:	3809883a 	mov	r4,r7
 8021738:	018200b4 	movhi	r6,2050
 802173c:	9c000417 	ldw	r16,16(r19)
 8021740:	319dd404 	addi	r6,r6,30544
 8021744:	32000204 	addi	r8,r6,8
 8021748:	82013426 	beq	r16,r8,8021c1c <_malloc_r+0x5b4>
 802174c:	80c00117 	ldw	r3,4(r16)
 8021750:	00bfff04 	movi	r2,-4
 8021754:	188e703a 	and	r7,r3,r2
 8021758:	3c45c83a 	sub	r2,r7,r17
 802175c:	00c003c4 	movi	r3,15
 8021760:	18811f16 	blt	r3,r2,8021be0 <_malloc_r+0x578>
 8021764:	32000515 	stw	r8,20(r6)
 8021768:	32000415 	stw	r8,16(r6)
 802176c:	10007f0e 	bge	r2,zero,802196c <_malloc_r+0x304>
 8021770:	00807fc4 	movi	r2,511
 8021774:	11c0fd36 	bltu	r2,r7,8021b6c <_malloc_r+0x504>
 8021778:	3806d0fa 	srli	r3,r7,3
 802177c:	01c00044 	movi	r7,1
 8021780:	30800117 	ldw	r2,4(r6)
 8021784:	19400044 	addi	r5,r3,1
 8021788:	294b883a 	add	r5,r5,r5
 802178c:	1807d0ba 	srai	r3,r3,2
 8021790:	294b883a 	add	r5,r5,r5
 8021794:	294b883a 	add	r5,r5,r5
 8021798:	298b883a 	add	r5,r5,r6
 802179c:	38c6983a 	sll	r3,r7,r3
 80217a0:	29c00017 	ldw	r7,0(r5)
 80217a4:	2a7ffe04 	addi	r9,r5,-8
 80217a8:	1886b03a 	or	r3,r3,r2
 80217ac:	82400315 	stw	r9,12(r16)
 80217b0:	81c00215 	stw	r7,8(r16)
 80217b4:	30c00115 	stw	r3,4(r6)
 80217b8:	2c000015 	stw	r16,0(r5)
 80217bc:	3c000315 	stw	r16,12(r7)
 80217c0:	2005d0ba 	srai	r2,r4,2
 80217c4:	01400044 	movi	r5,1
 80217c8:	288a983a 	sll	r5,r5,r2
 80217cc:	19406f36 	bltu	r3,r5,802198c <_malloc_r+0x324>
 80217d0:	28c4703a 	and	r2,r5,r3
 80217d4:	10000a1e 	bne	r2,zero,8021800 <_malloc_r+0x198>
 80217d8:	00bfff04 	movi	r2,-4
 80217dc:	294b883a 	add	r5,r5,r5
 80217e0:	2088703a 	and	r4,r4,r2
 80217e4:	28c4703a 	and	r2,r5,r3
 80217e8:	21000104 	addi	r4,r4,4
 80217ec:	1000041e 	bne	r2,zero,8021800 <_malloc_r+0x198>
 80217f0:	294b883a 	add	r5,r5,r5
 80217f4:	28c4703a 	and	r2,r5,r3
 80217f8:	21000104 	addi	r4,r4,4
 80217fc:	103ffc26 	beq	r2,zero,80217f0 <__alt_data_end+0xfffe23f0>
 8021800:	02bfff04 	movi	r10,-4
 8021804:	024003c4 	movi	r9,15
 8021808:	21800044 	addi	r6,r4,1
 802180c:	318d883a 	add	r6,r6,r6
 8021810:	318d883a 	add	r6,r6,r6
 8021814:	318d883a 	add	r6,r6,r6
 8021818:	998d883a 	add	r6,r19,r6
 802181c:	333ffe04 	addi	r12,r6,-8
 8021820:	2017883a 	mov	r11,r4
 8021824:	31800104 	addi	r6,r6,4
 8021828:	34000017 	ldw	r16,0(r6)
 802182c:	31fffd04 	addi	r7,r6,-12
 8021830:	81c0041e 	bne	r16,r7,8021844 <_malloc_r+0x1dc>
 8021834:	0000fb06 	br	8021c24 <_malloc_r+0x5bc>
 8021838:	1801030e 	bge	r3,zero,8021c48 <_malloc_r+0x5e0>
 802183c:	84000317 	ldw	r16,12(r16)
 8021840:	81c0f826 	beq	r16,r7,8021c24 <_malloc_r+0x5bc>
 8021844:	80800117 	ldw	r2,4(r16)
 8021848:	1284703a 	and	r2,r2,r10
 802184c:	1447c83a 	sub	r3,r2,r17
 8021850:	48fff90e 	bge	r9,r3,8021838 <__alt_data_end+0xfffe2438>
 8021854:	80800317 	ldw	r2,12(r16)
 8021858:	81000217 	ldw	r4,8(r16)
 802185c:	89400054 	ori	r5,r17,1
 8021860:	81400115 	stw	r5,4(r16)
 8021864:	20800315 	stw	r2,12(r4)
 8021868:	11000215 	stw	r4,8(r2)
 802186c:	8463883a 	add	r17,r16,r17
 8021870:	9c400515 	stw	r17,20(r19)
 8021874:	9c400415 	stw	r17,16(r19)
 8021878:	18800054 	ori	r2,r3,1
 802187c:	88800115 	stw	r2,4(r17)
 8021880:	8a000315 	stw	r8,12(r17)
 8021884:	8a000215 	stw	r8,8(r17)
 8021888:	88e3883a 	add	r17,r17,r3
 802188c:	88c00015 	stw	r3,0(r17)
 8021890:	9009883a 	mov	r4,r18
 8021894:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021898:	80800204 	addi	r2,r16,8
 802189c:	00001b06 	br	802190c <_malloc_r+0x2a4>
 80218a0:	04400404 	movi	r17,16
 80218a4:	89402536 	bltu	r17,r5,802193c <_malloc_r+0x2d4>
 80218a8:	8023e7c0 	call	8023e7c <__malloc_lock>
 80218ac:	00800184 	movi	r2,6
 80218b0:	01000084 	movi	r4,2
 80218b4:	04c200b4 	movhi	r19,2050
 80218b8:	1085883a 	add	r2,r2,r2
 80218bc:	9cddd404 	addi	r19,r19,30544
 80218c0:	1085883a 	add	r2,r2,r2
 80218c4:	9885883a 	add	r2,r19,r2
 80218c8:	14000117 	ldw	r16,4(r2)
 80218cc:	10fffe04 	addi	r3,r2,-8
 80218d0:	80c0d926 	beq	r16,r3,8021c38 <_malloc_r+0x5d0>
 80218d4:	80c00117 	ldw	r3,4(r16)
 80218d8:	81000317 	ldw	r4,12(r16)
 80218dc:	00bfff04 	movi	r2,-4
 80218e0:	1884703a 	and	r2,r3,r2
 80218e4:	81400217 	ldw	r5,8(r16)
 80218e8:	8085883a 	add	r2,r16,r2
 80218ec:	10c00117 	ldw	r3,4(r2)
 80218f0:	29000315 	stw	r4,12(r5)
 80218f4:	21400215 	stw	r5,8(r4)
 80218f8:	18c00054 	ori	r3,r3,1
 80218fc:	10c00115 	stw	r3,4(r2)
 8021900:	9009883a 	mov	r4,r18
 8021904:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021908:	80800204 	addi	r2,r16,8
 802190c:	dfc00a17 	ldw	ra,40(sp)
 8021910:	df000917 	ldw	fp,36(sp)
 8021914:	ddc00817 	ldw	r23,32(sp)
 8021918:	dd800717 	ldw	r22,28(sp)
 802191c:	dd400617 	ldw	r21,24(sp)
 8021920:	dd000517 	ldw	r20,20(sp)
 8021924:	dcc00417 	ldw	r19,16(sp)
 8021928:	dc800317 	ldw	r18,12(sp)
 802192c:	dc400217 	ldw	r17,8(sp)
 8021930:	dc000117 	ldw	r16,4(sp)
 8021934:	dec00b04 	addi	sp,sp,44
 8021938:	f800283a 	ret
 802193c:	00800304 	movi	r2,12
 8021940:	90800015 	stw	r2,0(r18)
 8021944:	0005883a 	mov	r2,zero
 8021948:	003ff006 	br	802190c <__alt_data_end+0xfffe250c>
 802194c:	01002004 	movi	r4,128
 8021950:	02001004 	movi	r8,64
 8021954:	01c00fc4 	movi	r7,63
 8021958:	003f6106 	br	80216e0 <__alt_data_end+0xfffe22e0>
 802195c:	4009883a 	mov	r4,r8
 8021960:	003f7506 	br	8021738 <__alt_data_end+0xfffe2338>
 8021964:	81000317 	ldw	r4,12(r16)
 8021968:	003fde06 	br	80218e4 <__alt_data_end+0xfffe24e4>
 802196c:	81c5883a 	add	r2,r16,r7
 8021970:	11400117 	ldw	r5,4(r2)
 8021974:	9009883a 	mov	r4,r18
 8021978:	29400054 	ori	r5,r5,1
 802197c:	11400115 	stw	r5,4(r2)
 8021980:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021984:	80800204 	addi	r2,r16,8
 8021988:	003fe006 	br	802190c <__alt_data_end+0xfffe250c>
 802198c:	9c000217 	ldw	r16,8(r19)
 8021990:	00bfff04 	movi	r2,-4
 8021994:	85800117 	ldw	r22,4(r16)
 8021998:	b0ac703a 	and	r22,r22,r2
 802199c:	b4400336 	bltu	r22,r17,80219ac <_malloc_r+0x344>
 80219a0:	b445c83a 	sub	r2,r22,r17
 80219a4:	00c003c4 	movi	r3,15
 80219a8:	18805d16 	blt	r3,r2,8021b20 <_malloc_r+0x4b8>
 80219ac:	05c200f4 	movhi	r23,2051
 80219b0:	008200f4 	movhi	r2,2051
 80219b4:	10aa2d04 	addi	r2,r2,-22348
 80219b8:	bde36f04 	addi	r23,r23,-29252
 80219bc:	15400017 	ldw	r21,0(r2)
 80219c0:	b8c00017 	ldw	r3,0(r23)
 80219c4:	00bfffc4 	movi	r2,-1
 80219c8:	858d883a 	add	r6,r16,r22
 80219cc:	8d6b883a 	add	r21,r17,r21
 80219d0:	1880ea26 	beq	r3,r2,8021d7c <_malloc_r+0x714>
 80219d4:	ad4403c4 	addi	r21,r21,4111
 80219d8:	00bc0004 	movi	r2,-4096
 80219dc:	a8aa703a 	and	r21,r21,r2
 80219e0:	a80b883a 	mov	r5,r21
 80219e4:	9009883a 	mov	r4,r18
 80219e8:	d9800015 	stw	r6,0(sp)
 80219ec:	80228880 	call	8022888 <_sbrk_r>
 80219f0:	1029883a 	mov	r20,r2
 80219f4:	00bfffc4 	movi	r2,-1
 80219f8:	d9800017 	ldw	r6,0(sp)
 80219fc:	a080e826 	beq	r20,r2,8021da0 <_malloc_r+0x738>
 8021a00:	a180a636 	bltu	r20,r6,8021c9c <_malloc_r+0x634>
 8021a04:	070200f4 	movhi	fp,2051
 8021a08:	e72a3604 	addi	fp,fp,-22312
 8021a0c:	e0800017 	ldw	r2,0(fp)
 8021a10:	a887883a 	add	r3,r21,r2
 8021a14:	e0c00015 	stw	r3,0(fp)
 8021a18:	3500e626 	beq	r6,r20,8021db4 <_malloc_r+0x74c>
 8021a1c:	b9000017 	ldw	r4,0(r23)
 8021a20:	00bfffc4 	movi	r2,-1
 8021a24:	2080ee26 	beq	r4,r2,8021de0 <_malloc_r+0x778>
 8021a28:	a185c83a 	sub	r2,r20,r6
 8021a2c:	10c5883a 	add	r2,r2,r3
 8021a30:	e0800015 	stw	r2,0(fp)
 8021a34:	a0c001cc 	andi	r3,r20,7
 8021a38:	1800bc26 	beq	r3,zero,8021d2c <_malloc_r+0x6c4>
 8021a3c:	a0e9c83a 	sub	r20,r20,r3
 8021a40:	00840204 	movi	r2,4104
 8021a44:	a5000204 	addi	r20,r20,8
 8021a48:	10c7c83a 	sub	r3,r2,r3
 8021a4c:	a545883a 	add	r2,r20,r21
 8021a50:	1083ffcc 	andi	r2,r2,4095
 8021a54:	18abc83a 	sub	r21,r3,r2
 8021a58:	a80b883a 	mov	r5,r21
 8021a5c:	9009883a 	mov	r4,r18
 8021a60:	80228880 	call	8022888 <_sbrk_r>
 8021a64:	00ffffc4 	movi	r3,-1
 8021a68:	10c0e126 	beq	r2,r3,8021df0 <_malloc_r+0x788>
 8021a6c:	1505c83a 	sub	r2,r2,r20
 8021a70:	1545883a 	add	r2,r2,r21
 8021a74:	10800054 	ori	r2,r2,1
 8021a78:	e0c00017 	ldw	r3,0(fp)
 8021a7c:	9d000215 	stw	r20,8(r19)
 8021a80:	a0800115 	stw	r2,4(r20)
 8021a84:	a8c7883a 	add	r3,r21,r3
 8021a88:	e0c00015 	stw	r3,0(fp)
 8021a8c:	84c00e26 	beq	r16,r19,8021ac8 <_malloc_r+0x460>
 8021a90:	018003c4 	movi	r6,15
 8021a94:	3580a72e 	bgeu	r6,r22,8021d34 <_malloc_r+0x6cc>
 8021a98:	81400117 	ldw	r5,4(r16)
 8021a9c:	013ffe04 	movi	r4,-8
 8021aa0:	b0bffd04 	addi	r2,r22,-12
 8021aa4:	1104703a 	and	r2,r2,r4
 8021aa8:	2900004c 	andi	r4,r5,1
 8021aac:	2088b03a 	or	r4,r4,r2
 8021ab0:	81000115 	stw	r4,4(r16)
 8021ab4:	01400144 	movi	r5,5
 8021ab8:	8089883a 	add	r4,r16,r2
 8021abc:	21400115 	stw	r5,4(r4)
 8021ac0:	21400215 	stw	r5,8(r4)
 8021ac4:	3080cd36 	bltu	r6,r2,8021dfc <_malloc_r+0x794>
 8021ac8:	008200f4 	movhi	r2,2051
 8021acc:	10aa2c04 	addi	r2,r2,-22352
 8021ad0:	11000017 	ldw	r4,0(r2)
 8021ad4:	20c0012e 	bgeu	r4,r3,8021adc <_malloc_r+0x474>
 8021ad8:	10c00015 	stw	r3,0(r2)
 8021adc:	008200f4 	movhi	r2,2051
 8021ae0:	10aa2b04 	addi	r2,r2,-22356
 8021ae4:	11000017 	ldw	r4,0(r2)
 8021ae8:	9c000217 	ldw	r16,8(r19)
 8021aec:	20c0012e 	bgeu	r4,r3,8021af4 <_malloc_r+0x48c>
 8021af0:	10c00015 	stw	r3,0(r2)
 8021af4:	80c00117 	ldw	r3,4(r16)
 8021af8:	00bfff04 	movi	r2,-4
 8021afc:	1886703a 	and	r3,r3,r2
 8021b00:	1c45c83a 	sub	r2,r3,r17
 8021b04:	1c400236 	bltu	r3,r17,8021b10 <_malloc_r+0x4a8>
 8021b08:	00c003c4 	movi	r3,15
 8021b0c:	18800416 	blt	r3,r2,8021b20 <_malloc_r+0x4b8>
 8021b10:	9009883a 	mov	r4,r18
 8021b14:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021b18:	0005883a 	mov	r2,zero
 8021b1c:	003f7b06 	br	802190c <__alt_data_end+0xfffe250c>
 8021b20:	88c00054 	ori	r3,r17,1
 8021b24:	80c00115 	stw	r3,4(r16)
 8021b28:	8463883a 	add	r17,r16,r17
 8021b2c:	10800054 	ori	r2,r2,1
 8021b30:	9c400215 	stw	r17,8(r19)
 8021b34:	88800115 	stw	r2,4(r17)
 8021b38:	9009883a 	mov	r4,r18
 8021b3c:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021b40:	80800204 	addi	r2,r16,8
 8021b44:	003f7106 	br	802190c <__alt_data_end+0xfffe250c>
 8021b48:	00c00504 	movi	r3,20
 8021b4c:	18804a2e 	bgeu	r3,r2,8021c78 <_malloc_r+0x610>
 8021b50:	00c01504 	movi	r3,84
 8021b54:	18806e36 	bltu	r3,r2,8021d10 <_malloc_r+0x6a8>
 8021b58:	8804d33a 	srli	r2,r17,12
 8021b5c:	12001bc4 	addi	r8,r2,111
 8021b60:	11c01b84 	addi	r7,r2,110
 8021b64:	4209883a 	add	r4,r8,r8
 8021b68:	003edd06 	br	80216e0 <__alt_data_end+0xfffe22e0>
 8021b6c:	3804d27a 	srli	r2,r7,9
 8021b70:	00c00104 	movi	r3,4
 8021b74:	1880442e 	bgeu	r3,r2,8021c88 <_malloc_r+0x620>
 8021b78:	00c00504 	movi	r3,20
 8021b7c:	18808136 	bltu	r3,r2,8021d84 <_malloc_r+0x71c>
 8021b80:	11401704 	addi	r5,r2,92
 8021b84:	10c016c4 	addi	r3,r2,91
 8021b88:	294b883a 	add	r5,r5,r5
 8021b8c:	294b883a 	add	r5,r5,r5
 8021b90:	294b883a 	add	r5,r5,r5
 8021b94:	994b883a 	add	r5,r19,r5
 8021b98:	28800017 	ldw	r2,0(r5)
 8021b9c:	018200b4 	movhi	r6,2050
 8021ba0:	297ffe04 	addi	r5,r5,-8
 8021ba4:	319dd404 	addi	r6,r6,30544
 8021ba8:	28806526 	beq	r5,r2,8021d40 <_malloc_r+0x6d8>
 8021bac:	01bfff04 	movi	r6,-4
 8021bb0:	10c00117 	ldw	r3,4(r2)
 8021bb4:	1986703a 	and	r3,r3,r6
 8021bb8:	38c0022e 	bgeu	r7,r3,8021bc4 <_malloc_r+0x55c>
 8021bbc:	10800217 	ldw	r2,8(r2)
 8021bc0:	28bffb1e 	bne	r5,r2,8021bb0 <__alt_data_end+0xfffe27b0>
 8021bc4:	11400317 	ldw	r5,12(r2)
 8021bc8:	98c00117 	ldw	r3,4(r19)
 8021bcc:	81400315 	stw	r5,12(r16)
 8021bd0:	80800215 	stw	r2,8(r16)
 8021bd4:	2c000215 	stw	r16,8(r5)
 8021bd8:	14000315 	stw	r16,12(r2)
 8021bdc:	003ef806 	br	80217c0 <__alt_data_end+0xfffe23c0>
 8021be0:	88c00054 	ori	r3,r17,1
 8021be4:	80c00115 	stw	r3,4(r16)
 8021be8:	8463883a 	add	r17,r16,r17
 8021bec:	34400515 	stw	r17,20(r6)
 8021bf0:	34400415 	stw	r17,16(r6)
 8021bf4:	10c00054 	ori	r3,r2,1
 8021bf8:	8a000315 	stw	r8,12(r17)
 8021bfc:	8a000215 	stw	r8,8(r17)
 8021c00:	88c00115 	stw	r3,4(r17)
 8021c04:	88a3883a 	add	r17,r17,r2
 8021c08:	88800015 	stw	r2,0(r17)
 8021c0c:	9009883a 	mov	r4,r18
 8021c10:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021c14:	80800204 	addi	r2,r16,8
 8021c18:	003f3c06 	br	802190c <__alt_data_end+0xfffe250c>
 8021c1c:	30c00117 	ldw	r3,4(r6)
 8021c20:	003ee706 	br	80217c0 <__alt_data_end+0xfffe23c0>
 8021c24:	5ac00044 	addi	r11,r11,1
 8021c28:	588000cc 	andi	r2,r11,3
 8021c2c:	31800204 	addi	r6,r6,8
 8021c30:	103efd1e 	bne	r2,zero,8021828 <__alt_data_end+0xfffe2428>
 8021c34:	00002406 	br	8021cc8 <_malloc_r+0x660>
 8021c38:	14000317 	ldw	r16,12(r2)
 8021c3c:	143f251e 	bne	r2,r16,80218d4 <__alt_data_end+0xfffe24d4>
 8021c40:	21000084 	addi	r4,r4,2
 8021c44:	003ebc06 	br	8021738 <__alt_data_end+0xfffe2338>
 8021c48:	8085883a 	add	r2,r16,r2
 8021c4c:	10c00117 	ldw	r3,4(r2)
 8021c50:	81000317 	ldw	r4,12(r16)
 8021c54:	81400217 	ldw	r5,8(r16)
 8021c58:	18c00054 	ori	r3,r3,1
 8021c5c:	10c00115 	stw	r3,4(r2)
 8021c60:	29000315 	stw	r4,12(r5)
 8021c64:	21400215 	stw	r5,8(r4)
 8021c68:	9009883a 	mov	r4,r18
 8021c6c:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8021c70:	80800204 	addi	r2,r16,8
 8021c74:	003f2506 	br	802190c <__alt_data_end+0xfffe250c>
 8021c78:	12001704 	addi	r8,r2,92
 8021c7c:	11c016c4 	addi	r7,r2,91
 8021c80:	4209883a 	add	r4,r8,r8
 8021c84:	003e9606 	br	80216e0 <__alt_data_end+0xfffe22e0>
 8021c88:	3804d1ba 	srli	r2,r7,6
 8021c8c:	11400e44 	addi	r5,r2,57
 8021c90:	10c00e04 	addi	r3,r2,56
 8021c94:	294b883a 	add	r5,r5,r5
 8021c98:	003fbc06 	br	8021b8c <__alt_data_end+0xfffe278c>
 8021c9c:	84ff5926 	beq	r16,r19,8021a04 <__alt_data_end+0xfffe2604>
 8021ca0:	008200b4 	movhi	r2,2050
 8021ca4:	109dd404 	addi	r2,r2,30544
 8021ca8:	14000217 	ldw	r16,8(r2)
 8021cac:	00bfff04 	movi	r2,-4
 8021cb0:	80c00117 	ldw	r3,4(r16)
 8021cb4:	1886703a 	and	r3,r3,r2
 8021cb8:	003f9106 	br	8021b00 <__alt_data_end+0xfffe2700>
 8021cbc:	60800217 	ldw	r2,8(r12)
 8021cc0:	213fffc4 	addi	r4,r4,-1
 8021cc4:	1300651e 	bne	r2,r12,8021e5c <_malloc_r+0x7f4>
 8021cc8:	208000cc 	andi	r2,r4,3
 8021ccc:	633ffe04 	addi	r12,r12,-8
 8021cd0:	103ffa1e 	bne	r2,zero,8021cbc <__alt_data_end+0xfffe28bc>
 8021cd4:	98800117 	ldw	r2,4(r19)
 8021cd8:	0146303a 	nor	r3,zero,r5
 8021cdc:	1884703a 	and	r2,r3,r2
 8021ce0:	98800115 	stw	r2,4(r19)
 8021ce4:	294b883a 	add	r5,r5,r5
 8021ce8:	117f2836 	bltu	r2,r5,802198c <__alt_data_end+0xfffe258c>
 8021cec:	283f2726 	beq	r5,zero,802198c <__alt_data_end+0xfffe258c>
 8021cf0:	2886703a 	and	r3,r5,r2
 8021cf4:	5809883a 	mov	r4,r11
 8021cf8:	183ec31e 	bne	r3,zero,8021808 <__alt_data_end+0xfffe2408>
 8021cfc:	294b883a 	add	r5,r5,r5
 8021d00:	2886703a 	and	r3,r5,r2
 8021d04:	21000104 	addi	r4,r4,4
 8021d08:	183ffc26 	beq	r3,zero,8021cfc <__alt_data_end+0xfffe28fc>
 8021d0c:	003ebe06 	br	8021808 <__alt_data_end+0xfffe2408>
 8021d10:	00c05504 	movi	r3,340
 8021d14:	18801236 	bltu	r3,r2,8021d60 <_malloc_r+0x6f8>
 8021d18:	8804d3fa 	srli	r2,r17,15
 8021d1c:	12001e04 	addi	r8,r2,120
 8021d20:	11c01dc4 	addi	r7,r2,119
 8021d24:	4209883a 	add	r4,r8,r8
 8021d28:	003e6d06 	br	80216e0 <__alt_data_end+0xfffe22e0>
 8021d2c:	00c40004 	movi	r3,4096
 8021d30:	003f4606 	br	8021a4c <__alt_data_end+0xfffe264c>
 8021d34:	00800044 	movi	r2,1
 8021d38:	a0800115 	stw	r2,4(r20)
 8021d3c:	003f7406 	br	8021b10 <__alt_data_end+0xfffe2710>
 8021d40:	1805d0ba 	srai	r2,r3,2
 8021d44:	01c00044 	movi	r7,1
 8021d48:	30c00117 	ldw	r3,4(r6)
 8021d4c:	388e983a 	sll	r7,r7,r2
 8021d50:	2805883a 	mov	r2,r5
 8021d54:	38c6b03a 	or	r3,r7,r3
 8021d58:	30c00115 	stw	r3,4(r6)
 8021d5c:	003f9b06 	br	8021bcc <__alt_data_end+0xfffe27cc>
 8021d60:	00c15504 	movi	r3,1364
 8021d64:	18801a36 	bltu	r3,r2,8021dd0 <_malloc_r+0x768>
 8021d68:	8804d4ba 	srli	r2,r17,18
 8021d6c:	12001f44 	addi	r8,r2,125
 8021d70:	11c01f04 	addi	r7,r2,124
 8021d74:	4209883a 	add	r4,r8,r8
 8021d78:	003e5906 	br	80216e0 <__alt_data_end+0xfffe22e0>
 8021d7c:	ad400404 	addi	r21,r21,16
 8021d80:	003f1706 	br	80219e0 <__alt_data_end+0xfffe25e0>
 8021d84:	00c01504 	movi	r3,84
 8021d88:	18802336 	bltu	r3,r2,8021e18 <_malloc_r+0x7b0>
 8021d8c:	3804d33a 	srli	r2,r7,12
 8021d90:	11401bc4 	addi	r5,r2,111
 8021d94:	10c01b84 	addi	r3,r2,110
 8021d98:	294b883a 	add	r5,r5,r5
 8021d9c:	003f7b06 	br	8021b8c <__alt_data_end+0xfffe278c>
 8021da0:	9c000217 	ldw	r16,8(r19)
 8021da4:	00bfff04 	movi	r2,-4
 8021da8:	80c00117 	ldw	r3,4(r16)
 8021dac:	1886703a 	and	r3,r3,r2
 8021db0:	003f5306 	br	8021b00 <__alt_data_end+0xfffe2700>
 8021db4:	3083ffcc 	andi	r2,r6,4095
 8021db8:	103f181e 	bne	r2,zero,8021a1c <__alt_data_end+0xfffe261c>
 8021dbc:	99000217 	ldw	r4,8(r19)
 8021dc0:	b545883a 	add	r2,r22,r21
 8021dc4:	10800054 	ori	r2,r2,1
 8021dc8:	20800115 	stw	r2,4(r4)
 8021dcc:	003f3e06 	br	8021ac8 <__alt_data_end+0xfffe26c8>
 8021dd0:	01003f84 	movi	r4,254
 8021dd4:	02001fc4 	movi	r8,127
 8021dd8:	01c01f84 	movi	r7,126
 8021ddc:	003e4006 	br	80216e0 <__alt_data_end+0xfffe22e0>
 8021de0:	008200f4 	movhi	r2,2051
 8021de4:	10a36f04 	addi	r2,r2,-29252
 8021de8:	15000015 	stw	r20,0(r2)
 8021dec:	003f1106 	br	8021a34 <__alt_data_end+0xfffe2634>
 8021df0:	00800044 	movi	r2,1
 8021df4:	002b883a 	mov	r21,zero
 8021df8:	003f1f06 	br	8021a78 <__alt_data_end+0xfffe2678>
 8021dfc:	81400204 	addi	r5,r16,8
 8021e00:	9009883a 	mov	r4,r18
 8021e04:	80230f00 	call	80230f0 <_free_r>
 8021e08:	008200f4 	movhi	r2,2051
 8021e0c:	10aa3604 	addi	r2,r2,-22312
 8021e10:	10c00017 	ldw	r3,0(r2)
 8021e14:	003f2c06 	br	8021ac8 <__alt_data_end+0xfffe26c8>
 8021e18:	00c05504 	movi	r3,340
 8021e1c:	18800536 	bltu	r3,r2,8021e34 <_malloc_r+0x7cc>
 8021e20:	3804d3fa 	srli	r2,r7,15
 8021e24:	11401e04 	addi	r5,r2,120
 8021e28:	10c01dc4 	addi	r3,r2,119
 8021e2c:	294b883a 	add	r5,r5,r5
 8021e30:	003f5606 	br	8021b8c <__alt_data_end+0xfffe278c>
 8021e34:	00c15504 	movi	r3,1364
 8021e38:	18800536 	bltu	r3,r2,8021e50 <_malloc_r+0x7e8>
 8021e3c:	3804d4ba 	srli	r2,r7,18
 8021e40:	11401f44 	addi	r5,r2,125
 8021e44:	10c01f04 	addi	r3,r2,124
 8021e48:	294b883a 	add	r5,r5,r5
 8021e4c:	003f4f06 	br	8021b8c <__alt_data_end+0xfffe278c>
 8021e50:	01403f84 	movi	r5,254
 8021e54:	00c01f84 	movi	r3,126
 8021e58:	003f4c06 	br	8021b8c <__alt_data_end+0xfffe278c>
 8021e5c:	98800117 	ldw	r2,4(r19)
 8021e60:	003fa006 	br	8021ce4 <__alt_data_end+0xfffe28e4>
 8021e64:	8808d0fa 	srli	r4,r17,3
 8021e68:	20800044 	addi	r2,r4,1
 8021e6c:	1085883a 	add	r2,r2,r2
 8021e70:	003e9006 	br	80218b4 <__alt_data_end+0xfffe24b4>

08021e74 <memchr>:
 8021e74:	208000cc 	andi	r2,r4,3
 8021e78:	280f883a 	mov	r7,r5
 8021e7c:	10003426 	beq	r2,zero,8021f50 <memchr+0xdc>
 8021e80:	30bfffc4 	addi	r2,r6,-1
 8021e84:	30001a26 	beq	r6,zero,8021ef0 <memchr+0x7c>
 8021e88:	20c00003 	ldbu	r3,0(r4)
 8021e8c:	29803fcc 	andi	r6,r5,255
 8021e90:	30c0051e 	bne	r6,r3,8021ea8 <memchr+0x34>
 8021e94:	00001806 	br	8021ef8 <memchr+0x84>
 8021e98:	10001526 	beq	r2,zero,8021ef0 <memchr+0x7c>
 8021e9c:	20c00003 	ldbu	r3,0(r4)
 8021ea0:	10bfffc4 	addi	r2,r2,-1
 8021ea4:	30c01426 	beq	r6,r3,8021ef8 <memchr+0x84>
 8021ea8:	21000044 	addi	r4,r4,1
 8021eac:	20c000cc 	andi	r3,r4,3
 8021eb0:	183ff91e 	bne	r3,zero,8021e98 <__alt_data_end+0xfffe2a98>
 8021eb4:	020000c4 	movi	r8,3
 8021eb8:	40801136 	bltu	r8,r2,8021f00 <memchr+0x8c>
 8021ebc:	10000c26 	beq	r2,zero,8021ef0 <memchr+0x7c>
 8021ec0:	20c00003 	ldbu	r3,0(r4)
 8021ec4:	29403fcc 	andi	r5,r5,255
 8021ec8:	28c00b26 	beq	r5,r3,8021ef8 <memchr+0x84>
 8021ecc:	20c00044 	addi	r3,r4,1
 8021ed0:	39803fcc 	andi	r6,r7,255
 8021ed4:	2089883a 	add	r4,r4,r2
 8021ed8:	00000306 	br	8021ee8 <memchr+0x74>
 8021edc:	18c00044 	addi	r3,r3,1
 8021ee0:	197fffc3 	ldbu	r5,-1(r3)
 8021ee4:	31400526 	beq	r6,r5,8021efc <memchr+0x88>
 8021ee8:	1805883a 	mov	r2,r3
 8021eec:	20fffb1e 	bne	r4,r3,8021edc <__alt_data_end+0xfffe2adc>
 8021ef0:	0005883a 	mov	r2,zero
 8021ef4:	f800283a 	ret
 8021ef8:	2005883a 	mov	r2,r4
 8021efc:	f800283a 	ret
 8021f00:	28c03fcc 	andi	r3,r5,255
 8021f04:	1812923a 	slli	r9,r3,8
 8021f08:	02ffbff4 	movhi	r11,65279
 8021f0c:	02a02074 	movhi	r10,32897
 8021f10:	48d2b03a 	or	r9,r9,r3
 8021f14:	4806943a 	slli	r3,r9,16
 8021f18:	5affbfc4 	addi	r11,r11,-257
 8021f1c:	52a02004 	addi	r10,r10,-32640
 8021f20:	48d2b03a 	or	r9,r9,r3
 8021f24:	20c00017 	ldw	r3,0(r4)
 8021f28:	48c6f03a 	xor	r3,r9,r3
 8021f2c:	1acd883a 	add	r6,r3,r11
 8021f30:	00c6303a 	nor	r3,zero,r3
 8021f34:	30c6703a 	and	r3,r6,r3
 8021f38:	1a86703a 	and	r3,r3,r10
 8021f3c:	183fe01e 	bne	r3,zero,8021ec0 <__alt_data_end+0xfffe2ac0>
 8021f40:	10bfff04 	addi	r2,r2,-4
 8021f44:	21000104 	addi	r4,r4,4
 8021f48:	40bff636 	bltu	r8,r2,8021f24 <__alt_data_end+0xfffe2b24>
 8021f4c:	003fdb06 	br	8021ebc <__alt_data_end+0xfffe2abc>
 8021f50:	3005883a 	mov	r2,r6
 8021f54:	003fd706 	br	8021eb4 <__alt_data_end+0xfffe2ab4>

08021f58 <memcpy>:
 8021f58:	defffd04 	addi	sp,sp,-12
 8021f5c:	dfc00215 	stw	ra,8(sp)
 8021f60:	dc400115 	stw	r17,4(sp)
 8021f64:	dc000015 	stw	r16,0(sp)
 8021f68:	00c003c4 	movi	r3,15
 8021f6c:	2005883a 	mov	r2,r4
 8021f70:	1980452e 	bgeu	r3,r6,8022088 <memcpy+0x130>
 8021f74:	2906b03a 	or	r3,r5,r4
 8021f78:	18c000cc 	andi	r3,r3,3
 8021f7c:	1800441e 	bne	r3,zero,8022090 <memcpy+0x138>
 8021f80:	347ffc04 	addi	r17,r6,-16
 8021f84:	8822d13a 	srli	r17,r17,4
 8021f88:	28c00104 	addi	r3,r5,4
 8021f8c:	23400104 	addi	r13,r4,4
 8021f90:	8820913a 	slli	r16,r17,4
 8021f94:	2b000204 	addi	r12,r5,8
 8021f98:	22c00204 	addi	r11,r4,8
 8021f9c:	84000504 	addi	r16,r16,20
 8021fa0:	2a800304 	addi	r10,r5,12
 8021fa4:	22400304 	addi	r9,r4,12
 8021fa8:	2c21883a 	add	r16,r5,r16
 8021fac:	2811883a 	mov	r8,r5
 8021fb0:	200f883a 	mov	r7,r4
 8021fb4:	41000017 	ldw	r4,0(r8)
 8021fb8:	1fc00017 	ldw	ra,0(r3)
 8021fbc:	63c00017 	ldw	r15,0(r12)
 8021fc0:	39000015 	stw	r4,0(r7)
 8021fc4:	53800017 	ldw	r14,0(r10)
 8021fc8:	6fc00015 	stw	ra,0(r13)
 8021fcc:	5bc00015 	stw	r15,0(r11)
 8021fd0:	4b800015 	stw	r14,0(r9)
 8021fd4:	18c00404 	addi	r3,r3,16
 8021fd8:	39c00404 	addi	r7,r7,16
 8021fdc:	42000404 	addi	r8,r8,16
 8021fe0:	6b400404 	addi	r13,r13,16
 8021fe4:	63000404 	addi	r12,r12,16
 8021fe8:	5ac00404 	addi	r11,r11,16
 8021fec:	52800404 	addi	r10,r10,16
 8021ff0:	4a400404 	addi	r9,r9,16
 8021ff4:	1c3fef1e 	bne	r3,r16,8021fb4 <__alt_data_end+0xfffe2bb4>
 8021ff8:	89c00044 	addi	r7,r17,1
 8021ffc:	380e913a 	slli	r7,r7,4
 8022000:	310003cc 	andi	r4,r6,15
 8022004:	02c000c4 	movi	r11,3
 8022008:	11c7883a 	add	r3,r2,r7
 802200c:	29cb883a 	add	r5,r5,r7
 8022010:	5900212e 	bgeu	r11,r4,8022098 <memcpy+0x140>
 8022014:	1813883a 	mov	r9,r3
 8022018:	2811883a 	mov	r8,r5
 802201c:	200f883a 	mov	r7,r4
 8022020:	42800017 	ldw	r10,0(r8)
 8022024:	4a400104 	addi	r9,r9,4
 8022028:	39ffff04 	addi	r7,r7,-4
 802202c:	4abfff15 	stw	r10,-4(r9)
 8022030:	42000104 	addi	r8,r8,4
 8022034:	59fffa36 	bltu	r11,r7,8022020 <__alt_data_end+0xfffe2c20>
 8022038:	213fff04 	addi	r4,r4,-4
 802203c:	2008d0ba 	srli	r4,r4,2
 8022040:	318000cc 	andi	r6,r6,3
 8022044:	21000044 	addi	r4,r4,1
 8022048:	2109883a 	add	r4,r4,r4
 802204c:	2109883a 	add	r4,r4,r4
 8022050:	1907883a 	add	r3,r3,r4
 8022054:	290b883a 	add	r5,r5,r4
 8022058:	30000626 	beq	r6,zero,8022074 <memcpy+0x11c>
 802205c:	198d883a 	add	r6,r3,r6
 8022060:	29c00003 	ldbu	r7,0(r5)
 8022064:	18c00044 	addi	r3,r3,1
 8022068:	29400044 	addi	r5,r5,1
 802206c:	19ffffc5 	stb	r7,-1(r3)
 8022070:	19bffb1e 	bne	r3,r6,8022060 <__alt_data_end+0xfffe2c60>
 8022074:	dfc00217 	ldw	ra,8(sp)
 8022078:	dc400117 	ldw	r17,4(sp)
 802207c:	dc000017 	ldw	r16,0(sp)
 8022080:	dec00304 	addi	sp,sp,12
 8022084:	f800283a 	ret
 8022088:	2007883a 	mov	r3,r4
 802208c:	003ff206 	br	8022058 <__alt_data_end+0xfffe2c58>
 8022090:	2007883a 	mov	r3,r4
 8022094:	003ff106 	br	802205c <__alt_data_end+0xfffe2c5c>
 8022098:	200d883a 	mov	r6,r4
 802209c:	003fee06 	br	8022058 <__alt_data_end+0xfffe2c58>

080220a0 <memmove>:
 80220a0:	2005883a 	mov	r2,r4
 80220a4:	29000b2e 	bgeu	r5,r4,80220d4 <memmove+0x34>
 80220a8:	298f883a 	add	r7,r5,r6
 80220ac:	21c0092e 	bgeu	r4,r7,80220d4 <memmove+0x34>
 80220b0:	2187883a 	add	r3,r4,r6
 80220b4:	198bc83a 	sub	r5,r3,r6
 80220b8:	30004826 	beq	r6,zero,80221dc <memmove+0x13c>
 80220bc:	39ffffc4 	addi	r7,r7,-1
 80220c0:	39000003 	ldbu	r4,0(r7)
 80220c4:	18ffffc4 	addi	r3,r3,-1
 80220c8:	19000005 	stb	r4,0(r3)
 80220cc:	28fffb1e 	bne	r5,r3,80220bc <__alt_data_end+0xfffe2cbc>
 80220d0:	f800283a 	ret
 80220d4:	00c003c4 	movi	r3,15
 80220d8:	1980412e 	bgeu	r3,r6,80221e0 <memmove+0x140>
 80220dc:	2886b03a 	or	r3,r5,r2
 80220e0:	18c000cc 	andi	r3,r3,3
 80220e4:	1800401e 	bne	r3,zero,80221e8 <memmove+0x148>
 80220e8:	33fffc04 	addi	r15,r6,-16
 80220ec:	781ed13a 	srli	r15,r15,4
 80220f0:	28c00104 	addi	r3,r5,4
 80220f4:	13400104 	addi	r13,r2,4
 80220f8:	781c913a 	slli	r14,r15,4
 80220fc:	2b000204 	addi	r12,r5,8
 8022100:	12c00204 	addi	r11,r2,8
 8022104:	73800504 	addi	r14,r14,20
 8022108:	2a800304 	addi	r10,r5,12
 802210c:	12400304 	addi	r9,r2,12
 8022110:	2b9d883a 	add	r14,r5,r14
 8022114:	2811883a 	mov	r8,r5
 8022118:	100f883a 	mov	r7,r2
 802211c:	41000017 	ldw	r4,0(r8)
 8022120:	39c00404 	addi	r7,r7,16
 8022124:	18c00404 	addi	r3,r3,16
 8022128:	393ffc15 	stw	r4,-16(r7)
 802212c:	193ffc17 	ldw	r4,-16(r3)
 8022130:	6b400404 	addi	r13,r13,16
 8022134:	5ac00404 	addi	r11,r11,16
 8022138:	693ffc15 	stw	r4,-16(r13)
 802213c:	61000017 	ldw	r4,0(r12)
 8022140:	4a400404 	addi	r9,r9,16
 8022144:	42000404 	addi	r8,r8,16
 8022148:	593ffc15 	stw	r4,-16(r11)
 802214c:	51000017 	ldw	r4,0(r10)
 8022150:	63000404 	addi	r12,r12,16
 8022154:	52800404 	addi	r10,r10,16
 8022158:	493ffc15 	stw	r4,-16(r9)
 802215c:	1bbfef1e 	bne	r3,r14,802211c <__alt_data_end+0xfffe2d1c>
 8022160:	79000044 	addi	r4,r15,1
 8022164:	2008913a 	slli	r4,r4,4
 8022168:	328003cc 	andi	r10,r6,15
 802216c:	02c000c4 	movi	r11,3
 8022170:	1107883a 	add	r3,r2,r4
 8022174:	290b883a 	add	r5,r5,r4
 8022178:	5a801e2e 	bgeu	r11,r10,80221f4 <memmove+0x154>
 802217c:	1813883a 	mov	r9,r3
 8022180:	2811883a 	mov	r8,r5
 8022184:	500f883a 	mov	r7,r10
 8022188:	41000017 	ldw	r4,0(r8)
 802218c:	4a400104 	addi	r9,r9,4
 8022190:	39ffff04 	addi	r7,r7,-4
 8022194:	493fff15 	stw	r4,-4(r9)
 8022198:	42000104 	addi	r8,r8,4
 802219c:	59fffa36 	bltu	r11,r7,8022188 <__alt_data_end+0xfffe2d88>
 80221a0:	513fff04 	addi	r4,r10,-4
 80221a4:	2008d0ba 	srli	r4,r4,2
 80221a8:	318000cc 	andi	r6,r6,3
 80221ac:	21000044 	addi	r4,r4,1
 80221b0:	2109883a 	add	r4,r4,r4
 80221b4:	2109883a 	add	r4,r4,r4
 80221b8:	1907883a 	add	r3,r3,r4
 80221bc:	290b883a 	add	r5,r5,r4
 80221c0:	30000b26 	beq	r6,zero,80221f0 <memmove+0x150>
 80221c4:	198d883a 	add	r6,r3,r6
 80221c8:	29c00003 	ldbu	r7,0(r5)
 80221cc:	18c00044 	addi	r3,r3,1
 80221d0:	29400044 	addi	r5,r5,1
 80221d4:	19ffffc5 	stb	r7,-1(r3)
 80221d8:	19bffb1e 	bne	r3,r6,80221c8 <__alt_data_end+0xfffe2dc8>
 80221dc:	f800283a 	ret
 80221e0:	1007883a 	mov	r3,r2
 80221e4:	003ff606 	br	80221c0 <__alt_data_end+0xfffe2dc0>
 80221e8:	1007883a 	mov	r3,r2
 80221ec:	003ff506 	br	80221c4 <__alt_data_end+0xfffe2dc4>
 80221f0:	f800283a 	ret
 80221f4:	500d883a 	mov	r6,r10
 80221f8:	003ff106 	br	80221c0 <__alt_data_end+0xfffe2dc0>

080221fc <memset>:
 80221fc:	20c000cc 	andi	r3,r4,3
 8022200:	2005883a 	mov	r2,r4
 8022204:	18004426 	beq	r3,zero,8022318 <memset+0x11c>
 8022208:	31ffffc4 	addi	r7,r6,-1
 802220c:	30004026 	beq	r6,zero,8022310 <memset+0x114>
 8022210:	2813883a 	mov	r9,r5
 8022214:	200d883a 	mov	r6,r4
 8022218:	2007883a 	mov	r3,r4
 802221c:	00000406 	br	8022230 <memset+0x34>
 8022220:	3a3fffc4 	addi	r8,r7,-1
 8022224:	31800044 	addi	r6,r6,1
 8022228:	38003926 	beq	r7,zero,8022310 <memset+0x114>
 802222c:	400f883a 	mov	r7,r8
 8022230:	18c00044 	addi	r3,r3,1
 8022234:	32400005 	stb	r9,0(r6)
 8022238:	1a0000cc 	andi	r8,r3,3
 802223c:	403ff81e 	bne	r8,zero,8022220 <__alt_data_end+0xfffe2e20>
 8022240:	010000c4 	movi	r4,3
 8022244:	21c02d2e 	bgeu	r4,r7,80222fc <memset+0x100>
 8022248:	29003fcc 	andi	r4,r5,255
 802224c:	200c923a 	slli	r6,r4,8
 8022250:	3108b03a 	or	r4,r6,r4
 8022254:	200c943a 	slli	r6,r4,16
 8022258:	218cb03a 	or	r6,r4,r6
 802225c:	010003c4 	movi	r4,15
 8022260:	21c0182e 	bgeu	r4,r7,80222c4 <memset+0xc8>
 8022264:	3b3ffc04 	addi	r12,r7,-16
 8022268:	6018d13a 	srli	r12,r12,4
 802226c:	1a000104 	addi	r8,r3,4
 8022270:	1ac00204 	addi	r11,r3,8
 8022274:	6008913a 	slli	r4,r12,4
 8022278:	1a800304 	addi	r10,r3,12
 802227c:	1813883a 	mov	r9,r3
 8022280:	21000504 	addi	r4,r4,20
 8022284:	1909883a 	add	r4,r3,r4
 8022288:	49800015 	stw	r6,0(r9)
 802228c:	41800015 	stw	r6,0(r8)
 8022290:	59800015 	stw	r6,0(r11)
 8022294:	51800015 	stw	r6,0(r10)
 8022298:	42000404 	addi	r8,r8,16
 802229c:	4a400404 	addi	r9,r9,16
 80222a0:	5ac00404 	addi	r11,r11,16
 80222a4:	52800404 	addi	r10,r10,16
 80222a8:	413ff71e 	bne	r8,r4,8022288 <__alt_data_end+0xfffe2e88>
 80222ac:	63000044 	addi	r12,r12,1
 80222b0:	6018913a 	slli	r12,r12,4
 80222b4:	39c003cc 	andi	r7,r7,15
 80222b8:	010000c4 	movi	r4,3
 80222bc:	1b07883a 	add	r3,r3,r12
 80222c0:	21c00e2e 	bgeu	r4,r7,80222fc <memset+0x100>
 80222c4:	1813883a 	mov	r9,r3
 80222c8:	3811883a 	mov	r8,r7
 80222cc:	010000c4 	movi	r4,3
 80222d0:	49800015 	stw	r6,0(r9)
 80222d4:	423fff04 	addi	r8,r8,-4
 80222d8:	4a400104 	addi	r9,r9,4
 80222dc:	223ffc36 	bltu	r4,r8,80222d0 <__alt_data_end+0xfffe2ed0>
 80222e0:	393fff04 	addi	r4,r7,-4
 80222e4:	2008d0ba 	srli	r4,r4,2
 80222e8:	39c000cc 	andi	r7,r7,3
 80222ec:	21000044 	addi	r4,r4,1
 80222f0:	2109883a 	add	r4,r4,r4
 80222f4:	2109883a 	add	r4,r4,r4
 80222f8:	1907883a 	add	r3,r3,r4
 80222fc:	38000526 	beq	r7,zero,8022314 <memset+0x118>
 8022300:	19cf883a 	add	r7,r3,r7
 8022304:	19400005 	stb	r5,0(r3)
 8022308:	18c00044 	addi	r3,r3,1
 802230c:	38fffd1e 	bne	r7,r3,8022304 <__alt_data_end+0xfffe2f04>
 8022310:	f800283a 	ret
 8022314:	f800283a 	ret
 8022318:	2007883a 	mov	r3,r4
 802231c:	300f883a 	mov	r7,r6
 8022320:	003fc706 	br	8022240 <__alt_data_end+0xfffe2e40>

08022324 <_realloc_r>:
 8022324:	defff604 	addi	sp,sp,-40
 8022328:	dc800215 	stw	r18,8(sp)
 802232c:	dfc00915 	stw	ra,36(sp)
 8022330:	df000815 	stw	fp,32(sp)
 8022334:	ddc00715 	stw	r23,28(sp)
 8022338:	dd800615 	stw	r22,24(sp)
 802233c:	dd400515 	stw	r21,20(sp)
 8022340:	dd000415 	stw	r20,16(sp)
 8022344:	dcc00315 	stw	r19,12(sp)
 8022348:	dc400115 	stw	r17,4(sp)
 802234c:	dc000015 	stw	r16,0(sp)
 8022350:	3025883a 	mov	r18,r6
 8022354:	2800b726 	beq	r5,zero,8022634 <_realloc_r+0x310>
 8022358:	282b883a 	mov	r21,r5
 802235c:	2029883a 	mov	r20,r4
 8022360:	8023e7c0 	call	8023e7c <__malloc_lock>
 8022364:	a8bfff17 	ldw	r2,-4(r21)
 8022368:	043fff04 	movi	r16,-4
 802236c:	90c002c4 	addi	r3,r18,11
 8022370:	01000584 	movi	r4,22
 8022374:	acfffe04 	addi	r19,r21,-8
 8022378:	1420703a 	and	r16,r2,r16
 802237c:	20c0332e 	bgeu	r4,r3,802244c <_realloc_r+0x128>
 8022380:	047ffe04 	movi	r17,-8
 8022384:	1c62703a 	and	r17,r3,r17
 8022388:	8807883a 	mov	r3,r17
 802238c:	88005816 	blt	r17,zero,80224f0 <_realloc_r+0x1cc>
 8022390:	8c805736 	bltu	r17,r18,80224f0 <_realloc_r+0x1cc>
 8022394:	80c0300e 	bge	r16,r3,8022458 <_realloc_r+0x134>
 8022398:	070200b4 	movhi	fp,2050
 802239c:	e71dd404 	addi	fp,fp,30544
 80223a0:	e1c00217 	ldw	r7,8(fp)
 80223a4:	9c09883a 	add	r4,r19,r16
 80223a8:	22000117 	ldw	r8,4(r4)
 80223ac:	21c06326 	beq	r4,r7,802253c <_realloc_r+0x218>
 80223b0:	017fff84 	movi	r5,-2
 80223b4:	414a703a 	and	r5,r8,r5
 80223b8:	214b883a 	add	r5,r4,r5
 80223bc:	29800117 	ldw	r6,4(r5)
 80223c0:	3180004c 	andi	r6,r6,1
 80223c4:	30003f26 	beq	r6,zero,80224c4 <_realloc_r+0x1a0>
 80223c8:	1080004c 	andi	r2,r2,1
 80223cc:	10008326 	beq	r2,zero,80225dc <_realloc_r+0x2b8>
 80223d0:	900b883a 	mov	r5,r18
 80223d4:	a009883a 	mov	r4,r20
 80223d8:	80216680 	call	8021668 <_malloc_r>
 80223dc:	1025883a 	mov	r18,r2
 80223e0:	10011e26 	beq	r2,zero,802285c <_realloc_r+0x538>
 80223e4:	a93fff17 	ldw	r4,-4(r21)
 80223e8:	10fffe04 	addi	r3,r2,-8
 80223ec:	00bfff84 	movi	r2,-2
 80223f0:	2084703a 	and	r2,r4,r2
 80223f4:	9885883a 	add	r2,r19,r2
 80223f8:	1880ee26 	beq	r3,r2,80227b4 <_realloc_r+0x490>
 80223fc:	81bfff04 	addi	r6,r16,-4
 8022400:	00800904 	movi	r2,36
 8022404:	1180b836 	bltu	r2,r6,80226e8 <_realloc_r+0x3c4>
 8022408:	00c004c4 	movi	r3,19
 802240c:	19809636 	bltu	r3,r6,8022668 <_realloc_r+0x344>
 8022410:	9005883a 	mov	r2,r18
 8022414:	a807883a 	mov	r3,r21
 8022418:	19000017 	ldw	r4,0(r3)
 802241c:	11000015 	stw	r4,0(r2)
 8022420:	19000117 	ldw	r4,4(r3)
 8022424:	11000115 	stw	r4,4(r2)
 8022428:	18c00217 	ldw	r3,8(r3)
 802242c:	10c00215 	stw	r3,8(r2)
 8022430:	a80b883a 	mov	r5,r21
 8022434:	a009883a 	mov	r4,r20
 8022438:	80230f00 	call	80230f0 <_free_r>
 802243c:	a009883a 	mov	r4,r20
 8022440:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8022444:	9005883a 	mov	r2,r18
 8022448:	00001206 	br	8022494 <_realloc_r+0x170>
 802244c:	00c00404 	movi	r3,16
 8022450:	1823883a 	mov	r17,r3
 8022454:	003fce06 	br	8022390 <__alt_data_end+0xfffe2f90>
 8022458:	a825883a 	mov	r18,r21
 802245c:	8445c83a 	sub	r2,r16,r17
 8022460:	00c003c4 	movi	r3,15
 8022464:	18802636 	bltu	r3,r2,8022500 <_realloc_r+0x1dc>
 8022468:	99800117 	ldw	r6,4(r19)
 802246c:	9c07883a 	add	r3,r19,r16
 8022470:	3180004c 	andi	r6,r6,1
 8022474:	3420b03a 	or	r16,r6,r16
 8022478:	9c000115 	stw	r16,4(r19)
 802247c:	18800117 	ldw	r2,4(r3)
 8022480:	10800054 	ori	r2,r2,1
 8022484:	18800115 	stw	r2,4(r3)
 8022488:	a009883a 	mov	r4,r20
 802248c:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8022490:	9005883a 	mov	r2,r18
 8022494:	dfc00917 	ldw	ra,36(sp)
 8022498:	df000817 	ldw	fp,32(sp)
 802249c:	ddc00717 	ldw	r23,28(sp)
 80224a0:	dd800617 	ldw	r22,24(sp)
 80224a4:	dd400517 	ldw	r21,20(sp)
 80224a8:	dd000417 	ldw	r20,16(sp)
 80224ac:	dcc00317 	ldw	r19,12(sp)
 80224b0:	dc800217 	ldw	r18,8(sp)
 80224b4:	dc400117 	ldw	r17,4(sp)
 80224b8:	dc000017 	ldw	r16,0(sp)
 80224bc:	dec00a04 	addi	sp,sp,40
 80224c0:	f800283a 	ret
 80224c4:	017fff04 	movi	r5,-4
 80224c8:	414a703a 	and	r5,r8,r5
 80224cc:	814d883a 	add	r6,r16,r5
 80224d0:	30c01f16 	blt	r6,r3,8022550 <_realloc_r+0x22c>
 80224d4:	20800317 	ldw	r2,12(r4)
 80224d8:	20c00217 	ldw	r3,8(r4)
 80224dc:	a825883a 	mov	r18,r21
 80224e0:	3021883a 	mov	r16,r6
 80224e4:	18800315 	stw	r2,12(r3)
 80224e8:	10c00215 	stw	r3,8(r2)
 80224ec:	003fdb06 	br	802245c <__alt_data_end+0xfffe305c>
 80224f0:	00800304 	movi	r2,12
 80224f4:	a0800015 	stw	r2,0(r20)
 80224f8:	0005883a 	mov	r2,zero
 80224fc:	003fe506 	br	8022494 <__alt_data_end+0xfffe3094>
 8022500:	98c00117 	ldw	r3,4(r19)
 8022504:	9c4b883a 	add	r5,r19,r17
 8022508:	11000054 	ori	r4,r2,1
 802250c:	18c0004c 	andi	r3,r3,1
 8022510:	1c62b03a 	or	r17,r3,r17
 8022514:	9c400115 	stw	r17,4(r19)
 8022518:	29000115 	stw	r4,4(r5)
 802251c:	2885883a 	add	r2,r5,r2
 8022520:	10c00117 	ldw	r3,4(r2)
 8022524:	29400204 	addi	r5,r5,8
 8022528:	a009883a 	mov	r4,r20
 802252c:	18c00054 	ori	r3,r3,1
 8022530:	10c00115 	stw	r3,4(r2)
 8022534:	80230f00 	call	80230f0 <_free_r>
 8022538:	003fd306 	br	8022488 <__alt_data_end+0xfffe3088>
 802253c:	017fff04 	movi	r5,-4
 8022540:	414a703a 	and	r5,r8,r5
 8022544:	89800404 	addi	r6,r17,16
 8022548:	8151883a 	add	r8,r16,r5
 802254c:	4180590e 	bge	r8,r6,80226b4 <_realloc_r+0x390>
 8022550:	1080004c 	andi	r2,r2,1
 8022554:	103f9e1e 	bne	r2,zero,80223d0 <__alt_data_end+0xfffe2fd0>
 8022558:	adbffe17 	ldw	r22,-8(r21)
 802255c:	00bfff04 	movi	r2,-4
 8022560:	9dadc83a 	sub	r22,r19,r22
 8022564:	b1800117 	ldw	r6,4(r22)
 8022568:	3084703a 	and	r2,r6,r2
 802256c:	20002026 	beq	r4,zero,80225f0 <_realloc_r+0x2cc>
 8022570:	80af883a 	add	r23,r16,r2
 8022574:	b96f883a 	add	r23,r23,r5
 8022578:	21c05f26 	beq	r4,r7,80226f8 <_realloc_r+0x3d4>
 802257c:	b8c01c16 	blt	r23,r3,80225f0 <_realloc_r+0x2cc>
 8022580:	20800317 	ldw	r2,12(r4)
 8022584:	20c00217 	ldw	r3,8(r4)
 8022588:	81bfff04 	addi	r6,r16,-4
 802258c:	01000904 	movi	r4,36
 8022590:	18800315 	stw	r2,12(r3)
 8022594:	10c00215 	stw	r3,8(r2)
 8022598:	b0c00217 	ldw	r3,8(r22)
 802259c:	b0800317 	ldw	r2,12(r22)
 80225a0:	b4800204 	addi	r18,r22,8
 80225a4:	18800315 	stw	r2,12(r3)
 80225a8:	10c00215 	stw	r3,8(r2)
 80225ac:	21801b36 	bltu	r4,r6,802261c <_realloc_r+0x2f8>
 80225b0:	008004c4 	movi	r2,19
 80225b4:	1180352e 	bgeu	r2,r6,802268c <_realloc_r+0x368>
 80225b8:	a8800017 	ldw	r2,0(r21)
 80225bc:	b0800215 	stw	r2,8(r22)
 80225c0:	a8800117 	ldw	r2,4(r21)
 80225c4:	b0800315 	stw	r2,12(r22)
 80225c8:	008006c4 	movi	r2,27
 80225cc:	11807f36 	bltu	r2,r6,80227cc <_realloc_r+0x4a8>
 80225d0:	b0800404 	addi	r2,r22,16
 80225d4:	ad400204 	addi	r21,r21,8
 80225d8:	00002d06 	br	8022690 <_realloc_r+0x36c>
 80225dc:	adbffe17 	ldw	r22,-8(r21)
 80225e0:	00bfff04 	movi	r2,-4
 80225e4:	9dadc83a 	sub	r22,r19,r22
 80225e8:	b1000117 	ldw	r4,4(r22)
 80225ec:	2084703a 	and	r2,r4,r2
 80225f0:	b03f7726 	beq	r22,zero,80223d0 <__alt_data_end+0xfffe2fd0>
 80225f4:	80af883a 	add	r23,r16,r2
 80225f8:	b8ff7516 	blt	r23,r3,80223d0 <__alt_data_end+0xfffe2fd0>
 80225fc:	b0800317 	ldw	r2,12(r22)
 8022600:	b0c00217 	ldw	r3,8(r22)
 8022604:	81bfff04 	addi	r6,r16,-4
 8022608:	01000904 	movi	r4,36
 802260c:	18800315 	stw	r2,12(r3)
 8022610:	10c00215 	stw	r3,8(r2)
 8022614:	b4800204 	addi	r18,r22,8
 8022618:	21bfe52e 	bgeu	r4,r6,80225b0 <__alt_data_end+0xfffe31b0>
 802261c:	a80b883a 	mov	r5,r21
 8022620:	9009883a 	mov	r4,r18
 8022624:	80220a00 	call	80220a0 <memmove>
 8022628:	b821883a 	mov	r16,r23
 802262c:	b027883a 	mov	r19,r22
 8022630:	003f8a06 	br	802245c <__alt_data_end+0xfffe305c>
 8022634:	300b883a 	mov	r5,r6
 8022638:	dfc00917 	ldw	ra,36(sp)
 802263c:	df000817 	ldw	fp,32(sp)
 8022640:	ddc00717 	ldw	r23,28(sp)
 8022644:	dd800617 	ldw	r22,24(sp)
 8022648:	dd400517 	ldw	r21,20(sp)
 802264c:	dd000417 	ldw	r20,16(sp)
 8022650:	dcc00317 	ldw	r19,12(sp)
 8022654:	dc800217 	ldw	r18,8(sp)
 8022658:	dc400117 	ldw	r17,4(sp)
 802265c:	dc000017 	ldw	r16,0(sp)
 8022660:	dec00a04 	addi	sp,sp,40
 8022664:	80216681 	jmpi	8021668 <_malloc_r>
 8022668:	a8c00017 	ldw	r3,0(r21)
 802266c:	90c00015 	stw	r3,0(r18)
 8022670:	a8c00117 	ldw	r3,4(r21)
 8022674:	90c00115 	stw	r3,4(r18)
 8022678:	00c006c4 	movi	r3,27
 802267c:	19804536 	bltu	r3,r6,8022794 <_realloc_r+0x470>
 8022680:	90800204 	addi	r2,r18,8
 8022684:	a8c00204 	addi	r3,r21,8
 8022688:	003f6306 	br	8022418 <__alt_data_end+0xfffe3018>
 802268c:	9005883a 	mov	r2,r18
 8022690:	a8c00017 	ldw	r3,0(r21)
 8022694:	b821883a 	mov	r16,r23
 8022698:	b027883a 	mov	r19,r22
 802269c:	10c00015 	stw	r3,0(r2)
 80226a0:	a8c00117 	ldw	r3,4(r21)
 80226a4:	10c00115 	stw	r3,4(r2)
 80226a8:	a8c00217 	ldw	r3,8(r21)
 80226ac:	10c00215 	stw	r3,8(r2)
 80226b0:	003f6a06 	br	802245c <__alt_data_end+0xfffe305c>
 80226b4:	9c67883a 	add	r19,r19,r17
 80226b8:	4445c83a 	sub	r2,r8,r17
 80226bc:	e4c00215 	stw	r19,8(fp)
 80226c0:	10800054 	ori	r2,r2,1
 80226c4:	98800115 	stw	r2,4(r19)
 80226c8:	a8bfff17 	ldw	r2,-4(r21)
 80226cc:	a009883a 	mov	r4,r20
 80226d0:	1080004c 	andi	r2,r2,1
 80226d4:	1462b03a 	or	r17,r2,r17
 80226d8:	ac7fff15 	stw	r17,-4(r21)
 80226dc:	8023ea00 	call	8023ea0 <__malloc_unlock>
 80226e0:	a805883a 	mov	r2,r21
 80226e4:	003f6b06 	br	8022494 <__alt_data_end+0xfffe3094>
 80226e8:	a80b883a 	mov	r5,r21
 80226ec:	9009883a 	mov	r4,r18
 80226f0:	80220a00 	call	80220a0 <memmove>
 80226f4:	003f4e06 	br	8022430 <__alt_data_end+0xfffe3030>
 80226f8:	89000404 	addi	r4,r17,16
 80226fc:	b93fbc16 	blt	r23,r4,80225f0 <__alt_data_end+0xfffe31f0>
 8022700:	b0800317 	ldw	r2,12(r22)
 8022704:	b0c00217 	ldw	r3,8(r22)
 8022708:	81bfff04 	addi	r6,r16,-4
 802270c:	01000904 	movi	r4,36
 8022710:	18800315 	stw	r2,12(r3)
 8022714:	10c00215 	stw	r3,8(r2)
 8022718:	b4800204 	addi	r18,r22,8
 802271c:	21804336 	bltu	r4,r6,802282c <_realloc_r+0x508>
 8022720:	008004c4 	movi	r2,19
 8022724:	11803f2e 	bgeu	r2,r6,8022824 <_realloc_r+0x500>
 8022728:	a8800017 	ldw	r2,0(r21)
 802272c:	b0800215 	stw	r2,8(r22)
 8022730:	a8800117 	ldw	r2,4(r21)
 8022734:	b0800315 	stw	r2,12(r22)
 8022738:	008006c4 	movi	r2,27
 802273c:	11803f36 	bltu	r2,r6,802283c <_realloc_r+0x518>
 8022740:	b0800404 	addi	r2,r22,16
 8022744:	ad400204 	addi	r21,r21,8
 8022748:	a8c00017 	ldw	r3,0(r21)
 802274c:	10c00015 	stw	r3,0(r2)
 8022750:	a8c00117 	ldw	r3,4(r21)
 8022754:	10c00115 	stw	r3,4(r2)
 8022758:	a8c00217 	ldw	r3,8(r21)
 802275c:	10c00215 	stw	r3,8(r2)
 8022760:	b447883a 	add	r3,r22,r17
 8022764:	bc45c83a 	sub	r2,r23,r17
 8022768:	e0c00215 	stw	r3,8(fp)
 802276c:	10800054 	ori	r2,r2,1
 8022770:	18800115 	stw	r2,4(r3)
 8022774:	b0800117 	ldw	r2,4(r22)
 8022778:	a009883a 	mov	r4,r20
 802277c:	1080004c 	andi	r2,r2,1
 8022780:	1462b03a 	or	r17,r2,r17
 8022784:	b4400115 	stw	r17,4(r22)
 8022788:	8023ea00 	call	8023ea0 <__malloc_unlock>
 802278c:	9005883a 	mov	r2,r18
 8022790:	003f4006 	br	8022494 <__alt_data_end+0xfffe3094>
 8022794:	a8c00217 	ldw	r3,8(r21)
 8022798:	90c00215 	stw	r3,8(r18)
 802279c:	a8c00317 	ldw	r3,12(r21)
 80227a0:	90c00315 	stw	r3,12(r18)
 80227a4:	30801126 	beq	r6,r2,80227ec <_realloc_r+0x4c8>
 80227a8:	90800404 	addi	r2,r18,16
 80227ac:	a8c00404 	addi	r3,r21,16
 80227b0:	003f1906 	br	8022418 <__alt_data_end+0xfffe3018>
 80227b4:	90ffff17 	ldw	r3,-4(r18)
 80227b8:	00bfff04 	movi	r2,-4
 80227bc:	a825883a 	mov	r18,r21
 80227c0:	1884703a 	and	r2,r3,r2
 80227c4:	80a1883a 	add	r16,r16,r2
 80227c8:	003f2406 	br	802245c <__alt_data_end+0xfffe305c>
 80227cc:	a8800217 	ldw	r2,8(r21)
 80227d0:	b0800415 	stw	r2,16(r22)
 80227d4:	a8800317 	ldw	r2,12(r21)
 80227d8:	b0800515 	stw	r2,20(r22)
 80227dc:	31000a26 	beq	r6,r4,8022808 <_realloc_r+0x4e4>
 80227e0:	b0800604 	addi	r2,r22,24
 80227e4:	ad400404 	addi	r21,r21,16
 80227e8:	003fa906 	br	8022690 <__alt_data_end+0xfffe3290>
 80227ec:	a9000417 	ldw	r4,16(r21)
 80227f0:	90800604 	addi	r2,r18,24
 80227f4:	a8c00604 	addi	r3,r21,24
 80227f8:	91000415 	stw	r4,16(r18)
 80227fc:	a9000517 	ldw	r4,20(r21)
 8022800:	91000515 	stw	r4,20(r18)
 8022804:	003f0406 	br	8022418 <__alt_data_end+0xfffe3018>
 8022808:	a8c00417 	ldw	r3,16(r21)
 802280c:	ad400604 	addi	r21,r21,24
 8022810:	b0800804 	addi	r2,r22,32
 8022814:	b0c00615 	stw	r3,24(r22)
 8022818:	a8ffff17 	ldw	r3,-4(r21)
 802281c:	b0c00715 	stw	r3,28(r22)
 8022820:	003f9b06 	br	8022690 <__alt_data_end+0xfffe3290>
 8022824:	9005883a 	mov	r2,r18
 8022828:	003fc706 	br	8022748 <__alt_data_end+0xfffe3348>
 802282c:	a80b883a 	mov	r5,r21
 8022830:	9009883a 	mov	r4,r18
 8022834:	80220a00 	call	80220a0 <memmove>
 8022838:	003fc906 	br	8022760 <__alt_data_end+0xfffe3360>
 802283c:	a8800217 	ldw	r2,8(r21)
 8022840:	b0800415 	stw	r2,16(r22)
 8022844:	a8800317 	ldw	r2,12(r21)
 8022848:	b0800515 	stw	r2,20(r22)
 802284c:	31000726 	beq	r6,r4,802286c <_realloc_r+0x548>
 8022850:	b0800604 	addi	r2,r22,24
 8022854:	ad400404 	addi	r21,r21,16
 8022858:	003fbb06 	br	8022748 <__alt_data_end+0xfffe3348>
 802285c:	a009883a 	mov	r4,r20
 8022860:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8022864:	0005883a 	mov	r2,zero
 8022868:	003f0a06 	br	8022494 <__alt_data_end+0xfffe3094>
 802286c:	a8c00417 	ldw	r3,16(r21)
 8022870:	ad400604 	addi	r21,r21,24
 8022874:	b0800804 	addi	r2,r22,32
 8022878:	b0c00615 	stw	r3,24(r22)
 802287c:	a8ffff17 	ldw	r3,-4(r21)
 8022880:	b0c00715 	stw	r3,28(r22)
 8022884:	003fb006 	br	8022748 <__alt_data_end+0xfffe3348>

08022888 <_sbrk_r>:
 8022888:	defffd04 	addi	sp,sp,-12
 802288c:	dc000015 	stw	r16,0(sp)
 8022890:	040200f4 	movhi	r16,2051
 8022894:	dc400115 	stw	r17,4(sp)
 8022898:	842a2e04 	addi	r16,r16,-22344
 802289c:	2023883a 	mov	r17,r4
 80228a0:	2809883a 	mov	r4,r5
 80228a4:	dfc00215 	stw	ra,8(sp)
 80228a8:	80000015 	stw	zero,0(r16)
 80228ac:	80240880 	call	8024088 <sbrk>
 80228b0:	00ffffc4 	movi	r3,-1
 80228b4:	10c00526 	beq	r2,r3,80228cc <_sbrk_r+0x44>
 80228b8:	dfc00217 	ldw	ra,8(sp)
 80228bc:	dc400117 	ldw	r17,4(sp)
 80228c0:	dc000017 	ldw	r16,0(sp)
 80228c4:	dec00304 	addi	sp,sp,12
 80228c8:	f800283a 	ret
 80228cc:	80c00017 	ldw	r3,0(r16)
 80228d0:	183ff926 	beq	r3,zero,80228b8 <__alt_data_end+0xfffe34b8>
 80228d4:	88c00015 	stw	r3,0(r17)
 80228d8:	003ff706 	br	80228b8 <__alt_data_end+0xfffe34b8>

080228dc <__sread>:
 80228dc:	defffe04 	addi	sp,sp,-8
 80228e0:	dc000015 	stw	r16,0(sp)
 80228e4:	2821883a 	mov	r16,r5
 80228e8:	2940038f 	ldh	r5,14(r5)
 80228ec:	dfc00115 	stw	ra,4(sp)
 80228f0:	802361c0 	call	802361c <_read_r>
 80228f4:	10000716 	blt	r2,zero,8022914 <__sread+0x38>
 80228f8:	80c01417 	ldw	r3,80(r16)
 80228fc:	1887883a 	add	r3,r3,r2
 8022900:	80c01415 	stw	r3,80(r16)
 8022904:	dfc00117 	ldw	ra,4(sp)
 8022908:	dc000017 	ldw	r16,0(sp)
 802290c:	dec00204 	addi	sp,sp,8
 8022910:	f800283a 	ret
 8022914:	80c0030b 	ldhu	r3,12(r16)
 8022918:	18fbffcc 	andi	r3,r3,61439
 802291c:	80c0030d 	sth	r3,12(r16)
 8022920:	dfc00117 	ldw	ra,4(sp)
 8022924:	dc000017 	ldw	r16,0(sp)
 8022928:	dec00204 	addi	sp,sp,8
 802292c:	f800283a 	ret

08022930 <__seofread>:
 8022930:	0005883a 	mov	r2,zero
 8022934:	f800283a 	ret

08022938 <__swrite>:
 8022938:	2880030b 	ldhu	r2,12(r5)
 802293c:	defffb04 	addi	sp,sp,-20
 8022940:	dcc00315 	stw	r19,12(sp)
 8022944:	dc800215 	stw	r18,8(sp)
 8022948:	dc400115 	stw	r17,4(sp)
 802294c:	dc000015 	stw	r16,0(sp)
 8022950:	dfc00415 	stw	ra,16(sp)
 8022954:	10c0400c 	andi	r3,r2,256
 8022958:	2821883a 	mov	r16,r5
 802295c:	2023883a 	mov	r17,r4
 8022960:	3025883a 	mov	r18,r6
 8022964:	3827883a 	mov	r19,r7
 8022968:	18000526 	beq	r3,zero,8022980 <__swrite+0x48>
 802296c:	2940038f 	ldh	r5,14(r5)
 8022970:	01c00084 	movi	r7,2
 8022974:	000d883a 	mov	r6,zero
 8022978:	80234000 	call	8023400 <_lseek_r>
 802297c:	8080030b 	ldhu	r2,12(r16)
 8022980:	8140038f 	ldh	r5,14(r16)
 8022984:	10bbffcc 	andi	r2,r2,61439
 8022988:	980f883a 	mov	r7,r19
 802298c:	900d883a 	mov	r6,r18
 8022990:	8809883a 	mov	r4,r17
 8022994:	8080030d 	sth	r2,12(r16)
 8022998:	dfc00417 	ldw	ra,16(sp)
 802299c:	dcc00317 	ldw	r19,12(sp)
 80229a0:	dc800217 	ldw	r18,8(sp)
 80229a4:	dc400117 	ldw	r17,4(sp)
 80229a8:	dc000017 	ldw	r16,0(sp)
 80229ac:	dec00504 	addi	sp,sp,20
 80229b0:	8022a181 	jmpi	8022a18 <_write_r>

080229b4 <__sseek>:
 80229b4:	defffe04 	addi	sp,sp,-8
 80229b8:	dc000015 	stw	r16,0(sp)
 80229bc:	2821883a 	mov	r16,r5
 80229c0:	2940038f 	ldh	r5,14(r5)
 80229c4:	dfc00115 	stw	ra,4(sp)
 80229c8:	80234000 	call	8023400 <_lseek_r>
 80229cc:	00ffffc4 	movi	r3,-1
 80229d0:	10c00826 	beq	r2,r3,80229f4 <__sseek+0x40>
 80229d4:	80c0030b 	ldhu	r3,12(r16)
 80229d8:	80801415 	stw	r2,80(r16)
 80229dc:	18c40014 	ori	r3,r3,4096
 80229e0:	80c0030d 	sth	r3,12(r16)
 80229e4:	dfc00117 	ldw	ra,4(sp)
 80229e8:	dc000017 	ldw	r16,0(sp)
 80229ec:	dec00204 	addi	sp,sp,8
 80229f0:	f800283a 	ret
 80229f4:	80c0030b 	ldhu	r3,12(r16)
 80229f8:	18fbffcc 	andi	r3,r3,61439
 80229fc:	80c0030d 	sth	r3,12(r16)
 8022a00:	dfc00117 	ldw	ra,4(sp)
 8022a04:	dc000017 	ldw	r16,0(sp)
 8022a08:	dec00204 	addi	sp,sp,8
 8022a0c:	f800283a 	ret

08022a10 <__sclose>:
 8022a10:	2940038f 	ldh	r5,14(r5)
 8022a14:	8022bcc1 	jmpi	8022bcc <_close_r>

08022a18 <_write_r>:
 8022a18:	defffd04 	addi	sp,sp,-12
 8022a1c:	2805883a 	mov	r2,r5
 8022a20:	dc000015 	stw	r16,0(sp)
 8022a24:	040200f4 	movhi	r16,2051
 8022a28:	dc400115 	stw	r17,4(sp)
 8022a2c:	300b883a 	mov	r5,r6
 8022a30:	842a2e04 	addi	r16,r16,-22344
 8022a34:	2023883a 	mov	r17,r4
 8022a38:	380d883a 	mov	r6,r7
 8022a3c:	1009883a 	mov	r4,r2
 8022a40:	dfc00215 	stw	ra,8(sp)
 8022a44:	80000015 	stw	zero,0(r16)
 8022a48:	80241a40 	call	80241a4 <write>
 8022a4c:	00ffffc4 	movi	r3,-1
 8022a50:	10c00526 	beq	r2,r3,8022a68 <_write_r+0x50>
 8022a54:	dfc00217 	ldw	ra,8(sp)
 8022a58:	dc400117 	ldw	r17,4(sp)
 8022a5c:	dc000017 	ldw	r16,0(sp)
 8022a60:	dec00304 	addi	sp,sp,12
 8022a64:	f800283a 	ret
 8022a68:	80c00017 	ldw	r3,0(r16)
 8022a6c:	183ff926 	beq	r3,zero,8022a54 <__alt_data_end+0xfffe3654>
 8022a70:	88c00015 	stw	r3,0(r17)
 8022a74:	003ff706 	br	8022a54 <__alt_data_end+0xfffe3654>

08022a78 <__swsetup_r>:
 8022a78:	008200f4 	movhi	r2,2051
 8022a7c:	defffd04 	addi	sp,sp,-12
 8022a80:	10a36e04 	addi	r2,r2,-29256
 8022a84:	dc400115 	stw	r17,4(sp)
 8022a88:	2023883a 	mov	r17,r4
 8022a8c:	11000017 	ldw	r4,0(r2)
 8022a90:	dc000015 	stw	r16,0(sp)
 8022a94:	dfc00215 	stw	ra,8(sp)
 8022a98:	2821883a 	mov	r16,r5
 8022a9c:	20000226 	beq	r4,zero,8022aa8 <__swsetup_r+0x30>
 8022aa0:	20800e17 	ldw	r2,56(r4)
 8022aa4:	10003126 	beq	r2,zero,8022b6c <__swsetup_r+0xf4>
 8022aa8:	8080030b 	ldhu	r2,12(r16)
 8022aac:	10c0020c 	andi	r3,r2,8
 8022ab0:	1009883a 	mov	r4,r2
 8022ab4:	18000f26 	beq	r3,zero,8022af4 <__swsetup_r+0x7c>
 8022ab8:	80c00417 	ldw	r3,16(r16)
 8022abc:	18001526 	beq	r3,zero,8022b14 <__swsetup_r+0x9c>
 8022ac0:	1100004c 	andi	r4,r2,1
 8022ac4:	20001c1e 	bne	r4,zero,8022b38 <__swsetup_r+0xc0>
 8022ac8:	1080008c 	andi	r2,r2,2
 8022acc:	1000291e 	bne	r2,zero,8022b74 <__swsetup_r+0xfc>
 8022ad0:	80800517 	ldw	r2,20(r16)
 8022ad4:	80800215 	stw	r2,8(r16)
 8022ad8:	18001c26 	beq	r3,zero,8022b4c <__swsetup_r+0xd4>
 8022adc:	0005883a 	mov	r2,zero
 8022ae0:	dfc00217 	ldw	ra,8(sp)
 8022ae4:	dc400117 	ldw	r17,4(sp)
 8022ae8:	dc000017 	ldw	r16,0(sp)
 8022aec:	dec00304 	addi	sp,sp,12
 8022af0:	f800283a 	ret
 8022af4:	2080040c 	andi	r2,r4,16
 8022af8:	10002e26 	beq	r2,zero,8022bb4 <__swsetup_r+0x13c>
 8022afc:	2080010c 	andi	r2,r4,4
 8022b00:	10001e1e 	bne	r2,zero,8022b7c <__swsetup_r+0x104>
 8022b04:	80c00417 	ldw	r3,16(r16)
 8022b08:	20800214 	ori	r2,r4,8
 8022b0c:	8080030d 	sth	r2,12(r16)
 8022b10:	183feb1e 	bne	r3,zero,8022ac0 <__alt_data_end+0xfffe36c0>
 8022b14:	1100a00c 	andi	r4,r2,640
 8022b18:	01408004 	movi	r5,512
 8022b1c:	217fe826 	beq	r4,r5,8022ac0 <__alt_data_end+0xfffe36c0>
 8022b20:	800b883a 	mov	r5,r16
 8022b24:	8809883a 	mov	r4,r17
 8022b28:	80234600 	call	8023460 <__smakebuf_r>
 8022b2c:	8080030b 	ldhu	r2,12(r16)
 8022b30:	80c00417 	ldw	r3,16(r16)
 8022b34:	003fe206 	br	8022ac0 <__alt_data_end+0xfffe36c0>
 8022b38:	80800517 	ldw	r2,20(r16)
 8022b3c:	80000215 	stw	zero,8(r16)
 8022b40:	0085c83a 	sub	r2,zero,r2
 8022b44:	80800615 	stw	r2,24(r16)
 8022b48:	183fe41e 	bne	r3,zero,8022adc <__alt_data_end+0xfffe36dc>
 8022b4c:	80c0030b 	ldhu	r3,12(r16)
 8022b50:	0005883a 	mov	r2,zero
 8022b54:	1900200c 	andi	r4,r3,128
 8022b58:	203fe126 	beq	r4,zero,8022ae0 <__alt_data_end+0xfffe36e0>
 8022b5c:	18c01014 	ori	r3,r3,64
 8022b60:	80c0030d 	sth	r3,12(r16)
 8022b64:	00bfffc4 	movi	r2,-1
 8022b68:	003fdd06 	br	8022ae0 <__alt_data_end+0xfffe36e0>
 8022b6c:	8020fc80 	call	8020fc8 <__sinit>
 8022b70:	003fcd06 	br	8022aa8 <__alt_data_end+0xfffe36a8>
 8022b74:	0005883a 	mov	r2,zero
 8022b78:	003fd606 	br	8022ad4 <__alt_data_end+0xfffe36d4>
 8022b7c:	81400c17 	ldw	r5,48(r16)
 8022b80:	28000626 	beq	r5,zero,8022b9c <__swsetup_r+0x124>
 8022b84:	80801004 	addi	r2,r16,64
 8022b88:	28800326 	beq	r5,r2,8022b98 <__swsetup_r+0x120>
 8022b8c:	8809883a 	mov	r4,r17
 8022b90:	80230f00 	call	80230f0 <_free_r>
 8022b94:	8100030b 	ldhu	r4,12(r16)
 8022b98:	80000c15 	stw	zero,48(r16)
 8022b9c:	80c00417 	ldw	r3,16(r16)
 8022ba0:	00bff6c4 	movi	r2,-37
 8022ba4:	1108703a 	and	r4,r2,r4
 8022ba8:	80000115 	stw	zero,4(r16)
 8022bac:	80c00015 	stw	r3,0(r16)
 8022bb0:	003fd506 	br	8022b08 <__alt_data_end+0xfffe3708>
 8022bb4:	00800244 	movi	r2,9
 8022bb8:	88800015 	stw	r2,0(r17)
 8022bbc:	20801014 	ori	r2,r4,64
 8022bc0:	8080030d 	sth	r2,12(r16)
 8022bc4:	00bfffc4 	movi	r2,-1
 8022bc8:	003fc506 	br	8022ae0 <__alt_data_end+0xfffe36e0>

08022bcc <_close_r>:
 8022bcc:	defffd04 	addi	sp,sp,-12
 8022bd0:	dc000015 	stw	r16,0(sp)
 8022bd4:	040200f4 	movhi	r16,2051
 8022bd8:	dc400115 	stw	r17,4(sp)
 8022bdc:	842a2e04 	addi	r16,r16,-22344
 8022be0:	2023883a 	mov	r17,r4
 8022be4:	2809883a 	mov	r4,r5
 8022be8:	dfc00215 	stw	ra,8(sp)
 8022bec:	80000015 	stw	zero,0(r16)
 8022bf0:	802391c0 	call	802391c <close>
 8022bf4:	00ffffc4 	movi	r3,-1
 8022bf8:	10c00526 	beq	r2,r3,8022c10 <_close_r+0x44>
 8022bfc:	dfc00217 	ldw	ra,8(sp)
 8022c00:	dc400117 	ldw	r17,4(sp)
 8022c04:	dc000017 	ldw	r16,0(sp)
 8022c08:	dec00304 	addi	sp,sp,12
 8022c0c:	f800283a 	ret
 8022c10:	80c00017 	ldw	r3,0(r16)
 8022c14:	183ff926 	beq	r3,zero,8022bfc <__alt_data_end+0xfffe37fc>
 8022c18:	88c00015 	stw	r3,0(r17)
 8022c1c:	003ff706 	br	8022bfc <__alt_data_end+0xfffe37fc>

08022c20 <_fclose_r>:
 8022c20:	28003926 	beq	r5,zero,8022d08 <_fclose_r+0xe8>
 8022c24:	defffc04 	addi	sp,sp,-16
 8022c28:	dc400115 	stw	r17,4(sp)
 8022c2c:	dc000015 	stw	r16,0(sp)
 8022c30:	dfc00315 	stw	ra,12(sp)
 8022c34:	dc800215 	stw	r18,8(sp)
 8022c38:	2023883a 	mov	r17,r4
 8022c3c:	2821883a 	mov	r16,r5
 8022c40:	20000226 	beq	r4,zero,8022c4c <_fclose_r+0x2c>
 8022c44:	20800e17 	ldw	r2,56(r4)
 8022c48:	10002726 	beq	r2,zero,8022ce8 <_fclose_r+0xc8>
 8022c4c:	8080030f 	ldh	r2,12(r16)
 8022c50:	1000071e 	bne	r2,zero,8022c70 <_fclose_r+0x50>
 8022c54:	0005883a 	mov	r2,zero
 8022c58:	dfc00317 	ldw	ra,12(sp)
 8022c5c:	dc800217 	ldw	r18,8(sp)
 8022c60:	dc400117 	ldw	r17,4(sp)
 8022c64:	dc000017 	ldw	r16,0(sp)
 8022c68:	dec00404 	addi	sp,sp,16
 8022c6c:	f800283a 	ret
 8022c70:	800b883a 	mov	r5,r16
 8022c74:	8809883a 	mov	r4,r17
 8022c78:	8022d240 	call	8022d24 <__sflush_r>
 8022c7c:	1025883a 	mov	r18,r2
 8022c80:	80800b17 	ldw	r2,44(r16)
 8022c84:	10000426 	beq	r2,zero,8022c98 <_fclose_r+0x78>
 8022c88:	81400717 	ldw	r5,28(r16)
 8022c8c:	8809883a 	mov	r4,r17
 8022c90:	103ee83a 	callr	r2
 8022c94:	10001616 	blt	r2,zero,8022cf0 <_fclose_r+0xd0>
 8022c98:	8080030b 	ldhu	r2,12(r16)
 8022c9c:	1080200c 	andi	r2,r2,128
 8022ca0:	1000151e 	bne	r2,zero,8022cf8 <_fclose_r+0xd8>
 8022ca4:	81400c17 	ldw	r5,48(r16)
 8022ca8:	28000526 	beq	r5,zero,8022cc0 <_fclose_r+0xa0>
 8022cac:	80801004 	addi	r2,r16,64
 8022cb0:	28800226 	beq	r5,r2,8022cbc <_fclose_r+0x9c>
 8022cb4:	8809883a 	mov	r4,r17
 8022cb8:	80230f00 	call	80230f0 <_free_r>
 8022cbc:	80000c15 	stw	zero,48(r16)
 8022cc0:	81401117 	ldw	r5,68(r16)
 8022cc4:	28000326 	beq	r5,zero,8022cd4 <_fclose_r+0xb4>
 8022cc8:	8809883a 	mov	r4,r17
 8022ccc:	80230f00 	call	80230f0 <_free_r>
 8022cd0:	80001115 	stw	zero,68(r16)
 8022cd4:	8020fd80 	call	8020fd8 <__sfp_lock_acquire>
 8022cd8:	8000030d 	sth	zero,12(r16)
 8022cdc:	8020fdc0 	call	8020fdc <__sfp_lock_release>
 8022ce0:	9005883a 	mov	r2,r18
 8022ce4:	003fdc06 	br	8022c58 <__alt_data_end+0xfffe3858>
 8022ce8:	8020fc80 	call	8020fc8 <__sinit>
 8022cec:	003fd706 	br	8022c4c <__alt_data_end+0xfffe384c>
 8022cf0:	04bfffc4 	movi	r18,-1
 8022cf4:	003fe806 	br	8022c98 <__alt_data_end+0xfffe3898>
 8022cf8:	81400417 	ldw	r5,16(r16)
 8022cfc:	8809883a 	mov	r4,r17
 8022d00:	80230f00 	call	80230f0 <_free_r>
 8022d04:	003fe706 	br	8022ca4 <__alt_data_end+0xfffe38a4>
 8022d08:	0005883a 	mov	r2,zero
 8022d0c:	f800283a 	ret

08022d10 <fclose>:
 8022d10:	008200f4 	movhi	r2,2051
 8022d14:	10a36e04 	addi	r2,r2,-29256
 8022d18:	200b883a 	mov	r5,r4
 8022d1c:	11000017 	ldw	r4,0(r2)
 8022d20:	8022c201 	jmpi	8022c20 <_fclose_r>

08022d24 <__sflush_r>:
 8022d24:	2880030b 	ldhu	r2,12(r5)
 8022d28:	defffb04 	addi	sp,sp,-20
 8022d2c:	dcc00315 	stw	r19,12(sp)
 8022d30:	dc400115 	stw	r17,4(sp)
 8022d34:	dfc00415 	stw	ra,16(sp)
 8022d38:	dc800215 	stw	r18,8(sp)
 8022d3c:	dc000015 	stw	r16,0(sp)
 8022d40:	10c0020c 	andi	r3,r2,8
 8022d44:	2823883a 	mov	r17,r5
 8022d48:	2027883a 	mov	r19,r4
 8022d4c:	1800311e 	bne	r3,zero,8022e14 <__sflush_r+0xf0>
 8022d50:	28c00117 	ldw	r3,4(r5)
 8022d54:	10820014 	ori	r2,r2,2048
 8022d58:	2880030d 	sth	r2,12(r5)
 8022d5c:	00c04b0e 	bge	zero,r3,8022e8c <__sflush_r+0x168>
 8022d60:	8a000a17 	ldw	r8,40(r17)
 8022d64:	40002326 	beq	r8,zero,8022df4 <__sflush_r+0xd0>
 8022d68:	9c000017 	ldw	r16,0(r19)
 8022d6c:	10c4000c 	andi	r3,r2,4096
 8022d70:	98000015 	stw	zero,0(r19)
 8022d74:	18004826 	beq	r3,zero,8022e98 <__sflush_r+0x174>
 8022d78:	89801417 	ldw	r6,80(r17)
 8022d7c:	10c0010c 	andi	r3,r2,4
 8022d80:	18000626 	beq	r3,zero,8022d9c <__sflush_r+0x78>
 8022d84:	88c00117 	ldw	r3,4(r17)
 8022d88:	88800c17 	ldw	r2,48(r17)
 8022d8c:	30cdc83a 	sub	r6,r6,r3
 8022d90:	10000226 	beq	r2,zero,8022d9c <__sflush_r+0x78>
 8022d94:	88800f17 	ldw	r2,60(r17)
 8022d98:	308dc83a 	sub	r6,r6,r2
 8022d9c:	89400717 	ldw	r5,28(r17)
 8022da0:	000f883a 	mov	r7,zero
 8022da4:	9809883a 	mov	r4,r19
 8022da8:	403ee83a 	callr	r8
 8022dac:	00ffffc4 	movi	r3,-1
 8022db0:	10c04426 	beq	r2,r3,8022ec4 <__sflush_r+0x1a0>
 8022db4:	88c0030b 	ldhu	r3,12(r17)
 8022db8:	89000417 	ldw	r4,16(r17)
 8022dbc:	88000115 	stw	zero,4(r17)
 8022dc0:	197dffcc 	andi	r5,r3,63487
 8022dc4:	8940030d 	sth	r5,12(r17)
 8022dc8:	89000015 	stw	r4,0(r17)
 8022dcc:	18c4000c 	andi	r3,r3,4096
 8022dd0:	18002c1e 	bne	r3,zero,8022e84 <__sflush_r+0x160>
 8022dd4:	89400c17 	ldw	r5,48(r17)
 8022dd8:	9c000015 	stw	r16,0(r19)
 8022ddc:	28000526 	beq	r5,zero,8022df4 <__sflush_r+0xd0>
 8022de0:	88801004 	addi	r2,r17,64
 8022de4:	28800226 	beq	r5,r2,8022df0 <__sflush_r+0xcc>
 8022de8:	9809883a 	mov	r4,r19
 8022dec:	80230f00 	call	80230f0 <_free_r>
 8022df0:	88000c15 	stw	zero,48(r17)
 8022df4:	0005883a 	mov	r2,zero
 8022df8:	dfc00417 	ldw	ra,16(sp)
 8022dfc:	dcc00317 	ldw	r19,12(sp)
 8022e00:	dc800217 	ldw	r18,8(sp)
 8022e04:	dc400117 	ldw	r17,4(sp)
 8022e08:	dc000017 	ldw	r16,0(sp)
 8022e0c:	dec00504 	addi	sp,sp,20
 8022e10:	f800283a 	ret
 8022e14:	2c800417 	ldw	r18,16(r5)
 8022e18:	903ff626 	beq	r18,zero,8022df4 <__alt_data_end+0xfffe39f4>
 8022e1c:	2c000017 	ldw	r16,0(r5)
 8022e20:	108000cc 	andi	r2,r2,3
 8022e24:	2c800015 	stw	r18,0(r5)
 8022e28:	84a1c83a 	sub	r16,r16,r18
 8022e2c:	1000131e 	bne	r2,zero,8022e7c <__sflush_r+0x158>
 8022e30:	28800517 	ldw	r2,20(r5)
 8022e34:	88800215 	stw	r2,8(r17)
 8022e38:	04000316 	blt	zero,r16,8022e48 <__sflush_r+0x124>
 8022e3c:	003fed06 	br	8022df4 <__alt_data_end+0xfffe39f4>
 8022e40:	90a5883a 	add	r18,r18,r2
 8022e44:	043feb0e 	bge	zero,r16,8022df4 <__alt_data_end+0xfffe39f4>
 8022e48:	88800917 	ldw	r2,36(r17)
 8022e4c:	89400717 	ldw	r5,28(r17)
 8022e50:	800f883a 	mov	r7,r16
 8022e54:	900d883a 	mov	r6,r18
 8022e58:	9809883a 	mov	r4,r19
 8022e5c:	103ee83a 	callr	r2
 8022e60:	80a1c83a 	sub	r16,r16,r2
 8022e64:	00bff616 	blt	zero,r2,8022e40 <__alt_data_end+0xfffe3a40>
 8022e68:	88c0030b 	ldhu	r3,12(r17)
 8022e6c:	00bfffc4 	movi	r2,-1
 8022e70:	18c01014 	ori	r3,r3,64
 8022e74:	88c0030d 	sth	r3,12(r17)
 8022e78:	003fdf06 	br	8022df8 <__alt_data_end+0xfffe39f8>
 8022e7c:	0005883a 	mov	r2,zero
 8022e80:	003fec06 	br	8022e34 <__alt_data_end+0xfffe3a34>
 8022e84:	88801415 	stw	r2,80(r17)
 8022e88:	003fd206 	br	8022dd4 <__alt_data_end+0xfffe39d4>
 8022e8c:	28c00f17 	ldw	r3,60(r5)
 8022e90:	00ffb316 	blt	zero,r3,8022d60 <__alt_data_end+0xfffe3960>
 8022e94:	003fd706 	br	8022df4 <__alt_data_end+0xfffe39f4>
 8022e98:	89400717 	ldw	r5,28(r17)
 8022e9c:	000d883a 	mov	r6,zero
 8022ea0:	01c00044 	movi	r7,1
 8022ea4:	9809883a 	mov	r4,r19
 8022ea8:	403ee83a 	callr	r8
 8022eac:	100d883a 	mov	r6,r2
 8022eb0:	00bfffc4 	movi	r2,-1
 8022eb4:	30801426 	beq	r6,r2,8022f08 <__sflush_r+0x1e4>
 8022eb8:	8880030b 	ldhu	r2,12(r17)
 8022ebc:	8a000a17 	ldw	r8,40(r17)
 8022ec0:	003fae06 	br	8022d7c <__alt_data_end+0xfffe397c>
 8022ec4:	98c00017 	ldw	r3,0(r19)
 8022ec8:	183fba26 	beq	r3,zero,8022db4 <__alt_data_end+0xfffe39b4>
 8022ecc:	01000744 	movi	r4,29
 8022ed0:	19000626 	beq	r3,r4,8022eec <__sflush_r+0x1c8>
 8022ed4:	01000584 	movi	r4,22
 8022ed8:	19000426 	beq	r3,r4,8022eec <__sflush_r+0x1c8>
 8022edc:	88c0030b 	ldhu	r3,12(r17)
 8022ee0:	18c01014 	ori	r3,r3,64
 8022ee4:	88c0030d 	sth	r3,12(r17)
 8022ee8:	003fc306 	br	8022df8 <__alt_data_end+0xfffe39f8>
 8022eec:	8880030b 	ldhu	r2,12(r17)
 8022ef0:	88c00417 	ldw	r3,16(r17)
 8022ef4:	88000115 	stw	zero,4(r17)
 8022ef8:	10bdffcc 	andi	r2,r2,63487
 8022efc:	8880030d 	sth	r2,12(r17)
 8022f00:	88c00015 	stw	r3,0(r17)
 8022f04:	003fb306 	br	8022dd4 <__alt_data_end+0xfffe39d4>
 8022f08:	98800017 	ldw	r2,0(r19)
 8022f0c:	103fea26 	beq	r2,zero,8022eb8 <__alt_data_end+0xfffe3ab8>
 8022f10:	00c00744 	movi	r3,29
 8022f14:	10c00226 	beq	r2,r3,8022f20 <__sflush_r+0x1fc>
 8022f18:	00c00584 	movi	r3,22
 8022f1c:	10c0031e 	bne	r2,r3,8022f2c <__sflush_r+0x208>
 8022f20:	9c000015 	stw	r16,0(r19)
 8022f24:	0005883a 	mov	r2,zero
 8022f28:	003fb306 	br	8022df8 <__alt_data_end+0xfffe39f8>
 8022f2c:	88c0030b 	ldhu	r3,12(r17)
 8022f30:	3005883a 	mov	r2,r6
 8022f34:	18c01014 	ori	r3,r3,64
 8022f38:	88c0030d 	sth	r3,12(r17)
 8022f3c:	003fae06 	br	8022df8 <__alt_data_end+0xfffe39f8>

08022f40 <_fflush_r>:
 8022f40:	defffd04 	addi	sp,sp,-12
 8022f44:	dc000115 	stw	r16,4(sp)
 8022f48:	dfc00215 	stw	ra,8(sp)
 8022f4c:	2021883a 	mov	r16,r4
 8022f50:	20000226 	beq	r4,zero,8022f5c <_fflush_r+0x1c>
 8022f54:	20800e17 	ldw	r2,56(r4)
 8022f58:	10000c26 	beq	r2,zero,8022f8c <_fflush_r+0x4c>
 8022f5c:	2880030f 	ldh	r2,12(r5)
 8022f60:	1000051e 	bne	r2,zero,8022f78 <_fflush_r+0x38>
 8022f64:	0005883a 	mov	r2,zero
 8022f68:	dfc00217 	ldw	ra,8(sp)
 8022f6c:	dc000117 	ldw	r16,4(sp)
 8022f70:	dec00304 	addi	sp,sp,12
 8022f74:	f800283a 	ret
 8022f78:	8009883a 	mov	r4,r16
 8022f7c:	dfc00217 	ldw	ra,8(sp)
 8022f80:	dc000117 	ldw	r16,4(sp)
 8022f84:	dec00304 	addi	sp,sp,12
 8022f88:	8022d241 	jmpi	8022d24 <__sflush_r>
 8022f8c:	d9400015 	stw	r5,0(sp)
 8022f90:	8020fc80 	call	8020fc8 <__sinit>
 8022f94:	d9400017 	ldw	r5,0(sp)
 8022f98:	003ff006 	br	8022f5c <__alt_data_end+0xfffe3b5c>

08022f9c <fflush>:
 8022f9c:	20000526 	beq	r4,zero,8022fb4 <fflush+0x18>
 8022fa0:	008200f4 	movhi	r2,2051
 8022fa4:	10a36e04 	addi	r2,r2,-29256
 8022fa8:	200b883a 	mov	r5,r4
 8022fac:	11000017 	ldw	r4,0(r2)
 8022fb0:	8022f401 	jmpi	8022f40 <_fflush_r>
 8022fb4:	008200f4 	movhi	r2,2051
 8022fb8:	10a36d04 	addi	r2,r2,-29260
 8022fbc:	11000017 	ldw	r4,0(r2)
 8022fc0:	014200b4 	movhi	r5,2050
 8022fc4:	294bd004 	addi	r5,r5,12096
 8022fc8:	80215a41 	jmpi	80215a4 <_fwalk_reent>

08022fcc <_malloc_trim_r>:
 8022fcc:	defffb04 	addi	sp,sp,-20
 8022fd0:	dcc00315 	stw	r19,12(sp)
 8022fd4:	04c200b4 	movhi	r19,2050
 8022fd8:	dc800215 	stw	r18,8(sp)
 8022fdc:	dc400115 	stw	r17,4(sp)
 8022fe0:	dc000015 	stw	r16,0(sp)
 8022fe4:	dfc00415 	stw	ra,16(sp)
 8022fe8:	2821883a 	mov	r16,r5
 8022fec:	9cddd404 	addi	r19,r19,30544
 8022ff0:	2025883a 	mov	r18,r4
 8022ff4:	8023e7c0 	call	8023e7c <__malloc_lock>
 8022ff8:	98800217 	ldw	r2,8(r19)
 8022ffc:	14400117 	ldw	r17,4(r2)
 8023000:	00bfff04 	movi	r2,-4
 8023004:	88a2703a 	and	r17,r17,r2
 8023008:	8c21c83a 	sub	r16,r17,r16
 802300c:	8403fbc4 	addi	r16,r16,4079
 8023010:	8020d33a 	srli	r16,r16,12
 8023014:	0083ffc4 	movi	r2,4095
 8023018:	843fffc4 	addi	r16,r16,-1
 802301c:	8020933a 	slli	r16,r16,12
 8023020:	1400060e 	bge	r2,r16,802303c <_malloc_trim_r+0x70>
 8023024:	000b883a 	mov	r5,zero
 8023028:	9009883a 	mov	r4,r18
 802302c:	80228880 	call	8022888 <_sbrk_r>
 8023030:	98c00217 	ldw	r3,8(r19)
 8023034:	1c47883a 	add	r3,r3,r17
 8023038:	10c00a26 	beq	r2,r3,8023064 <_malloc_trim_r+0x98>
 802303c:	9009883a 	mov	r4,r18
 8023040:	8023ea00 	call	8023ea0 <__malloc_unlock>
 8023044:	0005883a 	mov	r2,zero
 8023048:	dfc00417 	ldw	ra,16(sp)
 802304c:	dcc00317 	ldw	r19,12(sp)
 8023050:	dc800217 	ldw	r18,8(sp)
 8023054:	dc400117 	ldw	r17,4(sp)
 8023058:	dc000017 	ldw	r16,0(sp)
 802305c:	dec00504 	addi	sp,sp,20
 8023060:	f800283a 	ret
 8023064:	040bc83a 	sub	r5,zero,r16
 8023068:	9009883a 	mov	r4,r18
 802306c:	80228880 	call	8022888 <_sbrk_r>
 8023070:	00ffffc4 	movi	r3,-1
 8023074:	10c00d26 	beq	r2,r3,80230ac <_malloc_trim_r+0xe0>
 8023078:	00c200f4 	movhi	r3,2051
 802307c:	18ea3604 	addi	r3,r3,-22312
 8023080:	18800017 	ldw	r2,0(r3)
 8023084:	99000217 	ldw	r4,8(r19)
 8023088:	8c23c83a 	sub	r17,r17,r16
 802308c:	8c400054 	ori	r17,r17,1
 8023090:	1421c83a 	sub	r16,r2,r16
 8023094:	24400115 	stw	r17,4(r4)
 8023098:	9009883a 	mov	r4,r18
 802309c:	1c000015 	stw	r16,0(r3)
 80230a0:	8023ea00 	call	8023ea0 <__malloc_unlock>
 80230a4:	00800044 	movi	r2,1
 80230a8:	003fe706 	br	8023048 <__alt_data_end+0xfffe3c48>
 80230ac:	000b883a 	mov	r5,zero
 80230b0:	9009883a 	mov	r4,r18
 80230b4:	80228880 	call	8022888 <_sbrk_r>
 80230b8:	99000217 	ldw	r4,8(r19)
 80230bc:	014003c4 	movi	r5,15
 80230c0:	1107c83a 	sub	r3,r2,r4
 80230c4:	28ffdd0e 	bge	r5,r3,802303c <__alt_data_end+0xfffe3c3c>
 80230c8:	014200f4 	movhi	r5,2051
 80230cc:	29636f04 	addi	r5,r5,-29252
 80230d0:	29400017 	ldw	r5,0(r5)
 80230d4:	18c00054 	ori	r3,r3,1
 80230d8:	20c00115 	stw	r3,4(r4)
 80230dc:	00c200f4 	movhi	r3,2051
 80230e0:	1145c83a 	sub	r2,r2,r5
 80230e4:	18ea3604 	addi	r3,r3,-22312
 80230e8:	18800015 	stw	r2,0(r3)
 80230ec:	003fd306 	br	802303c <__alt_data_end+0xfffe3c3c>

080230f0 <_free_r>:
 80230f0:	28004126 	beq	r5,zero,80231f8 <_free_r+0x108>
 80230f4:	defffd04 	addi	sp,sp,-12
 80230f8:	dc400115 	stw	r17,4(sp)
 80230fc:	dc000015 	stw	r16,0(sp)
 8023100:	2023883a 	mov	r17,r4
 8023104:	2821883a 	mov	r16,r5
 8023108:	dfc00215 	stw	ra,8(sp)
 802310c:	8023e7c0 	call	8023e7c <__malloc_lock>
 8023110:	81ffff17 	ldw	r7,-4(r16)
 8023114:	00bfff84 	movi	r2,-2
 8023118:	010200b4 	movhi	r4,2050
 802311c:	81bffe04 	addi	r6,r16,-8
 8023120:	3884703a 	and	r2,r7,r2
 8023124:	211dd404 	addi	r4,r4,30544
 8023128:	308b883a 	add	r5,r6,r2
 802312c:	2a400117 	ldw	r9,4(r5)
 8023130:	22000217 	ldw	r8,8(r4)
 8023134:	00ffff04 	movi	r3,-4
 8023138:	48c6703a 	and	r3,r9,r3
 802313c:	2a005726 	beq	r5,r8,802329c <_free_r+0x1ac>
 8023140:	28c00115 	stw	r3,4(r5)
 8023144:	39c0004c 	andi	r7,r7,1
 8023148:	3800091e 	bne	r7,zero,8023170 <_free_r+0x80>
 802314c:	823ffe17 	ldw	r8,-8(r16)
 8023150:	22400204 	addi	r9,r4,8
 8023154:	320dc83a 	sub	r6,r6,r8
 8023158:	31c00217 	ldw	r7,8(r6)
 802315c:	1205883a 	add	r2,r2,r8
 8023160:	3a406526 	beq	r7,r9,80232f8 <_free_r+0x208>
 8023164:	32000317 	ldw	r8,12(r6)
 8023168:	3a000315 	stw	r8,12(r7)
 802316c:	41c00215 	stw	r7,8(r8)
 8023170:	28cf883a 	add	r7,r5,r3
 8023174:	39c00117 	ldw	r7,4(r7)
 8023178:	39c0004c 	andi	r7,r7,1
 802317c:	38003a26 	beq	r7,zero,8023268 <_free_r+0x178>
 8023180:	10c00054 	ori	r3,r2,1
 8023184:	30c00115 	stw	r3,4(r6)
 8023188:	3087883a 	add	r3,r6,r2
 802318c:	18800015 	stw	r2,0(r3)
 8023190:	00c07fc4 	movi	r3,511
 8023194:	18801936 	bltu	r3,r2,80231fc <_free_r+0x10c>
 8023198:	1004d0fa 	srli	r2,r2,3
 802319c:	01c00044 	movi	r7,1
 80231a0:	21400117 	ldw	r5,4(r4)
 80231a4:	10c00044 	addi	r3,r2,1
 80231a8:	18c7883a 	add	r3,r3,r3
 80231ac:	1005d0ba 	srai	r2,r2,2
 80231b0:	18c7883a 	add	r3,r3,r3
 80231b4:	18c7883a 	add	r3,r3,r3
 80231b8:	1907883a 	add	r3,r3,r4
 80231bc:	3884983a 	sll	r2,r7,r2
 80231c0:	19c00017 	ldw	r7,0(r3)
 80231c4:	1a3ffe04 	addi	r8,r3,-8
 80231c8:	1144b03a 	or	r2,r2,r5
 80231cc:	32000315 	stw	r8,12(r6)
 80231d0:	31c00215 	stw	r7,8(r6)
 80231d4:	20800115 	stw	r2,4(r4)
 80231d8:	19800015 	stw	r6,0(r3)
 80231dc:	39800315 	stw	r6,12(r7)
 80231e0:	8809883a 	mov	r4,r17
 80231e4:	dfc00217 	ldw	ra,8(sp)
 80231e8:	dc400117 	ldw	r17,4(sp)
 80231ec:	dc000017 	ldw	r16,0(sp)
 80231f0:	dec00304 	addi	sp,sp,12
 80231f4:	8023ea01 	jmpi	8023ea0 <__malloc_unlock>
 80231f8:	f800283a 	ret
 80231fc:	100ad27a 	srli	r5,r2,9
 8023200:	00c00104 	movi	r3,4
 8023204:	19404a36 	bltu	r3,r5,8023330 <_free_r+0x240>
 8023208:	100ad1ba 	srli	r5,r2,6
 802320c:	28c00e44 	addi	r3,r5,57
 8023210:	18c7883a 	add	r3,r3,r3
 8023214:	29400e04 	addi	r5,r5,56
 8023218:	18c7883a 	add	r3,r3,r3
 802321c:	18c7883a 	add	r3,r3,r3
 8023220:	1909883a 	add	r4,r3,r4
 8023224:	20c00017 	ldw	r3,0(r4)
 8023228:	01c200b4 	movhi	r7,2050
 802322c:	213ffe04 	addi	r4,r4,-8
 8023230:	39ddd404 	addi	r7,r7,30544
 8023234:	20c04426 	beq	r4,r3,8023348 <_free_r+0x258>
 8023238:	01ffff04 	movi	r7,-4
 802323c:	19400117 	ldw	r5,4(r3)
 8023240:	29ca703a 	and	r5,r5,r7
 8023244:	1140022e 	bgeu	r2,r5,8023250 <_free_r+0x160>
 8023248:	18c00217 	ldw	r3,8(r3)
 802324c:	20fffb1e 	bne	r4,r3,802323c <__alt_data_end+0xfffe3e3c>
 8023250:	19000317 	ldw	r4,12(r3)
 8023254:	31000315 	stw	r4,12(r6)
 8023258:	30c00215 	stw	r3,8(r6)
 802325c:	21800215 	stw	r6,8(r4)
 8023260:	19800315 	stw	r6,12(r3)
 8023264:	003fde06 	br	80231e0 <__alt_data_end+0xfffe3de0>
 8023268:	29c00217 	ldw	r7,8(r5)
 802326c:	10c5883a 	add	r2,r2,r3
 8023270:	00c200b4 	movhi	r3,2050
 8023274:	18ddd604 	addi	r3,r3,30552
 8023278:	38c03b26 	beq	r7,r3,8023368 <_free_r+0x278>
 802327c:	2a000317 	ldw	r8,12(r5)
 8023280:	11400054 	ori	r5,r2,1
 8023284:	3087883a 	add	r3,r6,r2
 8023288:	3a000315 	stw	r8,12(r7)
 802328c:	41c00215 	stw	r7,8(r8)
 8023290:	31400115 	stw	r5,4(r6)
 8023294:	18800015 	stw	r2,0(r3)
 8023298:	003fbd06 	br	8023190 <__alt_data_end+0xfffe3d90>
 802329c:	39c0004c 	andi	r7,r7,1
 80232a0:	10c5883a 	add	r2,r2,r3
 80232a4:	3800071e 	bne	r7,zero,80232c4 <_free_r+0x1d4>
 80232a8:	81fffe17 	ldw	r7,-8(r16)
 80232ac:	31cdc83a 	sub	r6,r6,r7
 80232b0:	30c00317 	ldw	r3,12(r6)
 80232b4:	31400217 	ldw	r5,8(r6)
 80232b8:	11c5883a 	add	r2,r2,r7
 80232bc:	28c00315 	stw	r3,12(r5)
 80232c0:	19400215 	stw	r5,8(r3)
 80232c4:	10c00054 	ori	r3,r2,1
 80232c8:	30c00115 	stw	r3,4(r6)
 80232cc:	00c200f4 	movhi	r3,2051
 80232d0:	18e37004 	addi	r3,r3,-29248
 80232d4:	18c00017 	ldw	r3,0(r3)
 80232d8:	21800215 	stw	r6,8(r4)
 80232dc:	10ffc036 	bltu	r2,r3,80231e0 <__alt_data_end+0xfffe3de0>
 80232e0:	008200f4 	movhi	r2,2051
 80232e4:	10aa2d04 	addi	r2,r2,-22348
 80232e8:	11400017 	ldw	r5,0(r2)
 80232ec:	8809883a 	mov	r4,r17
 80232f0:	8022fcc0 	call	8022fcc <_malloc_trim_r>
 80232f4:	003fba06 	br	80231e0 <__alt_data_end+0xfffe3de0>
 80232f8:	28c9883a 	add	r4,r5,r3
 80232fc:	21000117 	ldw	r4,4(r4)
 8023300:	2100004c 	andi	r4,r4,1
 8023304:	2000391e 	bne	r4,zero,80233ec <_free_r+0x2fc>
 8023308:	29c00217 	ldw	r7,8(r5)
 802330c:	29000317 	ldw	r4,12(r5)
 8023310:	1885883a 	add	r2,r3,r2
 8023314:	10c00054 	ori	r3,r2,1
 8023318:	39000315 	stw	r4,12(r7)
 802331c:	21c00215 	stw	r7,8(r4)
 8023320:	30c00115 	stw	r3,4(r6)
 8023324:	308d883a 	add	r6,r6,r2
 8023328:	30800015 	stw	r2,0(r6)
 802332c:	003fac06 	br	80231e0 <__alt_data_end+0xfffe3de0>
 8023330:	00c00504 	movi	r3,20
 8023334:	19401536 	bltu	r3,r5,802338c <_free_r+0x29c>
 8023338:	28c01704 	addi	r3,r5,92
 802333c:	18c7883a 	add	r3,r3,r3
 8023340:	294016c4 	addi	r5,r5,91
 8023344:	003fb406 	br	8023218 <__alt_data_end+0xfffe3e18>
 8023348:	280bd0ba 	srai	r5,r5,2
 802334c:	00c00044 	movi	r3,1
 8023350:	38800117 	ldw	r2,4(r7)
 8023354:	194a983a 	sll	r5,r3,r5
 8023358:	2007883a 	mov	r3,r4
 802335c:	2884b03a 	or	r2,r5,r2
 8023360:	38800115 	stw	r2,4(r7)
 8023364:	003fbb06 	br	8023254 <__alt_data_end+0xfffe3e54>
 8023368:	21800515 	stw	r6,20(r4)
 802336c:	21800415 	stw	r6,16(r4)
 8023370:	10c00054 	ori	r3,r2,1
 8023374:	31c00315 	stw	r7,12(r6)
 8023378:	31c00215 	stw	r7,8(r6)
 802337c:	30c00115 	stw	r3,4(r6)
 8023380:	308d883a 	add	r6,r6,r2
 8023384:	30800015 	stw	r2,0(r6)
 8023388:	003f9506 	br	80231e0 <__alt_data_end+0xfffe3de0>
 802338c:	00c01504 	movi	r3,84
 8023390:	19400536 	bltu	r3,r5,80233a8 <_free_r+0x2b8>
 8023394:	100ad33a 	srli	r5,r2,12
 8023398:	28c01bc4 	addi	r3,r5,111
 802339c:	18c7883a 	add	r3,r3,r3
 80233a0:	29401b84 	addi	r5,r5,110
 80233a4:	003f9c06 	br	8023218 <__alt_data_end+0xfffe3e18>
 80233a8:	00c05504 	movi	r3,340
 80233ac:	19400536 	bltu	r3,r5,80233c4 <_free_r+0x2d4>
 80233b0:	100ad3fa 	srli	r5,r2,15
 80233b4:	28c01e04 	addi	r3,r5,120
 80233b8:	18c7883a 	add	r3,r3,r3
 80233bc:	29401dc4 	addi	r5,r5,119
 80233c0:	003f9506 	br	8023218 <__alt_data_end+0xfffe3e18>
 80233c4:	00c15504 	movi	r3,1364
 80233c8:	19400536 	bltu	r3,r5,80233e0 <_free_r+0x2f0>
 80233cc:	100ad4ba 	srli	r5,r2,18
 80233d0:	28c01f44 	addi	r3,r5,125
 80233d4:	18c7883a 	add	r3,r3,r3
 80233d8:	29401f04 	addi	r5,r5,124
 80233dc:	003f8e06 	br	8023218 <__alt_data_end+0xfffe3e18>
 80233e0:	00c03f84 	movi	r3,254
 80233e4:	01401f84 	movi	r5,126
 80233e8:	003f8b06 	br	8023218 <__alt_data_end+0xfffe3e18>
 80233ec:	10c00054 	ori	r3,r2,1
 80233f0:	30c00115 	stw	r3,4(r6)
 80233f4:	308d883a 	add	r6,r6,r2
 80233f8:	30800015 	stw	r2,0(r6)
 80233fc:	003f7806 	br	80231e0 <__alt_data_end+0xfffe3de0>

08023400 <_lseek_r>:
 8023400:	defffd04 	addi	sp,sp,-12
 8023404:	2805883a 	mov	r2,r5
 8023408:	dc000015 	stw	r16,0(sp)
 802340c:	040200f4 	movhi	r16,2051
 8023410:	dc400115 	stw	r17,4(sp)
 8023414:	300b883a 	mov	r5,r6
 8023418:	842a2e04 	addi	r16,r16,-22344
 802341c:	2023883a 	mov	r17,r4
 8023420:	380d883a 	mov	r6,r7
 8023424:	1009883a 	mov	r4,r2
 8023428:	dfc00215 	stw	ra,8(sp)
 802342c:	80000015 	stw	zero,0(r16)
 8023430:	8023d240 	call	8023d24 <lseek>
 8023434:	00ffffc4 	movi	r3,-1
 8023438:	10c00526 	beq	r2,r3,8023450 <_lseek_r+0x50>
 802343c:	dfc00217 	ldw	ra,8(sp)
 8023440:	dc400117 	ldw	r17,4(sp)
 8023444:	dc000017 	ldw	r16,0(sp)
 8023448:	dec00304 	addi	sp,sp,12
 802344c:	f800283a 	ret
 8023450:	80c00017 	ldw	r3,0(r16)
 8023454:	183ff926 	beq	r3,zero,802343c <__alt_data_end+0xfffe403c>
 8023458:	88c00015 	stw	r3,0(r17)
 802345c:	003ff706 	br	802343c <__alt_data_end+0xfffe403c>

08023460 <__smakebuf_r>:
 8023460:	2880030b 	ldhu	r2,12(r5)
 8023464:	10c0008c 	andi	r3,r2,2
 8023468:	1800411e 	bne	r3,zero,8023570 <__smakebuf_r+0x110>
 802346c:	deffec04 	addi	sp,sp,-80
 8023470:	dc000f15 	stw	r16,60(sp)
 8023474:	2821883a 	mov	r16,r5
 8023478:	2940038f 	ldh	r5,14(r5)
 802347c:	dc401015 	stw	r17,64(sp)
 8023480:	dfc01315 	stw	ra,76(sp)
 8023484:	dcc01215 	stw	r19,72(sp)
 8023488:	dc801115 	stw	r18,68(sp)
 802348c:	2023883a 	mov	r17,r4
 8023490:	28001c16 	blt	r5,zero,8023504 <__smakebuf_r+0xa4>
 8023494:	d80d883a 	mov	r6,sp
 8023498:	802367c0 	call	802367c <_fstat_r>
 802349c:	10001816 	blt	r2,zero,8023500 <__smakebuf_r+0xa0>
 80234a0:	d8800117 	ldw	r2,4(sp)
 80234a4:	00e00014 	movui	r3,32768
 80234a8:	10bc000c 	andi	r2,r2,61440
 80234ac:	14c80020 	cmpeqi	r19,r2,8192
 80234b0:	10c03726 	beq	r2,r3,8023590 <__smakebuf_r+0x130>
 80234b4:	80c0030b 	ldhu	r3,12(r16)
 80234b8:	18c20014 	ori	r3,r3,2048
 80234bc:	80c0030d 	sth	r3,12(r16)
 80234c0:	00c80004 	movi	r3,8192
 80234c4:	10c0521e 	bne	r2,r3,8023610 <__smakebuf_r+0x1b0>
 80234c8:	8140038f 	ldh	r5,14(r16)
 80234cc:	8809883a 	mov	r4,r17
 80234d0:	80236d80 	call	80236d8 <_isatty_r>
 80234d4:	10004c26 	beq	r2,zero,8023608 <__smakebuf_r+0x1a8>
 80234d8:	8080030b 	ldhu	r2,12(r16)
 80234dc:	80c010c4 	addi	r3,r16,67
 80234e0:	80c00015 	stw	r3,0(r16)
 80234e4:	10800054 	ori	r2,r2,1
 80234e8:	8080030d 	sth	r2,12(r16)
 80234ec:	00800044 	movi	r2,1
 80234f0:	80c00415 	stw	r3,16(r16)
 80234f4:	80800515 	stw	r2,20(r16)
 80234f8:	04810004 	movi	r18,1024
 80234fc:	00000706 	br	802351c <__smakebuf_r+0xbc>
 8023500:	8080030b 	ldhu	r2,12(r16)
 8023504:	10c0200c 	andi	r3,r2,128
 8023508:	18001f1e 	bne	r3,zero,8023588 <__smakebuf_r+0x128>
 802350c:	04810004 	movi	r18,1024
 8023510:	10820014 	ori	r2,r2,2048
 8023514:	8080030d 	sth	r2,12(r16)
 8023518:	0027883a 	mov	r19,zero
 802351c:	900b883a 	mov	r5,r18
 8023520:	8809883a 	mov	r4,r17
 8023524:	80216680 	call	8021668 <_malloc_r>
 8023528:	10002c26 	beq	r2,zero,80235dc <__smakebuf_r+0x17c>
 802352c:	80c0030b 	ldhu	r3,12(r16)
 8023530:	010200b4 	movhi	r4,2050
 8023534:	21031c04 	addi	r4,r4,3184
 8023538:	89000f15 	stw	r4,60(r17)
 802353c:	18c02014 	ori	r3,r3,128
 8023540:	80c0030d 	sth	r3,12(r16)
 8023544:	80800015 	stw	r2,0(r16)
 8023548:	80800415 	stw	r2,16(r16)
 802354c:	84800515 	stw	r18,20(r16)
 8023550:	98001a1e 	bne	r19,zero,80235bc <__smakebuf_r+0x15c>
 8023554:	dfc01317 	ldw	ra,76(sp)
 8023558:	dcc01217 	ldw	r19,72(sp)
 802355c:	dc801117 	ldw	r18,68(sp)
 8023560:	dc401017 	ldw	r17,64(sp)
 8023564:	dc000f17 	ldw	r16,60(sp)
 8023568:	dec01404 	addi	sp,sp,80
 802356c:	f800283a 	ret
 8023570:	288010c4 	addi	r2,r5,67
 8023574:	28800015 	stw	r2,0(r5)
 8023578:	28800415 	stw	r2,16(r5)
 802357c:	00800044 	movi	r2,1
 8023580:	28800515 	stw	r2,20(r5)
 8023584:	f800283a 	ret
 8023588:	04801004 	movi	r18,64
 802358c:	003fe006 	br	8023510 <__alt_data_end+0xfffe4110>
 8023590:	81000a17 	ldw	r4,40(r16)
 8023594:	00c200b4 	movhi	r3,2050
 8023598:	18ca6d04 	addi	r3,r3,10676
 802359c:	20ffc51e 	bne	r4,r3,80234b4 <__alt_data_end+0xfffe40b4>
 80235a0:	8080030b 	ldhu	r2,12(r16)
 80235a4:	04810004 	movi	r18,1024
 80235a8:	84801315 	stw	r18,76(r16)
 80235ac:	1484b03a 	or	r2,r2,r18
 80235b0:	8080030d 	sth	r2,12(r16)
 80235b4:	0027883a 	mov	r19,zero
 80235b8:	003fd806 	br	802351c <__alt_data_end+0xfffe411c>
 80235bc:	8140038f 	ldh	r5,14(r16)
 80235c0:	8809883a 	mov	r4,r17
 80235c4:	80236d80 	call	80236d8 <_isatty_r>
 80235c8:	103fe226 	beq	r2,zero,8023554 <__alt_data_end+0xfffe4154>
 80235cc:	8080030b 	ldhu	r2,12(r16)
 80235d0:	10800054 	ori	r2,r2,1
 80235d4:	8080030d 	sth	r2,12(r16)
 80235d8:	003fde06 	br	8023554 <__alt_data_end+0xfffe4154>
 80235dc:	8080030b 	ldhu	r2,12(r16)
 80235e0:	10c0800c 	andi	r3,r2,512
 80235e4:	183fdb1e 	bne	r3,zero,8023554 <__alt_data_end+0xfffe4154>
 80235e8:	10800094 	ori	r2,r2,2
 80235ec:	80c010c4 	addi	r3,r16,67
 80235f0:	8080030d 	sth	r2,12(r16)
 80235f4:	00800044 	movi	r2,1
 80235f8:	80c00015 	stw	r3,0(r16)
 80235fc:	80c00415 	stw	r3,16(r16)
 8023600:	80800515 	stw	r2,20(r16)
 8023604:	003fd306 	br	8023554 <__alt_data_end+0xfffe4154>
 8023608:	04810004 	movi	r18,1024
 802360c:	003fc306 	br	802351c <__alt_data_end+0xfffe411c>
 8023610:	0027883a 	mov	r19,zero
 8023614:	04810004 	movi	r18,1024
 8023618:	003fc006 	br	802351c <__alt_data_end+0xfffe411c>

0802361c <_read_r>:
 802361c:	defffd04 	addi	sp,sp,-12
 8023620:	2805883a 	mov	r2,r5
 8023624:	dc000015 	stw	r16,0(sp)
 8023628:	040200f4 	movhi	r16,2051
 802362c:	dc400115 	stw	r17,4(sp)
 8023630:	300b883a 	mov	r5,r6
 8023634:	842a2e04 	addi	r16,r16,-22344
 8023638:	2023883a 	mov	r17,r4
 802363c:	380d883a 	mov	r6,r7
 8023640:	1009883a 	mov	r4,r2
 8023644:	dfc00215 	stw	ra,8(sp)
 8023648:	80000015 	stw	zero,0(r16)
 802364c:	8023f000 	call	8023f00 <read>
 8023650:	00ffffc4 	movi	r3,-1
 8023654:	10c00526 	beq	r2,r3,802366c <_read_r+0x50>
 8023658:	dfc00217 	ldw	ra,8(sp)
 802365c:	dc400117 	ldw	r17,4(sp)
 8023660:	dc000017 	ldw	r16,0(sp)
 8023664:	dec00304 	addi	sp,sp,12
 8023668:	f800283a 	ret
 802366c:	80c00017 	ldw	r3,0(r16)
 8023670:	183ff926 	beq	r3,zero,8023658 <__alt_data_end+0xfffe4258>
 8023674:	88c00015 	stw	r3,0(r17)
 8023678:	003ff706 	br	8023658 <__alt_data_end+0xfffe4258>

0802367c <_fstat_r>:
 802367c:	defffd04 	addi	sp,sp,-12
 8023680:	2805883a 	mov	r2,r5
 8023684:	dc000015 	stw	r16,0(sp)
 8023688:	040200f4 	movhi	r16,2051
 802368c:	dc400115 	stw	r17,4(sp)
 8023690:	842a2e04 	addi	r16,r16,-22344
 8023694:	2023883a 	mov	r17,r4
 8023698:	300b883a 	mov	r5,r6
 802369c:	1009883a 	mov	r4,r2
 80236a0:	dfc00215 	stw	ra,8(sp)
 80236a4:	80000015 	stw	zero,0(r16)
 80236a8:	8023a5c0 	call	8023a5c <fstat>
 80236ac:	00ffffc4 	movi	r3,-1
 80236b0:	10c00526 	beq	r2,r3,80236c8 <_fstat_r+0x4c>
 80236b4:	dfc00217 	ldw	ra,8(sp)
 80236b8:	dc400117 	ldw	r17,4(sp)
 80236bc:	dc000017 	ldw	r16,0(sp)
 80236c0:	dec00304 	addi	sp,sp,12
 80236c4:	f800283a 	ret
 80236c8:	80c00017 	ldw	r3,0(r16)
 80236cc:	183ff926 	beq	r3,zero,80236b4 <__alt_data_end+0xfffe42b4>
 80236d0:	88c00015 	stw	r3,0(r17)
 80236d4:	003ff706 	br	80236b4 <__alt_data_end+0xfffe42b4>

080236d8 <_isatty_r>:
 80236d8:	defffd04 	addi	sp,sp,-12
 80236dc:	dc000015 	stw	r16,0(sp)
 80236e0:	040200f4 	movhi	r16,2051
 80236e4:	dc400115 	stw	r17,4(sp)
 80236e8:	842a2e04 	addi	r16,r16,-22344
 80236ec:	2023883a 	mov	r17,r4
 80236f0:	2809883a 	mov	r4,r5
 80236f4:	dfc00215 	stw	ra,8(sp)
 80236f8:	80000015 	stw	zero,0(r16)
 80236fc:	8023b500 	call	8023b50 <isatty>
 8023700:	00ffffc4 	movi	r3,-1
 8023704:	10c00526 	beq	r2,r3,802371c <_isatty_r+0x44>
 8023708:	dfc00217 	ldw	ra,8(sp)
 802370c:	dc400117 	ldw	r17,4(sp)
 8023710:	dc000017 	ldw	r16,0(sp)
 8023714:	dec00304 	addi	sp,sp,12
 8023718:	f800283a 	ret
 802371c:	80c00017 	ldw	r3,0(r16)
 8023720:	183ff926 	beq	r3,zero,8023708 <__alt_data_end+0xfffe4308>
 8023724:	88c00015 	stw	r3,0(r17)
 8023728:	003ff706 	br	8023708 <__alt_data_end+0xfffe4308>

0802372c <__divsi3>:
 802372c:	20001b16 	blt	r4,zero,802379c <__divsi3+0x70>
 8023730:	000f883a 	mov	r7,zero
 8023734:	28001616 	blt	r5,zero,8023790 <__divsi3+0x64>
 8023738:	200d883a 	mov	r6,r4
 802373c:	29001a2e 	bgeu	r5,r4,80237a8 <__divsi3+0x7c>
 8023740:	00800804 	movi	r2,32
 8023744:	00c00044 	movi	r3,1
 8023748:	00000106 	br	8023750 <__divsi3+0x24>
 802374c:	10000d26 	beq	r2,zero,8023784 <__divsi3+0x58>
 8023750:	294b883a 	add	r5,r5,r5
 8023754:	10bfffc4 	addi	r2,r2,-1
 8023758:	18c7883a 	add	r3,r3,r3
 802375c:	293ffb36 	bltu	r5,r4,802374c <__alt_data_end+0xfffe434c>
 8023760:	0005883a 	mov	r2,zero
 8023764:	18000726 	beq	r3,zero,8023784 <__divsi3+0x58>
 8023768:	0005883a 	mov	r2,zero
 802376c:	31400236 	bltu	r6,r5,8023778 <__divsi3+0x4c>
 8023770:	314dc83a 	sub	r6,r6,r5
 8023774:	10c4b03a 	or	r2,r2,r3
 8023778:	1806d07a 	srli	r3,r3,1
 802377c:	280ad07a 	srli	r5,r5,1
 8023780:	183ffa1e 	bne	r3,zero,802376c <__alt_data_end+0xfffe436c>
 8023784:	38000126 	beq	r7,zero,802378c <__divsi3+0x60>
 8023788:	0085c83a 	sub	r2,zero,r2
 802378c:	f800283a 	ret
 8023790:	014bc83a 	sub	r5,zero,r5
 8023794:	39c0005c 	xori	r7,r7,1
 8023798:	003fe706 	br	8023738 <__alt_data_end+0xfffe4338>
 802379c:	0109c83a 	sub	r4,zero,r4
 80237a0:	01c00044 	movi	r7,1
 80237a4:	003fe306 	br	8023734 <__alt_data_end+0xfffe4334>
 80237a8:	00c00044 	movi	r3,1
 80237ac:	003fee06 	br	8023768 <__alt_data_end+0xfffe4368>

080237b0 <__modsi3>:
 80237b0:	20001716 	blt	r4,zero,8023810 <__modsi3+0x60>
 80237b4:	000f883a 	mov	r7,zero
 80237b8:	2005883a 	mov	r2,r4
 80237bc:	28001216 	blt	r5,zero,8023808 <__modsi3+0x58>
 80237c0:	2900162e 	bgeu	r5,r4,802381c <__modsi3+0x6c>
 80237c4:	01800804 	movi	r6,32
 80237c8:	00c00044 	movi	r3,1
 80237cc:	00000106 	br	80237d4 <__modsi3+0x24>
 80237d0:	30000a26 	beq	r6,zero,80237fc <__modsi3+0x4c>
 80237d4:	294b883a 	add	r5,r5,r5
 80237d8:	31bfffc4 	addi	r6,r6,-1
 80237dc:	18c7883a 	add	r3,r3,r3
 80237e0:	293ffb36 	bltu	r5,r4,80237d0 <__alt_data_end+0xfffe43d0>
 80237e4:	18000526 	beq	r3,zero,80237fc <__modsi3+0x4c>
 80237e8:	1806d07a 	srli	r3,r3,1
 80237ec:	11400136 	bltu	r2,r5,80237f4 <__modsi3+0x44>
 80237f0:	1145c83a 	sub	r2,r2,r5
 80237f4:	280ad07a 	srli	r5,r5,1
 80237f8:	183ffb1e 	bne	r3,zero,80237e8 <__alt_data_end+0xfffe43e8>
 80237fc:	38000126 	beq	r7,zero,8023804 <__modsi3+0x54>
 8023800:	0085c83a 	sub	r2,zero,r2
 8023804:	f800283a 	ret
 8023808:	014bc83a 	sub	r5,zero,r5
 802380c:	003fec06 	br	80237c0 <__alt_data_end+0xfffe43c0>
 8023810:	0109c83a 	sub	r4,zero,r4
 8023814:	01c00044 	movi	r7,1
 8023818:	003fe706 	br	80237b8 <__alt_data_end+0xfffe43b8>
 802381c:	00c00044 	movi	r3,1
 8023820:	003ff106 	br	80237e8 <__alt_data_end+0xfffe43e8>

08023824 <__udivsi3>:
 8023824:	200d883a 	mov	r6,r4
 8023828:	2900152e 	bgeu	r5,r4,8023880 <__udivsi3+0x5c>
 802382c:	28001416 	blt	r5,zero,8023880 <__udivsi3+0x5c>
 8023830:	00800804 	movi	r2,32
 8023834:	00c00044 	movi	r3,1
 8023838:	00000206 	br	8023844 <__udivsi3+0x20>
 802383c:	10000e26 	beq	r2,zero,8023878 <__udivsi3+0x54>
 8023840:	28000516 	blt	r5,zero,8023858 <__udivsi3+0x34>
 8023844:	294b883a 	add	r5,r5,r5
 8023848:	10bfffc4 	addi	r2,r2,-1
 802384c:	18c7883a 	add	r3,r3,r3
 8023850:	293ffa36 	bltu	r5,r4,802383c <__alt_data_end+0xfffe443c>
 8023854:	18000826 	beq	r3,zero,8023878 <__udivsi3+0x54>
 8023858:	0005883a 	mov	r2,zero
 802385c:	31400236 	bltu	r6,r5,8023868 <__udivsi3+0x44>
 8023860:	314dc83a 	sub	r6,r6,r5
 8023864:	10c4b03a 	or	r2,r2,r3
 8023868:	1806d07a 	srli	r3,r3,1
 802386c:	280ad07a 	srli	r5,r5,1
 8023870:	183ffa1e 	bne	r3,zero,802385c <__alt_data_end+0xfffe445c>
 8023874:	f800283a 	ret
 8023878:	0005883a 	mov	r2,zero
 802387c:	f800283a 	ret
 8023880:	00c00044 	movi	r3,1
 8023884:	003ff406 	br	8023858 <__alt_data_end+0xfffe4458>

08023888 <__umodsi3>:
 8023888:	2005883a 	mov	r2,r4
 802388c:	2900122e 	bgeu	r5,r4,80238d8 <__umodsi3+0x50>
 8023890:	28001116 	blt	r5,zero,80238d8 <__umodsi3+0x50>
 8023894:	01800804 	movi	r6,32
 8023898:	00c00044 	movi	r3,1
 802389c:	00000206 	br	80238a8 <__umodsi3+0x20>
 80238a0:	30000c26 	beq	r6,zero,80238d4 <__umodsi3+0x4c>
 80238a4:	28000516 	blt	r5,zero,80238bc <__umodsi3+0x34>
 80238a8:	294b883a 	add	r5,r5,r5
 80238ac:	31bfffc4 	addi	r6,r6,-1
 80238b0:	18c7883a 	add	r3,r3,r3
 80238b4:	293ffa36 	bltu	r5,r4,80238a0 <__alt_data_end+0xfffe44a0>
 80238b8:	18000626 	beq	r3,zero,80238d4 <__umodsi3+0x4c>
 80238bc:	1806d07a 	srli	r3,r3,1
 80238c0:	11400136 	bltu	r2,r5,80238c8 <__umodsi3+0x40>
 80238c4:	1145c83a 	sub	r2,r2,r5
 80238c8:	280ad07a 	srli	r5,r5,1
 80238cc:	183ffb1e 	bne	r3,zero,80238bc <__alt_data_end+0xfffe44bc>
 80238d0:	f800283a 	ret
 80238d4:	f800283a 	ret
 80238d8:	00c00044 	movi	r3,1
 80238dc:	003ff706 	br	80238bc <__alt_data_end+0xfffe44bc>

080238e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80238e0:	defffe04 	addi	sp,sp,-8
 80238e4:	dfc00115 	stw	ra,4(sp)
 80238e8:	df000015 	stw	fp,0(sp)
 80238ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80238f0:	d0a00917 	ldw	r2,-32732(gp)
 80238f4:	10000326 	beq	r2,zero,8023904 <alt_get_errno+0x24>
 80238f8:	d0a00917 	ldw	r2,-32732(gp)
 80238fc:	103ee83a 	callr	r2
 8023900:	00000106 	br	8023908 <alt_get_errno+0x28>
 8023904:	d0a6c104 	addi	r2,gp,-25852
}
 8023908:	e037883a 	mov	sp,fp
 802390c:	dfc00117 	ldw	ra,4(sp)
 8023910:	df000017 	ldw	fp,0(sp)
 8023914:	dec00204 	addi	sp,sp,8
 8023918:	f800283a 	ret

0802391c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 802391c:	defffb04 	addi	sp,sp,-20
 8023920:	dfc00415 	stw	ra,16(sp)
 8023924:	df000315 	stw	fp,12(sp)
 8023928:	df000304 	addi	fp,sp,12
 802392c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8023930:	e0bfff17 	ldw	r2,-4(fp)
 8023934:	10000816 	blt	r2,zero,8023958 <close+0x3c>
 8023938:	01400304 	movi	r5,12
 802393c:	e13fff17 	ldw	r4,-4(fp)
 8023940:	8020ad40 	call	8020ad4 <__mulsi3>
 8023944:	1007883a 	mov	r3,r2
 8023948:	008200b4 	movhi	r2,2050
 802394c:	109ee004 	addi	r2,r2,31616
 8023950:	1885883a 	add	r2,r3,r2
 8023954:	00000106 	br	802395c <close+0x40>
 8023958:	0005883a 	mov	r2,zero
 802395c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8023960:	e0bffd17 	ldw	r2,-12(fp)
 8023964:	10001926 	beq	r2,zero,80239cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8023968:	e0bffd17 	ldw	r2,-12(fp)
 802396c:	10800017 	ldw	r2,0(r2)
 8023970:	10800417 	ldw	r2,16(r2)
 8023974:	10000626 	beq	r2,zero,8023990 <close+0x74>
 8023978:	e0bffd17 	ldw	r2,-12(fp)
 802397c:	10800017 	ldw	r2,0(r2)
 8023980:	10800417 	ldw	r2,16(r2)
 8023984:	e13ffd17 	ldw	r4,-12(fp)
 8023988:	103ee83a 	callr	r2
 802398c:	00000106 	br	8023994 <close+0x78>
 8023990:	0005883a 	mov	r2,zero
 8023994:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8023998:	e13fff17 	ldw	r4,-4(fp)
 802399c:	80240040 	call	8024004 <alt_release_fd>
    if (rval < 0)
 80239a0:	e0bffe17 	ldw	r2,-8(fp)
 80239a4:	1000070e 	bge	r2,zero,80239c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80239a8:	80238e00 	call	80238e0 <alt_get_errno>
 80239ac:	1007883a 	mov	r3,r2
 80239b0:	e0bffe17 	ldw	r2,-8(fp)
 80239b4:	0085c83a 	sub	r2,zero,r2
 80239b8:	18800015 	stw	r2,0(r3)
      return -1;
 80239bc:	00bfffc4 	movi	r2,-1
 80239c0:	00000706 	br	80239e0 <close+0xc4>
    }
    return 0;
 80239c4:	0005883a 	mov	r2,zero
 80239c8:	00000506 	br	80239e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80239cc:	80238e00 	call	80238e0 <alt_get_errno>
 80239d0:	1007883a 	mov	r3,r2
 80239d4:	00801444 	movi	r2,81
 80239d8:	18800015 	stw	r2,0(r3)
    return -1;
 80239dc:	00bfffc4 	movi	r2,-1
  }
}
 80239e0:	e037883a 	mov	sp,fp
 80239e4:	dfc00117 	ldw	ra,4(sp)
 80239e8:	df000017 	ldw	fp,0(sp)
 80239ec:	dec00204 	addi	sp,sp,8
 80239f0:	f800283a 	ret

080239f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80239f4:	defffc04 	addi	sp,sp,-16
 80239f8:	df000315 	stw	fp,12(sp)
 80239fc:	df000304 	addi	fp,sp,12
 8023a00:	e13ffd15 	stw	r4,-12(fp)
 8023a04:	e17ffe15 	stw	r5,-8(fp)
 8023a08:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8023a0c:	e0bfff17 	ldw	r2,-4(fp)
}
 8023a10:	e037883a 	mov	sp,fp
 8023a14:	df000017 	ldw	fp,0(sp)
 8023a18:	dec00104 	addi	sp,sp,4
 8023a1c:	f800283a 	ret

08023a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023a20:	defffe04 	addi	sp,sp,-8
 8023a24:	dfc00115 	stw	ra,4(sp)
 8023a28:	df000015 	stw	fp,0(sp)
 8023a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023a30:	d0a00917 	ldw	r2,-32732(gp)
 8023a34:	10000326 	beq	r2,zero,8023a44 <alt_get_errno+0x24>
 8023a38:	d0a00917 	ldw	r2,-32732(gp)
 8023a3c:	103ee83a 	callr	r2
 8023a40:	00000106 	br	8023a48 <alt_get_errno+0x28>
 8023a44:	d0a6c104 	addi	r2,gp,-25852
}
 8023a48:	e037883a 	mov	sp,fp
 8023a4c:	dfc00117 	ldw	ra,4(sp)
 8023a50:	df000017 	ldw	fp,0(sp)
 8023a54:	dec00204 	addi	sp,sp,8
 8023a58:	f800283a 	ret

08023a5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8023a5c:	defffb04 	addi	sp,sp,-20
 8023a60:	dfc00415 	stw	ra,16(sp)
 8023a64:	df000315 	stw	fp,12(sp)
 8023a68:	df000304 	addi	fp,sp,12
 8023a6c:	e13ffe15 	stw	r4,-8(fp)
 8023a70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023a74:	e0bffe17 	ldw	r2,-8(fp)
 8023a78:	10000816 	blt	r2,zero,8023a9c <fstat+0x40>
 8023a7c:	01400304 	movi	r5,12
 8023a80:	e13ffe17 	ldw	r4,-8(fp)
 8023a84:	8020ad40 	call	8020ad4 <__mulsi3>
 8023a88:	1007883a 	mov	r3,r2
 8023a8c:	008200b4 	movhi	r2,2050
 8023a90:	109ee004 	addi	r2,r2,31616
 8023a94:	1885883a 	add	r2,r3,r2
 8023a98:	00000106 	br	8023aa0 <fstat+0x44>
 8023a9c:	0005883a 	mov	r2,zero
 8023aa0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8023aa4:	e0bffd17 	ldw	r2,-12(fp)
 8023aa8:	10001026 	beq	r2,zero,8023aec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8023aac:	e0bffd17 	ldw	r2,-12(fp)
 8023ab0:	10800017 	ldw	r2,0(r2)
 8023ab4:	10800817 	ldw	r2,32(r2)
 8023ab8:	10000726 	beq	r2,zero,8023ad8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8023abc:	e0bffd17 	ldw	r2,-12(fp)
 8023ac0:	10800017 	ldw	r2,0(r2)
 8023ac4:	10800817 	ldw	r2,32(r2)
 8023ac8:	e17fff17 	ldw	r5,-4(fp)
 8023acc:	e13ffd17 	ldw	r4,-12(fp)
 8023ad0:	103ee83a 	callr	r2
 8023ad4:	00000a06 	br	8023b00 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8023ad8:	e0bfff17 	ldw	r2,-4(fp)
 8023adc:	00c80004 	movi	r3,8192
 8023ae0:	10c00115 	stw	r3,4(r2)
      return 0;
 8023ae4:	0005883a 	mov	r2,zero
 8023ae8:	00000506 	br	8023b00 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8023aec:	8023a200 	call	8023a20 <alt_get_errno>
 8023af0:	1007883a 	mov	r3,r2
 8023af4:	00801444 	movi	r2,81
 8023af8:	18800015 	stw	r2,0(r3)
    return -1;
 8023afc:	00bfffc4 	movi	r2,-1
  }
}
 8023b00:	e037883a 	mov	sp,fp
 8023b04:	dfc00117 	ldw	ra,4(sp)
 8023b08:	df000017 	ldw	fp,0(sp)
 8023b0c:	dec00204 	addi	sp,sp,8
 8023b10:	f800283a 	ret

08023b14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023b14:	defffe04 	addi	sp,sp,-8
 8023b18:	dfc00115 	stw	ra,4(sp)
 8023b1c:	df000015 	stw	fp,0(sp)
 8023b20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023b24:	d0a00917 	ldw	r2,-32732(gp)
 8023b28:	10000326 	beq	r2,zero,8023b38 <alt_get_errno+0x24>
 8023b2c:	d0a00917 	ldw	r2,-32732(gp)
 8023b30:	103ee83a 	callr	r2
 8023b34:	00000106 	br	8023b3c <alt_get_errno+0x28>
 8023b38:	d0a6c104 	addi	r2,gp,-25852
}
 8023b3c:	e037883a 	mov	sp,fp
 8023b40:	dfc00117 	ldw	ra,4(sp)
 8023b44:	df000017 	ldw	fp,0(sp)
 8023b48:	dec00204 	addi	sp,sp,8
 8023b4c:	f800283a 	ret

08023b50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8023b50:	deffed04 	addi	sp,sp,-76
 8023b54:	dfc01215 	stw	ra,72(sp)
 8023b58:	df001115 	stw	fp,68(sp)
 8023b5c:	df001104 	addi	fp,sp,68
 8023b60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023b64:	e0bfff17 	ldw	r2,-4(fp)
 8023b68:	10000816 	blt	r2,zero,8023b8c <isatty+0x3c>
 8023b6c:	01400304 	movi	r5,12
 8023b70:	e13fff17 	ldw	r4,-4(fp)
 8023b74:	8020ad40 	call	8020ad4 <__mulsi3>
 8023b78:	1007883a 	mov	r3,r2
 8023b7c:	008200b4 	movhi	r2,2050
 8023b80:	109ee004 	addi	r2,r2,31616
 8023b84:	1885883a 	add	r2,r3,r2
 8023b88:	00000106 	br	8023b90 <isatty+0x40>
 8023b8c:	0005883a 	mov	r2,zero
 8023b90:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8023b94:	e0bfef17 	ldw	r2,-68(fp)
 8023b98:	10000e26 	beq	r2,zero,8023bd4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8023b9c:	e0bfef17 	ldw	r2,-68(fp)
 8023ba0:	10800017 	ldw	r2,0(r2)
 8023ba4:	10800817 	ldw	r2,32(r2)
 8023ba8:	1000021e 	bne	r2,zero,8023bb4 <isatty+0x64>
    {
      return 1;
 8023bac:	00800044 	movi	r2,1
 8023bb0:	00000d06 	br	8023be8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8023bb4:	e0bff004 	addi	r2,fp,-64
 8023bb8:	100b883a 	mov	r5,r2
 8023bbc:	e13fff17 	ldw	r4,-4(fp)
 8023bc0:	8023a5c0 	call	8023a5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8023bc4:	e0bff117 	ldw	r2,-60(fp)
 8023bc8:	10880020 	cmpeqi	r2,r2,8192
 8023bcc:	10803fcc 	andi	r2,r2,255
 8023bd0:	00000506 	br	8023be8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8023bd4:	8023b140 	call	8023b14 <alt_get_errno>
 8023bd8:	1007883a 	mov	r3,r2
 8023bdc:	00801444 	movi	r2,81
 8023be0:	18800015 	stw	r2,0(r3)
    return 0;
 8023be4:	0005883a 	mov	r2,zero
  }
}
 8023be8:	e037883a 	mov	sp,fp
 8023bec:	dfc00117 	ldw	ra,4(sp)
 8023bf0:	df000017 	ldw	fp,0(sp)
 8023bf4:	dec00204 	addi	sp,sp,8
 8023bf8:	f800283a 	ret

08023bfc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8023bfc:	defffc04 	addi	sp,sp,-16
 8023c00:	df000315 	stw	fp,12(sp)
 8023c04:	df000304 	addi	fp,sp,12
 8023c08:	e13ffd15 	stw	r4,-12(fp)
 8023c0c:	e17ffe15 	stw	r5,-8(fp)
 8023c10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8023c14:	e0fffe17 	ldw	r3,-8(fp)
 8023c18:	e0bffd17 	ldw	r2,-12(fp)
 8023c1c:	18800c26 	beq	r3,r2,8023c50 <alt_load_section+0x54>
  {
    while( to != end )
 8023c20:	00000806 	br	8023c44 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8023c24:	e0bffe17 	ldw	r2,-8(fp)
 8023c28:	10c00104 	addi	r3,r2,4
 8023c2c:	e0fffe15 	stw	r3,-8(fp)
 8023c30:	e0fffd17 	ldw	r3,-12(fp)
 8023c34:	19000104 	addi	r4,r3,4
 8023c38:	e13ffd15 	stw	r4,-12(fp)
 8023c3c:	18c00017 	ldw	r3,0(r3)
 8023c40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8023c44:	e0fffe17 	ldw	r3,-8(fp)
 8023c48:	e0bfff17 	ldw	r2,-4(fp)
 8023c4c:	18bff51e 	bne	r3,r2,8023c24 <__alt_data_end+0xfffe4824>
    {
      *to++ = *from++;
    }
  }
}
 8023c50:	0001883a 	nop
 8023c54:	e037883a 	mov	sp,fp
 8023c58:	df000017 	ldw	fp,0(sp)
 8023c5c:	dec00104 	addi	sp,sp,4
 8023c60:	f800283a 	ret

08023c64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8023c64:	defffe04 	addi	sp,sp,-8
 8023c68:	dfc00115 	stw	ra,4(sp)
 8023c6c:	df000015 	stw	fp,0(sp)
 8023c70:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8023c74:	018200f4 	movhi	r6,2051
 8023c78:	31a37b04 	addi	r6,r6,-29204
 8023c7c:	014200b4 	movhi	r5,2050
 8023c80:	295ccb04 	addi	r5,r5,29484
 8023c84:	010200f4 	movhi	r4,2051
 8023c88:	21237b04 	addi	r4,r4,-29204
 8023c8c:	8023bfc0 	call	8023bfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8023c90:	018200b4 	movhi	r6,2050
 8023c94:	31808c04 	addi	r6,r6,560
 8023c98:	014200b4 	movhi	r5,2050
 8023c9c:	29400804 	addi	r5,r5,32
 8023ca0:	010200b4 	movhi	r4,2050
 8023ca4:	21000804 	addi	r4,r4,32
 8023ca8:	8023bfc0 	call	8023bfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8023cac:	018200b4 	movhi	r6,2050
 8023cb0:	319ccb04 	addi	r6,r6,29484
 8023cb4:	014200b4 	movhi	r5,2050
 8023cb8:	295c9504 	addi	r5,r5,29268
 8023cbc:	010200b4 	movhi	r4,2050
 8023cc0:	211c9504 	addi	r4,r4,29268
 8023cc4:	8023bfc0 	call	8023bfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8023cc8:	802619c0 	call	802619c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8023ccc:	80263ec0 	call	80263ec <alt_icache_flush_all>
}
 8023cd0:	0001883a 	nop
 8023cd4:	e037883a 	mov	sp,fp
 8023cd8:	dfc00117 	ldw	ra,4(sp)
 8023cdc:	df000017 	ldw	fp,0(sp)
 8023ce0:	dec00204 	addi	sp,sp,8
 8023ce4:	f800283a 	ret

08023ce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023ce8:	defffe04 	addi	sp,sp,-8
 8023cec:	dfc00115 	stw	ra,4(sp)
 8023cf0:	df000015 	stw	fp,0(sp)
 8023cf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023cf8:	d0a00917 	ldw	r2,-32732(gp)
 8023cfc:	10000326 	beq	r2,zero,8023d0c <alt_get_errno+0x24>
 8023d00:	d0a00917 	ldw	r2,-32732(gp)
 8023d04:	103ee83a 	callr	r2
 8023d08:	00000106 	br	8023d10 <alt_get_errno+0x28>
 8023d0c:	d0a6c104 	addi	r2,gp,-25852
}
 8023d10:	e037883a 	mov	sp,fp
 8023d14:	dfc00117 	ldw	ra,4(sp)
 8023d18:	df000017 	ldw	fp,0(sp)
 8023d1c:	dec00204 	addi	sp,sp,8
 8023d20:	f800283a 	ret

08023d24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8023d24:	defff904 	addi	sp,sp,-28
 8023d28:	dfc00615 	stw	ra,24(sp)
 8023d2c:	df000515 	stw	fp,20(sp)
 8023d30:	df000504 	addi	fp,sp,20
 8023d34:	e13ffd15 	stw	r4,-12(fp)
 8023d38:	e17ffe15 	stw	r5,-8(fp)
 8023d3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8023d40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023d44:	e0bffd17 	ldw	r2,-12(fp)
 8023d48:	10000816 	blt	r2,zero,8023d6c <lseek+0x48>
 8023d4c:	01400304 	movi	r5,12
 8023d50:	e13ffd17 	ldw	r4,-12(fp)
 8023d54:	8020ad40 	call	8020ad4 <__mulsi3>
 8023d58:	1007883a 	mov	r3,r2
 8023d5c:	008200b4 	movhi	r2,2050
 8023d60:	109ee004 	addi	r2,r2,31616
 8023d64:	1885883a 	add	r2,r3,r2
 8023d68:	00000106 	br	8023d70 <lseek+0x4c>
 8023d6c:	0005883a 	mov	r2,zero
 8023d70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8023d74:	e0bffc17 	ldw	r2,-16(fp)
 8023d78:	10001026 	beq	r2,zero,8023dbc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8023d7c:	e0bffc17 	ldw	r2,-16(fp)
 8023d80:	10800017 	ldw	r2,0(r2)
 8023d84:	10800717 	ldw	r2,28(r2)
 8023d88:	10000926 	beq	r2,zero,8023db0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8023d8c:	e0bffc17 	ldw	r2,-16(fp)
 8023d90:	10800017 	ldw	r2,0(r2)
 8023d94:	10800717 	ldw	r2,28(r2)
 8023d98:	e1bfff17 	ldw	r6,-4(fp)
 8023d9c:	e17ffe17 	ldw	r5,-8(fp)
 8023da0:	e13ffc17 	ldw	r4,-16(fp)
 8023da4:	103ee83a 	callr	r2
 8023da8:	e0bffb15 	stw	r2,-20(fp)
 8023dac:	00000506 	br	8023dc4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8023db0:	00bfde84 	movi	r2,-134
 8023db4:	e0bffb15 	stw	r2,-20(fp)
 8023db8:	00000206 	br	8023dc4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8023dbc:	00bfebc4 	movi	r2,-81
 8023dc0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8023dc4:	e0bffb17 	ldw	r2,-20(fp)
 8023dc8:	1000070e 	bge	r2,zero,8023de8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8023dcc:	8023ce80 	call	8023ce8 <alt_get_errno>
 8023dd0:	1007883a 	mov	r3,r2
 8023dd4:	e0bffb17 	ldw	r2,-20(fp)
 8023dd8:	0085c83a 	sub	r2,zero,r2
 8023ddc:	18800015 	stw	r2,0(r3)
    rc = -1;
 8023de0:	00bfffc4 	movi	r2,-1
 8023de4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8023de8:	e0bffb17 	ldw	r2,-20(fp)
}
 8023dec:	e037883a 	mov	sp,fp
 8023df0:	dfc00117 	ldw	ra,4(sp)
 8023df4:	df000017 	ldw	fp,0(sp)
 8023df8:	dec00204 	addi	sp,sp,8
 8023dfc:	f800283a 	ret

08023e00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8023e00:	defffd04 	addi	sp,sp,-12
 8023e04:	dfc00215 	stw	ra,8(sp)
 8023e08:	df000115 	stw	fp,4(sp)
 8023e0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8023e10:	0009883a 	mov	r4,zero
 8023e14:	80242d80 	call	80242d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8023e18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8023e1c:	80243100 	call	8024310 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8023e20:	018200b4 	movhi	r6,2050
 8023e24:	319cb904 	addi	r6,r6,29412
 8023e28:	014200b4 	movhi	r5,2050
 8023e2c:	295cb904 	addi	r5,r5,29412
 8023e30:	010200b4 	movhi	r4,2050
 8023e34:	211cb904 	addi	r4,r4,29412
 8023e38:	80267900 	call	8026790 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8023e3c:	802629c0 	call	802629c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8023e40:	010200b4 	movhi	r4,2050
 8023e44:	2118bf04 	addi	r4,r4,25340
 8023e48:	8026ec00 	call	8026ec0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8023e4c:	d0a6c217 	ldw	r2,-25848(gp)
 8023e50:	d0e6c317 	ldw	r3,-25844(gp)
 8023e54:	d126c417 	ldw	r4,-25840(gp)
 8023e58:	200d883a 	mov	r6,r4
 8023e5c:	180b883a 	mov	r5,r3
 8023e60:	1009883a 	mov	r4,r2
 8023e64:	80207f80 	call	80207f8 <main>
 8023e68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8023e6c:	01000044 	movi	r4,1
 8023e70:	802391c0 	call	802391c <close>
  exit (result);
 8023e74:	e13fff17 	ldw	r4,-4(fp)
 8023e78:	8026ed40 	call	8026ed4 <exit>

08023e7c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8023e7c:	defffe04 	addi	sp,sp,-8
 8023e80:	df000115 	stw	fp,4(sp)
 8023e84:	df000104 	addi	fp,sp,4
 8023e88:	e13fff15 	stw	r4,-4(fp)
}
 8023e8c:	0001883a 	nop
 8023e90:	e037883a 	mov	sp,fp
 8023e94:	df000017 	ldw	fp,0(sp)
 8023e98:	dec00104 	addi	sp,sp,4
 8023e9c:	f800283a 	ret

08023ea0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8023ea0:	defffe04 	addi	sp,sp,-8
 8023ea4:	df000115 	stw	fp,4(sp)
 8023ea8:	df000104 	addi	fp,sp,4
 8023eac:	e13fff15 	stw	r4,-4(fp)
}
 8023eb0:	0001883a 	nop
 8023eb4:	e037883a 	mov	sp,fp
 8023eb8:	df000017 	ldw	fp,0(sp)
 8023ebc:	dec00104 	addi	sp,sp,4
 8023ec0:	f800283a 	ret

08023ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023ec4:	defffe04 	addi	sp,sp,-8
 8023ec8:	dfc00115 	stw	ra,4(sp)
 8023ecc:	df000015 	stw	fp,0(sp)
 8023ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023ed4:	d0a00917 	ldw	r2,-32732(gp)
 8023ed8:	10000326 	beq	r2,zero,8023ee8 <alt_get_errno+0x24>
 8023edc:	d0a00917 	ldw	r2,-32732(gp)
 8023ee0:	103ee83a 	callr	r2
 8023ee4:	00000106 	br	8023eec <alt_get_errno+0x28>
 8023ee8:	d0a6c104 	addi	r2,gp,-25852
}
 8023eec:	e037883a 	mov	sp,fp
 8023ef0:	dfc00117 	ldw	ra,4(sp)
 8023ef4:	df000017 	ldw	fp,0(sp)
 8023ef8:	dec00204 	addi	sp,sp,8
 8023efc:	f800283a 	ret

08023f00 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8023f00:	defff904 	addi	sp,sp,-28
 8023f04:	dfc00615 	stw	ra,24(sp)
 8023f08:	df000515 	stw	fp,20(sp)
 8023f0c:	df000504 	addi	fp,sp,20
 8023f10:	e13ffd15 	stw	r4,-12(fp)
 8023f14:	e17ffe15 	stw	r5,-8(fp)
 8023f18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023f1c:	e0bffd17 	ldw	r2,-12(fp)
 8023f20:	10000816 	blt	r2,zero,8023f44 <read+0x44>
 8023f24:	01400304 	movi	r5,12
 8023f28:	e13ffd17 	ldw	r4,-12(fp)
 8023f2c:	8020ad40 	call	8020ad4 <__mulsi3>
 8023f30:	1007883a 	mov	r3,r2
 8023f34:	008200b4 	movhi	r2,2050
 8023f38:	109ee004 	addi	r2,r2,31616
 8023f3c:	1885883a 	add	r2,r3,r2
 8023f40:	00000106 	br	8023f48 <read+0x48>
 8023f44:	0005883a 	mov	r2,zero
 8023f48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8023f4c:	e0bffb17 	ldw	r2,-20(fp)
 8023f50:	10002226 	beq	r2,zero,8023fdc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8023f54:	e0bffb17 	ldw	r2,-20(fp)
 8023f58:	10800217 	ldw	r2,8(r2)
 8023f5c:	108000cc 	andi	r2,r2,3
 8023f60:	10800060 	cmpeqi	r2,r2,1
 8023f64:	1000181e 	bne	r2,zero,8023fc8 <read+0xc8>
        (fd->dev->read))
 8023f68:	e0bffb17 	ldw	r2,-20(fp)
 8023f6c:	10800017 	ldw	r2,0(r2)
 8023f70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8023f74:	10001426 	beq	r2,zero,8023fc8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8023f78:	e0bffb17 	ldw	r2,-20(fp)
 8023f7c:	10800017 	ldw	r2,0(r2)
 8023f80:	10800517 	ldw	r2,20(r2)
 8023f84:	e0ffff17 	ldw	r3,-4(fp)
 8023f88:	180d883a 	mov	r6,r3
 8023f8c:	e17ffe17 	ldw	r5,-8(fp)
 8023f90:	e13ffb17 	ldw	r4,-20(fp)
 8023f94:	103ee83a 	callr	r2
 8023f98:	e0bffc15 	stw	r2,-16(fp)
 8023f9c:	e0bffc17 	ldw	r2,-16(fp)
 8023fa0:	1000070e 	bge	r2,zero,8023fc0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8023fa4:	8023ec40 	call	8023ec4 <alt_get_errno>
 8023fa8:	1007883a 	mov	r3,r2
 8023fac:	e0bffc17 	ldw	r2,-16(fp)
 8023fb0:	0085c83a 	sub	r2,zero,r2
 8023fb4:	18800015 	stw	r2,0(r3)
          return -1;
 8023fb8:	00bfffc4 	movi	r2,-1
 8023fbc:	00000c06 	br	8023ff0 <read+0xf0>
        }
        return rval;
 8023fc0:	e0bffc17 	ldw	r2,-16(fp)
 8023fc4:	00000a06 	br	8023ff0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8023fc8:	8023ec40 	call	8023ec4 <alt_get_errno>
 8023fcc:	1007883a 	mov	r3,r2
 8023fd0:	00800344 	movi	r2,13
 8023fd4:	18800015 	stw	r2,0(r3)
 8023fd8:	00000406 	br	8023fec <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8023fdc:	8023ec40 	call	8023ec4 <alt_get_errno>
 8023fe0:	1007883a 	mov	r3,r2
 8023fe4:	00801444 	movi	r2,81
 8023fe8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8023fec:	00bfffc4 	movi	r2,-1
}
 8023ff0:	e037883a 	mov	sp,fp
 8023ff4:	dfc00117 	ldw	ra,4(sp)
 8023ff8:	df000017 	ldw	fp,0(sp)
 8023ffc:	dec00204 	addi	sp,sp,8
 8024000:	f800283a 	ret

08024004 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8024004:	defffc04 	addi	sp,sp,-16
 8024008:	dfc00315 	stw	ra,12(sp)
 802400c:	df000215 	stw	fp,8(sp)
 8024010:	dc000115 	stw	r16,4(sp)
 8024014:	df000204 	addi	fp,sp,8
 8024018:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 802401c:	e0bffe17 	ldw	r2,-8(fp)
 8024020:	108000d0 	cmplti	r2,r2,3
 8024024:	1000111e 	bne	r2,zero,802406c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8024028:	040200b4 	movhi	r16,2050
 802402c:	841ee004 	addi	r16,r16,31616
 8024030:	e0bffe17 	ldw	r2,-8(fp)
 8024034:	01400304 	movi	r5,12
 8024038:	1009883a 	mov	r4,r2
 802403c:	8020ad40 	call	8020ad4 <__mulsi3>
 8024040:	8085883a 	add	r2,r16,r2
 8024044:	10800204 	addi	r2,r2,8
 8024048:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 802404c:	040200b4 	movhi	r16,2050
 8024050:	841ee004 	addi	r16,r16,31616
 8024054:	e0bffe17 	ldw	r2,-8(fp)
 8024058:	01400304 	movi	r5,12
 802405c:	1009883a 	mov	r4,r2
 8024060:	8020ad40 	call	8020ad4 <__mulsi3>
 8024064:	8085883a 	add	r2,r16,r2
 8024068:	10000015 	stw	zero,0(r2)
  }
}
 802406c:	0001883a 	nop
 8024070:	e6ffff04 	addi	sp,fp,-4
 8024074:	dfc00217 	ldw	ra,8(sp)
 8024078:	df000117 	ldw	fp,4(sp)
 802407c:	dc000017 	ldw	r16,0(sp)
 8024080:	dec00304 	addi	sp,sp,12
 8024084:	f800283a 	ret

08024088 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8024088:	defff904 	addi	sp,sp,-28
 802408c:	df000615 	stw	fp,24(sp)
 8024090:	df000604 	addi	fp,sp,24
 8024094:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8024098:	0005303a 	rdctl	r2,status
 802409c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80240a0:	e0fffe17 	ldw	r3,-8(fp)
 80240a4:	00bfff84 	movi	r2,-2
 80240a8:	1884703a 	and	r2,r3,r2
 80240ac:	1001703a 	wrctl	status,r2
  
  return context;
 80240b0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80240b4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80240b8:	d0a00a17 	ldw	r2,-32728(gp)
 80240bc:	10c000c4 	addi	r3,r2,3
 80240c0:	00bfff04 	movi	r2,-4
 80240c4:	1884703a 	and	r2,r3,r2
 80240c8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80240cc:	d0e00a17 	ldw	r3,-32728(gp)
 80240d0:	e0bfff17 	ldw	r2,-4(fp)
 80240d4:	1887883a 	add	r3,r3,r2
 80240d8:	00820134 	movhi	r2,2052
 80240dc:	10bd0004 	addi	r2,r2,-3072
 80240e0:	10c0062e 	bgeu	r2,r3,80240fc <sbrk+0x74>
 80240e4:	e0bffb17 	ldw	r2,-20(fp)
 80240e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80240ec:	e0bffa17 	ldw	r2,-24(fp)
 80240f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80240f4:	00bfffc4 	movi	r2,-1
 80240f8:	00000b06 	br	8024128 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80240fc:	d0a00a17 	ldw	r2,-32728(gp)
 8024100:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8024104:	d0e00a17 	ldw	r3,-32728(gp)
 8024108:	e0bfff17 	ldw	r2,-4(fp)
 802410c:	1885883a 	add	r2,r3,r2
 8024110:	d0a00a15 	stw	r2,-32728(gp)
 8024114:	e0bffb17 	ldw	r2,-20(fp)
 8024118:	e0bffc15 	stw	r2,-16(fp)
 802411c:	e0bffc17 	ldw	r2,-16(fp)
 8024120:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8024124:	e0bffd17 	ldw	r2,-12(fp)
} 
 8024128:	e037883a 	mov	sp,fp
 802412c:	df000017 	ldw	fp,0(sp)
 8024130:	dec00104 	addi	sp,sp,4
 8024134:	f800283a 	ret

08024138 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8024138:	defffd04 	addi	sp,sp,-12
 802413c:	dfc00215 	stw	ra,8(sp)
 8024140:	df000115 	stw	fp,4(sp)
 8024144:	df000104 	addi	fp,sp,4
 8024148:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 802414c:	e13fff17 	ldw	r4,-4(fp)
 8024150:	80260440 	call	8026044 <alt_busy_sleep>
}
 8024154:	e037883a 	mov	sp,fp
 8024158:	dfc00117 	ldw	ra,4(sp)
 802415c:	df000017 	ldw	fp,0(sp)
 8024160:	dec00204 	addi	sp,sp,8
 8024164:	f800283a 	ret

08024168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8024168:	defffe04 	addi	sp,sp,-8
 802416c:	dfc00115 	stw	ra,4(sp)
 8024170:	df000015 	stw	fp,0(sp)
 8024174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8024178:	d0a00917 	ldw	r2,-32732(gp)
 802417c:	10000326 	beq	r2,zero,802418c <alt_get_errno+0x24>
 8024180:	d0a00917 	ldw	r2,-32732(gp)
 8024184:	103ee83a 	callr	r2
 8024188:	00000106 	br	8024190 <alt_get_errno+0x28>
 802418c:	d0a6c104 	addi	r2,gp,-25852
}
 8024190:	e037883a 	mov	sp,fp
 8024194:	dfc00117 	ldw	ra,4(sp)
 8024198:	df000017 	ldw	fp,0(sp)
 802419c:	dec00204 	addi	sp,sp,8
 80241a0:	f800283a 	ret

080241a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80241a4:	defff904 	addi	sp,sp,-28
 80241a8:	dfc00615 	stw	ra,24(sp)
 80241ac:	df000515 	stw	fp,20(sp)
 80241b0:	df000504 	addi	fp,sp,20
 80241b4:	e13ffd15 	stw	r4,-12(fp)
 80241b8:	e17ffe15 	stw	r5,-8(fp)
 80241bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80241c0:	e0bffd17 	ldw	r2,-12(fp)
 80241c4:	10000816 	blt	r2,zero,80241e8 <write+0x44>
 80241c8:	01400304 	movi	r5,12
 80241cc:	e13ffd17 	ldw	r4,-12(fp)
 80241d0:	8020ad40 	call	8020ad4 <__mulsi3>
 80241d4:	1007883a 	mov	r3,r2
 80241d8:	008200b4 	movhi	r2,2050
 80241dc:	109ee004 	addi	r2,r2,31616
 80241e0:	1885883a 	add	r2,r3,r2
 80241e4:	00000106 	br	80241ec <write+0x48>
 80241e8:	0005883a 	mov	r2,zero
 80241ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80241f0:	e0bffb17 	ldw	r2,-20(fp)
 80241f4:	10002126 	beq	r2,zero,802427c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80241f8:	e0bffb17 	ldw	r2,-20(fp)
 80241fc:	10800217 	ldw	r2,8(r2)
 8024200:	108000cc 	andi	r2,r2,3
 8024204:	10001826 	beq	r2,zero,8024268 <write+0xc4>
 8024208:	e0bffb17 	ldw	r2,-20(fp)
 802420c:	10800017 	ldw	r2,0(r2)
 8024210:	10800617 	ldw	r2,24(r2)
 8024214:	10001426 	beq	r2,zero,8024268 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8024218:	e0bffb17 	ldw	r2,-20(fp)
 802421c:	10800017 	ldw	r2,0(r2)
 8024220:	10800617 	ldw	r2,24(r2)
 8024224:	e0ffff17 	ldw	r3,-4(fp)
 8024228:	180d883a 	mov	r6,r3
 802422c:	e17ffe17 	ldw	r5,-8(fp)
 8024230:	e13ffb17 	ldw	r4,-20(fp)
 8024234:	103ee83a 	callr	r2
 8024238:	e0bffc15 	stw	r2,-16(fp)
 802423c:	e0bffc17 	ldw	r2,-16(fp)
 8024240:	1000070e 	bge	r2,zero,8024260 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8024244:	80241680 	call	8024168 <alt_get_errno>
 8024248:	1007883a 	mov	r3,r2
 802424c:	e0bffc17 	ldw	r2,-16(fp)
 8024250:	0085c83a 	sub	r2,zero,r2
 8024254:	18800015 	stw	r2,0(r3)
        return -1;
 8024258:	00bfffc4 	movi	r2,-1
 802425c:	00000c06 	br	8024290 <write+0xec>
      }
      return rval;
 8024260:	e0bffc17 	ldw	r2,-16(fp)
 8024264:	00000a06 	br	8024290 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8024268:	80241680 	call	8024168 <alt_get_errno>
 802426c:	1007883a 	mov	r3,r2
 8024270:	00800344 	movi	r2,13
 8024274:	18800015 	stw	r2,0(r3)
 8024278:	00000406 	br	802428c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 802427c:	80241680 	call	8024168 <alt_get_errno>
 8024280:	1007883a 	mov	r3,r2
 8024284:	00801444 	movi	r2,81
 8024288:	18800015 	stw	r2,0(r3)
  }
  return -1;
 802428c:	00bfffc4 	movi	r2,-1
}
 8024290:	e037883a 	mov	sp,fp
 8024294:	dfc00117 	ldw	ra,4(sp)
 8024298:	df000017 	ldw	fp,0(sp)
 802429c:	dec00204 	addi	sp,sp,8
 80242a0:	f800283a 	ret

080242a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80242a4:	defffd04 	addi	sp,sp,-12
 80242a8:	dfc00215 	stw	ra,8(sp)
 80242ac:	df000115 	stw	fp,4(sp)
 80242b0:	df000104 	addi	fp,sp,4
 80242b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80242b8:	d1600604 	addi	r5,gp,-32744
 80242bc:	e13fff17 	ldw	r4,-4(fp)
 80242c0:	80261f80 	call	80261f8 <alt_dev_llist_insert>
}
 80242c4:	e037883a 	mov	sp,fp
 80242c8:	dfc00117 	ldw	ra,4(sp)
 80242cc:	df000017 	ldw	fp,0(sp)
 80242d0:	dec00204 	addi	sp,sp,8
 80242d4:	f800283a 	ret

080242d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80242d8:	defffd04 	addi	sp,sp,-12
 80242dc:	dfc00215 	stw	ra,8(sp)
 80242e0:	df000115 	stw	fp,4(sp)
 80242e4:	df000104 	addi	fp,sp,4
 80242e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( TOP_LEVEL, top_level);
 80242ec:	8026c340 	call	8026c34 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80242f0:	00800044 	movi	r2,1
 80242f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80242f8:	0001883a 	nop
 80242fc:	e037883a 	mov	sp,fp
 8024300:	dfc00117 	ldw	ra,4(sp)
 8024304:	df000017 	ldw	fp,0(sp)
 8024308:	dec00204 	addi	sp,sp,8
 802430c:	f800283a 	ret

08024310 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8024310:	defffd04 	addi	sp,sp,-12
 8024314:	dfc00215 	stw	ra,8(sp)
 8024318:	df000115 	stw	fp,4(sp)
 802431c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8024320:	000d883a 	mov	r6,zero
 8024324:	000b883a 	mov	r5,zero
 8024328:	010200b4 	movhi	r4,2050
 802432c:	211f4a04 	addi	r4,r4,32040
 8024330:	802469c0 	call	802469c <altera_avalon_jtag_uart_init>
 8024334:	010200b4 	movhi	r4,2050
 8024338:	211f4004 	addi	r4,r4,32000
 802433c:	80242a40 	call	80242a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8024340:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8024344:	008200f4 	movhi	r2,2051
 8024348:	10a35804 	addi	r2,r2,-29344
 802434c:	10800a17 	ldw	r2,40(r2)
 8024350:	10800017 	ldw	r2,0(r2)
 8024354:	1007883a 	mov	r3,r2
 8024358:	008200f4 	movhi	r2,2051
 802435c:	10a35804 	addi	r2,r2,-29344
 8024360:	10c00b15 	stw	r3,44(r2)
 8024364:	008200f4 	movhi	r2,2051
 8024368:	10a35804 	addi	r2,r2,-29344
 802436c:	10800a17 	ldw	r2,40(r2)
 8024370:	10800104 	addi	r2,r2,4
 8024374:	10800017 	ldw	r2,0(r2)
 8024378:	1007883a 	mov	r3,r2
 802437c:	008200f4 	movhi	r2,2051
 8024380:	10a35804 	addi	r2,r2,-29344
 8024384:	10c00c15 	stw	r3,48(r2)
 8024388:	008200f4 	movhi	r2,2051
 802438c:	10a35804 	addi	r2,r2,-29344
 8024390:	10800a17 	ldw	r2,40(r2)
 8024394:	10800204 	addi	r2,r2,8
 8024398:	10800017 	ldw	r2,0(r2)
 802439c:	10ffffcc 	andi	r3,r2,65535
 80243a0:	008200f4 	movhi	r2,2051
 80243a4:	10a35804 	addi	r2,r2,-29344
 80243a8:	10c00f15 	stw	r3,60(r2)
 80243ac:	008200f4 	movhi	r2,2051
 80243b0:	10a35804 	addi	r2,r2,-29344
 80243b4:	10800a17 	ldw	r2,40(r2)
 80243b8:	10800204 	addi	r2,r2,8
 80243bc:	10800017 	ldw	r2,0(r2)
 80243c0:	1006d43a 	srli	r3,r2,16
 80243c4:	008200f4 	movhi	r2,2051
 80243c8:	10a35804 	addi	r2,r2,-29344
 80243cc:	10c01015 	stw	r3,64(r2)
 80243d0:	008200f4 	movhi	r2,2051
 80243d4:	10a35804 	addi	r2,r2,-29344
 80243d8:	10800a17 	ldw	r2,40(r2)
 80243dc:	10800304 	addi	r2,r2,12
 80243e0:	10800017 	ldw	r2,0(r2)
 80243e4:	1005d07a 	srai	r2,r2,1
 80243e8:	10c0004c 	andi	r3,r2,1
 80243ec:	008200f4 	movhi	r2,2051
 80243f0:	10a35804 	addi	r2,r2,-29344
 80243f4:	10c00d15 	stw	r3,52(r2)
 80243f8:	008200f4 	movhi	r2,2051
 80243fc:	10a35804 	addi	r2,r2,-29344
 8024400:	10800a17 	ldw	r2,40(r2)
 8024404:	10800304 	addi	r2,r2,12
 8024408:	10800017 	ldw	r2,0(r2)
 802440c:	1005d13a 	srai	r2,r2,4
 8024410:	10c003cc 	andi	r3,r2,15
 8024414:	008200f4 	movhi	r2,2051
 8024418:	10a35804 	addi	r2,r2,-29344
 802441c:	10c00e15 	stw	r3,56(r2)
 8024420:	008200f4 	movhi	r2,2051
 8024424:	10a35804 	addi	r2,r2,-29344
 8024428:	10800a17 	ldw	r2,40(r2)
 802442c:	10800304 	addi	r2,r2,12
 8024430:	10800017 	ldw	r2,0(r2)
 8024434:	1005d43a 	srai	r2,r2,16
 8024438:	e0bfff05 	stb	r2,-4(fp)
 802443c:	008200f4 	movhi	r2,2051
 8024440:	10a35804 	addi	r2,r2,-29344
 8024444:	10800a17 	ldw	r2,40(r2)
 8024448:	10800304 	addi	r2,r2,12
 802444c:	10800017 	ldw	r2,0(r2)
 8024450:	1004d63a 	srli	r2,r2,24
 8024454:	e0bfff45 	stb	r2,-3(fp)
 8024458:	008200f4 	movhi	r2,2051
 802445c:	10a35804 	addi	r2,r2,-29344
 8024460:	10800e17 	ldw	r2,56(r2)
 8024464:	10800058 	cmpnei	r2,r2,1
 8024468:	1000041e 	bne	r2,zero,802447c <alt_sys_init+0x16c>
 802446c:	008200f4 	movhi	r2,2051
 8024470:	10a35804 	addi	r2,r2,-29344
 8024474:	10001115 	stw	zero,68(r2)
 8024478:	00000e06 	br	80244b4 <alt_sys_init+0x1a4>
 802447c:	008200f4 	movhi	r2,2051
 8024480:	10a35804 	addi	r2,r2,-29344
 8024484:	10800e17 	ldw	r2,56(r2)
 8024488:	10800098 	cmpnei	r2,r2,2
 802448c:	1000051e 	bne	r2,zero,80244a4 <alt_sys_init+0x194>
 8024490:	008200f4 	movhi	r2,2051
 8024494:	10a35804 	addi	r2,r2,-29344
 8024498:	00c00044 	movi	r3,1
 802449c:	10c01115 	stw	r3,68(r2)
 80244a0:	00000406 	br	80244b4 <alt_sys_init+0x1a4>
 80244a4:	008200f4 	movhi	r2,2051
 80244a8:	10a35804 	addi	r2,r2,-29344
 80244ac:	00c00084 	movi	r3,2
 80244b0:	10c01115 	stw	r3,68(r2)
 80244b4:	e0bfff03 	ldbu	r2,-4(fp)
 80244b8:	00c00804 	movi	r3,32
 80244bc:	1885c83a 	sub	r2,r3,r2
 80244c0:	00ffffc4 	movi	r3,-1
 80244c4:	1886d83a 	srl	r3,r3,r2
 80244c8:	008200f4 	movhi	r2,2051
 80244cc:	10a35804 	addi	r2,r2,-29344
 80244d0:	10c01215 	stw	r3,72(r2)
 80244d4:	e0ffff03 	ldbu	r3,-4(fp)
 80244d8:	008200f4 	movhi	r2,2051
 80244dc:	10a35804 	addi	r2,r2,-29344
 80244e0:	10801117 	ldw	r2,68(r2)
 80244e4:	1887883a 	add	r3,r3,r2
 80244e8:	008200f4 	movhi	r2,2051
 80244ec:	10a35804 	addi	r2,r2,-29344
 80244f0:	10c01315 	stw	r3,76(r2)
 80244f4:	e0bfff43 	ldbu	r2,-3(fp)
 80244f8:	00c00804 	movi	r3,32
 80244fc:	1885c83a 	sub	r2,r3,r2
 8024500:	00ffffc4 	movi	r3,-1
 8024504:	1886d83a 	srl	r3,r3,r2
 8024508:	008200f4 	movhi	r2,2051
 802450c:	10a35804 	addi	r2,r2,-29344
 8024510:	10c01415 	stw	r3,80(r2)
 8024514:	010200f4 	movhi	r4,2051
 8024518:	21235804 	addi	r4,r4,-29344
 802451c:	80242a40 	call	80242a4 <alt_dev_reg>
}
 8024520:	0001883a 	nop
 8024524:	e037883a 	mov	sp,fp
 8024528:	dfc00117 	ldw	ra,4(sp)
 802452c:	df000017 	ldw	fp,0(sp)
 8024530:	dec00204 	addi	sp,sp,8
 8024534:	f800283a 	ret

08024538 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8024538:	defffa04 	addi	sp,sp,-24
 802453c:	dfc00515 	stw	ra,20(sp)
 8024540:	df000415 	stw	fp,16(sp)
 8024544:	df000404 	addi	fp,sp,16
 8024548:	e13ffd15 	stw	r4,-12(fp)
 802454c:	e17ffe15 	stw	r5,-8(fp)
 8024550:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8024554:	e0bffd17 	ldw	r2,-12(fp)
 8024558:	10800017 	ldw	r2,0(r2)
 802455c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8024560:	e0bffc17 	ldw	r2,-16(fp)
 8024564:	10c00a04 	addi	r3,r2,40
 8024568:	e0bffd17 	ldw	r2,-12(fp)
 802456c:	10800217 	ldw	r2,8(r2)
 8024570:	100f883a 	mov	r7,r2
 8024574:	e1bfff17 	ldw	r6,-4(fp)
 8024578:	e17ffe17 	ldw	r5,-8(fp)
 802457c:	1809883a 	mov	r4,r3
 8024580:	8024b600 	call	8024b60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8024584:	e037883a 	mov	sp,fp
 8024588:	dfc00117 	ldw	ra,4(sp)
 802458c:	df000017 	ldw	fp,0(sp)
 8024590:	dec00204 	addi	sp,sp,8
 8024594:	f800283a 	ret

08024598 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8024598:	defffa04 	addi	sp,sp,-24
 802459c:	dfc00515 	stw	ra,20(sp)
 80245a0:	df000415 	stw	fp,16(sp)
 80245a4:	df000404 	addi	fp,sp,16
 80245a8:	e13ffd15 	stw	r4,-12(fp)
 80245ac:	e17ffe15 	stw	r5,-8(fp)
 80245b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80245b4:	e0bffd17 	ldw	r2,-12(fp)
 80245b8:	10800017 	ldw	r2,0(r2)
 80245bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80245c0:	e0bffc17 	ldw	r2,-16(fp)
 80245c4:	10c00a04 	addi	r3,r2,40
 80245c8:	e0bffd17 	ldw	r2,-12(fp)
 80245cc:	10800217 	ldw	r2,8(r2)
 80245d0:	100f883a 	mov	r7,r2
 80245d4:	e1bfff17 	ldw	r6,-4(fp)
 80245d8:	e17ffe17 	ldw	r5,-8(fp)
 80245dc:	1809883a 	mov	r4,r3
 80245e0:	8024d7c0 	call	8024d7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80245e4:	e037883a 	mov	sp,fp
 80245e8:	dfc00117 	ldw	ra,4(sp)
 80245ec:	df000017 	ldw	fp,0(sp)
 80245f0:	dec00204 	addi	sp,sp,8
 80245f4:	f800283a 	ret

080245f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80245f8:	defffc04 	addi	sp,sp,-16
 80245fc:	dfc00315 	stw	ra,12(sp)
 8024600:	df000215 	stw	fp,8(sp)
 8024604:	df000204 	addi	fp,sp,8
 8024608:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 802460c:	e0bfff17 	ldw	r2,-4(fp)
 8024610:	10800017 	ldw	r2,0(r2)
 8024614:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8024618:	e0bffe17 	ldw	r2,-8(fp)
 802461c:	10c00a04 	addi	r3,r2,40
 8024620:	e0bfff17 	ldw	r2,-4(fp)
 8024624:	10800217 	ldw	r2,8(r2)
 8024628:	100b883a 	mov	r5,r2
 802462c:	1809883a 	mov	r4,r3
 8024630:	8024a080 	call	8024a08 <altera_avalon_jtag_uart_close>
}
 8024634:	e037883a 	mov	sp,fp
 8024638:	dfc00117 	ldw	ra,4(sp)
 802463c:	df000017 	ldw	fp,0(sp)
 8024640:	dec00204 	addi	sp,sp,8
 8024644:	f800283a 	ret

08024648 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8024648:	defffa04 	addi	sp,sp,-24
 802464c:	dfc00515 	stw	ra,20(sp)
 8024650:	df000415 	stw	fp,16(sp)
 8024654:	df000404 	addi	fp,sp,16
 8024658:	e13ffd15 	stw	r4,-12(fp)
 802465c:	e17ffe15 	stw	r5,-8(fp)
 8024660:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8024664:	e0bffd17 	ldw	r2,-12(fp)
 8024668:	10800017 	ldw	r2,0(r2)
 802466c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8024670:	e0bffc17 	ldw	r2,-16(fp)
 8024674:	10800a04 	addi	r2,r2,40
 8024678:	e1bfff17 	ldw	r6,-4(fp)
 802467c:	e17ffe17 	ldw	r5,-8(fp)
 8024680:	1009883a 	mov	r4,r2
 8024684:	8024a700 	call	8024a70 <altera_avalon_jtag_uart_ioctl>
}
 8024688:	e037883a 	mov	sp,fp
 802468c:	dfc00117 	ldw	ra,4(sp)
 8024690:	df000017 	ldw	fp,0(sp)
 8024694:	dec00204 	addi	sp,sp,8
 8024698:	f800283a 	ret

0802469c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 802469c:	defffa04 	addi	sp,sp,-24
 80246a0:	dfc00515 	stw	ra,20(sp)
 80246a4:	df000415 	stw	fp,16(sp)
 80246a8:	df000404 	addi	fp,sp,16
 80246ac:	e13ffd15 	stw	r4,-12(fp)
 80246b0:	e17ffe15 	stw	r5,-8(fp)
 80246b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80246b8:	e0bffd17 	ldw	r2,-12(fp)
 80246bc:	00c00044 	movi	r3,1
 80246c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80246c4:	e0bffd17 	ldw	r2,-12(fp)
 80246c8:	10800017 	ldw	r2,0(r2)
 80246cc:	10800104 	addi	r2,r2,4
 80246d0:	1007883a 	mov	r3,r2
 80246d4:	e0bffd17 	ldw	r2,-12(fp)
 80246d8:	10800817 	ldw	r2,32(r2)
 80246dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80246e0:	e0bffe17 	ldw	r2,-8(fp)
 80246e4:	e0ffff17 	ldw	r3,-4(fp)
 80246e8:	d8000015 	stw	zero,0(sp)
 80246ec:	e1fffd17 	ldw	r7,-12(fp)
 80246f0:	018200b4 	movhi	r6,2050
 80246f4:	3191d704 	addi	r6,r6,18268
 80246f8:	180b883a 	mov	r5,r3
 80246fc:	1009883a 	mov	r4,r2
 8024700:	802640c0 	call	802640c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8024704:	e0bffd17 	ldw	r2,-12(fp)
 8024708:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 802470c:	e0bffd17 	ldw	r2,-12(fp)
 8024710:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8024714:	d0e6c617 	ldw	r3,-25832(gp)
 8024718:	e1fffd17 	ldw	r7,-12(fp)
 802471c:	018200b4 	movhi	r6,2050
 8024720:	31925a04 	addi	r6,r6,18792
 8024724:	180b883a 	mov	r5,r3
 8024728:	1009883a 	mov	r4,r2
 802472c:	8025f180 	call	8025f18 <alt_alarm_start>
 8024730:	1000040e 	bge	r2,zero,8024744 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8024734:	e0fffd17 	ldw	r3,-12(fp)
 8024738:	00a00034 	movhi	r2,32768
 802473c:	10bfffc4 	addi	r2,r2,-1
 8024740:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8024744:	0001883a 	nop
 8024748:	e037883a 	mov	sp,fp
 802474c:	dfc00117 	ldw	ra,4(sp)
 8024750:	df000017 	ldw	fp,0(sp)
 8024754:	dec00204 	addi	sp,sp,8
 8024758:	f800283a 	ret

0802475c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 802475c:	defff804 	addi	sp,sp,-32
 8024760:	df000715 	stw	fp,28(sp)
 8024764:	df000704 	addi	fp,sp,28
 8024768:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 802476c:	e0bfff17 	ldw	r2,-4(fp)
 8024770:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8024774:	e0bffb17 	ldw	r2,-20(fp)
 8024778:	10800017 	ldw	r2,0(r2)
 802477c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8024780:	e0bffc17 	ldw	r2,-16(fp)
 8024784:	10800104 	addi	r2,r2,4
 8024788:	10800037 	ldwio	r2,0(r2)
 802478c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8024790:	e0bffd17 	ldw	r2,-12(fp)
 8024794:	1080c00c 	andi	r2,r2,768
 8024798:	10006d26 	beq	r2,zero,8024950 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 802479c:	e0bffd17 	ldw	r2,-12(fp)
 80247a0:	1080400c 	andi	r2,r2,256
 80247a4:	10003526 	beq	r2,zero,802487c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80247a8:	00800074 	movhi	r2,1
 80247ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80247b0:	e0bffb17 	ldw	r2,-20(fp)
 80247b4:	10800a17 	ldw	r2,40(r2)
 80247b8:	10800044 	addi	r2,r2,1
 80247bc:	1081ffcc 	andi	r2,r2,2047
 80247c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80247c4:	e0bffb17 	ldw	r2,-20(fp)
 80247c8:	10c00b17 	ldw	r3,44(r2)
 80247cc:	e0bffe17 	ldw	r2,-8(fp)
 80247d0:	18801526 	beq	r3,r2,8024828 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80247d4:	e0bffc17 	ldw	r2,-16(fp)
 80247d8:	10800037 	ldwio	r2,0(r2)
 80247dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80247e0:	e0bff917 	ldw	r2,-28(fp)
 80247e4:	10a0000c 	andi	r2,r2,32768
 80247e8:	10001126 	beq	r2,zero,8024830 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80247ec:	e0bffb17 	ldw	r2,-20(fp)
 80247f0:	10800a17 	ldw	r2,40(r2)
 80247f4:	e0fff917 	ldw	r3,-28(fp)
 80247f8:	1809883a 	mov	r4,r3
 80247fc:	e0fffb17 	ldw	r3,-20(fp)
 8024800:	1885883a 	add	r2,r3,r2
 8024804:	10800e04 	addi	r2,r2,56
 8024808:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802480c:	e0bffb17 	ldw	r2,-20(fp)
 8024810:	10800a17 	ldw	r2,40(r2)
 8024814:	10800044 	addi	r2,r2,1
 8024818:	10c1ffcc 	andi	r3,r2,2047
 802481c:	e0bffb17 	ldw	r2,-20(fp)
 8024820:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8024824:	003fe206 	br	80247b0 <__alt_data_end+0xfffe53b0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8024828:	0001883a 	nop
 802482c:	00000106 	br	8024834 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8024830:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8024834:	e0bff917 	ldw	r2,-28(fp)
 8024838:	10bfffec 	andhi	r2,r2,65535
 802483c:	10000f26 	beq	r2,zero,802487c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8024840:	e0bffb17 	ldw	r2,-20(fp)
 8024844:	10c00817 	ldw	r3,32(r2)
 8024848:	00bfff84 	movi	r2,-2
 802484c:	1886703a 	and	r3,r3,r2
 8024850:	e0bffb17 	ldw	r2,-20(fp)
 8024854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8024858:	e0bffc17 	ldw	r2,-16(fp)
 802485c:	10800104 	addi	r2,r2,4
 8024860:	1007883a 	mov	r3,r2
 8024864:	e0bffb17 	ldw	r2,-20(fp)
 8024868:	10800817 	ldw	r2,32(r2)
 802486c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8024870:	e0bffc17 	ldw	r2,-16(fp)
 8024874:	10800104 	addi	r2,r2,4
 8024878:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 802487c:	e0bffd17 	ldw	r2,-12(fp)
 8024880:	1080800c 	andi	r2,r2,512
 8024884:	103fbe26 	beq	r2,zero,8024780 <__alt_data_end+0xfffe5380>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8024888:	e0bffd17 	ldw	r2,-12(fp)
 802488c:	1004d43a 	srli	r2,r2,16
 8024890:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8024894:	00001406 	br	80248e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8024898:	e0bffc17 	ldw	r2,-16(fp)
 802489c:	e0fffb17 	ldw	r3,-20(fp)
 80248a0:	18c00d17 	ldw	r3,52(r3)
 80248a4:	e13ffb17 	ldw	r4,-20(fp)
 80248a8:	20c7883a 	add	r3,r4,r3
 80248ac:	18c20e04 	addi	r3,r3,2104
 80248b0:	18c00003 	ldbu	r3,0(r3)
 80248b4:	18c03fcc 	andi	r3,r3,255
 80248b8:	18c0201c 	xori	r3,r3,128
 80248bc:	18ffe004 	addi	r3,r3,-128
 80248c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80248c4:	e0bffb17 	ldw	r2,-20(fp)
 80248c8:	10800d17 	ldw	r2,52(r2)
 80248cc:	10800044 	addi	r2,r2,1
 80248d0:	10c1ffcc 	andi	r3,r2,2047
 80248d4:	e0bffb17 	ldw	r2,-20(fp)
 80248d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80248dc:	e0bffa17 	ldw	r2,-24(fp)
 80248e0:	10bfffc4 	addi	r2,r2,-1
 80248e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80248e8:	e0bffa17 	ldw	r2,-24(fp)
 80248ec:	10000526 	beq	r2,zero,8024904 <altera_avalon_jtag_uart_irq+0x1a8>
 80248f0:	e0bffb17 	ldw	r2,-20(fp)
 80248f4:	10c00d17 	ldw	r3,52(r2)
 80248f8:	e0bffb17 	ldw	r2,-20(fp)
 80248fc:	10800c17 	ldw	r2,48(r2)
 8024900:	18bfe51e 	bne	r3,r2,8024898 <__alt_data_end+0xfffe5498>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8024904:	e0bffa17 	ldw	r2,-24(fp)
 8024908:	103f9d26 	beq	r2,zero,8024780 <__alt_data_end+0xfffe5380>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 802490c:	e0bffb17 	ldw	r2,-20(fp)
 8024910:	10c00817 	ldw	r3,32(r2)
 8024914:	00bfff44 	movi	r2,-3
 8024918:	1886703a 	and	r3,r3,r2
 802491c:	e0bffb17 	ldw	r2,-20(fp)
 8024920:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8024924:	e0bffb17 	ldw	r2,-20(fp)
 8024928:	10800017 	ldw	r2,0(r2)
 802492c:	10800104 	addi	r2,r2,4
 8024930:	1007883a 	mov	r3,r2
 8024934:	e0bffb17 	ldw	r2,-20(fp)
 8024938:	10800817 	ldw	r2,32(r2)
 802493c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8024940:	e0bffc17 	ldw	r2,-16(fp)
 8024944:	10800104 	addi	r2,r2,4
 8024948:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 802494c:	003f8c06 	br	8024780 <__alt_data_end+0xfffe5380>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8024950:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8024954:	0001883a 	nop
 8024958:	e037883a 	mov	sp,fp
 802495c:	df000017 	ldw	fp,0(sp)
 8024960:	dec00104 	addi	sp,sp,4
 8024964:	f800283a 	ret

08024968 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8024968:	defff804 	addi	sp,sp,-32
 802496c:	df000715 	stw	fp,28(sp)
 8024970:	df000704 	addi	fp,sp,28
 8024974:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8024978:	e0bffb17 	ldw	r2,-20(fp)
 802497c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8024980:	e0bff917 	ldw	r2,-28(fp)
 8024984:	10800017 	ldw	r2,0(r2)
 8024988:	10800104 	addi	r2,r2,4
 802498c:	10800037 	ldwio	r2,0(r2)
 8024990:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8024994:	e0bffa17 	ldw	r2,-24(fp)
 8024998:	1081000c 	andi	r2,r2,1024
 802499c:	10000b26 	beq	r2,zero,80249cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80249a0:	e0bff917 	ldw	r2,-28(fp)
 80249a4:	10800017 	ldw	r2,0(r2)
 80249a8:	10800104 	addi	r2,r2,4
 80249ac:	1007883a 	mov	r3,r2
 80249b0:	e0bff917 	ldw	r2,-28(fp)
 80249b4:	10800817 	ldw	r2,32(r2)
 80249b8:	10810014 	ori	r2,r2,1024
 80249bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80249c0:	e0bff917 	ldw	r2,-28(fp)
 80249c4:	10000915 	stw	zero,36(r2)
 80249c8:	00000a06 	br	80249f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80249cc:	e0bff917 	ldw	r2,-28(fp)
 80249d0:	10c00917 	ldw	r3,36(r2)
 80249d4:	00a00034 	movhi	r2,32768
 80249d8:	10bfff04 	addi	r2,r2,-4
 80249dc:	10c00536 	bltu	r2,r3,80249f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80249e0:	e0bff917 	ldw	r2,-28(fp)
 80249e4:	10800917 	ldw	r2,36(r2)
 80249e8:	10c00044 	addi	r3,r2,1
 80249ec:	e0bff917 	ldw	r2,-28(fp)
 80249f0:	10c00915 	stw	r3,36(r2)
 80249f4:	d0a6c617 	ldw	r2,-25832(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80249f8:	e037883a 	mov	sp,fp
 80249fc:	df000017 	ldw	fp,0(sp)
 8024a00:	dec00104 	addi	sp,sp,4
 8024a04:	f800283a 	ret

08024a08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8024a08:	defffd04 	addi	sp,sp,-12
 8024a0c:	df000215 	stw	fp,8(sp)
 8024a10:	df000204 	addi	fp,sp,8
 8024a14:	e13ffe15 	stw	r4,-8(fp)
 8024a18:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8024a1c:	00000506 	br	8024a34 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8024a20:	e0bfff17 	ldw	r2,-4(fp)
 8024a24:	1090000c 	andi	r2,r2,16384
 8024a28:	10000226 	beq	r2,zero,8024a34 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8024a2c:	00bffd44 	movi	r2,-11
 8024a30:	00000b06 	br	8024a60 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8024a34:	e0bffe17 	ldw	r2,-8(fp)
 8024a38:	10c00d17 	ldw	r3,52(r2)
 8024a3c:	e0bffe17 	ldw	r2,-8(fp)
 8024a40:	10800c17 	ldw	r2,48(r2)
 8024a44:	18800526 	beq	r3,r2,8024a5c <altera_avalon_jtag_uart_close+0x54>
 8024a48:	e0bffe17 	ldw	r2,-8(fp)
 8024a4c:	10c00917 	ldw	r3,36(r2)
 8024a50:	e0bffe17 	ldw	r2,-8(fp)
 8024a54:	10800117 	ldw	r2,4(r2)
 8024a58:	18bff136 	bltu	r3,r2,8024a20 <__alt_data_end+0xfffe5620>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8024a5c:	0005883a 	mov	r2,zero
}
 8024a60:	e037883a 	mov	sp,fp
 8024a64:	df000017 	ldw	fp,0(sp)
 8024a68:	dec00104 	addi	sp,sp,4
 8024a6c:	f800283a 	ret

08024a70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8024a70:	defffa04 	addi	sp,sp,-24
 8024a74:	df000515 	stw	fp,20(sp)
 8024a78:	df000504 	addi	fp,sp,20
 8024a7c:	e13ffd15 	stw	r4,-12(fp)
 8024a80:	e17ffe15 	stw	r5,-8(fp)
 8024a84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8024a88:	00bff9c4 	movi	r2,-25
 8024a8c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8024a90:	e0bffe17 	ldw	r2,-8(fp)
 8024a94:	10da8060 	cmpeqi	r3,r2,27137
 8024a98:	1800031e 	bne	r3,zero,8024aa8 <altera_avalon_jtag_uart_ioctl+0x38>
 8024a9c:	109a80a0 	cmpeqi	r2,r2,27138
 8024aa0:	1000181e 	bne	r2,zero,8024b04 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8024aa4:	00002906 	br	8024b4c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8024aa8:	e0bffd17 	ldw	r2,-12(fp)
 8024aac:	10c00117 	ldw	r3,4(r2)
 8024ab0:	00a00034 	movhi	r2,32768
 8024ab4:	10bfffc4 	addi	r2,r2,-1
 8024ab8:	18802126 	beq	r3,r2,8024b40 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8024abc:	e0bfff17 	ldw	r2,-4(fp)
 8024ac0:	10800017 	ldw	r2,0(r2)
 8024ac4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8024ac8:	e0bffc17 	ldw	r2,-16(fp)
 8024acc:	10800090 	cmplti	r2,r2,2
 8024ad0:	1000061e 	bne	r2,zero,8024aec <altera_avalon_jtag_uart_ioctl+0x7c>
 8024ad4:	e0fffc17 	ldw	r3,-16(fp)
 8024ad8:	00a00034 	movhi	r2,32768
 8024adc:	10bfffc4 	addi	r2,r2,-1
 8024ae0:	18800226 	beq	r3,r2,8024aec <altera_avalon_jtag_uart_ioctl+0x7c>
 8024ae4:	e0bffc17 	ldw	r2,-16(fp)
 8024ae8:	00000206 	br	8024af4 <altera_avalon_jtag_uart_ioctl+0x84>
 8024aec:	00a00034 	movhi	r2,32768
 8024af0:	10bfff84 	addi	r2,r2,-2
 8024af4:	e0fffd17 	ldw	r3,-12(fp)
 8024af8:	18800115 	stw	r2,4(r3)
      rc = 0;
 8024afc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8024b00:	00000f06 	br	8024b40 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8024b04:	e0bffd17 	ldw	r2,-12(fp)
 8024b08:	10c00117 	ldw	r3,4(r2)
 8024b0c:	00a00034 	movhi	r2,32768
 8024b10:	10bfffc4 	addi	r2,r2,-1
 8024b14:	18800c26 	beq	r3,r2,8024b48 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8024b18:	e0bffd17 	ldw	r2,-12(fp)
 8024b1c:	10c00917 	ldw	r3,36(r2)
 8024b20:	e0bffd17 	ldw	r2,-12(fp)
 8024b24:	10800117 	ldw	r2,4(r2)
 8024b28:	1885803a 	cmpltu	r2,r3,r2
 8024b2c:	10c03fcc 	andi	r3,r2,255
 8024b30:	e0bfff17 	ldw	r2,-4(fp)
 8024b34:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8024b38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8024b3c:	00000206 	br	8024b48 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8024b40:	0001883a 	nop
 8024b44:	00000106 	br	8024b4c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8024b48:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8024b4c:	e0bffb17 	ldw	r2,-20(fp)
}
 8024b50:	e037883a 	mov	sp,fp
 8024b54:	df000017 	ldw	fp,0(sp)
 8024b58:	dec00104 	addi	sp,sp,4
 8024b5c:	f800283a 	ret

08024b60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8024b60:	defff304 	addi	sp,sp,-52
 8024b64:	dfc00c15 	stw	ra,48(sp)
 8024b68:	df000b15 	stw	fp,44(sp)
 8024b6c:	df000b04 	addi	fp,sp,44
 8024b70:	e13ffc15 	stw	r4,-16(fp)
 8024b74:	e17ffd15 	stw	r5,-12(fp)
 8024b78:	e1bffe15 	stw	r6,-8(fp)
 8024b7c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8024b80:	e0bffd17 	ldw	r2,-12(fp)
 8024b84:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8024b88:	00004706 	br	8024ca8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8024b8c:	e0bffc17 	ldw	r2,-16(fp)
 8024b90:	10800a17 	ldw	r2,40(r2)
 8024b94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8024b98:	e0bffc17 	ldw	r2,-16(fp)
 8024b9c:	10800b17 	ldw	r2,44(r2)
 8024ba0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8024ba4:	e0fff717 	ldw	r3,-36(fp)
 8024ba8:	e0bff817 	ldw	r2,-32(fp)
 8024bac:	18800536 	bltu	r3,r2,8024bc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8024bb0:	e0fff717 	ldw	r3,-36(fp)
 8024bb4:	e0bff817 	ldw	r2,-32(fp)
 8024bb8:	1885c83a 	sub	r2,r3,r2
 8024bbc:	e0bff615 	stw	r2,-40(fp)
 8024bc0:	00000406 	br	8024bd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8024bc4:	00c20004 	movi	r3,2048
 8024bc8:	e0bff817 	ldw	r2,-32(fp)
 8024bcc:	1885c83a 	sub	r2,r3,r2
 8024bd0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8024bd4:	e0bff617 	ldw	r2,-40(fp)
 8024bd8:	10001e26 	beq	r2,zero,8024c54 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8024bdc:	e0fffe17 	ldw	r3,-8(fp)
 8024be0:	e0bff617 	ldw	r2,-40(fp)
 8024be4:	1880022e 	bgeu	r3,r2,8024bf0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8024be8:	e0bffe17 	ldw	r2,-8(fp)
 8024bec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8024bf0:	e0bffc17 	ldw	r2,-16(fp)
 8024bf4:	10c00e04 	addi	r3,r2,56
 8024bf8:	e0bff817 	ldw	r2,-32(fp)
 8024bfc:	1885883a 	add	r2,r3,r2
 8024c00:	e1bff617 	ldw	r6,-40(fp)
 8024c04:	100b883a 	mov	r5,r2
 8024c08:	e13ff517 	ldw	r4,-44(fp)
 8024c0c:	8021f580 	call	8021f58 <memcpy>
      ptr   += n;
 8024c10:	e0fff517 	ldw	r3,-44(fp)
 8024c14:	e0bff617 	ldw	r2,-40(fp)
 8024c18:	1885883a 	add	r2,r3,r2
 8024c1c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8024c20:	e0fffe17 	ldw	r3,-8(fp)
 8024c24:	e0bff617 	ldw	r2,-40(fp)
 8024c28:	1885c83a 	sub	r2,r3,r2
 8024c2c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8024c30:	e0fff817 	ldw	r3,-32(fp)
 8024c34:	e0bff617 	ldw	r2,-40(fp)
 8024c38:	1885883a 	add	r2,r3,r2
 8024c3c:	10c1ffcc 	andi	r3,r2,2047
 8024c40:	e0bffc17 	ldw	r2,-16(fp)
 8024c44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8024c48:	e0bffe17 	ldw	r2,-8(fp)
 8024c4c:	00bfcf16 	blt	zero,r2,8024b8c <__alt_data_end+0xfffe578c>
 8024c50:	00000106 	br	8024c58 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8024c54:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8024c58:	e0fff517 	ldw	r3,-44(fp)
 8024c5c:	e0bffd17 	ldw	r2,-12(fp)
 8024c60:	1880141e 	bne	r3,r2,8024cb4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8024c64:	e0bfff17 	ldw	r2,-4(fp)
 8024c68:	1090000c 	andi	r2,r2,16384
 8024c6c:	1000131e 	bne	r2,zero,8024cbc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8024c70:	0001883a 	nop
 8024c74:	e0bffc17 	ldw	r2,-16(fp)
 8024c78:	10c00a17 	ldw	r3,40(r2)
 8024c7c:	e0bff717 	ldw	r2,-36(fp)
 8024c80:	1880051e 	bne	r3,r2,8024c98 <altera_avalon_jtag_uart_read+0x138>
 8024c84:	e0bffc17 	ldw	r2,-16(fp)
 8024c88:	10c00917 	ldw	r3,36(r2)
 8024c8c:	e0bffc17 	ldw	r2,-16(fp)
 8024c90:	10800117 	ldw	r2,4(r2)
 8024c94:	18bff736 	bltu	r3,r2,8024c74 <__alt_data_end+0xfffe5874>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8024c98:	e0bffc17 	ldw	r2,-16(fp)
 8024c9c:	10c00a17 	ldw	r3,40(r2)
 8024ca0:	e0bff717 	ldw	r2,-36(fp)
 8024ca4:	18800726 	beq	r3,r2,8024cc4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8024ca8:	e0bffe17 	ldw	r2,-8(fp)
 8024cac:	00bfb716 	blt	zero,r2,8024b8c <__alt_data_end+0xfffe578c>
 8024cb0:	00000506 	br	8024cc8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8024cb4:	0001883a 	nop
 8024cb8:	00000306 	br	8024cc8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8024cbc:	0001883a 	nop
 8024cc0:	00000106 	br	8024cc8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8024cc4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8024cc8:	e0fff517 	ldw	r3,-44(fp)
 8024ccc:	e0bffd17 	ldw	r2,-12(fp)
 8024cd0:	18801826 	beq	r3,r2,8024d34 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8024cd4:	0005303a 	rdctl	r2,status
 8024cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8024cdc:	e0fffb17 	ldw	r3,-20(fp)
 8024ce0:	00bfff84 	movi	r2,-2
 8024ce4:	1884703a 	and	r2,r3,r2
 8024ce8:	1001703a 	wrctl	status,r2
  
  return context;
 8024cec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8024cf0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8024cf4:	e0bffc17 	ldw	r2,-16(fp)
 8024cf8:	10800817 	ldw	r2,32(r2)
 8024cfc:	10c00054 	ori	r3,r2,1
 8024d00:	e0bffc17 	ldw	r2,-16(fp)
 8024d04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8024d08:	e0bffc17 	ldw	r2,-16(fp)
 8024d0c:	10800017 	ldw	r2,0(r2)
 8024d10:	10800104 	addi	r2,r2,4
 8024d14:	1007883a 	mov	r3,r2
 8024d18:	e0bffc17 	ldw	r2,-16(fp)
 8024d1c:	10800817 	ldw	r2,32(r2)
 8024d20:	18800035 	stwio	r2,0(r3)
 8024d24:	e0bffa17 	ldw	r2,-24(fp)
 8024d28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024d2c:	e0bff917 	ldw	r2,-28(fp)
 8024d30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8024d34:	e0fff517 	ldw	r3,-44(fp)
 8024d38:	e0bffd17 	ldw	r2,-12(fp)
 8024d3c:	18800426 	beq	r3,r2,8024d50 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8024d40:	e0fff517 	ldw	r3,-44(fp)
 8024d44:	e0bffd17 	ldw	r2,-12(fp)
 8024d48:	1885c83a 	sub	r2,r3,r2
 8024d4c:	00000606 	br	8024d68 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8024d50:	e0bfff17 	ldw	r2,-4(fp)
 8024d54:	1090000c 	andi	r2,r2,16384
 8024d58:	10000226 	beq	r2,zero,8024d64 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8024d5c:	00bffd44 	movi	r2,-11
 8024d60:	00000106 	br	8024d68 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8024d64:	00bffec4 	movi	r2,-5
}
 8024d68:	e037883a 	mov	sp,fp
 8024d6c:	dfc00117 	ldw	ra,4(sp)
 8024d70:	df000017 	ldw	fp,0(sp)
 8024d74:	dec00204 	addi	sp,sp,8
 8024d78:	f800283a 	ret

08024d7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8024d7c:	defff304 	addi	sp,sp,-52
 8024d80:	dfc00c15 	stw	ra,48(sp)
 8024d84:	df000b15 	stw	fp,44(sp)
 8024d88:	df000b04 	addi	fp,sp,44
 8024d8c:	e13ffc15 	stw	r4,-16(fp)
 8024d90:	e17ffd15 	stw	r5,-12(fp)
 8024d94:	e1bffe15 	stw	r6,-8(fp)
 8024d98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8024d9c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8024da0:	e0bffd17 	ldw	r2,-12(fp)
 8024da4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8024da8:	00003706 	br	8024e88 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8024dac:	e0bffc17 	ldw	r2,-16(fp)
 8024db0:	10800c17 	ldw	r2,48(r2)
 8024db4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8024db8:	e0bffc17 	ldw	r2,-16(fp)
 8024dbc:	10800d17 	ldw	r2,52(r2)
 8024dc0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8024dc4:	e0fff917 	ldw	r3,-28(fp)
 8024dc8:	e0bff517 	ldw	r2,-44(fp)
 8024dcc:	1880062e 	bgeu	r3,r2,8024de8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8024dd0:	e0fff517 	ldw	r3,-44(fp)
 8024dd4:	e0bff917 	ldw	r2,-28(fp)
 8024dd8:	1885c83a 	sub	r2,r3,r2
 8024ddc:	10bfffc4 	addi	r2,r2,-1
 8024de0:	e0bff615 	stw	r2,-40(fp)
 8024de4:	00000b06 	br	8024e14 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8024de8:	e0bff517 	ldw	r2,-44(fp)
 8024dec:	10000526 	beq	r2,zero,8024e04 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8024df0:	00c20004 	movi	r3,2048
 8024df4:	e0bff917 	ldw	r2,-28(fp)
 8024df8:	1885c83a 	sub	r2,r3,r2
 8024dfc:	e0bff615 	stw	r2,-40(fp)
 8024e00:	00000406 	br	8024e14 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8024e04:	00c1ffc4 	movi	r3,2047
 8024e08:	e0bff917 	ldw	r2,-28(fp)
 8024e0c:	1885c83a 	sub	r2,r3,r2
 8024e10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8024e14:	e0bff617 	ldw	r2,-40(fp)
 8024e18:	10001e26 	beq	r2,zero,8024e94 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8024e1c:	e0fffe17 	ldw	r3,-8(fp)
 8024e20:	e0bff617 	ldw	r2,-40(fp)
 8024e24:	1880022e 	bgeu	r3,r2,8024e30 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8024e28:	e0bffe17 	ldw	r2,-8(fp)
 8024e2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8024e30:	e0bffc17 	ldw	r2,-16(fp)
 8024e34:	10c20e04 	addi	r3,r2,2104
 8024e38:	e0bff917 	ldw	r2,-28(fp)
 8024e3c:	1885883a 	add	r2,r3,r2
 8024e40:	e1bff617 	ldw	r6,-40(fp)
 8024e44:	e17ffd17 	ldw	r5,-12(fp)
 8024e48:	1009883a 	mov	r4,r2
 8024e4c:	8021f580 	call	8021f58 <memcpy>
      ptr   += n;
 8024e50:	e0fffd17 	ldw	r3,-12(fp)
 8024e54:	e0bff617 	ldw	r2,-40(fp)
 8024e58:	1885883a 	add	r2,r3,r2
 8024e5c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8024e60:	e0fffe17 	ldw	r3,-8(fp)
 8024e64:	e0bff617 	ldw	r2,-40(fp)
 8024e68:	1885c83a 	sub	r2,r3,r2
 8024e6c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8024e70:	e0fff917 	ldw	r3,-28(fp)
 8024e74:	e0bff617 	ldw	r2,-40(fp)
 8024e78:	1885883a 	add	r2,r3,r2
 8024e7c:	10c1ffcc 	andi	r3,r2,2047
 8024e80:	e0bffc17 	ldw	r2,-16(fp)
 8024e84:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8024e88:	e0bffe17 	ldw	r2,-8(fp)
 8024e8c:	00bfc716 	blt	zero,r2,8024dac <__alt_data_end+0xfffe59ac>
 8024e90:	00000106 	br	8024e98 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8024e94:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8024e98:	0005303a 	rdctl	r2,status
 8024e9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8024ea0:	e0fffb17 	ldw	r3,-20(fp)
 8024ea4:	00bfff84 	movi	r2,-2
 8024ea8:	1884703a 	and	r2,r3,r2
 8024eac:	1001703a 	wrctl	status,r2
  
  return context;
 8024eb0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8024eb4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8024eb8:	e0bffc17 	ldw	r2,-16(fp)
 8024ebc:	10800817 	ldw	r2,32(r2)
 8024ec0:	10c00094 	ori	r3,r2,2
 8024ec4:	e0bffc17 	ldw	r2,-16(fp)
 8024ec8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8024ecc:	e0bffc17 	ldw	r2,-16(fp)
 8024ed0:	10800017 	ldw	r2,0(r2)
 8024ed4:	10800104 	addi	r2,r2,4
 8024ed8:	1007883a 	mov	r3,r2
 8024edc:	e0bffc17 	ldw	r2,-16(fp)
 8024ee0:	10800817 	ldw	r2,32(r2)
 8024ee4:	18800035 	stwio	r2,0(r3)
 8024ee8:	e0bffa17 	ldw	r2,-24(fp)
 8024eec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024ef0:	e0bff817 	ldw	r2,-32(fp)
 8024ef4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8024ef8:	e0bffe17 	ldw	r2,-8(fp)
 8024efc:	0080100e 	bge	zero,r2,8024f40 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8024f00:	e0bfff17 	ldw	r2,-4(fp)
 8024f04:	1090000c 	andi	r2,r2,16384
 8024f08:	1000101e 	bne	r2,zero,8024f4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8024f0c:	0001883a 	nop
 8024f10:	e0bffc17 	ldw	r2,-16(fp)
 8024f14:	10c00d17 	ldw	r3,52(r2)
 8024f18:	e0bff517 	ldw	r2,-44(fp)
 8024f1c:	1880051e 	bne	r3,r2,8024f34 <altera_avalon_jtag_uart_write+0x1b8>
 8024f20:	e0bffc17 	ldw	r2,-16(fp)
 8024f24:	10c00917 	ldw	r3,36(r2)
 8024f28:	e0bffc17 	ldw	r2,-16(fp)
 8024f2c:	10800117 	ldw	r2,4(r2)
 8024f30:	18bff736 	bltu	r3,r2,8024f10 <__alt_data_end+0xfffe5b10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8024f34:	e0bffc17 	ldw	r2,-16(fp)
 8024f38:	10800917 	ldw	r2,36(r2)
 8024f3c:	1000051e 	bne	r2,zero,8024f54 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8024f40:	e0bffe17 	ldw	r2,-8(fp)
 8024f44:	00bfd016 	blt	zero,r2,8024e88 <__alt_data_end+0xfffe5a88>
 8024f48:	00000306 	br	8024f58 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8024f4c:	0001883a 	nop
 8024f50:	00000106 	br	8024f58 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8024f54:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8024f58:	e0fffd17 	ldw	r3,-12(fp)
 8024f5c:	e0bff717 	ldw	r2,-36(fp)
 8024f60:	18800426 	beq	r3,r2,8024f74 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8024f64:	e0fffd17 	ldw	r3,-12(fp)
 8024f68:	e0bff717 	ldw	r2,-36(fp)
 8024f6c:	1885c83a 	sub	r2,r3,r2
 8024f70:	00000606 	br	8024f8c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8024f74:	e0bfff17 	ldw	r2,-4(fp)
 8024f78:	1090000c 	andi	r2,r2,16384
 8024f7c:	10000226 	beq	r2,zero,8024f88 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8024f80:	00bffd44 	movi	r2,-11
 8024f84:	00000106 	br	8024f8c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8024f88:	00bffec4 	movi	r2,-5
}
 8024f8c:	e037883a 	mov	sp,fp
 8024f90:	dfc00117 	ldw	ra,4(sp)
 8024f94:	df000017 	ldw	fp,0(sp)
 8024f98:	dec00204 	addi	sp,sp,8
 8024f9c:	f800283a 	ret

08024fa0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8024fa0:	defffc04 	addi	sp,sp,-16
 8024fa4:	dfc00315 	stw	ra,12(sp)
 8024fa8:	df000215 	stw	fp,8(sp)
 8024fac:	df000204 	addi	fp,sp,8
 8024fb0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8024fb4:	d1600604 	addi	r5,gp,-32744
 8024fb8:	e13fff17 	ldw	r4,-4(fp)
 8024fbc:	802635c0 	call	802635c <alt_find_dev>
 8024fc0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8024fc4:	e0bffe17 	ldw	r2,-8(fp)
}
 8024fc8:	e037883a 	mov	sp,fp
 8024fcc:	dfc00117 	ldw	ra,4(sp)
 8024fd0:	df000017 	ldw	fp,0(sp)
 8024fd4:	dec00204 	addi	sp,sp,8
 8024fd8:	f800283a 	ret

08024fdc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8024fdc:	defff904 	addi	sp,sp,-28
 8024fe0:	dfc00615 	stw	ra,24(sp)
 8024fe4:	df000515 	stw	fp,20(sp)
 8024fe8:	df000504 	addi	fp,sp,20
 8024fec:	e13ffc15 	stw	r4,-16(fp)
 8024ff0:	e17ffd15 	stw	r5,-12(fp)
 8024ff4:	e1bffe15 	stw	r6,-8(fp)
 8024ff8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8024ffc:	e0bffc17 	ldw	r2,-16(fp)
 8025000:	10800f17 	ldw	r2,60(r2)
 8025004:	e0fffe17 	ldw	r3,-8(fp)
 8025008:	1880042e 	bgeu	r3,r2,802501c <alt_up_pixel_buffer_dma_draw+0x40>
 802500c:	e0bffc17 	ldw	r2,-16(fp)
 8025010:	10801017 	ldw	r2,64(r2)
 8025014:	e0ffff17 	ldw	r3,-4(fp)
 8025018:	18800236 	bltu	r3,r2,8025024 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 802501c:	00bfffc4 	movi	r2,-1
 8025020:	00005306 	br	8025170 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 8025024:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8025028:	e0bffc17 	ldw	r2,-16(fp)
 802502c:	10800d17 	ldw	r2,52(r2)
 8025030:	1000151e 	bne	r2,zero,8025088 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8025034:	e0bffc17 	ldw	r2,-16(fp)
 8025038:	10c01217 	ldw	r3,72(r2)
 802503c:	e0bffe17 	ldw	r2,-8(fp)
 8025040:	1886703a 	and	r3,r3,r2
 8025044:	e0bffc17 	ldw	r2,-16(fp)
 8025048:	10801117 	ldw	r2,68(r2)
 802504c:	1884983a 	sll	r2,r3,r2
 8025050:	e0fffb17 	ldw	r3,-20(fp)
 8025054:	1885883a 	add	r2,r3,r2
 8025058:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 802505c:	e0bffc17 	ldw	r2,-16(fp)
 8025060:	10c01417 	ldw	r3,80(r2)
 8025064:	e0bfff17 	ldw	r2,-4(fp)
 8025068:	1886703a 	and	r3,r3,r2
 802506c:	e0bffc17 	ldw	r2,-16(fp)
 8025070:	10801317 	ldw	r2,76(r2)
 8025074:	1884983a 	sll	r2,r3,r2
 8025078:	e0fffb17 	ldw	r3,-20(fp)
 802507c:	1885883a 	add	r2,r3,r2
 8025080:	e0bffb15 	stw	r2,-20(fp)
 8025084:	00001a06 	br	80250f0 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8025088:	e0bffc17 	ldw	r2,-16(fp)
 802508c:	10c01217 	ldw	r3,72(r2)
 8025090:	e0bffe17 	ldw	r2,-8(fp)
 8025094:	1886703a 	and	r3,r3,r2
 8025098:	e0bffc17 	ldw	r2,-16(fp)
 802509c:	10801117 	ldw	r2,68(r2)
 80250a0:	1884983a 	sll	r2,r3,r2
 80250a4:	e0fffb17 	ldw	r3,-20(fp)
 80250a8:	1885883a 	add	r2,r3,r2
 80250ac:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 80250b0:	e0bffc17 	ldw	r2,-16(fp)
 80250b4:	10c01417 	ldw	r3,80(r2)
 80250b8:	e0bfff17 	ldw	r2,-4(fp)
 80250bc:	1886703a 	and	r3,r3,r2
 80250c0:	e0bffc17 	ldw	r2,-16(fp)
 80250c4:	10800f17 	ldw	r2,60(r2)
 80250c8:	100b883a 	mov	r5,r2
 80250cc:	1809883a 	mov	r4,r3
 80250d0:	8020ad40 	call	8020ad4 <__mulsi3>
 80250d4:	1007883a 	mov	r3,r2
 80250d8:	e0bffc17 	ldw	r2,-16(fp)
 80250dc:	10801117 	ldw	r2,68(r2)
 80250e0:	1884983a 	sll	r2,r3,r2
 80250e4:	e0fffb17 	ldw	r3,-20(fp)
 80250e8:	1885883a 	add	r2,r3,r2
 80250ec:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80250f0:	e0bffc17 	ldw	r2,-16(fp)
 80250f4:	10800e17 	ldw	r2,56(r2)
 80250f8:	10800058 	cmpnei	r2,r2,1
 80250fc:	1000081e 	bne	r2,zero,8025120 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8025100:	e0bffc17 	ldw	r2,-16(fp)
 8025104:	10c00c17 	ldw	r3,48(r2)
 8025108:	e0bffb17 	ldw	r2,-20(fp)
 802510c:	1885883a 	add	r2,r3,r2
 8025110:	1007883a 	mov	r3,r2
 8025114:	e0bffd17 	ldw	r2,-12(fp)
 8025118:	18800025 	stbio	r2,0(r3)
 802511c:	00001306 	br	802516c <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8025120:	e0bffc17 	ldw	r2,-16(fp)
 8025124:	10800e17 	ldw	r2,56(r2)
 8025128:	10800098 	cmpnei	r2,r2,2
 802512c:	1000081e 	bne	r2,zero,8025150 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8025130:	e0bffc17 	ldw	r2,-16(fp)
 8025134:	10c00c17 	ldw	r3,48(r2)
 8025138:	e0bffb17 	ldw	r2,-20(fp)
 802513c:	1885883a 	add	r2,r3,r2
 8025140:	1007883a 	mov	r3,r2
 8025144:	e0bffd17 	ldw	r2,-12(fp)
 8025148:	1880002d 	sthio	r2,0(r3)
 802514c:	00000706 	br	802516c <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8025150:	e0bffc17 	ldw	r2,-16(fp)
 8025154:	10c00c17 	ldw	r3,48(r2)
 8025158:	e0bffb17 	ldw	r2,-20(fp)
 802515c:	1885883a 	add	r2,r3,r2
 8025160:	1007883a 	mov	r3,r2
 8025164:	e0bffd17 	ldw	r2,-12(fp)
 8025168:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 802516c:	0005883a 	mov	r2,zero
}
 8025170:	e037883a 	mov	sp,fp
 8025174:	dfc00117 	ldw	ra,4(sp)
 8025178:	df000017 	ldw	fp,0(sp)
 802517c:	dec00204 	addi	sp,sp,8
 8025180:	f800283a 	ret

08025184 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8025184:	defffd04 	addi	sp,sp,-12
 8025188:	df000215 	stw	fp,8(sp)
 802518c:	df000204 	addi	fp,sp,8
 8025190:	e13ffe15 	stw	r4,-8(fp)
 8025194:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8025198:	e0bffe17 	ldw	r2,-8(fp)
 802519c:	10800a17 	ldw	r2,40(r2)
 80251a0:	10800104 	addi	r2,r2,4
 80251a4:	1007883a 	mov	r3,r2
 80251a8:	e0bfff17 	ldw	r2,-4(fp)
 80251ac:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 80251b0:	e0bffe17 	ldw	r2,-8(fp)
 80251b4:	10800a17 	ldw	r2,40(r2)
 80251b8:	10800104 	addi	r2,r2,4
 80251bc:	10800037 	ldwio	r2,0(r2)
 80251c0:	1007883a 	mov	r3,r2
 80251c4:	e0bffe17 	ldw	r2,-8(fp)
 80251c8:	10c00c15 	stw	r3,48(r2)
	return 0;
 80251cc:	0005883a 	mov	r2,zero
}
 80251d0:	e037883a 	mov	sp,fp
 80251d4:	df000017 	ldw	fp,0(sp)
 80251d8:	dec00104 	addi	sp,sp,4
 80251dc:	f800283a 	ret

080251e0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 80251e0:	defffd04 	addi	sp,sp,-12
 80251e4:	df000215 	stw	fp,8(sp)
 80251e8:	dc000115 	stw	r16,4(sp)
 80251ec:	df000204 	addi	fp,sp,8
 80251f0:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 80251f4:	e0bffe17 	ldw	r2,-8(fp)
 80251f8:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 80251fc:	e0bffe17 	ldw	r2,-8(fp)
 8025200:	10800a17 	ldw	r2,40(r2)
 8025204:	1007883a 	mov	r3,r2
 8025208:	00800044 	movi	r2,1
 802520c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8025210:	e0bffe17 	ldw	r2,-8(fp)
 8025214:	10c00b17 	ldw	r3,44(r2)
 8025218:	e0bffe17 	ldw	r2,-8(fp)
 802521c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8025220:	e0bffe17 	ldw	r2,-8(fp)
 8025224:	14000b15 	stw	r16,44(r2)
	return 0;
 8025228:	0005883a 	mov	r2,zero
}
 802522c:	e6ffff04 	addi	sp,fp,-4
 8025230:	df000117 	ldw	fp,4(sp)
 8025234:	dc000017 	ldw	r16,0(sp)
 8025238:	dec00204 	addi	sp,sp,8
 802523c:	f800283a 	ret

08025240 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8025240:	defffe04 	addi	sp,sp,-8
 8025244:	df000115 	stw	fp,4(sp)
 8025248:	df000104 	addi	fp,sp,4
 802524c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8025250:	e0bfff17 	ldw	r2,-4(fp)
 8025254:	10800a17 	ldw	r2,40(r2)
 8025258:	10800304 	addi	r2,r2,12
 802525c:	10800037 	ldwio	r2,0(r2)
 8025260:	1080004c 	andi	r2,r2,1
}
 8025264:	e037883a 	mov	sp,fp
 8025268:	df000017 	ldw	fp,0(sp)
 802526c:	dec00104 	addi	sp,sp,4
 8025270:	f800283a 	ret

08025274 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8025274:	defff604 	addi	sp,sp,-40
 8025278:	dfc00915 	stw	ra,36(sp)
 802527c:	df000815 	stw	fp,32(sp)
 8025280:	dd400715 	stw	r21,28(sp)
 8025284:	dd000615 	stw	r20,24(sp)
 8025288:	dcc00515 	stw	r19,20(sp)
 802528c:	dc800415 	stw	r18,16(sp)
 8025290:	dc400315 	stw	r17,12(sp)
 8025294:	dc000215 	stw	r16,8(sp)
 8025298:	df000804 	addi	fp,sp,32
 802529c:	e13ff815 	stw	r4,-32(fp)
 80252a0:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 80252a4:	e0bff917 	ldw	r2,-28(fp)
 80252a8:	10800058 	cmpnei	r2,r2,1
 80252ac:	1000031e 	bne	r2,zero,80252bc <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 80252b0:	e0bff817 	ldw	r2,-32(fp)
 80252b4:	14400c17 	ldw	r17,48(r2)
 80252b8:	00000206 	br	80252c4 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 80252bc:	e0bff817 	ldw	r2,-32(fp)
 80252c0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 80252c4:	e0bff817 	ldw	r2,-32(fp)
 80252c8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80252cc:	e0bff817 	ldw	r2,-32(fp)
 80252d0:	10800e17 	ldw	r2,56(r2)
 80252d4:	10800098 	cmpnei	r2,r2,2
 80252d8:	1000031e 	bne	r2,zero,80252e8 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 80252dc:	8405883a 	add	r2,r16,r16
 80252e0:	1021883a 	mov	r16,r2
 80252e4:	00000306 	br	80252f4 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 80252e8:	8405883a 	add	r2,r16,r16
 80252ec:	1085883a 	add	r2,r2,r2
 80252f0:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 80252f4:	e0bff817 	ldw	r2,-32(fp)
 80252f8:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80252fc:	e0bff817 	ldw	r2,-32(fp)
 8025300:	10800d17 	ldw	r2,52(r2)
 8025304:	1000111e 	bne	r2,zero,802534c <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8025308:	e0bff817 	ldw	r2,-32(fp)
 802530c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 8025310:	0029883a 	mov	r20,zero
 8025314:	00000b06 	br	8025344 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8025318:	0025883a 	mov	r18,zero
 802531c:	00000406 	br	8025330 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 8025320:	9445883a 	add	r2,r18,r17
 8025324:	0007883a 	mov	r3,zero
 8025328:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 802532c:	94800104 	addi	r18,r18,4
 8025330:	943ffb36 	bltu	r18,r16,8025320 <__alt_data_end+0xfffe5f20>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8025334:	00800044 	movi	r2,1
 8025338:	1544983a 	sll	r2,r2,r21
 802533c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8025340:	a5000044 	addi	r20,r20,1
 8025344:	a4fff436 	bltu	r20,r19,8025318 <__alt_data_end+0xfffe5f18>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8025348:	00000d06 	br	8025380 <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 802534c:	800b883a 	mov	r5,r16
 8025350:	9809883a 	mov	r4,r19
 8025354:	8020ad40 	call	8020ad4 <__mulsi3>
 8025358:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 802535c:	0021883a 	mov	r16,zero
 8025360:	00000506 	br	8025378 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 8025364:	8005883a 	mov	r2,r16
 8025368:	1445883a 	add	r2,r2,r17
 802536c:	0007883a 	mov	r3,zero
 8025370:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8025374:	84000104 	addi	r16,r16,4
 8025378:	8005883a 	mov	r2,r16
 802537c:	14fff936 	bltu	r2,r19,8025364 <__alt_data_end+0xfffe5f64>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8025380:	0001883a 	nop
 8025384:	e6fffa04 	addi	sp,fp,-24
 8025388:	dfc00717 	ldw	ra,28(sp)
 802538c:	df000617 	ldw	fp,24(sp)
 8025390:	dd400517 	ldw	r21,20(sp)
 8025394:	dd000417 	ldw	r20,16(sp)
 8025398:	dcc00317 	ldw	r19,12(sp)
 802539c:	dc800217 	ldw	r18,8(sp)
 80253a0:	dc400117 	ldw	r17,4(sp)
 80253a4:	dc000017 	ldw	r16,0(sp)
 80253a8:	dec00804 	addi	sp,sp,32
 80253ac:	f800283a 	ret

080253b0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 80253b0:	defff204 	addi	sp,sp,-56
 80253b4:	dfc00d15 	stw	ra,52(sp)
 80253b8:	df000c15 	stw	fp,48(sp)
 80253bc:	ddc00b15 	stw	r23,44(sp)
 80253c0:	dd800a15 	stw	r22,40(sp)
 80253c4:	dd400915 	stw	r21,36(sp)
 80253c8:	dd000815 	stw	r20,32(sp)
 80253cc:	dcc00715 	stw	r19,28(sp)
 80253d0:	dc800615 	stw	r18,24(sp)
 80253d4:	dc400515 	stw	r17,20(sp)
 80253d8:	dc000415 	stw	r16,16(sp)
 80253dc:	df000c04 	addi	fp,sp,48
 80253e0:	e13ff415 	stw	r4,-48(fp)
 80253e4:	e17ff515 	stw	r5,-44(fp)
 80253e8:	e1bff615 	stw	r6,-40(fp)
 80253ec:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80253f0:	e0bff417 	ldw	r2,-48(fp)
 80253f4:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80253f8:	e0bff417 	ldw	r2,-48(fp)
 80253fc:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8025400:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 8025404:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 8025408:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 802540c:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 8025410:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8025414:	a580032e 	bgeu	r20,r22,8025424 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 8025418:	b02b883a 	mov	r21,r22
		l_x = r_x;
 802541c:	a02d883a 	mov	r22,r20
		r_x = temp;
 8025420:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 8025424:	9c40032e 	bgeu	r19,r17,8025434 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 8025428:	882b883a 	mov	r21,r17
		t_y = b_y;
 802542c:	9823883a 	mov	r17,r19
		b_y = temp;
 8025430:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8025434:	b4808f2e 	bgeu	r22,r18,8025674 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 8025438:	8c008e2e 	bgeu	r17,r16,8025674 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 802543c:	a4800136 	bltu	r20,r18,8025444 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 8025440:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8025444:	9c000136 	bltu	r19,r16,802544c <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8025448:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 802544c:	e0800417 	ldw	r2,16(fp)
 8025450:	10800058 	cmpnei	r2,r2,1
 8025454:	1000031e 	bne	r2,zero,8025464 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 8025458:	e0bff417 	ldw	r2,-48(fp)
 802545c:	14000c17 	ldw	r16,48(r2)
 8025460:	00000206 	br	802546c <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 8025464:	e0bff417 	ldw	r2,-48(fp)
 8025468:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 802546c:	e0bff417 	ldw	r2,-48(fp)
 8025470:	10800d17 	ldw	r2,52(r2)
 8025474:	10003c1e 	bne	r2,zero,8025568 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8025478:	e0bff417 	ldw	r2,-48(fp)
 802547c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8025480:	8d44983a 	sll	r2,r17,r21
 8025484:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8025488:	e0bff417 	ldw	r2,-48(fp)
 802548c:	10800e17 	ldw	r2,56(r2)
 8025490:	10800058 	cmpnei	r2,r2,1
 8025494:	10000f1e 	bne	r2,zero,80254d4 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 8025498:	8825883a 	mov	r18,r17
 802549c:	00000b06 	br	80254cc <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 80254a0:	b023883a 	mov	r17,r22
 80254a4:	00000406 	br	80254b8 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80254a8:	8c05883a 	add	r2,r17,r16
 80254ac:	b807883a 	mov	r3,r23
 80254b0:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80254b4:	8c400044 	addi	r17,r17,1
 80254b8:	a47ffb2e 	bgeu	r20,r17,80254a8 <__alt_data_end+0xfffe60a8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 80254bc:	00800044 	movi	r2,1
 80254c0:	1544983a 	sll	r2,r2,r21
 80254c4:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80254c8:	94800044 	addi	r18,r18,1
 80254cc:	9cbff42e 	bgeu	r19,r18,80254a0 <__alt_data_end+0xfffe60a0>
 80254d0:	00006906 	br	8025678 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80254d4:	e0bff417 	ldw	r2,-48(fp)
 80254d8:	10800e17 	ldw	r2,56(r2)
 80254dc:	10800098 	cmpnei	r2,r2,2
 80254e0:	1000101e 	bne	r2,zero,8025524 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 80254e4:	8825883a 	mov	r18,r17
 80254e8:	00000c06 	br	802551c <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 80254ec:	b023883a 	mov	r17,r22
 80254f0:	00000506 	br	8025508 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80254f4:	8c45883a 	add	r2,r17,r17
 80254f8:	1405883a 	add	r2,r2,r16
 80254fc:	b807883a 	mov	r3,r23
 8025500:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8025504:	8c400044 	addi	r17,r17,1
 8025508:	a47ffa2e 	bgeu	r20,r17,80254f4 <__alt_data_end+0xfffe60f4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 802550c:	00800044 	movi	r2,1
 8025510:	1544983a 	sll	r2,r2,r21
 8025514:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8025518:	94800044 	addi	r18,r18,1
 802551c:	9cbff32e 	bgeu	r19,r18,80254ec <__alt_data_end+0xfffe60ec>
 8025520:	00005506 	br	8025678 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8025524:	8825883a 	mov	r18,r17
 8025528:	00000d06 	br	8025560 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 802552c:	b023883a 	mov	r17,r22
 8025530:	00000606 	br	802554c <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8025534:	8c45883a 	add	r2,r17,r17
 8025538:	1085883a 	add	r2,r2,r2
 802553c:	1405883a 	add	r2,r2,r16
 8025540:	b807883a 	mov	r3,r23
 8025544:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8025548:	8c400044 	addi	r17,r17,1
 802554c:	a47ff92e 	bgeu	r20,r17,8025534 <__alt_data_end+0xfffe6134>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8025550:	00800044 	movi	r2,1
 8025554:	1544983a 	sll	r2,r2,r21
 8025558:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 802555c:	94800044 	addi	r18,r18,1
 8025560:	9cbff22e 	bgeu	r19,r18,802552c <__alt_data_end+0xfffe612c>
 8025564:	00004406 	br	8025678 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8025568:	e0bff417 	ldw	r2,-48(fp)
 802556c:	10800e17 	ldw	r2,56(r2)
 8025570:	10800058 	cmpnei	r2,r2,1
 8025574:	1000111e 	bne	r2,zero,80255bc <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 8025578:	900b883a 	mov	r5,r18
 802557c:	8809883a 	mov	r4,r17
 8025580:	8020ad40 	call	8020ad4 <__mulsi3>
 8025584:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8025588:	882b883a 	mov	r21,r17
 802558c:	00000906 	br	80255b4 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 8025590:	b023883a 	mov	r17,r22
 8025594:	00000406 	br	80255a8 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8025598:	8c05883a 	add	r2,r17,r16
 802559c:	b807883a 	mov	r3,r23
 80255a0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80255a4:	8c400044 	addi	r17,r17,1
 80255a8:	a47ffb2e 	bgeu	r20,r17,8025598 <__alt_data_end+0xfffe6198>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 80255ac:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80255b0:	ad400044 	addi	r21,r21,1
 80255b4:	9d7ff62e 	bgeu	r19,r21,8025590 <__alt_data_end+0xfffe6190>
 80255b8:	00002f06 	br	8025678 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80255bc:	e0bff417 	ldw	r2,-48(fp)
 80255c0:	10800e17 	ldw	r2,56(r2)
 80255c4:	10800098 	cmpnei	r2,r2,2
 80255c8:	1000141e 	bne	r2,zero,802561c <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 80255cc:	9485883a 	add	r2,r18,r18
 80255d0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 80255d4:	900b883a 	mov	r5,r18
 80255d8:	8809883a 	mov	r4,r17
 80255dc:	8020ad40 	call	8020ad4 <__mulsi3>
 80255e0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80255e4:	882b883a 	mov	r21,r17
 80255e8:	00000a06 	br	8025614 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 80255ec:	b023883a 	mov	r17,r22
 80255f0:	00000506 	br	8025608 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80255f4:	8c45883a 	add	r2,r17,r17
 80255f8:	1405883a 	add	r2,r2,r16
 80255fc:	b807883a 	mov	r3,r23
 8025600:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8025604:	8c400044 	addi	r17,r17,1
 8025608:	a47ffa2e 	bgeu	r20,r17,80255f4 <__alt_data_end+0xfffe61f4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 802560c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8025610:	ad400044 	addi	r21,r21,1
 8025614:	9d7ff52e 	bgeu	r19,r21,80255ec <__alt_data_end+0xfffe61ec>
 8025618:	00001706 	br	8025678 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 802561c:	9485883a 	add	r2,r18,r18
 8025620:	1085883a 	add	r2,r2,r2
 8025624:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8025628:	900b883a 	mov	r5,r18
 802562c:	8809883a 	mov	r4,r17
 8025630:	8020ad40 	call	8020ad4 <__mulsi3>
 8025634:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8025638:	882b883a 	mov	r21,r17
 802563c:	00000b06 	br	802566c <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 8025640:	b023883a 	mov	r17,r22
 8025644:	00000606 	br	8025660 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8025648:	8c45883a 	add	r2,r17,r17
 802564c:	1085883a 	add	r2,r2,r2
 8025650:	1405883a 	add	r2,r2,r16
 8025654:	b807883a 	mov	r3,r23
 8025658:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 802565c:	8c400044 	addi	r17,r17,1
 8025660:	a47ff92e 	bgeu	r20,r17,8025648 <__alt_data_end+0xfffe6248>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8025664:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8025668:	ad400044 	addi	r21,r21,1
 802566c:	9d7ff42e 	bgeu	r19,r21,8025640 <__alt_data_end+0xfffe6240>
 8025670:	00000106 	br	8025678 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8025674:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8025678:	e6fff804 	addi	sp,fp,-32
 802567c:	dfc00917 	ldw	ra,36(sp)
 8025680:	df000817 	ldw	fp,32(sp)
 8025684:	ddc00717 	ldw	r23,28(sp)
 8025688:	dd800617 	ldw	r22,24(sp)
 802568c:	dd400517 	ldw	r21,20(sp)
 8025690:	dd000417 	ldw	r20,16(sp)
 8025694:	dcc00317 	ldw	r19,12(sp)
 8025698:	dc800217 	ldw	r18,8(sp)
 802569c:	dc400117 	ldw	r17,4(sp)
 80256a0:	dc000017 	ldw	r16,0(sp)
 80256a4:	dec00a04 	addi	sp,sp,40
 80256a8:	f800283a 	ret

080256ac <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 80256ac:	defff304 	addi	sp,sp,-52
 80256b0:	dfc00c15 	stw	ra,48(sp)
 80256b4:	df000b15 	stw	fp,44(sp)
 80256b8:	dd800a15 	stw	r22,40(sp)
 80256bc:	dd400915 	stw	r21,36(sp)
 80256c0:	dd000815 	stw	r20,32(sp)
 80256c4:	dcc00715 	stw	r19,28(sp)
 80256c8:	dc800615 	stw	r18,24(sp)
 80256cc:	dc400515 	stw	r17,20(sp)
 80256d0:	dc000415 	stw	r16,16(sp)
 80256d4:	df000b04 	addi	fp,sp,44
 80256d8:	e13ff515 	stw	r4,-44(fp)
 80256dc:	e17ff615 	stw	r5,-40(fp)
 80256e0:	e1bff715 	stw	r6,-36(fp)
 80256e4:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80256e8:	e0bff517 	ldw	r2,-44(fp)
 80256ec:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80256f0:	e0bff517 	ldw	r2,-44(fp)
 80256f4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80256f8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 80256fc:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 8025700:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 8025704:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8025708:	9440032e 	bgeu	r18,r17,8025718 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 802570c:	882d883a 	mov	r22,r17
		l_x = r_x;
 8025710:	9023883a 	mov	r17,r18
		r_x = temp;
 8025714:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8025718:	8cc0632e 	bgeu	r17,r19,80258a8 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 802571c:	a400622e 	bgeu	r20,r16,80258a8 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8025720:	94c00136 	bltu	r18,r19,8025728 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 8025724:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8025728:	e0800317 	ldw	r2,12(fp)
 802572c:	10800058 	cmpnei	r2,r2,1
 8025730:	1000031e 	bne	r2,zero,8025740 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8025734:	e0bff517 	ldw	r2,-44(fp)
 8025738:	14000c17 	ldw	r16,48(r2)
 802573c:	00000206 	br	8025748 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8025740:	e0bff517 	ldw	r2,-44(fp)
 8025744:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8025748:	e0bff517 	ldw	r2,-44(fp)
 802574c:	10800d17 	ldw	r2,52(r2)
 8025750:	1000231e 	bne	r2,zero,80257e0 <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8025754:	e0bff517 	ldw	r2,-44(fp)
 8025758:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 802575c:	a4c4983a 	sll	r2,r20,r19
 8025760:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8025764:	e0bff517 	ldw	r2,-44(fp)
 8025768:	10800e17 	ldw	r2,56(r2)
 802576c:	10800058 	cmpnei	r2,r2,1
 8025770:	1000071e 	bne	r2,zero,8025790 <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 8025774:	00000406 	br	8025788 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8025778:	8c05883a 	add	r2,r17,r16
 802577c:	a807883a 	mov	r3,r21
 8025780:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8025784:	8c400044 	addi	r17,r17,1
 8025788:	947ffb2e 	bgeu	r18,r17,8025778 <__alt_data_end+0xfffe6378>
 802578c:	00004706 	br	80258ac <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8025790:	e0bff517 	ldw	r2,-44(fp)
 8025794:	10800e17 	ldw	r2,56(r2)
 8025798:	10800098 	cmpnei	r2,r2,2
 802579c:	10000e1e 	bne	r2,zero,80257d8 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 80257a0:	00000506 	br	80257b8 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 80257a4:	8c45883a 	add	r2,r17,r17
 80257a8:	1405883a 	add	r2,r2,r16
 80257ac:	a807883a 	mov	r3,r21
 80257b0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80257b4:	8c400044 	addi	r17,r17,1
 80257b8:	947ffa2e 	bgeu	r18,r17,80257a4 <__alt_data_end+0xfffe63a4>
 80257bc:	00003b06 	br	80258ac <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 80257c0:	8c45883a 	add	r2,r17,r17
 80257c4:	1085883a 	add	r2,r2,r2
 80257c8:	1405883a 	add	r2,r2,r16
 80257cc:	a807883a 	mov	r3,r21
 80257d0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 80257d4:	8c400044 	addi	r17,r17,1
 80257d8:	947ff92e 	bgeu	r18,r17,80257c0 <__alt_data_end+0xfffe63c0>
 80257dc:	00003306 	br	80258ac <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80257e0:	e0bff517 	ldw	r2,-44(fp)
 80257e4:	10800e17 	ldw	r2,56(r2)
 80257e8:	10800058 	cmpnei	r2,r2,1
 80257ec:	10000b1e 	bne	r2,zero,802581c <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 80257f0:	980b883a 	mov	r5,r19
 80257f4:	a009883a 	mov	r4,r20
 80257f8:	8020ad40 	call	8020ad4 <__mulsi3>
 80257fc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8025800:	00000406 	br	8025814 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8025804:	8c05883a 	add	r2,r17,r16
 8025808:	a807883a 	mov	r3,r21
 802580c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8025810:	8c400044 	addi	r17,r17,1
 8025814:	947ffb2e 	bgeu	r18,r17,8025804 <__alt_data_end+0xfffe6404>
 8025818:	00002406 	br	80258ac <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 802581c:	e0bff517 	ldw	r2,-44(fp)
 8025820:	10800e17 	ldw	r2,56(r2)
 8025824:	10800098 	cmpnei	r2,r2,2
 8025828:	10000e1e 	bne	r2,zero,8025864 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 802582c:	9cc5883a 	add	r2,r19,r19
 8025830:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8025834:	980b883a 	mov	r5,r19
 8025838:	a009883a 	mov	r4,r20
 802583c:	8020ad40 	call	8020ad4 <__mulsi3>
 8025840:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8025844:	00000506 	br	802585c <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8025848:	8c45883a 	add	r2,r17,r17
 802584c:	1405883a 	add	r2,r2,r16
 8025850:	a807883a 	mov	r3,r21
 8025854:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8025858:	8c400044 	addi	r17,r17,1
 802585c:	947ffa2e 	bgeu	r18,r17,8025848 <__alt_data_end+0xfffe6448>
 8025860:	00001206 	br	80258ac <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8025864:	9cc5883a 	add	r2,r19,r19
 8025868:	1085883a 	add	r2,r2,r2
 802586c:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8025870:	980b883a 	mov	r5,r19
 8025874:	a009883a 	mov	r4,r20
 8025878:	8020ad40 	call	8020ad4 <__mulsi3>
 802587c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8025880:	00000606 	br	802589c <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8025884:	8c45883a 	add	r2,r17,r17
 8025888:	1085883a 	add	r2,r2,r2
 802588c:	1405883a 	add	r2,r2,r16
 8025890:	a807883a 	mov	r3,r21
 8025894:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8025898:	8c400044 	addi	r17,r17,1
 802589c:	947ff92e 	bgeu	r18,r17,8025884 <__alt_data_end+0xfffe6484>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 80258a0:	84e1883a 	add	r16,r16,r19
 80258a4:	00000106 	br	80258ac <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 80258a8:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 80258ac:	e6fff904 	addi	sp,fp,-28
 80258b0:	dfc00817 	ldw	ra,32(sp)
 80258b4:	df000717 	ldw	fp,28(sp)
 80258b8:	dd800617 	ldw	r22,24(sp)
 80258bc:	dd400517 	ldw	r21,20(sp)
 80258c0:	dd000417 	ldw	r20,16(sp)
 80258c4:	dcc00317 	ldw	r19,12(sp)
 80258c8:	dc800217 	ldw	r18,8(sp)
 80258cc:	dc400117 	ldw	r17,4(sp)
 80258d0:	dc000017 	ldw	r16,0(sp)
 80258d4:	dec00904 	addi	sp,sp,36
 80258d8:	f800283a 	ret

080258dc <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 80258dc:	defff304 	addi	sp,sp,-52
 80258e0:	dfc00c15 	stw	ra,48(sp)
 80258e4:	df000b15 	stw	fp,44(sp)
 80258e8:	dd800a15 	stw	r22,40(sp)
 80258ec:	dd400915 	stw	r21,36(sp)
 80258f0:	dd000815 	stw	r20,32(sp)
 80258f4:	dcc00715 	stw	r19,28(sp)
 80258f8:	dc800615 	stw	r18,24(sp)
 80258fc:	dc400515 	stw	r17,20(sp)
 8025900:	dc000415 	stw	r16,16(sp)
 8025904:	df000b04 	addi	fp,sp,44
 8025908:	e13ff515 	stw	r4,-44(fp)
 802590c:	e17ff615 	stw	r5,-40(fp)
 8025910:	e1bff715 	stw	r6,-36(fp)
 8025914:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8025918:	e0bff517 	ldw	r2,-44(fp)
 802591c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8025920:	e0bff517 	ldw	r2,-44(fp)
 8025924:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8025928:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 802592c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 8025930:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 8025934:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8025938:	9500032e 	bgeu	r18,r20,8025948 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 802593c:	a02b883a 	mov	r21,r20
		t_y = b_y;
 8025940:	9029883a 	mov	r20,r18
		b_y = temp;
 8025944:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8025948:	8cc0722e 	bgeu	r17,r19,8025b14 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 802594c:	a400712e 	bgeu	r20,r16,8025b14 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8025950:	94000136 	bltu	r18,r16,8025958 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 8025954:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8025958:	e0800317 	ldw	r2,12(fp)
 802595c:	10800058 	cmpnei	r2,r2,1
 8025960:	1000031e 	bne	r2,zero,8025970 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8025964:	e0bff517 	ldw	r2,-44(fp)
 8025968:	14000c17 	ldw	r16,48(r2)
 802596c:	00000206 	br	8025978 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8025970:	e0bff517 	ldw	r2,-44(fp)
 8025974:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8025978:	e0bff517 	ldw	r2,-44(fp)
 802597c:	10800d17 	ldw	r2,52(r2)
 8025980:	1000301e 	bne	r2,zero,8025a44 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8025984:	e0bff517 	ldw	r2,-44(fp)
 8025988:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 802598c:	a544983a 	sll	r2,r20,r21
 8025990:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8025994:	e0bff517 	ldw	r2,-44(fp)
 8025998:	10800e17 	ldw	r2,56(r2)
 802599c:	10800058 	cmpnei	r2,r2,1
 80259a0:	10000b1e 	bne	r2,zero,80259d0 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 80259a4:	a027883a 	mov	r19,r20
 80259a8:	00000706 	br	80259c8 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80259ac:	8c05883a 	add	r2,r17,r16
 80259b0:	b007883a 	mov	r3,r22
 80259b4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80259b8:	00800044 	movi	r2,1
 80259bc:	1544983a 	sll	r2,r2,r21
 80259c0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80259c4:	9cc00044 	addi	r19,r19,1
 80259c8:	94fff82e 	bgeu	r18,r19,80259ac <__alt_data_end+0xfffe65ac>
 80259cc:	00005206 	br	8025b18 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80259d0:	e0bff517 	ldw	r2,-44(fp)
 80259d4:	10800e17 	ldw	r2,56(r2)
 80259d8:	10800098 	cmpnei	r2,r2,2
 80259dc:	10000c1e 	bne	r2,zero,8025a10 <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 80259e0:	a027883a 	mov	r19,r20
 80259e4:	00000806 	br	8025a08 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 80259e8:	8c45883a 	add	r2,r17,r17
 80259ec:	1405883a 	add	r2,r2,r16
 80259f0:	b007883a 	mov	r3,r22
 80259f4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80259f8:	00800044 	movi	r2,1
 80259fc:	1544983a 	sll	r2,r2,r21
 8025a00:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8025a04:	9cc00044 	addi	r19,r19,1
 8025a08:	94fff72e 	bgeu	r18,r19,80259e8 <__alt_data_end+0xfffe65e8>
 8025a0c:	00004206 	br	8025b18 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8025a10:	a027883a 	mov	r19,r20
 8025a14:	00000906 	br	8025a3c <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8025a18:	8c45883a 	add	r2,r17,r17
 8025a1c:	1085883a 	add	r2,r2,r2
 8025a20:	1405883a 	add	r2,r2,r16
 8025a24:	b007883a 	mov	r3,r22
 8025a28:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8025a2c:	00800044 	movi	r2,1
 8025a30:	1544983a 	sll	r2,r2,r21
 8025a34:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8025a38:	9cc00044 	addi	r19,r19,1
 8025a3c:	94fff62e 	bgeu	r18,r19,8025a18 <__alt_data_end+0xfffe6618>
 8025a40:	00003506 	br	8025b18 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8025a44:	e0bff517 	ldw	r2,-44(fp)
 8025a48:	10800e17 	ldw	r2,56(r2)
 8025a4c:	10800058 	cmpnei	r2,r2,1
 8025a50:	10000c1e 	bne	r2,zero,8025a84 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 8025a54:	980b883a 	mov	r5,r19
 8025a58:	a009883a 	mov	r4,r20
 8025a5c:	8020ad40 	call	8020ad4 <__mulsi3>
 8025a60:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8025a64:	00000506 	br	8025a7c <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8025a68:	8c05883a 	add	r2,r17,r16
 8025a6c:	b007883a 	mov	r3,r22
 8025a70:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8025a74:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8025a78:	a5000044 	addi	r20,r20,1
 8025a7c:	953ffa2e 	bgeu	r18,r20,8025a68 <__alt_data_end+0xfffe6668>
 8025a80:	00002506 	br	8025b18 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8025a84:	e0bff517 	ldw	r2,-44(fp)
 8025a88:	10800e17 	ldw	r2,56(r2)
 8025a8c:	10800098 	cmpnei	r2,r2,2
 8025a90:	10000f1e 	bne	r2,zero,8025ad0 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 8025a94:	9cc5883a 	add	r2,r19,r19
 8025a98:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 8025a9c:	980b883a 	mov	r5,r19
 8025aa0:	a009883a 	mov	r4,r20
 8025aa4:	8020ad40 	call	8020ad4 <__mulsi3>
 8025aa8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8025aac:	00000606 	br	8025ac8 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8025ab0:	8c45883a 	add	r2,r17,r17
 8025ab4:	1405883a 	add	r2,r2,r16
 8025ab8:	b007883a 	mov	r3,r22
 8025abc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8025ac0:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8025ac4:	a5000044 	addi	r20,r20,1
 8025ac8:	953ff92e 	bgeu	r18,r20,8025ab0 <__alt_data_end+0xfffe66b0>
 8025acc:	00001206 	br	8025b18 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8025ad0:	9cc5883a 	add	r2,r19,r19
 8025ad4:	1085883a 	add	r2,r2,r2
 8025ad8:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 8025adc:	980b883a 	mov	r5,r19
 8025ae0:	a009883a 	mov	r4,r20
 8025ae4:	8020ad40 	call	8020ad4 <__mulsi3>
 8025ae8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8025aec:	00000706 	br	8025b0c <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8025af0:	8c45883a 	add	r2,r17,r17
 8025af4:	1085883a 	add	r2,r2,r2
 8025af8:	1405883a 	add	r2,r2,r16
 8025afc:	b007883a 	mov	r3,r22
 8025b00:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8025b04:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8025b08:	a5000044 	addi	r20,r20,1
 8025b0c:	953ff82e 	bgeu	r18,r20,8025af0 <__alt_data_end+0xfffe66f0>
 8025b10:	00000106 	br	8025b18 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8025b14:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8025b18:	e6fff904 	addi	sp,fp,-28
 8025b1c:	dfc00817 	ldw	ra,32(sp)
 8025b20:	df000717 	ldw	fp,28(sp)
 8025b24:	dd800617 	ldw	r22,24(sp)
 8025b28:	dd400517 	ldw	r21,20(sp)
 8025b2c:	dd000417 	ldw	r20,16(sp)
 8025b30:	dcc00317 	ldw	r19,12(sp)
 8025b34:	dc800217 	ldw	r18,8(sp)
 8025b38:	dc400117 	ldw	r17,4(sp)
 8025b3c:	dc000017 	ldw	r16,0(sp)
 8025b40:	dec00904 	addi	sp,sp,36
 8025b44:	f800283a 	ret

08025b48 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8025b48:	defff804 	addi	sp,sp,-32
 8025b4c:	dfc00715 	stw	ra,28(sp)
 8025b50:	df000615 	stw	fp,24(sp)
 8025b54:	df000604 	addi	fp,sp,24
 8025b58:	e13ffc15 	stw	r4,-16(fp)
 8025b5c:	e17ffd15 	stw	r5,-12(fp)
 8025b60:	e1bffe15 	stw	r6,-8(fp)
 8025b64:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8025b68:	e0800417 	ldw	r2,16(fp)
 8025b6c:	d8800115 	stw	r2,4(sp)
 8025b70:	e0800317 	ldw	r2,12(fp)
 8025b74:	d8800015 	stw	r2,0(sp)
 8025b78:	e1fffe17 	ldw	r7,-8(fp)
 8025b7c:	e1bfff17 	ldw	r6,-4(fp)
 8025b80:	e17ffd17 	ldw	r5,-12(fp)
 8025b84:	e13ffc17 	ldw	r4,-16(fp)
 8025b88:	80256ac0 	call	80256ac <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8025b8c:	e0800417 	ldw	r2,16(fp)
 8025b90:	d8800115 	stw	r2,4(sp)
 8025b94:	e0800317 	ldw	r2,12(fp)
 8025b98:	d8800015 	stw	r2,0(sp)
 8025b9c:	e1c00217 	ldw	r7,8(fp)
 8025ba0:	e1bfff17 	ldw	r6,-4(fp)
 8025ba4:	e17ffd17 	ldw	r5,-12(fp)
 8025ba8:	e13ffc17 	ldw	r4,-16(fp)
 8025bac:	80256ac0 	call	80256ac <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8025bb0:	e0800417 	ldw	r2,16(fp)
 8025bb4:	d8800115 	stw	r2,4(sp)
 8025bb8:	e0800317 	ldw	r2,12(fp)
 8025bbc:	d8800015 	stw	r2,0(sp)
 8025bc0:	e1c00217 	ldw	r7,8(fp)
 8025bc4:	e1bffe17 	ldw	r6,-8(fp)
 8025bc8:	e17ffd17 	ldw	r5,-12(fp)
 8025bcc:	e13ffc17 	ldw	r4,-16(fp)
 8025bd0:	80258dc0 	call	80258dc <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8025bd4:	e0800417 	ldw	r2,16(fp)
 8025bd8:	d8800115 	stw	r2,4(sp)
 8025bdc:	e0800317 	ldw	r2,12(fp)
 8025be0:	d8800015 	stw	r2,0(sp)
 8025be4:	e1c00217 	ldw	r7,8(fp)
 8025be8:	e1bffe17 	ldw	r6,-8(fp)
 8025bec:	e17fff17 	ldw	r5,-4(fp)
 8025bf0:	e13ffc17 	ldw	r4,-16(fp)
 8025bf4:	80258dc0 	call	80258dc <alt_up_pixel_buffer_dma_draw_vline>
}
 8025bf8:	0001883a 	nop
 8025bfc:	e037883a 	mov	sp,fp
 8025c00:	dfc00117 	ldw	ra,4(sp)
 8025c04:	df000017 	ldw	fp,0(sp)
 8025c08:	dec00204 	addi	sp,sp,8
 8025c0c:	f800283a 	ret

08025c10 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8025c10:	defffb04 	addi	sp,sp,-20
 8025c14:	dfc00415 	stw	ra,16(sp)
 8025c18:	df000315 	stw	fp,12(sp)
 8025c1c:	dc800215 	stw	r18,8(sp)
 8025c20:	dc400115 	stw	r17,4(sp)
 8025c24:	dc000015 	stw	r16,0(sp)
 8025c28:	df000304 	addi	fp,sp,12
 8025c2c:	2021883a 	mov	r16,r4
 8025c30:	2807883a 	mov	r3,r5
 8025c34:	3023883a 	mov	r17,r6
 8025c38:	3809883a 	mov	r4,r7
 8025c3c:	e4800217 	ldw	r18,8(fp)
 8025c40:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 8025c44:	1000071e 	bne	r2,zero,8025c64 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8025c48:	200b883a 	mov	r5,r4
 8025c4c:	1809883a 	mov	r4,r3
 8025c50:	8020ad40 	call	8020ad4 <__mulsi3>
 8025c54:	1445883a 	add	r2,r2,r17
 8025c58:	1405883a 	add	r2,r2,r16
 8025c5c:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8025c60:	00001206 	br	8025cac <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 8025c64:	10800058 	cmpnei	r2,r2,1
 8025c68:	1000081e 	bne	r2,zero,8025c8c <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8025c6c:	200b883a 	mov	r5,r4
 8025c70:	1809883a 	mov	r4,r3
 8025c74:	8020ad40 	call	8020ad4 <__mulsi3>
 8025c78:	1445883a 	add	r2,r2,r17
 8025c7c:	1085883a 	add	r2,r2,r2
 8025c80:	1405883a 	add	r2,r2,r16
 8025c84:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8025c88:	00000806 	br	8025cac <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8025c8c:	200b883a 	mov	r5,r4
 8025c90:	1809883a 	mov	r4,r3
 8025c94:	8020ad40 	call	8020ad4 <__mulsi3>
 8025c98:	1445883a 	add	r2,r2,r17
 8025c9c:	1085883a 	add	r2,r2,r2
 8025ca0:	1085883a 	add	r2,r2,r2
 8025ca4:	1405883a 	add	r2,r2,r16
 8025ca8:	14800035 	stwio	r18,0(r2)
}
 8025cac:	0001883a 	nop
 8025cb0:	e6fffd04 	addi	sp,fp,-12
 8025cb4:	dfc00417 	ldw	ra,16(sp)
 8025cb8:	df000317 	ldw	fp,12(sp)
 8025cbc:	dc800217 	ldw	r18,8(sp)
 8025cc0:	dc400117 	ldw	r17,4(sp)
 8025cc4:	dc000017 	ldw	r16,0(sp)
 8025cc8:	dec00504 	addi	sp,sp,20
 8025ccc:	f800283a 	ret

08025cd0 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8025cd0:	deffeb04 	addi	sp,sp,-84
 8025cd4:	dfc01415 	stw	ra,80(sp)
 8025cd8:	df001315 	stw	fp,76(sp)
 8025cdc:	ddc01215 	stw	r23,72(sp)
 8025ce0:	dd801115 	stw	r22,68(sp)
 8025ce4:	dd401015 	stw	r21,64(sp)
 8025ce8:	dd000f15 	stw	r20,60(sp)
 8025cec:	dcc00e15 	stw	r19,56(sp)
 8025cf0:	dc800d15 	stw	r18,52(sp)
 8025cf4:	dc400c15 	stw	r17,48(sp)
 8025cf8:	dc000b15 	stw	r16,44(sp)
 8025cfc:	df001304 	addi	fp,sp,76
 8025d00:	e13fef15 	stw	r4,-68(fp)
 8025d04:	e17ff015 	stw	r5,-64(fp)
 8025d08:	e1bff115 	stw	r6,-60(fp)
 8025d0c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8025d10:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8025d14:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 8025d18:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 8025d1c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8025d20:	a4c5c83a 	sub	r2,r20,r19
 8025d24:	1000010e 	bge	r2,zero,8025d2c <alt_up_pixel_buffer_dma_draw_line+0x5c>
 8025d28:	0085c83a 	sub	r2,zero,r2
 8025d2c:	1007883a 	mov	r3,r2
 8025d30:	9445c83a 	sub	r2,r18,r17
 8025d34:	1000010e 	bge	r2,zero,8025d3c <alt_up_pixel_buffer_dma_draw_line+0x6c>
 8025d38:	0085c83a 	sub	r2,zero,r2
 8025d3c:	10c4803a 	cmplt	r2,r2,r3
 8025d40:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8025d44:	e0bfef17 	ldw	r2,-68(fp)
 8025d48:	10800e17 	ldw	r2,56(r2)
 8025d4c:	10800060 	cmpeqi	r2,r2,1
 8025d50:	1000081e 	bne	r2,zero,8025d74 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8025d54:	e0bfef17 	ldw	r2,-68(fp)
 8025d58:	10800e17 	ldw	r2,56(r2)
 8025d5c:	10800098 	cmpnei	r2,r2,2
 8025d60:	1000021e 	bne	r2,zero,8025d6c <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8025d64:	00800044 	movi	r2,1
 8025d68:	00000306 	br	8025d78 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 8025d6c:	00800084 	movi	r2,2
 8025d70:	00000106 	br	8025d78 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8025d74:	0005883a 	mov	r2,zero
 8025d78:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 8025d7c:	e0800317 	ldw	r2,12(fp)
 8025d80:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8025d84:	e0bfef17 	ldw	r2,-68(fp)
 8025d88:	10800d17 	ldw	r2,52(r2)
 8025d8c:	1000071e 	bne	r2,zero,8025dac <alt_up_pixel_buffer_dma_draw_line+0xdc>
 8025d90:	e0bfef17 	ldw	r2,-68(fp)
 8025d94:	10801317 	ldw	r2,76(r2)
 8025d98:	e0fff417 	ldw	r3,-48(fp)
 8025d9c:	10c5c83a 	sub	r2,r2,r3
 8025da0:	00c00044 	movi	r3,1
 8025da4:	1884983a 	sll	r2,r3,r2
 8025da8:	00000206 	br	8025db4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8025dac:	e0bfef17 	ldw	r2,-68(fp)
 8025db0:	10800f17 	ldw	r2,60(r2)
 8025db4:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 8025db8:	e0800417 	ldw	r2,16(fp)
 8025dbc:	10800058 	cmpnei	r2,r2,1
 8025dc0:	1000031e 	bne	r2,zero,8025dd0 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8025dc4:	e0bfef17 	ldw	r2,-68(fp)
 8025dc8:	15c00c17 	ldw	r23,48(r2)
 8025dcc:	00000206 	br	8025dd8 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8025dd0:	e0bfef17 	ldw	r2,-68(fp)
 8025dd4:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 8025dd8:	e0bff307 	ldb	r2,-52(fp)
 8025ddc:	0080060e 	bge	zero,r2,8025df8 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8025de0:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8025de4:	9823883a 	mov	r17,r19
		y_0 = error;
 8025de8:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 8025dec:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8025df0:	a025883a 	mov	r18,r20
		y_1 = error;
 8025df4:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 8025df8:	9440060e 	bge	r18,r17,8025e14 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 8025dfc:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8025e00:	9023883a 	mov	r17,r18
		x_1 = error;
 8025e04:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 8025e08:	9821883a 	mov	r16,r19
		y_0 = y_1;
 8025e0c:	a027883a 	mov	r19,r20
		y_1 = error;
 8025e10:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8025e14:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 8025e18:	a4c5c83a 	sub	r2,r20,r19
 8025e1c:	1000010e 	bge	r2,zero,8025e24 <alt_up_pixel_buffer_dma_draw_line+0x154>
 8025e20:	0085c83a 	sub	r2,zero,r2
 8025e24:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 8025e28:	a804d7fa 	srli	r2,r21,31
 8025e2c:	1545883a 	add	r2,r2,r21
 8025e30:	1005d07a 	srai	r2,r2,1
 8025e34:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8025e38:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8025e3c:	9d00020e 	bge	r19,r20,8025e48 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8025e40:	04c00044 	movi	r19,1
 8025e44:	00000106 	br	8025e4c <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 8025e48:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8025e4c:	e0bff307 	ldb	r2,-52(fp)
 8025e50:	10800058 	cmpnei	r2,r2,1
 8025e54:	1000211e 	bne	r2,zero,8025edc <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 8025e58:	00000f06 	br	8025e98 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8025e5c:	e0bff417 	ldw	r2,-48(fp)
 8025e60:	d8800115 	stw	r2,4(sp)
 8025e64:	e0bff517 	ldw	r2,-44(fp)
 8025e68:	d8800015 	stw	r2,0(sp)
 8025e6c:	880f883a 	mov	r7,r17
 8025e70:	b00d883a 	mov	r6,r22
 8025e74:	e17ff617 	ldw	r5,-40(fp)
 8025e78:	b809883a 	mov	r4,r23
 8025e7c:	8025c100 	call	8025c10 <helper_plot_pixel>
			error = error + deltay;
 8025e80:	e0bff717 	ldw	r2,-36(fp)
 8025e84:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8025e88:	0400020e 	bge	zero,r16,8025e94 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 8025e8c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8025e90:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8025e94:	8c400044 	addi	r17,r17,1
 8025e98:	947ff00e 	bge	r18,r17,8025e5c <__alt_data_end+0xfffe6a5c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8025e9c:	00001006 	br	8025ee0 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8025ea0:	e0bff417 	ldw	r2,-48(fp)
 8025ea4:	d8800115 	stw	r2,4(sp)
 8025ea8:	e0bff517 	ldw	r2,-44(fp)
 8025eac:	d8800015 	stw	r2,0(sp)
 8025eb0:	b00f883a 	mov	r7,r22
 8025eb4:	880d883a 	mov	r6,r17
 8025eb8:	e17ff617 	ldw	r5,-40(fp)
 8025ebc:	b809883a 	mov	r4,r23
 8025ec0:	8025c100 	call	8025c10 <helper_plot_pixel>
			error = error + deltay;
 8025ec4:	e0bff717 	ldw	r2,-36(fp)
 8025ec8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8025ecc:	0400020e 	bge	zero,r16,8025ed8 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8025ed0:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8025ed4:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8025ed8:	8c400044 	addi	r17,r17,1
 8025edc:	947ff00e 	bge	r18,r17,8025ea0 <__alt_data_end+0xfffe6aa0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8025ee0:	0001883a 	nop
 8025ee4:	e6fff804 	addi	sp,fp,-32
 8025ee8:	dfc00917 	ldw	ra,36(sp)
 8025eec:	df000817 	ldw	fp,32(sp)
 8025ef0:	ddc00717 	ldw	r23,28(sp)
 8025ef4:	dd800617 	ldw	r22,24(sp)
 8025ef8:	dd400517 	ldw	r21,20(sp)
 8025efc:	dd000417 	ldw	r20,16(sp)
 8025f00:	dcc00317 	ldw	r19,12(sp)
 8025f04:	dc800217 	ldw	r18,8(sp)
 8025f08:	dc400117 	ldw	r17,4(sp)
 8025f0c:	dc000017 	ldw	r16,0(sp)
 8025f10:	dec00a04 	addi	sp,sp,40
 8025f14:	f800283a 	ret

08025f18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8025f18:	defff504 	addi	sp,sp,-44
 8025f1c:	df000a15 	stw	fp,40(sp)
 8025f20:	df000a04 	addi	fp,sp,40
 8025f24:	e13ffc15 	stw	r4,-16(fp)
 8025f28:	e17ffd15 	stw	r5,-12(fp)
 8025f2c:	e1bffe15 	stw	r6,-8(fp)
 8025f30:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8025f34:	e03ff615 	stw	zero,-40(fp)
 8025f38:	d0a6c617 	ldw	r2,-25832(gp)
  
  if (alt_ticks_per_second ())
 8025f3c:	10003c26 	beq	r2,zero,8026030 <alt_alarm_start+0x118>
  {
    if (alarm)
 8025f40:	e0bffc17 	ldw	r2,-16(fp)
 8025f44:	10003826 	beq	r2,zero,8026028 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8025f48:	e0bffc17 	ldw	r2,-16(fp)
 8025f4c:	e0fffe17 	ldw	r3,-8(fp)
 8025f50:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8025f54:	e0bffc17 	ldw	r2,-16(fp)
 8025f58:	e0ffff17 	ldw	r3,-4(fp)
 8025f5c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8025f60:	0005303a 	rdctl	r2,status
 8025f64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025f68:	e0fff917 	ldw	r3,-28(fp)
 8025f6c:	00bfff84 	movi	r2,-2
 8025f70:	1884703a 	and	r2,r3,r2
 8025f74:	1001703a 	wrctl	status,r2
  
  return context;
 8025f78:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8025f7c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8025f80:	d0a6c717 	ldw	r2,-25828(gp)
      
      current_nticks = alt_nticks();
 8025f84:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8025f88:	e0fffd17 	ldw	r3,-12(fp)
 8025f8c:	e0bff617 	ldw	r2,-40(fp)
 8025f90:	1885883a 	add	r2,r3,r2
 8025f94:	10c00044 	addi	r3,r2,1
 8025f98:	e0bffc17 	ldw	r2,-16(fp)
 8025f9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8025fa0:	e0bffc17 	ldw	r2,-16(fp)
 8025fa4:	10c00217 	ldw	r3,8(r2)
 8025fa8:	e0bff617 	ldw	r2,-40(fp)
 8025fac:	1880042e 	bgeu	r3,r2,8025fc0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8025fb0:	e0bffc17 	ldw	r2,-16(fp)
 8025fb4:	00c00044 	movi	r3,1
 8025fb8:	10c00405 	stb	r3,16(r2)
 8025fbc:	00000206 	br	8025fc8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8025fc0:	e0bffc17 	ldw	r2,-16(fp)
 8025fc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8025fc8:	e0bffc17 	ldw	r2,-16(fp)
 8025fcc:	d0e00c04 	addi	r3,gp,-32720
 8025fd0:	e0fffa15 	stw	r3,-24(fp)
 8025fd4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8025fd8:	e0bffb17 	ldw	r2,-20(fp)
 8025fdc:	e0fffa17 	ldw	r3,-24(fp)
 8025fe0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8025fe4:	e0bffa17 	ldw	r2,-24(fp)
 8025fe8:	10c00017 	ldw	r3,0(r2)
 8025fec:	e0bffb17 	ldw	r2,-20(fp)
 8025ff0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8025ff4:	e0bffa17 	ldw	r2,-24(fp)
 8025ff8:	10800017 	ldw	r2,0(r2)
 8025ffc:	e0fffb17 	ldw	r3,-20(fp)
 8026000:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8026004:	e0bffa17 	ldw	r2,-24(fp)
 8026008:	e0fffb17 	ldw	r3,-20(fp)
 802600c:	10c00015 	stw	r3,0(r2)
 8026010:	e0bff817 	ldw	r2,-32(fp)
 8026014:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8026018:	e0bff717 	ldw	r2,-36(fp)
 802601c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8026020:	0005883a 	mov	r2,zero
 8026024:	00000306 	br	8026034 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8026028:	00bffa84 	movi	r2,-22
 802602c:	00000106 	br	8026034 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8026030:	00bfde84 	movi	r2,-134
  }
}
 8026034:	e037883a 	mov	sp,fp
 8026038:	df000017 	ldw	fp,0(sp)
 802603c:	dec00104 	addi	sp,sp,4
 8026040:	f800283a 	ret

08026044 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8026044:	defffa04 	addi	sp,sp,-24
 8026048:	dfc00515 	stw	ra,20(sp)
 802604c:	df000415 	stw	fp,16(sp)
 8026050:	df000404 	addi	fp,sp,16
 8026054:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8026058:	00800244 	movi	r2,9
 802605c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8026060:	014003f4 	movhi	r5,15
 8026064:	29509004 	addi	r5,r5,16960
 8026068:	e13ffd17 	ldw	r4,-12(fp)
 802606c:	8020ad40 	call	8020ad4 <__mulsi3>
 8026070:	100b883a 	mov	r5,r2
 8026074:	0100bef4 	movhi	r4,763
 8026078:	213c2004 	addi	r4,r4,-3968
 802607c:	80238240 	call	8023824 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8026080:	100b883a 	mov	r5,r2
 8026084:	01200034 	movhi	r4,32768
 8026088:	213fffc4 	addi	r4,r4,-1
 802608c:	80238240 	call	8023824 <__udivsi3>
 8026090:	100b883a 	mov	r5,r2
 8026094:	e13fff17 	ldw	r4,-4(fp)
 8026098:	80238240 	call	8023824 <__udivsi3>
 802609c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80260a0:	e0bffe17 	ldw	r2,-8(fp)
 80260a4:	10002a26 	beq	r2,zero,8026150 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80260a8:	e03ffc15 	stw	zero,-16(fp)
 80260ac:	00001706 	br	802610c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80260b0:	00a00034 	movhi	r2,32768
 80260b4:	10bfffc4 	addi	r2,r2,-1
 80260b8:	10bfffc4 	addi	r2,r2,-1
 80260bc:	103ffe1e 	bne	r2,zero,80260b8 <__alt_data_end+0xfffe6cb8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80260c0:	014003f4 	movhi	r5,15
 80260c4:	29509004 	addi	r5,r5,16960
 80260c8:	e13ffd17 	ldw	r4,-12(fp)
 80260cc:	8020ad40 	call	8020ad4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80260d0:	100b883a 	mov	r5,r2
 80260d4:	0100bef4 	movhi	r4,763
 80260d8:	213c2004 	addi	r4,r4,-3968
 80260dc:	80238240 	call	8023824 <__udivsi3>
 80260e0:	100b883a 	mov	r5,r2
 80260e4:	01200034 	movhi	r4,32768
 80260e8:	213fffc4 	addi	r4,r4,-1
 80260ec:	80238240 	call	8023824 <__udivsi3>
 80260f0:	1007883a 	mov	r3,r2
 80260f4:	e0bfff17 	ldw	r2,-4(fp)
 80260f8:	10c5c83a 	sub	r2,r2,r3
 80260fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8026100:	e0bffc17 	ldw	r2,-16(fp)
 8026104:	10800044 	addi	r2,r2,1
 8026108:	e0bffc15 	stw	r2,-16(fp)
 802610c:	e0fffc17 	ldw	r3,-16(fp)
 8026110:	e0bffe17 	ldw	r2,-8(fp)
 8026114:	18bfe616 	blt	r3,r2,80260b0 <__alt_data_end+0xfffe6cb0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8026118:	014003f4 	movhi	r5,15
 802611c:	29509004 	addi	r5,r5,16960
 8026120:	e13ffd17 	ldw	r4,-12(fp)
 8026124:	8020ad40 	call	8020ad4 <__mulsi3>
 8026128:	100b883a 	mov	r5,r2
 802612c:	0100bef4 	movhi	r4,763
 8026130:	213c2004 	addi	r4,r4,-3968
 8026134:	80238240 	call	8023824 <__udivsi3>
 8026138:	e17fff17 	ldw	r5,-4(fp)
 802613c:	1009883a 	mov	r4,r2
 8026140:	8020ad40 	call	8020ad4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8026144:	10bfffc4 	addi	r2,r2,-1
 8026148:	103ffe1e 	bne	r2,zero,8026144 <__alt_data_end+0xfffe6d44>
 802614c:	00000d06 	br	8026184 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8026150:	014003f4 	movhi	r5,15
 8026154:	29509004 	addi	r5,r5,16960
 8026158:	e13ffd17 	ldw	r4,-12(fp)
 802615c:	8020ad40 	call	8020ad4 <__mulsi3>
 8026160:	100b883a 	mov	r5,r2
 8026164:	0100bef4 	movhi	r4,763
 8026168:	213c2004 	addi	r4,r4,-3968
 802616c:	80238240 	call	8023824 <__udivsi3>
 8026170:	e17fff17 	ldw	r5,-4(fp)
 8026174:	1009883a 	mov	r4,r2
 8026178:	8020ad40 	call	8020ad4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 802617c:	10bfffc4 	addi	r2,r2,-1
 8026180:	00bffe16 	blt	zero,r2,802617c <__alt_data_end+0xfffe6d7c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8026184:	0005883a 	mov	r2,zero
}
 8026188:	e037883a 	mov	sp,fp
 802618c:	dfc00117 	ldw	ra,4(sp)
 8026190:	df000017 	ldw	fp,0(sp)
 8026194:	dec00204 	addi	sp,sp,8
 8026198:	f800283a 	ret

0802619c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 802619c:	deffff04 	addi	sp,sp,-4
 80261a0:	df000015 	stw	fp,0(sp)
 80261a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80261a8:	0001883a 	nop
 80261ac:	e037883a 	mov	sp,fp
 80261b0:	df000017 	ldw	fp,0(sp)
 80261b4:	dec00104 	addi	sp,sp,4
 80261b8:	f800283a 	ret

080261bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80261bc:	defffe04 	addi	sp,sp,-8
 80261c0:	dfc00115 	stw	ra,4(sp)
 80261c4:	df000015 	stw	fp,0(sp)
 80261c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80261cc:	d0a00917 	ldw	r2,-32732(gp)
 80261d0:	10000326 	beq	r2,zero,80261e0 <alt_get_errno+0x24>
 80261d4:	d0a00917 	ldw	r2,-32732(gp)
 80261d8:	103ee83a 	callr	r2
 80261dc:	00000106 	br	80261e4 <alt_get_errno+0x28>
 80261e0:	d0a6c104 	addi	r2,gp,-25852
}
 80261e4:	e037883a 	mov	sp,fp
 80261e8:	dfc00117 	ldw	ra,4(sp)
 80261ec:	df000017 	ldw	fp,0(sp)
 80261f0:	dec00204 	addi	sp,sp,8
 80261f4:	f800283a 	ret

080261f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80261f8:	defffa04 	addi	sp,sp,-24
 80261fc:	dfc00515 	stw	ra,20(sp)
 8026200:	df000415 	stw	fp,16(sp)
 8026204:	df000404 	addi	fp,sp,16
 8026208:	e13ffe15 	stw	r4,-8(fp)
 802620c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8026210:	e0bffe17 	ldw	r2,-8(fp)
 8026214:	10000326 	beq	r2,zero,8026224 <alt_dev_llist_insert+0x2c>
 8026218:	e0bffe17 	ldw	r2,-8(fp)
 802621c:	10800217 	ldw	r2,8(r2)
 8026220:	1000061e 	bne	r2,zero,802623c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8026224:	80261bc0 	call	80261bc <alt_get_errno>
 8026228:	1007883a 	mov	r3,r2
 802622c:	00800584 	movi	r2,22
 8026230:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8026234:	00bffa84 	movi	r2,-22
 8026238:	00001306 	br	8026288 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 802623c:	e0bffe17 	ldw	r2,-8(fp)
 8026240:	e0ffff17 	ldw	r3,-4(fp)
 8026244:	e0fffc15 	stw	r3,-16(fp)
 8026248:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 802624c:	e0bffd17 	ldw	r2,-12(fp)
 8026250:	e0fffc17 	ldw	r3,-16(fp)
 8026254:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8026258:	e0bffc17 	ldw	r2,-16(fp)
 802625c:	10c00017 	ldw	r3,0(r2)
 8026260:	e0bffd17 	ldw	r2,-12(fp)
 8026264:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8026268:	e0bffc17 	ldw	r2,-16(fp)
 802626c:	10800017 	ldw	r2,0(r2)
 8026270:	e0fffd17 	ldw	r3,-12(fp)
 8026274:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8026278:	e0bffc17 	ldw	r2,-16(fp)
 802627c:	e0fffd17 	ldw	r3,-12(fp)
 8026280:	10c00015 	stw	r3,0(r2)

  return 0;  
 8026284:	0005883a 	mov	r2,zero
}
 8026288:	e037883a 	mov	sp,fp
 802628c:	dfc00117 	ldw	ra,4(sp)
 8026290:	df000017 	ldw	fp,0(sp)
 8026294:	dec00204 	addi	sp,sp,8
 8026298:	f800283a 	ret

0802629c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 802629c:	defffd04 	addi	sp,sp,-12
 80262a0:	dfc00215 	stw	ra,8(sp)
 80262a4:	df000115 	stw	fp,4(sp)
 80262a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80262ac:	008200b4 	movhi	r2,2050
 80262b0:	109c9404 	addi	r2,r2,29264
 80262b4:	e0bfff15 	stw	r2,-4(fp)
 80262b8:	00000606 	br	80262d4 <_do_ctors+0x38>
        (*ctor) (); 
 80262bc:	e0bfff17 	ldw	r2,-4(fp)
 80262c0:	10800017 	ldw	r2,0(r2)
 80262c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80262c8:	e0bfff17 	ldw	r2,-4(fp)
 80262cc:	10bfff04 	addi	r2,r2,-4
 80262d0:	e0bfff15 	stw	r2,-4(fp)
 80262d4:	e0ffff17 	ldw	r3,-4(fp)
 80262d8:	008200b4 	movhi	r2,2050
 80262dc:	109c9504 	addi	r2,r2,29268
 80262e0:	18bff62e 	bgeu	r3,r2,80262bc <__alt_data_end+0xfffe6ebc>
        (*ctor) (); 
}
 80262e4:	0001883a 	nop
 80262e8:	e037883a 	mov	sp,fp
 80262ec:	dfc00117 	ldw	ra,4(sp)
 80262f0:	df000017 	ldw	fp,0(sp)
 80262f4:	dec00204 	addi	sp,sp,8
 80262f8:	f800283a 	ret

080262fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80262fc:	defffd04 	addi	sp,sp,-12
 8026300:	dfc00215 	stw	ra,8(sp)
 8026304:	df000115 	stw	fp,4(sp)
 8026308:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 802630c:	008200b4 	movhi	r2,2050
 8026310:	109c9404 	addi	r2,r2,29264
 8026314:	e0bfff15 	stw	r2,-4(fp)
 8026318:	00000606 	br	8026334 <_do_dtors+0x38>
        (*dtor) (); 
 802631c:	e0bfff17 	ldw	r2,-4(fp)
 8026320:	10800017 	ldw	r2,0(r2)
 8026324:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8026328:	e0bfff17 	ldw	r2,-4(fp)
 802632c:	10bfff04 	addi	r2,r2,-4
 8026330:	e0bfff15 	stw	r2,-4(fp)
 8026334:	e0ffff17 	ldw	r3,-4(fp)
 8026338:	008200b4 	movhi	r2,2050
 802633c:	109c9504 	addi	r2,r2,29268
 8026340:	18bff62e 	bgeu	r3,r2,802631c <__alt_data_end+0xfffe6f1c>
        (*dtor) (); 
}
 8026344:	0001883a 	nop
 8026348:	e037883a 	mov	sp,fp
 802634c:	dfc00117 	ldw	ra,4(sp)
 8026350:	df000017 	ldw	fp,0(sp)
 8026354:	dec00204 	addi	sp,sp,8
 8026358:	f800283a 	ret

0802635c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 802635c:	defffa04 	addi	sp,sp,-24
 8026360:	dfc00515 	stw	ra,20(sp)
 8026364:	df000415 	stw	fp,16(sp)
 8026368:	df000404 	addi	fp,sp,16
 802636c:	e13ffe15 	stw	r4,-8(fp)
 8026370:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8026374:	e0bfff17 	ldw	r2,-4(fp)
 8026378:	10800017 	ldw	r2,0(r2)
 802637c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8026380:	e13ffe17 	ldw	r4,-8(fp)
 8026384:	8020bd00 	call	8020bd0 <strlen>
 8026388:	10800044 	addi	r2,r2,1
 802638c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8026390:	00000d06 	br	80263c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8026394:	e0bffc17 	ldw	r2,-16(fp)
 8026398:	10800217 	ldw	r2,8(r2)
 802639c:	e0fffd17 	ldw	r3,-12(fp)
 80263a0:	180d883a 	mov	r6,r3
 80263a4:	e17ffe17 	ldw	r5,-8(fp)
 80263a8:	1009883a 	mov	r4,r2
 80263ac:	8026f0c0 	call	8026f0c <memcmp>
 80263b0:	1000021e 	bne	r2,zero,80263bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80263b4:	e0bffc17 	ldw	r2,-16(fp)
 80263b8:	00000706 	br	80263d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80263bc:	e0bffc17 	ldw	r2,-16(fp)
 80263c0:	10800017 	ldw	r2,0(r2)
 80263c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80263c8:	e0fffc17 	ldw	r3,-16(fp)
 80263cc:	e0bfff17 	ldw	r2,-4(fp)
 80263d0:	18bff01e 	bne	r3,r2,8026394 <__alt_data_end+0xfffe6f94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80263d4:	0005883a 	mov	r2,zero
}
 80263d8:	e037883a 	mov	sp,fp
 80263dc:	dfc00117 	ldw	ra,4(sp)
 80263e0:	df000017 	ldw	fp,0(sp)
 80263e4:	dec00204 	addi	sp,sp,8
 80263e8:	f800283a 	ret

080263ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80263ec:	deffff04 	addi	sp,sp,-4
 80263f0:	df000015 	stw	fp,0(sp)
 80263f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80263f8:	0001883a 	nop
 80263fc:	e037883a 	mov	sp,fp
 8026400:	df000017 	ldw	fp,0(sp)
 8026404:	dec00104 	addi	sp,sp,4
 8026408:	f800283a 	ret

0802640c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 802640c:	defff904 	addi	sp,sp,-28
 8026410:	dfc00615 	stw	ra,24(sp)
 8026414:	df000515 	stw	fp,20(sp)
 8026418:	df000504 	addi	fp,sp,20
 802641c:	e13ffc15 	stw	r4,-16(fp)
 8026420:	e17ffd15 	stw	r5,-12(fp)
 8026424:	e1bffe15 	stw	r6,-8(fp)
 8026428:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 802642c:	e0800217 	ldw	r2,8(fp)
 8026430:	d8800015 	stw	r2,0(sp)
 8026434:	e1ffff17 	ldw	r7,-4(fp)
 8026438:	e1bffe17 	ldw	r6,-8(fp)
 802643c:	e17ffd17 	ldw	r5,-12(fp)
 8026440:	e13ffc17 	ldw	r4,-16(fp)
 8026444:	80265bc0 	call	80265bc <alt_iic_isr_register>
}  
 8026448:	e037883a 	mov	sp,fp
 802644c:	dfc00117 	ldw	ra,4(sp)
 8026450:	df000017 	ldw	fp,0(sp)
 8026454:	dec00204 	addi	sp,sp,8
 8026458:	f800283a 	ret

0802645c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 802645c:	defff904 	addi	sp,sp,-28
 8026460:	df000615 	stw	fp,24(sp)
 8026464:	df000604 	addi	fp,sp,24
 8026468:	e13ffe15 	stw	r4,-8(fp)
 802646c:	e17fff15 	stw	r5,-4(fp)
 8026470:	e0bfff17 	ldw	r2,-4(fp)
 8026474:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026478:	0005303a 	rdctl	r2,status
 802647c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026480:	e0fffb17 	ldw	r3,-20(fp)
 8026484:	00bfff84 	movi	r2,-2
 8026488:	1884703a 	and	r2,r3,r2
 802648c:	1001703a 	wrctl	status,r2
  
  return context;
 8026490:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8026494:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8026498:	00c00044 	movi	r3,1
 802649c:	e0bffa17 	ldw	r2,-24(fp)
 80264a0:	1884983a 	sll	r2,r3,r2
 80264a4:	1007883a 	mov	r3,r2
 80264a8:	d0a6c517 	ldw	r2,-25836(gp)
 80264ac:	1884b03a 	or	r2,r3,r2
 80264b0:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80264b4:	d0a6c517 	ldw	r2,-25836(gp)
 80264b8:	100170fa 	wrctl	ienable,r2
 80264bc:	e0bffc17 	ldw	r2,-16(fp)
 80264c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80264c4:	e0bffd17 	ldw	r2,-12(fp)
 80264c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80264cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80264d0:	0001883a 	nop
}
 80264d4:	e037883a 	mov	sp,fp
 80264d8:	df000017 	ldw	fp,0(sp)
 80264dc:	dec00104 	addi	sp,sp,4
 80264e0:	f800283a 	ret

080264e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80264e4:	defff904 	addi	sp,sp,-28
 80264e8:	df000615 	stw	fp,24(sp)
 80264ec:	df000604 	addi	fp,sp,24
 80264f0:	e13ffe15 	stw	r4,-8(fp)
 80264f4:	e17fff15 	stw	r5,-4(fp)
 80264f8:	e0bfff17 	ldw	r2,-4(fp)
 80264fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026500:	0005303a 	rdctl	r2,status
 8026504:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026508:	e0fffb17 	ldw	r3,-20(fp)
 802650c:	00bfff84 	movi	r2,-2
 8026510:	1884703a 	and	r2,r3,r2
 8026514:	1001703a 	wrctl	status,r2
  
  return context;
 8026518:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 802651c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8026520:	00c00044 	movi	r3,1
 8026524:	e0bffa17 	ldw	r2,-24(fp)
 8026528:	1884983a 	sll	r2,r3,r2
 802652c:	0084303a 	nor	r2,zero,r2
 8026530:	1007883a 	mov	r3,r2
 8026534:	d0a6c517 	ldw	r2,-25836(gp)
 8026538:	1884703a 	and	r2,r3,r2
 802653c:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8026540:	d0a6c517 	ldw	r2,-25836(gp)
 8026544:	100170fa 	wrctl	ienable,r2
 8026548:	e0bffc17 	ldw	r2,-16(fp)
 802654c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8026550:	e0bffd17 	ldw	r2,-12(fp)
 8026554:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8026558:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 802655c:	0001883a 	nop
}
 8026560:	e037883a 	mov	sp,fp
 8026564:	df000017 	ldw	fp,0(sp)
 8026568:	dec00104 	addi	sp,sp,4
 802656c:	f800283a 	ret

08026570 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8026570:	defffc04 	addi	sp,sp,-16
 8026574:	df000315 	stw	fp,12(sp)
 8026578:	df000304 	addi	fp,sp,12
 802657c:	e13ffe15 	stw	r4,-8(fp)
 8026580:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8026584:	000530fa 	rdctl	r2,ienable
 8026588:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 802658c:	00c00044 	movi	r3,1
 8026590:	e0bfff17 	ldw	r2,-4(fp)
 8026594:	1884983a 	sll	r2,r3,r2
 8026598:	1007883a 	mov	r3,r2
 802659c:	e0bffd17 	ldw	r2,-12(fp)
 80265a0:	1884703a 	and	r2,r3,r2
 80265a4:	1004c03a 	cmpne	r2,r2,zero
 80265a8:	10803fcc 	andi	r2,r2,255
}
 80265ac:	e037883a 	mov	sp,fp
 80265b0:	df000017 	ldw	fp,0(sp)
 80265b4:	dec00104 	addi	sp,sp,4
 80265b8:	f800283a 	ret

080265bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80265bc:	defff504 	addi	sp,sp,-44
 80265c0:	dfc00a15 	stw	ra,40(sp)
 80265c4:	df000915 	stw	fp,36(sp)
 80265c8:	df000904 	addi	fp,sp,36
 80265cc:	e13ffc15 	stw	r4,-16(fp)
 80265d0:	e17ffd15 	stw	r5,-12(fp)
 80265d4:	e1bffe15 	stw	r6,-8(fp)
 80265d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80265dc:	00bffa84 	movi	r2,-22
 80265e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80265e4:	e0bffd17 	ldw	r2,-12(fp)
 80265e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80265ec:	e0bff817 	ldw	r2,-32(fp)
 80265f0:	10800808 	cmpgei	r2,r2,32
 80265f4:	1000271e 	bne	r2,zero,8026694 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80265f8:	0005303a 	rdctl	r2,status
 80265fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026600:	e0fffb17 	ldw	r3,-20(fp)
 8026604:	00bfff84 	movi	r2,-2
 8026608:	1884703a 	and	r2,r3,r2
 802660c:	1001703a 	wrctl	status,r2
  
  return context;
 8026610:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8026614:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8026618:	008200f4 	movhi	r2,2051
 802661c:	10aa4004 	addi	r2,r2,-22272
 8026620:	e0fff817 	ldw	r3,-32(fp)
 8026624:	180690fa 	slli	r3,r3,3
 8026628:	10c5883a 	add	r2,r2,r3
 802662c:	e0fffe17 	ldw	r3,-8(fp)
 8026630:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8026634:	008200f4 	movhi	r2,2051
 8026638:	10aa4004 	addi	r2,r2,-22272
 802663c:	e0fff817 	ldw	r3,-32(fp)
 8026640:	180690fa 	slli	r3,r3,3
 8026644:	10c5883a 	add	r2,r2,r3
 8026648:	10800104 	addi	r2,r2,4
 802664c:	e0ffff17 	ldw	r3,-4(fp)
 8026650:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8026654:	e0bffe17 	ldw	r2,-8(fp)
 8026658:	10000526 	beq	r2,zero,8026670 <alt_iic_isr_register+0xb4>
 802665c:	e0bff817 	ldw	r2,-32(fp)
 8026660:	100b883a 	mov	r5,r2
 8026664:	e13ffc17 	ldw	r4,-16(fp)
 8026668:	802645c0 	call	802645c <alt_ic_irq_enable>
 802666c:	00000406 	br	8026680 <alt_iic_isr_register+0xc4>
 8026670:	e0bff817 	ldw	r2,-32(fp)
 8026674:	100b883a 	mov	r5,r2
 8026678:	e13ffc17 	ldw	r4,-16(fp)
 802667c:	80264e40 	call	80264e4 <alt_ic_irq_disable>
 8026680:	e0bff715 	stw	r2,-36(fp)
 8026684:	e0bffa17 	ldw	r2,-24(fp)
 8026688:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802668c:	e0bff917 	ldw	r2,-28(fp)
 8026690:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8026694:	e0bff717 	ldw	r2,-36(fp)
}
 8026698:	e037883a 	mov	sp,fp
 802669c:	dfc00117 	ldw	ra,4(sp)
 80266a0:	df000017 	ldw	fp,0(sp)
 80266a4:	dec00204 	addi	sp,sp,8
 80266a8:	f800283a 	ret

080266ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80266ac:	defff804 	addi	sp,sp,-32
 80266b0:	dfc00715 	stw	ra,28(sp)
 80266b4:	df000615 	stw	fp,24(sp)
 80266b8:	dc000515 	stw	r16,20(sp)
 80266bc:	df000604 	addi	fp,sp,24
 80266c0:	e13ffb15 	stw	r4,-20(fp)
 80266c4:	e17ffc15 	stw	r5,-16(fp)
 80266c8:	e1bffd15 	stw	r6,-12(fp)
 80266cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80266d0:	e1bffe17 	ldw	r6,-8(fp)
 80266d4:	e17ffd17 	ldw	r5,-12(fp)
 80266d8:	e13ffc17 	ldw	r4,-16(fp)
 80266dc:	80269340 	call	8026934 <open>
 80266e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80266e4:	e0bffa17 	ldw	r2,-24(fp)
 80266e8:	10002216 	blt	r2,zero,8026774 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80266ec:	040200b4 	movhi	r16,2050
 80266f0:	841ee004 	addi	r16,r16,31616
 80266f4:	e0bffa17 	ldw	r2,-24(fp)
 80266f8:	01400304 	movi	r5,12
 80266fc:	1009883a 	mov	r4,r2
 8026700:	8020ad40 	call	8020ad4 <__mulsi3>
 8026704:	8085883a 	add	r2,r16,r2
 8026708:	10c00017 	ldw	r3,0(r2)
 802670c:	e0bffb17 	ldw	r2,-20(fp)
 8026710:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8026714:	040200b4 	movhi	r16,2050
 8026718:	841ee004 	addi	r16,r16,31616
 802671c:	e0bffa17 	ldw	r2,-24(fp)
 8026720:	01400304 	movi	r5,12
 8026724:	1009883a 	mov	r4,r2
 8026728:	8020ad40 	call	8020ad4 <__mulsi3>
 802672c:	8085883a 	add	r2,r16,r2
 8026730:	10800104 	addi	r2,r2,4
 8026734:	10c00017 	ldw	r3,0(r2)
 8026738:	e0bffb17 	ldw	r2,-20(fp)
 802673c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8026740:	040200b4 	movhi	r16,2050
 8026744:	841ee004 	addi	r16,r16,31616
 8026748:	e0bffa17 	ldw	r2,-24(fp)
 802674c:	01400304 	movi	r5,12
 8026750:	1009883a 	mov	r4,r2
 8026754:	8020ad40 	call	8020ad4 <__mulsi3>
 8026758:	8085883a 	add	r2,r16,r2
 802675c:	10800204 	addi	r2,r2,8
 8026760:	10c00017 	ldw	r3,0(r2)
 8026764:	e0bffb17 	ldw	r2,-20(fp)
 8026768:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 802676c:	e13ffa17 	ldw	r4,-24(fp)
 8026770:	80240040 	call	8024004 <alt_release_fd>
  }
} 
 8026774:	0001883a 	nop
 8026778:	e6ffff04 	addi	sp,fp,-4
 802677c:	dfc00217 	ldw	ra,8(sp)
 8026780:	df000117 	ldw	fp,4(sp)
 8026784:	dc000017 	ldw	r16,0(sp)
 8026788:	dec00304 	addi	sp,sp,12
 802678c:	f800283a 	ret

08026790 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8026790:	defffb04 	addi	sp,sp,-20
 8026794:	dfc00415 	stw	ra,16(sp)
 8026798:	df000315 	stw	fp,12(sp)
 802679c:	df000304 	addi	fp,sp,12
 80267a0:	e13ffd15 	stw	r4,-12(fp)
 80267a4:	e17ffe15 	stw	r5,-8(fp)
 80267a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80267ac:	01c07fc4 	movi	r7,511
 80267b0:	01800044 	movi	r6,1
 80267b4:	e17ffd17 	ldw	r5,-12(fp)
 80267b8:	010200b4 	movhi	r4,2050
 80267bc:	211ee304 	addi	r4,r4,31628
 80267c0:	80266ac0 	call	80266ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80267c4:	01c07fc4 	movi	r7,511
 80267c8:	000d883a 	mov	r6,zero
 80267cc:	e17ffe17 	ldw	r5,-8(fp)
 80267d0:	010200b4 	movhi	r4,2050
 80267d4:	211ee004 	addi	r4,r4,31616
 80267d8:	80266ac0 	call	80266ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80267dc:	01c07fc4 	movi	r7,511
 80267e0:	01800044 	movi	r6,1
 80267e4:	e17fff17 	ldw	r5,-4(fp)
 80267e8:	010200b4 	movhi	r4,2050
 80267ec:	211ee604 	addi	r4,r4,31640
 80267f0:	80266ac0 	call	80266ac <alt_open_fd>
}  
 80267f4:	0001883a 	nop
 80267f8:	e037883a 	mov	sp,fp
 80267fc:	dfc00117 	ldw	ra,4(sp)
 8026800:	df000017 	ldw	fp,0(sp)
 8026804:	dec00204 	addi	sp,sp,8
 8026808:	f800283a 	ret

0802680c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802680c:	defffe04 	addi	sp,sp,-8
 8026810:	dfc00115 	stw	ra,4(sp)
 8026814:	df000015 	stw	fp,0(sp)
 8026818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802681c:	d0a00917 	ldw	r2,-32732(gp)
 8026820:	10000326 	beq	r2,zero,8026830 <alt_get_errno+0x24>
 8026824:	d0a00917 	ldw	r2,-32732(gp)
 8026828:	103ee83a 	callr	r2
 802682c:	00000106 	br	8026834 <alt_get_errno+0x28>
 8026830:	d0a6c104 	addi	r2,gp,-25852
}
 8026834:	e037883a 	mov	sp,fp
 8026838:	dfc00117 	ldw	ra,4(sp)
 802683c:	df000017 	ldw	fp,0(sp)
 8026840:	dec00204 	addi	sp,sp,8
 8026844:	f800283a 	ret

08026848 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8026848:	defffb04 	addi	sp,sp,-20
 802684c:	dfc00415 	stw	ra,16(sp)
 8026850:	df000315 	stw	fp,12(sp)
 8026854:	dc000215 	stw	r16,8(sp)
 8026858:	df000304 	addi	fp,sp,12
 802685c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8026860:	e0bffe17 	ldw	r2,-8(fp)
 8026864:	10800217 	ldw	r2,8(r2)
 8026868:	10d00034 	orhi	r3,r2,16384
 802686c:	e0bffe17 	ldw	r2,-8(fp)
 8026870:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8026874:	e03ffd15 	stw	zero,-12(fp)
 8026878:	00002306 	br	8026908 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 802687c:	040200b4 	movhi	r16,2050
 8026880:	841ee004 	addi	r16,r16,31616
 8026884:	e0bffd17 	ldw	r2,-12(fp)
 8026888:	01400304 	movi	r5,12
 802688c:	1009883a 	mov	r4,r2
 8026890:	8020ad40 	call	8020ad4 <__mulsi3>
 8026894:	8085883a 	add	r2,r16,r2
 8026898:	10c00017 	ldw	r3,0(r2)
 802689c:	e0bffe17 	ldw	r2,-8(fp)
 80268a0:	10800017 	ldw	r2,0(r2)
 80268a4:	1880151e 	bne	r3,r2,80268fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80268a8:	040200b4 	movhi	r16,2050
 80268ac:	841ee004 	addi	r16,r16,31616
 80268b0:	e0bffd17 	ldw	r2,-12(fp)
 80268b4:	01400304 	movi	r5,12
 80268b8:	1009883a 	mov	r4,r2
 80268bc:	8020ad40 	call	8020ad4 <__mulsi3>
 80268c0:	8085883a 	add	r2,r16,r2
 80268c4:	10800204 	addi	r2,r2,8
 80268c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80268cc:	10000b0e 	bge	r2,zero,80268fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80268d0:	01400304 	movi	r5,12
 80268d4:	e13ffd17 	ldw	r4,-12(fp)
 80268d8:	8020ad40 	call	8020ad4 <__mulsi3>
 80268dc:	1007883a 	mov	r3,r2
 80268e0:	008200b4 	movhi	r2,2050
 80268e4:	109ee004 	addi	r2,r2,31616
 80268e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80268ec:	e0bffe17 	ldw	r2,-8(fp)
 80268f0:	18800226 	beq	r3,r2,80268fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80268f4:	00bffcc4 	movi	r2,-13
 80268f8:	00000806 	br	802691c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80268fc:	e0bffd17 	ldw	r2,-12(fp)
 8026900:	10800044 	addi	r2,r2,1
 8026904:	e0bffd15 	stw	r2,-12(fp)
 8026908:	d0a00817 	ldw	r2,-32736(gp)
 802690c:	1007883a 	mov	r3,r2
 8026910:	e0bffd17 	ldw	r2,-12(fp)
 8026914:	18bfd92e 	bgeu	r3,r2,802687c <__alt_data_end+0xfffe747c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8026918:	0005883a 	mov	r2,zero
}
 802691c:	e6ffff04 	addi	sp,fp,-4
 8026920:	dfc00217 	ldw	ra,8(sp)
 8026924:	df000117 	ldw	fp,4(sp)
 8026928:	dc000017 	ldw	r16,0(sp)
 802692c:	dec00304 	addi	sp,sp,12
 8026930:	f800283a 	ret

08026934 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8026934:	defff604 	addi	sp,sp,-40
 8026938:	dfc00915 	stw	ra,36(sp)
 802693c:	df000815 	stw	fp,32(sp)
 8026940:	df000804 	addi	fp,sp,32
 8026944:	e13ffd15 	stw	r4,-12(fp)
 8026948:	e17ffe15 	stw	r5,-8(fp)
 802694c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8026950:	00bfffc4 	movi	r2,-1
 8026954:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8026958:	00bffb44 	movi	r2,-19
 802695c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8026960:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8026964:	d1600604 	addi	r5,gp,-32744
 8026968:	e13ffd17 	ldw	r4,-12(fp)
 802696c:	802635c0 	call	802635c <alt_find_dev>
 8026970:	e0bff815 	stw	r2,-32(fp)
 8026974:	e0bff817 	ldw	r2,-32(fp)
 8026978:	1000051e 	bne	r2,zero,8026990 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 802697c:	e13ffd17 	ldw	r4,-12(fp)
 8026980:	8026c580 	call	8026c58 <alt_find_file>
 8026984:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8026988:	00800044 	movi	r2,1
 802698c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8026990:	e0bff817 	ldw	r2,-32(fp)
 8026994:	10002b26 	beq	r2,zero,8026a44 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8026998:	e13ff817 	ldw	r4,-32(fp)
 802699c:	8026d600 	call	8026d60 <alt_get_fd>
 80269a0:	e0bff915 	stw	r2,-28(fp)
 80269a4:	e0bff917 	ldw	r2,-28(fp)
 80269a8:	1000030e 	bge	r2,zero,80269b8 <open+0x84>
    {
      status = index;
 80269ac:	e0bff917 	ldw	r2,-28(fp)
 80269b0:	e0bffa15 	stw	r2,-24(fp)
 80269b4:	00002506 	br	8026a4c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80269b8:	01400304 	movi	r5,12
 80269bc:	e13ff917 	ldw	r4,-28(fp)
 80269c0:	8020ad40 	call	8020ad4 <__mulsi3>
 80269c4:	1007883a 	mov	r3,r2
 80269c8:	008200b4 	movhi	r2,2050
 80269cc:	109ee004 	addi	r2,r2,31616
 80269d0:	1885883a 	add	r2,r3,r2
 80269d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80269d8:	e0fffe17 	ldw	r3,-8(fp)
 80269dc:	00900034 	movhi	r2,16384
 80269e0:	10bfffc4 	addi	r2,r2,-1
 80269e4:	1886703a 	and	r3,r3,r2
 80269e8:	e0bffc17 	ldw	r2,-16(fp)
 80269ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80269f0:	e0bffb17 	ldw	r2,-20(fp)
 80269f4:	1000051e 	bne	r2,zero,8026a0c <open+0xd8>
 80269f8:	e13ffc17 	ldw	r4,-16(fp)
 80269fc:	80268480 	call	8026848 <alt_file_locked>
 8026a00:	e0bffa15 	stw	r2,-24(fp)
 8026a04:	e0bffa17 	ldw	r2,-24(fp)
 8026a08:	10001016 	blt	r2,zero,8026a4c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8026a0c:	e0bff817 	ldw	r2,-32(fp)
 8026a10:	10800317 	ldw	r2,12(r2)
 8026a14:	10000826 	beq	r2,zero,8026a38 <open+0x104>
 8026a18:	e0bff817 	ldw	r2,-32(fp)
 8026a1c:	10800317 	ldw	r2,12(r2)
 8026a20:	e1ffff17 	ldw	r7,-4(fp)
 8026a24:	e1bffe17 	ldw	r6,-8(fp)
 8026a28:	e17ffd17 	ldw	r5,-12(fp)
 8026a2c:	e13ffc17 	ldw	r4,-16(fp)
 8026a30:	103ee83a 	callr	r2
 8026a34:	00000106 	br	8026a3c <open+0x108>
 8026a38:	0005883a 	mov	r2,zero
 8026a3c:	e0bffa15 	stw	r2,-24(fp)
 8026a40:	00000206 	br	8026a4c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8026a44:	00bffb44 	movi	r2,-19
 8026a48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8026a4c:	e0bffa17 	ldw	r2,-24(fp)
 8026a50:	1000090e 	bge	r2,zero,8026a78 <open+0x144>
  {
    alt_release_fd (index);  
 8026a54:	e13ff917 	ldw	r4,-28(fp)
 8026a58:	80240040 	call	8024004 <alt_release_fd>
    ALT_ERRNO = -status;
 8026a5c:	802680c0 	call	802680c <alt_get_errno>
 8026a60:	1007883a 	mov	r3,r2
 8026a64:	e0bffa17 	ldw	r2,-24(fp)
 8026a68:	0085c83a 	sub	r2,zero,r2
 8026a6c:	18800015 	stw	r2,0(r3)
    return -1;
 8026a70:	00bfffc4 	movi	r2,-1
 8026a74:	00000106 	br	8026a7c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8026a78:	e0bff917 	ldw	r2,-28(fp)
}
 8026a7c:	e037883a 	mov	sp,fp
 8026a80:	dfc00117 	ldw	ra,4(sp)
 8026a84:	df000017 	ldw	fp,0(sp)
 8026a88:	dec00204 	addi	sp,sp,8
 8026a8c:	f800283a 	ret

08026a90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8026a90:	defffa04 	addi	sp,sp,-24
 8026a94:	df000515 	stw	fp,20(sp)
 8026a98:	df000504 	addi	fp,sp,20
 8026a9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026aa0:	0005303a 	rdctl	r2,status
 8026aa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026aa8:	e0fffc17 	ldw	r3,-16(fp)
 8026aac:	00bfff84 	movi	r2,-2
 8026ab0:	1884703a 	and	r2,r3,r2
 8026ab4:	1001703a 	wrctl	status,r2
  
  return context;
 8026ab8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8026abc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8026ac0:	e0bfff17 	ldw	r2,-4(fp)
 8026ac4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8026ac8:	e0bffd17 	ldw	r2,-12(fp)
 8026acc:	10800017 	ldw	r2,0(r2)
 8026ad0:	e0fffd17 	ldw	r3,-12(fp)
 8026ad4:	18c00117 	ldw	r3,4(r3)
 8026ad8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8026adc:	e0bffd17 	ldw	r2,-12(fp)
 8026ae0:	10800117 	ldw	r2,4(r2)
 8026ae4:	e0fffd17 	ldw	r3,-12(fp)
 8026ae8:	18c00017 	ldw	r3,0(r3)
 8026aec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8026af0:	e0bffd17 	ldw	r2,-12(fp)
 8026af4:	e0fffd17 	ldw	r3,-12(fp)
 8026af8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8026afc:	e0bffd17 	ldw	r2,-12(fp)
 8026b00:	e0fffd17 	ldw	r3,-12(fp)
 8026b04:	10c00015 	stw	r3,0(r2)
 8026b08:	e0bffb17 	ldw	r2,-20(fp)
 8026b0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8026b10:	e0bffe17 	ldw	r2,-8(fp)
 8026b14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8026b18:	0001883a 	nop
 8026b1c:	e037883a 	mov	sp,fp
 8026b20:	df000017 	ldw	fp,0(sp)
 8026b24:	dec00104 	addi	sp,sp,4
 8026b28:	f800283a 	ret

08026b2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8026b2c:	defffb04 	addi	sp,sp,-20
 8026b30:	dfc00415 	stw	ra,16(sp)
 8026b34:	df000315 	stw	fp,12(sp)
 8026b38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8026b3c:	d0a00c17 	ldw	r2,-32720(gp)
 8026b40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8026b44:	d0a6c717 	ldw	r2,-25828(gp)
 8026b48:	10800044 	addi	r2,r2,1
 8026b4c:	d0a6c715 	stw	r2,-25828(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8026b50:	00002e06 	br	8026c0c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8026b54:	e0bffd17 	ldw	r2,-12(fp)
 8026b58:	10800017 	ldw	r2,0(r2)
 8026b5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8026b60:	e0bffd17 	ldw	r2,-12(fp)
 8026b64:	10800403 	ldbu	r2,16(r2)
 8026b68:	10803fcc 	andi	r2,r2,255
 8026b6c:	10000426 	beq	r2,zero,8026b80 <alt_tick+0x54>
 8026b70:	d0a6c717 	ldw	r2,-25828(gp)
 8026b74:	1000021e 	bne	r2,zero,8026b80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8026b78:	e0bffd17 	ldw	r2,-12(fp)
 8026b7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8026b80:	e0bffd17 	ldw	r2,-12(fp)
 8026b84:	10800217 	ldw	r2,8(r2)
 8026b88:	d0e6c717 	ldw	r3,-25828(gp)
 8026b8c:	18801d36 	bltu	r3,r2,8026c04 <alt_tick+0xd8>
 8026b90:	e0bffd17 	ldw	r2,-12(fp)
 8026b94:	10800403 	ldbu	r2,16(r2)
 8026b98:	10803fcc 	andi	r2,r2,255
 8026b9c:	1000191e 	bne	r2,zero,8026c04 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8026ba0:	e0bffd17 	ldw	r2,-12(fp)
 8026ba4:	10800317 	ldw	r2,12(r2)
 8026ba8:	e0fffd17 	ldw	r3,-12(fp)
 8026bac:	18c00517 	ldw	r3,20(r3)
 8026bb0:	1809883a 	mov	r4,r3
 8026bb4:	103ee83a 	callr	r2
 8026bb8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8026bbc:	e0bfff17 	ldw	r2,-4(fp)
 8026bc0:	1000031e 	bne	r2,zero,8026bd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8026bc4:	e13ffd17 	ldw	r4,-12(fp)
 8026bc8:	8026a900 	call	8026a90 <alt_alarm_stop>
 8026bcc:	00000d06 	br	8026c04 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8026bd0:	e0bffd17 	ldw	r2,-12(fp)
 8026bd4:	10c00217 	ldw	r3,8(r2)
 8026bd8:	e0bfff17 	ldw	r2,-4(fp)
 8026bdc:	1887883a 	add	r3,r3,r2
 8026be0:	e0bffd17 	ldw	r2,-12(fp)
 8026be4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8026be8:	e0bffd17 	ldw	r2,-12(fp)
 8026bec:	10c00217 	ldw	r3,8(r2)
 8026bf0:	d0a6c717 	ldw	r2,-25828(gp)
 8026bf4:	1880032e 	bgeu	r3,r2,8026c04 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8026bf8:	e0bffd17 	ldw	r2,-12(fp)
 8026bfc:	00c00044 	movi	r3,1
 8026c00:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8026c04:	e0bffe17 	ldw	r2,-8(fp)
 8026c08:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8026c0c:	e0fffd17 	ldw	r3,-12(fp)
 8026c10:	d0a00c04 	addi	r2,gp,-32720
 8026c14:	18bfcf1e 	bne	r3,r2,8026b54 <__alt_data_end+0xfffe7754>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8026c18:	0001883a 	nop
}
 8026c1c:	0001883a 	nop
 8026c20:	e037883a 	mov	sp,fp
 8026c24:	dfc00117 	ldw	ra,4(sp)
 8026c28:	df000017 	ldw	fp,0(sp)
 8026c2c:	dec00204 	addi	sp,sp,8
 8026c30:	f800283a 	ret

08026c34 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8026c34:	deffff04 	addi	sp,sp,-4
 8026c38:	df000015 	stw	fp,0(sp)
 8026c3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8026c40:	000170fa 	wrctl	ienable,zero
}
 8026c44:	0001883a 	nop
 8026c48:	e037883a 	mov	sp,fp
 8026c4c:	df000017 	ldw	fp,0(sp)
 8026c50:	dec00104 	addi	sp,sp,4
 8026c54:	f800283a 	ret

08026c58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8026c58:	defffb04 	addi	sp,sp,-20
 8026c5c:	dfc00415 	stw	ra,16(sp)
 8026c60:	df000315 	stw	fp,12(sp)
 8026c64:	df000304 	addi	fp,sp,12
 8026c68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8026c6c:	d0a00417 	ldw	r2,-32752(gp)
 8026c70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8026c74:	00003106 	br	8026d3c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8026c78:	e0bffd17 	ldw	r2,-12(fp)
 8026c7c:	10800217 	ldw	r2,8(r2)
 8026c80:	1009883a 	mov	r4,r2
 8026c84:	8020bd00 	call	8020bd0 <strlen>
 8026c88:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8026c8c:	e0bffd17 	ldw	r2,-12(fp)
 8026c90:	10c00217 	ldw	r3,8(r2)
 8026c94:	e0bffe17 	ldw	r2,-8(fp)
 8026c98:	10bfffc4 	addi	r2,r2,-1
 8026c9c:	1885883a 	add	r2,r3,r2
 8026ca0:	10800003 	ldbu	r2,0(r2)
 8026ca4:	10803fcc 	andi	r2,r2,255
 8026ca8:	1080201c 	xori	r2,r2,128
 8026cac:	10bfe004 	addi	r2,r2,-128
 8026cb0:	10800bd8 	cmpnei	r2,r2,47
 8026cb4:	1000031e 	bne	r2,zero,8026cc4 <alt_find_file+0x6c>
    {
      len -= 1;
 8026cb8:	e0bffe17 	ldw	r2,-8(fp)
 8026cbc:	10bfffc4 	addi	r2,r2,-1
 8026cc0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8026cc4:	e0bffe17 	ldw	r2,-8(fp)
 8026cc8:	e0ffff17 	ldw	r3,-4(fp)
 8026ccc:	1885883a 	add	r2,r3,r2
 8026cd0:	10800003 	ldbu	r2,0(r2)
 8026cd4:	10803fcc 	andi	r2,r2,255
 8026cd8:	1080201c 	xori	r2,r2,128
 8026cdc:	10bfe004 	addi	r2,r2,-128
 8026ce0:	10800be0 	cmpeqi	r2,r2,47
 8026ce4:	1000081e 	bne	r2,zero,8026d08 <alt_find_file+0xb0>
 8026ce8:	e0bffe17 	ldw	r2,-8(fp)
 8026cec:	e0ffff17 	ldw	r3,-4(fp)
 8026cf0:	1885883a 	add	r2,r3,r2
 8026cf4:	10800003 	ldbu	r2,0(r2)
 8026cf8:	10803fcc 	andi	r2,r2,255
 8026cfc:	1080201c 	xori	r2,r2,128
 8026d00:	10bfe004 	addi	r2,r2,-128
 8026d04:	10000a1e 	bne	r2,zero,8026d30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8026d08:	e0bffd17 	ldw	r2,-12(fp)
 8026d0c:	10800217 	ldw	r2,8(r2)
 8026d10:	e0fffe17 	ldw	r3,-8(fp)
 8026d14:	180d883a 	mov	r6,r3
 8026d18:	e17fff17 	ldw	r5,-4(fp)
 8026d1c:	1009883a 	mov	r4,r2
 8026d20:	8026f0c0 	call	8026f0c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8026d24:	1000021e 	bne	r2,zero,8026d30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8026d28:	e0bffd17 	ldw	r2,-12(fp)
 8026d2c:	00000706 	br	8026d4c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8026d30:	e0bffd17 	ldw	r2,-12(fp)
 8026d34:	10800017 	ldw	r2,0(r2)
 8026d38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8026d3c:	e0fffd17 	ldw	r3,-12(fp)
 8026d40:	d0a00404 	addi	r2,gp,-32752
 8026d44:	18bfcc1e 	bne	r3,r2,8026c78 <__alt_data_end+0xfffe7878>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8026d48:	0005883a 	mov	r2,zero
}
 8026d4c:	e037883a 	mov	sp,fp
 8026d50:	dfc00117 	ldw	ra,4(sp)
 8026d54:	df000017 	ldw	fp,0(sp)
 8026d58:	dec00204 	addi	sp,sp,8
 8026d5c:	f800283a 	ret

08026d60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8026d60:	defffa04 	addi	sp,sp,-24
 8026d64:	dfc00515 	stw	ra,20(sp)
 8026d68:	df000415 	stw	fp,16(sp)
 8026d6c:	dc000315 	stw	r16,12(sp)
 8026d70:	df000404 	addi	fp,sp,16
 8026d74:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8026d78:	00bffa04 	movi	r2,-24
 8026d7c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8026d80:	e03ffc15 	stw	zero,-16(fp)
 8026d84:	00001d06 	br	8026dfc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8026d88:	040200b4 	movhi	r16,2050
 8026d8c:	841ee004 	addi	r16,r16,31616
 8026d90:	e0bffc17 	ldw	r2,-16(fp)
 8026d94:	01400304 	movi	r5,12
 8026d98:	1009883a 	mov	r4,r2
 8026d9c:	8020ad40 	call	8020ad4 <__mulsi3>
 8026da0:	8085883a 	add	r2,r16,r2
 8026da4:	10800017 	ldw	r2,0(r2)
 8026da8:	1000111e 	bne	r2,zero,8026df0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8026dac:	040200b4 	movhi	r16,2050
 8026db0:	841ee004 	addi	r16,r16,31616
 8026db4:	e0bffc17 	ldw	r2,-16(fp)
 8026db8:	01400304 	movi	r5,12
 8026dbc:	1009883a 	mov	r4,r2
 8026dc0:	8020ad40 	call	8020ad4 <__mulsi3>
 8026dc4:	8085883a 	add	r2,r16,r2
 8026dc8:	e0fffe17 	ldw	r3,-8(fp)
 8026dcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8026dd0:	d0e00817 	ldw	r3,-32736(gp)
 8026dd4:	e0bffc17 	ldw	r2,-16(fp)
 8026dd8:	1880020e 	bge	r3,r2,8026de4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8026ddc:	e0bffc17 	ldw	r2,-16(fp)
 8026de0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8026de4:	e0bffc17 	ldw	r2,-16(fp)
 8026de8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8026dec:	00000606 	br	8026e08 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8026df0:	e0bffc17 	ldw	r2,-16(fp)
 8026df4:	10800044 	addi	r2,r2,1
 8026df8:	e0bffc15 	stw	r2,-16(fp)
 8026dfc:	e0bffc17 	ldw	r2,-16(fp)
 8026e00:	10800810 	cmplti	r2,r2,32
 8026e04:	103fe01e 	bne	r2,zero,8026d88 <__alt_data_end+0xfffe7988>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8026e08:	e0bffd17 	ldw	r2,-12(fp)
}
 8026e0c:	e6ffff04 	addi	sp,fp,-4
 8026e10:	dfc00217 	ldw	ra,8(sp)
 8026e14:	df000117 	ldw	fp,4(sp)
 8026e18:	dc000017 	ldw	r16,0(sp)
 8026e1c:	dec00304 	addi	sp,sp,12
 8026e20:	f800283a 	ret

08026e24 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8026e24:	defffe04 	addi	sp,sp,-8
 8026e28:	df000115 	stw	fp,4(sp)
 8026e2c:	df000104 	addi	fp,sp,4
 8026e30:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8026e34:	e0bfff17 	ldw	r2,-4(fp)
 8026e38:	10bffe84 	addi	r2,r2,-6
 8026e3c:	10c00428 	cmpgeui	r3,r2,16
 8026e40:	18001a1e 	bne	r3,zero,8026eac <alt_exception_cause_generated_bad_addr+0x88>
 8026e44:	100690ba 	slli	r3,r2,2
 8026e48:	008200b4 	movhi	r2,2050
 8026e4c:	109b9704 	addi	r2,r2,28252
 8026e50:	1885883a 	add	r2,r3,r2
 8026e54:	10800017 	ldw	r2,0(r2)
 8026e58:	1000683a 	jmp	r2
 8026e5c:	08026e9c 	xori	zero,at,2490
 8026e60:	08026e9c 	xori	zero,at,2490
 8026e64:	08026eac 	andhi	zero,at,2490
 8026e68:	08026eac 	andhi	zero,at,2490
 8026e6c:	08026eac 	andhi	zero,at,2490
 8026e70:	08026e9c 	xori	zero,at,2490
 8026e74:	08026ea4 	muli	zero,at,2490
 8026e78:	08026eac 	andhi	zero,at,2490
 8026e7c:	08026e9c 	xori	zero,at,2490
 8026e80:	08026e9c 	xori	zero,at,2490
 8026e84:	08026eac 	andhi	zero,at,2490
 8026e88:	08026e9c 	xori	zero,at,2490
 8026e8c:	08026ea4 	muli	zero,at,2490
 8026e90:	08026eac 	andhi	zero,at,2490
 8026e94:	08026eac 	andhi	zero,at,2490
 8026e98:	08026e9c 	xori	zero,at,2490
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8026e9c:	00800044 	movi	r2,1
 8026ea0:	00000306 	br	8026eb0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8026ea4:	0005883a 	mov	r2,zero
 8026ea8:	00000106 	br	8026eb0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8026eac:	0005883a 	mov	r2,zero
  }
}
 8026eb0:	e037883a 	mov	sp,fp
 8026eb4:	df000017 	ldw	fp,0(sp)
 8026eb8:	dec00104 	addi	sp,sp,4
 8026ebc:	f800283a 	ret

08026ec0 <atexit>:
 8026ec0:	200b883a 	mov	r5,r4
 8026ec4:	000f883a 	mov	r7,zero
 8026ec8:	000d883a 	mov	r6,zero
 8026ecc:	0009883a 	mov	r4,zero
 8026ed0:	8026f881 	jmpi	8026f88 <__register_exitproc>

08026ed4 <exit>:
 8026ed4:	defffe04 	addi	sp,sp,-8
 8026ed8:	000b883a 	mov	r5,zero
 8026edc:	dc000015 	stw	r16,0(sp)
 8026ee0:	dfc00115 	stw	ra,4(sp)
 8026ee4:	2021883a 	mov	r16,r4
 8026ee8:	80270a00 	call	80270a0 <__call_exitprocs>
 8026eec:	008200f4 	movhi	r2,2051
 8026ef0:	10a36d04 	addi	r2,r2,-29260
 8026ef4:	11000017 	ldw	r4,0(r2)
 8026ef8:	20800f17 	ldw	r2,60(r4)
 8026efc:	10000126 	beq	r2,zero,8026f04 <exit+0x30>
 8026f00:	103ee83a 	callr	r2
 8026f04:	8009883a 	mov	r4,r16
 8026f08:	80272200 	call	8027220 <_exit>

08026f0c <memcmp>:
 8026f0c:	01c000c4 	movi	r7,3
 8026f10:	3980192e 	bgeu	r7,r6,8026f78 <memcmp+0x6c>
 8026f14:	2144b03a 	or	r2,r4,r5
 8026f18:	11c4703a 	and	r2,r2,r7
 8026f1c:	10000f26 	beq	r2,zero,8026f5c <memcmp+0x50>
 8026f20:	20800003 	ldbu	r2,0(r4)
 8026f24:	28c00003 	ldbu	r3,0(r5)
 8026f28:	10c0151e 	bne	r2,r3,8026f80 <memcmp+0x74>
 8026f2c:	31bfff84 	addi	r6,r6,-2
 8026f30:	01ffffc4 	movi	r7,-1
 8026f34:	00000406 	br	8026f48 <memcmp+0x3c>
 8026f38:	20800003 	ldbu	r2,0(r4)
 8026f3c:	28c00003 	ldbu	r3,0(r5)
 8026f40:	31bfffc4 	addi	r6,r6,-1
 8026f44:	10c00e1e 	bne	r2,r3,8026f80 <memcmp+0x74>
 8026f48:	21000044 	addi	r4,r4,1
 8026f4c:	29400044 	addi	r5,r5,1
 8026f50:	31fff91e 	bne	r6,r7,8026f38 <__alt_data_end+0xfffe7b38>
 8026f54:	0005883a 	mov	r2,zero
 8026f58:	f800283a 	ret
 8026f5c:	20c00017 	ldw	r3,0(r4)
 8026f60:	28800017 	ldw	r2,0(r5)
 8026f64:	18bfee1e 	bne	r3,r2,8026f20 <__alt_data_end+0xfffe7b20>
 8026f68:	31bfff04 	addi	r6,r6,-4
 8026f6c:	21000104 	addi	r4,r4,4
 8026f70:	29400104 	addi	r5,r5,4
 8026f74:	39bff936 	bltu	r7,r6,8026f5c <__alt_data_end+0xfffe7b5c>
 8026f78:	303fe91e 	bne	r6,zero,8026f20 <__alt_data_end+0xfffe7b20>
 8026f7c:	003ff506 	br	8026f54 <__alt_data_end+0xfffe7b54>
 8026f80:	10c5c83a 	sub	r2,r2,r3
 8026f84:	f800283a 	ret

08026f88 <__register_exitproc>:
 8026f88:	defffa04 	addi	sp,sp,-24
 8026f8c:	dc000315 	stw	r16,12(sp)
 8026f90:	040200f4 	movhi	r16,2051
 8026f94:	84236d04 	addi	r16,r16,-29260
 8026f98:	80c00017 	ldw	r3,0(r16)
 8026f9c:	dc400415 	stw	r17,16(sp)
 8026fa0:	dfc00515 	stw	ra,20(sp)
 8026fa4:	18805217 	ldw	r2,328(r3)
 8026fa8:	2023883a 	mov	r17,r4
 8026fac:	10003726 	beq	r2,zero,802708c <__register_exitproc+0x104>
 8026fb0:	10c00117 	ldw	r3,4(r2)
 8026fb4:	010007c4 	movi	r4,31
 8026fb8:	20c00e16 	blt	r4,r3,8026ff4 <__register_exitproc+0x6c>
 8026fbc:	1a000044 	addi	r8,r3,1
 8026fc0:	8800221e 	bne	r17,zero,802704c <__register_exitproc+0xc4>
 8026fc4:	18c00084 	addi	r3,r3,2
 8026fc8:	18c7883a 	add	r3,r3,r3
 8026fcc:	18c7883a 	add	r3,r3,r3
 8026fd0:	12000115 	stw	r8,4(r2)
 8026fd4:	10c7883a 	add	r3,r2,r3
 8026fd8:	19400015 	stw	r5,0(r3)
 8026fdc:	0005883a 	mov	r2,zero
 8026fe0:	dfc00517 	ldw	ra,20(sp)
 8026fe4:	dc400417 	ldw	r17,16(sp)
 8026fe8:	dc000317 	ldw	r16,12(sp)
 8026fec:	dec00604 	addi	sp,sp,24
 8026ff0:	f800283a 	ret
 8026ff4:	00800034 	movhi	r2,0
 8026ff8:	10800004 	addi	r2,r2,0
 8026ffc:	10002626 	beq	r2,zero,8027098 <__register_exitproc+0x110>
 8027000:	01006404 	movi	r4,400
 8027004:	d9400015 	stw	r5,0(sp)
 8027008:	d9800115 	stw	r6,4(sp)
 802700c:	d9c00215 	stw	r7,8(sp)
 8027010:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8027014:	d9400017 	ldw	r5,0(sp)
 8027018:	d9800117 	ldw	r6,4(sp)
 802701c:	d9c00217 	ldw	r7,8(sp)
 8027020:	10001d26 	beq	r2,zero,8027098 <__register_exitproc+0x110>
 8027024:	81000017 	ldw	r4,0(r16)
 8027028:	10000115 	stw	zero,4(r2)
 802702c:	02000044 	movi	r8,1
 8027030:	22405217 	ldw	r9,328(r4)
 8027034:	0007883a 	mov	r3,zero
 8027038:	12400015 	stw	r9,0(r2)
 802703c:	20805215 	stw	r2,328(r4)
 8027040:	10006215 	stw	zero,392(r2)
 8027044:	10006315 	stw	zero,396(r2)
 8027048:	883fde26 	beq	r17,zero,8026fc4 <__alt_data_end+0xfffe7bc4>
 802704c:	18c9883a 	add	r4,r3,r3
 8027050:	2109883a 	add	r4,r4,r4
 8027054:	1109883a 	add	r4,r2,r4
 8027058:	21802215 	stw	r6,136(r4)
 802705c:	01800044 	movi	r6,1
 8027060:	12406217 	ldw	r9,392(r2)
 8027064:	30cc983a 	sll	r6,r6,r3
 8027068:	4992b03a 	or	r9,r9,r6
 802706c:	12406215 	stw	r9,392(r2)
 8027070:	21c04215 	stw	r7,264(r4)
 8027074:	01000084 	movi	r4,2
 8027078:	893fd21e 	bne	r17,r4,8026fc4 <__alt_data_end+0xfffe7bc4>
 802707c:	11006317 	ldw	r4,396(r2)
 8027080:	218cb03a 	or	r6,r4,r6
 8027084:	11806315 	stw	r6,396(r2)
 8027088:	003fce06 	br	8026fc4 <__alt_data_end+0xfffe7bc4>
 802708c:	18805304 	addi	r2,r3,332
 8027090:	18805215 	stw	r2,328(r3)
 8027094:	003fc606 	br	8026fb0 <__alt_data_end+0xfffe7bb0>
 8027098:	00bfffc4 	movi	r2,-1
 802709c:	003fd006 	br	8026fe0 <__alt_data_end+0xfffe7be0>

080270a0 <__call_exitprocs>:
 80270a0:	defff504 	addi	sp,sp,-44
 80270a4:	df000915 	stw	fp,36(sp)
 80270a8:	dd400615 	stw	r21,24(sp)
 80270ac:	dc800315 	stw	r18,12(sp)
 80270b0:	dfc00a15 	stw	ra,40(sp)
 80270b4:	ddc00815 	stw	r23,32(sp)
 80270b8:	dd800715 	stw	r22,28(sp)
 80270bc:	dd000515 	stw	r20,20(sp)
 80270c0:	dcc00415 	stw	r19,16(sp)
 80270c4:	dc400215 	stw	r17,8(sp)
 80270c8:	dc000115 	stw	r16,4(sp)
 80270cc:	d9000015 	stw	r4,0(sp)
 80270d0:	2839883a 	mov	fp,r5
 80270d4:	04800044 	movi	r18,1
 80270d8:	057fffc4 	movi	r21,-1
 80270dc:	008200f4 	movhi	r2,2051
 80270e0:	10a36d04 	addi	r2,r2,-29260
 80270e4:	12000017 	ldw	r8,0(r2)
 80270e8:	45005217 	ldw	r20,328(r8)
 80270ec:	44c05204 	addi	r19,r8,328
 80270f0:	a0001c26 	beq	r20,zero,8027164 <__call_exitprocs+0xc4>
 80270f4:	a0800117 	ldw	r2,4(r20)
 80270f8:	15ffffc4 	addi	r23,r2,-1
 80270fc:	b8000d16 	blt	r23,zero,8027134 <__call_exitprocs+0x94>
 8027100:	14000044 	addi	r16,r2,1
 8027104:	8421883a 	add	r16,r16,r16
 8027108:	8421883a 	add	r16,r16,r16
 802710c:	84402004 	addi	r17,r16,128
 8027110:	a463883a 	add	r17,r20,r17
 8027114:	a421883a 	add	r16,r20,r16
 8027118:	e0001e26 	beq	fp,zero,8027194 <__call_exitprocs+0xf4>
 802711c:	80804017 	ldw	r2,256(r16)
 8027120:	e0801c26 	beq	fp,r2,8027194 <__call_exitprocs+0xf4>
 8027124:	bdffffc4 	addi	r23,r23,-1
 8027128:	843fff04 	addi	r16,r16,-4
 802712c:	8c7fff04 	addi	r17,r17,-4
 8027130:	bd7ff91e 	bne	r23,r21,8027118 <__alt_data_end+0xfffe7d18>
 8027134:	00800034 	movhi	r2,0
 8027138:	10800004 	addi	r2,r2,0
 802713c:	10000926 	beq	r2,zero,8027164 <__call_exitprocs+0xc4>
 8027140:	a0800117 	ldw	r2,4(r20)
 8027144:	1000301e 	bne	r2,zero,8027208 <__call_exitprocs+0x168>
 8027148:	a0800017 	ldw	r2,0(r20)
 802714c:	10003226 	beq	r2,zero,8027218 <__call_exitprocs+0x178>
 8027150:	a009883a 	mov	r4,r20
 8027154:	98800015 	stw	r2,0(r19)
 8027158:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 802715c:	9d000017 	ldw	r20,0(r19)
 8027160:	a03fe41e 	bne	r20,zero,80270f4 <__alt_data_end+0xfffe7cf4>
 8027164:	dfc00a17 	ldw	ra,40(sp)
 8027168:	df000917 	ldw	fp,36(sp)
 802716c:	ddc00817 	ldw	r23,32(sp)
 8027170:	dd800717 	ldw	r22,28(sp)
 8027174:	dd400617 	ldw	r21,24(sp)
 8027178:	dd000517 	ldw	r20,20(sp)
 802717c:	dcc00417 	ldw	r19,16(sp)
 8027180:	dc800317 	ldw	r18,12(sp)
 8027184:	dc400217 	ldw	r17,8(sp)
 8027188:	dc000117 	ldw	r16,4(sp)
 802718c:	dec00b04 	addi	sp,sp,44
 8027190:	f800283a 	ret
 8027194:	a0800117 	ldw	r2,4(r20)
 8027198:	80c00017 	ldw	r3,0(r16)
 802719c:	10bfffc4 	addi	r2,r2,-1
 80271a0:	15c01426 	beq	r2,r23,80271f4 <__call_exitprocs+0x154>
 80271a4:	80000015 	stw	zero,0(r16)
 80271a8:	183fde26 	beq	r3,zero,8027124 <__alt_data_end+0xfffe7d24>
 80271ac:	95c8983a 	sll	r4,r18,r23
 80271b0:	a0806217 	ldw	r2,392(r20)
 80271b4:	a5800117 	ldw	r22,4(r20)
 80271b8:	2084703a 	and	r2,r4,r2
 80271bc:	10000b26 	beq	r2,zero,80271ec <__call_exitprocs+0x14c>
 80271c0:	a0806317 	ldw	r2,396(r20)
 80271c4:	2088703a 	and	r4,r4,r2
 80271c8:	20000c1e 	bne	r4,zero,80271fc <__call_exitprocs+0x15c>
 80271cc:	89400017 	ldw	r5,0(r17)
 80271d0:	d9000017 	ldw	r4,0(sp)
 80271d4:	183ee83a 	callr	r3
 80271d8:	a0800117 	ldw	r2,4(r20)
 80271dc:	15bfbf1e 	bne	r2,r22,80270dc <__alt_data_end+0xfffe7cdc>
 80271e0:	98800017 	ldw	r2,0(r19)
 80271e4:	153fcf26 	beq	r2,r20,8027124 <__alt_data_end+0xfffe7d24>
 80271e8:	003fbc06 	br	80270dc <__alt_data_end+0xfffe7cdc>
 80271ec:	183ee83a 	callr	r3
 80271f0:	003ff906 	br	80271d8 <__alt_data_end+0xfffe7dd8>
 80271f4:	a5c00115 	stw	r23,4(r20)
 80271f8:	003feb06 	br	80271a8 <__alt_data_end+0xfffe7da8>
 80271fc:	89000017 	ldw	r4,0(r17)
 8027200:	183ee83a 	callr	r3
 8027204:	003ff406 	br	80271d8 <__alt_data_end+0xfffe7dd8>
 8027208:	a0800017 	ldw	r2,0(r20)
 802720c:	a027883a 	mov	r19,r20
 8027210:	1029883a 	mov	r20,r2
 8027214:	003fb606 	br	80270f0 <__alt_data_end+0xfffe7cf0>
 8027218:	0005883a 	mov	r2,zero
 802721c:	003ffb06 	br	802720c <__alt_data_end+0xfffe7e0c>

08027220 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8027220:	defffd04 	addi	sp,sp,-12
 8027224:	df000215 	stw	fp,8(sp)
 8027228:	df000204 	addi	fp,sp,8
 802722c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8027230:	0001883a 	nop
 8027234:	e0bfff17 	ldw	r2,-4(fp)
 8027238:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 802723c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8027240:	10000226 	beq	r2,zero,802724c <_exit+0x2c>
    ALT_SIM_FAIL();
 8027244:	002af070 	cmpltui	zero,zero,43969
 8027248:	00000106 	br	8027250 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 802724c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8027250:	003fff06 	br	8027250 <__alt_data_end+0xfffe7e50>
