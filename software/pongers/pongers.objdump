
pongers.elf:     file format elf32-littlenios2
pongers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08020230

Program Header:
    LOAD off    0x00001000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x08020020 align 2**12
         filesz 0x000057a8 memsz 0x000057a8 flags r-x
    LOAD off    0x000067c8 vaddr 0x080257c8 paddr 0x08027234 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008ca0 vaddr 0x08028ca0 paddr 0x08028ca0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08020020  08020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005548  08020230  08020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  08025778  08025778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  080257c8  08027234  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  08028ca0  08028ca0  00008ca0  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  00008234  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08028df4  08028df4  00008234  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  00008234  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a10  00000000  00000000  00008280  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001628e  00000000  00000000  00008c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005ef6  00000000  00000000  0001ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006849  00000000  00000000  00024e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001540  00000000  00000000  0002b660  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002751  00000000  00000000  0002cba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0002f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00033dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00033de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000369de  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  000369e1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000369ea  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000369eb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000369ec  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000369f0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000369f4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00036a03  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00036a0e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00036a19  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  00036a22  2**0
                  CONTENTS, READONLY
 30 .jdi          00003da4  00000000  00000000  00036a48  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000770d0  00000000  00000000  0003a7ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
08020230 l    d  .text	00000000 .text
08025778 l    d  .rodata	00000000 .rodata
080257c8 l    d  .rwdata	00000000 .rwdata
08028ca0 l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08028df4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pongers_bsp//obj/HAL/src/crt0.o
08020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pongers.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08020440 l     F .text	00000008 __fp_unlock
08020454 l     F .text	0000019c __sinit.part.1
080205f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
080257c8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
080230e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080231f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08023220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08023314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080233fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080234e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080236c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08027224 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08023938 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08023a74 l     F .text	00000034 alt_dev_reg
0802619c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08023d50 l     F .text	0000020c altera_avalon_jtag_uart_irq
08023f5c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080246e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08024b40 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08024ca0 l     F .text	0000003c alt_get_errno
08024cdc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08028cc8 g     O .bss	00000004 alt_instruction_exception_handler
08022eb0 g     F .text	00000054 _isatty_r
08023600 g     F .text	0000007c alt_main
080202d4 g     F .text	000000c0 _puts_r
08028cf4 g     O .bss	00000100 alt_irq
08022bd8 g     F .text	00000060 _lseek_r
08027234 g       *ABS*	00000000 __flash_rwdata_start
08028df4 g       *ABS*	00000000 __alt_heap_start
0802218c g     F .text	0000005c __sseek
080207a0 g     F .text	00000010 __sinit
080205f8 g     F .text	00000078 __sfmoreglue
080236a0 g     F .text	00000024 __malloc_unlock
08021878 g     F .text	0000015c memmove
08020788 g     F .text	00000018 _cleanup
080250c8 g     F .text	00000024 altera_nios2_gen2_irq_init
08020000 g     F .entry	0000000c __reset
08020020 g       *ABS*	00000000 __flash_exceptions_start
08022e54 g     F .text	0000005c _fstat_r
08028cac g     O .bss	00000004 errno
08022108 g     F .text	00000008 __seofread
08028cb4 g     O .bss	00000004 alt_argv
0802f1fc g       *ABS*	00000000 _gp
0802601c g     O .rwdata	00000180 alt_fd_list
080250ec g     F .text	00000090 alt_find_dev
08021730 g     F .text	00000148 memcpy
08020448 g     F .text	0000000c _cleanup_r
08024c24 g     F .text	0000007c alt_io_redirect
08025778 g       *ABS*	00000000 __DTOR_END__
08020394 g     F .text	00000014 puts
08025348 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08024154 g     F .text	0000021c altera_avalon_jtag_uart_read
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08022ffc g     F .text	00000064 .hidden __udivsi3
08023350 g     F .text	000000ac isatty
08028ca8 g     O .bss	00000004 __malloc_top_pad
080207f0 g     F .text	000004c8 __sfvwrite_r
08022060 g     F .text	00000054 _sbrk_r
08022df4 g     F .text	00000060 _read_r
0802721c g     O .rwdata	00000004 alt_max_fd
080223f8 g     F .text	000000f0 _fclose_r
08022774 g     F .text	00000030 fflush
08028ca4 g     O .bss	00000004 __malloc_max_sbrked_mem
08023524 g     F .text	000000dc lseek
080271fc g     O .rwdata	00000004 _global_impure_ptr
08021afc g     F .text	00000564 _realloc_r
08028df4 g       *ABS*	00000000 __bss_end
08024a50 g     F .text	000000f0 alt_iic_isr_register
08024fc0 g     F .text	00000108 alt_tick
080207c0 g     F .text	00000018 __fp_lock_all
08024a04 g     F .text	0000004c alt_ic_irq_enabled
08024f24 g     F .text	0000009c alt_alarm_stop
08028cbc g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
08025ff4 g     O .rwdata	00000028 alt_dev_null
080246c0 g     F .text	00000020 alt_dcache_flush_all
08027234 g       *ABS*	00000000 __ram_rwdata_end
08027214 g     O .rwdata	00000008 alt_dev_list
08023974 g     F .text	00000100 write
080257c8 g       *ABS*	00000000 __ram_rodata_end
0802325c g     F .text	000000b8 fstat
08023060 g     F .text	00000058 .hidden __umodsi3
08028df4 g       *ABS*	00000000 end
08023c90 g     F .text	000000c0 altera_avalon_jtag_uart_init
080201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08025778 g       *ABS*	00000000 __CTOR_LIST__
0803f400 g       *ABS*	00000000 __alt_stack_pointer
08024370 g     F .text	00000224 altera_avalon_jtag_uart_write
080207b0 g     F .text	00000004 __sfp_lock_acquire
0802164c g     F .text	000000e4 memchr
080228c8 g     F .text	00000310 _free_r
080255c4 g     F .text	00000180 __call_exitprocs
08027204 g     O .rwdata	00000004 __malloc_sbrk_base
08020230 g     F .text	0000003c _start
08028cc0 g     O .bss	00000004 _alt_tick_rate
08028cc4 g     O .bss	00000004 _alt_nticks
08023700 g     F .text	00000104 read
08023ae0 g     F .text	0000004c alt_sys_init
080254ac g     F .text	00000118 __register_exitproc
08023ffc g     F .text	00000068 altera_avalon_jtag_uart_close
080230b8 g     F .text	00000028 .hidden __mulsi3
080257c8 g       *ABS*	00000000 __ram_rwdata_start
08025778 g       *ABS*	00000000 __ram_rodata_start
08028ccc g     O .bss	00000028 __malloc_current_mallinfo
08023b2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08025284 g     F .text	000000c4 alt_get_fd
080223a4 g     F .text	00000054 _close_r
08025430 g     F .text	0000007c memcmp
08023bec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08028df4 g       *ABS*	00000000 __alt_stack_base
08023c3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08022250 g     F .text	00000154 __swsetup_r
08020670 g     F .text	00000118 __sfp
08025bec g     O .rwdata	00000408 __malloc_av_
080207bc g     F .text	00000004 __sinit_lock_release
080220b4 g     F .text	00000054 __sread
0802517c g     F .text	00000108 alt_find_file
0802471c g     F .text	000000a4 alt_dev_llist_insert
0802367c g     F .text	00000024 __malloc_lock
08023888 g     F .text	000000b0 sbrk
08022718 g     F .text	0000005c _fflush_r
08028ca0 g       *ABS*	00000000 __bss_start
080219d4 g     F .text	00000128 memset
0802026c g     F .text	00000068 main
08028cb8 g     O .bss	00000004 alt_envp
08028ca0 g     O .bss	00000004 __malloc_max_total_mem
08023b8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080221e8 g     F .text	00000008 __sclose
0803f400 g       *ABS*	00000000 __alt_heap_limit
080224e8 g     F .text	00000014 fclose
08020e40 g     F .text	0000080c _malloc_r
08027220 g     O .rwdata	00000004 alt_errno
08020cb8 g     F .text	000000c4 _fwalk
08022f04 g     F .text	00000084 .hidden __divsi3
080227a4 g     F .text	00000124 _malloc_trim_r
08025778 g       *ABS*	00000000 __CTOR_END__
08025778 g       *ABS*	00000000 __flash_rodata_start
08025778 g       *ABS*	00000000 __DTOR_LIST__
08023aa8 g     F .text	00000038 alt_irq_init
08023804 g     F .text	00000084 alt_release_fd
080253e4 g     F .text	00000014 atexit
080221f0 g     F .text	00000060 _write_r
08027200 g     O .rwdata	00000004 _impure_ptr
08028cb0 g     O .bss	00000004 alt_argc
080224fc g     F .text	0000021c __sflush_r
08024820 g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
080207d8 g     F .text	00000018 __fp_unlock_all
0802720c g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
080248a0 g     F .text	00000050 alt_ic_isr_register
08027234 g       *ABS*	00000000 _edata
08028df4 g       *ABS*	00000000 _end
08020230 g       *ABS*	00000000 __ram_exceptions_end
08024064 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08024978 g     F .text	0000008c alt_ic_irq_disable
08022110 g     F .text	0000007c __swrite
08027208 g     O .rwdata	00000004 __malloc_trim_threshold
080253f8 g     F .text	00000038 exit
08020d7c g     F .text	000000c4 _fwalk_reent
08022f88 g     F .text	00000074 .hidden __modsi3
0803f400 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
080207b4 g     F .text	00000004 __sfp_lock_release
08025744 g     F .text	00000034 _exit
08024594 g     F .text	0000012c alt_alarm_start
08022c38 g     F .text	000001bc __smakebuf_r
080203a8 g     F .text	00000098 strlen
08024dc8 g     F .text	0000015c open
08024880 g     F .text	00000020 alt_icache_flush_all
08027228 g     O .rwdata	00000004 alt_priority_mask
080248f0 g     F .text	00000088 alt_ic_irq_enable
0802722c g     O .rwdata	00000008 alt_alarm_list
080247c0 g     F .text	00000060 _do_ctors
0802311c g     F .text	000000d8 close
08023464 g     F .text	00000084 alt_load
080207b8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020000:	004200b4 	movhi	at,2050
    ori r1, r1, %lo(_start)
 8020004:	08408c14 	ori	at,at,560
    jmp r1
 8020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	008200f4 	movhi	r2,2051
 8020140:	10a33d04 	addi	r2,r2,-29452
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	008200f4 	movhi	r2,2051
 8020158:	10a33d04 	addi	r2,r2,-29452
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80201e4:	00bfffc4 	movi	r2,-1
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80201f0:	d0a6b317 	ldw	r2,-25908(gp)
 80201f4:	10000726 	beq	r2,zero,8020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80201f8:	d0a6b317 	ldw	r2,-25908(gp)
 80201fc:	e0fffd17 	ldw	r3,-12(fp)
 8020200:	e1bffe17 	ldw	r6,-8(fp)
 8020204:	e17fff17 	ldw	r5,-4(fp)
 8020208:	1809883a 	mov	r4,r3
 802020c:	103ee83a 	callr	r2
 8020210:	00000206 	br	802021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020218:	0005883a 	mov	r2,zero
}
 802021c:	e037883a 	mov	sp,fp
 8020220:	dfc00117 	ldw	ra,4(sp)
 8020224:	df000017 	ldw	fp,0(sp)
 8020228:	dec00204 	addi	sp,sp,8
 802022c:	f800283a 	ret

Disassembly of section .text:

08020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8020230:	06c200f4 	movhi	sp,2051
    ori sp, sp, %lo(__alt_stack_pointer)
 8020234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
 8020238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 802023c:	d6bc7f14 	ori	gp,gp,61948
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8020240:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 8020244:	10a32814 	ori	r2,r2,36000

    movhi r3, %hi(__bss_end)
 8020248:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 802024c:	18e37d14 	ori	r3,r3,36340

    beq r2, r3, 1f
 8020250:	10c00326 	beq	r2,r3,8020260 <_start+0x30>

0:
    stw zero, (r2)
 8020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 802025c:	10fffd36 	bltu	r2,r3,8020254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8020260:	80234640 	call	8023464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8020264:	80236000 	call	8023600 <alt_main>

08020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8020268:	003fff06 	br	8020268 <__alt_data_end+0xfffe0e68>

0802026c <main>:
#include <io.h>
#include <system.h>
//NEW_SDRAM_CONTROLLER_0_BASE
//ONCHIP_MEMORY2_0_BASE
int main()
{
 802026c:	defffd04 	addi	sp,sp,-12
 8020270:	dfc00215 	stw	ra,8(sp)
 8020274:	df000115 	stw	fp,4(sp)
 8020278:	df000104 	addi	fp,sp,4
  printf("Test from Nios II!\n");
 802027c:	010200b4 	movhi	r4,2050
 8020280:	2115de04 	addi	r4,r4,22392
 8020284:	80203940 	call	8020394 <puts>
  for(int i=0;i<1000;i++){
 8020288:	e03fff15 	stw	zero,-4(fp)
 802028c:	00000806 	br	80202b0 <main+0x44>
	  IOWR_16DIRECT(NEW_SDRAM_CONTROLLER_0_BASE, i, (unsigned short)0xdead);
 8020290:	e0ffff17 	ldw	r3,-4(fp)
 8020294:	00810034 	movhi	r2,1024
 8020298:	1885883a 	add	r2,r3,r2
 802029c:	00f7ab44 	movi	r3,-8531
 80202a0:	10c0002d 	sthio	r3,0(r2)
//NEW_SDRAM_CONTROLLER_0_BASE
//ONCHIP_MEMORY2_0_BASE
int main()
{
  printf("Test from Nios II!\n");
  for(int i=0;i<1000;i++){
 80202a4:	e0bfff17 	ldw	r2,-4(fp)
 80202a8:	10800044 	addi	r2,r2,1
 80202ac:	e0bfff15 	stw	r2,-4(fp)
 80202b0:	e0bfff17 	ldw	r2,-4(fp)
 80202b4:	1080fa10 	cmplti	r2,r2,1000
 80202b8:	103ff51e 	bne	r2,zero,8020290 <__alt_data_end+0xfffe0e90>
	  IOWR_16DIRECT(NEW_SDRAM_CONTROLLER_0_BASE, i, (unsigned short)0xdead);
  }

  return 0;
 80202bc:	0005883a 	mov	r2,zero
}
 80202c0:	e037883a 	mov	sp,fp
 80202c4:	dfc00117 	ldw	ra,4(sp)
 80202c8:	df000017 	ldw	fp,0(sp)
 80202cc:	dec00204 	addi	sp,sp,8
 80202d0:	f800283a 	ret

080202d4 <_puts_r>:
 80202d4:	defff604 	addi	sp,sp,-40
 80202d8:	dc000715 	stw	r16,28(sp)
 80202dc:	2021883a 	mov	r16,r4
 80202e0:	2809883a 	mov	r4,r5
 80202e4:	dc400815 	stw	r17,32(sp)
 80202e8:	dfc00915 	stw	ra,36(sp)
 80202ec:	2823883a 	mov	r17,r5
 80202f0:	80203a80 	call	80203a8 <strlen>
 80202f4:	10c00044 	addi	r3,r2,1
 80202f8:	d8800115 	stw	r2,4(sp)
 80202fc:	008200b4 	movhi	r2,2050
 8020300:	1095e304 	addi	r2,r2,22412
 8020304:	d8800215 	stw	r2,8(sp)
 8020308:	00800044 	movi	r2,1
 802030c:	d8800315 	stw	r2,12(sp)
 8020310:	00800084 	movi	r2,2
 8020314:	dc400015 	stw	r17,0(sp)
 8020318:	d8c00615 	stw	r3,24(sp)
 802031c:	dec00415 	stw	sp,16(sp)
 8020320:	d8800515 	stw	r2,20(sp)
 8020324:	80000226 	beq	r16,zero,8020330 <_puts_r+0x5c>
 8020328:	80800e17 	ldw	r2,56(r16)
 802032c:	10001426 	beq	r2,zero,8020380 <_puts_r+0xac>
 8020330:	81400217 	ldw	r5,8(r16)
 8020334:	2880030b 	ldhu	r2,12(r5)
 8020338:	10c8000c 	andi	r3,r2,8192
 802033c:	1800061e 	bne	r3,zero,8020358 <_puts_r+0x84>
 8020340:	29001917 	ldw	r4,100(r5)
 8020344:	00f7ffc4 	movi	r3,-8193
 8020348:	10880014 	ori	r2,r2,8192
 802034c:	20c6703a 	and	r3,r4,r3
 8020350:	2880030d 	sth	r2,12(r5)
 8020354:	28c01915 	stw	r3,100(r5)
 8020358:	d9800404 	addi	r6,sp,16
 802035c:	8009883a 	mov	r4,r16
 8020360:	80207f00 	call	80207f0 <__sfvwrite_r>
 8020364:	1000091e 	bne	r2,zero,802038c <_puts_r+0xb8>
 8020368:	00800284 	movi	r2,10
 802036c:	dfc00917 	ldw	ra,36(sp)
 8020370:	dc400817 	ldw	r17,32(sp)
 8020374:	dc000717 	ldw	r16,28(sp)
 8020378:	dec00a04 	addi	sp,sp,40
 802037c:	f800283a 	ret
 8020380:	8009883a 	mov	r4,r16
 8020384:	80207a00 	call	80207a0 <__sinit>
 8020388:	003fe906 	br	8020330 <__alt_data_end+0xfffe0f30>
 802038c:	00bfffc4 	movi	r2,-1
 8020390:	003ff606 	br	802036c <__alt_data_end+0xfffe0f6c>

08020394 <puts>:
 8020394:	008200b4 	movhi	r2,2050
 8020398:	109c8004 	addi	r2,r2,29184
 802039c:	200b883a 	mov	r5,r4
 80203a0:	11000017 	ldw	r4,0(r2)
 80203a4:	80202d41 	jmpi	80202d4 <_puts_r>

080203a8 <strlen>:
 80203a8:	208000cc 	andi	r2,r4,3
 80203ac:	10002026 	beq	r2,zero,8020430 <strlen+0x88>
 80203b0:	20800007 	ldb	r2,0(r4)
 80203b4:	10002026 	beq	r2,zero,8020438 <strlen+0x90>
 80203b8:	2005883a 	mov	r2,r4
 80203bc:	00000206 	br	80203c8 <strlen+0x20>
 80203c0:	10c00007 	ldb	r3,0(r2)
 80203c4:	18001826 	beq	r3,zero,8020428 <strlen+0x80>
 80203c8:	10800044 	addi	r2,r2,1
 80203cc:	10c000cc 	andi	r3,r2,3
 80203d0:	183ffb1e 	bne	r3,zero,80203c0 <__alt_data_end+0xfffe0fc0>
 80203d4:	10c00017 	ldw	r3,0(r2)
 80203d8:	01ffbff4 	movhi	r7,65279
 80203dc:	39ffbfc4 	addi	r7,r7,-257
 80203e0:	00ca303a 	nor	r5,zero,r3
 80203e4:	01a02074 	movhi	r6,32897
 80203e8:	19c7883a 	add	r3,r3,r7
 80203ec:	31a02004 	addi	r6,r6,-32640
 80203f0:	1946703a 	and	r3,r3,r5
 80203f4:	1986703a 	and	r3,r3,r6
 80203f8:	1800091e 	bne	r3,zero,8020420 <strlen+0x78>
 80203fc:	10800104 	addi	r2,r2,4
 8020400:	10c00017 	ldw	r3,0(r2)
 8020404:	19cb883a 	add	r5,r3,r7
 8020408:	00c6303a 	nor	r3,zero,r3
 802040c:	28c6703a 	and	r3,r5,r3
 8020410:	1986703a 	and	r3,r3,r6
 8020414:	183ff926 	beq	r3,zero,80203fc <__alt_data_end+0xfffe0ffc>
 8020418:	00000106 	br	8020420 <strlen+0x78>
 802041c:	10800044 	addi	r2,r2,1
 8020420:	10c00007 	ldb	r3,0(r2)
 8020424:	183ffd1e 	bne	r3,zero,802041c <__alt_data_end+0xfffe101c>
 8020428:	1105c83a 	sub	r2,r2,r4
 802042c:	f800283a 	ret
 8020430:	2005883a 	mov	r2,r4
 8020434:	003fe706 	br	80203d4 <__alt_data_end+0xfffe0fd4>
 8020438:	0005883a 	mov	r2,zero
 802043c:	f800283a 	ret

08020440 <__fp_unlock>:
 8020440:	0005883a 	mov	r2,zero
 8020444:	f800283a 	ret

08020448 <_cleanup_r>:
 8020448:	014200b4 	movhi	r5,2050
 802044c:	2948fe04 	addi	r5,r5,9208
 8020450:	8020d7c1 	jmpi	8020d7c <_fwalk_reent>

08020454 <__sinit.part.1>:
 8020454:	defff704 	addi	sp,sp,-36
 8020458:	00c200b4 	movhi	r3,2050
 802045c:	dfc00815 	stw	ra,32(sp)
 8020460:	ddc00715 	stw	r23,28(sp)
 8020464:	dd800615 	stw	r22,24(sp)
 8020468:	dd400515 	stw	r21,20(sp)
 802046c:	dd000415 	stw	r20,16(sp)
 8020470:	dcc00315 	stw	r19,12(sp)
 8020474:	dc800215 	stw	r18,8(sp)
 8020478:	dc400115 	stw	r17,4(sp)
 802047c:	dc000015 	stw	r16,0(sp)
 8020480:	18c11204 	addi	r3,r3,1096
 8020484:	24000117 	ldw	r16,4(r4)
 8020488:	20c00f15 	stw	r3,60(r4)
 802048c:	2080bb04 	addi	r2,r4,748
 8020490:	00c000c4 	movi	r3,3
 8020494:	20c0b915 	stw	r3,740(r4)
 8020498:	2080ba15 	stw	r2,744(r4)
 802049c:	2000b815 	stw	zero,736(r4)
 80204a0:	05c00204 	movi	r23,8
 80204a4:	00800104 	movi	r2,4
 80204a8:	2025883a 	mov	r18,r4
 80204ac:	b80d883a 	mov	r6,r23
 80204b0:	81001704 	addi	r4,r16,92
 80204b4:	000b883a 	mov	r5,zero
 80204b8:	80000015 	stw	zero,0(r16)
 80204bc:	80000115 	stw	zero,4(r16)
 80204c0:	80000215 	stw	zero,8(r16)
 80204c4:	8080030d 	sth	r2,12(r16)
 80204c8:	80001915 	stw	zero,100(r16)
 80204cc:	8000038d 	sth	zero,14(r16)
 80204d0:	80000415 	stw	zero,16(r16)
 80204d4:	80000515 	stw	zero,20(r16)
 80204d8:	80000615 	stw	zero,24(r16)
 80204dc:	80219d40 	call	80219d4 <memset>
 80204e0:	058200b4 	movhi	r22,2050
 80204e4:	94400217 	ldw	r17,8(r18)
 80204e8:	054200b4 	movhi	r21,2050
 80204ec:	050200b4 	movhi	r20,2050
 80204f0:	04c200b4 	movhi	r19,2050
 80204f4:	b5882d04 	addi	r22,r22,8372
 80204f8:	ad484404 	addi	r21,r21,8464
 80204fc:	a5086304 	addi	r20,r20,8588
 8020500:	9cc87a04 	addi	r19,r19,8680
 8020504:	85800815 	stw	r22,32(r16)
 8020508:	85400915 	stw	r21,36(r16)
 802050c:	85000a15 	stw	r20,40(r16)
 8020510:	84c00b15 	stw	r19,44(r16)
 8020514:	84000715 	stw	r16,28(r16)
 8020518:	00800284 	movi	r2,10
 802051c:	8880030d 	sth	r2,12(r17)
 8020520:	00800044 	movi	r2,1
 8020524:	b80d883a 	mov	r6,r23
 8020528:	89001704 	addi	r4,r17,92
 802052c:	000b883a 	mov	r5,zero
 8020530:	88000015 	stw	zero,0(r17)
 8020534:	88000115 	stw	zero,4(r17)
 8020538:	88000215 	stw	zero,8(r17)
 802053c:	88001915 	stw	zero,100(r17)
 8020540:	8880038d 	sth	r2,14(r17)
 8020544:	88000415 	stw	zero,16(r17)
 8020548:	88000515 	stw	zero,20(r17)
 802054c:	88000615 	stw	zero,24(r17)
 8020550:	80219d40 	call	80219d4 <memset>
 8020554:	94000317 	ldw	r16,12(r18)
 8020558:	00800484 	movi	r2,18
 802055c:	8c400715 	stw	r17,28(r17)
 8020560:	8d800815 	stw	r22,32(r17)
 8020564:	8d400915 	stw	r21,36(r17)
 8020568:	8d000a15 	stw	r20,40(r17)
 802056c:	8cc00b15 	stw	r19,44(r17)
 8020570:	8080030d 	sth	r2,12(r16)
 8020574:	00800084 	movi	r2,2
 8020578:	80000015 	stw	zero,0(r16)
 802057c:	80000115 	stw	zero,4(r16)
 8020580:	80000215 	stw	zero,8(r16)
 8020584:	80001915 	stw	zero,100(r16)
 8020588:	8080038d 	sth	r2,14(r16)
 802058c:	80000415 	stw	zero,16(r16)
 8020590:	80000515 	stw	zero,20(r16)
 8020594:	80000615 	stw	zero,24(r16)
 8020598:	b80d883a 	mov	r6,r23
 802059c:	000b883a 	mov	r5,zero
 80205a0:	81001704 	addi	r4,r16,92
 80205a4:	80219d40 	call	80219d4 <memset>
 80205a8:	00800044 	movi	r2,1
 80205ac:	84000715 	stw	r16,28(r16)
 80205b0:	85800815 	stw	r22,32(r16)
 80205b4:	85400915 	stw	r21,36(r16)
 80205b8:	85000a15 	stw	r20,40(r16)
 80205bc:	84c00b15 	stw	r19,44(r16)
 80205c0:	90800e15 	stw	r2,56(r18)
 80205c4:	dfc00817 	ldw	ra,32(sp)
 80205c8:	ddc00717 	ldw	r23,28(sp)
 80205cc:	dd800617 	ldw	r22,24(sp)
 80205d0:	dd400517 	ldw	r21,20(sp)
 80205d4:	dd000417 	ldw	r20,16(sp)
 80205d8:	dcc00317 	ldw	r19,12(sp)
 80205dc:	dc800217 	ldw	r18,8(sp)
 80205e0:	dc400117 	ldw	r17,4(sp)
 80205e4:	dc000017 	ldw	r16,0(sp)
 80205e8:	dec00904 	addi	sp,sp,36
 80205ec:	f800283a 	ret

080205f0 <__fp_lock>:
 80205f0:	0005883a 	mov	r2,zero
 80205f4:	f800283a 	ret

080205f8 <__sfmoreglue>:
 80205f8:	defffc04 	addi	sp,sp,-16
 80205fc:	dc800215 	stw	r18,8(sp)
 8020600:	2825883a 	mov	r18,r5
 8020604:	dc000015 	stw	r16,0(sp)
 8020608:	01401a04 	movi	r5,104
 802060c:	2021883a 	mov	r16,r4
 8020610:	913fffc4 	addi	r4,r18,-1
 8020614:	dfc00315 	stw	ra,12(sp)
 8020618:	dc400115 	stw	r17,4(sp)
 802061c:	80230b80 	call	80230b8 <__mulsi3>
 8020620:	8009883a 	mov	r4,r16
 8020624:	11401d04 	addi	r5,r2,116
 8020628:	1023883a 	mov	r17,r2
 802062c:	8020e400 	call	8020e40 <_malloc_r>
 8020630:	1021883a 	mov	r16,r2
 8020634:	10000726 	beq	r2,zero,8020654 <__sfmoreglue+0x5c>
 8020638:	11000304 	addi	r4,r2,12
 802063c:	10000015 	stw	zero,0(r2)
 8020640:	14800115 	stw	r18,4(r2)
 8020644:	11000215 	stw	r4,8(r2)
 8020648:	89801a04 	addi	r6,r17,104
 802064c:	000b883a 	mov	r5,zero
 8020650:	80219d40 	call	80219d4 <memset>
 8020654:	8005883a 	mov	r2,r16
 8020658:	dfc00317 	ldw	ra,12(sp)
 802065c:	dc800217 	ldw	r18,8(sp)
 8020660:	dc400117 	ldw	r17,4(sp)
 8020664:	dc000017 	ldw	r16,0(sp)
 8020668:	dec00404 	addi	sp,sp,16
 802066c:	f800283a 	ret

08020670 <__sfp>:
 8020670:	defffb04 	addi	sp,sp,-20
 8020674:	dc000015 	stw	r16,0(sp)
 8020678:	040200b4 	movhi	r16,2050
 802067c:	841c7f04 	addi	r16,r16,29180
 8020680:	dcc00315 	stw	r19,12(sp)
 8020684:	2027883a 	mov	r19,r4
 8020688:	81000017 	ldw	r4,0(r16)
 802068c:	dfc00415 	stw	ra,16(sp)
 8020690:	dc800215 	stw	r18,8(sp)
 8020694:	20800e17 	ldw	r2,56(r4)
 8020698:	dc400115 	stw	r17,4(sp)
 802069c:	1000021e 	bne	r2,zero,80206a8 <__sfp+0x38>
 80206a0:	80204540 	call	8020454 <__sinit.part.1>
 80206a4:	81000017 	ldw	r4,0(r16)
 80206a8:	2480b804 	addi	r18,r4,736
 80206ac:	047fffc4 	movi	r17,-1
 80206b0:	91000117 	ldw	r4,4(r18)
 80206b4:	94000217 	ldw	r16,8(r18)
 80206b8:	213fffc4 	addi	r4,r4,-1
 80206bc:	20000a16 	blt	r4,zero,80206e8 <__sfp+0x78>
 80206c0:	8080030f 	ldh	r2,12(r16)
 80206c4:	10000c26 	beq	r2,zero,80206f8 <__sfp+0x88>
 80206c8:	80c01d04 	addi	r3,r16,116
 80206cc:	00000206 	br	80206d8 <__sfp+0x68>
 80206d0:	18bfe60f 	ldh	r2,-104(r3)
 80206d4:	10000826 	beq	r2,zero,80206f8 <__sfp+0x88>
 80206d8:	213fffc4 	addi	r4,r4,-1
 80206dc:	1c3ffd04 	addi	r16,r3,-12
 80206e0:	18c01a04 	addi	r3,r3,104
 80206e4:	247ffa1e 	bne	r4,r17,80206d0 <__alt_data_end+0xfffe12d0>
 80206e8:	90800017 	ldw	r2,0(r18)
 80206ec:	10001d26 	beq	r2,zero,8020764 <__sfp+0xf4>
 80206f0:	1025883a 	mov	r18,r2
 80206f4:	003fee06 	br	80206b0 <__alt_data_end+0xfffe12b0>
 80206f8:	00bfffc4 	movi	r2,-1
 80206fc:	8080038d 	sth	r2,14(r16)
 8020700:	00800044 	movi	r2,1
 8020704:	8080030d 	sth	r2,12(r16)
 8020708:	80001915 	stw	zero,100(r16)
 802070c:	80000015 	stw	zero,0(r16)
 8020710:	80000215 	stw	zero,8(r16)
 8020714:	80000115 	stw	zero,4(r16)
 8020718:	80000415 	stw	zero,16(r16)
 802071c:	80000515 	stw	zero,20(r16)
 8020720:	80000615 	stw	zero,24(r16)
 8020724:	01800204 	movi	r6,8
 8020728:	000b883a 	mov	r5,zero
 802072c:	81001704 	addi	r4,r16,92
 8020730:	80219d40 	call	80219d4 <memset>
 8020734:	8005883a 	mov	r2,r16
 8020738:	80000c15 	stw	zero,48(r16)
 802073c:	80000d15 	stw	zero,52(r16)
 8020740:	80001115 	stw	zero,68(r16)
 8020744:	80001215 	stw	zero,72(r16)
 8020748:	dfc00417 	ldw	ra,16(sp)
 802074c:	dcc00317 	ldw	r19,12(sp)
 8020750:	dc800217 	ldw	r18,8(sp)
 8020754:	dc400117 	ldw	r17,4(sp)
 8020758:	dc000017 	ldw	r16,0(sp)
 802075c:	dec00504 	addi	sp,sp,20
 8020760:	f800283a 	ret
 8020764:	01400104 	movi	r5,4
 8020768:	9809883a 	mov	r4,r19
 802076c:	80205f80 	call	80205f8 <__sfmoreglue>
 8020770:	90800015 	stw	r2,0(r18)
 8020774:	103fde1e 	bne	r2,zero,80206f0 <__alt_data_end+0xfffe12f0>
 8020778:	00800304 	movi	r2,12
 802077c:	98800015 	stw	r2,0(r19)
 8020780:	0005883a 	mov	r2,zero
 8020784:	003ff006 	br	8020748 <__alt_data_end+0xfffe1348>

08020788 <_cleanup>:
 8020788:	008200b4 	movhi	r2,2050
 802078c:	109c7f04 	addi	r2,r2,29180
 8020790:	11000017 	ldw	r4,0(r2)
 8020794:	014200b4 	movhi	r5,2050
 8020798:	2948fe04 	addi	r5,r5,9208
 802079c:	8020d7c1 	jmpi	8020d7c <_fwalk_reent>

080207a0 <__sinit>:
 80207a0:	20800e17 	ldw	r2,56(r4)
 80207a4:	10000126 	beq	r2,zero,80207ac <__sinit+0xc>
 80207a8:	f800283a 	ret
 80207ac:	80204541 	jmpi	8020454 <__sinit.part.1>

080207b0 <__sfp_lock_acquire>:
 80207b0:	f800283a 	ret

080207b4 <__sfp_lock_release>:
 80207b4:	f800283a 	ret

080207b8 <__sinit_lock_acquire>:
 80207b8:	f800283a 	ret

080207bc <__sinit_lock_release>:
 80207bc:	f800283a 	ret

080207c0 <__fp_lock_all>:
 80207c0:	008200b4 	movhi	r2,2050
 80207c4:	109c8004 	addi	r2,r2,29184
 80207c8:	11000017 	ldw	r4,0(r2)
 80207cc:	014200b4 	movhi	r5,2050
 80207d0:	29417c04 	addi	r5,r5,1520
 80207d4:	8020cb81 	jmpi	8020cb8 <_fwalk>

080207d8 <__fp_unlock_all>:
 80207d8:	008200b4 	movhi	r2,2050
 80207dc:	109c8004 	addi	r2,r2,29184
 80207e0:	11000017 	ldw	r4,0(r2)
 80207e4:	014200b4 	movhi	r5,2050
 80207e8:	29411004 	addi	r5,r5,1088
 80207ec:	8020cb81 	jmpi	8020cb8 <_fwalk>

080207f0 <__sfvwrite_r>:
 80207f0:	30800217 	ldw	r2,8(r6)
 80207f4:	10006726 	beq	r2,zero,8020994 <__sfvwrite_r+0x1a4>
 80207f8:	28c0030b 	ldhu	r3,12(r5)
 80207fc:	defff404 	addi	sp,sp,-48
 8020800:	dd400715 	stw	r21,28(sp)
 8020804:	dd000615 	stw	r20,24(sp)
 8020808:	dc000215 	stw	r16,8(sp)
 802080c:	dfc00b15 	stw	ra,44(sp)
 8020810:	df000a15 	stw	fp,40(sp)
 8020814:	ddc00915 	stw	r23,36(sp)
 8020818:	dd800815 	stw	r22,32(sp)
 802081c:	dcc00515 	stw	r19,20(sp)
 8020820:	dc800415 	stw	r18,16(sp)
 8020824:	dc400315 	stw	r17,12(sp)
 8020828:	1880020c 	andi	r2,r3,8
 802082c:	2821883a 	mov	r16,r5
 8020830:	202b883a 	mov	r21,r4
 8020834:	3029883a 	mov	r20,r6
 8020838:	10002726 	beq	r2,zero,80208d8 <__sfvwrite_r+0xe8>
 802083c:	28800417 	ldw	r2,16(r5)
 8020840:	10002526 	beq	r2,zero,80208d8 <__sfvwrite_r+0xe8>
 8020844:	1880008c 	andi	r2,r3,2
 8020848:	a4400017 	ldw	r17,0(r20)
 802084c:	10002a26 	beq	r2,zero,80208f8 <__sfvwrite_r+0x108>
 8020850:	05a00034 	movhi	r22,32768
 8020854:	0027883a 	mov	r19,zero
 8020858:	0025883a 	mov	r18,zero
 802085c:	b5bf0004 	addi	r22,r22,-1024
 8020860:	980d883a 	mov	r6,r19
 8020864:	a809883a 	mov	r4,r21
 8020868:	90004626 	beq	r18,zero,8020984 <__sfvwrite_r+0x194>
 802086c:	900f883a 	mov	r7,r18
 8020870:	b480022e 	bgeu	r22,r18,802087c <__sfvwrite_r+0x8c>
 8020874:	01e00034 	movhi	r7,32768
 8020878:	39ff0004 	addi	r7,r7,-1024
 802087c:	80800917 	ldw	r2,36(r16)
 8020880:	81400717 	ldw	r5,28(r16)
 8020884:	103ee83a 	callr	r2
 8020888:	00805a0e 	bge	zero,r2,80209f4 <__sfvwrite_r+0x204>
 802088c:	a0c00217 	ldw	r3,8(r20)
 8020890:	98a7883a 	add	r19,r19,r2
 8020894:	90a5c83a 	sub	r18,r18,r2
 8020898:	1885c83a 	sub	r2,r3,r2
 802089c:	a0800215 	stw	r2,8(r20)
 80208a0:	103fef1e 	bne	r2,zero,8020860 <__alt_data_end+0xfffe1460>
 80208a4:	0005883a 	mov	r2,zero
 80208a8:	dfc00b17 	ldw	ra,44(sp)
 80208ac:	df000a17 	ldw	fp,40(sp)
 80208b0:	ddc00917 	ldw	r23,36(sp)
 80208b4:	dd800817 	ldw	r22,32(sp)
 80208b8:	dd400717 	ldw	r21,28(sp)
 80208bc:	dd000617 	ldw	r20,24(sp)
 80208c0:	dcc00517 	ldw	r19,20(sp)
 80208c4:	dc800417 	ldw	r18,16(sp)
 80208c8:	dc400317 	ldw	r17,12(sp)
 80208cc:	dc000217 	ldw	r16,8(sp)
 80208d0:	dec00c04 	addi	sp,sp,48
 80208d4:	f800283a 	ret
 80208d8:	800b883a 	mov	r5,r16
 80208dc:	a809883a 	mov	r4,r21
 80208e0:	80222500 	call	8022250 <__swsetup_r>
 80208e4:	1000ee1e 	bne	r2,zero,8020ca0 <__sfvwrite_r+0x4b0>
 80208e8:	80c0030b 	ldhu	r3,12(r16)
 80208ec:	a4400017 	ldw	r17,0(r20)
 80208f0:	1880008c 	andi	r2,r3,2
 80208f4:	103fd61e 	bne	r2,zero,8020850 <__alt_data_end+0xfffe1450>
 80208f8:	1880004c 	andi	r2,r3,1
 80208fc:	1000421e 	bne	r2,zero,8020a08 <__sfvwrite_r+0x218>
 8020900:	0039883a 	mov	fp,zero
 8020904:	0025883a 	mov	r18,zero
 8020908:	90001a26 	beq	r18,zero,8020974 <__sfvwrite_r+0x184>
 802090c:	1880800c 	andi	r2,r3,512
 8020910:	84c00217 	ldw	r19,8(r16)
 8020914:	10002126 	beq	r2,zero,802099c <__sfvwrite_r+0x1ac>
 8020918:	982f883a 	mov	r23,r19
 802091c:	94c09636 	bltu	r18,r19,8020b78 <__sfvwrite_r+0x388>
 8020920:	1881200c 	andi	r2,r3,1152
 8020924:	1000a11e 	bne	r2,zero,8020bac <__sfvwrite_r+0x3bc>
 8020928:	81000017 	ldw	r4,0(r16)
 802092c:	b80d883a 	mov	r6,r23
 8020930:	e00b883a 	mov	r5,fp
 8020934:	80218780 	call	8021878 <memmove>
 8020938:	80c00217 	ldw	r3,8(r16)
 802093c:	81000017 	ldw	r4,0(r16)
 8020940:	9005883a 	mov	r2,r18
 8020944:	1ce7c83a 	sub	r19,r3,r19
 8020948:	25cf883a 	add	r7,r4,r23
 802094c:	84c00215 	stw	r19,8(r16)
 8020950:	81c00015 	stw	r7,0(r16)
 8020954:	a0c00217 	ldw	r3,8(r20)
 8020958:	e0b9883a 	add	fp,fp,r2
 802095c:	90a5c83a 	sub	r18,r18,r2
 8020960:	18a7c83a 	sub	r19,r3,r2
 8020964:	a4c00215 	stw	r19,8(r20)
 8020968:	983fce26 	beq	r19,zero,80208a4 <__alt_data_end+0xfffe14a4>
 802096c:	80c0030b 	ldhu	r3,12(r16)
 8020970:	903fe61e 	bne	r18,zero,802090c <__alt_data_end+0xfffe150c>
 8020974:	8f000017 	ldw	fp,0(r17)
 8020978:	8c800117 	ldw	r18,4(r17)
 802097c:	8c400204 	addi	r17,r17,8
 8020980:	003fe106 	br	8020908 <__alt_data_end+0xfffe1508>
 8020984:	8cc00017 	ldw	r19,0(r17)
 8020988:	8c800117 	ldw	r18,4(r17)
 802098c:	8c400204 	addi	r17,r17,8
 8020990:	003fb306 	br	8020860 <__alt_data_end+0xfffe1460>
 8020994:	0005883a 	mov	r2,zero
 8020998:	f800283a 	ret
 802099c:	81000017 	ldw	r4,0(r16)
 80209a0:	80800417 	ldw	r2,16(r16)
 80209a4:	11005a36 	bltu	r2,r4,8020b10 <__sfvwrite_r+0x320>
 80209a8:	85c00517 	ldw	r23,20(r16)
 80209ac:	95c05836 	bltu	r18,r23,8020b10 <__sfvwrite_r+0x320>
 80209b0:	00a00034 	movhi	r2,32768
 80209b4:	10bfffc4 	addi	r2,r2,-1
 80209b8:	9009883a 	mov	r4,r18
 80209bc:	1480012e 	bgeu	r2,r18,80209c4 <__sfvwrite_r+0x1d4>
 80209c0:	1009883a 	mov	r4,r2
 80209c4:	b80b883a 	mov	r5,r23
 80209c8:	8022f040 	call	8022f04 <__divsi3>
 80209cc:	b80b883a 	mov	r5,r23
 80209d0:	1009883a 	mov	r4,r2
 80209d4:	80230b80 	call	80230b8 <__mulsi3>
 80209d8:	81400717 	ldw	r5,28(r16)
 80209dc:	80c00917 	ldw	r3,36(r16)
 80209e0:	100f883a 	mov	r7,r2
 80209e4:	e00d883a 	mov	r6,fp
 80209e8:	a809883a 	mov	r4,r21
 80209ec:	183ee83a 	callr	r3
 80209f0:	00bfd816 	blt	zero,r2,8020954 <__alt_data_end+0xfffe1554>
 80209f4:	8080030b 	ldhu	r2,12(r16)
 80209f8:	10801014 	ori	r2,r2,64
 80209fc:	8080030d 	sth	r2,12(r16)
 8020a00:	00bfffc4 	movi	r2,-1
 8020a04:	003fa806 	br	80208a8 <__alt_data_end+0xfffe14a8>
 8020a08:	0027883a 	mov	r19,zero
 8020a0c:	0011883a 	mov	r8,zero
 8020a10:	0039883a 	mov	fp,zero
 8020a14:	0025883a 	mov	r18,zero
 8020a18:	90001f26 	beq	r18,zero,8020a98 <__sfvwrite_r+0x2a8>
 8020a1c:	40005a26 	beq	r8,zero,8020b88 <__sfvwrite_r+0x398>
 8020a20:	982d883a 	mov	r22,r19
 8020a24:	94c0012e 	bgeu	r18,r19,8020a2c <__sfvwrite_r+0x23c>
 8020a28:	902d883a 	mov	r22,r18
 8020a2c:	81000017 	ldw	r4,0(r16)
 8020a30:	80800417 	ldw	r2,16(r16)
 8020a34:	b02f883a 	mov	r23,r22
 8020a38:	81c00517 	ldw	r7,20(r16)
 8020a3c:	1100032e 	bgeu	r2,r4,8020a4c <__sfvwrite_r+0x25c>
 8020a40:	80c00217 	ldw	r3,8(r16)
 8020a44:	38c7883a 	add	r3,r7,r3
 8020a48:	1d801816 	blt	r3,r22,8020aac <__sfvwrite_r+0x2bc>
 8020a4c:	b1c03e16 	blt	r22,r7,8020b48 <__sfvwrite_r+0x358>
 8020a50:	80800917 	ldw	r2,36(r16)
 8020a54:	81400717 	ldw	r5,28(r16)
 8020a58:	e00d883a 	mov	r6,fp
 8020a5c:	da000115 	stw	r8,4(sp)
 8020a60:	a809883a 	mov	r4,r21
 8020a64:	103ee83a 	callr	r2
 8020a68:	102f883a 	mov	r23,r2
 8020a6c:	da000117 	ldw	r8,4(sp)
 8020a70:	00bfe00e 	bge	zero,r2,80209f4 <__alt_data_end+0xfffe15f4>
 8020a74:	9de7c83a 	sub	r19,r19,r23
 8020a78:	98001f26 	beq	r19,zero,8020af8 <__sfvwrite_r+0x308>
 8020a7c:	a0800217 	ldw	r2,8(r20)
 8020a80:	e5f9883a 	add	fp,fp,r23
 8020a84:	95e5c83a 	sub	r18,r18,r23
 8020a88:	15efc83a 	sub	r23,r2,r23
 8020a8c:	a5c00215 	stw	r23,8(r20)
 8020a90:	b83f8426 	beq	r23,zero,80208a4 <__alt_data_end+0xfffe14a4>
 8020a94:	903fe11e 	bne	r18,zero,8020a1c <__alt_data_end+0xfffe161c>
 8020a98:	8f000017 	ldw	fp,0(r17)
 8020a9c:	8c800117 	ldw	r18,4(r17)
 8020aa0:	0011883a 	mov	r8,zero
 8020aa4:	8c400204 	addi	r17,r17,8
 8020aa8:	003fdb06 	br	8020a18 <__alt_data_end+0xfffe1618>
 8020aac:	180d883a 	mov	r6,r3
 8020ab0:	e00b883a 	mov	r5,fp
 8020ab4:	da000115 	stw	r8,4(sp)
 8020ab8:	d8c00015 	stw	r3,0(sp)
 8020abc:	80218780 	call	8021878 <memmove>
 8020ac0:	d8c00017 	ldw	r3,0(sp)
 8020ac4:	80800017 	ldw	r2,0(r16)
 8020ac8:	800b883a 	mov	r5,r16
 8020acc:	a809883a 	mov	r4,r21
 8020ad0:	10c5883a 	add	r2,r2,r3
 8020ad4:	80800015 	stw	r2,0(r16)
 8020ad8:	d8c00015 	stw	r3,0(sp)
 8020adc:	80227180 	call	8022718 <_fflush_r>
 8020ae0:	d8c00017 	ldw	r3,0(sp)
 8020ae4:	da000117 	ldw	r8,4(sp)
 8020ae8:	103fc21e 	bne	r2,zero,80209f4 <__alt_data_end+0xfffe15f4>
 8020aec:	182f883a 	mov	r23,r3
 8020af0:	9de7c83a 	sub	r19,r19,r23
 8020af4:	983fe11e 	bne	r19,zero,8020a7c <__alt_data_end+0xfffe167c>
 8020af8:	800b883a 	mov	r5,r16
 8020afc:	a809883a 	mov	r4,r21
 8020b00:	80227180 	call	8022718 <_fflush_r>
 8020b04:	103fbb1e 	bne	r2,zero,80209f4 <__alt_data_end+0xfffe15f4>
 8020b08:	0011883a 	mov	r8,zero
 8020b0c:	003fdb06 	br	8020a7c <__alt_data_end+0xfffe167c>
 8020b10:	94c0012e 	bgeu	r18,r19,8020b18 <__sfvwrite_r+0x328>
 8020b14:	9027883a 	mov	r19,r18
 8020b18:	980d883a 	mov	r6,r19
 8020b1c:	e00b883a 	mov	r5,fp
 8020b20:	80218780 	call	8021878 <memmove>
 8020b24:	80800217 	ldw	r2,8(r16)
 8020b28:	80c00017 	ldw	r3,0(r16)
 8020b2c:	14c5c83a 	sub	r2,r2,r19
 8020b30:	1cc7883a 	add	r3,r3,r19
 8020b34:	80800215 	stw	r2,8(r16)
 8020b38:	80c00015 	stw	r3,0(r16)
 8020b3c:	10004326 	beq	r2,zero,8020c4c <__sfvwrite_r+0x45c>
 8020b40:	9805883a 	mov	r2,r19
 8020b44:	003f8306 	br	8020954 <__alt_data_end+0xfffe1554>
 8020b48:	b00d883a 	mov	r6,r22
 8020b4c:	e00b883a 	mov	r5,fp
 8020b50:	da000115 	stw	r8,4(sp)
 8020b54:	80218780 	call	8021878 <memmove>
 8020b58:	80800217 	ldw	r2,8(r16)
 8020b5c:	80c00017 	ldw	r3,0(r16)
 8020b60:	da000117 	ldw	r8,4(sp)
 8020b64:	1585c83a 	sub	r2,r2,r22
 8020b68:	1dad883a 	add	r22,r3,r22
 8020b6c:	80800215 	stw	r2,8(r16)
 8020b70:	85800015 	stw	r22,0(r16)
 8020b74:	003fbf06 	br	8020a74 <__alt_data_end+0xfffe1674>
 8020b78:	81000017 	ldw	r4,0(r16)
 8020b7c:	9027883a 	mov	r19,r18
 8020b80:	902f883a 	mov	r23,r18
 8020b84:	003f6906 	br	802092c <__alt_data_end+0xfffe152c>
 8020b88:	900d883a 	mov	r6,r18
 8020b8c:	01400284 	movi	r5,10
 8020b90:	e009883a 	mov	r4,fp
 8020b94:	802164c0 	call	802164c <memchr>
 8020b98:	10003e26 	beq	r2,zero,8020c94 <__sfvwrite_r+0x4a4>
 8020b9c:	10800044 	addi	r2,r2,1
 8020ba0:	1727c83a 	sub	r19,r2,fp
 8020ba4:	02000044 	movi	r8,1
 8020ba8:	003f9d06 	br	8020a20 <__alt_data_end+0xfffe1620>
 8020bac:	80800517 	ldw	r2,20(r16)
 8020bb0:	81400417 	ldw	r5,16(r16)
 8020bb4:	81c00017 	ldw	r7,0(r16)
 8020bb8:	10a7883a 	add	r19,r2,r2
 8020bbc:	9885883a 	add	r2,r19,r2
 8020bc0:	1026d7fa 	srli	r19,r2,31
 8020bc4:	396dc83a 	sub	r22,r7,r5
 8020bc8:	b1000044 	addi	r4,r22,1
 8020bcc:	9885883a 	add	r2,r19,r2
 8020bd0:	1027d07a 	srai	r19,r2,1
 8020bd4:	2485883a 	add	r2,r4,r18
 8020bd8:	980d883a 	mov	r6,r19
 8020bdc:	9880022e 	bgeu	r19,r2,8020be8 <__sfvwrite_r+0x3f8>
 8020be0:	1027883a 	mov	r19,r2
 8020be4:	100d883a 	mov	r6,r2
 8020be8:	18c1000c 	andi	r3,r3,1024
 8020bec:	18001c26 	beq	r3,zero,8020c60 <__sfvwrite_r+0x470>
 8020bf0:	300b883a 	mov	r5,r6
 8020bf4:	a809883a 	mov	r4,r21
 8020bf8:	8020e400 	call	8020e40 <_malloc_r>
 8020bfc:	102f883a 	mov	r23,r2
 8020c00:	10002926 	beq	r2,zero,8020ca8 <__sfvwrite_r+0x4b8>
 8020c04:	81400417 	ldw	r5,16(r16)
 8020c08:	b00d883a 	mov	r6,r22
 8020c0c:	1009883a 	mov	r4,r2
 8020c10:	80217300 	call	8021730 <memcpy>
 8020c14:	8080030b 	ldhu	r2,12(r16)
 8020c18:	00fedfc4 	movi	r3,-1153
 8020c1c:	10c4703a 	and	r2,r2,r3
 8020c20:	10802014 	ori	r2,r2,128
 8020c24:	8080030d 	sth	r2,12(r16)
 8020c28:	bd89883a 	add	r4,r23,r22
 8020c2c:	9d8fc83a 	sub	r7,r19,r22
 8020c30:	85c00415 	stw	r23,16(r16)
 8020c34:	84c00515 	stw	r19,20(r16)
 8020c38:	81000015 	stw	r4,0(r16)
 8020c3c:	9027883a 	mov	r19,r18
 8020c40:	81c00215 	stw	r7,8(r16)
 8020c44:	902f883a 	mov	r23,r18
 8020c48:	003f3806 	br	802092c <__alt_data_end+0xfffe152c>
 8020c4c:	800b883a 	mov	r5,r16
 8020c50:	a809883a 	mov	r4,r21
 8020c54:	80227180 	call	8022718 <_fflush_r>
 8020c58:	103fb926 	beq	r2,zero,8020b40 <__alt_data_end+0xfffe1740>
 8020c5c:	003f6506 	br	80209f4 <__alt_data_end+0xfffe15f4>
 8020c60:	a809883a 	mov	r4,r21
 8020c64:	8021afc0 	call	8021afc <_realloc_r>
 8020c68:	102f883a 	mov	r23,r2
 8020c6c:	103fee1e 	bne	r2,zero,8020c28 <__alt_data_end+0xfffe1828>
 8020c70:	81400417 	ldw	r5,16(r16)
 8020c74:	a809883a 	mov	r4,r21
 8020c78:	80228c80 	call	80228c8 <_free_r>
 8020c7c:	8080030b 	ldhu	r2,12(r16)
 8020c80:	00ffdfc4 	movi	r3,-129
 8020c84:	1884703a 	and	r2,r3,r2
 8020c88:	00c00304 	movi	r3,12
 8020c8c:	a8c00015 	stw	r3,0(r21)
 8020c90:	003f5906 	br	80209f8 <__alt_data_end+0xfffe15f8>
 8020c94:	94c00044 	addi	r19,r18,1
 8020c98:	02000044 	movi	r8,1
 8020c9c:	003f6006 	br	8020a20 <__alt_data_end+0xfffe1620>
 8020ca0:	00bfffc4 	movi	r2,-1
 8020ca4:	003f0006 	br	80208a8 <__alt_data_end+0xfffe14a8>
 8020ca8:	00800304 	movi	r2,12
 8020cac:	a8800015 	stw	r2,0(r21)
 8020cb0:	8080030b 	ldhu	r2,12(r16)
 8020cb4:	003f5006 	br	80209f8 <__alt_data_end+0xfffe15f8>

08020cb8 <_fwalk>:
 8020cb8:	defff704 	addi	sp,sp,-36
 8020cbc:	dd000415 	stw	r20,16(sp)
 8020cc0:	dfc00815 	stw	ra,32(sp)
 8020cc4:	ddc00715 	stw	r23,28(sp)
 8020cc8:	dd800615 	stw	r22,24(sp)
 8020ccc:	dd400515 	stw	r21,20(sp)
 8020cd0:	dcc00315 	stw	r19,12(sp)
 8020cd4:	dc800215 	stw	r18,8(sp)
 8020cd8:	dc400115 	stw	r17,4(sp)
 8020cdc:	dc000015 	stw	r16,0(sp)
 8020ce0:	2500b804 	addi	r20,r4,736
 8020ce4:	a0002326 	beq	r20,zero,8020d74 <_fwalk+0xbc>
 8020ce8:	282b883a 	mov	r21,r5
 8020cec:	002f883a 	mov	r23,zero
 8020cf0:	05800044 	movi	r22,1
 8020cf4:	04ffffc4 	movi	r19,-1
 8020cf8:	a4400117 	ldw	r17,4(r20)
 8020cfc:	a4800217 	ldw	r18,8(r20)
 8020d00:	8c7fffc4 	addi	r17,r17,-1
 8020d04:	88000d16 	blt	r17,zero,8020d3c <_fwalk+0x84>
 8020d08:	94000304 	addi	r16,r18,12
 8020d0c:	94800384 	addi	r18,r18,14
 8020d10:	8080000b 	ldhu	r2,0(r16)
 8020d14:	8c7fffc4 	addi	r17,r17,-1
 8020d18:	813ffd04 	addi	r4,r16,-12
 8020d1c:	b080042e 	bgeu	r22,r2,8020d30 <_fwalk+0x78>
 8020d20:	9080000f 	ldh	r2,0(r18)
 8020d24:	14c00226 	beq	r2,r19,8020d30 <_fwalk+0x78>
 8020d28:	a83ee83a 	callr	r21
 8020d2c:	b8aeb03a 	or	r23,r23,r2
 8020d30:	84001a04 	addi	r16,r16,104
 8020d34:	94801a04 	addi	r18,r18,104
 8020d38:	8cfff51e 	bne	r17,r19,8020d10 <__alt_data_end+0xfffe1910>
 8020d3c:	a5000017 	ldw	r20,0(r20)
 8020d40:	a03fed1e 	bne	r20,zero,8020cf8 <__alt_data_end+0xfffe18f8>
 8020d44:	b805883a 	mov	r2,r23
 8020d48:	dfc00817 	ldw	ra,32(sp)
 8020d4c:	ddc00717 	ldw	r23,28(sp)
 8020d50:	dd800617 	ldw	r22,24(sp)
 8020d54:	dd400517 	ldw	r21,20(sp)
 8020d58:	dd000417 	ldw	r20,16(sp)
 8020d5c:	dcc00317 	ldw	r19,12(sp)
 8020d60:	dc800217 	ldw	r18,8(sp)
 8020d64:	dc400117 	ldw	r17,4(sp)
 8020d68:	dc000017 	ldw	r16,0(sp)
 8020d6c:	dec00904 	addi	sp,sp,36
 8020d70:	f800283a 	ret
 8020d74:	002f883a 	mov	r23,zero
 8020d78:	003ff206 	br	8020d44 <__alt_data_end+0xfffe1944>

08020d7c <_fwalk_reent>:
 8020d7c:	defff704 	addi	sp,sp,-36
 8020d80:	dd000415 	stw	r20,16(sp)
 8020d84:	dfc00815 	stw	ra,32(sp)
 8020d88:	ddc00715 	stw	r23,28(sp)
 8020d8c:	dd800615 	stw	r22,24(sp)
 8020d90:	dd400515 	stw	r21,20(sp)
 8020d94:	dcc00315 	stw	r19,12(sp)
 8020d98:	dc800215 	stw	r18,8(sp)
 8020d9c:	dc400115 	stw	r17,4(sp)
 8020da0:	dc000015 	stw	r16,0(sp)
 8020da4:	2500b804 	addi	r20,r4,736
 8020da8:	a0002326 	beq	r20,zero,8020e38 <_fwalk_reent+0xbc>
 8020dac:	282b883a 	mov	r21,r5
 8020db0:	2027883a 	mov	r19,r4
 8020db4:	002f883a 	mov	r23,zero
 8020db8:	05800044 	movi	r22,1
 8020dbc:	04bfffc4 	movi	r18,-1
 8020dc0:	a4400117 	ldw	r17,4(r20)
 8020dc4:	a4000217 	ldw	r16,8(r20)
 8020dc8:	8c7fffc4 	addi	r17,r17,-1
 8020dcc:	88000c16 	blt	r17,zero,8020e00 <_fwalk_reent+0x84>
 8020dd0:	84000304 	addi	r16,r16,12
 8020dd4:	8080000b 	ldhu	r2,0(r16)
 8020dd8:	8c7fffc4 	addi	r17,r17,-1
 8020ddc:	817ffd04 	addi	r5,r16,-12
 8020de0:	b080052e 	bgeu	r22,r2,8020df8 <_fwalk_reent+0x7c>
 8020de4:	8080008f 	ldh	r2,2(r16)
 8020de8:	9809883a 	mov	r4,r19
 8020dec:	14800226 	beq	r2,r18,8020df8 <_fwalk_reent+0x7c>
 8020df0:	a83ee83a 	callr	r21
 8020df4:	b8aeb03a 	or	r23,r23,r2
 8020df8:	84001a04 	addi	r16,r16,104
 8020dfc:	8cbff51e 	bne	r17,r18,8020dd4 <__alt_data_end+0xfffe19d4>
 8020e00:	a5000017 	ldw	r20,0(r20)
 8020e04:	a03fee1e 	bne	r20,zero,8020dc0 <__alt_data_end+0xfffe19c0>
 8020e08:	b805883a 	mov	r2,r23
 8020e0c:	dfc00817 	ldw	ra,32(sp)
 8020e10:	ddc00717 	ldw	r23,28(sp)
 8020e14:	dd800617 	ldw	r22,24(sp)
 8020e18:	dd400517 	ldw	r21,20(sp)
 8020e1c:	dd000417 	ldw	r20,16(sp)
 8020e20:	dcc00317 	ldw	r19,12(sp)
 8020e24:	dc800217 	ldw	r18,8(sp)
 8020e28:	dc400117 	ldw	r17,4(sp)
 8020e2c:	dc000017 	ldw	r16,0(sp)
 8020e30:	dec00904 	addi	sp,sp,36
 8020e34:	f800283a 	ret
 8020e38:	002f883a 	mov	r23,zero
 8020e3c:	003ff206 	br	8020e08 <__alt_data_end+0xfffe1a08>

08020e40 <_malloc_r>:
 8020e40:	defff504 	addi	sp,sp,-44
 8020e44:	dc800315 	stw	r18,12(sp)
 8020e48:	dfc00a15 	stw	ra,40(sp)
 8020e4c:	df000915 	stw	fp,36(sp)
 8020e50:	ddc00815 	stw	r23,32(sp)
 8020e54:	dd800715 	stw	r22,28(sp)
 8020e58:	dd400615 	stw	r21,24(sp)
 8020e5c:	dd000515 	stw	r20,20(sp)
 8020e60:	dcc00415 	stw	r19,16(sp)
 8020e64:	dc400215 	stw	r17,8(sp)
 8020e68:	dc000115 	stw	r16,4(sp)
 8020e6c:	288002c4 	addi	r2,r5,11
 8020e70:	00c00584 	movi	r3,22
 8020e74:	2025883a 	mov	r18,r4
 8020e78:	18807f2e 	bgeu	r3,r2,8021078 <_malloc_r+0x238>
 8020e7c:	047ffe04 	movi	r17,-8
 8020e80:	1462703a 	and	r17,r2,r17
 8020e84:	8800a316 	blt	r17,zero,8021114 <_malloc_r+0x2d4>
 8020e88:	8940a236 	bltu	r17,r5,8021114 <_malloc_r+0x2d4>
 8020e8c:	802367c0 	call	802367c <__malloc_lock>
 8020e90:	00807dc4 	movi	r2,503
 8020e94:	1441e92e 	bgeu	r2,r17,802163c <_malloc_r+0x7fc>
 8020e98:	8804d27a 	srli	r2,r17,9
 8020e9c:	1000a126 	beq	r2,zero,8021124 <_malloc_r+0x2e4>
 8020ea0:	00c00104 	movi	r3,4
 8020ea4:	18811e36 	bltu	r3,r2,8021320 <_malloc_r+0x4e0>
 8020ea8:	8804d1ba 	srli	r2,r17,6
 8020eac:	12000e44 	addi	r8,r2,57
 8020eb0:	11c00e04 	addi	r7,r2,56
 8020eb4:	4209883a 	add	r4,r8,r8
 8020eb8:	04c200b4 	movhi	r19,2050
 8020ebc:	2109883a 	add	r4,r4,r4
 8020ec0:	9cd6fb04 	addi	r19,r19,23532
 8020ec4:	2109883a 	add	r4,r4,r4
 8020ec8:	9909883a 	add	r4,r19,r4
 8020ecc:	24000117 	ldw	r16,4(r4)
 8020ed0:	213ffe04 	addi	r4,r4,-8
 8020ed4:	24009726 	beq	r4,r16,8021134 <_malloc_r+0x2f4>
 8020ed8:	80800117 	ldw	r2,4(r16)
 8020edc:	01bfff04 	movi	r6,-4
 8020ee0:	014003c4 	movi	r5,15
 8020ee4:	1184703a 	and	r2,r2,r6
 8020ee8:	1447c83a 	sub	r3,r2,r17
 8020eec:	28c00716 	blt	r5,r3,8020f0c <_malloc_r+0xcc>
 8020ef0:	1800920e 	bge	r3,zero,802113c <_malloc_r+0x2fc>
 8020ef4:	84000317 	ldw	r16,12(r16)
 8020ef8:	24008e26 	beq	r4,r16,8021134 <_malloc_r+0x2f4>
 8020efc:	80800117 	ldw	r2,4(r16)
 8020f00:	1184703a 	and	r2,r2,r6
 8020f04:	1447c83a 	sub	r3,r2,r17
 8020f08:	28fff90e 	bge	r5,r3,8020ef0 <__alt_data_end+0xfffe1af0>
 8020f0c:	3809883a 	mov	r4,r7
 8020f10:	018200b4 	movhi	r6,2050
 8020f14:	9c000417 	ldw	r16,16(r19)
 8020f18:	3196fb04 	addi	r6,r6,23532
 8020f1c:	32000204 	addi	r8,r6,8
 8020f20:	82013426 	beq	r16,r8,80213f4 <_malloc_r+0x5b4>
 8020f24:	80c00117 	ldw	r3,4(r16)
 8020f28:	00bfff04 	movi	r2,-4
 8020f2c:	188e703a 	and	r7,r3,r2
 8020f30:	3c45c83a 	sub	r2,r7,r17
 8020f34:	00c003c4 	movi	r3,15
 8020f38:	18811f16 	blt	r3,r2,80213b8 <_malloc_r+0x578>
 8020f3c:	32000515 	stw	r8,20(r6)
 8020f40:	32000415 	stw	r8,16(r6)
 8020f44:	10007f0e 	bge	r2,zero,8021144 <_malloc_r+0x304>
 8020f48:	00807fc4 	movi	r2,511
 8020f4c:	11c0fd36 	bltu	r2,r7,8021344 <_malloc_r+0x504>
 8020f50:	3806d0fa 	srli	r3,r7,3
 8020f54:	01c00044 	movi	r7,1
 8020f58:	30800117 	ldw	r2,4(r6)
 8020f5c:	19400044 	addi	r5,r3,1
 8020f60:	294b883a 	add	r5,r5,r5
 8020f64:	1807d0ba 	srai	r3,r3,2
 8020f68:	294b883a 	add	r5,r5,r5
 8020f6c:	294b883a 	add	r5,r5,r5
 8020f70:	298b883a 	add	r5,r5,r6
 8020f74:	38c6983a 	sll	r3,r7,r3
 8020f78:	29c00017 	ldw	r7,0(r5)
 8020f7c:	2a7ffe04 	addi	r9,r5,-8
 8020f80:	1886b03a 	or	r3,r3,r2
 8020f84:	82400315 	stw	r9,12(r16)
 8020f88:	81c00215 	stw	r7,8(r16)
 8020f8c:	30c00115 	stw	r3,4(r6)
 8020f90:	2c000015 	stw	r16,0(r5)
 8020f94:	3c000315 	stw	r16,12(r7)
 8020f98:	2005d0ba 	srai	r2,r4,2
 8020f9c:	01400044 	movi	r5,1
 8020fa0:	288a983a 	sll	r5,r5,r2
 8020fa4:	19406f36 	bltu	r3,r5,8021164 <_malloc_r+0x324>
 8020fa8:	28c4703a 	and	r2,r5,r3
 8020fac:	10000a1e 	bne	r2,zero,8020fd8 <_malloc_r+0x198>
 8020fb0:	00bfff04 	movi	r2,-4
 8020fb4:	294b883a 	add	r5,r5,r5
 8020fb8:	2088703a 	and	r4,r4,r2
 8020fbc:	28c4703a 	and	r2,r5,r3
 8020fc0:	21000104 	addi	r4,r4,4
 8020fc4:	1000041e 	bne	r2,zero,8020fd8 <_malloc_r+0x198>
 8020fc8:	294b883a 	add	r5,r5,r5
 8020fcc:	28c4703a 	and	r2,r5,r3
 8020fd0:	21000104 	addi	r4,r4,4
 8020fd4:	103ffc26 	beq	r2,zero,8020fc8 <__alt_data_end+0xfffe1bc8>
 8020fd8:	02bfff04 	movi	r10,-4
 8020fdc:	024003c4 	movi	r9,15
 8020fe0:	21800044 	addi	r6,r4,1
 8020fe4:	318d883a 	add	r6,r6,r6
 8020fe8:	318d883a 	add	r6,r6,r6
 8020fec:	318d883a 	add	r6,r6,r6
 8020ff0:	998d883a 	add	r6,r19,r6
 8020ff4:	333ffe04 	addi	r12,r6,-8
 8020ff8:	2017883a 	mov	r11,r4
 8020ffc:	31800104 	addi	r6,r6,4
 8021000:	34000017 	ldw	r16,0(r6)
 8021004:	31fffd04 	addi	r7,r6,-12
 8021008:	81c0041e 	bne	r16,r7,802101c <_malloc_r+0x1dc>
 802100c:	0000fb06 	br	80213fc <_malloc_r+0x5bc>
 8021010:	1801030e 	bge	r3,zero,8021420 <_malloc_r+0x5e0>
 8021014:	84000317 	ldw	r16,12(r16)
 8021018:	81c0f826 	beq	r16,r7,80213fc <_malloc_r+0x5bc>
 802101c:	80800117 	ldw	r2,4(r16)
 8021020:	1284703a 	and	r2,r2,r10
 8021024:	1447c83a 	sub	r3,r2,r17
 8021028:	48fff90e 	bge	r9,r3,8021010 <__alt_data_end+0xfffe1c10>
 802102c:	80800317 	ldw	r2,12(r16)
 8021030:	81000217 	ldw	r4,8(r16)
 8021034:	89400054 	ori	r5,r17,1
 8021038:	81400115 	stw	r5,4(r16)
 802103c:	20800315 	stw	r2,12(r4)
 8021040:	11000215 	stw	r4,8(r2)
 8021044:	8463883a 	add	r17,r16,r17
 8021048:	9c400515 	stw	r17,20(r19)
 802104c:	9c400415 	stw	r17,16(r19)
 8021050:	18800054 	ori	r2,r3,1
 8021054:	88800115 	stw	r2,4(r17)
 8021058:	8a000315 	stw	r8,12(r17)
 802105c:	8a000215 	stw	r8,8(r17)
 8021060:	88e3883a 	add	r17,r17,r3
 8021064:	88c00015 	stw	r3,0(r17)
 8021068:	9009883a 	mov	r4,r18
 802106c:	80236a00 	call	80236a0 <__malloc_unlock>
 8021070:	80800204 	addi	r2,r16,8
 8021074:	00001b06 	br	80210e4 <_malloc_r+0x2a4>
 8021078:	04400404 	movi	r17,16
 802107c:	89402536 	bltu	r17,r5,8021114 <_malloc_r+0x2d4>
 8021080:	802367c0 	call	802367c <__malloc_lock>
 8021084:	00800184 	movi	r2,6
 8021088:	01000084 	movi	r4,2
 802108c:	04c200b4 	movhi	r19,2050
 8021090:	1085883a 	add	r2,r2,r2
 8021094:	9cd6fb04 	addi	r19,r19,23532
 8021098:	1085883a 	add	r2,r2,r2
 802109c:	9885883a 	add	r2,r19,r2
 80210a0:	14000117 	ldw	r16,4(r2)
 80210a4:	10fffe04 	addi	r3,r2,-8
 80210a8:	80c0d926 	beq	r16,r3,8021410 <_malloc_r+0x5d0>
 80210ac:	80c00117 	ldw	r3,4(r16)
 80210b0:	81000317 	ldw	r4,12(r16)
 80210b4:	00bfff04 	movi	r2,-4
 80210b8:	1884703a 	and	r2,r3,r2
 80210bc:	81400217 	ldw	r5,8(r16)
 80210c0:	8085883a 	add	r2,r16,r2
 80210c4:	10c00117 	ldw	r3,4(r2)
 80210c8:	29000315 	stw	r4,12(r5)
 80210cc:	21400215 	stw	r5,8(r4)
 80210d0:	18c00054 	ori	r3,r3,1
 80210d4:	10c00115 	stw	r3,4(r2)
 80210d8:	9009883a 	mov	r4,r18
 80210dc:	80236a00 	call	80236a0 <__malloc_unlock>
 80210e0:	80800204 	addi	r2,r16,8
 80210e4:	dfc00a17 	ldw	ra,40(sp)
 80210e8:	df000917 	ldw	fp,36(sp)
 80210ec:	ddc00817 	ldw	r23,32(sp)
 80210f0:	dd800717 	ldw	r22,28(sp)
 80210f4:	dd400617 	ldw	r21,24(sp)
 80210f8:	dd000517 	ldw	r20,20(sp)
 80210fc:	dcc00417 	ldw	r19,16(sp)
 8021100:	dc800317 	ldw	r18,12(sp)
 8021104:	dc400217 	ldw	r17,8(sp)
 8021108:	dc000117 	ldw	r16,4(sp)
 802110c:	dec00b04 	addi	sp,sp,44
 8021110:	f800283a 	ret
 8021114:	00800304 	movi	r2,12
 8021118:	90800015 	stw	r2,0(r18)
 802111c:	0005883a 	mov	r2,zero
 8021120:	003ff006 	br	80210e4 <__alt_data_end+0xfffe1ce4>
 8021124:	01002004 	movi	r4,128
 8021128:	02001004 	movi	r8,64
 802112c:	01c00fc4 	movi	r7,63
 8021130:	003f6106 	br	8020eb8 <__alt_data_end+0xfffe1ab8>
 8021134:	4009883a 	mov	r4,r8
 8021138:	003f7506 	br	8020f10 <__alt_data_end+0xfffe1b10>
 802113c:	81000317 	ldw	r4,12(r16)
 8021140:	003fde06 	br	80210bc <__alt_data_end+0xfffe1cbc>
 8021144:	81c5883a 	add	r2,r16,r7
 8021148:	11400117 	ldw	r5,4(r2)
 802114c:	9009883a 	mov	r4,r18
 8021150:	29400054 	ori	r5,r5,1
 8021154:	11400115 	stw	r5,4(r2)
 8021158:	80236a00 	call	80236a0 <__malloc_unlock>
 802115c:	80800204 	addi	r2,r16,8
 8021160:	003fe006 	br	80210e4 <__alt_data_end+0xfffe1ce4>
 8021164:	9c000217 	ldw	r16,8(r19)
 8021168:	00bfff04 	movi	r2,-4
 802116c:	85800117 	ldw	r22,4(r16)
 8021170:	b0ac703a 	and	r22,r22,r2
 8021174:	b4400336 	bltu	r22,r17,8021184 <_malloc_r+0x344>
 8021178:	b445c83a 	sub	r2,r22,r17
 802117c:	00c003c4 	movi	r3,15
 8021180:	18805d16 	blt	r3,r2,80212f8 <_malloc_r+0x4b8>
 8021184:	05c200b4 	movhi	r23,2050
 8021188:	008200f4 	movhi	r2,2051
 802118c:	10a32a04 	addi	r2,r2,-29528
 8021190:	bddc8104 	addi	r23,r23,29188
 8021194:	15400017 	ldw	r21,0(r2)
 8021198:	b8c00017 	ldw	r3,0(r23)
 802119c:	00bfffc4 	movi	r2,-1
 80211a0:	858d883a 	add	r6,r16,r22
 80211a4:	8d6b883a 	add	r21,r17,r21
 80211a8:	1880ea26 	beq	r3,r2,8021554 <_malloc_r+0x714>
 80211ac:	ad4403c4 	addi	r21,r21,4111
 80211b0:	00bc0004 	movi	r2,-4096
 80211b4:	a8aa703a 	and	r21,r21,r2
 80211b8:	a80b883a 	mov	r5,r21
 80211bc:	9009883a 	mov	r4,r18
 80211c0:	d9800015 	stw	r6,0(sp)
 80211c4:	80220600 	call	8022060 <_sbrk_r>
 80211c8:	1029883a 	mov	r20,r2
 80211cc:	00bfffc4 	movi	r2,-1
 80211d0:	d9800017 	ldw	r6,0(sp)
 80211d4:	a080e826 	beq	r20,r2,8021578 <_malloc_r+0x738>
 80211d8:	a180a636 	bltu	r20,r6,8021474 <_malloc_r+0x634>
 80211dc:	070200f4 	movhi	fp,2051
 80211e0:	e7233304 	addi	fp,fp,-29492
 80211e4:	e0800017 	ldw	r2,0(fp)
 80211e8:	a887883a 	add	r3,r21,r2
 80211ec:	e0c00015 	stw	r3,0(fp)
 80211f0:	3500e626 	beq	r6,r20,802158c <_malloc_r+0x74c>
 80211f4:	b9000017 	ldw	r4,0(r23)
 80211f8:	00bfffc4 	movi	r2,-1
 80211fc:	2080ee26 	beq	r4,r2,80215b8 <_malloc_r+0x778>
 8021200:	a185c83a 	sub	r2,r20,r6
 8021204:	10c5883a 	add	r2,r2,r3
 8021208:	e0800015 	stw	r2,0(fp)
 802120c:	a0c001cc 	andi	r3,r20,7
 8021210:	1800bc26 	beq	r3,zero,8021504 <_malloc_r+0x6c4>
 8021214:	a0e9c83a 	sub	r20,r20,r3
 8021218:	00840204 	movi	r2,4104
 802121c:	a5000204 	addi	r20,r20,8
 8021220:	10c7c83a 	sub	r3,r2,r3
 8021224:	a545883a 	add	r2,r20,r21
 8021228:	1083ffcc 	andi	r2,r2,4095
 802122c:	18abc83a 	sub	r21,r3,r2
 8021230:	a80b883a 	mov	r5,r21
 8021234:	9009883a 	mov	r4,r18
 8021238:	80220600 	call	8022060 <_sbrk_r>
 802123c:	00ffffc4 	movi	r3,-1
 8021240:	10c0e126 	beq	r2,r3,80215c8 <_malloc_r+0x788>
 8021244:	1505c83a 	sub	r2,r2,r20
 8021248:	1545883a 	add	r2,r2,r21
 802124c:	10800054 	ori	r2,r2,1
 8021250:	e0c00017 	ldw	r3,0(fp)
 8021254:	9d000215 	stw	r20,8(r19)
 8021258:	a0800115 	stw	r2,4(r20)
 802125c:	a8c7883a 	add	r3,r21,r3
 8021260:	e0c00015 	stw	r3,0(fp)
 8021264:	84c00e26 	beq	r16,r19,80212a0 <_malloc_r+0x460>
 8021268:	018003c4 	movi	r6,15
 802126c:	3580a72e 	bgeu	r6,r22,802150c <_malloc_r+0x6cc>
 8021270:	81400117 	ldw	r5,4(r16)
 8021274:	013ffe04 	movi	r4,-8
 8021278:	b0bffd04 	addi	r2,r22,-12
 802127c:	1104703a 	and	r2,r2,r4
 8021280:	2900004c 	andi	r4,r5,1
 8021284:	2088b03a 	or	r4,r4,r2
 8021288:	81000115 	stw	r4,4(r16)
 802128c:	01400144 	movi	r5,5
 8021290:	8089883a 	add	r4,r16,r2
 8021294:	21400115 	stw	r5,4(r4)
 8021298:	21400215 	stw	r5,8(r4)
 802129c:	3080cd36 	bltu	r6,r2,80215d4 <_malloc_r+0x794>
 80212a0:	008200f4 	movhi	r2,2051
 80212a4:	10a32904 	addi	r2,r2,-29532
 80212a8:	11000017 	ldw	r4,0(r2)
 80212ac:	20c0012e 	bgeu	r4,r3,80212b4 <_malloc_r+0x474>
 80212b0:	10c00015 	stw	r3,0(r2)
 80212b4:	008200f4 	movhi	r2,2051
 80212b8:	10a32804 	addi	r2,r2,-29536
 80212bc:	11000017 	ldw	r4,0(r2)
 80212c0:	9c000217 	ldw	r16,8(r19)
 80212c4:	20c0012e 	bgeu	r4,r3,80212cc <_malloc_r+0x48c>
 80212c8:	10c00015 	stw	r3,0(r2)
 80212cc:	80c00117 	ldw	r3,4(r16)
 80212d0:	00bfff04 	movi	r2,-4
 80212d4:	1886703a 	and	r3,r3,r2
 80212d8:	1c45c83a 	sub	r2,r3,r17
 80212dc:	1c400236 	bltu	r3,r17,80212e8 <_malloc_r+0x4a8>
 80212e0:	00c003c4 	movi	r3,15
 80212e4:	18800416 	blt	r3,r2,80212f8 <_malloc_r+0x4b8>
 80212e8:	9009883a 	mov	r4,r18
 80212ec:	80236a00 	call	80236a0 <__malloc_unlock>
 80212f0:	0005883a 	mov	r2,zero
 80212f4:	003f7b06 	br	80210e4 <__alt_data_end+0xfffe1ce4>
 80212f8:	88c00054 	ori	r3,r17,1
 80212fc:	80c00115 	stw	r3,4(r16)
 8021300:	8463883a 	add	r17,r16,r17
 8021304:	10800054 	ori	r2,r2,1
 8021308:	9c400215 	stw	r17,8(r19)
 802130c:	88800115 	stw	r2,4(r17)
 8021310:	9009883a 	mov	r4,r18
 8021314:	80236a00 	call	80236a0 <__malloc_unlock>
 8021318:	80800204 	addi	r2,r16,8
 802131c:	003f7106 	br	80210e4 <__alt_data_end+0xfffe1ce4>
 8021320:	00c00504 	movi	r3,20
 8021324:	18804a2e 	bgeu	r3,r2,8021450 <_malloc_r+0x610>
 8021328:	00c01504 	movi	r3,84
 802132c:	18806e36 	bltu	r3,r2,80214e8 <_malloc_r+0x6a8>
 8021330:	8804d33a 	srli	r2,r17,12
 8021334:	12001bc4 	addi	r8,r2,111
 8021338:	11c01b84 	addi	r7,r2,110
 802133c:	4209883a 	add	r4,r8,r8
 8021340:	003edd06 	br	8020eb8 <__alt_data_end+0xfffe1ab8>
 8021344:	3804d27a 	srli	r2,r7,9
 8021348:	00c00104 	movi	r3,4
 802134c:	1880442e 	bgeu	r3,r2,8021460 <_malloc_r+0x620>
 8021350:	00c00504 	movi	r3,20
 8021354:	18808136 	bltu	r3,r2,802155c <_malloc_r+0x71c>
 8021358:	11401704 	addi	r5,r2,92
 802135c:	10c016c4 	addi	r3,r2,91
 8021360:	294b883a 	add	r5,r5,r5
 8021364:	294b883a 	add	r5,r5,r5
 8021368:	294b883a 	add	r5,r5,r5
 802136c:	994b883a 	add	r5,r19,r5
 8021370:	28800017 	ldw	r2,0(r5)
 8021374:	018200b4 	movhi	r6,2050
 8021378:	297ffe04 	addi	r5,r5,-8
 802137c:	3196fb04 	addi	r6,r6,23532
 8021380:	28806526 	beq	r5,r2,8021518 <_malloc_r+0x6d8>
 8021384:	01bfff04 	movi	r6,-4
 8021388:	10c00117 	ldw	r3,4(r2)
 802138c:	1986703a 	and	r3,r3,r6
 8021390:	38c0022e 	bgeu	r7,r3,802139c <_malloc_r+0x55c>
 8021394:	10800217 	ldw	r2,8(r2)
 8021398:	28bffb1e 	bne	r5,r2,8021388 <__alt_data_end+0xfffe1f88>
 802139c:	11400317 	ldw	r5,12(r2)
 80213a0:	98c00117 	ldw	r3,4(r19)
 80213a4:	81400315 	stw	r5,12(r16)
 80213a8:	80800215 	stw	r2,8(r16)
 80213ac:	2c000215 	stw	r16,8(r5)
 80213b0:	14000315 	stw	r16,12(r2)
 80213b4:	003ef806 	br	8020f98 <__alt_data_end+0xfffe1b98>
 80213b8:	88c00054 	ori	r3,r17,1
 80213bc:	80c00115 	stw	r3,4(r16)
 80213c0:	8463883a 	add	r17,r16,r17
 80213c4:	34400515 	stw	r17,20(r6)
 80213c8:	34400415 	stw	r17,16(r6)
 80213cc:	10c00054 	ori	r3,r2,1
 80213d0:	8a000315 	stw	r8,12(r17)
 80213d4:	8a000215 	stw	r8,8(r17)
 80213d8:	88c00115 	stw	r3,4(r17)
 80213dc:	88a3883a 	add	r17,r17,r2
 80213e0:	88800015 	stw	r2,0(r17)
 80213e4:	9009883a 	mov	r4,r18
 80213e8:	80236a00 	call	80236a0 <__malloc_unlock>
 80213ec:	80800204 	addi	r2,r16,8
 80213f0:	003f3c06 	br	80210e4 <__alt_data_end+0xfffe1ce4>
 80213f4:	30c00117 	ldw	r3,4(r6)
 80213f8:	003ee706 	br	8020f98 <__alt_data_end+0xfffe1b98>
 80213fc:	5ac00044 	addi	r11,r11,1
 8021400:	588000cc 	andi	r2,r11,3
 8021404:	31800204 	addi	r6,r6,8
 8021408:	103efd1e 	bne	r2,zero,8021000 <__alt_data_end+0xfffe1c00>
 802140c:	00002406 	br	80214a0 <_malloc_r+0x660>
 8021410:	14000317 	ldw	r16,12(r2)
 8021414:	143f251e 	bne	r2,r16,80210ac <__alt_data_end+0xfffe1cac>
 8021418:	21000084 	addi	r4,r4,2
 802141c:	003ebc06 	br	8020f10 <__alt_data_end+0xfffe1b10>
 8021420:	8085883a 	add	r2,r16,r2
 8021424:	10c00117 	ldw	r3,4(r2)
 8021428:	81000317 	ldw	r4,12(r16)
 802142c:	81400217 	ldw	r5,8(r16)
 8021430:	18c00054 	ori	r3,r3,1
 8021434:	10c00115 	stw	r3,4(r2)
 8021438:	29000315 	stw	r4,12(r5)
 802143c:	21400215 	stw	r5,8(r4)
 8021440:	9009883a 	mov	r4,r18
 8021444:	80236a00 	call	80236a0 <__malloc_unlock>
 8021448:	80800204 	addi	r2,r16,8
 802144c:	003f2506 	br	80210e4 <__alt_data_end+0xfffe1ce4>
 8021450:	12001704 	addi	r8,r2,92
 8021454:	11c016c4 	addi	r7,r2,91
 8021458:	4209883a 	add	r4,r8,r8
 802145c:	003e9606 	br	8020eb8 <__alt_data_end+0xfffe1ab8>
 8021460:	3804d1ba 	srli	r2,r7,6
 8021464:	11400e44 	addi	r5,r2,57
 8021468:	10c00e04 	addi	r3,r2,56
 802146c:	294b883a 	add	r5,r5,r5
 8021470:	003fbc06 	br	8021364 <__alt_data_end+0xfffe1f64>
 8021474:	84ff5926 	beq	r16,r19,80211dc <__alt_data_end+0xfffe1ddc>
 8021478:	008200b4 	movhi	r2,2050
 802147c:	1096fb04 	addi	r2,r2,23532
 8021480:	14000217 	ldw	r16,8(r2)
 8021484:	00bfff04 	movi	r2,-4
 8021488:	80c00117 	ldw	r3,4(r16)
 802148c:	1886703a 	and	r3,r3,r2
 8021490:	003f9106 	br	80212d8 <__alt_data_end+0xfffe1ed8>
 8021494:	60800217 	ldw	r2,8(r12)
 8021498:	213fffc4 	addi	r4,r4,-1
 802149c:	1300651e 	bne	r2,r12,8021634 <_malloc_r+0x7f4>
 80214a0:	208000cc 	andi	r2,r4,3
 80214a4:	633ffe04 	addi	r12,r12,-8
 80214a8:	103ffa1e 	bne	r2,zero,8021494 <__alt_data_end+0xfffe2094>
 80214ac:	98800117 	ldw	r2,4(r19)
 80214b0:	0146303a 	nor	r3,zero,r5
 80214b4:	1884703a 	and	r2,r3,r2
 80214b8:	98800115 	stw	r2,4(r19)
 80214bc:	294b883a 	add	r5,r5,r5
 80214c0:	117f2836 	bltu	r2,r5,8021164 <__alt_data_end+0xfffe1d64>
 80214c4:	283f2726 	beq	r5,zero,8021164 <__alt_data_end+0xfffe1d64>
 80214c8:	2886703a 	and	r3,r5,r2
 80214cc:	5809883a 	mov	r4,r11
 80214d0:	183ec31e 	bne	r3,zero,8020fe0 <__alt_data_end+0xfffe1be0>
 80214d4:	294b883a 	add	r5,r5,r5
 80214d8:	2886703a 	and	r3,r5,r2
 80214dc:	21000104 	addi	r4,r4,4
 80214e0:	183ffc26 	beq	r3,zero,80214d4 <__alt_data_end+0xfffe20d4>
 80214e4:	003ebe06 	br	8020fe0 <__alt_data_end+0xfffe1be0>
 80214e8:	00c05504 	movi	r3,340
 80214ec:	18801236 	bltu	r3,r2,8021538 <_malloc_r+0x6f8>
 80214f0:	8804d3fa 	srli	r2,r17,15
 80214f4:	12001e04 	addi	r8,r2,120
 80214f8:	11c01dc4 	addi	r7,r2,119
 80214fc:	4209883a 	add	r4,r8,r8
 8021500:	003e6d06 	br	8020eb8 <__alt_data_end+0xfffe1ab8>
 8021504:	00c40004 	movi	r3,4096
 8021508:	003f4606 	br	8021224 <__alt_data_end+0xfffe1e24>
 802150c:	00800044 	movi	r2,1
 8021510:	a0800115 	stw	r2,4(r20)
 8021514:	003f7406 	br	80212e8 <__alt_data_end+0xfffe1ee8>
 8021518:	1805d0ba 	srai	r2,r3,2
 802151c:	01c00044 	movi	r7,1
 8021520:	30c00117 	ldw	r3,4(r6)
 8021524:	388e983a 	sll	r7,r7,r2
 8021528:	2805883a 	mov	r2,r5
 802152c:	38c6b03a 	or	r3,r7,r3
 8021530:	30c00115 	stw	r3,4(r6)
 8021534:	003f9b06 	br	80213a4 <__alt_data_end+0xfffe1fa4>
 8021538:	00c15504 	movi	r3,1364
 802153c:	18801a36 	bltu	r3,r2,80215a8 <_malloc_r+0x768>
 8021540:	8804d4ba 	srli	r2,r17,18
 8021544:	12001f44 	addi	r8,r2,125
 8021548:	11c01f04 	addi	r7,r2,124
 802154c:	4209883a 	add	r4,r8,r8
 8021550:	003e5906 	br	8020eb8 <__alt_data_end+0xfffe1ab8>
 8021554:	ad400404 	addi	r21,r21,16
 8021558:	003f1706 	br	80211b8 <__alt_data_end+0xfffe1db8>
 802155c:	00c01504 	movi	r3,84
 8021560:	18802336 	bltu	r3,r2,80215f0 <_malloc_r+0x7b0>
 8021564:	3804d33a 	srli	r2,r7,12
 8021568:	11401bc4 	addi	r5,r2,111
 802156c:	10c01b84 	addi	r3,r2,110
 8021570:	294b883a 	add	r5,r5,r5
 8021574:	003f7b06 	br	8021364 <__alt_data_end+0xfffe1f64>
 8021578:	9c000217 	ldw	r16,8(r19)
 802157c:	00bfff04 	movi	r2,-4
 8021580:	80c00117 	ldw	r3,4(r16)
 8021584:	1886703a 	and	r3,r3,r2
 8021588:	003f5306 	br	80212d8 <__alt_data_end+0xfffe1ed8>
 802158c:	3083ffcc 	andi	r2,r6,4095
 8021590:	103f181e 	bne	r2,zero,80211f4 <__alt_data_end+0xfffe1df4>
 8021594:	99000217 	ldw	r4,8(r19)
 8021598:	b545883a 	add	r2,r22,r21
 802159c:	10800054 	ori	r2,r2,1
 80215a0:	20800115 	stw	r2,4(r4)
 80215a4:	003f3e06 	br	80212a0 <__alt_data_end+0xfffe1ea0>
 80215a8:	01003f84 	movi	r4,254
 80215ac:	02001fc4 	movi	r8,127
 80215b0:	01c01f84 	movi	r7,126
 80215b4:	003e4006 	br	8020eb8 <__alt_data_end+0xfffe1ab8>
 80215b8:	008200b4 	movhi	r2,2050
 80215bc:	109c8104 	addi	r2,r2,29188
 80215c0:	15000015 	stw	r20,0(r2)
 80215c4:	003f1106 	br	802120c <__alt_data_end+0xfffe1e0c>
 80215c8:	00800044 	movi	r2,1
 80215cc:	002b883a 	mov	r21,zero
 80215d0:	003f1f06 	br	8021250 <__alt_data_end+0xfffe1e50>
 80215d4:	81400204 	addi	r5,r16,8
 80215d8:	9009883a 	mov	r4,r18
 80215dc:	80228c80 	call	80228c8 <_free_r>
 80215e0:	008200f4 	movhi	r2,2051
 80215e4:	10a33304 	addi	r2,r2,-29492
 80215e8:	10c00017 	ldw	r3,0(r2)
 80215ec:	003f2c06 	br	80212a0 <__alt_data_end+0xfffe1ea0>
 80215f0:	00c05504 	movi	r3,340
 80215f4:	18800536 	bltu	r3,r2,802160c <_malloc_r+0x7cc>
 80215f8:	3804d3fa 	srli	r2,r7,15
 80215fc:	11401e04 	addi	r5,r2,120
 8021600:	10c01dc4 	addi	r3,r2,119
 8021604:	294b883a 	add	r5,r5,r5
 8021608:	003f5606 	br	8021364 <__alt_data_end+0xfffe1f64>
 802160c:	00c15504 	movi	r3,1364
 8021610:	18800536 	bltu	r3,r2,8021628 <_malloc_r+0x7e8>
 8021614:	3804d4ba 	srli	r2,r7,18
 8021618:	11401f44 	addi	r5,r2,125
 802161c:	10c01f04 	addi	r3,r2,124
 8021620:	294b883a 	add	r5,r5,r5
 8021624:	003f4f06 	br	8021364 <__alt_data_end+0xfffe1f64>
 8021628:	01403f84 	movi	r5,254
 802162c:	00c01f84 	movi	r3,126
 8021630:	003f4c06 	br	8021364 <__alt_data_end+0xfffe1f64>
 8021634:	98800117 	ldw	r2,4(r19)
 8021638:	003fa006 	br	80214bc <__alt_data_end+0xfffe20bc>
 802163c:	8808d0fa 	srli	r4,r17,3
 8021640:	20800044 	addi	r2,r4,1
 8021644:	1085883a 	add	r2,r2,r2
 8021648:	003e9006 	br	802108c <__alt_data_end+0xfffe1c8c>

0802164c <memchr>:
 802164c:	208000cc 	andi	r2,r4,3
 8021650:	280f883a 	mov	r7,r5
 8021654:	10003426 	beq	r2,zero,8021728 <memchr+0xdc>
 8021658:	30bfffc4 	addi	r2,r6,-1
 802165c:	30001a26 	beq	r6,zero,80216c8 <memchr+0x7c>
 8021660:	20c00003 	ldbu	r3,0(r4)
 8021664:	29803fcc 	andi	r6,r5,255
 8021668:	30c0051e 	bne	r6,r3,8021680 <memchr+0x34>
 802166c:	00001806 	br	80216d0 <memchr+0x84>
 8021670:	10001526 	beq	r2,zero,80216c8 <memchr+0x7c>
 8021674:	20c00003 	ldbu	r3,0(r4)
 8021678:	10bfffc4 	addi	r2,r2,-1
 802167c:	30c01426 	beq	r6,r3,80216d0 <memchr+0x84>
 8021680:	21000044 	addi	r4,r4,1
 8021684:	20c000cc 	andi	r3,r4,3
 8021688:	183ff91e 	bne	r3,zero,8021670 <__alt_data_end+0xfffe2270>
 802168c:	020000c4 	movi	r8,3
 8021690:	40801136 	bltu	r8,r2,80216d8 <memchr+0x8c>
 8021694:	10000c26 	beq	r2,zero,80216c8 <memchr+0x7c>
 8021698:	20c00003 	ldbu	r3,0(r4)
 802169c:	29403fcc 	andi	r5,r5,255
 80216a0:	28c00b26 	beq	r5,r3,80216d0 <memchr+0x84>
 80216a4:	20c00044 	addi	r3,r4,1
 80216a8:	39803fcc 	andi	r6,r7,255
 80216ac:	2089883a 	add	r4,r4,r2
 80216b0:	00000306 	br	80216c0 <memchr+0x74>
 80216b4:	18c00044 	addi	r3,r3,1
 80216b8:	197fffc3 	ldbu	r5,-1(r3)
 80216bc:	31400526 	beq	r6,r5,80216d4 <memchr+0x88>
 80216c0:	1805883a 	mov	r2,r3
 80216c4:	20fffb1e 	bne	r4,r3,80216b4 <__alt_data_end+0xfffe22b4>
 80216c8:	0005883a 	mov	r2,zero
 80216cc:	f800283a 	ret
 80216d0:	2005883a 	mov	r2,r4
 80216d4:	f800283a 	ret
 80216d8:	28c03fcc 	andi	r3,r5,255
 80216dc:	1812923a 	slli	r9,r3,8
 80216e0:	02ffbff4 	movhi	r11,65279
 80216e4:	02a02074 	movhi	r10,32897
 80216e8:	48d2b03a 	or	r9,r9,r3
 80216ec:	4806943a 	slli	r3,r9,16
 80216f0:	5affbfc4 	addi	r11,r11,-257
 80216f4:	52a02004 	addi	r10,r10,-32640
 80216f8:	48d2b03a 	or	r9,r9,r3
 80216fc:	20c00017 	ldw	r3,0(r4)
 8021700:	48c6f03a 	xor	r3,r9,r3
 8021704:	1acd883a 	add	r6,r3,r11
 8021708:	00c6303a 	nor	r3,zero,r3
 802170c:	30c6703a 	and	r3,r6,r3
 8021710:	1a86703a 	and	r3,r3,r10
 8021714:	183fe01e 	bne	r3,zero,8021698 <__alt_data_end+0xfffe2298>
 8021718:	10bfff04 	addi	r2,r2,-4
 802171c:	21000104 	addi	r4,r4,4
 8021720:	40bff636 	bltu	r8,r2,80216fc <__alt_data_end+0xfffe22fc>
 8021724:	003fdb06 	br	8021694 <__alt_data_end+0xfffe2294>
 8021728:	3005883a 	mov	r2,r6
 802172c:	003fd706 	br	802168c <__alt_data_end+0xfffe228c>

08021730 <memcpy>:
 8021730:	defffd04 	addi	sp,sp,-12
 8021734:	dfc00215 	stw	ra,8(sp)
 8021738:	dc400115 	stw	r17,4(sp)
 802173c:	dc000015 	stw	r16,0(sp)
 8021740:	00c003c4 	movi	r3,15
 8021744:	2005883a 	mov	r2,r4
 8021748:	1980452e 	bgeu	r3,r6,8021860 <memcpy+0x130>
 802174c:	2906b03a 	or	r3,r5,r4
 8021750:	18c000cc 	andi	r3,r3,3
 8021754:	1800441e 	bne	r3,zero,8021868 <memcpy+0x138>
 8021758:	347ffc04 	addi	r17,r6,-16
 802175c:	8822d13a 	srli	r17,r17,4
 8021760:	28c00104 	addi	r3,r5,4
 8021764:	23400104 	addi	r13,r4,4
 8021768:	8820913a 	slli	r16,r17,4
 802176c:	2b000204 	addi	r12,r5,8
 8021770:	22c00204 	addi	r11,r4,8
 8021774:	84000504 	addi	r16,r16,20
 8021778:	2a800304 	addi	r10,r5,12
 802177c:	22400304 	addi	r9,r4,12
 8021780:	2c21883a 	add	r16,r5,r16
 8021784:	2811883a 	mov	r8,r5
 8021788:	200f883a 	mov	r7,r4
 802178c:	41000017 	ldw	r4,0(r8)
 8021790:	1fc00017 	ldw	ra,0(r3)
 8021794:	63c00017 	ldw	r15,0(r12)
 8021798:	39000015 	stw	r4,0(r7)
 802179c:	53800017 	ldw	r14,0(r10)
 80217a0:	6fc00015 	stw	ra,0(r13)
 80217a4:	5bc00015 	stw	r15,0(r11)
 80217a8:	4b800015 	stw	r14,0(r9)
 80217ac:	18c00404 	addi	r3,r3,16
 80217b0:	39c00404 	addi	r7,r7,16
 80217b4:	42000404 	addi	r8,r8,16
 80217b8:	6b400404 	addi	r13,r13,16
 80217bc:	63000404 	addi	r12,r12,16
 80217c0:	5ac00404 	addi	r11,r11,16
 80217c4:	52800404 	addi	r10,r10,16
 80217c8:	4a400404 	addi	r9,r9,16
 80217cc:	1c3fef1e 	bne	r3,r16,802178c <__alt_data_end+0xfffe238c>
 80217d0:	89c00044 	addi	r7,r17,1
 80217d4:	380e913a 	slli	r7,r7,4
 80217d8:	310003cc 	andi	r4,r6,15
 80217dc:	02c000c4 	movi	r11,3
 80217e0:	11c7883a 	add	r3,r2,r7
 80217e4:	29cb883a 	add	r5,r5,r7
 80217e8:	5900212e 	bgeu	r11,r4,8021870 <memcpy+0x140>
 80217ec:	1813883a 	mov	r9,r3
 80217f0:	2811883a 	mov	r8,r5
 80217f4:	200f883a 	mov	r7,r4
 80217f8:	42800017 	ldw	r10,0(r8)
 80217fc:	4a400104 	addi	r9,r9,4
 8021800:	39ffff04 	addi	r7,r7,-4
 8021804:	4abfff15 	stw	r10,-4(r9)
 8021808:	42000104 	addi	r8,r8,4
 802180c:	59fffa36 	bltu	r11,r7,80217f8 <__alt_data_end+0xfffe23f8>
 8021810:	213fff04 	addi	r4,r4,-4
 8021814:	2008d0ba 	srli	r4,r4,2
 8021818:	318000cc 	andi	r6,r6,3
 802181c:	21000044 	addi	r4,r4,1
 8021820:	2109883a 	add	r4,r4,r4
 8021824:	2109883a 	add	r4,r4,r4
 8021828:	1907883a 	add	r3,r3,r4
 802182c:	290b883a 	add	r5,r5,r4
 8021830:	30000626 	beq	r6,zero,802184c <memcpy+0x11c>
 8021834:	198d883a 	add	r6,r3,r6
 8021838:	29c00003 	ldbu	r7,0(r5)
 802183c:	18c00044 	addi	r3,r3,1
 8021840:	29400044 	addi	r5,r5,1
 8021844:	19ffffc5 	stb	r7,-1(r3)
 8021848:	19bffb1e 	bne	r3,r6,8021838 <__alt_data_end+0xfffe2438>
 802184c:	dfc00217 	ldw	ra,8(sp)
 8021850:	dc400117 	ldw	r17,4(sp)
 8021854:	dc000017 	ldw	r16,0(sp)
 8021858:	dec00304 	addi	sp,sp,12
 802185c:	f800283a 	ret
 8021860:	2007883a 	mov	r3,r4
 8021864:	003ff206 	br	8021830 <__alt_data_end+0xfffe2430>
 8021868:	2007883a 	mov	r3,r4
 802186c:	003ff106 	br	8021834 <__alt_data_end+0xfffe2434>
 8021870:	200d883a 	mov	r6,r4
 8021874:	003fee06 	br	8021830 <__alt_data_end+0xfffe2430>

08021878 <memmove>:
 8021878:	2005883a 	mov	r2,r4
 802187c:	29000b2e 	bgeu	r5,r4,80218ac <memmove+0x34>
 8021880:	298f883a 	add	r7,r5,r6
 8021884:	21c0092e 	bgeu	r4,r7,80218ac <memmove+0x34>
 8021888:	2187883a 	add	r3,r4,r6
 802188c:	198bc83a 	sub	r5,r3,r6
 8021890:	30004826 	beq	r6,zero,80219b4 <memmove+0x13c>
 8021894:	39ffffc4 	addi	r7,r7,-1
 8021898:	39000003 	ldbu	r4,0(r7)
 802189c:	18ffffc4 	addi	r3,r3,-1
 80218a0:	19000005 	stb	r4,0(r3)
 80218a4:	28fffb1e 	bne	r5,r3,8021894 <__alt_data_end+0xfffe2494>
 80218a8:	f800283a 	ret
 80218ac:	00c003c4 	movi	r3,15
 80218b0:	1980412e 	bgeu	r3,r6,80219b8 <memmove+0x140>
 80218b4:	2886b03a 	or	r3,r5,r2
 80218b8:	18c000cc 	andi	r3,r3,3
 80218bc:	1800401e 	bne	r3,zero,80219c0 <memmove+0x148>
 80218c0:	33fffc04 	addi	r15,r6,-16
 80218c4:	781ed13a 	srli	r15,r15,4
 80218c8:	28c00104 	addi	r3,r5,4
 80218cc:	13400104 	addi	r13,r2,4
 80218d0:	781c913a 	slli	r14,r15,4
 80218d4:	2b000204 	addi	r12,r5,8
 80218d8:	12c00204 	addi	r11,r2,8
 80218dc:	73800504 	addi	r14,r14,20
 80218e0:	2a800304 	addi	r10,r5,12
 80218e4:	12400304 	addi	r9,r2,12
 80218e8:	2b9d883a 	add	r14,r5,r14
 80218ec:	2811883a 	mov	r8,r5
 80218f0:	100f883a 	mov	r7,r2
 80218f4:	41000017 	ldw	r4,0(r8)
 80218f8:	39c00404 	addi	r7,r7,16
 80218fc:	18c00404 	addi	r3,r3,16
 8021900:	393ffc15 	stw	r4,-16(r7)
 8021904:	193ffc17 	ldw	r4,-16(r3)
 8021908:	6b400404 	addi	r13,r13,16
 802190c:	5ac00404 	addi	r11,r11,16
 8021910:	693ffc15 	stw	r4,-16(r13)
 8021914:	61000017 	ldw	r4,0(r12)
 8021918:	4a400404 	addi	r9,r9,16
 802191c:	42000404 	addi	r8,r8,16
 8021920:	593ffc15 	stw	r4,-16(r11)
 8021924:	51000017 	ldw	r4,0(r10)
 8021928:	63000404 	addi	r12,r12,16
 802192c:	52800404 	addi	r10,r10,16
 8021930:	493ffc15 	stw	r4,-16(r9)
 8021934:	1bbfef1e 	bne	r3,r14,80218f4 <__alt_data_end+0xfffe24f4>
 8021938:	79000044 	addi	r4,r15,1
 802193c:	2008913a 	slli	r4,r4,4
 8021940:	328003cc 	andi	r10,r6,15
 8021944:	02c000c4 	movi	r11,3
 8021948:	1107883a 	add	r3,r2,r4
 802194c:	290b883a 	add	r5,r5,r4
 8021950:	5a801e2e 	bgeu	r11,r10,80219cc <memmove+0x154>
 8021954:	1813883a 	mov	r9,r3
 8021958:	2811883a 	mov	r8,r5
 802195c:	500f883a 	mov	r7,r10
 8021960:	41000017 	ldw	r4,0(r8)
 8021964:	4a400104 	addi	r9,r9,4
 8021968:	39ffff04 	addi	r7,r7,-4
 802196c:	493fff15 	stw	r4,-4(r9)
 8021970:	42000104 	addi	r8,r8,4
 8021974:	59fffa36 	bltu	r11,r7,8021960 <__alt_data_end+0xfffe2560>
 8021978:	513fff04 	addi	r4,r10,-4
 802197c:	2008d0ba 	srli	r4,r4,2
 8021980:	318000cc 	andi	r6,r6,3
 8021984:	21000044 	addi	r4,r4,1
 8021988:	2109883a 	add	r4,r4,r4
 802198c:	2109883a 	add	r4,r4,r4
 8021990:	1907883a 	add	r3,r3,r4
 8021994:	290b883a 	add	r5,r5,r4
 8021998:	30000b26 	beq	r6,zero,80219c8 <memmove+0x150>
 802199c:	198d883a 	add	r6,r3,r6
 80219a0:	29c00003 	ldbu	r7,0(r5)
 80219a4:	18c00044 	addi	r3,r3,1
 80219a8:	29400044 	addi	r5,r5,1
 80219ac:	19ffffc5 	stb	r7,-1(r3)
 80219b0:	19bffb1e 	bne	r3,r6,80219a0 <__alt_data_end+0xfffe25a0>
 80219b4:	f800283a 	ret
 80219b8:	1007883a 	mov	r3,r2
 80219bc:	003ff606 	br	8021998 <__alt_data_end+0xfffe2598>
 80219c0:	1007883a 	mov	r3,r2
 80219c4:	003ff506 	br	802199c <__alt_data_end+0xfffe259c>
 80219c8:	f800283a 	ret
 80219cc:	500d883a 	mov	r6,r10
 80219d0:	003ff106 	br	8021998 <__alt_data_end+0xfffe2598>

080219d4 <memset>:
 80219d4:	20c000cc 	andi	r3,r4,3
 80219d8:	2005883a 	mov	r2,r4
 80219dc:	18004426 	beq	r3,zero,8021af0 <memset+0x11c>
 80219e0:	31ffffc4 	addi	r7,r6,-1
 80219e4:	30004026 	beq	r6,zero,8021ae8 <memset+0x114>
 80219e8:	2813883a 	mov	r9,r5
 80219ec:	200d883a 	mov	r6,r4
 80219f0:	2007883a 	mov	r3,r4
 80219f4:	00000406 	br	8021a08 <memset+0x34>
 80219f8:	3a3fffc4 	addi	r8,r7,-1
 80219fc:	31800044 	addi	r6,r6,1
 8021a00:	38003926 	beq	r7,zero,8021ae8 <memset+0x114>
 8021a04:	400f883a 	mov	r7,r8
 8021a08:	18c00044 	addi	r3,r3,1
 8021a0c:	32400005 	stb	r9,0(r6)
 8021a10:	1a0000cc 	andi	r8,r3,3
 8021a14:	403ff81e 	bne	r8,zero,80219f8 <__alt_data_end+0xfffe25f8>
 8021a18:	010000c4 	movi	r4,3
 8021a1c:	21c02d2e 	bgeu	r4,r7,8021ad4 <memset+0x100>
 8021a20:	29003fcc 	andi	r4,r5,255
 8021a24:	200c923a 	slli	r6,r4,8
 8021a28:	3108b03a 	or	r4,r6,r4
 8021a2c:	200c943a 	slli	r6,r4,16
 8021a30:	218cb03a 	or	r6,r4,r6
 8021a34:	010003c4 	movi	r4,15
 8021a38:	21c0182e 	bgeu	r4,r7,8021a9c <memset+0xc8>
 8021a3c:	3b3ffc04 	addi	r12,r7,-16
 8021a40:	6018d13a 	srli	r12,r12,4
 8021a44:	1a000104 	addi	r8,r3,4
 8021a48:	1ac00204 	addi	r11,r3,8
 8021a4c:	6008913a 	slli	r4,r12,4
 8021a50:	1a800304 	addi	r10,r3,12
 8021a54:	1813883a 	mov	r9,r3
 8021a58:	21000504 	addi	r4,r4,20
 8021a5c:	1909883a 	add	r4,r3,r4
 8021a60:	49800015 	stw	r6,0(r9)
 8021a64:	41800015 	stw	r6,0(r8)
 8021a68:	59800015 	stw	r6,0(r11)
 8021a6c:	51800015 	stw	r6,0(r10)
 8021a70:	42000404 	addi	r8,r8,16
 8021a74:	4a400404 	addi	r9,r9,16
 8021a78:	5ac00404 	addi	r11,r11,16
 8021a7c:	52800404 	addi	r10,r10,16
 8021a80:	413ff71e 	bne	r8,r4,8021a60 <__alt_data_end+0xfffe2660>
 8021a84:	63000044 	addi	r12,r12,1
 8021a88:	6018913a 	slli	r12,r12,4
 8021a8c:	39c003cc 	andi	r7,r7,15
 8021a90:	010000c4 	movi	r4,3
 8021a94:	1b07883a 	add	r3,r3,r12
 8021a98:	21c00e2e 	bgeu	r4,r7,8021ad4 <memset+0x100>
 8021a9c:	1813883a 	mov	r9,r3
 8021aa0:	3811883a 	mov	r8,r7
 8021aa4:	010000c4 	movi	r4,3
 8021aa8:	49800015 	stw	r6,0(r9)
 8021aac:	423fff04 	addi	r8,r8,-4
 8021ab0:	4a400104 	addi	r9,r9,4
 8021ab4:	223ffc36 	bltu	r4,r8,8021aa8 <__alt_data_end+0xfffe26a8>
 8021ab8:	393fff04 	addi	r4,r7,-4
 8021abc:	2008d0ba 	srli	r4,r4,2
 8021ac0:	39c000cc 	andi	r7,r7,3
 8021ac4:	21000044 	addi	r4,r4,1
 8021ac8:	2109883a 	add	r4,r4,r4
 8021acc:	2109883a 	add	r4,r4,r4
 8021ad0:	1907883a 	add	r3,r3,r4
 8021ad4:	38000526 	beq	r7,zero,8021aec <memset+0x118>
 8021ad8:	19cf883a 	add	r7,r3,r7
 8021adc:	19400005 	stb	r5,0(r3)
 8021ae0:	18c00044 	addi	r3,r3,1
 8021ae4:	38fffd1e 	bne	r7,r3,8021adc <__alt_data_end+0xfffe26dc>
 8021ae8:	f800283a 	ret
 8021aec:	f800283a 	ret
 8021af0:	2007883a 	mov	r3,r4
 8021af4:	300f883a 	mov	r7,r6
 8021af8:	003fc706 	br	8021a18 <__alt_data_end+0xfffe2618>

08021afc <_realloc_r>:
 8021afc:	defff604 	addi	sp,sp,-40
 8021b00:	dc800215 	stw	r18,8(sp)
 8021b04:	dfc00915 	stw	ra,36(sp)
 8021b08:	df000815 	stw	fp,32(sp)
 8021b0c:	ddc00715 	stw	r23,28(sp)
 8021b10:	dd800615 	stw	r22,24(sp)
 8021b14:	dd400515 	stw	r21,20(sp)
 8021b18:	dd000415 	stw	r20,16(sp)
 8021b1c:	dcc00315 	stw	r19,12(sp)
 8021b20:	dc400115 	stw	r17,4(sp)
 8021b24:	dc000015 	stw	r16,0(sp)
 8021b28:	3025883a 	mov	r18,r6
 8021b2c:	2800b726 	beq	r5,zero,8021e0c <_realloc_r+0x310>
 8021b30:	282b883a 	mov	r21,r5
 8021b34:	2029883a 	mov	r20,r4
 8021b38:	802367c0 	call	802367c <__malloc_lock>
 8021b3c:	a8bfff17 	ldw	r2,-4(r21)
 8021b40:	043fff04 	movi	r16,-4
 8021b44:	90c002c4 	addi	r3,r18,11
 8021b48:	01000584 	movi	r4,22
 8021b4c:	acfffe04 	addi	r19,r21,-8
 8021b50:	1420703a 	and	r16,r2,r16
 8021b54:	20c0332e 	bgeu	r4,r3,8021c24 <_realloc_r+0x128>
 8021b58:	047ffe04 	movi	r17,-8
 8021b5c:	1c62703a 	and	r17,r3,r17
 8021b60:	8807883a 	mov	r3,r17
 8021b64:	88005816 	blt	r17,zero,8021cc8 <_realloc_r+0x1cc>
 8021b68:	8c805736 	bltu	r17,r18,8021cc8 <_realloc_r+0x1cc>
 8021b6c:	80c0300e 	bge	r16,r3,8021c30 <_realloc_r+0x134>
 8021b70:	070200b4 	movhi	fp,2050
 8021b74:	e716fb04 	addi	fp,fp,23532
 8021b78:	e1c00217 	ldw	r7,8(fp)
 8021b7c:	9c09883a 	add	r4,r19,r16
 8021b80:	22000117 	ldw	r8,4(r4)
 8021b84:	21c06326 	beq	r4,r7,8021d14 <_realloc_r+0x218>
 8021b88:	017fff84 	movi	r5,-2
 8021b8c:	414a703a 	and	r5,r8,r5
 8021b90:	214b883a 	add	r5,r4,r5
 8021b94:	29800117 	ldw	r6,4(r5)
 8021b98:	3180004c 	andi	r6,r6,1
 8021b9c:	30003f26 	beq	r6,zero,8021c9c <_realloc_r+0x1a0>
 8021ba0:	1080004c 	andi	r2,r2,1
 8021ba4:	10008326 	beq	r2,zero,8021db4 <_realloc_r+0x2b8>
 8021ba8:	900b883a 	mov	r5,r18
 8021bac:	a009883a 	mov	r4,r20
 8021bb0:	8020e400 	call	8020e40 <_malloc_r>
 8021bb4:	1025883a 	mov	r18,r2
 8021bb8:	10011e26 	beq	r2,zero,8022034 <_realloc_r+0x538>
 8021bbc:	a93fff17 	ldw	r4,-4(r21)
 8021bc0:	10fffe04 	addi	r3,r2,-8
 8021bc4:	00bfff84 	movi	r2,-2
 8021bc8:	2084703a 	and	r2,r4,r2
 8021bcc:	9885883a 	add	r2,r19,r2
 8021bd0:	1880ee26 	beq	r3,r2,8021f8c <_realloc_r+0x490>
 8021bd4:	81bfff04 	addi	r6,r16,-4
 8021bd8:	00800904 	movi	r2,36
 8021bdc:	1180b836 	bltu	r2,r6,8021ec0 <_realloc_r+0x3c4>
 8021be0:	00c004c4 	movi	r3,19
 8021be4:	19809636 	bltu	r3,r6,8021e40 <_realloc_r+0x344>
 8021be8:	9005883a 	mov	r2,r18
 8021bec:	a807883a 	mov	r3,r21
 8021bf0:	19000017 	ldw	r4,0(r3)
 8021bf4:	11000015 	stw	r4,0(r2)
 8021bf8:	19000117 	ldw	r4,4(r3)
 8021bfc:	11000115 	stw	r4,4(r2)
 8021c00:	18c00217 	ldw	r3,8(r3)
 8021c04:	10c00215 	stw	r3,8(r2)
 8021c08:	a80b883a 	mov	r5,r21
 8021c0c:	a009883a 	mov	r4,r20
 8021c10:	80228c80 	call	80228c8 <_free_r>
 8021c14:	a009883a 	mov	r4,r20
 8021c18:	80236a00 	call	80236a0 <__malloc_unlock>
 8021c1c:	9005883a 	mov	r2,r18
 8021c20:	00001206 	br	8021c6c <_realloc_r+0x170>
 8021c24:	00c00404 	movi	r3,16
 8021c28:	1823883a 	mov	r17,r3
 8021c2c:	003fce06 	br	8021b68 <__alt_data_end+0xfffe2768>
 8021c30:	a825883a 	mov	r18,r21
 8021c34:	8445c83a 	sub	r2,r16,r17
 8021c38:	00c003c4 	movi	r3,15
 8021c3c:	18802636 	bltu	r3,r2,8021cd8 <_realloc_r+0x1dc>
 8021c40:	99800117 	ldw	r6,4(r19)
 8021c44:	9c07883a 	add	r3,r19,r16
 8021c48:	3180004c 	andi	r6,r6,1
 8021c4c:	3420b03a 	or	r16,r6,r16
 8021c50:	9c000115 	stw	r16,4(r19)
 8021c54:	18800117 	ldw	r2,4(r3)
 8021c58:	10800054 	ori	r2,r2,1
 8021c5c:	18800115 	stw	r2,4(r3)
 8021c60:	a009883a 	mov	r4,r20
 8021c64:	80236a00 	call	80236a0 <__malloc_unlock>
 8021c68:	9005883a 	mov	r2,r18
 8021c6c:	dfc00917 	ldw	ra,36(sp)
 8021c70:	df000817 	ldw	fp,32(sp)
 8021c74:	ddc00717 	ldw	r23,28(sp)
 8021c78:	dd800617 	ldw	r22,24(sp)
 8021c7c:	dd400517 	ldw	r21,20(sp)
 8021c80:	dd000417 	ldw	r20,16(sp)
 8021c84:	dcc00317 	ldw	r19,12(sp)
 8021c88:	dc800217 	ldw	r18,8(sp)
 8021c8c:	dc400117 	ldw	r17,4(sp)
 8021c90:	dc000017 	ldw	r16,0(sp)
 8021c94:	dec00a04 	addi	sp,sp,40
 8021c98:	f800283a 	ret
 8021c9c:	017fff04 	movi	r5,-4
 8021ca0:	414a703a 	and	r5,r8,r5
 8021ca4:	814d883a 	add	r6,r16,r5
 8021ca8:	30c01f16 	blt	r6,r3,8021d28 <_realloc_r+0x22c>
 8021cac:	20800317 	ldw	r2,12(r4)
 8021cb0:	20c00217 	ldw	r3,8(r4)
 8021cb4:	a825883a 	mov	r18,r21
 8021cb8:	3021883a 	mov	r16,r6
 8021cbc:	18800315 	stw	r2,12(r3)
 8021cc0:	10c00215 	stw	r3,8(r2)
 8021cc4:	003fdb06 	br	8021c34 <__alt_data_end+0xfffe2834>
 8021cc8:	00800304 	movi	r2,12
 8021ccc:	a0800015 	stw	r2,0(r20)
 8021cd0:	0005883a 	mov	r2,zero
 8021cd4:	003fe506 	br	8021c6c <__alt_data_end+0xfffe286c>
 8021cd8:	98c00117 	ldw	r3,4(r19)
 8021cdc:	9c4b883a 	add	r5,r19,r17
 8021ce0:	11000054 	ori	r4,r2,1
 8021ce4:	18c0004c 	andi	r3,r3,1
 8021ce8:	1c62b03a 	or	r17,r3,r17
 8021cec:	9c400115 	stw	r17,4(r19)
 8021cf0:	29000115 	stw	r4,4(r5)
 8021cf4:	2885883a 	add	r2,r5,r2
 8021cf8:	10c00117 	ldw	r3,4(r2)
 8021cfc:	29400204 	addi	r5,r5,8
 8021d00:	a009883a 	mov	r4,r20
 8021d04:	18c00054 	ori	r3,r3,1
 8021d08:	10c00115 	stw	r3,4(r2)
 8021d0c:	80228c80 	call	80228c8 <_free_r>
 8021d10:	003fd306 	br	8021c60 <__alt_data_end+0xfffe2860>
 8021d14:	017fff04 	movi	r5,-4
 8021d18:	414a703a 	and	r5,r8,r5
 8021d1c:	89800404 	addi	r6,r17,16
 8021d20:	8151883a 	add	r8,r16,r5
 8021d24:	4180590e 	bge	r8,r6,8021e8c <_realloc_r+0x390>
 8021d28:	1080004c 	andi	r2,r2,1
 8021d2c:	103f9e1e 	bne	r2,zero,8021ba8 <__alt_data_end+0xfffe27a8>
 8021d30:	adbffe17 	ldw	r22,-8(r21)
 8021d34:	00bfff04 	movi	r2,-4
 8021d38:	9dadc83a 	sub	r22,r19,r22
 8021d3c:	b1800117 	ldw	r6,4(r22)
 8021d40:	3084703a 	and	r2,r6,r2
 8021d44:	20002026 	beq	r4,zero,8021dc8 <_realloc_r+0x2cc>
 8021d48:	80af883a 	add	r23,r16,r2
 8021d4c:	b96f883a 	add	r23,r23,r5
 8021d50:	21c05f26 	beq	r4,r7,8021ed0 <_realloc_r+0x3d4>
 8021d54:	b8c01c16 	blt	r23,r3,8021dc8 <_realloc_r+0x2cc>
 8021d58:	20800317 	ldw	r2,12(r4)
 8021d5c:	20c00217 	ldw	r3,8(r4)
 8021d60:	81bfff04 	addi	r6,r16,-4
 8021d64:	01000904 	movi	r4,36
 8021d68:	18800315 	stw	r2,12(r3)
 8021d6c:	10c00215 	stw	r3,8(r2)
 8021d70:	b0c00217 	ldw	r3,8(r22)
 8021d74:	b0800317 	ldw	r2,12(r22)
 8021d78:	b4800204 	addi	r18,r22,8
 8021d7c:	18800315 	stw	r2,12(r3)
 8021d80:	10c00215 	stw	r3,8(r2)
 8021d84:	21801b36 	bltu	r4,r6,8021df4 <_realloc_r+0x2f8>
 8021d88:	008004c4 	movi	r2,19
 8021d8c:	1180352e 	bgeu	r2,r6,8021e64 <_realloc_r+0x368>
 8021d90:	a8800017 	ldw	r2,0(r21)
 8021d94:	b0800215 	stw	r2,8(r22)
 8021d98:	a8800117 	ldw	r2,4(r21)
 8021d9c:	b0800315 	stw	r2,12(r22)
 8021da0:	008006c4 	movi	r2,27
 8021da4:	11807f36 	bltu	r2,r6,8021fa4 <_realloc_r+0x4a8>
 8021da8:	b0800404 	addi	r2,r22,16
 8021dac:	ad400204 	addi	r21,r21,8
 8021db0:	00002d06 	br	8021e68 <_realloc_r+0x36c>
 8021db4:	adbffe17 	ldw	r22,-8(r21)
 8021db8:	00bfff04 	movi	r2,-4
 8021dbc:	9dadc83a 	sub	r22,r19,r22
 8021dc0:	b1000117 	ldw	r4,4(r22)
 8021dc4:	2084703a 	and	r2,r4,r2
 8021dc8:	b03f7726 	beq	r22,zero,8021ba8 <__alt_data_end+0xfffe27a8>
 8021dcc:	80af883a 	add	r23,r16,r2
 8021dd0:	b8ff7516 	blt	r23,r3,8021ba8 <__alt_data_end+0xfffe27a8>
 8021dd4:	b0800317 	ldw	r2,12(r22)
 8021dd8:	b0c00217 	ldw	r3,8(r22)
 8021ddc:	81bfff04 	addi	r6,r16,-4
 8021de0:	01000904 	movi	r4,36
 8021de4:	18800315 	stw	r2,12(r3)
 8021de8:	10c00215 	stw	r3,8(r2)
 8021dec:	b4800204 	addi	r18,r22,8
 8021df0:	21bfe52e 	bgeu	r4,r6,8021d88 <__alt_data_end+0xfffe2988>
 8021df4:	a80b883a 	mov	r5,r21
 8021df8:	9009883a 	mov	r4,r18
 8021dfc:	80218780 	call	8021878 <memmove>
 8021e00:	b821883a 	mov	r16,r23
 8021e04:	b027883a 	mov	r19,r22
 8021e08:	003f8a06 	br	8021c34 <__alt_data_end+0xfffe2834>
 8021e0c:	300b883a 	mov	r5,r6
 8021e10:	dfc00917 	ldw	ra,36(sp)
 8021e14:	df000817 	ldw	fp,32(sp)
 8021e18:	ddc00717 	ldw	r23,28(sp)
 8021e1c:	dd800617 	ldw	r22,24(sp)
 8021e20:	dd400517 	ldw	r21,20(sp)
 8021e24:	dd000417 	ldw	r20,16(sp)
 8021e28:	dcc00317 	ldw	r19,12(sp)
 8021e2c:	dc800217 	ldw	r18,8(sp)
 8021e30:	dc400117 	ldw	r17,4(sp)
 8021e34:	dc000017 	ldw	r16,0(sp)
 8021e38:	dec00a04 	addi	sp,sp,40
 8021e3c:	8020e401 	jmpi	8020e40 <_malloc_r>
 8021e40:	a8c00017 	ldw	r3,0(r21)
 8021e44:	90c00015 	stw	r3,0(r18)
 8021e48:	a8c00117 	ldw	r3,4(r21)
 8021e4c:	90c00115 	stw	r3,4(r18)
 8021e50:	00c006c4 	movi	r3,27
 8021e54:	19804536 	bltu	r3,r6,8021f6c <_realloc_r+0x470>
 8021e58:	90800204 	addi	r2,r18,8
 8021e5c:	a8c00204 	addi	r3,r21,8
 8021e60:	003f6306 	br	8021bf0 <__alt_data_end+0xfffe27f0>
 8021e64:	9005883a 	mov	r2,r18
 8021e68:	a8c00017 	ldw	r3,0(r21)
 8021e6c:	b821883a 	mov	r16,r23
 8021e70:	b027883a 	mov	r19,r22
 8021e74:	10c00015 	stw	r3,0(r2)
 8021e78:	a8c00117 	ldw	r3,4(r21)
 8021e7c:	10c00115 	stw	r3,4(r2)
 8021e80:	a8c00217 	ldw	r3,8(r21)
 8021e84:	10c00215 	stw	r3,8(r2)
 8021e88:	003f6a06 	br	8021c34 <__alt_data_end+0xfffe2834>
 8021e8c:	9c67883a 	add	r19,r19,r17
 8021e90:	4445c83a 	sub	r2,r8,r17
 8021e94:	e4c00215 	stw	r19,8(fp)
 8021e98:	10800054 	ori	r2,r2,1
 8021e9c:	98800115 	stw	r2,4(r19)
 8021ea0:	a8bfff17 	ldw	r2,-4(r21)
 8021ea4:	a009883a 	mov	r4,r20
 8021ea8:	1080004c 	andi	r2,r2,1
 8021eac:	1462b03a 	or	r17,r2,r17
 8021eb0:	ac7fff15 	stw	r17,-4(r21)
 8021eb4:	80236a00 	call	80236a0 <__malloc_unlock>
 8021eb8:	a805883a 	mov	r2,r21
 8021ebc:	003f6b06 	br	8021c6c <__alt_data_end+0xfffe286c>
 8021ec0:	a80b883a 	mov	r5,r21
 8021ec4:	9009883a 	mov	r4,r18
 8021ec8:	80218780 	call	8021878 <memmove>
 8021ecc:	003f4e06 	br	8021c08 <__alt_data_end+0xfffe2808>
 8021ed0:	89000404 	addi	r4,r17,16
 8021ed4:	b93fbc16 	blt	r23,r4,8021dc8 <__alt_data_end+0xfffe29c8>
 8021ed8:	b0800317 	ldw	r2,12(r22)
 8021edc:	b0c00217 	ldw	r3,8(r22)
 8021ee0:	81bfff04 	addi	r6,r16,-4
 8021ee4:	01000904 	movi	r4,36
 8021ee8:	18800315 	stw	r2,12(r3)
 8021eec:	10c00215 	stw	r3,8(r2)
 8021ef0:	b4800204 	addi	r18,r22,8
 8021ef4:	21804336 	bltu	r4,r6,8022004 <_realloc_r+0x508>
 8021ef8:	008004c4 	movi	r2,19
 8021efc:	11803f2e 	bgeu	r2,r6,8021ffc <_realloc_r+0x500>
 8021f00:	a8800017 	ldw	r2,0(r21)
 8021f04:	b0800215 	stw	r2,8(r22)
 8021f08:	a8800117 	ldw	r2,4(r21)
 8021f0c:	b0800315 	stw	r2,12(r22)
 8021f10:	008006c4 	movi	r2,27
 8021f14:	11803f36 	bltu	r2,r6,8022014 <_realloc_r+0x518>
 8021f18:	b0800404 	addi	r2,r22,16
 8021f1c:	ad400204 	addi	r21,r21,8
 8021f20:	a8c00017 	ldw	r3,0(r21)
 8021f24:	10c00015 	stw	r3,0(r2)
 8021f28:	a8c00117 	ldw	r3,4(r21)
 8021f2c:	10c00115 	stw	r3,4(r2)
 8021f30:	a8c00217 	ldw	r3,8(r21)
 8021f34:	10c00215 	stw	r3,8(r2)
 8021f38:	b447883a 	add	r3,r22,r17
 8021f3c:	bc45c83a 	sub	r2,r23,r17
 8021f40:	e0c00215 	stw	r3,8(fp)
 8021f44:	10800054 	ori	r2,r2,1
 8021f48:	18800115 	stw	r2,4(r3)
 8021f4c:	b0800117 	ldw	r2,4(r22)
 8021f50:	a009883a 	mov	r4,r20
 8021f54:	1080004c 	andi	r2,r2,1
 8021f58:	1462b03a 	or	r17,r2,r17
 8021f5c:	b4400115 	stw	r17,4(r22)
 8021f60:	80236a00 	call	80236a0 <__malloc_unlock>
 8021f64:	9005883a 	mov	r2,r18
 8021f68:	003f4006 	br	8021c6c <__alt_data_end+0xfffe286c>
 8021f6c:	a8c00217 	ldw	r3,8(r21)
 8021f70:	90c00215 	stw	r3,8(r18)
 8021f74:	a8c00317 	ldw	r3,12(r21)
 8021f78:	90c00315 	stw	r3,12(r18)
 8021f7c:	30801126 	beq	r6,r2,8021fc4 <_realloc_r+0x4c8>
 8021f80:	90800404 	addi	r2,r18,16
 8021f84:	a8c00404 	addi	r3,r21,16
 8021f88:	003f1906 	br	8021bf0 <__alt_data_end+0xfffe27f0>
 8021f8c:	90ffff17 	ldw	r3,-4(r18)
 8021f90:	00bfff04 	movi	r2,-4
 8021f94:	a825883a 	mov	r18,r21
 8021f98:	1884703a 	and	r2,r3,r2
 8021f9c:	80a1883a 	add	r16,r16,r2
 8021fa0:	003f2406 	br	8021c34 <__alt_data_end+0xfffe2834>
 8021fa4:	a8800217 	ldw	r2,8(r21)
 8021fa8:	b0800415 	stw	r2,16(r22)
 8021fac:	a8800317 	ldw	r2,12(r21)
 8021fb0:	b0800515 	stw	r2,20(r22)
 8021fb4:	31000a26 	beq	r6,r4,8021fe0 <_realloc_r+0x4e4>
 8021fb8:	b0800604 	addi	r2,r22,24
 8021fbc:	ad400404 	addi	r21,r21,16
 8021fc0:	003fa906 	br	8021e68 <__alt_data_end+0xfffe2a68>
 8021fc4:	a9000417 	ldw	r4,16(r21)
 8021fc8:	90800604 	addi	r2,r18,24
 8021fcc:	a8c00604 	addi	r3,r21,24
 8021fd0:	91000415 	stw	r4,16(r18)
 8021fd4:	a9000517 	ldw	r4,20(r21)
 8021fd8:	91000515 	stw	r4,20(r18)
 8021fdc:	003f0406 	br	8021bf0 <__alt_data_end+0xfffe27f0>
 8021fe0:	a8c00417 	ldw	r3,16(r21)
 8021fe4:	ad400604 	addi	r21,r21,24
 8021fe8:	b0800804 	addi	r2,r22,32
 8021fec:	b0c00615 	stw	r3,24(r22)
 8021ff0:	a8ffff17 	ldw	r3,-4(r21)
 8021ff4:	b0c00715 	stw	r3,28(r22)
 8021ff8:	003f9b06 	br	8021e68 <__alt_data_end+0xfffe2a68>
 8021ffc:	9005883a 	mov	r2,r18
 8022000:	003fc706 	br	8021f20 <__alt_data_end+0xfffe2b20>
 8022004:	a80b883a 	mov	r5,r21
 8022008:	9009883a 	mov	r4,r18
 802200c:	80218780 	call	8021878 <memmove>
 8022010:	003fc906 	br	8021f38 <__alt_data_end+0xfffe2b38>
 8022014:	a8800217 	ldw	r2,8(r21)
 8022018:	b0800415 	stw	r2,16(r22)
 802201c:	a8800317 	ldw	r2,12(r21)
 8022020:	b0800515 	stw	r2,20(r22)
 8022024:	31000726 	beq	r6,r4,8022044 <_realloc_r+0x548>
 8022028:	b0800604 	addi	r2,r22,24
 802202c:	ad400404 	addi	r21,r21,16
 8022030:	003fbb06 	br	8021f20 <__alt_data_end+0xfffe2b20>
 8022034:	a009883a 	mov	r4,r20
 8022038:	80236a00 	call	80236a0 <__malloc_unlock>
 802203c:	0005883a 	mov	r2,zero
 8022040:	003f0a06 	br	8021c6c <__alt_data_end+0xfffe286c>
 8022044:	a8c00417 	ldw	r3,16(r21)
 8022048:	ad400604 	addi	r21,r21,24
 802204c:	b0800804 	addi	r2,r22,32
 8022050:	b0c00615 	stw	r3,24(r22)
 8022054:	a8ffff17 	ldw	r3,-4(r21)
 8022058:	b0c00715 	stw	r3,28(r22)
 802205c:	003fb006 	br	8021f20 <__alt_data_end+0xfffe2b20>

08022060 <_sbrk_r>:
 8022060:	defffd04 	addi	sp,sp,-12
 8022064:	dc000015 	stw	r16,0(sp)
 8022068:	040200f4 	movhi	r16,2051
 802206c:	dc400115 	stw	r17,4(sp)
 8022070:	84232b04 	addi	r16,r16,-29524
 8022074:	2023883a 	mov	r17,r4
 8022078:	2809883a 	mov	r4,r5
 802207c:	dfc00215 	stw	ra,8(sp)
 8022080:	80000015 	stw	zero,0(r16)
 8022084:	80238880 	call	8023888 <sbrk>
 8022088:	00ffffc4 	movi	r3,-1
 802208c:	10c00526 	beq	r2,r3,80220a4 <_sbrk_r+0x44>
 8022090:	dfc00217 	ldw	ra,8(sp)
 8022094:	dc400117 	ldw	r17,4(sp)
 8022098:	dc000017 	ldw	r16,0(sp)
 802209c:	dec00304 	addi	sp,sp,12
 80220a0:	f800283a 	ret
 80220a4:	80c00017 	ldw	r3,0(r16)
 80220a8:	183ff926 	beq	r3,zero,8022090 <__alt_data_end+0xfffe2c90>
 80220ac:	88c00015 	stw	r3,0(r17)
 80220b0:	003ff706 	br	8022090 <__alt_data_end+0xfffe2c90>

080220b4 <__sread>:
 80220b4:	defffe04 	addi	sp,sp,-8
 80220b8:	dc000015 	stw	r16,0(sp)
 80220bc:	2821883a 	mov	r16,r5
 80220c0:	2940038f 	ldh	r5,14(r5)
 80220c4:	dfc00115 	stw	ra,4(sp)
 80220c8:	8022df40 	call	8022df4 <_read_r>
 80220cc:	10000716 	blt	r2,zero,80220ec <__sread+0x38>
 80220d0:	80c01417 	ldw	r3,80(r16)
 80220d4:	1887883a 	add	r3,r3,r2
 80220d8:	80c01415 	stw	r3,80(r16)
 80220dc:	dfc00117 	ldw	ra,4(sp)
 80220e0:	dc000017 	ldw	r16,0(sp)
 80220e4:	dec00204 	addi	sp,sp,8
 80220e8:	f800283a 	ret
 80220ec:	80c0030b 	ldhu	r3,12(r16)
 80220f0:	18fbffcc 	andi	r3,r3,61439
 80220f4:	80c0030d 	sth	r3,12(r16)
 80220f8:	dfc00117 	ldw	ra,4(sp)
 80220fc:	dc000017 	ldw	r16,0(sp)
 8022100:	dec00204 	addi	sp,sp,8
 8022104:	f800283a 	ret

08022108 <__seofread>:
 8022108:	0005883a 	mov	r2,zero
 802210c:	f800283a 	ret

08022110 <__swrite>:
 8022110:	2880030b 	ldhu	r2,12(r5)
 8022114:	defffb04 	addi	sp,sp,-20
 8022118:	dcc00315 	stw	r19,12(sp)
 802211c:	dc800215 	stw	r18,8(sp)
 8022120:	dc400115 	stw	r17,4(sp)
 8022124:	dc000015 	stw	r16,0(sp)
 8022128:	dfc00415 	stw	ra,16(sp)
 802212c:	10c0400c 	andi	r3,r2,256
 8022130:	2821883a 	mov	r16,r5
 8022134:	2023883a 	mov	r17,r4
 8022138:	3025883a 	mov	r18,r6
 802213c:	3827883a 	mov	r19,r7
 8022140:	18000526 	beq	r3,zero,8022158 <__swrite+0x48>
 8022144:	2940038f 	ldh	r5,14(r5)
 8022148:	01c00084 	movi	r7,2
 802214c:	000d883a 	mov	r6,zero
 8022150:	8022bd80 	call	8022bd8 <_lseek_r>
 8022154:	8080030b 	ldhu	r2,12(r16)
 8022158:	8140038f 	ldh	r5,14(r16)
 802215c:	10bbffcc 	andi	r2,r2,61439
 8022160:	980f883a 	mov	r7,r19
 8022164:	900d883a 	mov	r6,r18
 8022168:	8809883a 	mov	r4,r17
 802216c:	8080030d 	sth	r2,12(r16)
 8022170:	dfc00417 	ldw	ra,16(sp)
 8022174:	dcc00317 	ldw	r19,12(sp)
 8022178:	dc800217 	ldw	r18,8(sp)
 802217c:	dc400117 	ldw	r17,4(sp)
 8022180:	dc000017 	ldw	r16,0(sp)
 8022184:	dec00504 	addi	sp,sp,20
 8022188:	80221f01 	jmpi	80221f0 <_write_r>

0802218c <__sseek>:
 802218c:	defffe04 	addi	sp,sp,-8
 8022190:	dc000015 	stw	r16,0(sp)
 8022194:	2821883a 	mov	r16,r5
 8022198:	2940038f 	ldh	r5,14(r5)
 802219c:	dfc00115 	stw	ra,4(sp)
 80221a0:	8022bd80 	call	8022bd8 <_lseek_r>
 80221a4:	00ffffc4 	movi	r3,-1
 80221a8:	10c00826 	beq	r2,r3,80221cc <__sseek+0x40>
 80221ac:	80c0030b 	ldhu	r3,12(r16)
 80221b0:	80801415 	stw	r2,80(r16)
 80221b4:	18c40014 	ori	r3,r3,4096
 80221b8:	80c0030d 	sth	r3,12(r16)
 80221bc:	dfc00117 	ldw	ra,4(sp)
 80221c0:	dc000017 	ldw	r16,0(sp)
 80221c4:	dec00204 	addi	sp,sp,8
 80221c8:	f800283a 	ret
 80221cc:	80c0030b 	ldhu	r3,12(r16)
 80221d0:	18fbffcc 	andi	r3,r3,61439
 80221d4:	80c0030d 	sth	r3,12(r16)
 80221d8:	dfc00117 	ldw	ra,4(sp)
 80221dc:	dc000017 	ldw	r16,0(sp)
 80221e0:	dec00204 	addi	sp,sp,8
 80221e4:	f800283a 	ret

080221e8 <__sclose>:
 80221e8:	2940038f 	ldh	r5,14(r5)
 80221ec:	80223a41 	jmpi	80223a4 <_close_r>

080221f0 <_write_r>:
 80221f0:	defffd04 	addi	sp,sp,-12
 80221f4:	2805883a 	mov	r2,r5
 80221f8:	dc000015 	stw	r16,0(sp)
 80221fc:	040200f4 	movhi	r16,2051
 8022200:	dc400115 	stw	r17,4(sp)
 8022204:	300b883a 	mov	r5,r6
 8022208:	84232b04 	addi	r16,r16,-29524
 802220c:	2023883a 	mov	r17,r4
 8022210:	380d883a 	mov	r6,r7
 8022214:	1009883a 	mov	r4,r2
 8022218:	dfc00215 	stw	ra,8(sp)
 802221c:	80000015 	stw	zero,0(r16)
 8022220:	80239740 	call	8023974 <write>
 8022224:	00ffffc4 	movi	r3,-1
 8022228:	10c00526 	beq	r2,r3,8022240 <_write_r+0x50>
 802222c:	dfc00217 	ldw	ra,8(sp)
 8022230:	dc400117 	ldw	r17,4(sp)
 8022234:	dc000017 	ldw	r16,0(sp)
 8022238:	dec00304 	addi	sp,sp,12
 802223c:	f800283a 	ret
 8022240:	80c00017 	ldw	r3,0(r16)
 8022244:	183ff926 	beq	r3,zero,802222c <__alt_data_end+0xfffe2e2c>
 8022248:	88c00015 	stw	r3,0(r17)
 802224c:	003ff706 	br	802222c <__alt_data_end+0xfffe2e2c>

08022250 <__swsetup_r>:
 8022250:	008200b4 	movhi	r2,2050
 8022254:	defffd04 	addi	sp,sp,-12
 8022258:	109c8004 	addi	r2,r2,29184
 802225c:	dc400115 	stw	r17,4(sp)
 8022260:	2023883a 	mov	r17,r4
 8022264:	11000017 	ldw	r4,0(r2)
 8022268:	dc000015 	stw	r16,0(sp)
 802226c:	dfc00215 	stw	ra,8(sp)
 8022270:	2821883a 	mov	r16,r5
 8022274:	20000226 	beq	r4,zero,8022280 <__swsetup_r+0x30>
 8022278:	20800e17 	ldw	r2,56(r4)
 802227c:	10003126 	beq	r2,zero,8022344 <__swsetup_r+0xf4>
 8022280:	8080030b 	ldhu	r2,12(r16)
 8022284:	10c0020c 	andi	r3,r2,8
 8022288:	1009883a 	mov	r4,r2
 802228c:	18000f26 	beq	r3,zero,80222cc <__swsetup_r+0x7c>
 8022290:	80c00417 	ldw	r3,16(r16)
 8022294:	18001526 	beq	r3,zero,80222ec <__swsetup_r+0x9c>
 8022298:	1100004c 	andi	r4,r2,1
 802229c:	20001c1e 	bne	r4,zero,8022310 <__swsetup_r+0xc0>
 80222a0:	1080008c 	andi	r2,r2,2
 80222a4:	1000291e 	bne	r2,zero,802234c <__swsetup_r+0xfc>
 80222a8:	80800517 	ldw	r2,20(r16)
 80222ac:	80800215 	stw	r2,8(r16)
 80222b0:	18001c26 	beq	r3,zero,8022324 <__swsetup_r+0xd4>
 80222b4:	0005883a 	mov	r2,zero
 80222b8:	dfc00217 	ldw	ra,8(sp)
 80222bc:	dc400117 	ldw	r17,4(sp)
 80222c0:	dc000017 	ldw	r16,0(sp)
 80222c4:	dec00304 	addi	sp,sp,12
 80222c8:	f800283a 	ret
 80222cc:	2080040c 	andi	r2,r4,16
 80222d0:	10002e26 	beq	r2,zero,802238c <__swsetup_r+0x13c>
 80222d4:	2080010c 	andi	r2,r4,4
 80222d8:	10001e1e 	bne	r2,zero,8022354 <__swsetup_r+0x104>
 80222dc:	80c00417 	ldw	r3,16(r16)
 80222e0:	20800214 	ori	r2,r4,8
 80222e4:	8080030d 	sth	r2,12(r16)
 80222e8:	183feb1e 	bne	r3,zero,8022298 <__alt_data_end+0xfffe2e98>
 80222ec:	1100a00c 	andi	r4,r2,640
 80222f0:	01408004 	movi	r5,512
 80222f4:	217fe826 	beq	r4,r5,8022298 <__alt_data_end+0xfffe2e98>
 80222f8:	800b883a 	mov	r5,r16
 80222fc:	8809883a 	mov	r4,r17
 8022300:	8022c380 	call	8022c38 <__smakebuf_r>
 8022304:	8080030b 	ldhu	r2,12(r16)
 8022308:	80c00417 	ldw	r3,16(r16)
 802230c:	003fe206 	br	8022298 <__alt_data_end+0xfffe2e98>
 8022310:	80800517 	ldw	r2,20(r16)
 8022314:	80000215 	stw	zero,8(r16)
 8022318:	0085c83a 	sub	r2,zero,r2
 802231c:	80800615 	stw	r2,24(r16)
 8022320:	183fe41e 	bne	r3,zero,80222b4 <__alt_data_end+0xfffe2eb4>
 8022324:	80c0030b 	ldhu	r3,12(r16)
 8022328:	0005883a 	mov	r2,zero
 802232c:	1900200c 	andi	r4,r3,128
 8022330:	203fe126 	beq	r4,zero,80222b8 <__alt_data_end+0xfffe2eb8>
 8022334:	18c01014 	ori	r3,r3,64
 8022338:	80c0030d 	sth	r3,12(r16)
 802233c:	00bfffc4 	movi	r2,-1
 8022340:	003fdd06 	br	80222b8 <__alt_data_end+0xfffe2eb8>
 8022344:	80207a00 	call	80207a0 <__sinit>
 8022348:	003fcd06 	br	8022280 <__alt_data_end+0xfffe2e80>
 802234c:	0005883a 	mov	r2,zero
 8022350:	003fd606 	br	80222ac <__alt_data_end+0xfffe2eac>
 8022354:	81400c17 	ldw	r5,48(r16)
 8022358:	28000626 	beq	r5,zero,8022374 <__swsetup_r+0x124>
 802235c:	80801004 	addi	r2,r16,64
 8022360:	28800326 	beq	r5,r2,8022370 <__swsetup_r+0x120>
 8022364:	8809883a 	mov	r4,r17
 8022368:	80228c80 	call	80228c8 <_free_r>
 802236c:	8100030b 	ldhu	r4,12(r16)
 8022370:	80000c15 	stw	zero,48(r16)
 8022374:	80c00417 	ldw	r3,16(r16)
 8022378:	00bff6c4 	movi	r2,-37
 802237c:	1108703a 	and	r4,r2,r4
 8022380:	80000115 	stw	zero,4(r16)
 8022384:	80c00015 	stw	r3,0(r16)
 8022388:	003fd506 	br	80222e0 <__alt_data_end+0xfffe2ee0>
 802238c:	00800244 	movi	r2,9
 8022390:	88800015 	stw	r2,0(r17)
 8022394:	20801014 	ori	r2,r4,64
 8022398:	8080030d 	sth	r2,12(r16)
 802239c:	00bfffc4 	movi	r2,-1
 80223a0:	003fc506 	br	80222b8 <__alt_data_end+0xfffe2eb8>

080223a4 <_close_r>:
 80223a4:	defffd04 	addi	sp,sp,-12
 80223a8:	dc000015 	stw	r16,0(sp)
 80223ac:	040200f4 	movhi	r16,2051
 80223b0:	dc400115 	stw	r17,4(sp)
 80223b4:	84232b04 	addi	r16,r16,-29524
 80223b8:	2023883a 	mov	r17,r4
 80223bc:	2809883a 	mov	r4,r5
 80223c0:	dfc00215 	stw	ra,8(sp)
 80223c4:	80000015 	stw	zero,0(r16)
 80223c8:	802311c0 	call	802311c <close>
 80223cc:	00ffffc4 	movi	r3,-1
 80223d0:	10c00526 	beq	r2,r3,80223e8 <_close_r+0x44>
 80223d4:	dfc00217 	ldw	ra,8(sp)
 80223d8:	dc400117 	ldw	r17,4(sp)
 80223dc:	dc000017 	ldw	r16,0(sp)
 80223e0:	dec00304 	addi	sp,sp,12
 80223e4:	f800283a 	ret
 80223e8:	80c00017 	ldw	r3,0(r16)
 80223ec:	183ff926 	beq	r3,zero,80223d4 <__alt_data_end+0xfffe2fd4>
 80223f0:	88c00015 	stw	r3,0(r17)
 80223f4:	003ff706 	br	80223d4 <__alt_data_end+0xfffe2fd4>

080223f8 <_fclose_r>:
 80223f8:	28003926 	beq	r5,zero,80224e0 <_fclose_r+0xe8>
 80223fc:	defffc04 	addi	sp,sp,-16
 8022400:	dc400115 	stw	r17,4(sp)
 8022404:	dc000015 	stw	r16,0(sp)
 8022408:	dfc00315 	stw	ra,12(sp)
 802240c:	dc800215 	stw	r18,8(sp)
 8022410:	2023883a 	mov	r17,r4
 8022414:	2821883a 	mov	r16,r5
 8022418:	20000226 	beq	r4,zero,8022424 <_fclose_r+0x2c>
 802241c:	20800e17 	ldw	r2,56(r4)
 8022420:	10002726 	beq	r2,zero,80224c0 <_fclose_r+0xc8>
 8022424:	8080030f 	ldh	r2,12(r16)
 8022428:	1000071e 	bne	r2,zero,8022448 <_fclose_r+0x50>
 802242c:	0005883a 	mov	r2,zero
 8022430:	dfc00317 	ldw	ra,12(sp)
 8022434:	dc800217 	ldw	r18,8(sp)
 8022438:	dc400117 	ldw	r17,4(sp)
 802243c:	dc000017 	ldw	r16,0(sp)
 8022440:	dec00404 	addi	sp,sp,16
 8022444:	f800283a 	ret
 8022448:	800b883a 	mov	r5,r16
 802244c:	8809883a 	mov	r4,r17
 8022450:	80224fc0 	call	80224fc <__sflush_r>
 8022454:	1025883a 	mov	r18,r2
 8022458:	80800b17 	ldw	r2,44(r16)
 802245c:	10000426 	beq	r2,zero,8022470 <_fclose_r+0x78>
 8022460:	81400717 	ldw	r5,28(r16)
 8022464:	8809883a 	mov	r4,r17
 8022468:	103ee83a 	callr	r2
 802246c:	10001616 	blt	r2,zero,80224c8 <_fclose_r+0xd0>
 8022470:	8080030b 	ldhu	r2,12(r16)
 8022474:	1080200c 	andi	r2,r2,128
 8022478:	1000151e 	bne	r2,zero,80224d0 <_fclose_r+0xd8>
 802247c:	81400c17 	ldw	r5,48(r16)
 8022480:	28000526 	beq	r5,zero,8022498 <_fclose_r+0xa0>
 8022484:	80801004 	addi	r2,r16,64
 8022488:	28800226 	beq	r5,r2,8022494 <_fclose_r+0x9c>
 802248c:	8809883a 	mov	r4,r17
 8022490:	80228c80 	call	80228c8 <_free_r>
 8022494:	80000c15 	stw	zero,48(r16)
 8022498:	81401117 	ldw	r5,68(r16)
 802249c:	28000326 	beq	r5,zero,80224ac <_fclose_r+0xb4>
 80224a0:	8809883a 	mov	r4,r17
 80224a4:	80228c80 	call	80228c8 <_free_r>
 80224a8:	80001115 	stw	zero,68(r16)
 80224ac:	80207b00 	call	80207b0 <__sfp_lock_acquire>
 80224b0:	8000030d 	sth	zero,12(r16)
 80224b4:	80207b40 	call	80207b4 <__sfp_lock_release>
 80224b8:	9005883a 	mov	r2,r18
 80224bc:	003fdc06 	br	8022430 <__alt_data_end+0xfffe3030>
 80224c0:	80207a00 	call	80207a0 <__sinit>
 80224c4:	003fd706 	br	8022424 <__alt_data_end+0xfffe3024>
 80224c8:	04bfffc4 	movi	r18,-1
 80224cc:	003fe806 	br	8022470 <__alt_data_end+0xfffe3070>
 80224d0:	81400417 	ldw	r5,16(r16)
 80224d4:	8809883a 	mov	r4,r17
 80224d8:	80228c80 	call	80228c8 <_free_r>
 80224dc:	003fe706 	br	802247c <__alt_data_end+0xfffe307c>
 80224e0:	0005883a 	mov	r2,zero
 80224e4:	f800283a 	ret

080224e8 <fclose>:
 80224e8:	008200b4 	movhi	r2,2050
 80224ec:	109c8004 	addi	r2,r2,29184
 80224f0:	200b883a 	mov	r5,r4
 80224f4:	11000017 	ldw	r4,0(r2)
 80224f8:	80223f81 	jmpi	80223f8 <_fclose_r>

080224fc <__sflush_r>:
 80224fc:	2880030b 	ldhu	r2,12(r5)
 8022500:	defffb04 	addi	sp,sp,-20
 8022504:	dcc00315 	stw	r19,12(sp)
 8022508:	dc400115 	stw	r17,4(sp)
 802250c:	dfc00415 	stw	ra,16(sp)
 8022510:	dc800215 	stw	r18,8(sp)
 8022514:	dc000015 	stw	r16,0(sp)
 8022518:	10c0020c 	andi	r3,r2,8
 802251c:	2823883a 	mov	r17,r5
 8022520:	2027883a 	mov	r19,r4
 8022524:	1800311e 	bne	r3,zero,80225ec <__sflush_r+0xf0>
 8022528:	28c00117 	ldw	r3,4(r5)
 802252c:	10820014 	ori	r2,r2,2048
 8022530:	2880030d 	sth	r2,12(r5)
 8022534:	00c04b0e 	bge	zero,r3,8022664 <__sflush_r+0x168>
 8022538:	8a000a17 	ldw	r8,40(r17)
 802253c:	40002326 	beq	r8,zero,80225cc <__sflush_r+0xd0>
 8022540:	9c000017 	ldw	r16,0(r19)
 8022544:	10c4000c 	andi	r3,r2,4096
 8022548:	98000015 	stw	zero,0(r19)
 802254c:	18004826 	beq	r3,zero,8022670 <__sflush_r+0x174>
 8022550:	89801417 	ldw	r6,80(r17)
 8022554:	10c0010c 	andi	r3,r2,4
 8022558:	18000626 	beq	r3,zero,8022574 <__sflush_r+0x78>
 802255c:	88c00117 	ldw	r3,4(r17)
 8022560:	88800c17 	ldw	r2,48(r17)
 8022564:	30cdc83a 	sub	r6,r6,r3
 8022568:	10000226 	beq	r2,zero,8022574 <__sflush_r+0x78>
 802256c:	88800f17 	ldw	r2,60(r17)
 8022570:	308dc83a 	sub	r6,r6,r2
 8022574:	89400717 	ldw	r5,28(r17)
 8022578:	000f883a 	mov	r7,zero
 802257c:	9809883a 	mov	r4,r19
 8022580:	403ee83a 	callr	r8
 8022584:	00ffffc4 	movi	r3,-1
 8022588:	10c04426 	beq	r2,r3,802269c <__sflush_r+0x1a0>
 802258c:	88c0030b 	ldhu	r3,12(r17)
 8022590:	89000417 	ldw	r4,16(r17)
 8022594:	88000115 	stw	zero,4(r17)
 8022598:	197dffcc 	andi	r5,r3,63487
 802259c:	8940030d 	sth	r5,12(r17)
 80225a0:	89000015 	stw	r4,0(r17)
 80225a4:	18c4000c 	andi	r3,r3,4096
 80225a8:	18002c1e 	bne	r3,zero,802265c <__sflush_r+0x160>
 80225ac:	89400c17 	ldw	r5,48(r17)
 80225b0:	9c000015 	stw	r16,0(r19)
 80225b4:	28000526 	beq	r5,zero,80225cc <__sflush_r+0xd0>
 80225b8:	88801004 	addi	r2,r17,64
 80225bc:	28800226 	beq	r5,r2,80225c8 <__sflush_r+0xcc>
 80225c0:	9809883a 	mov	r4,r19
 80225c4:	80228c80 	call	80228c8 <_free_r>
 80225c8:	88000c15 	stw	zero,48(r17)
 80225cc:	0005883a 	mov	r2,zero
 80225d0:	dfc00417 	ldw	ra,16(sp)
 80225d4:	dcc00317 	ldw	r19,12(sp)
 80225d8:	dc800217 	ldw	r18,8(sp)
 80225dc:	dc400117 	ldw	r17,4(sp)
 80225e0:	dc000017 	ldw	r16,0(sp)
 80225e4:	dec00504 	addi	sp,sp,20
 80225e8:	f800283a 	ret
 80225ec:	2c800417 	ldw	r18,16(r5)
 80225f0:	903ff626 	beq	r18,zero,80225cc <__alt_data_end+0xfffe31cc>
 80225f4:	2c000017 	ldw	r16,0(r5)
 80225f8:	108000cc 	andi	r2,r2,3
 80225fc:	2c800015 	stw	r18,0(r5)
 8022600:	84a1c83a 	sub	r16,r16,r18
 8022604:	1000131e 	bne	r2,zero,8022654 <__sflush_r+0x158>
 8022608:	28800517 	ldw	r2,20(r5)
 802260c:	88800215 	stw	r2,8(r17)
 8022610:	04000316 	blt	zero,r16,8022620 <__sflush_r+0x124>
 8022614:	003fed06 	br	80225cc <__alt_data_end+0xfffe31cc>
 8022618:	90a5883a 	add	r18,r18,r2
 802261c:	043feb0e 	bge	zero,r16,80225cc <__alt_data_end+0xfffe31cc>
 8022620:	88800917 	ldw	r2,36(r17)
 8022624:	89400717 	ldw	r5,28(r17)
 8022628:	800f883a 	mov	r7,r16
 802262c:	900d883a 	mov	r6,r18
 8022630:	9809883a 	mov	r4,r19
 8022634:	103ee83a 	callr	r2
 8022638:	80a1c83a 	sub	r16,r16,r2
 802263c:	00bff616 	blt	zero,r2,8022618 <__alt_data_end+0xfffe3218>
 8022640:	88c0030b 	ldhu	r3,12(r17)
 8022644:	00bfffc4 	movi	r2,-1
 8022648:	18c01014 	ori	r3,r3,64
 802264c:	88c0030d 	sth	r3,12(r17)
 8022650:	003fdf06 	br	80225d0 <__alt_data_end+0xfffe31d0>
 8022654:	0005883a 	mov	r2,zero
 8022658:	003fec06 	br	802260c <__alt_data_end+0xfffe320c>
 802265c:	88801415 	stw	r2,80(r17)
 8022660:	003fd206 	br	80225ac <__alt_data_end+0xfffe31ac>
 8022664:	28c00f17 	ldw	r3,60(r5)
 8022668:	00ffb316 	blt	zero,r3,8022538 <__alt_data_end+0xfffe3138>
 802266c:	003fd706 	br	80225cc <__alt_data_end+0xfffe31cc>
 8022670:	89400717 	ldw	r5,28(r17)
 8022674:	000d883a 	mov	r6,zero
 8022678:	01c00044 	movi	r7,1
 802267c:	9809883a 	mov	r4,r19
 8022680:	403ee83a 	callr	r8
 8022684:	100d883a 	mov	r6,r2
 8022688:	00bfffc4 	movi	r2,-1
 802268c:	30801426 	beq	r6,r2,80226e0 <__sflush_r+0x1e4>
 8022690:	8880030b 	ldhu	r2,12(r17)
 8022694:	8a000a17 	ldw	r8,40(r17)
 8022698:	003fae06 	br	8022554 <__alt_data_end+0xfffe3154>
 802269c:	98c00017 	ldw	r3,0(r19)
 80226a0:	183fba26 	beq	r3,zero,802258c <__alt_data_end+0xfffe318c>
 80226a4:	01000744 	movi	r4,29
 80226a8:	19000626 	beq	r3,r4,80226c4 <__sflush_r+0x1c8>
 80226ac:	01000584 	movi	r4,22
 80226b0:	19000426 	beq	r3,r4,80226c4 <__sflush_r+0x1c8>
 80226b4:	88c0030b 	ldhu	r3,12(r17)
 80226b8:	18c01014 	ori	r3,r3,64
 80226bc:	88c0030d 	sth	r3,12(r17)
 80226c0:	003fc306 	br	80225d0 <__alt_data_end+0xfffe31d0>
 80226c4:	8880030b 	ldhu	r2,12(r17)
 80226c8:	88c00417 	ldw	r3,16(r17)
 80226cc:	88000115 	stw	zero,4(r17)
 80226d0:	10bdffcc 	andi	r2,r2,63487
 80226d4:	8880030d 	sth	r2,12(r17)
 80226d8:	88c00015 	stw	r3,0(r17)
 80226dc:	003fb306 	br	80225ac <__alt_data_end+0xfffe31ac>
 80226e0:	98800017 	ldw	r2,0(r19)
 80226e4:	103fea26 	beq	r2,zero,8022690 <__alt_data_end+0xfffe3290>
 80226e8:	00c00744 	movi	r3,29
 80226ec:	10c00226 	beq	r2,r3,80226f8 <__sflush_r+0x1fc>
 80226f0:	00c00584 	movi	r3,22
 80226f4:	10c0031e 	bne	r2,r3,8022704 <__sflush_r+0x208>
 80226f8:	9c000015 	stw	r16,0(r19)
 80226fc:	0005883a 	mov	r2,zero
 8022700:	003fb306 	br	80225d0 <__alt_data_end+0xfffe31d0>
 8022704:	88c0030b 	ldhu	r3,12(r17)
 8022708:	3005883a 	mov	r2,r6
 802270c:	18c01014 	ori	r3,r3,64
 8022710:	88c0030d 	sth	r3,12(r17)
 8022714:	003fae06 	br	80225d0 <__alt_data_end+0xfffe31d0>

08022718 <_fflush_r>:
 8022718:	defffd04 	addi	sp,sp,-12
 802271c:	dc000115 	stw	r16,4(sp)
 8022720:	dfc00215 	stw	ra,8(sp)
 8022724:	2021883a 	mov	r16,r4
 8022728:	20000226 	beq	r4,zero,8022734 <_fflush_r+0x1c>
 802272c:	20800e17 	ldw	r2,56(r4)
 8022730:	10000c26 	beq	r2,zero,8022764 <_fflush_r+0x4c>
 8022734:	2880030f 	ldh	r2,12(r5)
 8022738:	1000051e 	bne	r2,zero,8022750 <_fflush_r+0x38>
 802273c:	0005883a 	mov	r2,zero
 8022740:	dfc00217 	ldw	ra,8(sp)
 8022744:	dc000117 	ldw	r16,4(sp)
 8022748:	dec00304 	addi	sp,sp,12
 802274c:	f800283a 	ret
 8022750:	8009883a 	mov	r4,r16
 8022754:	dfc00217 	ldw	ra,8(sp)
 8022758:	dc000117 	ldw	r16,4(sp)
 802275c:	dec00304 	addi	sp,sp,12
 8022760:	80224fc1 	jmpi	80224fc <__sflush_r>
 8022764:	d9400015 	stw	r5,0(sp)
 8022768:	80207a00 	call	80207a0 <__sinit>
 802276c:	d9400017 	ldw	r5,0(sp)
 8022770:	003ff006 	br	8022734 <__alt_data_end+0xfffe3334>

08022774 <fflush>:
 8022774:	20000526 	beq	r4,zero,802278c <fflush+0x18>
 8022778:	008200b4 	movhi	r2,2050
 802277c:	109c8004 	addi	r2,r2,29184
 8022780:	200b883a 	mov	r5,r4
 8022784:	11000017 	ldw	r4,0(r2)
 8022788:	80227181 	jmpi	8022718 <_fflush_r>
 802278c:	008200b4 	movhi	r2,2050
 8022790:	109c7f04 	addi	r2,r2,29180
 8022794:	11000017 	ldw	r4,0(r2)
 8022798:	014200b4 	movhi	r5,2050
 802279c:	2949c604 	addi	r5,r5,10008
 80227a0:	8020d7c1 	jmpi	8020d7c <_fwalk_reent>

080227a4 <_malloc_trim_r>:
 80227a4:	defffb04 	addi	sp,sp,-20
 80227a8:	dcc00315 	stw	r19,12(sp)
 80227ac:	04c200b4 	movhi	r19,2050
 80227b0:	dc800215 	stw	r18,8(sp)
 80227b4:	dc400115 	stw	r17,4(sp)
 80227b8:	dc000015 	stw	r16,0(sp)
 80227bc:	dfc00415 	stw	ra,16(sp)
 80227c0:	2821883a 	mov	r16,r5
 80227c4:	9cd6fb04 	addi	r19,r19,23532
 80227c8:	2025883a 	mov	r18,r4
 80227cc:	802367c0 	call	802367c <__malloc_lock>
 80227d0:	98800217 	ldw	r2,8(r19)
 80227d4:	14400117 	ldw	r17,4(r2)
 80227d8:	00bfff04 	movi	r2,-4
 80227dc:	88a2703a 	and	r17,r17,r2
 80227e0:	8c21c83a 	sub	r16,r17,r16
 80227e4:	8403fbc4 	addi	r16,r16,4079
 80227e8:	8020d33a 	srli	r16,r16,12
 80227ec:	0083ffc4 	movi	r2,4095
 80227f0:	843fffc4 	addi	r16,r16,-1
 80227f4:	8020933a 	slli	r16,r16,12
 80227f8:	1400060e 	bge	r2,r16,8022814 <_malloc_trim_r+0x70>
 80227fc:	000b883a 	mov	r5,zero
 8022800:	9009883a 	mov	r4,r18
 8022804:	80220600 	call	8022060 <_sbrk_r>
 8022808:	98c00217 	ldw	r3,8(r19)
 802280c:	1c47883a 	add	r3,r3,r17
 8022810:	10c00a26 	beq	r2,r3,802283c <_malloc_trim_r+0x98>
 8022814:	9009883a 	mov	r4,r18
 8022818:	80236a00 	call	80236a0 <__malloc_unlock>
 802281c:	0005883a 	mov	r2,zero
 8022820:	dfc00417 	ldw	ra,16(sp)
 8022824:	dcc00317 	ldw	r19,12(sp)
 8022828:	dc800217 	ldw	r18,8(sp)
 802282c:	dc400117 	ldw	r17,4(sp)
 8022830:	dc000017 	ldw	r16,0(sp)
 8022834:	dec00504 	addi	sp,sp,20
 8022838:	f800283a 	ret
 802283c:	040bc83a 	sub	r5,zero,r16
 8022840:	9009883a 	mov	r4,r18
 8022844:	80220600 	call	8022060 <_sbrk_r>
 8022848:	00ffffc4 	movi	r3,-1
 802284c:	10c00d26 	beq	r2,r3,8022884 <_malloc_trim_r+0xe0>
 8022850:	00c200f4 	movhi	r3,2051
 8022854:	18e33304 	addi	r3,r3,-29492
 8022858:	18800017 	ldw	r2,0(r3)
 802285c:	99000217 	ldw	r4,8(r19)
 8022860:	8c23c83a 	sub	r17,r17,r16
 8022864:	8c400054 	ori	r17,r17,1
 8022868:	1421c83a 	sub	r16,r2,r16
 802286c:	24400115 	stw	r17,4(r4)
 8022870:	9009883a 	mov	r4,r18
 8022874:	1c000015 	stw	r16,0(r3)
 8022878:	80236a00 	call	80236a0 <__malloc_unlock>
 802287c:	00800044 	movi	r2,1
 8022880:	003fe706 	br	8022820 <__alt_data_end+0xfffe3420>
 8022884:	000b883a 	mov	r5,zero
 8022888:	9009883a 	mov	r4,r18
 802288c:	80220600 	call	8022060 <_sbrk_r>
 8022890:	99000217 	ldw	r4,8(r19)
 8022894:	014003c4 	movi	r5,15
 8022898:	1107c83a 	sub	r3,r2,r4
 802289c:	28ffdd0e 	bge	r5,r3,8022814 <__alt_data_end+0xfffe3414>
 80228a0:	014200b4 	movhi	r5,2050
 80228a4:	295c8104 	addi	r5,r5,29188
 80228a8:	29400017 	ldw	r5,0(r5)
 80228ac:	18c00054 	ori	r3,r3,1
 80228b0:	20c00115 	stw	r3,4(r4)
 80228b4:	00c200f4 	movhi	r3,2051
 80228b8:	1145c83a 	sub	r2,r2,r5
 80228bc:	18e33304 	addi	r3,r3,-29492
 80228c0:	18800015 	stw	r2,0(r3)
 80228c4:	003fd306 	br	8022814 <__alt_data_end+0xfffe3414>

080228c8 <_free_r>:
 80228c8:	28004126 	beq	r5,zero,80229d0 <_free_r+0x108>
 80228cc:	defffd04 	addi	sp,sp,-12
 80228d0:	dc400115 	stw	r17,4(sp)
 80228d4:	dc000015 	stw	r16,0(sp)
 80228d8:	2023883a 	mov	r17,r4
 80228dc:	2821883a 	mov	r16,r5
 80228e0:	dfc00215 	stw	ra,8(sp)
 80228e4:	802367c0 	call	802367c <__malloc_lock>
 80228e8:	81ffff17 	ldw	r7,-4(r16)
 80228ec:	00bfff84 	movi	r2,-2
 80228f0:	010200b4 	movhi	r4,2050
 80228f4:	81bffe04 	addi	r6,r16,-8
 80228f8:	3884703a 	and	r2,r7,r2
 80228fc:	2116fb04 	addi	r4,r4,23532
 8022900:	308b883a 	add	r5,r6,r2
 8022904:	2a400117 	ldw	r9,4(r5)
 8022908:	22000217 	ldw	r8,8(r4)
 802290c:	00ffff04 	movi	r3,-4
 8022910:	48c6703a 	and	r3,r9,r3
 8022914:	2a005726 	beq	r5,r8,8022a74 <_free_r+0x1ac>
 8022918:	28c00115 	stw	r3,4(r5)
 802291c:	39c0004c 	andi	r7,r7,1
 8022920:	3800091e 	bne	r7,zero,8022948 <_free_r+0x80>
 8022924:	823ffe17 	ldw	r8,-8(r16)
 8022928:	22400204 	addi	r9,r4,8
 802292c:	320dc83a 	sub	r6,r6,r8
 8022930:	31c00217 	ldw	r7,8(r6)
 8022934:	1205883a 	add	r2,r2,r8
 8022938:	3a406526 	beq	r7,r9,8022ad0 <_free_r+0x208>
 802293c:	32000317 	ldw	r8,12(r6)
 8022940:	3a000315 	stw	r8,12(r7)
 8022944:	41c00215 	stw	r7,8(r8)
 8022948:	28cf883a 	add	r7,r5,r3
 802294c:	39c00117 	ldw	r7,4(r7)
 8022950:	39c0004c 	andi	r7,r7,1
 8022954:	38003a26 	beq	r7,zero,8022a40 <_free_r+0x178>
 8022958:	10c00054 	ori	r3,r2,1
 802295c:	30c00115 	stw	r3,4(r6)
 8022960:	3087883a 	add	r3,r6,r2
 8022964:	18800015 	stw	r2,0(r3)
 8022968:	00c07fc4 	movi	r3,511
 802296c:	18801936 	bltu	r3,r2,80229d4 <_free_r+0x10c>
 8022970:	1004d0fa 	srli	r2,r2,3
 8022974:	01c00044 	movi	r7,1
 8022978:	21400117 	ldw	r5,4(r4)
 802297c:	10c00044 	addi	r3,r2,1
 8022980:	18c7883a 	add	r3,r3,r3
 8022984:	1005d0ba 	srai	r2,r2,2
 8022988:	18c7883a 	add	r3,r3,r3
 802298c:	18c7883a 	add	r3,r3,r3
 8022990:	1907883a 	add	r3,r3,r4
 8022994:	3884983a 	sll	r2,r7,r2
 8022998:	19c00017 	ldw	r7,0(r3)
 802299c:	1a3ffe04 	addi	r8,r3,-8
 80229a0:	1144b03a 	or	r2,r2,r5
 80229a4:	32000315 	stw	r8,12(r6)
 80229a8:	31c00215 	stw	r7,8(r6)
 80229ac:	20800115 	stw	r2,4(r4)
 80229b0:	19800015 	stw	r6,0(r3)
 80229b4:	39800315 	stw	r6,12(r7)
 80229b8:	8809883a 	mov	r4,r17
 80229bc:	dfc00217 	ldw	ra,8(sp)
 80229c0:	dc400117 	ldw	r17,4(sp)
 80229c4:	dc000017 	ldw	r16,0(sp)
 80229c8:	dec00304 	addi	sp,sp,12
 80229cc:	80236a01 	jmpi	80236a0 <__malloc_unlock>
 80229d0:	f800283a 	ret
 80229d4:	100ad27a 	srli	r5,r2,9
 80229d8:	00c00104 	movi	r3,4
 80229dc:	19404a36 	bltu	r3,r5,8022b08 <_free_r+0x240>
 80229e0:	100ad1ba 	srli	r5,r2,6
 80229e4:	28c00e44 	addi	r3,r5,57
 80229e8:	18c7883a 	add	r3,r3,r3
 80229ec:	29400e04 	addi	r5,r5,56
 80229f0:	18c7883a 	add	r3,r3,r3
 80229f4:	18c7883a 	add	r3,r3,r3
 80229f8:	1909883a 	add	r4,r3,r4
 80229fc:	20c00017 	ldw	r3,0(r4)
 8022a00:	01c200b4 	movhi	r7,2050
 8022a04:	213ffe04 	addi	r4,r4,-8
 8022a08:	39d6fb04 	addi	r7,r7,23532
 8022a0c:	20c04426 	beq	r4,r3,8022b20 <_free_r+0x258>
 8022a10:	01ffff04 	movi	r7,-4
 8022a14:	19400117 	ldw	r5,4(r3)
 8022a18:	29ca703a 	and	r5,r5,r7
 8022a1c:	1140022e 	bgeu	r2,r5,8022a28 <_free_r+0x160>
 8022a20:	18c00217 	ldw	r3,8(r3)
 8022a24:	20fffb1e 	bne	r4,r3,8022a14 <__alt_data_end+0xfffe3614>
 8022a28:	19000317 	ldw	r4,12(r3)
 8022a2c:	31000315 	stw	r4,12(r6)
 8022a30:	30c00215 	stw	r3,8(r6)
 8022a34:	21800215 	stw	r6,8(r4)
 8022a38:	19800315 	stw	r6,12(r3)
 8022a3c:	003fde06 	br	80229b8 <__alt_data_end+0xfffe35b8>
 8022a40:	29c00217 	ldw	r7,8(r5)
 8022a44:	10c5883a 	add	r2,r2,r3
 8022a48:	00c200b4 	movhi	r3,2050
 8022a4c:	18d6fd04 	addi	r3,r3,23540
 8022a50:	38c03b26 	beq	r7,r3,8022b40 <_free_r+0x278>
 8022a54:	2a000317 	ldw	r8,12(r5)
 8022a58:	11400054 	ori	r5,r2,1
 8022a5c:	3087883a 	add	r3,r6,r2
 8022a60:	3a000315 	stw	r8,12(r7)
 8022a64:	41c00215 	stw	r7,8(r8)
 8022a68:	31400115 	stw	r5,4(r6)
 8022a6c:	18800015 	stw	r2,0(r3)
 8022a70:	003fbd06 	br	8022968 <__alt_data_end+0xfffe3568>
 8022a74:	39c0004c 	andi	r7,r7,1
 8022a78:	10c5883a 	add	r2,r2,r3
 8022a7c:	3800071e 	bne	r7,zero,8022a9c <_free_r+0x1d4>
 8022a80:	81fffe17 	ldw	r7,-8(r16)
 8022a84:	31cdc83a 	sub	r6,r6,r7
 8022a88:	30c00317 	ldw	r3,12(r6)
 8022a8c:	31400217 	ldw	r5,8(r6)
 8022a90:	11c5883a 	add	r2,r2,r7
 8022a94:	28c00315 	stw	r3,12(r5)
 8022a98:	19400215 	stw	r5,8(r3)
 8022a9c:	10c00054 	ori	r3,r2,1
 8022aa0:	30c00115 	stw	r3,4(r6)
 8022aa4:	00c200b4 	movhi	r3,2050
 8022aa8:	18dc8204 	addi	r3,r3,29192
 8022aac:	18c00017 	ldw	r3,0(r3)
 8022ab0:	21800215 	stw	r6,8(r4)
 8022ab4:	10ffc036 	bltu	r2,r3,80229b8 <__alt_data_end+0xfffe35b8>
 8022ab8:	008200f4 	movhi	r2,2051
 8022abc:	10a32a04 	addi	r2,r2,-29528
 8022ac0:	11400017 	ldw	r5,0(r2)
 8022ac4:	8809883a 	mov	r4,r17
 8022ac8:	80227a40 	call	80227a4 <_malloc_trim_r>
 8022acc:	003fba06 	br	80229b8 <__alt_data_end+0xfffe35b8>
 8022ad0:	28c9883a 	add	r4,r5,r3
 8022ad4:	21000117 	ldw	r4,4(r4)
 8022ad8:	2100004c 	andi	r4,r4,1
 8022adc:	2000391e 	bne	r4,zero,8022bc4 <_free_r+0x2fc>
 8022ae0:	29c00217 	ldw	r7,8(r5)
 8022ae4:	29000317 	ldw	r4,12(r5)
 8022ae8:	1885883a 	add	r2,r3,r2
 8022aec:	10c00054 	ori	r3,r2,1
 8022af0:	39000315 	stw	r4,12(r7)
 8022af4:	21c00215 	stw	r7,8(r4)
 8022af8:	30c00115 	stw	r3,4(r6)
 8022afc:	308d883a 	add	r6,r6,r2
 8022b00:	30800015 	stw	r2,0(r6)
 8022b04:	003fac06 	br	80229b8 <__alt_data_end+0xfffe35b8>
 8022b08:	00c00504 	movi	r3,20
 8022b0c:	19401536 	bltu	r3,r5,8022b64 <_free_r+0x29c>
 8022b10:	28c01704 	addi	r3,r5,92
 8022b14:	18c7883a 	add	r3,r3,r3
 8022b18:	294016c4 	addi	r5,r5,91
 8022b1c:	003fb406 	br	80229f0 <__alt_data_end+0xfffe35f0>
 8022b20:	280bd0ba 	srai	r5,r5,2
 8022b24:	00c00044 	movi	r3,1
 8022b28:	38800117 	ldw	r2,4(r7)
 8022b2c:	194a983a 	sll	r5,r3,r5
 8022b30:	2007883a 	mov	r3,r4
 8022b34:	2884b03a 	or	r2,r5,r2
 8022b38:	38800115 	stw	r2,4(r7)
 8022b3c:	003fbb06 	br	8022a2c <__alt_data_end+0xfffe362c>
 8022b40:	21800515 	stw	r6,20(r4)
 8022b44:	21800415 	stw	r6,16(r4)
 8022b48:	10c00054 	ori	r3,r2,1
 8022b4c:	31c00315 	stw	r7,12(r6)
 8022b50:	31c00215 	stw	r7,8(r6)
 8022b54:	30c00115 	stw	r3,4(r6)
 8022b58:	308d883a 	add	r6,r6,r2
 8022b5c:	30800015 	stw	r2,0(r6)
 8022b60:	003f9506 	br	80229b8 <__alt_data_end+0xfffe35b8>
 8022b64:	00c01504 	movi	r3,84
 8022b68:	19400536 	bltu	r3,r5,8022b80 <_free_r+0x2b8>
 8022b6c:	100ad33a 	srli	r5,r2,12
 8022b70:	28c01bc4 	addi	r3,r5,111
 8022b74:	18c7883a 	add	r3,r3,r3
 8022b78:	29401b84 	addi	r5,r5,110
 8022b7c:	003f9c06 	br	80229f0 <__alt_data_end+0xfffe35f0>
 8022b80:	00c05504 	movi	r3,340
 8022b84:	19400536 	bltu	r3,r5,8022b9c <_free_r+0x2d4>
 8022b88:	100ad3fa 	srli	r5,r2,15
 8022b8c:	28c01e04 	addi	r3,r5,120
 8022b90:	18c7883a 	add	r3,r3,r3
 8022b94:	29401dc4 	addi	r5,r5,119
 8022b98:	003f9506 	br	80229f0 <__alt_data_end+0xfffe35f0>
 8022b9c:	00c15504 	movi	r3,1364
 8022ba0:	19400536 	bltu	r3,r5,8022bb8 <_free_r+0x2f0>
 8022ba4:	100ad4ba 	srli	r5,r2,18
 8022ba8:	28c01f44 	addi	r3,r5,125
 8022bac:	18c7883a 	add	r3,r3,r3
 8022bb0:	29401f04 	addi	r5,r5,124
 8022bb4:	003f8e06 	br	80229f0 <__alt_data_end+0xfffe35f0>
 8022bb8:	00c03f84 	movi	r3,254
 8022bbc:	01401f84 	movi	r5,126
 8022bc0:	003f8b06 	br	80229f0 <__alt_data_end+0xfffe35f0>
 8022bc4:	10c00054 	ori	r3,r2,1
 8022bc8:	30c00115 	stw	r3,4(r6)
 8022bcc:	308d883a 	add	r6,r6,r2
 8022bd0:	30800015 	stw	r2,0(r6)
 8022bd4:	003f7806 	br	80229b8 <__alt_data_end+0xfffe35b8>

08022bd8 <_lseek_r>:
 8022bd8:	defffd04 	addi	sp,sp,-12
 8022bdc:	2805883a 	mov	r2,r5
 8022be0:	dc000015 	stw	r16,0(sp)
 8022be4:	040200f4 	movhi	r16,2051
 8022be8:	dc400115 	stw	r17,4(sp)
 8022bec:	300b883a 	mov	r5,r6
 8022bf0:	84232b04 	addi	r16,r16,-29524
 8022bf4:	2023883a 	mov	r17,r4
 8022bf8:	380d883a 	mov	r6,r7
 8022bfc:	1009883a 	mov	r4,r2
 8022c00:	dfc00215 	stw	ra,8(sp)
 8022c04:	80000015 	stw	zero,0(r16)
 8022c08:	80235240 	call	8023524 <lseek>
 8022c0c:	00ffffc4 	movi	r3,-1
 8022c10:	10c00526 	beq	r2,r3,8022c28 <_lseek_r+0x50>
 8022c14:	dfc00217 	ldw	ra,8(sp)
 8022c18:	dc400117 	ldw	r17,4(sp)
 8022c1c:	dc000017 	ldw	r16,0(sp)
 8022c20:	dec00304 	addi	sp,sp,12
 8022c24:	f800283a 	ret
 8022c28:	80c00017 	ldw	r3,0(r16)
 8022c2c:	183ff926 	beq	r3,zero,8022c14 <__alt_data_end+0xfffe3814>
 8022c30:	88c00015 	stw	r3,0(r17)
 8022c34:	003ff706 	br	8022c14 <__alt_data_end+0xfffe3814>

08022c38 <__smakebuf_r>:
 8022c38:	2880030b 	ldhu	r2,12(r5)
 8022c3c:	10c0008c 	andi	r3,r2,2
 8022c40:	1800411e 	bne	r3,zero,8022d48 <__smakebuf_r+0x110>
 8022c44:	deffec04 	addi	sp,sp,-80
 8022c48:	dc000f15 	stw	r16,60(sp)
 8022c4c:	2821883a 	mov	r16,r5
 8022c50:	2940038f 	ldh	r5,14(r5)
 8022c54:	dc401015 	stw	r17,64(sp)
 8022c58:	dfc01315 	stw	ra,76(sp)
 8022c5c:	dcc01215 	stw	r19,72(sp)
 8022c60:	dc801115 	stw	r18,68(sp)
 8022c64:	2023883a 	mov	r17,r4
 8022c68:	28001c16 	blt	r5,zero,8022cdc <__smakebuf_r+0xa4>
 8022c6c:	d80d883a 	mov	r6,sp
 8022c70:	8022e540 	call	8022e54 <_fstat_r>
 8022c74:	10001816 	blt	r2,zero,8022cd8 <__smakebuf_r+0xa0>
 8022c78:	d8800117 	ldw	r2,4(sp)
 8022c7c:	00e00014 	movui	r3,32768
 8022c80:	10bc000c 	andi	r2,r2,61440
 8022c84:	14c80020 	cmpeqi	r19,r2,8192
 8022c88:	10c03726 	beq	r2,r3,8022d68 <__smakebuf_r+0x130>
 8022c8c:	80c0030b 	ldhu	r3,12(r16)
 8022c90:	18c20014 	ori	r3,r3,2048
 8022c94:	80c0030d 	sth	r3,12(r16)
 8022c98:	00c80004 	movi	r3,8192
 8022c9c:	10c0521e 	bne	r2,r3,8022de8 <__smakebuf_r+0x1b0>
 8022ca0:	8140038f 	ldh	r5,14(r16)
 8022ca4:	8809883a 	mov	r4,r17
 8022ca8:	8022eb00 	call	8022eb0 <_isatty_r>
 8022cac:	10004c26 	beq	r2,zero,8022de0 <__smakebuf_r+0x1a8>
 8022cb0:	8080030b 	ldhu	r2,12(r16)
 8022cb4:	80c010c4 	addi	r3,r16,67
 8022cb8:	80c00015 	stw	r3,0(r16)
 8022cbc:	10800054 	ori	r2,r2,1
 8022cc0:	8080030d 	sth	r2,12(r16)
 8022cc4:	00800044 	movi	r2,1
 8022cc8:	80c00415 	stw	r3,16(r16)
 8022ccc:	80800515 	stw	r2,20(r16)
 8022cd0:	04810004 	movi	r18,1024
 8022cd4:	00000706 	br	8022cf4 <__smakebuf_r+0xbc>
 8022cd8:	8080030b 	ldhu	r2,12(r16)
 8022cdc:	10c0200c 	andi	r3,r2,128
 8022ce0:	18001f1e 	bne	r3,zero,8022d60 <__smakebuf_r+0x128>
 8022ce4:	04810004 	movi	r18,1024
 8022ce8:	10820014 	ori	r2,r2,2048
 8022cec:	8080030d 	sth	r2,12(r16)
 8022cf0:	0027883a 	mov	r19,zero
 8022cf4:	900b883a 	mov	r5,r18
 8022cf8:	8809883a 	mov	r4,r17
 8022cfc:	8020e400 	call	8020e40 <_malloc_r>
 8022d00:	10002c26 	beq	r2,zero,8022db4 <__smakebuf_r+0x17c>
 8022d04:	80c0030b 	ldhu	r3,12(r16)
 8022d08:	010200b4 	movhi	r4,2050
 8022d0c:	21011204 	addi	r4,r4,1096
 8022d10:	89000f15 	stw	r4,60(r17)
 8022d14:	18c02014 	ori	r3,r3,128
 8022d18:	80c0030d 	sth	r3,12(r16)
 8022d1c:	80800015 	stw	r2,0(r16)
 8022d20:	80800415 	stw	r2,16(r16)
 8022d24:	84800515 	stw	r18,20(r16)
 8022d28:	98001a1e 	bne	r19,zero,8022d94 <__smakebuf_r+0x15c>
 8022d2c:	dfc01317 	ldw	ra,76(sp)
 8022d30:	dcc01217 	ldw	r19,72(sp)
 8022d34:	dc801117 	ldw	r18,68(sp)
 8022d38:	dc401017 	ldw	r17,64(sp)
 8022d3c:	dc000f17 	ldw	r16,60(sp)
 8022d40:	dec01404 	addi	sp,sp,80
 8022d44:	f800283a 	ret
 8022d48:	288010c4 	addi	r2,r5,67
 8022d4c:	28800015 	stw	r2,0(r5)
 8022d50:	28800415 	stw	r2,16(r5)
 8022d54:	00800044 	movi	r2,1
 8022d58:	28800515 	stw	r2,20(r5)
 8022d5c:	f800283a 	ret
 8022d60:	04801004 	movi	r18,64
 8022d64:	003fe006 	br	8022ce8 <__alt_data_end+0xfffe38e8>
 8022d68:	81000a17 	ldw	r4,40(r16)
 8022d6c:	00c200b4 	movhi	r3,2050
 8022d70:	18c86304 	addi	r3,r3,8588
 8022d74:	20ffc51e 	bne	r4,r3,8022c8c <__alt_data_end+0xfffe388c>
 8022d78:	8080030b 	ldhu	r2,12(r16)
 8022d7c:	04810004 	movi	r18,1024
 8022d80:	84801315 	stw	r18,76(r16)
 8022d84:	1484b03a 	or	r2,r2,r18
 8022d88:	8080030d 	sth	r2,12(r16)
 8022d8c:	0027883a 	mov	r19,zero
 8022d90:	003fd806 	br	8022cf4 <__alt_data_end+0xfffe38f4>
 8022d94:	8140038f 	ldh	r5,14(r16)
 8022d98:	8809883a 	mov	r4,r17
 8022d9c:	8022eb00 	call	8022eb0 <_isatty_r>
 8022da0:	103fe226 	beq	r2,zero,8022d2c <__alt_data_end+0xfffe392c>
 8022da4:	8080030b 	ldhu	r2,12(r16)
 8022da8:	10800054 	ori	r2,r2,1
 8022dac:	8080030d 	sth	r2,12(r16)
 8022db0:	003fde06 	br	8022d2c <__alt_data_end+0xfffe392c>
 8022db4:	8080030b 	ldhu	r2,12(r16)
 8022db8:	10c0800c 	andi	r3,r2,512
 8022dbc:	183fdb1e 	bne	r3,zero,8022d2c <__alt_data_end+0xfffe392c>
 8022dc0:	10800094 	ori	r2,r2,2
 8022dc4:	80c010c4 	addi	r3,r16,67
 8022dc8:	8080030d 	sth	r2,12(r16)
 8022dcc:	00800044 	movi	r2,1
 8022dd0:	80c00015 	stw	r3,0(r16)
 8022dd4:	80c00415 	stw	r3,16(r16)
 8022dd8:	80800515 	stw	r2,20(r16)
 8022ddc:	003fd306 	br	8022d2c <__alt_data_end+0xfffe392c>
 8022de0:	04810004 	movi	r18,1024
 8022de4:	003fc306 	br	8022cf4 <__alt_data_end+0xfffe38f4>
 8022de8:	0027883a 	mov	r19,zero
 8022dec:	04810004 	movi	r18,1024
 8022df0:	003fc006 	br	8022cf4 <__alt_data_end+0xfffe38f4>

08022df4 <_read_r>:
 8022df4:	defffd04 	addi	sp,sp,-12
 8022df8:	2805883a 	mov	r2,r5
 8022dfc:	dc000015 	stw	r16,0(sp)
 8022e00:	040200f4 	movhi	r16,2051
 8022e04:	dc400115 	stw	r17,4(sp)
 8022e08:	300b883a 	mov	r5,r6
 8022e0c:	84232b04 	addi	r16,r16,-29524
 8022e10:	2023883a 	mov	r17,r4
 8022e14:	380d883a 	mov	r6,r7
 8022e18:	1009883a 	mov	r4,r2
 8022e1c:	dfc00215 	stw	ra,8(sp)
 8022e20:	80000015 	stw	zero,0(r16)
 8022e24:	80237000 	call	8023700 <read>
 8022e28:	00ffffc4 	movi	r3,-1
 8022e2c:	10c00526 	beq	r2,r3,8022e44 <_read_r+0x50>
 8022e30:	dfc00217 	ldw	ra,8(sp)
 8022e34:	dc400117 	ldw	r17,4(sp)
 8022e38:	dc000017 	ldw	r16,0(sp)
 8022e3c:	dec00304 	addi	sp,sp,12
 8022e40:	f800283a 	ret
 8022e44:	80c00017 	ldw	r3,0(r16)
 8022e48:	183ff926 	beq	r3,zero,8022e30 <__alt_data_end+0xfffe3a30>
 8022e4c:	88c00015 	stw	r3,0(r17)
 8022e50:	003ff706 	br	8022e30 <__alt_data_end+0xfffe3a30>

08022e54 <_fstat_r>:
 8022e54:	defffd04 	addi	sp,sp,-12
 8022e58:	2805883a 	mov	r2,r5
 8022e5c:	dc000015 	stw	r16,0(sp)
 8022e60:	040200f4 	movhi	r16,2051
 8022e64:	dc400115 	stw	r17,4(sp)
 8022e68:	84232b04 	addi	r16,r16,-29524
 8022e6c:	2023883a 	mov	r17,r4
 8022e70:	300b883a 	mov	r5,r6
 8022e74:	1009883a 	mov	r4,r2
 8022e78:	dfc00215 	stw	ra,8(sp)
 8022e7c:	80000015 	stw	zero,0(r16)
 8022e80:	802325c0 	call	802325c <fstat>
 8022e84:	00ffffc4 	movi	r3,-1
 8022e88:	10c00526 	beq	r2,r3,8022ea0 <_fstat_r+0x4c>
 8022e8c:	dfc00217 	ldw	ra,8(sp)
 8022e90:	dc400117 	ldw	r17,4(sp)
 8022e94:	dc000017 	ldw	r16,0(sp)
 8022e98:	dec00304 	addi	sp,sp,12
 8022e9c:	f800283a 	ret
 8022ea0:	80c00017 	ldw	r3,0(r16)
 8022ea4:	183ff926 	beq	r3,zero,8022e8c <__alt_data_end+0xfffe3a8c>
 8022ea8:	88c00015 	stw	r3,0(r17)
 8022eac:	003ff706 	br	8022e8c <__alt_data_end+0xfffe3a8c>

08022eb0 <_isatty_r>:
 8022eb0:	defffd04 	addi	sp,sp,-12
 8022eb4:	dc000015 	stw	r16,0(sp)
 8022eb8:	040200f4 	movhi	r16,2051
 8022ebc:	dc400115 	stw	r17,4(sp)
 8022ec0:	84232b04 	addi	r16,r16,-29524
 8022ec4:	2023883a 	mov	r17,r4
 8022ec8:	2809883a 	mov	r4,r5
 8022ecc:	dfc00215 	stw	ra,8(sp)
 8022ed0:	80000015 	stw	zero,0(r16)
 8022ed4:	80233500 	call	8023350 <isatty>
 8022ed8:	00ffffc4 	movi	r3,-1
 8022edc:	10c00526 	beq	r2,r3,8022ef4 <_isatty_r+0x44>
 8022ee0:	dfc00217 	ldw	ra,8(sp)
 8022ee4:	dc400117 	ldw	r17,4(sp)
 8022ee8:	dc000017 	ldw	r16,0(sp)
 8022eec:	dec00304 	addi	sp,sp,12
 8022ef0:	f800283a 	ret
 8022ef4:	80c00017 	ldw	r3,0(r16)
 8022ef8:	183ff926 	beq	r3,zero,8022ee0 <__alt_data_end+0xfffe3ae0>
 8022efc:	88c00015 	stw	r3,0(r17)
 8022f00:	003ff706 	br	8022ee0 <__alt_data_end+0xfffe3ae0>

08022f04 <__divsi3>:
 8022f04:	20001b16 	blt	r4,zero,8022f74 <__divsi3+0x70>
 8022f08:	000f883a 	mov	r7,zero
 8022f0c:	28001616 	blt	r5,zero,8022f68 <__divsi3+0x64>
 8022f10:	200d883a 	mov	r6,r4
 8022f14:	29001a2e 	bgeu	r5,r4,8022f80 <__divsi3+0x7c>
 8022f18:	00800804 	movi	r2,32
 8022f1c:	00c00044 	movi	r3,1
 8022f20:	00000106 	br	8022f28 <__divsi3+0x24>
 8022f24:	10000d26 	beq	r2,zero,8022f5c <__divsi3+0x58>
 8022f28:	294b883a 	add	r5,r5,r5
 8022f2c:	10bfffc4 	addi	r2,r2,-1
 8022f30:	18c7883a 	add	r3,r3,r3
 8022f34:	293ffb36 	bltu	r5,r4,8022f24 <__alt_data_end+0xfffe3b24>
 8022f38:	0005883a 	mov	r2,zero
 8022f3c:	18000726 	beq	r3,zero,8022f5c <__divsi3+0x58>
 8022f40:	0005883a 	mov	r2,zero
 8022f44:	31400236 	bltu	r6,r5,8022f50 <__divsi3+0x4c>
 8022f48:	314dc83a 	sub	r6,r6,r5
 8022f4c:	10c4b03a 	or	r2,r2,r3
 8022f50:	1806d07a 	srli	r3,r3,1
 8022f54:	280ad07a 	srli	r5,r5,1
 8022f58:	183ffa1e 	bne	r3,zero,8022f44 <__alt_data_end+0xfffe3b44>
 8022f5c:	38000126 	beq	r7,zero,8022f64 <__divsi3+0x60>
 8022f60:	0085c83a 	sub	r2,zero,r2
 8022f64:	f800283a 	ret
 8022f68:	014bc83a 	sub	r5,zero,r5
 8022f6c:	39c0005c 	xori	r7,r7,1
 8022f70:	003fe706 	br	8022f10 <__alt_data_end+0xfffe3b10>
 8022f74:	0109c83a 	sub	r4,zero,r4
 8022f78:	01c00044 	movi	r7,1
 8022f7c:	003fe306 	br	8022f0c <__alt_data_end+0xfffe3b0c>
 8022f80:	00c00044 	movi	r3,1
 8022f84:	003fee06 	br	8022f40 <__alt_data_end+0xfffe3b40>

08022f88 <__modsi3>:
 8022f88:	20001716 	blt	r4,zero,8022fe8 <__modsi3+0x60>
 8022f8c:	000f883a 	mov	r7,zero
 8022f90:	2005883a 	mov	r2,r4
 8022f94:	28001216 	blt	r5,zero,8022fe0 <__modsi3+0x58>
 8022f98:	2900162e 	bgeu	r5,r4,8022ff4 <__modsi3+0x6c>
 8022f9c:	01800804 	movi	r6,32
 8022fa0:	00c00044 	movi	r3,1
 8022fa4:	00000106 	br	8022fac <__modsi3+0x24>
 8022fa8:	30000a26 	beq	r6,zero,8022fd4 <__modsi3+0x4c>
 8022fac:	294b883a 	add	r5,r5,r5
 8022fb0:	31bfffc4 	addi	r6,r6,-1
 8022fb4:	18c7883a 	add	r3,r3,r3
 8022fb8:	293ffb36 	bltu	r5,r4,8022fa8 <__alt_data_end+0xfffe3ba8>
 8022fbc:	18000526 	beq	r3,zero,8022fd4 <__modsi3+0x4c>
 8022fc0:	1806d07a 	srli	r3,r3,1
 8022fc4:	11400136 	bltu	r2,r5,8022fcc <__modsi3+0x44>
 8022fc8:	1145c83a 	sub	r2,r2,r5
 8022fcc:	280ad07a 	srli	r5,r5,1
 8022fd0:	183ffb1e 	bne	r3,zero,8022fc0 <__alt_data_end+0xfffe3bc0>
 8022fd4:	38000126 	beq	r7,zero,8022fdc <__modsi3+0x54>
 8022fd8:	0085c83a 	sub	r2,zero,r2
 8022fdc:	f800283a 	ret
 8022fe0:	014bc83a 	sub	r5,zero,r5
 8022fe4:	003fec06 	br	8022f98 <__alt_data_end+0xfffe3b98>
 8022fe8:	0109c83a 	sub	r4,zero,r4
 8022fec:	01c00044 	movi	r7,1
 8022ff0:	003fe706 	br	8022f90 <__alt_data_end+0xfffe3b90>
 8022ff4:	00c00044 	movi	r3,1
 8022ff8:	003ff106 	br	8022fc0 <__alt_data_end+0xfffe3bc0>

08022ffc <__udivsi3>:
 8022ffc:	200d883a 	mov	r6,r4
 8023000:	2900152e 	bgeu	r5,r4,8023058 <__udivsi3+0x5c>
 8023004:	28001416 	blt	r5,zero,8023058 <__udivsi3+0x5c>
 8023008:	00800804 	movi	r2,32
 802300c:	00c00044 	movi	r3,1
 8023010:	00000206 	br	802301c <__udivsi3+0x20>
 8023014:	10000e26 	beq	r2,zero,8023050 <__udivsi3+0x54>
 8023018:	28000516 	blt	r5,zero,8023030 <__udivsi3+0x34>
 802301c:	294b883a 	add	r5,r5,r5
 8023020:	10bfffc4 	addi	r2,r2,-1
 8023024:	18c7883a 	add	r3,r3,r3
 8023028:	293ffa36 	bltu	r5,r4,8023014 <__alt_data_end+0xfffe3c14>
 802302c:	18000826 	beq	r3,zero,8023050 <__udivsi3+0x54>
 8023030:	0005883a 	mov	r2,zero
 8023034:	31400236 	bltu	r6,r5,8023040 <__udivsi3+0x44>
 8023038:	314dc83a 	sub	r6,r6,r5
 802303c:	10c4b03a 	or	r2,r2,r3
 8023040:	1806d07a 	srli	r3,r3,1
 8023044:	280ad07a 	srli	r5,r5,1
 8023048:	183ffa1e 	bne	r3,zero,8023034 <__alt_data_end+0xfffe3c34>
 802304c:	f800283a 	ret
 8023050:	0005883a 	mov	r2,zero
 8023054:	f800283a 	ret
 8023058:	00c00044 	movi	r3,1
 802305c:	003ff406 	br	8023030 <__alt_data_end+0xfffe3c30>

08023060 <__umodsi3>:
 8023060:	2005883a 	mov	r2,r4
 8023064:	2900122e 	bgeu	r5,r4,80230b0 <__umodsi3+0x50>
 8023068:	28001116 	blt	r5,zero,80230b0 <__umodsi3+0x50>
 802306c:	01800804 	movi	r6,32
 8023070:	00c00044 	movi	r3,1
 8023074:	00000206 	br	8023080 <__umodsi3+0x20>
 8023078:	30000c26 	beq	r6,zero,80230ac <__umodsi3+0x4c>
 802307c:	28000516 	blt	r5,zero,8023094 <__umodsi3+0x34>
 8023080:	294b883a 	add	r5,r5,r5
 8023084:	31bfffc4 	addi	r6,r6,-1
 8023088:	18c7883a 	add	r3,r3,r3
 802308c:	293ffa36 	bltu	r5,r4,8023078 <__alt_data_end+0xfffe3c78>
 8023090:	18000626 	beq	r3,zero,80230ac <__umodsi3+0x4c>
 8023094:	1806d07a 	srli	r3,r3,1
 8023098:	11400136 	bltu	r2,r5,80230a0 <__umodsi3+0x40>
 802309c:	1145c83a 	sub	r2,r2,r5
 80230a0:	280ad07a 	srli	r5,r5,1
 80230a4:	183ffb1e 	bne	r3,zero,8023094 <__alt_data_end+0xfffe3c94>
 80230a8:	f800283a 	ret
 80230ac:	f800283a 	ret
 80230b0:	00c00044 	movi	r3,1
 80230b4:	003ff706 	br	8023094 <__alt_data_end+0xfffe3c94>

080230b8 <__mulsi3>:
 80230b8:	0005883a 	mov	r2,zero
 80230bc:	20000726 	beq	r4,zero,80230dc <__mulsi3+0x24>
 80230c0:	20c0004c 	andi	r3,r4,1
 80230c4:	2008d07a 	srli	r4,r4,1
 80230c8:	18000126 	beq	r3,zero,80230d0 <__mulsi3+0x18>
 80230cc:	1145883a 	add	r2,r2,r5
 80230d0:	294b883a 	add	r5,r5,r5
 80230d4:	203ffa1e 	bne	r4,zero,80230c0 <__alt_data_end+0xfffe3cc0>
 80230d8:	f800283a 	ret
 80230dc:	f800283a 	ret

080230e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80230e0:	defffe04 	addi	sp,sp,-8
 80230e4:	dfc00115 	stw	ra,4(sp)
 80230e8:	df000015 	stw	fp,0(sp)
 80230ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80230f0:	d0a00917 	ldw	r2,-32732(gp)
 80230f4:	10000326 	beq	r2,zero,8023104 <alt_get_errno+0x24>
 80230f8:	d0a00917 	ldw	r2,-32732(gp)
 80230fc:	103ee83a 	callr	r2
 8023100:	00000106 	br	8023108 <alt_get_errno+0x28>
 8023104:	d0a6ac04 	addi	r2,gp,-25936
}
 8023108:	e037883a 	mov	sp,fp
 802310c:	dfc00117 	ldw	ra,4(sp)
 8023110:	df000017 	ldw	fp,0(sp)
 8023114:	dec00204 	addi	sp,sp,8
 8023118:	f800283a 	ret

0802311c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 802311c:	defffb04 	addi	sp,sp,-20
 8023120:	dfc00415 	stw	ra,16(sp)
 8023124:	df000315 	stw	fp,12(sp)
 8023128:	df000304 	addi	fp,sp,12
 802312c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8023130:	e0bfff17 	ldw	r2,-4(fp)
 8023134:	10000816 	blt	r2,zero,8023158 <close+0x3c>
 8023138:	01400304 	movi	r5,12
 802313c:	e13fff17 	ldw	r4,-4(fp)
 8023140:	80230b80 	call	80230b8 <__mulsi3>
 8023144:	1007883a 	mov	r3,r2
 8023148:	008200b4 	movhi	r2,2050
 802314c:	10980704 	addi	r2,r2,24604
 8023150:	1885883a 	add	r2,r3,r2
 8023154:	00000106 	br	802315c <close+0x40>
 8023158:	0005883a 	mov	r2,zero
 802315c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8023160:	e0bffd17 	ldw	r2,-12(fp)
 8023164:	10001926 	beq	r2,zero,80231cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8023168:	e0bffd17 	ldw	r2,-12(fp)
 802316c:	10800017 	ldw	r2,0(r2)
 8023170:	10800417 	ldw	r2,16(r2)
 8023174:	10000626 	beq	r2,zero,8023190 <close+0x74>
 8023178:	e0bffd17 	ldw	r2,-12(fp)
 802317c:	10800017 	ldw	r2,0(r2)
 8023180:	10800417 	ldw	r2,16(r2)
 8023184:	e13ffd17 	ldw	r4,-12(fp)
 8023188:	103ee83a 	callr	r2
 802318c:	00000106 	br	8023194 <close+0x78>
 8023190:	0005883a 	mov	r2,zero
 8023194:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8023198:	e13fff17 	ldw	r4,-4(fp)
 802319c:	80238040 	call	8023804 <alt_release_fd>
    if (rval < 0)
 80231a0:	e0bffe17 	ldw	r2,-8(fp)
 80231a4:	1000070e 	bge	r2,zero,80231c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80231a8:	80230e00 	call	80230e0 <alt_get_errno>
 80231ac:	1007883a 	mov	r3,r2
 80231b0:	e0bffe17 	ldw	r2,-8(fp)
 80231b4:	0085c83a 	sub	r2,zero,r2
 80231b8:	18800015 	stw	r2,0(r3)
      return -1;
 80231bc:	00bfffc4 	movi	r2,-1
 80231c0:	00000706 	br	80231e0 <close+0xc4>
    }
    return 0;
 80231c4:	0005883a 	mov	r2,zero
 80231c8:	00000506 	br	80231e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80231cc:	80230e00 	call	80230e0 <alt_get_errno>
 80231d0:	1007883a 	mov	r3,r2
 80231d4:	00801444 	movi	r2,81
 80231d8:	18800015 	stw	r2,0(r3)
    return -1;
 80231dc:	00bfffc4 	movi	r2,-1
  }
}
 80231e0:	e037883a 	mov	sp,fp
 80231e4:	dfc00117 	ldw	ra,4(sp)
 80231e8:	df000017 	ldw	fp,0(sp)
 80231ec:	dec00204 	addi	sp,sp,8
 80231f0:	f800283a 	ret

080231f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80231f4:	defffc04 	addi	sp,sp,-16
 80231f8:	df000315 	stw	fp,12(sp)
 80231fc:	df000304 	addi	fp,sp,12
 8023200:	e13ffd15 	stw	r4,-12(fp)
 8023204:	e17ffe15 	stw	r5,-8(fp)
 8023208:	e1bfff15 	stw	r6,-4(fp)
  return len;
 802320c:	e0bfff17 	ldw	r2,-4(fp)
}
 8023210:	e037883a 	mov	sp,fp
 8023214:	df000017 	ldw	fp,0(sp)
 8023218:	dec00104 	addi	sp,sp,4
 802321c:	f800283a 	ret

08023220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023220:	defffe04 	addi	sp,sp,-8
 8023224:	dfc00115 	stw	ra,4(sp)
 8023228:	df000015 	stw	fp,0(sp)
 802322c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023230:	d0a00917 	ldw	r2,-32732(gp)
 8023234:	10000326 	beq	r2,zero,8023244 <alt_get_errno+0x24>
 8023238:	d0a00917 	ldw	r2,-32732(gp)
 802323c:	103ee83a 	callr	r2
 8023240:	00000106 	br	8023248 <alt_get_errno+0x28>
 8023244:	d0a6ac04 	addi	r2,gp,-25936
}
 8023248:	e037883a 	mov	sp,fp
 802324c:	dfc00117 	ldw	ra,4(sp)
 8023250:	df000017 	ldw	fp,0(sp)
 8023254:	dec00204 	addi	sp,sp,8
 8023258:	f800283a 	ret

0802325c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 802325c:	defffb04 	addi	sp,sp,-20
 8023260:	dfc00415 	stw	ra,16(sp)
 8023264:	df000315 	stw	fp,12(sp)
 8023268:	df000304 	addi	fp,sp,12
 802326c:	e13ffe15 	stw	r4,-8(fp)
 8023270:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023274:	e0bffe17 	ldw	r2,-8(fp)
 8023278:	10000816 	blt	r2,zero,802329c <fstat+0x40>
 802327c:	01400304 	movi	r5,12
 8023280:	e13ffe17 	ldw	r4,-8(fp)
 8023284:	80230b80 	call	80230b8 <__mulsi3>
 8023288:	1007883a 	mov	r3,r2
 802328c:	008200b4 	movhi	r2,2050
 8023290:	10980704 	addi	r2,r2,24604
 8023294:	1885883a 	add	r2,r3,r2
 8023298:	00000106 	br	80232a0 <fstat+0x44>
 802329c:	0005883a 	mov	r2,zero
 80232a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80232a4:	e0bffd17 	ldw	r2,-12(fp)
 80232a8:	10001026 	beq	r2,zero,80232ec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80232ac:	e0bffd17 	ldw	r2,-12(fp)
 80232b0:	10800017 	ldw	r2,0(r2)
 80232b4:	10800817 	ldw	r2,32(r2)
 80232b8:	10000726 	beq	r2,zero,80232d8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 80232bc:	e0bffd17 	ldw	r2,-12(fp)
 80232c0:	10800017 	ldw	r2,0(r2)
 80232c4:	10800817 	ldw	r2,32(r2)
 80232c8:	e17fff17 	ldw	r5,-4(fp)
 80232cc:	e13ffd17 	ldw	r4,-12(fp)
 80232d0:	103ee83a 	callr	r2
 80232d4:	00000a06 	br	8023300 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80232d8:	e0bfff17 	ldw	r2,-4(fp)
 80232dc:	00c80004 	movi	r3,8192
 80232e0:	10c00115 	stw	r3,4(r2)
      return 0;
 80232e4:	0005883a 	mov	r2,zero
 80232e8:	00000506 	br	8023300 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80232ec:	80232200 	call	8023220 <alt_get_errno>
 80232f0:	1007883a 	mov	r3,r2
 80232f4:	00801444 	movi	r2,81
 80232f8:	18800015 	stw	r2,0(r3)
    return -1;
 80232fc:	00bfffc4 	movi	r2,-1
  }
}
 8023300:	e037883a 	mov	sp,fp
 8023304:	dfc00117 	ldw	ra,4(sp)
 8023308:	df000017 	ldw	fp,0(sp)
 802330c:	dec00204 	addi	sp,sp,8
 8023310:	f800283a 	ret

08023314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023314:	defffe04 	addi	sp,sp,-8
 8023318:	dfc00115 	stw	ra,4(sp)
 802331c:	df000015 	stw	fp,0(sp)
 8023320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023324:	d0a00917 	ldw	r2,-32732(gp)
 8023328:	10000326 	beq	r2,zero,8023338 <alt_get_errno+0x24>
 802332c:	d0a00917 	ldw	r2,-32732(gp)
 8023330:	103ee83a 	callr	r2
 8023334:	00000106 	br	802333c <alt_get_errno+0x28>
 8023338:	d0a6ac04 	addi	r2,gp,-25936
}
 802333c:	e037883a 	mov	sp,fp
 8023340:	dfc00117 	ldw	ra,4(sp)
 8023344:	df000017 	ldw	fp,0(sp)
 8023348:	dec00204 	addi	sp,sp,8
 802334c:	f800283a 	ret

08023350 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8023350:	deffed04 	addi	sp,sp,-76
 8023354:	dfc01215 	stw	ra,72(sp)
 8023358:	df001115 	stw	fp,68(sp)
 802335c:	df001104 	addi	fp,sp,68
 8023360:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023364:	e0bfff17 	ldw	r2,-4(fp)
 8023368:	10000816 	blt	r2,zero,802338c <isatty+0x3c>
 802336c:	01400304 	movi	r5,12
 8023370:	e13fff17 	ldw	r4,-4(fp)
 8023374:	80230b80 	call	80230b8 <__mulsi3>
 8023378:	1007883a 	mov	r3,r2
 802337c:	008200b4 	movhi	r2,2050
 8023380:	10980704 	addi	r2,r2,24604
 8023384:	1885883a 	add	r2,r3,r2
 8023388:	00000106 	br	8023390 <isatty+0x40>
 802338c:	0005883a 	mov	r2,zero
 8023390:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8023394:	e0bfef17 	ldw	r2,-68(fp)
 8023398:	10000e26 	beq	r2,zero,80233d4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 802339c:	e0bfef17 	ldw	r2,-68(fp)
 80233a0:	10800017 	ldw	r2,0(r2)
 80233a4:	10800817 	ldw	r2,32(r2)
 80233a8:	1000021e 	bne	r2,zero,80233b4 <isatty+0x64>
    {
      return 1;
 80233ac:	00800044 	movi	r2,1
 80233b0:	00000d06 	br	80233e8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80233b4:	e0bff004 	addi	r2,fp,-64
 80233b8:	100b883a 	mov	r5,r2
 80233bc:	e13fff17 	ldw	r4,-4(fp)
 80233c0:	802325c0 	call	802325c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80233c4:	e0bff117 	ldw	r2,-60(fp)
 80233c8:	10880020 	cmpeqi	r2,r2,8192
 80233cc:	10803fcc 	andi	r2,r2,255
 80233d0:	00000506 	br	80233e8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80233d4:	80233140 	call	8023314 <alt_get_errno>
 80233d8:	1007883a 	mov	r3,r2
 80233dc:	00801444 	movi	r2,81
 80233e0:	18800015 	stw	r2,0(r3)
    return 0;
 80233e4:	0005883a 	mov	r2,zero
  }
}
 80233e8:	e037883a 	mov	sp,fp
 80233ec:	dfc00117 	ldw	ra,4(sp)
 80233f0:	df000017 	ldw	fp,0(sp)
 80233f4:	dec00204 	addi	sp,sp,8
 80233f8:	f800283a 	ret

080233fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80233fc:	defffc04 	addi	sp,sp,-16
 8023400:	df000315 	stw	fp,12(sp)
 8023404:	df000304 	addi	fp,sp,12
 8023408:	e13ffd15 	stw	r4,-12(fp)
 802340c:	e17ffe15 	stw	r5,-8(fp)
 8023410:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8023414:	e0fffe17 	ldw	r3,-8(fp)
 8023418:	e0bffd17 	ldw	r2,-12(fp)
 802341c:	18800c26 	beq	r3,r2,8023450 <alt_load_section+0x54>
  {
    while( to != end )
 8023420:	00000806 	br	8023444 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8023424:	e0bffe17 	ldw	r2,-8(fp)
 8023428:	10c00104 	addi	r3,r2,4
 802342c:	e0fffe15 	stw	r3,-8(fp)
 8023430:	e0fffd17 	ldw	r3,-12(fp)
 8023434:	19000104 	addi	r4,r3,4
 8023438:	e13ffd15 	stw	r4,-12(fp)
 802343c:	18c00017 	ldw	r3,0(r3)
 8023440:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8023444:	e0fffe17 	ldw	r3,-8(fp)
 8023448:	e0bfff17 	ldw	r2,-4(fp)
 802344c:	18bff51e 	bne	r3,r2,8023424 <__alt_data_end+0xfffe4024>
    {
      *to++ = *from++;
    }
  }
}
 8023450:	0001883a 	nop
 8023454:	e037883a 	mov	sp,fp
 8023458:	df000017 	ldw	fp,0(sp)
 802345c:	dec00104 	addi	sp,sp,4
 8023460:	f800283a 	ret

08023464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8023464:	defffe04 	addi	sp,sp,-8
 8023468:	dfc00115 	stw	ra,4(sp)
 802346c:	df000015 	stw	fp,0(sp)
 8023470:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8023474:	018200b4 	movhi	r6,2050
 8023478:	319c8d04 	addi	r6,r6,29236
 802347c:	014200b4 	movhi	r5,2050
 8023480:	2955f204 	addi	r5,r5,22472
 8023484:	010200b4 	movhi	r4,2050
 8023488:	211c8d04 	addi	r4,r4,29236
 802348c:	80233fc0 	call	80233fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8023490:	018200b4 	movhi	r6,2050
 8023494:	31808c04 	addi	r6,r6,560
 8023498:	014200b4 	movhi	r5,2050
 802349c:	29400804 	addi	r5,r5,32
 80234a0:	010200b4 	movhi	r4,2050
 80234a4:	21000804 	addi	r4,r4,32
 80234a8:	80233fc0 	call	80233fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80234ac:	018200b4 	movhi	r6,2050
 80234b0:	3195f204 	addi	r6,r6,22472
 80234b4:	014200b4 	movhi	r5,2050
 80234b8:	2955de04 	addi	r5,r5,22392
 80234bc:	010200b4 	movhi	r4,2050
 80234c0:	2115de04 	addi	r4,r4,22392
 80234c4:	80233fc0 	call	80233fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80234c8:	80246c00 	call	80246c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80234cc:	80248800 	call	8024880 <alt_icache_flush_all>
}
 80234d0:	0001883a 	nop
 80234d4:	e037883a 	mov	sp,fp
 80234d8:	dfc00117 	ldw	ra,4(sp)
 80234dc:	df000017 	ldw	fp,0(sp)
 80234e0:	dec00204 	addi	sp,sp,8
 80234e4:	f800283a 	ret

080234e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80234e8:	defffe04 	addi	sp,sp,-8
 80234ec:	dfc00115 	stw	ra,4(sp)
 80234f0:	df000015 	stw	fp,0(sp)
 80234f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80234f8:	d0a00917 	ldw	r2,-32732(gp)
 80234fc:	10000326 	beq	r2,zero,802350c <alt_get_errno+0x24>
 8023500:	d0a00917 	ldw	r2,-32732(gp)
 8023504:	103ee83a 	callr	r2
 8023508:	00000106 	br	8023510 <alt_get_errno+0x28>
 802350c:	d0a6ac04 	addi	r2,gp,-25936
}
 8023510:	e037883a 	mov	sp,fp
 8023514:	dfc00117 	ldw	ra,4(sp)
 8023518:	df000017 	ldw	fp,0(sp)
 802351c:	dec00204 	addi	sp,sp,8
 8023520:	f800283a 	ret

08023524 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8023524:	defff904 	addi	sp,sp,-28
 8023528:	dfc00615 	stw	ra,24(sp)
 802352c:	df000515 	stw	fp,20(sp)
 8023530:	df000504 	addi	fp,sp,20
 8023534:	e13ffd15 	stw	r4,-12(fp)
 8023538:	e17ffe15 	stw	r5,-8(fp)
 802353c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8023540:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023544:	e0bffd17 	ldw	r2,-12(fp)
 8023548:	10000816 	blt	r2,zero,802356c <lseek+0x48>
 802354c:	01400304 	movi	r5,12
 8023550:	e13ffd17 	ldw	r4,-12(fp)
 8023554:	80230b80 	call	80230b8 <__mulsi3>
 8023558:	1007883a 	mov	r3,r2
 802355c:	008200b4 	movhi	r2,2050
 8023560:	10980704 	addi	r2,r2,24604
 8023564:	1885883a 	add	r2,r3,r2
 8023568:	00000106 	br	8023570 <lseek+0x4c>
 802356c:	0005883a 	mov	r2,zero
 8023570:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8023574:	e0bffc17 	ldw	r2,-16(fp)
 8023578:	10001026 	beq	r2,zero,80235bc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 802357c:	e0bffc17 	ldw	r2,-16(fp)
 8023580:	10800017 	ldw	r2,0(r2)
 8023584:	10800717 	ldw	r2,28(r2)
 8023588:	10000926 	beq	r2,zero,80235b0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 802358c:	e0bffc17 	ldw	r2,-16(fp)
 8023590:	10800017 	ldw	r2,0(r2)
 8023594:	10800717 	ldw	r2,28(r2)
 8023598:	e1bfff17 	ldw	r6,-4(fp)
 802359c:	e17ffe17 	ldw	r5,-8(fp)
 80235a0:	e13ffc17 	ldw	r4,-16(fp)
 80235a4:	103ee83a 	callr	r2
 80235a8:	e0bffb15 	stw	r2,-20(fp)
 80235ac:	00000506 	br	80235c4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80235b0:	00bfde84 	movi	r2,-134
 80235b4:	e0bffb15 	stw	r2,-20(fp)
 80235b8:	00000206 	br	80235c4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80235bc:	00bfebc4 	movi	r2,-81
 80235c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80235c4:	e0bffb17 	ldw	r2,-20(fp)
 80235c8:	1000070e 	bge	r2,zero,80235e8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80235cc:	80234e80 	call	80234e8 <alt_get_errno>
 80235d0:	1007883a 	mov	r3,r2
 80235d4:	e0bffb17 	ldw	r2,-20(fp)
 80235d8:	0085c83a 	sub	r2,zero,r2
 80235dc:	18800015 	stw	r2,0(r3)
    rc = -1;
 80235e0:	00bfffc4 	movi	r2,-1
 80235e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80235e8:	e0bffb17 	ldw	r2,-20(fp)
}
 80235ec:	e037883a 	mov	sp,fp
 80235f0:	dfc00117 	ldw	ra,4(sp)
 80235f4:	df000017 	ldw	fp,0(sp)
 80235f8:	dec00204 	addi	sp,sp,8
 80235fc:	f800283a 	ret

08023600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8023600:	defffd04 	addi	sp,sp,-12
 8023604:	dfc00215 	stw	ra,8(sp)
 8023608:	df000115 	stw	fp,4(sp)
 802360c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8023610:	0009883a 	mov	r4,zero
 8023614:	8023aa80 	call	8023aa8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8023618:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 802361c:	8023ae00 	call	8023ae0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8023620:	018200b4 	movhi	r6,2050
 8023624:	3195e804 	addi	r6,r6,22432
 8023628:	014200b4 	movhi	r5,2050
 802362c:	2955e804 	addi	r5,r5,22432
 8023630:	010200b4 	movhi	r4,2050
 8023634:	2115e804 	addi	r4,r4,22432
 8023638:	8024c240 	call	8024c24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 802363c:	80247c00 	call	80247c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8023640:	010200b4 	movhi	r4,2050
 8023644:	21120804 	addi	r4,r4,18464
 8023648:	80253e40 	call	80253e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 802364c:	d0a6ad17 	ldw	r2,-25932(gp)
 8023650:	d0e6ae17 	ldw	r3,-25928(gp)
 8023654:	d126af17 	ldw	r4,-25924(gp)
 8023658:	200d883a 	mov	r6,r4
 802365c:	180b883a 	mov	r5,r3
 8023660:	1009883a 	mov	r4,r2
 8023664:	802026c0 	call	802026c <main>
 8023668:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 802366c:	01000044 	movi	r4,1
 8023670:	802311c0 	call	802311c <close>
  exit (result);
 8023674:	e13fff17 	ldw	r4,-4(fp)
 8023678:	80253f80 	call	80253f8 <exit>

0802367c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 802367c:	defffe04 	addi	sp,sp,-8
 8023680:	df000115 	stw	fp,4(sp)
 8023684:	df000104 	addi	fp,sp,4
 8023688:	e13fff15 	stw	r4,-4(fp)
}
 802368c:	0001883a 	nop
 8023690:	e037883a 	mov	sp,fp
 8023694:	df000017 	ldw	fp,0(sp)
 8023698:	dec00104 	addi	sp,sp,4
 802369c:	f800283a 	ret

080236a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80236a0:	defffe04 	addi	sp,sp,-8
 80236a4:	df000115 	stw	fp,4(sp)
 80236a8:	df000104 	addi	fp,sp,4
 80236ac:	e13fff15 	stw	r4,-4(fp)
}
 80236b0:	0001883a 	nop
 80236b4:	e037883a 	mov	sp,fp
 80236b8:	df000017 	ldw	fp,0(sp)
 80236bc:	dec00104 	addi	sp,sp,4
 80236c0:	f800283a 	ret

080236c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80236c4:	defffe04 	addi	sp,sp,-8
 80236c8:	dfc00115 	stw	ra,4(sp)
 80236cc:	df000015 	stw	fp,0(sp)
 80236d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80236d4:	d0a00917 	ldw	r2,-32732(gp)
 80236d8:	10000326 	beq	r2,zero,80236e8 <alt_get_errno+0x24>
 80236dc:	d0a00917 	ldw	r2,-32732(gp)
 80236e0:	103ee83a 	callr	r2
 80236e4:	00000106 	br	80236ec <alt_get_errno+0x28>
 80236e8:	d0a6ac04 	addi	r2,gp,-25936
}
 80236ec:	e037883a 	mov	sp,fp
 80236f0:	dfc00117 	ldw	ra,4(sp)
 80236f4:	df000017 	ldw	fp,0(sp)
 80236f8:	dec00204 	addi	sp,sp,8
 80236fc:	f800283a 	ret

08023700 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8023700:	defff904 	addi	sp,sp,-28
 8023704:	dfc00615 	stw	ra,24(sp)
 8023708:	df000515 	stw	fp,20(sp)
 802370c:	df000504 	addi	fp,sp,20
 8023710:	e13ffd15 	stw	r4,-12(fp)
 8023714:	e17ffe15 	stw	r5,-8(fp)
 8023718:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 802371c:	e0bffd17 	ldw	r2,-12(fp)
 8023720:	10000816 	blt	r2,zero,8023744 <read+0x44>
 8023724:	01400304 	movi	r5,12
 8023728:	e13ffd17 	ldw	r4,-12(fp)
 802372c:	80230b80 	call	80230b8 <__mulsi3>
 8023730:	1007883a 	mov	r3,r2
 8023734:	008200b4 	movhi	r2,2050
 8023738:	10980704 	addi	r2,r2,24604
 802373c:	1885883a 	add	r2,r3,r2
 8023740:	00000106 	br	8023748 <read+0x48>
 8023744:	0005883a 	mov	r2,zero
 8023748:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 802374c:	e0bffb17 	ldw	r2,-20(fp)
 8023750:	10002226 	beq	r2,zero,80237dc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8023754:	e0bffb17 	ldw	r2,-20(fp)
 8023758:	10800217 	ldw	r2,8(r2)
 802375c:	108000cc 	andi	r2,r2,3
 8023760:	10800060 	cmpeqi	r2,r2,1
 8023764:	1000181e 	bne	r2,zero,80237c8 <read+0xc8>
        (fd->dev->read))
 8023768:	e0bffb17 	ldw	r2,-20(fp)
 802376c:	10800017 	ldw	r2,0(r2)
 8023770:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8023774:	10001426 	beq	r2,zero,80237c8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8023778:	e0bffb17 	ldw	r2,-20(fp)
 802377c:	10800017 	ldw	r2,0(r2)
 8023780:	10800517 	ldw	r2,20(r2)
 8023784:	e0ffff17 	ldw	r3,-4(fp)
 8023788:	180d883a 	mov	r6,r3
 802378c:	e17ffe17 	ldw	r5,-8(fp)
 8023790:	e13ffb17 	ldw	r4,-20(fp)
 8023794:	103ee83a 	callr	r2
 8023798:	e0bffc15 	stw	r2,-16(fp)
 802379c:	e0bffc17 	ldw	r2,-16(fp)
 80237a0:	1000070e 	bge	r2,zero,80237c0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 80237a4:	80236c40 	call	80236c4 <alt_get_errno>
 80237a8:	1007883a 	mov	r3,r2
 80237ac:	e0bffc17 	ldw	r2,-16(fp)
 80237b0:	0085c83a 	sub	r2,zero,r2
 80237b4:	18800015 	stw	r2,0(r3)
          return -1;
 80237b8:	00bfffc4 	movi	r2,-1
 80237bc:	00000c06 	br	80237f0 <read+0xf0>
        }
        return rval;
 80237c0:	e0bffc17 	ldw	r2,-16(fp)
 80237c4:	00000a06 	br	80237f0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80237c8:	80236c40 	call	80236c4 <alt_get_errno>
 80237cc:	1007883a 	mov	r3,r2
 80237d0:	00800344 	movi	r2,13
 80237d4:	18800015 	stw	r2,0(r3)
 80237d8:	00000406 	br	80237ec <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80237dc:	80236c40 	call	80236c4 <alt_get_errno>
 80237e0:	1007883a 	mov	r3,r2
 80237e4:	00801444 	movi	r2,81
 80237e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80237ec:	00bfffc4 	movi	r2,-1
}
 80237f0:	e037883a 	mov	sp,fp
 80237f4:	dfc00117 	ldw	ra,4(sp)
 80237f8:	df000017 	ldw	fp,0(sp)
 80237fc:	dec00204 	addi	sp,sp,8
 8023800:	f800283a 	ret

08023804 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8023804:	defffc04 	addi	sp,sp,-16
 8023808:	dfc00315 	stw	ra,12(sp)
 802380c:	df000215 	stw	fp,8(sp)
 8023810:	dc000115 	stw	r16,4(sp)
 8023814:	df000204 	addi	fp,sp,8
 8023818:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 802381c:	e0bffe17 	ldw	r2,-8(fp)
 8023820:	108000d0 	cmplti	r2,r2,3
 8023824:	1000111e 	bne	r2,zero,802386c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8023828:	040200b4 	movhi	r16,2050
 802382c:	84180704 	addi	r16,r16,24604
 8023830:	e0bffe17 	ldw	r2,-8(fp)
 8023834:	01400304 	movi	r5,12
 8023838:	1009883a 	mov	r4,r2
 802383c:	80230b80 	call	80230b8 <__mulsi3>
 8023840:	8085883a 	add	r2,r16,r2
 8023844:	10800204 	addi	r2,r2,8
 8023848:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 802384c:	040200b4 	movhi	r16,2050
 8023850:	84180704 	addi	r16,r16,24604
 8023854:	e0bffe17 	ldw	r2,-8(fp)
 8023858:	01400304 	movi	r5,12
 802385c:	1009883a 	mov	r4,r2
 8023860:	80230b80 	call	80230b8 <__mulsi3>
 8023864:	8085883a 	add	r2,r16,r2
 8023868:	10000015 	stw	zero,0(r2)
  }
}
 802386c:	0001883a 	nop
 8023870:	e6ffff04 	addi	sp,fp,-4
 8023874:	dfc00217 	ldw	ra,8(sp)
 8023878:	df000117 	ldw	fp,4(sp)
 802387c:	dc000017 	ldw	r16,0(sp)
 8023880:	dec00304 	addi	sp,sp,12
 8023884:	f800283a 	ret

08023888 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8023888:	defff904 	addi	sp,sp,-28
 802388c:	df000615 	stw	fp,24(sp)
 8023890:	df000604 	addi	fp,sp,24
 8023894:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8023898:	0005303a 	rdctl	r2,status
 802389c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80238a0:	e0fffe17 	ldw	r3,-8(fp)
 80238a4:	00bfff84 	movi	r2,-2
 80238a8:	1884703a 	and	r2,r3,r2
 80238ac:	1001703a 	wrctl	status,r2
  
  return context;
 80238b0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80238b4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80238b8:	d0a00a17 	ldw	r2,-32728(gp)
 80238bc:	10c000c4 	addi	r3,r2,3
 80238c0:	00bfff04 	movi	r2,-4
 80238c4:	1884703a 	and	r2,r3,r2
 80238c8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80238cc:	d0e00a17 	ldw	r3,-32728(gp)
 80238d0:	e0bfff17 	ldw	r2,-4(fp)
 80238d4:	1887883a 	add	r3,r3,r2
 80238d8:	00820134 	movhi	r2,2052
 80238dc:	10bd0004 	addi	r2,r2,-3072
 80238e0:	10c0062e 	bgeu	r2,r3,80238fc <sbrk+0x74>
 80238e4:	e0bffb17 	ldw	r2,-20(fp)
 80238e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80238ec:	e0bffa17 	ldw	r2,-24(fp)
 80238f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80238f4:	00bfffc4 	movi	r2,-1
 80238f8:	00000b06 	br	8023928 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80238fc:	d0a00a17 	ldw	r2,-32728(gp)
 8023900:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8023904:	d0e00a17 	ldw	r3,-32728(gp)
 8023908:	e0bfff17 	ldw	r2,-4(fp)
 802390c:	1885883a 	add	r2,r3,r2
 8023910:	d0a00a15 	stw	r2,-32728(gp)
 8023914:	e0bffb17 	ldw	r2,-20(fp)
 8023918:	e0bffc15 	stw	r2,-16(fp)
 802391c:	e0bffc17 	ldw	r2,-16(fp)
 8023920:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8023924:	e0bffd17 	ldw	r2,-12(fp)
} 
 8023928:	e037883a 	mov	sp,fp
 802392c:	df000017 	ldw	fp,0(sp)
 8023930:	dec00104 	addi	sp,sp,4
 8023934:	f800283a 	ret

08023938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8023938:	defffe04 	addi	sp,sp,-8
 802393c:	dfc00115 	stw	ra,4(sp)
 8023940:	df000015 	stw	fp,0(sp)
 8023944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8023948:	d0a00917 	ldw	r2,-32732(gp)
 802394c:	10000326 	beq	r2,zero,802395c <alt_get_errno+0x24>
 8023950:	d0a00917 	ldw	r2,-32732(gp)
 8023954:	103ee83a 	callr	r2
 8023958:	00000106 	br	8023960 <alt_get_errno+0x28>
 802395c:	d0a6ac04 	addi	r2,gp,-25936
}
 8023960:	e037883a 	mov	sp,fp
 8023964:	dfc00117 	ldw	ra,4(sp)
 8023968:	df000017 	ldw	fp,0(sp)
 802396c:	dec00204 	addi	sp,sp,8
 8023970:	f800283a 	ret

08023974 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8023974:	defff904 	addi	sp,sp,-28
 8023978:	dfc00615 	stw	ra,24(sp)
 802397c:	df000515 	stw	fp,20(sp)
 8023980:	df000504 	addi	fp,sp,20
 8023984:	e13ffd15 	stw	r4,-12(fp)
 8023988:	e17ffe15 	stw	r5,-8(fp)
 802398c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8023990:	e0bffd17 	ldw	r2,-12(fp)
 8023994:	10000816 	blt	r2,zero,80239b8 <write+0x44>
 8023998:	01400304 	movi	r5,12
 802399c:	e13ffd17 	ldw	r4,-12(fp)
 80239a0:	80230b80 	call	80230b8 <__mulsi3>
 80239a4:	1007883a 	mov	r3,r2
 80239a8:	008200b4 	movhi	r2,2050
 80239ac:	10980704 	addi	r2,r2,24604
 80239b0:	1885883a 	add	r2,r3,r2
 80239b4:	00000106 	br	80239bc <write+0x48>
 80239b8:	0005883a 	mov	r2,zero
 80239bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80239c0:	e0bffb17 	ldw	r2,-20(fp)
 80239c4:	10002126 	beq	r2,zero,8023a4c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80239c8:	e0bffb17 	ldw	r2,-20(fp)
 80239cc:	10800217 	ldw	r2,8(r2)
 80239d0:	108000cc 	andi	r2,r2,3
 80239d4:	10001826 	beq	r2,zero,8023a38 <write+0xc4>
 80239d8:	e0bffb17 	ldw	r2,-20(fp)
 80239dc:	10800017 	ldw	r2,0(r2)
 80239e0:	10800617 	ldw	r2,24(r2)
 80239e4:	10001426 	beq	r2,zero,8023a38 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80239e8:	e0bffb17 	ldw	r2,-20(fp)
 80239ec:	10800017 	ldw	r2,0(r2)
 80239f0:	10800617 	ldw	r2,24(r2)
 80239f4:	e0ffff17 	ldw	r3,-4(fp)
 80239f8:	180d883a 	mov	r6,r3
 80239fc:	e17ffe17 	ldw	r5,-8(fp)
 8023a00:	e13ffb17 	ldw	r4,-20(fp)
 8023a04:	103ee83a 	callr	r2
 8023a08:	e0bffc15 	stw	r2,-16(fp)
 8023a0c:	e0bffc17 	ldw	r2,-16(fp)
 8023a10:	1000070e 	bge	r2,zero,8023a30 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8023a14:	80239380 	call	8023938 <alt_get_errno>
 8023a18:	1007883a 	mov	r3,r2
 8023a1c:	e0bffc17 	ldw	r2,-16(fp)
 8023a20:	0085c83a 	sub	r2,zero,r2
 8023a24:	18800015 	stw	r2,0(r3)
        return -1;
 8023a28:	00bfffc4 	movi	r2,-1
 8023a2c:	00000c06 	br	8023a60 <write+0xec>
      }
      return rval;
 8023a30:	e0bffc17 	ldw	r2,-16(fp)
 8023a34:	00000a06 	br	8023a60 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8023a38:	80239380 	call	8023938 <alt_get_errno>
 8023a3c:	1007883a 	mov	r3,r2
 8023a40:	00800344 	movi	r2,13
 8023a44:	18800015 	stw	r2,0(r3)
 8023a48:	00000406 	br	8023a5c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8023a4c:	80239380 	call	8023938 <alt_get_errno>
 8023a50:	1007883a 	mov	r3,r2
 8023a54:	00801444 	movi	r2,81
 8023a58:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8023a5c:	00bfffc4 	movi	r2,-1
}
 8023a60:	e037883a 	mov	sp,fp
 8023a64:	dfc00117 	ldw	ra,4(sp)
 8023a68:	df000017 	ldw	fp,0(sp)
 8023a6c:	dec00204 	addi	sp,sp,8
 8023a70:	f800283a 	ret

08023a74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8023a74:	defffd04 	addi	sp,sp,-12
 8023a78:	dfc00215 	stw	ra,8(sp)
 8023a7c:	df000115 	stw	fp,4(sp)
 8023a80:	df000104 	addi	fp,sp,4
 8023a84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8023a88:	d1600604 	addi	r5,gp,-32744
 8023a8c:	e13fff17 	ldw	r4,-4(fp)
 8023a90:	802471c0 	call	802471c <alt_dev_llist_insert>
}
 8023a94:	e037883a 	mov	sp,fp
 8023a98:	dfc00117 	ldw	ra,4(sp)
 8023a9c:	df000017 	ldw	fp,0(sp)
 8023aa0:	dec00204 	addi	sp,sp,8
 8023aa4:	f800283a 	ret

08023aa8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8023aa8:	defffd04 	addi	sp,sp,-12
 8023aac:	dfc00215 	stw	ra,8(sp)
 8023ab0:	df000115 	stw	fp,4(sp)
 8023ab4:	df000104 	addi	fp,sp,4
 8023ab8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( TOP_LEVEL, top_level);
 8023abc:	80250c80 	call	80250c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8023ac0:	00800044 	movi	r2,1
 8023ac4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8023ac8:	0001883a 	nop
 8023acc:	e037883a 	mov	sp,fp
 8023ad0:	dfc00117 	ldw	ra,4(sp)
 8023ad4:	df000017 	ldw	fp,0(sp)
 8023ad8:	dec00204 	addi	sp,sp,8
 8023adc:	f800283a 	ret

08023ae0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8023ae0:	defffe04 	addi	sp,sp,-8
 8023ae4:	dfc00115 	stw	ra,4(sp)
 8023ae8:	df000015 	stw	fp,0(sp)
 8023aec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8023af0:	000d883a 	mov	r6,zero
 8023af4:	000b883a 	mov	r5,zero
 8023af8:	010200b4 	movhi	r4,2050
 8023afc:	21187104 	addi	r4,r4,25028
 8023b00:	8023c900 	call	8023c90 <altera_avalon_jtag_uart_init>
 8023b04:	010200b4 	movhi	r4,2050
 8023b08:	21186704 	addi	r4,r4,24988
 8023b0c:	8023a740 	call	8023a74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8023b10:	0001883a 	nop
}
 8023b14:	0001883a 	nop
 8023b18:	e037883a 	mov	sp,fp
 8023b1c:	dfc00117 	ldw	ra,4(sp)
 8023b20:	df000017 	ldw	fp,0(sp)
 8023b24:	dec00204 	addi	sp,sp,8
 8023b28:	f800283a 	ret

08023b2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8023b2c:	defffa04 	addi	sp,sp,-24
 8023b30:	dfc00515 	stw	ra,20(sp)
 8023b34:	df000415 	stw	fp,16(sp)
 8023b38:	df000404 	addi	fp,sp,16
 8023b3c:	e13ffd15 	stw	r4,-12(fp)
 8023b40:	e17ffe15 	stw	r5,-8(fp)
 8023b44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8023b48:	e0bffd17 	ldw	r2,-12(fp)
 8023b4c:	10800017 	ldw	r2,0(r2)
 8023b50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8023b54:	e0bffc17 	ldw	r2,-16(fp)
 8023b58:	10c00a04 	addi	r3,r2,40
 8023b5c:	e0bffd17 	ldw	r2,-12(fp)
 8023b60:	10800217 	ldw	r2,8(r2)
 8023b64:	100f883a 	mov	r7,r2
 8023b68:	e1bfff17 	ldw	r6,-4(fp)
 8023b6c:	e17ffe17 	ldw	r5,-8(fp)
 8023b70:	1809883a 	mov	r4,r3
 8023b74:	80241540 	call	8024154 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8023b78:	e037883a 	mov	sp,fp
 8023b7c:	dfc00117 	ldw	ra,4(sp)
 8023b80:	df000017 	ldw	fp,0(sp)
 8023b84:	dec00204 	addi	sp,sp,8
 8023b88:	f800283a 	ret

08023b8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8023b8c:	defffa04 	addi	sp,sp,-24
 8023b90:	dfc00515 	stw	ra,20(sp)
 8023b94:	df000415 	stw	fp,16(sp)
 8023b98:	df000404 	addi	fp,sp,16
 8023b9c:	e13ffd15 	stw	r4,-12(fp)
 8023ba0:	e17ffe15 	stw	r5,-8(fp)
 8023ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8023ba8:	e0bffd17 	ldw	r2,-12(fp)
 8023bac:	10800017 	ldw	r2,0(r2)
 8023bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8023bb4:	e0bffc17 	ldw	r2,-16(fp)
 8023bb8:	10c00a04 	addi	r3,r2,40
 8023bbc:	e0bffd17 	ldw	r2,-12(fp)
 8023bc0:	10800217 	ldw	r2,8(r2)
 8023bc4:	100f883a 	mov	r7,r2
 8023bc8:	e1bfff17 	ldw	r6,-4(fp)
 8023bcc:	e17ffe17 	ldw	r5,-8(fp)
 8023bd0:	1809883a 	mov	r4,r3
 8023bd4:	80243700 	call	8024370 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8023bd8:	e037883a 	mov	sp,fp
 8023bdc:	dfc00117 	ldw	ra,4(sp)
 8023be0:	df000017 	ldw	fp,0(sp)
 8023be4:	dec00204 	addi	sp,sp,8
 8023be8:	f800283a 	ret

08023bec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8023bec:	defffc04 	addi	sp,sp,-16
 8023bf0:	dfc00315 	stw	ra,12(sp)
 8023bf4:	df000215 	stw	fp,8(sp)
 8023bf8:	df000204 	addi	fp,sp,8
 8023bfc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8023c00:	e0bfff17 	ldw	r2,-4(fp)
 8023c04:	10800017 	ldw	r2,0(r2)
 8023c08:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8023c0c:	e0bffe17 	ldw	r2,-8(fp)
 8023c10:	10c00a04 	addi	r3,r2,40
 8023c14:	e0bfff17 	ldw	r2,-4(fp)
 8023c18:	10800217 	ldw	r2,8(r2)
 8023c1c:	100b883a 	mov	r5,r2
 8023c20:	1809883a 	mov	r4,r3
 8023c24:	8023ffc0 	call	8023ffc <altera_avalon_jtag_uart_close>
}
 8023c28:	e037883a 	mov	sp,fp
 8023c2c:	dfc00117 	ldw	ra,4(sp)
 8023c30:	df000017 	ldw	fp,0(sp)
 8023c34:	dec00204 	addi	sp,sp,8
 8023c38:	f800283a 	ret

08023c3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8023c3c:	defffa04 	addi	sp,sp,-24
 8023c40:	dfc00515 	stw	ra,20(sp)
 8023c44:	df000415 	stw	fp,16(sp)
 8023c48:	df000404 	addi	fp,sp,16
 8023c4c:	e13ffd15 	stw	r4,-12(fp)
 8023c50:	e17ffe15 	stw	r5,-8(fp)
 8023c54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8023c58:	e0bffd17 	ldw	r2,-12(fp)
 8023c5c:	10800017 	ldw	r2,0(r2)
 8023c60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8023c64:	e0bffc17 	ldw	r2,-16(fp)
 8023c68:	10800a04 	addi	r2,r2,40
 8023c6c:	e1bfff17 	ldw	r6,-4(fp)
 8023c70:	e17ffe17 	ldw	r5,-8(fp)
 8023c74:	1009883a 	mov	r4,r2
 8023c78:	80240640 	call	8024064 <altera_avalon_jtag_uart_ioctl>
}
 8023c7c:	e037883a 	mov	sp,fp
 8023c80:	dfc00117 	ldw	ra,4(sp)
 8023c84:	df000017 	ldw	fp,0(sp)
 8023c88:	dec00204 	addi	sp,sp,8
 8023c8c:	f800283a 	ret

08023c90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8023c90:	defffa04 	addi	sp,sp,-24
 8023c94:	dfc00515 	stw	ra,20(sp)
 8023c98:	df000415 	stw	fp,16(sp)
 8023c9c:	df000404 	addi	fp,sp,16
 8023ca0:	e13ffd15 	stw	r4,-12(fp)
 8023ca4:	e17ffe15 	stw	r5,-8(fp)
 8023ca8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8023cac:	e0bffd17 	ldw	r2,-12(fp)
 8023cb0:	00c00044 	movi	r3,1
 8023cb4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8023cb8:	e0bffd17 	ldw	r2,-12(fp)
 8023cbc:	10800017 	ldw	r2,0(r2)
 8023cc0:	10800104 	addi	r2,r2,4
 8023cc4:	1007883a 	mov	r3,r2
 8023cc8:	e0bffd17 	ldw	r2,-12(fp)
 8023ccc:	10800817 	ldw	r2,32(r2)
 8023cd0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8023cd4:	e0bffe17 	ldw	r2,-8(fp)
 8023cd8:	e0ffff17 	ldw	r3,-4(fp)
 8023cdc:	d8000015 	stw	zero,0(sp)
 8023ce0:	e1fffd17 	ldw	r7,-12(fp)
 8023ce4:	018200b4 	movhi	r6,2050
 8023ce8:	318f5404 	addi	r6,r6,15696
 8023cec:	180b883a 	mov	r5,r3
 8023cf0:	1009883a 	mov	r4,r2
 8023cf4:	80248a00 	call	80248a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8023cf8:	e0bffd17 	ldw	r2,-12(fp)
 8023cfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8023d00:	e0bffd17 	ldw	r2,-12(fp)
 8023d04:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8023d08:	d0e6b117 	ldw	r3,-25916(gp)
 8023d0c:	e1fffd17 	ldw	r7,-12(fp)
 8023d10:	018200b4 	movhi	r6,2050
 8023d14:	318fd704 	addi	r6,r6,16220
 8023d18:	180b883a 	mov	r5,r3
 8023d1c:	1009883a 	mov	r4,r2
 8023d20:	80245940 	call	8024594 <alt_alarm_start>
 8023d24:	1000040e 	bge	r2,zero,8023d38 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8023d28:	e0fffd17 	ldw	r3,-12(fp)
 8023d2c:	00a00034 	movhi	r2,32768
 8023d30:	10bfffc4 	addi	r2,r2,-1
 8023d34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8023d38:	0001883a 	nop
 8023d3c:	e037883a 	mov	sp,fp
 8023d40:	dfc00117 	ldw	ra,4(sp)
 8023d44:	df000017 	ldw	fp,0(sp)
 8023d48:	dec00204 	addi	sp,sp,8
 8023d4c:	f800283a 	ret

08023d50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8023d50:	defff804 	addi	sp,sp,-32
 8023d54:	df000715 	stw	fp,28(sp)
 8023d58:	df000704 	addi	fp,sp,28
 8023d5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8023d60:	e0bfff17 	ldw	r2,-4(fp)
 8023d64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8023d68:	e0bffb17 	ldw	r2,-20(fp)
 8023d6c:	10800017 	ldw	r2,0(r2)
 8023d70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8023d74:	e0bffc17 	ldw	r2,-16(fp)
 8023d78:	10800104 	addi	r2,r2,4
 8023d7c:	10800037 	ldwio	r2,0(r2)
 8023d80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8023d84:	e0bffd17 	ldw	r2,-12(fp)
 8023d88:	1080c00c 	andi	r2,r2,768
 8023d8c:	10006d26 	beq	r2,zero,8023f44 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8023d90:	e0bffd17 	ldw	r2,-12(fp)
 8023d94:	1080400c 	andi	r2,r2,256
 8023d98:	10003526 	beq	r2,zero,8023e70 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8023d9c:	00800074 	movhi	r2,1
 8023da0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8023da4:	e0bffb17 	ldw	r2,-20(fp)
 8023da8:	10800a17 	ldw	r2,40(r2)
 8023dac:	10800044 	addi	r2,r2,1
 8023db0:	1081ffcc 	andi	r2,r2,2047
 8023db4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8023db8:	e0bffb17 	ldw	r2,-20(fp)
 8023dbc:	10c00b17 	ldw	r3,44(r2)
 8023dc0:	e0bffe17 	ldw	r2,-8(fp)
 8023dc4:	18801526 	beq	r3,r2,8023e1c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8023dc8:	e0bffc17 	ldw	r2,-16(fp)
 8023dcc:	10800037 	ldwio	r2,0(r2)
 8023dd0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8023dd4:	e0bff917 	ldw	r2,-28(fp)
 8023dd8:	10a0000c 	andi	r2,r2,32768
 8023ddc:	10001126 	beq	r2,zero,8023e24 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8023de0:	e0bffb17 	ldw	r2,-20(fp)
 8023de4:	10800a17 	ldw	r2,40(r2)
 8023de8:	e0fff917 	ldw	r3,-28(fp)
 8023dec:	1809883a 	mov	r4,r3
 8023df0:	e0fffb17 	ldw	r3,-20(fp)
 8023df4:	1885883a 	add	r2,r3,r2
 8023df8:	10800e04 	addi	r2,r2,56
 8023dfc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8023e00:	e0bffb17 	ldw	r2,-20(fp)
 8023e04:	10800a17 	ldw	r2,40(r2)
 8023e08:	10800044 	addi	r2,r2,1
 8023e0c:	10c1ffcc 	andi	r3,r2,2047
 8023e10:	e0bffb17 	ldw	r2,-20(fp)
 8023e14:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8023e18:	003fe206 	br	8023da4 <__alt_data_end+0xfffe49a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8023e1c:	0001883a 	nop
 8023e20:	00000106 	br	8023e28 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8023e24:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8023e28:	e0bff917 	ldw	r2,-28(fp)
 8023e2c:	10bfffec 	andhi	r2,r2,65535
 8023e30:	10000f26 	beq	r2,zero,8023e70 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8023e34:	e0bffb17 	ldw	r2,-20(fp)
 8023e38:	10c00817 	ldw	r3,32(r2)
 8023e3c:	00bfff84 	movi	r2,-2
 8023e40:	1886703a 	and	r3,r3,r2
 8023e44:	e0bffb17 	ldw	r2,-20(fp)
 8023e48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8023e4c:	e0bffc17 	ldw	r2,-16(fp)
 8023e50:	10800104 	addi	r2,r2,4
 8023e54:	1007883a 	mov	r3,r2
 8023e58:	e0bffb17 	ldw	r2,-20(fp)
 8023e5c:	10800817 	ldw	r2,32(r2)
 8023e60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8023e64:	e0bffc17 	ldw	r2,-16(fp)
 8023e68:	10800104 	addi	r2,r2,4
 8023e6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8023e70:	e0bffd17 	ldw	r2,-12(fp)
 8023e74:	1080800c 	andi	r2,r2,512
 8023e78:	103fbe26 	beq	r2,zero,8023d74 <__alt_data_end+0xfffe4974>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8023e7c:	e0bffd17 	ldw	r2,-12(fp)
 8023e80:	1004d43a 	srli	r2,r2,16
 8023e84:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8023e88:	00001406 	br	8023edc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8023e8c:	e0bffc17 	ldw	r2,-16(fp)
 8023e90:	e0fffb17 	ldw	r3,-20(fp)
 8023e94:	18c00d17 	ldw	r3,52(r3)
 8023e98:	e13ffb17 	ldw	r4,-20(fp)
 8023e9c:	20c7883a 	add	r3,r4,r3
 8023ea0:	18c20e04 	addi	r3,r3,2104
 8023ea4:	18c00003 	ldbu	r3,0(r3)
 8023ea8:	18c03fcc 	andi	r3,r3,255
 8023eac:	18c0201c 	xori	r3,r3,128
 8023eb0:	18ffe004 	addi	r3,r3,-128
 8023eb4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8023eb8:	e0bffb17 	ldw	r2,-20(fp)
 8023ebc:	10800d17 	ldw	r2,52(r2)
 8023ec0:	10800044 	addi	r2,r2,1
 8023ec4:	10c1ffcc 	andi	r3,r2,2047
 8023ec8:	e0bffb17 	ldw	r2,-20(fp)
 8023ecc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8023ed0:	e0bffa17 	ldw	r2,-24(fp)
 8023ed4:	10bfffc4 	addi	r2,r2,-1
 8023ed8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8023edc:	e0bffa17 	ldw	r2,-24(fp)
 8023ee0:	10000526 	beq	r2,zero,8023ef8 <altera_avalon_jtag_uart_irq+0x1a8>
 8023ee4:	e0bffb17 	ldw	r2,-20(fp)
 8023ee8:	10c00d17 	ldw	r3,52(r2)
 8023eec:	e0bffb17 	ldw	r2,-20(fp)
 8023ef0:	10800c17 	ldw	r2,48(r2)
 8023ef4:	18bfe51e 	bne	r3,r2,8023e8c <__alt_data_end+0xfffe4a8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8023ef8:	e0bffa17 	ldw	r2,-24(fp)
 8023efc:	103f9d26 	beq	r2,zero,8023d74 <__alt_data_end+0xfffe4974>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8023f00:	e0bffb17 	ldw	r2,-20(fp)
 8023f04:	10c00817 	ldw	r3,32(r2)
 8023f08:	00bfff44 	movi	r2,-3
 8023f0c:	1886703a 	and	r3,r3,r2
 8023f10:	e0bffb17 	ldw	r2,-20(fp)
 8023f14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8023f18:	e0bffb17 	ldw	r2,-20(fp)
 8023f1c:	10800017 	ldw	r2,0(r2)
 8023f20:	10800104 	addi	r2,r2,4
 8023f24:	1007883a 	mov	r3,r2
 8023f28:	e0bffb17 	ldw	r2,-20(fp)
 8023f2c:	10800817 	ldw	r2,32(r2)
 8023f30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8023f34:	e0bffc17 	ldw	r2,-16(fp)
 8023f38:	10800104 	addi	r2,r2,4
 8023f3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8023f40:	003f8c06 	br	8023d74 <__alt_data_end+0xfffe4974>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8023f44:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8023f48:	0001883a 	nop
 8023f4c:	e037883a 	mov	sp,fp
 8023f50:	df000017 	ldw	fp,0(sp)
 8023f54:	dec00104 	addi	sp,sp,4
 8023f58:	f800283a 	ret

08023f5c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8023f5c:	defff804 	addi	sp,sp,-32
 8023f60:	df000715 	stw	fp,28(sp)
 8023f64:	df000704 	addi	fp,sp,28
 8023f68:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8023f6c:	e0bffb17 	ldw	r2,-20(fp)
 8023f70:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8023f74:	e0bff917 	ldw	r2,-28(fp)
 8023f78:	10800017 	ldw	r2,0(r2)
 8023f7c:	10800104 	addi	r2,r2,4
 8023f80:	10800037 	ldwio	r2,0(r2)
 8023f84:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8023f88:	e0bffa17 	ldw	r2,-24(fp)
 8023f8c:	1081000c 	andi	r2,r2,1024
 8023f90:	10000b26 	beq	r2,zero,8023fc0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8023f94:	e0bff917 	ldw	r2,-28(fp)
 8023f98:	10800017 	ldw	r2,0(r2)
 8023f9c:	10800104 	addi	r2,r2,4
 8023fa0:	1007883a 	mov	r3,r2
 8023fa4:	e0bff917 	ldw	r2,-28(fp)
 8023fa8:	10800817 	ldw	r2,32(r2)
 8023fac:	10810014 	ori	r2,r2,1024
 8023fb0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8023fb4:	e0bff917 	ldw	r2,-28(fp)
 8023fb8:	10000915 	stw	zero,36(r2)
 8023fbc:	00000a06 	br	8023fe8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8023fc0:	e0bff917 	ldw	r2,-28(fp)
 8023fc4:	10c00917 	ldw	r3,36(r2)
 8023fc8:	00a00034 	movhi	r2,32768
 8023fcc:	10bfff04 	addi	r2,r2,-4
 8023fd0:	10c00536 	bltu	r2,r3,8023fe8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8023fd4:	e0bff917 	ldw	r2,-28(fp)
 8023fd8:	10800917 	ldw	r2,36(r2)
 8023fdc:	10c00044 	addi	r3,r2,1
 8023fe0:	e0bff917 	ldw	r2,-28(fp)
 8023fe4:	10c00915 	stw	r3,36(r2)
 8023fe8:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8023fec:	e037883a 	mov	sp,fp
 8023ff0:	df000017 	ldw	fp,0(sp)
 8023ff4:	dec00104 	addi	sp,sp,4
 8023ff8:	f800283a 	ret

08023ffc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8023ffc:	defffd04 	addi	sp,sp,-12
 8024000:	df000215 	stw	fp,8(sp)
 8024004:	df000204 	addi	fp,sp,8
 8024008:	e13ffe15 	stw	r4,-8(fp)
 802400c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8024010:	00000506 	br	8024028 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8024014:	e0bfff17 	ldw	r2,-4(fp)
 8024018:	1090000c 	andi	r2,r2,16384
 802401c:	10000226 	beq	r2,zero,8024028 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8024020:	00bffd44 	movi	r2,-11
 8024024:	00000b06 	br	8024054 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8024028:	e0bffe17 	ldw	r2,-8(fp)
 802402c:	10c00d17 	ldw	r3,52(r2)
 8024030:	e0bffe17 	ldw	r2,-8(fp)
 8024034:	10800c17 	ldw	r2,48(r2)
 8024038:	18800526 	beq	r3,r2,8024050 <altera_avalon_jtag_uart_close+0x54>
 802403c:	e0bffe17 	ldw	r2,-8(fp)
 8024040:	10c00917 	ldw	r3,36(r2)
 8024044:	e0bffe17 	ldw	r2,-8(fp)
 8024048:	10800117 	ldw	r2,4(r2)
 802404c:	18bff136 	bltu	r3,r2,8024014 <__alt_data_end+0xfffe4c14>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8024050:	0005883a 	mov	r2,zero
}
 8024054:	e037883a 	mov	sp,fp
 8024058:	df000017 	ldw	fp,0(sp)
 802405c:	dec00104 	addi	sp,sp,4
 8024060:	f800283a 	ret

08024064 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8024064:	defffa04 	addi	sp,sp,-24
 8024068:	df000515 	stw	fp,20(sp)
 802406c:	df000504 	addi	fp,sp,20
 8024070:	e13ffd15 	stw	r4,-12(fp)
 8024074:	e17ffe15 	stw	r5,-8(fp)
 8024078:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 802407c:	00bff9c4 	movi	r2,-25
 8024080:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8024084:	e0bffe17 	ldw	r2,-8(fp)
 8024088:	10da8060 	cmpeqi	r3,r2,27137
 802408c:	1800031e 	bne	r3,zero,802409c <altera_avalon_jtag_uart_ioctl+0x38>
 8024090:	109a80a0 	cmpeqi	r2,r2,27138
 8024094:	1000181e 	bne	r2,zero,80240f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8024098:	00002906 	br	8024140 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 802409c:	e0bffd17 	ldw	r2,-12(fp)
 80240a0:	10c00117 	ldw	r3,4(r2)
 80240a4:	00a00034 	movhi	r2,32768
 80240a8:	10bfffc4 	addi	r2,r2,-1
 80240ac:	18802126 	beq	r3,r2,8024134 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80240b0:	e0bfff17 	ldw	r2,-4(fp)
 80240b4:	10800017 	ldw	r2,0(r2)
 80240b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80240bc:	e0bffc17 	ldw	r2,-16(fp)
 80240c0:	10800090 	cmplti	r2,r2,2
 80240c4:	1000061e 	bne	r2,zero,80240e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 80240c8:	e0fffc17 	ldw	r3,-16(fp)
 80240cc:	00a00034 	movhi	r2,32768
 80240d0:	10bfffc4 	addi	r2,r2,-1
 80240d4:	18800226 	beq	r3,r2,80240e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 80240d8:	e0bffc17 	ldw	r2,-16(fp)
 80240dc:	00000206 	br	80240e8 <altera_avalon_jtag_uart_ioctl+0x84>
 80240e0:	00a00034 	movhi	r2,32768
 80240e4:	10bfff84 	addi	r2,r2,-2
 80240e8:	e0fffd17 	ldw	r3,-12(fp)
 80240ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 80240f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80240f4:	00000f06 	br	8024134 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80240f8:	e0bffd17 	ldw	r2,-12(fp)
 80240fc:	10c00117 	ldw	r3,4(r2)
 8024100:	00a00034 	movhi	r2,32768
 8024104:	10bfffc4 	addi	r2,r2,-1
 8024108:	18800c26 	beq	r3,r2,802413c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 802410c:	e0bffd17 	ldw	r2,-12(fp)
 8024110:	10c00917 	ldw	r3,36(r2)
 8024114:	e0bffd17 	ldw	r2,-12(fp)
 8024118:	10800117 	ldw	r2,4(r2)
 802411c:	1885803a 	cmpltu	r2,r3,r2
 8024120:	10c03fcc 	andi	r3,r2,255
 8024124:	e0bfff17 	ldw	r2,-4(fp)
 8024128:	10c00015 	stw	r3,0(r2)
      rc = 0;
 802412c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8024130:	00000206 	br	802413c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8024134:	0001883a 	nop
 8024138:	00000106 	br	8024140 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 802413c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8024140:	e0bffb17 	ldw	r2,-20(fp)
}
 8024144:	e037883a 	mov	sp,fp
 8024148:	df000017 	ldw	fp,0(sp)
 802414c:	dec00104 	addi	sp,sp,4
 8024150:	f800283a 	ret

08024154 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8024154:	defff304 	addi	sp,sp,-52
 8024158:	dfc00c15 	stw	ra,48(sp)
 802415c:	df000b15 	stw	fp,44(sp)
 8024160:	df000b04 	addi	fp,sp,44
 8024164:	e13ffc15 	stw	r4,-16(fp)
 8024168:	e17ffd15 	stw	r5,-12(fp)
 802416c:	e1bffe15 	stw	r6,-8(fp)
 8024170:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8024174:	e0bffd17 	ldw	r2,-12(fp)
 8024178:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 802417c:	00004706 	br	802429c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8024180:	e0bffc17 	ldw	r2,-16(fp)
 8024184:	10800a17 	ldw	r2,40(r2)
 8024188:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 802418c:	e0bffc17 	ldw	r2,-16(fp)
 8024190:	10800b17 	ldw	r2,44(r2)
 8024194:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8024198:	e0fff717 	ldw	r3,-36(fp)
 802419c:	e0bff817 	ldw	r2,-32(fp)
 80241a0:	18800536 	bltu	r3,r2,80241b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80241a4:	e0fff717 	ldw	r3,-36(fp)
 80241a8:	e0bff817 	ldw	r2,-32(fp)
 80241ac:	1885c83a 	sub	r2,r3,r2
 80241b0:	e0bff615 	stw	r2,-40(fp)
 80241b4:	00000406 	br	80241c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80241b8:	00c20004 	movi	r3,2048
 80241bc:	e0bff817 	ldw	r2,-32(fp)
 80241c0:	1885c83a 	sub	r2,r3,r2
 80241c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80241c8:	e0bff617 	ldw	r2,-40(fp)
 80241cc:	10001e26 	beq	r2,zero,8024248 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80241d0:	e0fffe17 	ldw	r3,-8(fp)
 80241d4:	e0bff617 	ldw	r2,-40(fp)
 80241d8:	1880022e 	bgeu	r3,r2,80241e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80241dc:	e0bffe17 	ldw	r2,-8(fp)
 80241e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80241e4:	e0bffc17 	ldw	r2,-16(fp)
 80241e8:	10c00e04 	addi	r3,r2,56
 80241ec:	e0bff817 	ldw	r2,-32(fp)
 80241f0:	1885883a 	add	r2,r3,r2
 80241f4:	e1bff617 	ldw	r6,-40(fp)
 80241f8:	100b883a 	mov	r5,r2
 80241fc:	e13ff517 	ldw	r4,-44(fp)
 8024200:	80217300 	call	8021730 <memcpy>
      ptr   += n;
 8024204:	e0fff517 	ldw	r3,-44(fp)
 8024208:	e0bff617 	ldw	r2,-40(fp)
 802420c:	1885883a 	add	r2,r3,r2
 8024210:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8024214:	e0fffe17 	ldw	r3,-8(fp)
 8024218:	e0bff617 	ldw	r2,-40(fp)
 802421c:	1885c83a 	sub	r2,r3,r2
 8024220:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8024224:	e0fff817 	ldw	r3,-32(fp)
 8024228:	e0bff617 	ldw	r2,-40(fp)
 802422c:	1885883a 	add	r2,r3,r2
 8024230:	10c1ffcc 	andi	r3,r2,2047
 8024234:	e0bffc17 	ldw	r2,-16(fp)
 8024238:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 802423c:	e0bffe17 	ldw	r2,-8(fp)
 8024240:	00bfcf16 	blt	zero,r2,8024180 <__alt_data_end+0xfffe4d80>
 8024244:	00000106 	br	802424c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8024248:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 802424c:	e0fff517 	ldw	r3,-44(fp)
 8024250:	e0bffd17 	ldw	r2,-12(fp)
 8024254:	1880141e 	bne	r3,r2,80242a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8024258:	e0bfff17 	ldw	r2,-4(fp)
 802425c:	1090000c 	andi	r2,r2,16384
 8024260:	1000131e 	bne	r2,zero,80242b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8024264:	0001883a 	nop
 8024268:	e0bffc17 	ldw	r2,-16(fp)
 802426c:	10c00a17 	ldw	r3,40(r2)
 8024270:	e0bff717 	ldw	r2,-36(fp)
 8024274:	1880051e 	bne	r3,r2,802428c <altera_avalon_jtag_uart_read+0x138>
 8024278:	e0bffc17 	ldw	r2,-16(fp)
 802427c:	10c00917 	ldw	r3,36(r2)
 8024280:	e0bffc17 	ldw	r2,-16(fp)
 8024284:	10800117 	ldw	r2,4(r2)
 8024288:	18bff736 	bltu	r3,r2,8024268 <__alt_data_end+0xfffe4e68>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 802428c:	e0bffc17 	ldw	r2,-16(fp)
 8024290:	10c00a17 	ldw	r3,40(r2)
 8024294:	e0bff717 	ldw	r2,-36(fp)
 8024298:	18800726 	beq	r3,r2,80242b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 802429c:	e0bffe17 	ldw	r2,-8(fp)
 80242a0:	00bfb716 	blt	zero,r2,8024180 <__alt_data_end+0xfffe4d80>
 80242a4:	00000506 	br	80242bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80242a8:	0001883a 	nop
 80242ac:	00000306 	br	80242bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80242b0:	0001883a 	nop
 80242b4:	00000106 	br	80242bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80242b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80242bc:	e0fff517 	ldw	r3,-44(fp)
 80242c0:	e0bffd17 	ldw	r2,-12(fp)
 80242c4:	18801826 	beq	r3,r2,8024328 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80242c8:	0005303a 	rdctl	r2,status
 80242cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80242d0:	e0fffb17 	ldw	r3,-20(fp)
 80242d4:	00bfff84 	movi	r2,-2
 80242d8:	1884703a 	and	r2,r3,r2
 80242dc:	1001703a 	wrctl	status,r2
  
  return context;
 80242e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80242e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80242e8:	e0bffc17 	ldw	r2,-16(fp)
 80242ec:	10800817 	ldw	r2,32(r2)
 80242f0:	10c00054 	ori	r3,r2,1
 80242f4:	e0bffc17 	ldw	r2,-16(fp)
 80242f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80242fc:	e0bffc17 	ldw	r2,-16(fp)
 8024300:	10800017 	ldw	r2,0(r2)
 8024304:	10800104 	addi	r2,r2,4
 8024308:	1007883a 	mov	r3,r2
 802430c:	e0bffc17 	ldw	r2,-16(fp)
 8024310:	10800817 	ldw	r2,32(r2)
 8024314:	18800035 	stwio	r2,0(r3)
 8024318:	e0bffa17 	ldw	r2,-24(fp)
 802431c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024320:	e0bff917 	ldw	r2,-28(fp)
 8024324:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8024328:	e0fff517 	ldw	r3,-44(fp)
 802432c:	e0bffd17 	ldw	r2,-12(fp)
 8024330:	18800426 	beq	r3,r2,8024344 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8024334:	e0fff517 	ldw	r3,-44(fp)
 8024338:	e0bffd17 	ldw	r2,-12(fp)
 802433c:	1885c83a 	sub	r2,r3,r2
 8024340:	00000606 	br	802435c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8024344:	e0bfff17 	ldw	r2,-4(fp)
 8024348:	1090000c 	andi	r2,r2,16384
 802434c:	10000226 	beq	r2,zero,8024358 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8024350:	00bffd44 	movi	r2,-11
 8024354:	00000106 	br	802435c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8024358:	00bffec4 	movi	r2,-5
}
 802435c:	e037883a 	mov	sp,fp
 8024360:	dfc00117 	ldw	ra,4(sp)
 8024364:	df000017 	ldw	fp,0(sp)
 8024368:	dec00204 	addi	sp,sp,8
 802436c:	f800283a 	ret

08024370 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8024370:	defff304 	addi	sp,sp,-52
 8024374:	dfc00c15 	stw	ra,48(sp)
 8024378:	df000b15 	stw	fp,44(sp)
 802437c:	df000b04 	addi	fp,sp,44
 8024380:	e13ffc15 	stw	r4,-16(fp)
 8024384:	e17ffd15 	stw	r5,-12(fp)
 8024388:	e1bffe15 	stw	r6,-8(fp)
 802438c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8024390:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8024394:	e0bffd17 	ldw	r2,-12(fp)
 8024398:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 802439c:	00003706 	br	802447c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80243a0:	e0bffc17 	ldw	r2,-16(fp)
 80243a4:	10800c17 	ldw	r2,48(r2)
 80243a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80243ac:	e0bffc17 	ldw	r2,-16(fp)
 80243b0:	10800d17 	ldw	r2,52(r2)
 80243b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80243b8:	e0fff917 	ldw	r3,-28(fp)
 80243bc:	e0bff517 	ldw	r2,-44(fp)
 80243c0:	1880062e 	bgeu	r3,r2,80243dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80243c4:	e0fff517 	ldw	r3,-44(fp)
 80243c8:	e0bff917 	ldw	r2,-28(fp)
 80243cc:	1885c83a 	sub	r2,r3,r2
 80243d0:	10bfffc4 	addi	r2,r2,-1
 80243d4:	e0bff615 	stw	r2,-40(fp)
 80243d8:	00000b06 	br	8024408 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80243dc:	e0bff517 	ldw	r2,-44(fp)
 80243e0:	10000526 	beq	r2,zero,80243f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80243e4:	00c20004 	movi	r3,2048
 80243e8:	e0bff917 	ldw	r2,-28(fp)
 80243ec:	1885c83a 	sub	r2,r3,r2
 80243f0:	e0bff615 	stw	r2,-40(fp)
 80243f4:	00000406 	br	8024408 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80243f8:	00c1ffc4 	movi	r3,2047
 80243fc:	e0bff917 	ldw	r2,-28(fp)
 8024400:	1885c83a 	sub	r2,r3,r2
 8024404:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8024408:	e0bff617 	ldw	r2,-40(fp)
 802440c:	10001e26 	beq	r2,zero,8024488 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8024410:	e0fffe17 	ldw	r3,-8(fp)
 8024414:	e0bff617 	ldw	r2,-40(fp)
 8024418:	1880022e 	bgeu	r3,r2,8024424 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 802441c:	e0bffe17 	ldw	r2,-8(fp)
 8024420:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8024424:	e0bffc17 	ldw	r2,-16(fp)
 8024428:	10c20e04 	addi	r3,r2,2104
 802442c:	e0bff917 	ldw	r2,-28(fp)
 8024430:	1885883a 	add	r2,r3,r2
 8024434:	e1bff617 	ldw	r6,-40(fp)
 8024438:	e17ffd17 	ldw	r5,-12(fp)
 802443c:	1009883a 	mov	r4,r2
 8024440:	80217300 	call	8021730 <memcpy>
      ptr   += n;
 8024444:	e0fffd17 	ldw	r3,-12(fp)
 8024448:	e0bff617 	ldw	r2,-40(fp)
 802444c:	1885883a 	add	r2,r3,r2
 8024450:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8024454:	e0fffe17 	ldw	r3,-8(fp)
 8024458:	e0bff617 	ldw	r2,-40(fp)
 802445c:	1885c83a 	sub	r2,r3,r2
 8024460:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8024464:	e0fff917 	ldw	r3,-28(fp)
 8024468:	e0bff617 	ldw	r2,-40(fp)
 802446c:	1885883a 	add	r2,r3,r2
 8024470:	10c1ffcc 	andi	r3,r2,2047
 8024474:	e0bffc17 	ldw	r2,-16(fp)
 8024478:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 802447c:	e0bffe17 	ldw	r2,-8(fp)
 8024480:	00bfc716 	blt	zero,r2,80243a0 <__alt_data_end+0xfffe4fa0>
 8024484:	00000106 	br	802448c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8024488:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802448c:	0005303a 	rdctl	r2,status
 8024490:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8024494:	e0fffb17 	ldw	r3,-20(fp)
 8024498:	00bfff84 	movi	r2,-2
 802449c:	1884703a 	and	r2,r3,r2
 80244a0:	1001703a 	wrctl	status,r2
  
  return context;
 80244a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80244a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80244ac:	e0bffc17 	ldw	r2,-16(fp)
 80244b0:	10800817 	ldw	r2,32(r2)
 80244b4:	10c00094 	ori	r3,r2,2
 80244b8:	e0bffc17 	ldw	r2,-16(fp)
 80244bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80244c0:	e0bffc17 	ldw	r2,-16(fp)
 80244c4:	10800017 	ldw	r2,0(r2)
 80244c8:	10800104 	addi	r2,r2,4
 80244cc:	1007883a 	mov	r3,r2
 80244d0:	e0bffc17 	ldw	r2,-16(fp)
 80244d4:	10800817 	ldw	r2,32(r2)
 80244d8:	18800035 	stwio	r2,0(r3)
 80244dc:	e0bffa17 	ldw	r2,-24(fp)
 80244e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80244e4:	e0bff817 	ldw	r2,-32(fp)
 80244e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80244ec:	e0bffe17 	ldw	r2,-8(fp)
 80244f0:	0080100e 	bge	zero,r2,8024534 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80244f4:	e0bfff17 	ldw	r2,-4(fp)
 80244f8:	1090000c 	andi	r2,r2,16384
 80244fc:	1000101e 	bne	r2,zero,8024540 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8024500:	0001883a 	nop
 8024504:	e0bffc17 	ldw	r2,-16(fp)
 8024508:	10c00d17 	ldw	r3,52(r2)
 802450c:	e0bff517 	ldw	r2,-44(fp)
 8024510:	1880051e 	bne	r3,r2,8024528 <altera_avalon_jtag_uart_write+0x1b8>
 8024514:	e0bffc17 	ldw	r2,-16(fp)
 8024518:	10c00917 	ldw	r3,36(r2)
 802451c:	e0bffc17 	ldw	r2,-16(fp)
 8024520:	10800117 	ldw	r2,4(r2)
 8024524:	18bff736 	bltu	r3,r2,8024504 <__alt_data_end+0xfffe5104>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8024528:	e0bffc17 	ldw	r2,-16(fp)
 802452c:	10800917 	ldw	r2,36(r2)
 8024530:	1000051e 	bne	r2,zero,8024548 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8024534:	e0bffe17 	ldw	r2,-8(fp)
 8024538:	00bfd016 	blt	zero,r2,802447c <__alt_data_end+0xfffe507c>
 802453c:	00000306 	br	802454c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8024540:	0001883a 	nop
 8024544:	00000106 	br	802454c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8024548:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 802454c:	e0fffd17 	ldw	r3,-12(fp)
 8024550:	e0bff717 	ldw	r2,-36(fp)
 8024554:	18800426 	beq	r3,r2,8024568 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8024558:	e0fffd17 	ldw	r3,-12(fp)
 802455c:	e0bff717 	ldw	r2,-36(fp)
 8024560:	1885c83a 	sub	r2,r3,r2
 8024564:	00000606 	br	8024580 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8024568:	e0bfff17 	ldw	r2,-4(fp)
 802456c:	1090000c 	andi	r2,r2,16384
 8024570:	10000226 	beq	r2,zero,802457c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8024574:	00bffd44 	movi	r2,-11
 8024578:	00000106 	br	8024580 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 802457c:	00bffec4 	movi	r2,-5
}
 8024580:	e037883a 	mov	sp,fp
 8024584:	dfc00117 	ldw	ra,4(sp)
 8024588:	df000017 	ldw	fp,0(sp)
 802458c:	dec00204 	addi	sp,sp,8
 8024590:	f800283a 	ret

08024594 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8024594:	defff504 	addi	sp,sp,-44
 8024598:	df000a15 	stw	fp,40(sp)
 802459c:	df000a04 	addi	fp,sp,40
 80245a0:	e13ffc15 	stw	r4,-16(fp)
 80245a4:	e17ffd15 	stw	r5,-12(fp)
 80245a8:	e1bffe15 	stw	r6,-8(fp)
 80245ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80245b0:	e03ff615 	stw	zero,-40(fp)
 80245b4:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 80245b8:	10003c26 	beq	r2,zero,80246ac <alt_alarm_start+0x118>
  {
    if (alarm)
 80245bc:	e0bffc17 	ldw	r2,-16(fp)
 80245c0:	10003826 	beq	r2,zero,80246a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80245c4:	e0bffc17 	ldw	r2,-16(fp)
 80245c8:	e0fffe17 	ldw	r3,-8(fp)
 80245cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80245d0:	e0bffc17 	ldw	r2,-16(fp)
 80245d4:	e0ffff17 	ldw	r3,-4(fp)
 80245d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80245dc:	0005303a 	rdctl	r2,status
 80245e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80245e4:	e0fff917 	ldw	r3,-28(fp)
 80245e8:	00bfff84 	movi	r2,-2
 80245ec:	1884703a 	and	r2,r3,r2
 80245f0:	1001703a 	wrctl	status,r2
  
  return context;
 80245f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80245f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80245fc:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 8024600:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8024604:	e0fffd17 	ldw	r3,-12(fp)
 8024608:	e0bff617 	ldw	r2,-40(fp)
 802460c:	1885883a 	add	r2,r3,r2
 8024610:	10c00044 	addi	r3,r2,1
 8024614:	e0bffc17 	ldw	r2,-16(fp)
 8024618:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 802461c:	e0bffc17 	ldw	r2,-16(fp)
 8024620:	10c00217 	ldw	r3,8(r2)
 8024624:	e0bff617 	ldw	r2,-40(fp)
 8024628:	1880042e 	bgeu	r3,r2,802463c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 802462c:	e0bffc17 	ldw	r2,-16(fp)
 8024630:	00c00044 	movi	r3,1
 8024634:	10c00405 	stb	r3,16(r2)
 8024638:	00000206 	br	8024644 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 802463c:	e0bffc17 	ldw	r2,-16(fp)
 8024640:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8024644:	e0bffc17 	ldw	r2,-16(fp)
 8024648:	d0e00c04 	addi	r3,gp,-32720
 802464c:	e0fffa15 	stw	r3,-24(fp)
 8024650:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8024654:	e0bffb17 	ldw	r2,-20(fp)
 8024658:	e0fffa17 	ldw	r3,-24(fp)
 802465c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8024660:	e0bffa17 	ldw	r2,-24(fp)
 8024664:	10c00017 	ldw	r3,0(r2)
 8024668:	e0bffb17 	ldw	r2,-20(fp)
 802466c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8024670:	e0bffa17 	ldw	r2,-24(fp)
 8024674:	10800017 	ldw	r2,0(r2)
 8024678:	e0fffb17 	ldw	r3,-20(fp)
 802467c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8024680:	e0bffa17 	ldw	r2,-24(fp)
 8024684:	e0fffb17 	ldw	r3,-20(fp)
 8024688:	10c00015 	stw	r3,0(r2)
 802468c:	e0bff817 	ldw	r2,-32(fp)
 8024690:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024694:	e0bff717 	ldw	r2,-36(fp)
 8024698:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 802469c:	0005883a 	mov	r2,zero
 80246a0:	00000306 	br	80246b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80246a4:	00bffa84 	movi	r2,-22
 80246a8:	00000106 	br	80246b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80246ac:	00bfde84 	movi	r2,-134
  }
}
 80246b0:	e037883a 	mov	sp,fp
 80246b4:	df000017 	ldw	fp,0(sp)
 80246b8:	dec00104 	addi	sp,sp,4
 80246bc:	f800283a 	ret

080246c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80246c0:	deffff04 	addi	sp,sp,-4
 80246c4:	df000015 	stw	fp,0(sp)
 80246c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80246cc:	0001883a 	nop
 80246d0:	e037883a 	mov	sp,fp
 80246d4:	df000017 	ldw	fp,0(sp)
 80246d8:	dec00104 	addi	sp,sp,4
 80246dc:	f800283a 	ret

080246e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80246e0:	defffe04 	addi	sp,sp,-8
 80246e4:	dfc00115 	stw	ra,4(sp)
 80246e8:	df000015 	stw	fp,0(sp)
 80246ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80246f0:	d0a00917 	ldw	r2,-32732(gp)
 80246f4:	10000326 	beq	r2,zero,8024704 <alt_get_errno+0x24>
 80246f8:	d0a00917 	ldw	r2,-32732(gp)
 80246fc:	103ee83a 	callr	r2
 8024700:	00000106 	br	8024708 <alt_get_errno+0x28>
 8024704:	d0a6ac04 	addi	r2,gp,-25936
}
 8024708:	e037883a 	mov	sp,fp
 802470c:	dfc00117 	ldw	ra,4(sp)
 8024710:	df000017 	ldw	fp,0(sp)
 8024714:	dec00204 	addi	sp,sp,8
 8024718:	f800283a 	ret

0802471c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 802471c:	defffa04 	addi	sp,sp,-24
 8024720:	dfc00515 	stw	ra,20(sp)
 8024724:	df000415 	stw	fp,16(sp)
 8024728:	df000404 	addi	fp,sp,16
 802472c:	e13ffe15 	stw	r4,-8(fp)
 8024730:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8024734:	e0bffe17 	ldw	r2,-8(fp)
 8024738:	10000326 	beq	r2,zero,8024748 <alt_dev_llist_insert+0x2c>
 802473c:	e0bffe17 	ldw	r2,-8(fp)
 8024740:	10800217 	ldw	r2,8(r2)
 8024744:	1000061e 	bne	r2,zero,8024760 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8024748:	80246e00 	call	80246e0 <alt_get_errno>
 802474c:	1007883a 	mov	r3,r2
 8024750:	00800584 	movi	r2,22
 8024754:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8024758:	00bffa84 	movi	r2,-22
 802475c:	00001306 	br	80247ac <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8024760:	e0bffe17 	ldw	r2,-8(fp)
 8024764:	e0ffff17 	ldw	r3,-4(fp)
 8024768:	e0fffc15 	stw	r3,-16(fp)
 802476c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8024770:	e0bffd17 	ldw	r2,-12(fp)
 8024774:	e0fffc17 	ldw	r3,-16(fp)
 8024778:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 802477c:	e0bffc17 	ldw	r2,-16(fp)
 8024780:	10c00017 	ldw	r3,0(r2)
 8024784:	e0bffd17 	ldw	r2,-12(fp)
 8024788:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 802478c:	e0bffc17 	ldw	r2,-16(fp)
 8024790:	10800017 	ldw	r2,0(r2)
 8024794:	e0fffd17 	ldw	r3,-12(fp)
 8024798:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 802479c:	e0bffc17 	ldw	r2,-16(fp)
 80247a0:	e0fffd17 	ldw	r3,-12(fp)
 80247a4:	10c00015 	stw	r3,0(r2)

  return 0;  
 80247a8:	0005883a 	mov	r2,zero
}
 80247ac:	e037883a 	mov	sp,fp
 80247b0:	dfc00117 	ldw	ra,4(sp)
 80247b4:	df000017 	ldw	fp,0(sp)
 80247b8:	dec00204 	addi	sp,sp,8
 80247bc:	f800283a 	ret

080247c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80247c0:	defffd04 	addi	sp,sp,-12
 80247c4:	dfc00215 	stw	ra,8(sp)
 80247c8:	df000115 	stw	fp,4(sp)
 80247cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80247d0:	008200b4 	movhi	r2,2050
 80247d4:	1095dd04 	addi	r2,r2,22388
 80247d8:	e0bfff15 	stw	r2,-4(fp)
 80247dc:	00000606 	br	80247f8 <_do_ctors+0x38>
        (*ctor) (); 
 80247e0:	e0bfff17 	ldw	r2,-4(fp)
 80247e4:	10800017 	ldw	r2,0(r2)
 80247e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80247ec:	e0bfff17 	ldw	r2,-4(fp)
 80247f0:	10bfff04 	addi	r2,r2,-4
 80247f4:	e0bfff15 	stw	r2,-4(fp)
 80247f8:	e0ffff17 	ldw	r3,-4(fp)
 80247fc:	008200b4 	movhi	r2,2050
 8024800:	1095de04 	addi	r2,r2,22392
 8024804:	18bff62e 	bgeu	r3,r2,80247e0 <__alt_data_end+0xfffe53e0>
        (*ctor) (); 
}
 8024808:	0001883a 	nop
 802480c:	e037883a 	mov	sp,fp
 8024810:	dfc00117 	ldw	ra,4(sp)
 8024814:	df000017 	ldw	fp,0(sp)
 8024818:	dec00204 	addi	sp,sp,8
 802481c:	f800283a 	ret

08024820 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8024820:	defffd04 	addi	sp,sp,-12
 8024824:	dfc00215 	stw	ra,8(sp)
 8024828:	df000115 	stw	fp,4(sp)
 802482c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8024830:	008200b4 	movhi	r2,2050
 8024834:	1095dd04 	addi	r2,r2,22388
 8024838:	e0bfff15 	stw	r2,-4(fp)
 802483c:	00000606 	br	8024858 <_do_dtors+0x38>
        (*dtor) (); 
 8024840:	e0bfff17 	ldw	r2,-4(fp)
 8024844:	10800017 	ldw	r2,0(r2)
 8024848:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 802484c:	e0bfff17 	ldw	r2,-4(fp)
 8024850:	10bfff04 	addi	r2,r2,-4
 8024854:	e0bfff15 	stw	r2,-4(fp)
 8024858:	e0ffff17 	ldw	r3,-4(fp)
 802485c:	008200b4 	movhi	r2,2050
 8024860:	1095de04 	addi	r2,r2,22392
 8024864:	18bff62e 	bgeu	r3,r2,8024840 <__alt_data_end+0xfffe5440>
        (*dtor) (); 
}
 8024868:	0001883a 	nop
 802486c:	e037883a 	mov	sp,fp
 8024870:	dfc00117 	ldw	ra,4(sp)
 8024874:	df000017 	ldw	fp,0(sp)
 8024878:	dec00204 	addi	sp,sp,8
 802487c:	f800283a 	ret

08024880 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8024880:	deffff04 	addi	sp,sp,-4
 8024884:	df000015 	stw	fp,0(sp)
 8024888:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 802488c:	0001883a 	nop
 8024890:	e037883a 	mov	sp,fp
 8024894:	df000017 	ldw	fp,0(sp)
 8024898:	dec00104 	addi	sp,sp,4
 802489c:	f800283a 	ret

080248a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80248a0:	defff904 	addi	sp,sp,-28
 80248a4:	dfc00615 	stw	ra,24(sp)
 80248a8:	df000515 	stw	fp,20(sp)
 80248ac:	df000504 	addi	fp,sp,20
 80248b0:	e13ffc15 	stw	r4,-16(fp)
 80248b4:	e17ffd15 	stw	r5,-12(fp)
 80248b8:	e1bffe15 	stw	r6,-8(fp)
 80248bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80248c0:	e0800217 	ldw	r2,8(fp)
 80248c4:	d8800015 	stw	r2,0(sp)
 80248c8:	e1ffff17 	ldw	r7,-4(fp)
 80248cc:	e1bffe17 	ldw	r6,-8(fp)
 80248d0:	e17ffd17 	ldw	r5,-12(fp)
 80248d4:	e13ffc17 	ldw	r4,-16(fp)
 80248d8:	8024a500 	call	8024a50 <alt_iic_isr_register>
}  
 80248dc:	e037883a 	mov	sp,fp
 80248e0:	dfc00117 	ldw	ra,4(sp)
 80248e4:	df000017 	ldw	fp,0(sp)
 80248e8:	dec00204 	addi	sp,sp,8
 80248ec:	f800283a 	ret

080248f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80248f0:	defff904 	addi	sp,sp,-28
 80248f4:	df000615 	stw	fp,24(sp)
 80248f8:	df000604 	addi	fp,sp,24
 80248fc:	e13ffe15 	stw	r4,-8(fp)
 8024900:	e17fff15 	stw	r5,-4(fp)
 8024904:	e0bfff17 	ldw	r2,-4(fp)
 8024908:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802490c:	0005303a 	rdctl	r2,status
 8024910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8024914:	e0fffb17 	ldw	r3,-20(fp)
 8024918:	00bfff84 	movi	r2,-2
 802491c:	1884703a 	and	r2,r3,r2
 8024920:	1001703a 	wrctl	status,r2
  
  return context;
 8024924:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8024928:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 802492c:	00c00044 	movi	r3,1
 8024930:	e0bffa17 	ldw	r2,-24(fp)
 8024934:	1884983a 	sll	r2,r3,r2
 8024938:	1007883a 	mov	r3,r2
 802493c:	d0a6b017 	ldw	r2,-25920(gp)
 8024940:	1884b03a 	or	r2,r3,r2
 8024944:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8024948:	d0a6b017 	ldw	r2,-25920(gp)
 802494c:	100170fa 	wrctl	ienable,r2
 8024950:	e0bffc17 	ldw	r2,-16(fp)
 8024954:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024958:	e0bffd17 	ldw	r2,-12(fp)
 802495c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8024960:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8024964:	0001883a 	nop
}
 8024968:	e037883a 	mov	sp,fp
 802496c:	df000017 	ldw	fp,0(sp)
 8024970:	dec00104 	addi	sp,sp,4
 8024974:	f800283a 	ret

08024978 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8024978:	defff904 	addi	sp,sp,-28
 802497c:	df000615 	stw	fp,24(sp)
 8024980:	df000604 	addi	fp,sp,24
 8024984:	e13ffe15 	stw	r4,-8(fp)
 8024988:	e17fff15 	stw	r5,-4(fp)
 802498c:	e0bfff17 	ldw	r2,-4(fp)
 8024990:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8024994:	0005303a 	rdctl	r2,status
 8024998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802499c:	e0fffb17 	ldw	r3,-20(fp)
 80249a0:	00bfff84 	movi	r2,-2
 80249a4:	1884703a 	and	r2,r3,r2
 80249a8:	1001703a 	wrctl	status,r2
  
  return context;
 80249ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80249b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80249b4:	00c00044 	movi	r3,1
 80249b8:	e0bffa17 	ldw	r2,-24(fp)
 80249bc:	1884983a 	sll	r2,r3,r2
 80249c0:	0084303a 	nor	r2,zero,r2
 80249c4:	1007883a 	mov	r3,r2
 80249c8:	d0a6b017 	ldw	r2,-25920(gp)
 80249cc:	1884703a 	and	r2,r3,r2
 80249d0:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80249d4:	d0a6b017 	ldw	r2,-25920(gp)
 80249d8:	100170fa 	wrctl	ienable,r2
 80249dc:	e0bffc17 	ldw	r2,-16(fp)
 80249e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80249e4:	e0bffd17 	ldw	r2,-12(fp)
 80249e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80249ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80249f0:	0001883a 	nop
}
 80249f4:	e037883a 	mov	sp,fp
 80249f8:	df000017 	ldw	fp,0(sp)
 80249fc:	dec00104 	addi	sp,sp,4
 8024a00:	f800283a 	ret

08024a04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8024a04:	defffc04 	addi	sp,sp,-16
 8024a08:	df000315 	stw	fp,12(sp)
 8024a0c:	df000304 	addi	fp,sp,12
 8024a10:	e13ffe15 	stw	r4,-8(fp)
 8024a14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8024a18:	000530fa 	rdctl	r2,ienable
 8024a1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8024a20:	00c00044 	movi	r3,1
 8024a24:	e0bfff17 	ldw	r2,-4(fp)
 8024a28:	1884983a 	sll	r2,r3,r2
 8024a2c:	1007883a 	mov	r3,r2
 8024a30:	e0bffd17 	ldw	r2,-12(fp)
 8024a34:	1884703a 	and	r2,r3,r2
 8024a38:	1004c03a 	cmpne	r2,r2,zero
 8024a3c:	10803fcc 	andi	r2,r2,255
}
 8024a40:	e037883a 	mov	sp,fp
 8024a44:	df000017 	ldw	fp,0(sp)
 8024a48:	dec00104 	addi	sp,sp,4
 8024a4c:	f800283a 	ret

08024a50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8024a50:	defff504 	addi	sp,sp,-44
 8024a54:	dfc00a15 	stw	ra,40(sp)
 8024a58:	df000915 	stw	fp,36(sp)
 8024a5c:	df000904 	addi	fp,sp,36
 8024a60:	e13ffc15 	stw	r4,-16(fp)
 8024a64:	e17ffd15 	stw	r5,-12(fp)
 8024a68:	e1bffe15 	stw	r6,-8(fp)
 8024a6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8024a70:	00bffa84 	movi	r2,-22
 8024a74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8024a78:	e0bffd17 	ldw	r2,-12(fp)
 8024a7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8024a80:	e0bff817 	ldw	r2,-32(fp)
 8024a84:	10800808 	cmpgei	r2,r2,32
 8024a88:	1000271e 	bne	r2,zero,8024b28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8024a8c:	0005303a 	rdctl	r2,status
 8024a90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8024a94:	e0fffb17 	ldw	r3,-20(fp)
 8024a98:	00bfff84 	movi	r2,-2
 8024a9c:	1884703a 	and	r2,r3,r2
 8024aa0:	1001703a 	wrctl	status,r2
  
  return context;
 8024aa4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8024aa8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8024aac:	008200f4 	movhi	r2,2051
 8024ab0:	10a33d04 	addi	r2,r2,-29452
 8024ab4:	e0fff817 	ldw	r3,-32(fp)
 8024ab8:	180690fa 	slli	r3,r3,3
 8024abc:	10c5883a 	add	r2,r2,r3
 8024ac0:	e0fffe17 	ldw	r3,-8(fp)
 8024ac4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8024ac8:	008200f4 	movhi	r2,2051
 8024acc:	10a33d04 	addi	r2,r2,-29452
 8024ad0:	e0fff817 	ldw	r3,-32(fp)
 8024ad4:	180690fa 	slli	r3,r3,3
 8024ad8:	10c5883a 	add	r2,r2,r3
 8024adc:	10800104 	addi	r2,r2,4
 8024ae0:	e0ffff17 	ldw	r3,-4(fp)
 8024ae4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8024ae8:	e0bffe17 	ldw	r2,-8(fp)
 8024aec:	10000526 	beq	r2,zero,8024b04 <alt_iic_isr_register+0xb4>
 8024af0:	e0bff817 	ldw	r2,-32(fp)
 8024af4:	100b883a 	mov	r5,r2
 8024af8:	e13ffc17 	ldw	r4,-16(fp)
 8024afc:	80248f00 	call	80248f0 <alt_ic_irq_enable>
 8024b00:	00000406 	br	8024b14 <alt_iic_isr_register+0xc4>
 8024b04:	e0bff817 	ldw	r2,-32(fp)
 8024b08:	100b883a 	mov	r5,r2
 8024b0c:	e13ffc17 	ldw	r4,-16(fp)
 8024b10:	80249780 	call	8024978 <alt_ic_irq_disable>
 8024b14:	e0bff715 	stw	r2,-36(fp)
 8024b18:	e0bffa17 	ldw	r2,-24(fp)
 8024b1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024b20:	e0bff917 	ldw	r2,-28(fp)
 8024b24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8024b28:	e0bff717 	ldw	r2,-36(fp)
}
 8024b2c:	e037883a 	mov	sp,fp
 8024b30:	dfc00117 	ldw	ra,4(sp)
 8024b34:	df000017 	ldw	fp,0(sp)
 8024b38:	dec00204 	addi	sp,sp,8
 8024b3c:	f800283a 	ret

08024b40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8024b40:	defff804 	addi	sp,sp,-32
 8024b44:	dfc00715 	stw	ra,28(sp)
 8024b48:	df000615 	stw	fp,24(sp)
 8024b4c:	dc000515 	stw	r16,20(sp)
 8024b50:	df000604 	addi	fp,sp,24
 8024b54:	e13ffb15 	stw	r4,-20(fp)
 8024b58:	e17ffc15 	stw	r5,-16(fp)
 8024b5c:	e1bffd15 	stw	r6,-12(fp)
 8024b60:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8024b64:	e1bffe17 	ldw	r6,-8(fp)
 8024b68:	e17ffd17 	ldw	r5,-12(fp)
 8024b6c:	e13ffc17 	ldw	r4,-16(fp)
 8024b70:	8024dc80 	call	8024dc8 <open>
 8024b74:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8024b78:	e0bffa17 	ldw	r2,-24(fp)
 8024b7c:	10002216 	blt	r2,zero,8024c08 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8024b80:	040200b4 	movhi	r16,2050
 8024b84:	84180704 	addi	r16,r16,24604
 8024b88:	e0bffa17 	ldw	r2,-24(fp)
 8024b8c:	01400304 	movi	r5,12
 8024b90:	1009883a 	mov	r4,r2
 8024b94:	80230b80 	call	80230b8 <__mulsi3>
 8024b98:	8085883a 	add	r2,r16,r2
 8024b9c:	10c00017 	ldw	r3,0(r2)
 8024ba0:	e0bffb17 	ldw	r2,-20(fp)
 8024ba4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8024ba8:	040200b4 	movhi	r16,2050
 8024bac:	84180704 	addi	r16,r16,24604
 8024bb0:	e0bffa17 	ldw	r2,-24(fp)
 8024bb4:	01400304 	movi	r5,12
 8024bb8:	1009883a 	mov	r4,r2
 8024bbc:	80230b80 	call	80230b8 <__mulsi3>
 8024bc0:	8085883a 	add	r2,r16,r2
 8024bc4:	10800104 	addi	r2,r2,4
 8024bc8:	10c00017 	ldw	r3,0(r2)
 8024bcc:	e0bffb17 	ldw	r2,-20(fp)
 8024bd0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8024bd4:	040200b4 	movhi	r16,2050
 8024bd8:	84180704 	addi	r16,r16,24604
 8024bdc:	e0bffa17 	ldw	r2,-24(fp)
 8024be0:	01400304 	movi	r5,12
 8024be4:	1009883a 	mov	r4,r2
 8024be8:	80230b80 	call	80230b8 <__mulsi3>
 8024bec:	8085883a 	add	r2,r16,r2
 8024bf0:	10800204 	addi	r2,r2,8
 8024bf4:	10c00017 	ldw	r3,0(r2)
 8024bf8:	e0bffb17 	ldw	r2,-20(fp)
 8024bfc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8024c00:	e13ffa17 	ldw	r4,-24(fp)
 8024c04:	80238040 	call	8023804 <alt_release_fd>
  }
} 
 8024c08:	0001883a 	nop
 8024c0c:	e6ffff04 	addi	sp,fp,-4
 8024c10:	dfc00217 	ldw	ra,8(sp)
 8024c14:	df000117 	ldw	fp,4(sp)
 8024c18:	dc000017 	ldw	r16,0(sp)
 8024c1c:	dec00304 	addi	sp,sp,12
 8024c20:	f800283a 	ret

08024c24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8024c24:	defffb04 	addi	sp,sp,-20
 8024c28:	dfc00415 	stw	ra,16(sp)
 8024c2c:	df000315 	stw	fp,12(sp)
 8024c30:	df000304 	addi	fp,sp,12
 8024c34:	e13ffd15 	stw	r4,-12(fp)
 8024c38:	e17ffe15 	stw	r5,-8(fp)
 8024c3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8024c40:	01c07fc4 	movi	r7,511
 8024c44:	01800044 	movi	r6,1
 8024c48:	e17ffd17 	ldw	r5,-12(fp)
 8024c4c:	010200b4 	movhi	r4,2050
 8024c50:	21180a04 	addi	r4,r4,24616
 8024c54:	8024b400 	call	8024b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8024c58:	01c07fc4 	movi	r7,511
 8024c5c:	000d883a 	mov	r6,zero
 8024c60:	e17ffe17 	ldw	r5,-8(fp)
 8024c64:	010200b4 	movhi	r4,2050
 8024c68:	21180704 	addi	r4,r4,24604
 8024c6c:	8024b400 	call	8024b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8024c70:	01c07fc4 	movi	r7,511
 8024c74:	01800044 	movi	r6,1
 8024c78:	e17fff17 	ldw	r5,-4(fp)
 8024c7c:	010200b4 	movhi	r4,2050
 8024c80:	21180d04 	addi	r4,r4,24628
 8024c84:	8024b400 	call	8024b40 <alt_open_fd>
}  
 8024c88:	0001883a 	nop
 8024c8c:	e037883a 	mov	sp,fp
 8024c90:	dfc00117 	ldw	ra,4(sp)
 8024c94:	df000017 	ldw	fp,0(sp)
 8024c98:	dec00204 	addi	sp,sp,8
 8024c9c:	f800283a 	ret

08024ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8024ca0:	defffe04 	addi	sp,sp,-8
 8024ca4:	dfc00115 	stw	ra,4(sp)
 8024ca8:	df000015 	stw	fp,0(sp)
 8024cac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8024cb0:	d0a00917 	ldw	r2,-32732(gp)
 8024cb4:	10000326 	beq	r2,zero,8024cc4 <alt_get_errno+0x24>
 8024cb8:	d0a00917 	ldw	r2,-32732(gp)
 8024cbc:	103ee83a 	callr	r2
 8024cc0:	00000106 	br	8024cc8 <alt_get_errno+0x28>
 8024cc4:	d0a6ac04 	addi	r2,gp,-25936
}
 8024cc8:	e037883a 	mov	sp,fp
 8024ccc:	dfc00117 	ldw	ra,4(sp)
 8024cd0:	df000017 	ldw	fp,0(sp)
 8024cd4:	dec00204 	addi	sp,sp,8
 8024cd8:	f800283a 	ret

08024cdc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8024cdc:	defffb04 	addi	sp,sp,-20
 8024ce0:	dfc00415 	stw	ra,16(sp)
 8024ce4:	df000315 	stw	fp,12(sp)
 8024ce8:	dc000215 	stw	r16,8(sp)
 8024cec:	df000304 	addi	fp,sp,12
 8024cf0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8024cf4:	e0bffe17 	ldw	r2,-8(fp)
 8024cf8:	10800217 	ldw	r2,8(r2)
 8024cfc:	10d00034 	orhi	r3,r2,16384
 8024d00:	e0bffe17 	ldw	r2,-8(fp)
 8024d04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8024d08:	e03ffd15 	stw	zero,-12(fp)
 8024d0c:	00002306 	br	8024d9c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8024d10:	040200b4 	movhi	r16,2050
 8024d14:	84180704 	addi	r16,r16,24604
 8024d18:	e0bffd17 	ldw	r2,-12(fp)
 8024d1c:	01400304 	movi	r5,12
 8024d20:	1009883a 	mov	r4,r2
 8024d24:	80230b80 	call	80230b8 <__mulsi3>
 8024d28:	8085883a 	add	r2,r16,r2
 8024d2c:	10c00017 	ldw	r3,0(r2)
 8024d30:	e0bffe17 	ldw	r2,-8(fp)
 8024d34:	10800017 	ldw	r2,0(r2)
 8024d38:	1880151e 	bne	r3,r2,8024d90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8024d3c:	040200b4 	movhi	r16,2050
 8024d40:	84180704 	addi	r16,r16,24604
 8024d44:	e0bffd17 	ldw	r2,-12(fp)
 8024d48:	01400304 	movi	r5,12
 8024d4c:	1009883a 	mov	r4,r2
 8024d50:	80230b80 	call	80230b8 <__mulsi3>
 8024d54:	8085883a 	add	r2,r16,r2
 8024d58:	10800204 	addi	r2,r2,8
 8024d5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8024d60:	10000b0e 	bge	r2,zero,8024d90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8024d64:	01400304 	movi	r5,12
 8024d68:	e13ffd17 	ldw	r4,-12(fp)
 8024d6c:	80230b80 	call	80230b8 <__mulsi3>
 8024d70:	1007883a 	mov	r3,r2
 8024d74:	008200b4 	movhi	r2,2050
 8024d78:	10980704 	addi	r2,r2,24604
 8024d7c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8024d80:	e0bffe17 	ldw	r2,-8(fp)
 8024d84:	18800226 	beq	r3,r2,8024d90 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8024d88:	00bffcc4 	movi	r2,-13
 8024d8c:	00000806 	br	8024db0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8024d90:	e0bffd17 	ldw	r2,-12(fp)
 8024d94:	10800044 	addi	r2,r2,1
 8024d98:	e0bffd15 	stw	r2,-12(fp)
 8024d9c:	d0a00817 	ldw	r2,-32736(gp)
 8024da0:	1007883a 	mov	r3,r2
 8024da4:	e0bffd17 	ldw	r2,-12(fp)
 8024da8:	18bfd92e 	bgeu	r3,r2,8024d10 <__alt_data_end+0xfffe5910>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8024dac:	0005883a 	mov	r2,zero
}
 8024db0:	e6ffff04 	addi	sp,fp,-4
 8024db4:	dfc00217 	ldw	ra,8(sp)
 8024db8:	df000117 	ldw	fp,4(sp)
 8024dbc:	dc000017 	ldw	r16,0(sp)
 8024dc0:	dec00304 	addi	sp,sp,12
 8024dc4:	f800283a 	ret

08024dc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8024dc8:	defff604 	addi	sp,sp,-40
 8024dcc:	dfc00915 	stw	ra,36(sp)
 8024dd0:	df000815 	stw	fp,32(sp)
 8024dd4:	df000804 	addi	fp,sp,32
 8024dd8:	e13ffd15 	stw	r4,-12(fp)
 8024ddc:	e17ffe15 	stw	r5,-8(fp)
 8024de0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8024de4:	00bfffc4 	movi	r2,-1
 8024de8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8024dec:	00bffb44 	movi	r2,-19
 8024df0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8024df4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8024df8:	d1600604 	addi	r5,gp,-32744
 8024dfc:	e13ffd17 	ldw	r4,-12(fp)
 8024e00:	80250ec0 	call	80250ec <alt_find_dev>
 8024e04:	e0bff815 	stw	r2,-32(fp)
 8024e08:	e0bff817 	ldw	r2,-32(fp)
 8024e0c:	1000051e 	bne	r2,zero,8024e24 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8024e10:	e13ffd17 	ldw	r4,-12(fp)
 8024e14:	802517c0 	call	802517c <alt_find_file>
 8024e18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8024e1c:	00800044 	movi	r2,1
 8024e20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8024e24:	e0bff817 	ldw	r2,-32(fp)
 8024e28:	10002b26 	beq	r2,zero,8024ed8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8024e2c:	e13ff817 	ldw	r4,-32(fp)
 8024e30:	80252840 	call	8025284 <alt_get_fd>
 8024e34:	e0bff915 	stw	r2,-28(fp)
 8024e38:	e0bff917 	ldw	r2,-28(fp)
 8024e3c:	1000030e 	bge	r2,zero,8024e4c <open+0x84>
    {
      status = index;
 8024e40:	e0bff917 	ldw	r2,-28(fp)
 8024e44:	e0bffa15 	stw	r2,-24(fp)
 8024e48:	00002506 	br	8024ee0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8024e4c:	01400304 	movi	r5,12
 8024e50:	e13ff917 	ldw	r4,-28(fp)
 8024e54:	80230b80 	call	80230b8 <__mulsi3>
 8024e58:	1007883a 	mov	r3,r2
 8024e5c:	008200b4 	movhi	r2,2050
 8024e60:	10980704 	addi	r2,r2,24604
 8024e64:	1885883a 	add	r2,r3,r2
 8024e68:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8024e6c:	e0fffe17 	ldw	r3,-8(fp)
 8024e70:	00900034 	movhi	r2,16384
 8024e74:	10bfffc4 	addi	r2,r2,-1
 8024e78:	1886703a 	and	r3,r3,r2
 8024e7c:	e0bffc17 	ldw	r2,-16(fp)
 8024e80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8024e84:	e0bffb17 	ldw	r2,-20(fp)
 8024e88:	1000051e 	bne	r2,zero,8024ea0 <open+0xd8>
 8024e8c:	e13ffc17 	ldw	r4,-16(fp)
 8024e90:	8024cdc0 	call	8024cdc <alt_file_locked>
 8024e94:	e0bffa15 	stw	r2,-24(fp)
 8024e98:	e0bffa17 	ldw	r2,-24(fp)
 8024e9c:	10001016 	blt	r2,zero,8024ee0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8024ea0:	e0bff817 	ldw	r2,-32(fp)
 8024ea4:	10800317 	ldw	r2,12(r2)
 8024ea8:	10000826 	beq	r2,zero,8024ecc <open+0x104>
 8024eac:	e0bff817 	ldw	r2,-32(fp)
 8024eb0:	10800317 	ldw	r2,12(r2)
 8024eb4:	e1ffff17 	ldw	r7,-4(fp)
 8024eb8:	e1bffe17 	ldw	r6,-8(fp)
 8024ebc:	e17ffd17 	ldw	r5,-12(fp)
 8024ec0:	e13ffc17 	ldw	r4,-16(fp)
 8024ec4:	103ee83a 	callr	r2
 8024ec8:	00000106 	br	8024ed0 <open+0x108>
 8024ecc:	0005883a 	mov	r2,zero
 8024ed0:	e0bffa15 	stw	r2,-24(fp)
 8024ed4:	00000206 	br	8024ee0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8024ed8:	00bffb44 	movi	r2,-19
 8024edc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8024ee0:	e0bffa17 	ldw	r2,-24(fp)
 8024ee4:	1000090e 	bge	r2,zero,8024f0c <open+0x144>
  {
    alt_release_fd (index);  
 8024ee8:	e13ff917 	ldw	r4,-28(fp)
 8024eec:	80238040 	call	8023804 <alt_release_fd>
    ALT_ERRNO = -status;
 8024ef0:	8024ca00 	call	8024ca0 <alt_get_errno>
 8024ef4:	1007883a 	mov	r3,r2
 8024ef8:	e0bffa17 	ldw	r2,-24(fp)
 8024efc:	0085c83a 	sub	r2,zero,r2
 8024f00:	18800015 	stw	r2,0(r3)
    return -1;
 8024f04:	00bfffc4 	movi	r2,-1
 8024f08:	00000106 	br	8024f10 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8024f0c:	e0bff917 	ldw	r2,-28(fp)
}
 8024f10:	e037883a 	mov	sp,fp
 8024f14:	dfc00117 	ldw	ra,4(sp)
 8024f18:	df000017 	ldw	fp,0(sp)
 8024f1c:	dec00204 	addi	sp,sp,8
 8024f20:	f800283a 	ret

08024f24 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8024f24:	defffa04 	addi	sp,sp,-24
 8024f28:	df000515 	stw	fp,20(sp)
 8024f2c:	df000504 	addi	fp,sp,20
 8024f30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8024f34:	0005303a 	rdctl	r2,status
 8024f38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8024f3c:	e0fffc17 	ldw	r3,-16(fp)
 8024f40:	00bfff84 	movi	r2,-2
 8024f44:	1884703a 	and	r2,r3,r2
 8024f48:	1001703a 	wrctl	status,r2
  
  return context;
 8024f4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8024f50:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8024f54:	e0bfff17 	ldw	r2,-4(fp)
 8024f58:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8024f5c:	e0bffd17 	ldw	r2,-12(fp)
 8024f60:	10800017 	ldw	r2,0(r2)
 8024f64:	e0fffd17 	ldw	r3,-12(fp)
 8024f68:	18c00117 	ldw	r3,4(r3)
 8024f6c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8024f70:	e0bffd17 	ldw	r2,-12(fp)
 8024f74:	10800117 	ldw	r2,4(r2)
 8024f78:	e0fffd17 	ldw	r3,-12(fp)
 8024f7c:	18c00017 	ldw	r3,0(r3)
 8024f80:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8024f84:	e0bffd17 	ldw	r2,-12(fp)
 8024f88:	e0fffd17 	ldw	r3,-12(fp)
 8024f8c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8024f90:	e0bffd17 	ldw	r2,-12(fp)
 8024f94:	e0fffd17 	ldw	r3,-12(fp)
 8024f98:	10c00015 	stw	r3,0(r2)
 8024f9c:	e0bffb17 	ldw	r2,-20(fp)
 8024fa0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8024fa4:	e0bffe17 	ldw	r2,-8(fp)
 8024fa8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8024fac:	0001883a 	nop
 8024fb0:	e037883a 	mov	sp,fp
 8024fb4:	df000017 	ldw	fp,0(sp)
 8024fb8:	dec00104 	addi	sp,sp,4
 8024fbc:	f800283a 	ret

08024fc0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8024fc0:	defffb04 	addi	sp,sp,-20
 8024fc4:	dfc00415 	stw	ra,16(sp)
 8024fc8:	df000315 	stw	fp,12(sp)
 8024fcc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8024fd0:	d0a00c17 	ldw	r2,-32720(gp)
 8024fd4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8024fd8:	d0a6b217 	ldw	r2,-25912(gp)
 8024fdc:	10800044 	addi	r2,r2,1
 8024fe0:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8024fe4:	00002e06 	br	80250a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8024fe8:	e0bffd17 	ldw	r2,-12(fp)
 8024fec:	10800017 	ldw	r2,0(r2)
 8024ff0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8024ff4:	e0bffd17 	ldw	r2,-12(fp)
 8024ff8:	10800403 	ldbu	r2,16(r2)
 8024ffc:	10803fcc 	andi	r2,r2,255
 8025000:	10000426 	beq	r2,zero,8025014 <alt_tick+0x54>
 8025004:	d0a6b217 	ldw	r2,-25912(gp)
 8025008:	1000021e 	bne	r2,zero,8025014 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 802500c:	e0bffd17 	ldw	r2,-12(fp)
 8025010:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8025014:	e0bffd17 	ldw	r2,-12(fp)
 8025018:	10800217 	ldw	r2,8(r2)
 802501c:	d0e6b217 	ldw	r3,-25912(gp)
 8025020:	18801d36 	bltu	r3,r2,8025098 <alt_tick+0xd8>
 8025024:	e0bffd17 	ldw	r2,-12(fp)
 8025028:	10800403 	ldbu	r2,16(r2)
 802502c:	10803fcc 	andi	r2,r2,255
 8025030:	1000191e 	bne	r2,zero,8025098 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8025034:	e0bffd17 	ldw	r2,-12(fp)
 8025038:	10800317 	ldw	r2,12(r2)
 802503c:	e0fffd17 	ldw	r3,-12(fp)
 8025040:	18c00517 	ldw	r3,20(r3)
 8025044:	1809883a 	mov	r4,r3
 8025048:	103ee83a 	callr	r2
 802504c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8025050:	e0bfff17 	ldw	r2,-4(fp)
 8025054:	1000031e 	bne	r2,zero,8025064 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8025058:	e13ffd17 	ldw	r4,-12(fp)
 802505c:	8024f240 	call	8024f24 <alt_alarm_stop>
 8025060:	00000d06 	br	8025098 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8025064:	e0bffd17 	ldw	r2,-12(fp)
 8025068:	10c00217 	ldw	r3,8(r2)
 802506c:	e0bfff17 	ldw	r2,-4(fp)
 8025070:	1887883a 	add	r3,r3,r2
 8025074:	e0bffd17 	ldw	r2,-12(fp)
 8025078:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 802507c:	e0bffd17 	ldw	r2,-12(fp)
 8025080:	10c00217 	ldw	r3,8(r2)
 8025084:	d0a6b217 	ldw	r2,-25912(gp)
 8025088:	1880032e 	bgeu	r3,r2,8025098 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 802508c:	e0bffd17 	ldw	r2,-12(fp)
 8025090:	00c00044 	movi	r3,1
 8025094:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8025098:	e0bffe17 	ldw	r2,-8(fp)
 802509c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80250a0:	e0fffd17 	ldw	r3,-12(fp)
 80250a4:	d0a00c04 	addi	r2,gp,-32720
 80250a8:	18bfcf1e 	bne	r3,r2,8024fe8 <__alt_data_end+0xfffe5be8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80250ac:	0001883a 	nop
}
 80250b0:	0001883a 	nop
 80250b4:	e037883a 	mov	sp,fp
 80250b8:	dfc00117 	ldw	ra,4(sp)
 80250bc:	df000017 	ldw	fp,0(sp)
 80250c0:	dec00204 	addi	sp,sp,8
 80250c4:	f800283a 	ret

080250c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80250c8:	deffff04 	addi	sp,sp,-4
 80250cc:	df000015 	stw	fp,0(sp)
 80250d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80250d4:	000170fa 	wrctl	ienable,zero
}
 80250d8:	0001883a 	nop
 80250dc:	e037883a 	mov	sp,fp
 80250e0:	df000017 	ldw	fp,0(sp)
 80250e4:	dec00104 	addi	sp,sp,4
 80250e8:	f800283a 	ret

080250ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80250ec:	defffa04 	addi	sp,sp,-24
 80250f0:	dfc00515 	stw	ra,20(sp)
 80250f4:	df000415 	stw	fp,16(sp)
 80250f8:	df000404 	addi	fp,sp,16
 80250fc:	e13ffe15 	stw	r4,-8(fp)
 8025100:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8025104:	e0bfff17 	ldw	r2,-4(fp)
 8025108:	10800017 	ldw	r2,0(r2)
 802510c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8025110:	e13ffe17 	ldw	r4,-8(fp)
 8025114:	80203a80 	call	80203a8 <strlen>
 8025118:	10800044 	addi	r2,r2,1
 802511c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8025120:	00000d06 	br	8025158 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8025124:	e0bffc17 	ldw	r2,-16(fp)
 8025128:	10800217 	ldw	r2,8(r2)
 802512c:	e0fffd17 	ldw	r3,-12(fp)
 8025130:	180d883a 	mov	r6,r3
 8025134:	e17ffe17 	ldw	r5,-8(fp)
 8025138:	1009883a 	mov	r4,r2
 802513c:	80254300 	call	8025430 <memcmp>
 8025140:	1000021e 	bne	r2,zero,802514c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8025144:	e0bffc17 	ldw	r2,-16(fp)
 8025148:	00000706 	br	8025168 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 802514c:	e0bffc17 	ldw	r2,-16(fp)
 8025150:	10800017 	ldw	r2,0(r2)
 8025154:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8025158:	e0fffc17 	ldw	r3,-16(fp)
 802515c:	e0bfff17 	ldw	r2,-4(fp)
 8025160:	18bff01e 	bne	r3,r2,8025124 <__alt_data_end+0xfffe5d24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8025164:	0005883a 	mov	r2,zero
}
 8025168:	e037883a 	mov	sp,fp
 802516c:	dfc00117 	ldw	ra,4(sp)
 8025170:	df000017 	ldw	fp,0(sp)
 8025174:	dec00204 	addi	sp,sp,8
 8025178:	f800283a 	ret

0802517c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 802517c:	defffb04 	addi	sp,sp,-20
 8025180:	dfc00415 	stw	ra,16(sp)
 8025184:	df000315 	stw	fp,12(sp)
 8025188:	df000304 	addi	fp,sp,12
 802518c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8025190:	d0a00417 	ldw	r2,-32752(gp)
 8025194:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8025198:	00003106 	br	8025260 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 802519c:	e0bffd17 	ldw	r2,-12(fp)
 80251a0:	10800217 	ldw	r2,8(r2)
 80251a4:	1009883a 	mov	r4,r2
 80251a8:	80203a80 	call	80203a8 <strlen>
 80251ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80251b0:	e0bffd17 	ldw	r2,-12(fp)
 80251b4:	10c00217 	ldw	r3,8(r2)
 80251b8:	e0bffe17 	ldw	r2,-8(fp)
 80251bc:	10bfffc4 	addi	r2,r2,-1
 80251c0:	1885883a 	add	r2,r3,r2
 80251c4:	10800003 	ldbu	r2,0(r2)
 80251c8:	10803fcc 	andi	r2,r2,255
 80251cc:	1080201c 	xori	r2,r2,128
 80251d0:	10bfe004 	addi	r2,r2,-128
 80251d4:	10800bd8 	cmpnei	r2,r2,47
 80251d8:	1000031e 	bne	r2,zero,80251e8 <alt_find_file+0x6c>
    {
      len -= 1;
 80251dc:	e0bffe17 	ldw	r2,-8(fp)
 80251e0:	10bfffc4 	addi	r2,r2,-1
 80251e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80251e8:	e0bffe17 	ldw	r2,-8(fp)
 80251ec:	e0ffff17 	ldw	r3,-4(fp)
 80251f0:	1885883a 	add	r2,r3,r2
 80251f4:	10800003 	ldbu	r2,0(r2)
 80251f8:	10803fcc 	andi	r2,r2,255
 80251fc:	1080201c 	xori	r2,r2,128
 8025200:	10bfe004 	addi	r2,r2,-128
 8025204:	10800be0 	cmpeqi	r2,r2,47
 8025208:	1000081e 	bne	r2,zero,802522c <alt_find_file+0xb0>
 802520c:	e0bffe17 	ldw	r2,-8(fp)
 8025210:	e0ffff17 	ldw	r3,-4(fp)
 8025214:	1885883a 	add	r2,r3,r2
 8025218:	10800003 	ldbu	r2,0(r2)
 802521c:	10803fcc 	andi	r2,r2,255
 8025220:	1080201c 	xori	r2,r2,128
 8025224:	10bfe004 	addi	r2,r2,-128
 8025228:	10000a1e 	bne	r2,zero,8025254 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 802522c:	e0bffd17 	ldw	r2,-12(fp)
 8025230:	10800217 	ldw	r2,8(r2)
 8025234:	e0fffe17 	ldw	r3,-8(fp)
 8025238:	180d883a 	mov	r6,r3
 802523c:	e17fff17 	ldw	r5,-4(fp)
 8025240:	1009883a 	mov	r4,r2
 8025244:	80254300 	call	8025430 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8025248:	1000021e 	bne	r2,zero,8025254 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 802524c:	e0bffd17 	ldw	r2,-12(fp)
 8025250:	00000706 	br	8025270 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8025254:	e0bffd17 	ldw	r2,-12(fp)
 8025258:	10800017 	ldw	r2,0(r2)
 802525c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8025260:	e0fffd17 	ldw	r3,-12(fp)
 8025264:	d0a00404 	addi	r2,gp,-32752
 8025268:	18bfcc1e 	bne	r3,r2,802519c <__alt_data_end+0xfffe5d9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 802526c:	0005883a 	mov	r2,zero
}
 8025270:	e037883a 	mov	sp,fp
 8025274:	dfc00117 	ldw	ra,4(sp)
 8025278:	df000017 	ldw	fp,0(sp)
 802527c:	dec00204 	addi	sp,sp,8
 8025280:	f800283a 	ret

08025284 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8025284:	defffa04 	addi	sp,sp,-24
 8025288:	dfc00515 	stw	ra,20(sp)
 802528c:	df000415 	stw	fp,16(sp)
 8025290:	dc000315 	stw	r16,12(sp)
 8025294:	df000404 	addi	fp,sp,16
 8025298:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 802529c:	00bffa04 	movi	r2,-24
 80252a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80252a4:	e03ffc15 	stw	zero,-16(fp)
 80252a8:	00001d06 	br	8025320 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80252ac:	040200b4 	movhi	r16,2050
 80252b0:	84180704 	addi	r16,r16,24604
 80252b4:	e0bffc17 	ldw	r2,-16(fp)
 80252b8:	01400304 	movi	r5,12
 80252bc:	1009883a 	mov	r4,r2
 80252c0:	80230b80 	call	80230b8 <__mulsi3>
 80252c4:	8085883a 	add	r2,r16,r2
 80252c8:	10800017 	ldw	r2,0(r2)
 80252cc:	1000111e 	bne	r2,zero,8025314 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80252d0:	040200b4 	movhi	r16,2050
 80252d4:	84180704 	addi	r16,r16,24604
 80252d8:	e0bffc17 	ldw	r2,-16(fp)
 80252dc:	01400304 	movi	r5,12
 80252e0:	1009883a 	mov	r4,r2
 80252e4:	80230b80 	call	80230b8 <__mulsi3>
 80252e8:	8085883a 	add	r2,r16,r2
 80252ec:	e0fffe17 	ldw	r3,-8(fp)
 80252f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80252f4:	d0e00817 	ldw	r3,-32736(gp)
 80252f8:	e0bffc17 	ldw	r2,-16(fp)
 80252fc:	1880020e 	bge	r3,r2,8025308 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8025300:	e0bffc17 	ldw	r2,-16(fp)
 8025304:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8025308:	e0bffc17 	ldw	r2,-16(fp)
 802530c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8025310:	00000606 	br	802532c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8025314:	e0bffc17 	ldw	r2,-16(fp)
 8025318:	10800044 	addi	r2,r2,1
 802531c:	e0bffc15 	stw	r2,-16(fp)
 8025320:	e0bffc17 	ldw	r2,-16(fp)
 8025324:	10800810 	cmplti	r2,r2,32
 8025328:	103fe01e 	bne	r2,zero,80252ac <__alt_data_end+0xfffe5eac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 802532c:	e0bffd17 	ldw	r2,-12(fp)
}
 8025330:	e6ffff04 	addi	sp,fp,-4
 8025334:	dfc00217 	ldw	ra,8(sp)
 8025338:	df000117 	ldw	fp,4(sp)
 802533c:	dc000017 	ldw	r16,0(sp)
 8025340:	dec00304 	addi	sp,sp,12
 8025344:	f800283a 	ret

08025348 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8025348:	defffe04 	addi	sp,sp,-8
 802534c:	df000115 	stw	fp,4(sp)
 8025350:	df000104 	addi	fp,sp,4
 8025354:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8025358:	e0bfff17 	ldw	r2,-4(fp)
 802535c:	10bffe84 	addi	r2,r2,-6
 8025360:	10c00428 	cmpgeui	r3,r2,16
 8025364:	18001a1e 	bne	r3,zero,80253d0 <alt_exception_cause_generated_bad_addr+0x88>
 8025368:	100690ba 	slli	r3,r2,2
 802536c:	008200b4 	movhi	r2,2050
 8025370:	1094e004 	addi	r2,r2,21376
 8025374:	1885883a 	add	r2,r3,r2
 8025378:	10800017 	ldw	r2,0(r2)
 802537c:	1000683a 	jmp	r2
 8025380:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
 8025384:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
 8025388:	080253d0 	cmplti	zero,at,2383
 802538c:	080253d0 	cmplti	zero,at,2383
 8025390:	080253d0 	cmplti	zero,at,2383
 8025394:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
 8025398:	080253c8 	cmpgei	zero,at,2383
 802539c:	080253d0 	cmplti	zero,at,2383
 80253a0:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
 80253a4:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
 80253a8:	080253d0 	cmplti	zero,at,2383
 80253ac:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
 80253b0:	080253c8 	cmpgei	zero,at,2383
 80253b4:	080253d0 	cmplti	zero,at,2383
 80253b8:	080253d0 	cmplti	zero,at,2383
 80253bc:	080253c0 	call	80253c <__alt_mem_new_sdram_controller_0-0x37fdac4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80253c0:	00800044 	movi	r2,1
 80253c4:	00000306 	br	80253d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80253c8:	0005883a 	mov	r2,zero
 80253cc:	00000106 	br	80253d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80253d0:	0005883a 	mov	r2,zero
  }
}
 80253d4:	e037883a 	mov	sp,fp
 80253d8:	df000017 	ldw	fp,0(sp)
 80253dc:	dec00104 	addi	sp,sp,4
 80253e0:	f800283a 	ret

080253e4 <atexit>:
 80253e4:	200b883a 	mov	r5,r4
 80253e8:	000f883a 	mov	r7,zero
 80253ec:	000d883a 	mov	r6,zero
 80253f0:	0009883a 	mov	r4,zero
 80253f4:	80254ac1 	jmpi	80254ac <__register_exitproc>

080253f8 <exit>:
 80253f8:	defffe04 	addi	sp,sp,-8
 80253fc:	000b883a 	mov	r5,zero
 8025400:	dc000015 	stw	r16,0(sp)
 8025404:	dfc00115 	stw	ra,4(sp)
 8025408:	2021883a 	mov	r16,r4
 802540c:	80255c40 	call	80255c4 <__call_exitprocs>
 8025410:	008200b4 	movhi	r2,2050
 8025414:	109c7f04 	addi	r2,r2,29180
 8025418:	11000017 	ldw	r4,0(r2)
 802541c:	20800f17 	ldw	r2,60(r4)
 8025420:	10000126 	beq	r2,zero,8025428 <exit+0x30>
 8025424:	103ee83a 	callr	r2
 8025428:	8009883a 	mov	r4,r16
 802542c:	80257440 	call	8025744 <_exit>

08025430 <memcmp>:
 8025430:	01c000c4 	movi	r7,3
 8025434:	3980192e 	bgeu	r7,r6,802549c <memcmp+0x6c>
 8025438:	2144b03a 	or	r2,r4,r5
 802543c:	11c4703a 	and	r2,r2,r7
 8025440:	10000f26 	beq	r2,zero,8025480 <memcmp+0x50>
 8025444:	20800003 	ldbu	r2,0(r4)
 8025448:	28c00003 	ldbu	r3,0(r5)
 802544c:	10c0151e 	bne	r2,r3,80254a4 <memcmp+0x74>
 8025450:	31bfff84 	addi	r6,r6,-2
 8025454:	01ffffc4 	movi	r7,-1
 8025458:	00000406 	br	802546c <memcmp+0x3c>
 802545c:	20800003 	ldbu	r2,0(r4)
 8025460:	28c00003 	ldbu	r3,0(r5)
 8025464:	31bfffc4 	addi	r6,r6,-1
 8025468:	10c00e1e 	bne	r2,r3,80254a4 <memcmp+0x74>
 802546c:	21000044 	addi	r4,r4,1
 8025470:	29400044 	addi	r5,r5,1
 8025474:	31fff91e 	bne	r6,r7,802545c <__alt_data_end+0xfffe605c>
 8025478:	0005883a 	mov	r2,zero
 802547c:	f800283a 	ret
 8025480:	20c00017 	ldw	r3,0(r4)
 8025484:	28800017 	ldw	r2,0(r5)
 8025488:	18bfee1e 	bne	r3,r2,8025444 <__alt_data_end+0xfffe6044>
 802548c:	31bfff04 	addi	r6,r6,-4
 8025490:	21000104 	addi	r4,r4,4
 8025494:	29400104 	addi	r5,r5,4
 8025498:	39bff936 	bltu	r7,r6,8025480 <__alt_data_end+0xfffe6080>
 802549c:	303fe91e 	bne	r6,zero,8025444 <__alt_data_end+0xfffe6044>
 80254a0:	003ff506 	br	8025478 <__alt_data_end+0xfffe6078>
 80254a4:	10c5c83a 	sub	r2,r2,r3
 80254a8:	f800283a 	ret

080254ac <__register_exitproc>:
 80254ac:	defffa04 	addi	sp,sp,-24
 80254b0:	dc000315 	stw	r16,12(sp)
 80254b4:	040200b4 	movhi	r16,2050
 80254b8:	841c7f04 	addi	r16,r16,29180
 80254bc:	80c00017 	ldw	r3,0(r16)
 80254c0:	dc400415 	stw	r17,16(sp)
 80254c4:	dfc00515 	stw	ra,20(sp)
 80254c8:	18805217 	ldw	r2,328(r3)
 80254cc:	2023883a 	mov	r17,r4
 80254d0:	10003726 	beq	r2,zero,80255b0 <__register_exitproc+0x104>
 80254d4:	10c00117 	ldw	r3,4(r2)
 80254d8:	010007c4 	movi	r4,31
 80254dc:	20c00e16 	blt	r4,r3,8025518 <__register_exitproc+0x6c>
 80254e0:	1a000044 	addi	r8,r3,1
 80254e4:	8800221e 	bne	r17,zero,8025570 <__register_exitproc+0xc4>
 80254e8:	18c00084 	addi	r3,r3,2
 80254ec:	18c7883a 	add	r3,r3,r3
 80254f0:	18c7883a 	add	r3,r3,r3
 80254f4:	12000115 	stw	r8,4(r2)
 80254f8:	10c7883a 	add	r3,r2,r3
 80254fc:	19400015 	stw	r5,0(r3)
 8025500:	0005883a 	mov	r2,zero
 8025504:	dfc00517 	ldw	ra,20(sp)
 8025508:	dc400417 	ldw	r17,16(sp)
 802550c:	dc000317 	ldw	r16,12(sp)
 8025510:	dec00604 	addi	sp,sp,24
 8025514:	f800283a 	ret
 8025518:	00800034 	movhi	r2,0
 802551c:	10800004 	addi	r2,r2,0
 8025520:	10002626 	beq	r2,zero,80255bc <__register_exitproc+0x110>
 8025524:	01006404 	movi	r4,400
 8025528:	d9400015 	stw	r5,0(sp)
 802552c:	d9800115 	stw	r6,4(sp)
 8025530:	d9c00215 	stw	r7,8(sp)
 8025534:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8025538:	d9400017 	ldw	r5,0(sp)
 802553c:	d9800117 	ldw	r6,4(sp)
 8025540:	d9c00217 	ldw	r7,8(sp)
 8025544:	10001d26 	beq	r2,zero,80255bc <__register_exitproc+0x110>
 8025548:	81000017 	ldw	r4,0(r16)
 802554c:	10000115 	stw	zero,4(r2)
 8025550:	02000044 	movi	r8,1
 8025554:	22405217 	ldw	r9,328(r4)
 8025558:	0007883a 	mov	r3,zero
 802555c:	12400015 	stw	r9,0(r2)
 8025560:	20805215 	stw	r2,328(r4)
 8025564:	10006215 	stw	zero,392(r2)
 8025568:	10006315 	stw	zero,396(r2)
 802556c:	883fde26 	beq	r17,zero,80254e8 <__alt_data_end+0xfffe60e8>
 8025570:	18c9883a 	add	r4,r3,r3
 8025574:	2109883a 	add	r4,r4,r4
 8025578:	1109883a 	add	r4,r2,r4
 802557c:	21802215 	stw	r6,136(r4)
 8025580:	01800044 	movi	r6,1
 8025584:	12406217 	ldw	r9,392(r2)
 8025588:	30cc983a 	sll	r6,r6,r3
 802558c:	4992b03a 	or	r9,r9,r6
 8025590:	12406215 	stw	r9,392(r2)
 8025594:	21c04215 	stw	r7,264(r4)
 8025598:	01000084 	movi	r4,2
 802559c:	893fd21e 	bne	r17,r4,80254e8 <__alt_data_end+0xfffe60e8>
 80255a0:	11006317 	ldw	r4,396(r2)
 80255a4:	218cb03a 	or	r6,r4,r6
 80255a8:	11806315 	stw	r6,396(r2)
 80255ac:	003fce06 	br	80254e8 <__alt_data_end+0xfffe60e8>
 80255b0:	18805304 	addi	r2,r3,332
 80255b4:	18805215 	stw	r2,328(r3)
 80255b8:	003fc606 	br	80254d4 <__alt_data_end+0xfffe60d4>
 80255bc:	00bfffc4 	movi	r2,-1
 80255c0:	003fd006 	br	8025504 <__alt_data_end+0xfffe6104>

080255c4 <__call_exitprocs>:
 80255c4:	defff504 	addi	sp,sp,-44
 80255c8:	df000915 	stw	fp,36(sp)
 80255cc:	dd400615 	stw	r21,24(sp)
 80255d0:	dc800315 	stw	r18,12(sp)
 80255d4:	dfc00a15 	stw	ra,40(sp)
 80255d8:	ddc00815 	stw	r23,32(sp)
 80255dc:	dd800715 	stw	r22,28(sp)
 80255e0:	dd000515 	stw	r20,20(sp)
 80255e4:	dcc00415 	stw	r19,16(sp)
 80255e8:	dc400215 	stw	r17,8(sp)
 80255ec:	dc000115 	stw	r16,4(sp)
 80255f0:	d9000015 	stw	r4,0(sp)
 80255f4:	2839883a 	mov	fp,r5
 80255f8:	04800044 	movi	r18,1
 80255fc:	057fffc4 	movi	r21,-1
 8025600:	008200b4 	movhi	r2,2050
 8025604:	109c7f04 	addi	r2,r2,29180
 8025608:	12000017 	ldw	r8,0(r2)
 802560c:	45005217 	ldw	r20,328(r8)
 8025610:	44c05204 	addi	r19,r8,328
 8025614:	a0001c26 	beq	r20,zero,8025688 <__call_exitprocs+0xc4>
 8025618:	a0800117 	ldw	r2,4(r20)
 802561c:	15ffffc4 	addi	r23,r2,-1
 8025620:	b8000d16 	blt	r23,zero,8025658 <__call_exitprocs+0x94>
 8025624:	14000044 	addi	r16,r2,1
 8025628:	8421883a 	add	r16,r16,r16
 802562c:	8421883a 	add	r16,r16,r16
 8025630:	84402004 	addi	r17,r16,128
 8025634:	a463883a 	add	r17,r20,r17
 8025638:	a421883a 	add	r16,r20,r16
 802563c:	e0001e26 	beq	fp,zero,80256b8 <__call_exitprocs+0xf4>
 8025640:	80804017 	ldw	r2,256(r16)
 8025644:	e0801c26 	beq	fp,r2,80256b8 <__call_exitprocs+0xf4>
 8025648:	bdffffc4 	addi	r23,r23,-1
 802564c:	843fff04 	addi	r16,r16,-4
 8025650:	8c7fff04 	addi	r17,r17,-4
 8025654:	bd7ff91e 	bne	r23,r21,802563c <__alt_data_end+0xfffe623c>
 8025658:	00800034 	movhi	r2,0
 802565c:	10800004 	addi	r2,r2,0
 8025660:	10000926 	beq	r2,zero,8025688 <__call_exitprocs+0xc4>
 8025664:	a0800117 	ldw	r2,4(r20)
 8025668:	1000301e 	bne	r2,zero,802572c <__call_exitprocs+0x168>
 802566c:	a0800017 	ldw	r2,0(r20)
 8025670:	10003226 	beq	r2,zero,802573c <__call_exitprocs+0x178>
 8025674:	a009883a 	mov	r4,r20
 8025678:	98800015 	stw	r2,0(r19)
 802567c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8025680:	9d000017 	ldw	r20,0(r19)
 8025684:	a03fe41e 	bne	r20,zero,8025618 <__alt_data_end+0xfffe6218>
 8025688:	dfc00a17 	ldw	ra,40(sp)
 802568c:	df000917 	ldw	fp,36(sp)
 8025690:	ddc00817 	ldw	r23,32(sp)
 8025694:	dd800717 	ldw	r22,28(sp)
 8025698:	dd400617 	ldw	r21,24(sp)
 802569c:	dd000517 	ldw	r20,20(sp)
 80256a0:	dcc00417 	ldw	r19,16(sp)
 80256a4:	dc800317 	ldw	r18,12(sp)
 80256a8:	dc400217 	ldw	r17,8(sp)
 80256ac:	dc000117 	ldw	r16,4(sp)
 80256b0:	dec00b04 	addi	sp,sp,44
 80256b4:	f800283a 	ret
 80256b8:	a0800117 	ldw	r2,4(r20)
 80256bc:	80c00017 	ldw	r3,0(r16)
 80256c0:	10bfffc4 	addi	r2,r2,-1
 80256c4:	15c01426 	beq	r2,r23,8025718 <__call_exitprocs+0x154>
 80256c8:	80000015 	stw	zero,0(r16)
 80256cc:	183fde26 	beq	r3,zero,8025648 <__alt_data_end+0xfffe6248>
 80256d0:	95c8983a 	sll	r4,r18,r23
 80256d4:	a0806217 	ldw	r2,392(r20)
 80256d8:	a5800117 	ldw	r22,4(r20)
 80256dc:	2084703a 	and	r2,r4,r2
 80256e0:	10000b26 	beq	r2,zero,8025710 <__call_exitprocs+0x14c>
 80256e4:	a0806317 	ldw	r2,396(r20)
 80256e8:	2088703a 	and	r4,r4,r2
 80256ec:	20000c1e 	bne	r4,zero,8025720 <__call_exitprocs+0x15c>
 80256f0:	89400017 	ldw	r5,0(r17)
 80256f4:	d9000017 	ldw	r4,0(sp)
 80256f8:	183ee83a 	callr	r3
 80256fc:	a0800117 	ldw	r2,4(r20)
 8025700:	15bfbf1e 	bne	r2,r22,8025600 <__alt_data_end+0xfffe6200>
 8025704:	98800017 	ldw	r2,0(r19)
 8025708:	153fcf26 	beq	r2,r20,8025648 <__alt_data_end+0xfffe6248>
 802570c:	003fbc06 	br	8025600 <__alt_data_end+0xfffe6200>
 8025710:	183ee83a 	callr	r3
 8025714:	003ff906 	br	80256fc <__alt_data_end+0xfffe62fc>
 8025718:	a5c00115 	stw	r23,4(r20)
 802571c:	003feb06 	br	80256cc <__alt_data_end+0xfffe62cc>
 8025720:	89000017 	ldw	r4,0(r17)
 8025724:	183ee83a 	callr	r3
 8025728:	003ff406 	br	80256fc <__alt_data_end+0xfffe62fc>
 802572c:	a0800017 	ldw	r2,0(r20)
 8025730:	a027883a 	mov	r19,r20
 8025734:	1029883a 	mov	r20,r2
 8025738:	003fb606 	br	8025614 <__alt_data_end+0xfffe6214>
 802573c:	0005883a 	mov	r2,zero
 8025740:	003ffb06 	br	8025730 <__alt_data_end+0xfffe6330>

08025744 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8025744:	defffd04 	addi	sp,sp,-12
 8025748:	df000215 	stw	fp,8(sp)
 802574c:	df000204 	addi	fp,sp,8
 8025750:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8025754:	0001883a 	nop
 8025758:	e0bfff17 	ldw	r2,-4(fp)
 802575c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8025760:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8025764:	10000226 	beq	r2,zero,8025770 <_exit+0x2c>
    ALT_SIM_FAIL();
 8025768:	002af070 	cmpltui	zero,zero,43969
 802576c:	00000106 	br	8025774 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8025770:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8025774:	003fff06 	br	8025774 <__alt_data_end+0xfffe6374>
