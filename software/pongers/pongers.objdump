
pongers.elf:     file format elf32-littlenios2
pongers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08040230

Program Header:
    LOAD off    0x00001000 vaddr 0x08040000 paddr 0x08040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08040020 paddr 0x08040020 align 2**12
         filesz 0x00007a74 memsz 0x00007a74 flags r-x
    LOAD off    0x00008a94 vaddr 0x08047a94 paddr 0x08049554 align 2**12
         filesz 0x00001ac0 memsz 0x00001ac0 flags rw-
    LOAD off    0x0000b014 vaddr 0x0804b014 paddr 0x0804b014 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08040000  08040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08040020  08040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007784  08040230  08040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e0  080479b4  080479b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac0  08047a94  08049554  00008a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  0804b014  0804b014  0000b014  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  0000a554  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0804b180  0804b180  0000a554  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  0000a554  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ad0  00000000  00000000  0000a5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017cc0  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006529  00000000  00000000  00022d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000733c  00000000  00000000  00029259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000019e4  00000000  00000000  00030598  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c9c  00000000  00000000  00031f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004b72  00000000  00000000  00034c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0003978c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003c8a2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  0003c8a5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003c8ae  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003c8af  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003c8b0  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003c8b4  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003c8b8  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003c8bc  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0003c8c7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0003c8d2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0003c8dd  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0003c8e6  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d27  00000000  00000000  0003c90c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00073956  00000000  00000000  00040633  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08040000 l    d  .entry	00000000 .entry
08040020 l    d  .exceptions	00000000 .exceptions
08040230 l    d  .text	00000000 .text
080479b4 l    d  .rodata	00000000 .rodata
08047a94 l    d  .rwdata	00000000 .rwdata
0804b014 l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0804b180 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pongers_bsp//obj/HAL/src/crt0.o
08040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gameutil.c
00000000 l    df *ABS*	00000000 pongers.c
08040e34 l     F .text	0000003c alarm_callback.2962
0804b040 l     O .bss	00000018 alarm.2964
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 tramp.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
080412bc l     F .text	00000008 __fp_unlock
080412d0 l     F .text	0000019c __sinit.part.1
0804146c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08047a94 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08044060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08044174 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080441a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08044294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0804437c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08044468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08044644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08049544 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08044a8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08044bc8 l     F .text	00000034 alt_dev_reg
08048468 l     O .rwdata	00001060 jtag_uart_0
080494c8 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08045098 l     F .text	0000020c altera_avalon_jtag_uart_irq
080452a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080458dc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08046ac0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08046fb0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08047110 l     F .text	0000003c alt_get_errno
0804714c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0804b03c g     O .bss	00000004 alt_instruction_exception_handler
08043d2c g     F .text	00000054 _isatty_r
08044580 g     F .text	0000007c alt_main
0804630c g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
08041150 g     F .text	000000c0 _puts_r
0804b080 g     O .bss	00000100 alt_irq
08043a54 g     F .text	00000060 _lseek_r
08049554 g       *ABS*	00000000 __flash_rwdata_start
0804b180 g       *ABS*	00000000 __alt_heap_start
08043008 g     F .text	0000005c __sseek
0804161c g     F .text	00000010 __sinit
08041474 g     F .text	00000078 __sfmoreglue
08044620 g     F .text	00000024 __malloc_unlock
080426f4 g     F .text	0000015c memmove
08041604 g     F .text	00000018 _cleanup
08045a0c g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
08047394 g     F .text	00000024 altera_nios2_gen2_irq_init
080459d0 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08040000 g     F .entry	0000000c __reset
08040020 g       *ABS*	00000000 __flash_exceptions_start
08043cd0 g     F .text	0000005c _fstat_r
0804b020 g     O .bss	00000004 errno
08042f84 g     F .text	00000008 __seofread
0804b028 g     O .bss	00000004 alt_argv
0805151c g       *ABS*	00000000 _gp
08044a5c g     F .text	00000030 usleep
08045bb4 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
080482e8 g     O .rwdata	00000180 alt_fd_list
08046c60 g     F .text	00000090 alt_find_dev
080425ac g     F .text	00000148 memcpy
080412c4 g     F .text	0000000c _cleanup_r
08047094 g     F .text	0000007c alt_io_redirect
080479b4 g       *ABS*	00000000 __DTOR_END__
08041210 g     F .text	00000014 puts
08047584 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080404ec g     F .text	000006bc update_rect
08045c70 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0804549c g     F .text	0000021c altera_avalon_jtag_uart_read
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08043e78 g     F .text	00000064 .hidden __udivsi3
080442d0 g     F .text	000000ac isatty
080460dc g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
0804b01c g     O .bss	00000004 __malloc_top_pad
0804166c g     F .text	000004c8 __sfvwrite_r
08042edc g     F .text	00000054 _sbrk_r
08046640 g     F .text	000000c0 helper_plot_pixel
08043c70 g     F .text	00000060 _read_r
0804953c g     O .rwdata	00000004 alt_max_fd
08043274 g     F .text	000000f0 _fclose_r
080435f0 g     F .text	00000030 fflush
0804b018 g     O .bss	00000004 __malloc_max_sbrked_mem
08045ca4 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
080444a4 g     F .text	000000dc lseek
0804951c g     O .rwdata	00000004 _global_impure_ptr
08042978 g     F .text	00000564 _realloc_r
0804b180 g       *ABS*	00000000 __bss_end
08046ec0 g     F .text	000000f0 alt_iic_isr_register
08045de0 g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
08044954 g     F .text	00000108 alt_tick
0804163c g     F .text	00000018 __fp_lock_all
08046e74 g     F .text	0000004c alt_ic_irq_enabled
080448b8 g     F .text	0000009c alt_alarm_stop
0804b038 g     O .bss	00000004 alt_irq_active
080400fc g     F .exceptions	000000d4 alt_irq_handler
080482c0 g     O .rwdata	00000028 alt_dev_null
08046aa0 g     F .text	00000020 alt_dcache_flush_all
08046578 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
08049554 g       *ABS*	00000000 __ram_rwdata_end
08049534 g     O .rwdata	00000008 alt_dev_list
08044ac8 g     F .text	00000100 write
08046700 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
08047a94 g       *ABS*	00000000 __ram_rodata_end
080441dc g     F .text	000000b8 fstat
08040ba8 g     F .text	0000003c clear
08043edc g     F .text	00000058 .hidden __umodsi3
0804b180 g       *ABS*	00000000 end
08044fd8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080410c4 g     F .text	0000008c .hidden __trampoline_setup
080479b4 g       *ABS*	00000000 __CTOR_LIST__
0805f400 g       *ABS*	00000000 __alt_stack_pointer
08045954 g     F .text	0000007c alt_avalon_timer_sc_init
080456b8 g     F .text	00000224 altera_avalon_jtag_uart_write
0804162c g     F .text	00000004 __sfp_lock_acquire
080424c8 g     F .text	000000e4 memchr
08043744 g     F .text	00000310 _free_r
08047800 g     F .text	00000180 __call_exitprocs
08049524 g     O .rwdata	00000004 __malloc_sbrk_base
08040230 g     F .text	0000003c _start
0804b030 g     O .bss	00000004 _alt_tick_rate
0804b034 g     O .bss	00000004 _alt_nticks
08044680 g     F .text	00000104 read
08044c34 g     F .text	00000240 alt_sys_init
080476e8 g     F .text	00000118 __register_exitproc
08045344 g     F .text	00000068 altera_avalon_jtag_uart_close
0804109c g     F .text	00000028 .hidden __mulsi3
08047a94 g       *ABS*	00000000 __ram_rwdata_start
080479b4 g       *ABS*	00000000 __ram_rodata_start
0804b058 g     O .bss	00000028 __malloc_current_mallinfo
0804026c g     F .text	00000280 update_paddle
08044e74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080474c0 g     F .text	000000c4 alt_get_fd
08046948 g     F .text	00000158 alt_busy_sleep
08043220 g     F .text	00000054 _close_r
0804766c g     F .text	0000007c memcmp
08044f34 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0804b180 g       *ABS*	00000000 __alt_stack_base
08044f84 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080430cc g     F .text	00000154 __swsetup_r
080414ec g     F .text	00000118 __sfp
08047eb8 g     O .rwdata	00000408 __malloc_av_
08041638 g     F .text	00000004 __sinit_lock_release
08042f30 g     F .text	00000054 __sread
080473b8 g     F .text	00000108 alt_find_file
08046afc g     F .text	000000a4 alt_dev_llist_insert
080445fc g     F .text	00000024 __malloc_lock
08044808 g     F .text	000000b0 sbrk
08043594 g     F .text	0000005c _fflush_r
0804b014 g       *ABS*	00000000 __bss_start
08042850 g     F .text	00000128 memset
08040e70 g     F .text	0000022c main
0804b02c g     O .bss	00000004 alt_envp
0804b014 g     O .bss	00000004 __malloc_max_total_mem
08045c10 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08044ed4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08043064 g     F .text	00000008 __sclose
0805f400 g       *ABS*	00000000 __alt_heap_limit
08043364 g     F .text	00000014 fclose
08041cbc g     F .text	0000080c _malloc_r
08049540 g     O .rwdata	00000004 alt_errno
08041b34 g     F .text	000000c4 _fwalk
08043d80 g     F .text	00000084 .hidden __divsi3
08043620 g     F .text	00000124 _malloc_trim_r
080479b4 g       *ABS*	00000000 __CTOR_END__
080479b4 g       *ABS*	00000000 __flash_rodata_start
080479b4 g       *ABS*	00000000 __DTOR_LIST__
08044bfc g     F .text	00000038 alt_irq_init
08044784 g     F .text	00000084 alt_release_fd
08047620 g     F .text	00000014 atexit
0804306c g     F .text	00000060 _write_r
08049520 g     O .rwdata	00000004 _impure_ptr
0804b024 g     O .bss	00000004 alt_argc
08043378 g     F .text	0000021c __sflush_r
08046c00 g     F .text	00000060 _do_dtors
08040020 g       .exceptions	00000000 alt_irq_entry
08041654 g     F .text	00000018 __fp_unlock_all
0804952c g     O .rwdata	00000008 alt_fs_list
08040020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08046d10 g     F .text	00000050 alt_ic_isr_register
08049554 g       *ABS*	00000000 _edata
0804b180 g       *ABS*	00000000 _end
08040230 g       *ABS*	00000000 __ram_exceptions_end
080453ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08046de8 g     F .text	0000008c alt_ic_irq_disable
08042f8c g     F .text	0000007c __swrite
08049528 g     O .rwdata	00000004 __malloc_trim_threshold
08047634 g     F .text	00000038 exit
08041bf8 g     F .text	000000c4 _fwalk_reent
08043e04 g     F .text	00000074 .hidden __modsi3
0805f400 g       *ABS*	00000000 __alt_data_end
08040020 g     F .exceptions	00000000 alt_exception
08041630 g     F .text	00000004 __sfp_lock_release
08040be4 g     F .text	00000180 draw
08047980 g     F .text	00000034 _exit
08043f34 g     F .text	0000012c alt_alarm_start
08043ab4 g     F .text	000001bc __smakebuf_r
08041224 g     F .text	00000098 strlen
08047238 g     F .text	0000015c open
08046cf0 g     F .text	00000020 alt_icache_flush_all
08049550 g     O .rwdata	00000004 alt_priority_mask
08046d60 g     F .text	00000088 alt_ic_irq_enable
08049548 g     O .rwdata	00000008 alt_alarm_list
08040d64 g     F .text	000000d0 run_game_tick
08046ba0 g     F .text	00000060 _do_ctors
0804409c g     F .text	000000d8 close
080443e4 g     F .text	00000084 alt_load
08041634 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8040000:	00420134 	movhi	at,2052
    ori r1, r1, %lo(_start)
 8040004:	08408c14 	ori	at,at,560
    jmp r1
 8040008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 804002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 804003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 804004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 804005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 804006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 804007c:	10000326 	beq	r2,zero,804008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8040080:	20000226 	beq	r4,zero,804008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8040084:	80400fc0 	call	80400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8040088:	00000706 	br	80400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 804008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8040098:	80401d00 	call	80401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 804009c:	1000021e 	bne	r2,zero,80400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80400f8:	ef80083a 	eret

080400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80400fc:	defff904 	addi	sp,sp,-28
 8040100:	dfc00615 	stw	ra,24(sp)
 8040104:	df000515 	stw	fp,20(sp)
 8040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 804010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040110:	0005313a 	rdctl	r2,ipending
 8040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 804011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8040124:	00800044 	movi	r2,1
 8040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 804012c:	e0fffb17 	ldw	r3,-20(fp)
 8040130:	e0bffc17 	ldw	r2,-16(fp)
 8040134:	1884703a 	and	r2,r3,r2
 8040138:	10001426 	beq	r2,zero,804018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 804013c:	00820174 	movhi	r2,2053
 8040140:	10ac2004 	addi	r2,r2,-20352
 8040144:	e0fffd17 	ldw	r3,-12(fp)
 8040148:	180690fa 	slli	r3,r3,3
 804014c:	10c5883a 	add	r2,r2,r3
 8040150:	10c00017 	ldw	r3,0(r2)
 8040154:	00820174 	movhi	r2,2053
 8040158:	10ac2004 	addi	r2,r2,-20352
 804015c:	e13ffd17 	ldw	r4,-12(fp)
 8040160:	200890fa 	slli	r4,r4,3
 8040164:	1105883a 	add	r2,r2,r4
 8040168:	10800104 	addi	r2,r2,4
 804016c:	10800017 	ldw	r2,0(r2)
 8040170:	1009883a 	mov	r4,r2
 8040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 804017c:	0005313a 	rdctl	r2,ipending
 8040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8040184:	e0bfff17 	ldw	r2,-4(fp)
 8040188:	00000706 	br	80401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 804018c:	e0bffc17 	ldw	r2,-16(fp)
 8040190:	1085883a 	add	r2,r2,r2
 8040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8040198:	e0bffd17 	ldw	r2,-12(fp)
 804019c:	10800044 	addi	r2,r2,1
 80401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80401a4:	003fe106 	br	804012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
 80401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80401ac:	e0bffb17 	ldw	r2,-20(fp)
 80401b0:	103fdb1e 	bne	r2,zero,8040120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80401b4:	0001883a 	nop
}
 80401b8:	0001883a 	nop
 80401bc:	e037883a 	mov	sp,fp
 80401c0:	dfc00117 	ldw	ra,4(sp)
 80401c4:	df000017 	ldw	fp,0(sp)
 80401c8:	dec00204 	addi	sp,sp,8
 80401cc:	f800283a 	ret

080401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80401d0:	defffb04 	addi	sp,sp,-20
 80401d4:	dfc00415 	stw	ra,16(sp)
 80401d8:	df000315 	stw	fp,12(sp)
 80401dc:	df000304 	addi	fp,sp,12
 80401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80401e4:	00bfffc4 	movi	r2,-1
 80401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80401f0:	d0a6c817 	ldw	r2,-25824(gp)
 80401f4:	10000726 	beq	r2,zero,8040214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80401f8:	d0a6c817 	ldw	r2,-25824(gp)
 80401fc:	e0fffd17 	ldw	r3,-12(fp)
 8040200:	e1bffe17 	ldw	r6,-8(fp)
 8040204:	e17fff17 	ldw	r5,-4(fp)
 8040208:	1809883a 	mov	r4,r3
 804020c:	103ee83a 	callr	r2
 8040210:	00000206 	br	804021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8040214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8040218:	0005883a 	mov	r2,zero
}
 804021c:	e037883a 	mov	sp,fp
 8040220:	dfc00117 	ldw	ra,4(sp)
 8040224:	df000017 	ldw	fp,0(sp)
 8040228:	dec00204 	addi	sp,sp,8
 804022c:	f800283a 	ret

Disassembly of section .text:

08040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8040230:	06c20174 	movhi	sp,2053
    ori sp, sp, %lo(__alt_stack_pointer)
 8040234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
 8040238:	06820174 	movhi	gp,2053
    ori gp, gp, %lo(_gp)
 804023c:	d6854714 	ori	gp,gp,5404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8040240:	00820134 	movhi	r2,2052
    ori r2, r2, %lo(__bss_start)
 8040244:	10ac0514 	ori	r2,r2,45076

    movhi r3, %hi(__bss_end)
 8040248:	00c20134 	movhi	r3,2052
    ori r3, r3, %lo(__bss_end)
 804024c:	18ec6014 	ori	r3,r3,45440

    beq r2, r3, 1f
 8040250:	10c00326 	beq	r2,r3,8040260 <_start+0x30>

0:
    stw zero, (r2)
 8040254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8040258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 804025c:	10fffd36 	bltu	r2,r3,8040254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8040260:	80443e40 	call	80443e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8040264:	80445800 	call	8044580 <alt_main>

08040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8040268:	003fff06 	br	8040268 <__alt_data_end+0xfffe0e68>

0804026c <update_paddle>:
#include "gameutil.h"


// Updates paddle positions
// There must be at least 2 paddles in the paddle[] array
void update_paddle(Rectangle paddle[], int len) {
 804026c:	defff604 	addi	sp,sp,-40
 8040270:	dfc00915 	stw	ra,36(sp)
 8040274:	df000815 	stw	fp,32(sp)
 8040278:	dc400715 	stw	r17,28(sp)
 804027c:	dc000615 	stw	r16,24(sp)
 8040280:	df000804 	addi	fp,sp,32
 8040284:	e13ffc15 	stw	r4,-16(fp)
 8040288:	e17ffd15 	stw	r5,-12(fp)
	// Adjust speed according to user input
	int SW = IORD(SW_BASE, 0);
 804028c:	00820234 	movhi	r2,2056
 8040290:	10841404 	addi	r2,r2,4176
 8040294:	10800037 	ldwio	r2,0(r2)
 8040298:	e0bff915 	stw	r2,-28(fp)
	int SW_0 = 0b00000001 & SW;
 804029c:	e0bff917 	ldw	r2,-28(fp)
 80402a0:	1080004c 	andi	r2,r2,1
 80402a4:	e0bffa15 	stw	r2,-24(fp)
	int SW_1 = 0b00000010 & SW;
 80402a8:	e0bff917 	ldw	r2,-28(fp)
 80402ac:	1080008c 	andi	r2,r2,2
 80402b0:	e0bffb15 	stw	r2,-20(fp)
	if(SW_0) // SW_0 is on (left paddle)
 80402b4:	e0bffa17 	ldw	r2,-24(fp)
 80402b8:	10000426 	beq	r2,zero,80402cc <update_paddle+0x60>
		paddle[0].yspeed = -PADDLE_SPEED;
 80402bc:	e0bffc17 	ldw	r2,-16(fp)
 80402c0:	00ffff84 	movi	r3,-2
 80402c4:	10c00315 	stw	r3,12(r2)
 80402c8:	00000306 	br	80402d8 <update_paddle+0x6c>
	else
		paddle[0].yspeed = PADDLE_SPEED;
 80402cc:	e0bffc17 	ldw	r2,-16(fp)
 80402d0:	00c00084 	movi	r3,2
 80402d4:	10c00315 	stw	r3,12(r2)
	if(SW_1) // SW_1 is on (right paddle)
 80402d8:	e0bffb17 	ldw	r2,-20(fp)
 80402dc:	10000526 	beq	r2,zero,80402f4 <update_paddle+0x88>
		paddle[1].yspeed = -PADDLE_SPEED;
 80402e0:	e0bffc17 	ldw	r2,-16(fp)
 80402e4:	10800704 	addi	r2,r2,28
 80402e8:	00ffff84 	movi	r3,-2
 80402ec:	10c00315 	stw	r3,12(r2)
 80402f0:	00000406 	br	8040304 <update_paddle+0x98>
	else
		paddle[1].yspeed = PADDLE_SPEED;
 80402f4:	e0bffc17 	ldw	r2,-16(fp)
 80402f8:	10800704 	addi	r2,r2,28
 80402fc:	00c00084 	movi	r3,2
 8040300:	10c00315 	stw	r3,12(r2)
	// Adjust paddle positions
	for(int i = 0; i< len; i++) {
 8040304:	e03ff815 	stw	zero,-32(fp)
 8040308:	00006d06 	br	80404c0 <update_paddle+0x254>
		// Update position
		paddle[i].y += paddle[i].yspeed;
 804030c:	e0bff817 	ldw	r2,-32(fp)
 8040310:	01400704 	movi	r5,28
 8040314:	1009883a 	mov	r4,r2
 8040318:	804109c0 	call	804109c <__mulsi3>
 804031c:	1007883a 	mov	r3,r2
 8040320:	e0bffc17 	ldw	r2,-16(fp)
 8040324:	10e1883a 	add	r16,r2,r3
 8040328:	e0bff817 	ldw	r2,-32(fp)
 804032c:	01400704 	movi	r5,28
 8040330:	1009883a 	mov	r4,r2
 8040334:	804109c0 	call	804109c <__mulsi3>
 8040338:	1007883a 	mov	r3,r2
 804033c:	e0bffc17 	ldw	r2,-16(fp)
 8040340:	10c5883a 	add	r2,r2,r3
 8040344:	14400117 	ldw	r17,4(r2)
 8040348:	e0bff817 	ldw	r2,-32(fp)
 804034c:	01400704 	movi	r5,28
 8040350:	1009883a 	mov	r4,r2
 8040354:	804109c0 	call	804109c <__mulsi3>
 8040358:	1007883a 	mov	r3,r2
 804035c:	e0bffc17 	ldw	r2,-16(fp)
 8040360:	10c5883a 	add	r2,r2,r3
 8040364:	10800317 	ldw	r2,12(r2)
 8040368:	8885883a 	add	r2,r17,r2
 804036c:	80800115 	stw	r2,4(r16)
		paddle[0].x = 0;
 8040370:	e0bffc17 	ldw	r2,-16(fp)
 8040374:	10000015 	stw	zero,0(r2)
		paddle[1].x = SCREEN_WIDTH - paddle[1].width;
 8040378:	e0bffc17 	ldw	r2,-16(fp)
 804037c:	10800704 	addi	r2,r2,28
 8040380:	e0fffc17 	ldw	r3,-16(fp)
 8040384:	18c00704 	addi	r3,r3,28
 8040388:	18c00417 	ldw	r3,16(r3)
 804038c:	01005004 	movi	r4,320
 8040390:	20c7c83a 	sub	r3,r4,r3
 8040394:	10c00015 	stw	r3,0(r2)
		// Check for collisions
		if (paddle[i].y + paddle[i].height >= SCREEN_HEIGHT) {
 8040398:	e0bff817 	ldw	r2,-32(fp)
 804039c:	01400704 	movi	r5,28
 80403a0:	1009883a 	mov	r4,r2
 80403a4:	804109c0 	call	804109c <__mulsi3>
 80403a8:	1007883a 	mov	r3,r2
 80403ac:	e0bffc17 	ldw	r2,-16(fp)
 80403b0:	10c5883a 	add	r2,r2,r3
 80403b4:	14000117 	ldw	r16,4(r2)
 80403b8:	e0bff817 	ldw	r2,-32(fp)
 80403bc:	01400704 	movi	r5,28
 80403c0:	1009883a 	mov	r4,r2
 80403c4:	804109c0 	call	804109c <__mulsi3>
 80403c8:	1007883a 	mov	r3,r2
 80403cc:	e0bffc17 	ldw	r2,-16(fp)
 80403d0:	10c5883a 	add	r2,r2,r3
 80403d4:	10800517 	ldw	r2,20(r2)
 80403d8:	8085883a 	add	r2,r16,r2
 80403dc:	10803c10 	cmplti	r2,r2,240
 80403e0:	10001b1e 	bne	r2,zero,8040450 <update_paddle+0x1e4>
			paddle[i].y = SCREEN_HEIGHT - paddle[i].height;
 80403e4:	e0bff817 	ldw	r2,-32(fp)
 80403e8:	01400704 	movi	r5,28
 80403ec:	1009883a 	mov	r4,r2
 80403f0:	804109c0 	call	804109c <__mulsi3>
 80403f4:	1007883a 	mov	r3,r2
 80403f8:	e0bffc17 	ldw	r2,-16(fp)
 80403fc:	10e1883a 	add	r16,r2,r3
 8040400:	e0bff817 	ldw	r2,-32(fp)
 8040404:	01400704 	movi	r5,28
 8040408:	1009883a 	mov	r4,r2
 804040c:	804109c0 	call	804109c <__mulsi3>
 8040410:	1007883a 	mov	r3,r2
 8040414:	e0bffc17 	ldw	r2,-16(fp)
 8040418:	10c5883a 	add	r2,r2,r3
 804041c:	10800517 	ldw	r2,20(r2)
 8040420:	00c03c04 	movi	r3,240
 8040424:	1885c83a 	sub	r2,r3,r2
 8040428:	80800115 	stw	r2,4(r16)
			paddle[i].yspeed = 0;
 804042c:	e0bff817 	ldw	r2,-32(fp)
 8040430:	01400704 	movi	r5,28
 8040434:	1009883a 	mov	r4,r2
 8040438:	804109c0 	call	804109c <__mulsi3>
 804043c:	1007883a 	mov	r3,r2
 8040440:	e0bffc17 	ldw	r2,-16(fp)
 8040444:	10c5883a 	add	r2,r2,r3
 8040448:	10000315 	stw	zero,12(r2)
 804044c:	00001906 	br	80404b4 <update_paddle+0x248>
		}
		else if (paddle[i].y <= 0) {
 8040450:	e0bff817 	ldw	r2,-32(fp)
 8040454:	01400704 	movi	r5,28
 8040458:	1009883a 	mov	r4,r2
 804045c:	804109c0 	call	804109c <__mulsi3>
 8040460:	1007883a 	mov	r3,r2
 8040464:	e0bffc17 	ldw	r2,-16(fp)
 8040468:	10c5883a 	add	r2,r2,r3
 804046c:	10800117 	ldw	r2,4(r2)
 8040470:	00801016 	blt	zero,r2,80404b4 <update_paddle+0x248>
			paddle[i].y = 0;
 8040474:	e0bff817 	ldw	r2,-32(fp)
 8040478:	01400704 	movi	r5,28
 804047c:	1009883a 	mov	r4,r2
 8040480:	804109c0 	call	804109c <__mulsi3>
 8040484:	1007883a 	mov	r3,r2
 8040488:	e0bffc17 	ldw	r2,-16(fp)
 804048c:	10c5883a 	add	r2,r2,r3
 8040490:	10000115 	stw	zero,4(r2)
			paddle[i].yspeed = 0;
 8040494:	e0bff817 	ldw	r2,-32(fp)
 8040498:	01400704 	movi	r5,28
 804049c:	1009883a 	mov	r4,r2
 80404a0:	804109c0 	call	804109c <__mulsi3>
 80404a4:	1007883a 	mov	r3,r2
 80404a8:	e0bffc17 	ldw	r2,-16(fp)
 80404ac:	10c5883a 	add	r2,r2,r3
 80404b0:	10000315 	stw	zero,12(r2)
	if(SW_1) // SW_1 is on (right paddle)
		paddle[1].yspeed = -PADDLE_SPEED;
	else
		paddle[1].yspeed = PADDLE_SPEED;
	// Adjust paddle positions
	for(int i = 0; i< len; i++) {
 80404b4:	e0bff817 	ldw	r2,-32(fp)
 80404b8:	10800044 	addi	r2,r2,1
 80404bc:	e0bff815 	stw	r2,-32(fp)
 80404c0:	e0fff817 	ldw	r3,-32(fp)
 80404c4:	e0bffd17 	ldw	r2,-12(fp)
 80404c8:	18bf9016 	blt	r3,r2,804030c <__alt_data_end+0xfffe0f0c>
		else if (paddle[i].y <= 0) {
			paddle[i].y = 0;
			paddle[i].yspeed = 0;
		}
	}
}
 80404cc:	0001883a 	nop
 80404d0:	e6fffe04 	addi	sp,fp,-8
 80404d4:	dfc00317 	ldw	ra,12(sp)
 80404d8:	df000217 	ldw	fp,8(sp)
 80404dc:	dc400117 	ldw	r17,4(sp)
 80404e0:	dc000017 	ldw	r16,0(sp)
 80404e4:	dec00404 	addi	sp,sp,16
 80404e8:	f800283a 	ret

080404ec <update_rect>:
// Updates the position of each Rectangle object
// "bounces" each object upon collision with screen top/bottom edges
// or paddle objects
void update_rect(Rectangle rect[], Rectangle paddles[], int rect_len, int paddle_len, int* scores) {
 80404ec:	defff704 	addi	sp,sp,-36
 80404f0:	dfc00815 	stw	ra,32(sp)
 80404f4:	df000715 	stw	fp,28(sp)
 80404f8:	dc400615 	stw	r17,24(sp)
 80404fc:	dc000515 	stw	r16,20(sp)
 8040500:	df000704 	addi	fp,sp,28
 8040504:	e13ffa15 	stw	r4,-24(fp)
 8040508:	e17ffb15 	stw	r5,-20(fp)
 804050c:	e1bffc15 	stw	r6,-16(fp)
 8040510:	e1fffd15 	stw	r7,-12(fp)
	for(int i = 0; i< rect_len; i++) {
 8040514:	e03ff915 	stw	zero,-28(fp)
 8040518:	00019806 	br	8040b7c <update_rect+0x690>
		// Update position
		rect[i].x += rect[i].xspeed;
 804051c:	e0bff917 	ldw	r2,-28(fp)
 8040520:	01400704 	movi	r5,28
 8040524:	1009883a 	mov	r4,r2
 8040528:	804109c0 	call	804109c <__mulsi3>
 804052c:	1007883a 	mov	r3,r2
 8040530:	e0bffa17 	ldw	r2,-24(fp)
 8040534:	10e1883a 	add	r16,r2,r3
 8040538:	e0bff917 	ldw	r2,-28(fp)
 804053c:	01400704 	movi	r5,28
 8040540:	1009883a 	mov	r4,r2
 8040544:	804109c0 	call	804109c <__mulsi3>
 8040548:	1007883a 	mov	r3,r2
 804054c:	e0bffa17 	ldw	r2,-24(fp)
 8040550:	10c5883a 	add	r2,r2,r3
 8040554:	14400017 	ldw	r17,0(r2)
 8040558:	e0bff917 	ldw	r2,-28(fp)
 804055c:	01400704 	movi	r5,28
 8040560:	1009883a 	mov	r4,r2
 8040564:	804109c0 	call	804109c <__mulsi3>
 8040568:	1007883a 	mov	r3,r2
 804056c:	e0bffa17 	ldw	r2,-24(fp)
 8040570:	10c5883a 	add	r2,r2,r3
 8040574:	10800217 	ldw	r2,8(r2)
 8040578:	8885883a 	add	r2,r17,r2
 804057c:	80800015 	stw	r2,0(r16)
		rect[i].y += rect[i].yspeed;
 8040580:	e0bff917 	ldw	r2,-28(fp)
 8040584:	01400704 	movi	r5,28
 8040588:	1009883a 	mov	r4,r2
 804058c:	804109c0 	call	804109c <__mulsi3>
 8040590:	1007883a 	mov	r3,r2
 8040594:	e0bffa17 	ldw	r2,-24(fp)
 8040598:	10e1883a 	add	r16,r2,r3
 804059c:	e0bff917 	ldw	r2,-28(fp)
 80405a0:	01400704 	movi	r5,28
 80405a4:	1009883a 	mov	r4,r2
 80405a8:	804109c0 	call	804109c <__mulsi3>
 80405ac:	1007883a 	mov	r3,r2
 80405b0:	e0bffa17 	ldw	r2,-24(fp)
 80405b4:	10c5883a 	add	r2,r2,r3
 80405b8:	14400117 	ldw	r17,4(r2)
 80405bc:	e0bff917 	ldw	r2,-28(fp)
 80405c0:	01400704 	movi	r5,28
 80405c4:	1009883a 	mov	r4,r2
 80405c8:	804109c0 	call	804109c <__mulsi3>
 80405cc:	1007883a 	mov	r3,r2
 80405d0:	e0bffa17 	ldw	r2,-24(fp)
 80405d4:	10c5883a 	add	r2,r2,r3
 80405d8:	10800317 	ldw	r2,12(r2)
 80405dc:	8885883a 	add	r2,r17,r2
 80405e0:	80800115 	stw	r2,4(r16)
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
 80405e4:	e0bff917 	ldw	r2,-28(fp)
 80405e8:	01400704 	movi	r5,28
 80405ec:	1009883a 	mov	r4,r2
 80405f0:	804109c0 	call	804109c <__mulsi3>
 80405f4:	1007883a 	mov	r3,r2
 80405f8:	e0bffa17 	ldw	r2,-24(fp)
 80405fc:	10c5883a 	add	r2,r2,r3
 8040600:	14000017 	ldw	r16,0(r2)
 8040604:	e0bff917 	ldw	r2,-28(fp)
 8040608:	01400704 	movi	r5,28
 804060c:	1009883a 	mov	r4,r2
 8040610:	804109c0 	call	804109c <__mulsi3>
 8040614:	1007883a 	mov	r3,r2
 8040618:	e0bffa17 	ldw	r2,-24(fp)
 804061c:	10c5883a 	add	r2,r2,r3
 8040620:	10800417 	ldw	r2,16(r2)
 8040624:	8085883a 	add	r2,r16,r2
 8040628:	10805008 	cmpgei	r2,r2,320
 804062c:	1000151e 	bne	r2,zero,8040684 <update_rect+0x198>
 8040630:	e0bff917 	ldw	r2,-28(fp)
 8040634:	01400704 	movi	r5,28
 8040638:	1009883a 	mov	r4,r2
 804063c:	804109c0 	call	804109c <__mulsi3>
 8040640:	1007883a 	mov	r3,r2
 8040644:	e0bffa17 	ldw	r2,-24(fp)
 8040648:	10c5883a 	add	r2,r2,r3
 804064c:	14000017 	ldw	r16,0(r2)
 8040650:	e0bff917 	ldw	r2,-28(fp)
 8040654:	01400704 	movi	r5,28
 8040658:	1009883a 	mov	r4,r2
 804065c:	804109c0 	call	804109c <__mulsi3>
 8040660:	1007883a 	mov	r3,r2
 8040664:	e0bffa17 	ldw	r2,-24(fp)
 8040668:	10c5883a 	add	r2,r2,r3
 804066c:	10800417 	ldw	r2,16(r2)
 8040670:	8087883a 	add	r3,r16,r2
 8040674:	e0bffb17 	ldw	r2,-20(fp)
 8040678:	10800704 	addi	r2,r2,28
 804067c:	10800017 	ldw	r2,0(r2)
 8040680:	18806b16 	blt	r3,r2,8040830 <update_rect+0x344>
			// Collision with right paddle
			if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8040684:	e0bff917 	ldw	r2,-28(fp)
 8040688:	01400704 	movi	r5,28
 804068c:	1009883a 	mov	r4,r2
 8040690:	804109c0 	call	804109c <__mulsi3>
 8040694:	1007883a 	mov	r3,r2
 8040698:	e0bffa17 	ldw	r2,-24(fp)
 804069c:	10c5883a 	add	r2,r2,r3
 80406a0:	14000117 	ldw	r16,4(r2)
 80406a4:	e0bff917 	ldw	r2,-28(fp)
 80406a8:	01400704 	movi	r5,28
 80406ac:	1009883a 	mov	r4,r2
 80406b0:	804109c0 	call	804109c <__mulsi3>
 80406b4:	1007883a 	mov	r3,r2
 80406b8:	e0bffa17 	ldw	r2,-24(fp)
 80406bc:	10c5883a 	add	r2,r2,r3
 80406c0:	10800517 	ldw	r2,20(r2)
 80406c4:	8087883a 	add	r3,r16,r2
 80406c8:	e0bffb17 	ldw	r2,-20(fp)
 80406cc:	10800704 	addi	r2,r2,28
 80406d0:	10800117 	ldw	r2,4(r2)
 80406d4:	18803616 	blt	r3,r2,80407b0 <update_rect+0x2c4>
 80406d8:	e0bff917 	ldw	r2,-28(fp)
 80406dc:	01400704 	movi	r5,28
 80406e0:	1009883a 	mov	r4,r2
 80406e4:	804109c0 	call	804109c <__mulsi3>
 80406e8:	1007883a 	mov	r3,r2
 80406ec:	e0bffa17 	ldw	r2,-24(fp)
 80406f0:	10c5883a 	add	r2,r2,r3
 80406f4:	10800117 	ldw	r2,4(r2)
 80406f8:	e0fffb17 	ldw	r3,-20(fp)
 80406fc:	18c00704 	addi	r3,r3,28
 8040700:	19000117 	ldw	r4,4(r3)
 8040704:	e0fffb17 	ldw	r3,-20(fp)
 8040708:	18c00704 	addi	r3,r3,28
 804070c:	18c00517 	ldw	r3,20(r3)
 8040710:	20c7883a 	add	r3,r4,r3
 8040714:	18802616 	blt	r3,r2,80407b0 <update_rect+0x2c4>
				rect[i].x = paddles[1].x - rect[i].width;
 8040718:	e0bff917 	ldw	r2,-28(fp)
 804071c:	01400704 	movi	r5,28
 8040720:	1009883a 	mov	r4,r2
 8040724:	804109c0 	call	804109c <__mulsi3>
 8040728:	1007883a 	mov	r3,r2
 804072c:	e0bffa17 	ldw	r2,-24(fp)
 8040730:	10e1883a 	add	r16,r2,r3
 8040734:	e0bffb17 	ldw	r2,-20(fp)
 8040738:	10800704 	addi	r2,r2,28
 804073c:	14400017 	ldw	r17,0(r2)
 8040740:	e0bff917 	ldw	r2,-28(fp)
 8040744:	01400704 	movi	r5,28
 8040748:	1009883a 	mov	r4,r2
 804074c:	804109c0 	call	804109c <__mulsi3>
 8040750:	1007883a 	mov	r3,r2
 8040754:	e0bffa17 	ldw	r2,-24(fp)
 8040758:	10c5883a 	add	r2,r2,r3
 804075c:	10800417 	ldw	r2,16(r2)
 8040760:	8885c83a 	sub	r2,r17,r2
 8040764:	80800015 	stw	r2,0(r16)
				rect[i].xspeed*=-1; // Bounce
 8040768:	e0bff917 	ldw	r2,-28(fp)
 804076c:	01400704 	movi	r5,28
 8040770:	1009883a 	mov	r4,r2
 8040774:	804109c0 	call	804109c <__mulsi3>
 8040778:	1007883a 	mov	r3,r2
 804077c:	e0bffa17 	ldw	r2,-24(fp)
 8040780:	10e1883a 	add	r16,r2,r3
 8040784:	e0bff917 	ldw	r2,-28(fp)
 8040788:	01400704 	movi	r5,28
 804078c:	1009883a 	mov	r4,r2
 8040790:	804109c0 	call	804109c <__mulsi3>
 8040794:	1007883a 	mov	r3,r2
 8040798:	e0bffa17 	ldw	r2,-24(fp)
 804079c:	10c5883a 	add	r2,r2,r3
 80407a0:	10800217 	ldw	r2,8(r2)
 80407a4:	0085c83a 	sub	r2,zero,r2
 80407a8:	80800215 	stw	r2,8(r16)
		rect[i].x += rect[i].xspeed;
		rect[i].y += rect[i].yspeed;
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
			// Collision with right paddle
			if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 80407ac:	0000f006 	br	8040b70 <update_rect+0x684>
				rect[i].x = paddles[1].x - rect[i].width;
				rect[i].xspeed*=-1; // Bounce
			}
			else { // Goal - player 1 scored
				// Reset ball position
				rect[i].x = BALL_XDEFAULT;
 80407b0:	e0bff917 	ldw	r2,-28(fp)
 80407b4:	01400704 	movi	r5,28
 80407b8:	1009883a 	mov	r4,r2
 80407bc:	804109c0 	call	804109c <__mulsi3>
 80407c0:	1007883a 	mov	r3,r2
 80407c4:	e0bffa17 	ldw	r2,-24(fp)
 80407c8:	10c5883a 	add	r2,r2,r3
 80407cc:	00c02804 	movi	r3,160
 80407d0:	10c00015 	stw	r3,0(r2)
				rect[i].xspeed*=-1;
 80407d4:	e0bff917 	ldw	r2,-28(fp)
 80407d8:	01400704 	movi	r5,28
 80407dc:	1009883a 	mov	r4,r2
 80407e0:	804109c0 	call	804109c <__mulsi3>
 80407e4:	1007883a 	mov	r3,r2
 80407e8:	e0bffa17 	ldw	r2,-24(fp)
 80407ec:	10e1883a 	add	r16,r2,r3
 80407f0:	e0bff917 	ldw	r2,-28(fp)
 80407f4:	01400704 	movi	r5,28
 80407f8:	1009883a 	mov	r4,r2
 80407fc:	804109c0 	call	804109c <__mulsi3>
 8040800:	1007883a 	mov	r3,r2
 8040804:	e0bffa17 	ldw	r2,-24(fp)
 8040808:	10c5883a 	add	r2,r2,r3
 804080c:	10800217 	ldw	r2,8(r2)
 8040810:	0085c83a 	sub	r2,zero,r2
 8040814:	80800215 	stw	r2,8(r16)
				// Add 1 to left player's score
				scores[0] += 1;
 8040818:	e0800217 	ldw	r2,8(fp)
 804081c:	10800017 	ldw	r2,0(r2)
 8040820:	10c00044 	addi	r3,r2,1
 8040824:	e0800217 	ldw	r2,8(fp)
 8040828:	10c00015 	stw	r3,0(r2)
		rect[i].x += rect[i].xspeed;
		rect[i].y += rect[i].yspeed;
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
			// Collision with right paddle
			if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 804082c:	0000d006 	br	8040b70 <update_rect+0x684>
				rect[i].xspeed*=-1;
				// Add 1 to left player's score
				scores[0] += 1;
			}
		}
		else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
 8040830:	e0bff917 	ldw	r2,-28(fp)
 8040834:	01400704 	movi	r5,28
 8040838:	1009883a 	mov	r4,r2
 804083c:	804109c0 	call	804109c <__mulsi3>
 8040840:	1007883a 	mov	r3,r2
 8040844:	e0bffa17 	ldw	r2,-24(fp)
 8040848:	10c5883a 	add	r2,r2,r3
 804084c:	10800017 	ldw	r2,0(r2)
 8040850:	00800b0e 	bge	zero,r2,8040880 <update_rect+0x394>
 8040854:	e0bff917 	ldw	r2,-28(fp)
 8040858:	01400704 	movi	r5,28
 804085c:	1009883a 	mov	r4,r2
 8040860:	804109c0 	call	804109c <__mulsi3>
 8040864:	1007883a 	mov	r3,r2
 8040868:	e0bffa17 	ldw	r2,-24(fp)
 804086c:	10c5883a 	add	r2,r2,r3
 8040870:	10800017 	ldw	r2,0(r2)
 8040874:	e0fffb17 	ldw	r3,-20(fp)
 8040878:	18c00417 	ldw	r3,16(r3)
 804087c:	18806316 	blt	r3,r2,8040a0c <update_rect+0x520>
			// Collision with left paddle
			if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8040880:	e0bff917 	ldw	r2,-28(fp)
 8040884:	01400704 	movi	r5,28
 8040888:	1009883a 	mov	r4,r2
 804088c:	804109c0 	call	804109c <__mulsi3>
 8040890:	1007883a 	mov	r3,r2
 8040894:	e0bffa17 	ldw	r2,-24(fp)
 8040898:	10c5883a 	add	r2,r2,r3
 804089c:	14000117 	ldw	r16,4(r2)
 80408a0:	e0bff917 	ldw	r2,-28(fp)
 80408a4:	01400704 	movi	r5,28
 80408a8:	1009883a 	mov	r4,r2
 80408ac:	804109c0 	call	804109c <__mulsi3>
 80408b0:	1007883a 	mov	r3,r2
 80408b4:	e0bffa17 	ldw	r2,-24(fp)
 80408b8:	10c5883a 	add	r2,r2,r3
 80408bc:	10800517 	ldw	r2,20(r2)
 80408c0:	8087883a 	add	r3,r16,r2
 80408c4:	e0bffb17 	ldw	r2,-20(fp)
 80408c8:	10800117 	ldw	r2,4(r2)
 80408cc:	18802d16 	blt	r3,r2,8040984 <update_rect+0x498>
 80408d0:	e0bff917 	ldw	r2,-28(fp)
 80408d4:	01400704 	movi	r5,28
 80408d8:	1009883a 	mov	r4,r2
 80408dc:	804109c0 	call	804109c <__mulsi3>
 80408e0:	1007883a 	mov	r3,r2
 80408e4:	e0bffa17 	ldw	r2,-24(fp)
 80408e8:	10c5883a 	add	r2,r2,r3
 80408ec:	10800117 	ldw	r2,4(r2)
 80408f0:	e0fffb17 	ldw	r3,-20(fp)
 80408f4:	19000117 	ldw	r4,4(r3)
 80408f8:	e0fffb17 	ldw	r3,-20(fp)
 80408fc:	18c00517 	ldw	r3,20(r3)
 8040900:	20c7883a 	add	r3,r4,r3
 8040904:	18801f16 	blt	r3,r2,8040984 <update_rect+0x498>
				rect[i].x = paddles[0].x + paddles[0].width;
 8040908:	e0bff917 	ldw	r2,-28(fp)
 804090c:	01400704 	movi	r5,28
 8040910:	1009883a 	mov	r4,r2
 8040914:	804109c0 	call	804109c <__mulsi3>
 8040918:	1007883a 	mov	r3,r2
 804091c:	e0bffa17 	ldw	r2,-24(fp)
 8040920:	10c5883a 	add	r2,r2,r3
 8040924:	e0fffb17 	ldw	r3,-20(fp)
 8040928:	19000017 	ldw	r4,0(r3)
 804092c:	e0fffb17 	ldw	r3,-20(fp)
 8040930:	18c00417 	ldw	r3,16(r3)
 8040934:	20c7883a 	add	r3,r4,r3
 8040938:	10c00015 	stw	r3,0(r2)
				rect[i].xspeed*=-1; //Bounce
 804093c:	e0bff917 	ldw	r2,-28(fp)
 8040940:	01400704 	movi	r5,28
 8040944:	1009883a 	mov	r4,r2
 8040948:	804109c0 	call	804109c <__mulsi3>
 804094c:	1007883a 	mov	r3,r2
 8040950:	e0bffa17 	ldw	r2,-24(fp)
 8040954:	10e1883a 	add	r16,r2,r3
 8040958:	e0bff917 	ldw	r2,-28(fp)
 804095c:	01400704 	movi	r5,28
 8040960:	1009883a 	mov	r4,r2
 8040964:	804109c0 	call	804109c <__mulsi3>
 8040968:	1007883a 	mov	r3,r2
 804096c:	e0bffa17 	ldw	r2,-24(fp)
 8040970:	10c5883a 	add	r2,r2,r3
 8040974:	10800217 	ldw	r2,8(r2)
 8040978:	0085c83a 	sub	r2,zero,r2
 804097c:	80800215 	stw	r2,8(r16)
				scores[0] += 1;
			}
		}
		else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
			// Collision with left paddle
			if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8040980:	00007b06 	br	8040b70 <update_rect+0x684>
				rect[i].x = paddles[0].x + paddles[0].width;
				rect[i].xspeed*=-1; //Bounce
			}
			else { // Goal - player 2 scored
				// Reset ball position
				rect[i].x = BALL_XDEFAULT;
 8040984:	e0bff917 	ldw	r2,-28(fp)
 8040988:	01400704 	movi	r5,28
 804098c:	1009883a 	mov	r4,r2
 8040990:	804109c0 	call	804109c <__mulsi3>
 8040994:	1007883a 	mov	r3,r2
 8040998:	e0bffa17 	ldw	r2,-24(fp)
 804099c:	10c5883a 	add	r2,r2,r3
 80409a0:	00c02804 	movi	r3,160
 80409a4:	10c00015 	stw	r3,0(r2)
				rect[i].xspeed*=-1;
 80409a8:	e0bff917 	ldw	r2,-28(fp)
 80409ac:	01400704 	movi	r5,28
 80409b0:	1009883a 	mov	r4,r2
 80409b4:	804109c0 	call	804109c <__mulsi3>
 80409b8:	1007883a 	mov	r3,r2
 80409bc:	e0bffa17 	ldw	r2,-24(fp)
 80409c0:	10e1883a 	add	r16,r2,r3
 80409c4:	e0bff917 	ldw	r2,-28(fp)
 80409c8:	01400704 	movi	r5,28
 80409cc:	1009883a 	mov	r4,r2
 80409d0:	804109c0 	call	804109c <__mulsi3>
 80409d4:	1007883a 	mov	r3,r2
 80409d8:	e0bffa17 	ldw	r2,-24(fp)
 80409dc:	10c5883a 	add	r2,r2,r3
 80409e0:	10800217 	ldw	r2,8(r2)
 80409e4:	0085c83a 	sub	r2,zero,r2
 80409e8:	80800215 	stw	r2,8(r16)
				// Add 1 to right player's score
				scores[1] += 1;
 80409ec:	e0800217 	ldw	r2,8(fp)
 80409f0:	10800104 	addi	r2,r2,4
 80409f4:	e0c00217 	ldw	r3,8(fp)
 80409f8:	18c00104 	addi	r3,r3,4
 80409fc:	18c00017 	ldw	r3,0(r3)
 8040a00:	18c00044 	addi	r3,r3,1
 8040a04:	10c00015 	stw	r3,0(r2)
				scores[0] += 1;
			}
		}
		else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
			// Collision with left paddle
			if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8040a08:	00005906 	br	8040b70 <update_rect+0x684>
				rect[i].xspeed*=-1;
				// Add 1 to right player's score
				scores[1] += 1;
			}
		}
		else if (rect[i].y + rect[i].height >= SCREEN_HEIGHT) {
 8040a0c:	e0bff917 	ldw	r2,-28(fp)
 8040a10:	01400704 	movi	r5,28
 8040a14:	1009883a 	mov	r4,r2
 8040a18:	804109c0 	call	804109c <__mulsi3>
 8040a1c:	1007883a 	mov	r3,r2
 8040a20:	e0bffa17 	ldw	r2,-24(fp)
 8040a24:	10c5883a 	add	r2,r2,r3
 8040a28:	14000117 	ldw	r16,4(r2)
 8040a2c:	e0bff917 	ldw	r2,-28(fp)
 8040a30:	01400704 	movi	r5,28
 8040a34:	1009883a 	mov	r4,r2
 8040a38:	804109c0 	call	804109c <__mulsi3>
 8040a3c:	1007883a 	mov	r3,r2
 8040a40:	e0bffa17 	ldw	r2,-24(fp)
 8040a44:	10c5883a 	add	r2,r2,r3
 8040a48:	10800517 	ldw	r2,20(r2)
 8040a4c:	8085883a 	add	r2,r16,r2
 8040a50:	10803c10 	cmplti	r2,r2,240
 8040a54:	1000241e 	bne	r2,zero,8040ae8 <update_rect+0x5fc>
			rect[i].y = SCREEN_HEIGHT - rect[i].height;
 8040a58:	e0bff917 	ldw	r2,-28(fp)
 8040a5c:	01400704 	movi	r5,28
 8040a60:	1009883a 	mov	r4,r2
 8040a64:	804109c0 	call	804109c <__mulsi3>
 8040a68:	1007883a 	mov	r3,r2
 8040a6c:	e0bffa17 	ldw	r2,-24(fp)
 8040a70:	10e1883a 	add	r16,r2,r3
 8040a74:	e0bff917 	ldw	r2,-28(fp)
 8040a78:	01400704 	movi	r5,28
 8040a7c:	1009883a 	mov	r4,r2
 8040a80:	804109c0 	call	804109c <__mulsi3>
 8040a84:	1007883a 	mov	r3,r2
 8040a88:	e0bffa17 	ldw	r2,-24(fp)
 8040a8c:	10c5883a 	add	r2,r2,r3
 8040a90:	10800517 	ldw	r2,20(r2)
 8040a94:	00c03c04 	movi	r3,240
 8040a98:	1885c83a 	sub	r2,r3,r2
 8040a9c:	80800115 	stw	r2,4(r16)
			rect[i].yspeed *= -1;
 8040aa0:	e0bff917 	ldw	r2,-28(fp)
 8040aa4:	01400704 	movi	r5,28
 8040aa8:	1009883a 	mov	r4,r2
 8040aac:	804109c0 	call	804109c <__mulsi3>
 8040ab0:	1007883a 	mov	r3,r2
 8040ab4:	e0bffa17 	ldw	r2,-24(fp)
 8040ab8:	10e1883a 	add	r16,r2,r3
 8040abc:	e0bff917 	ldw	r2,-28(fp)
 8040ac0:	01400704 	movi	r5,28
 8040ac4:	1009883a 	mov	r4,r2
 8040ac8:	804109c0 	call	804109c <__mulsi3>
 8040acc:	1007883a 	mov	r3,r2
 8040ad0:	e0bffa17 	ldw	r2,-24(fp)
 8040ad4:	10c5883a 	add	r2,r2,r3
 8040ad8:	10800317 	ldw	r2,12(r2)
 8040adc:	0085c83a 	sub	r2,zero,r2
 8040ae0:	80800315 	stw	r2,12(r16)
 8040ae4:	00002206 	br	8040b70 <update_rect+0x684>
		}
		else if (rect[i].y <= 0) {
 8040ae8:	e0bff917 	ldw	r2,-28(fp)
 8040aec:	01400704 	movi	r5,28
 8040af0:	1009883a 	mov	r4,r2
 8040af4:	804109c0 	call	804109c <__mulsi3>
 8040af8:	1007883a 	mov	r3,r2
 8040afc:	e0bffa17 	ldw	r2,-24(fp)
 8040b00:	10c5883a 	add	r2,r2,r3
 8040b04:	10800117 	ldw	r2,4(r2)
 8040b08:	00801916 	blt	zero,r2,8040b70 <update_rect+0x684>
			rect[i].y = 0;
 8040b0c:	e0bff917 	ldw	r2,-28(fp)
 8040b10:	01400704 	movi	r5,28
 8040b14:	1009883a 	mov	r4,r2
 8040b18:	804109c0 	call	804109c <__mulsi3>
 8040b1c:	1007883a 	mov	r3,r2
 8040b20:	e0bffa17 	ldw	r2,-24(fp)
 8040b24:	10c5883a 	add	r2,r2,r3
 8040b28:	10000115 	stw	zero,4(r2)
			rect[i].yspeed *= -1;
 8040b2c:	e0bff917 	ldw	r2,-28(fp)
 8040b30:	01400704 	movi	r5,28
 8040b34:	1009883a 	mov	r4,r2
 8040b38:	804109c0 	call	804109c <__mulsi3>
 8040b3c:	1007883a 	mov	r3,r2
 8040b40:	e0bffa17 	ldw	r2,-24(fp)
 8040b44:	10e1883a 	add	r16,r2,r3
 8040b48:	e0bff917 	ldw	r2,-28(fp)
 8040b4c:	01400704 	movi	r5,28
 8040b50:	1009883a 	mov	r4,r2
 8040b54:	804109c0 	call	804109c <__mulsi3>
 8040b58:	1007883a 	mov	r3,r2
 8040b5c:	e0bffa17 	ldw	r2,-24(fp)
 8040b60:	10c5883a 	add	r2,r2,r3
 8040b64:	10800317 	ldw	r2,12(r2)
 8040b68:	0085c83a 	sub	r2,zero,r2
 8040b6c:	80800315 	stw	r2,12(r16)
}
// Updates the position of each Rectangle object
// "bounces" each object upon collision with screen top/bottom edges
// or paddle objects
void update_rect(Rectangle rect[], Rectangle paddles[], int rect_len, int paddle_len, int* scores) {
	for(int i = 0; i< rect_len; i++) {
 8040b70:	e0bff917 	ldw	r2,-28(fp)
 8040b74:	10800044 	addi	r2,r2,1
 8040b78:	e0bff915 	stw	r2,-28(fp)
 8040b7c:	e0fff917 	ldw	r3,-28(fp)
 8040b80:	e0bffc17 	ldw	r2,-16(fp)
 8040b84:	18be6516 	blt	r3,r2,804051c <__alt_data_end+0xfffe111c>
		else if (rect[i].y <= 0) {
			rect[i].y = 0;
			rect[i].yspeed *= -1;
		}
	}
}
 8040b88:	0001883a 	nop
 8040b8c:	e6fffe04 	addi	sp,fp,-8
 8040b90:	dfc00317 	ldw	ra,12(sp)
 8040b94:	df000217 	ldw	fp,8(sp)
 8040b98:	dc400117 	ldw	r17,4(sp)
 8040b9c:	dc000017 	ldw	r16,0(sp)
 8040ba0:	dec00404 	addi	sp,sp,16
 8040ba4:	f800283a 	ret

08040ba8 <clear>:
void clear(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
 8040ba8:	defffc04 	addi	sp,sp,-16
 8040bac:	dfc00315 	stw	ra,12(sp)
 8040bb0:	df000215 	stw	fp,8(sp)
 8040bb4:	df000204 	addi	fp,sp,8
 8040bb8:	e13ffe15 	stw	r4,-8(fp)
 8040bbc:	e17fff15 	stw	r5,-4(fp)
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
 8040bc0:	e17fff17 	ldw	r5,-4(fp)
 8040bc4:	e13ffe17 	ldw	r4,-8(fp)
 8040bc8:	8045ca40 	call	8045ca4 <alt_up_pixel_buffer_dma_clear_screen>
}
 8040bcc:	0001883a 	nop
 8040bd0:	e037883a 	mov	sp,fp
 8040bd4:	dfc00117 	ldw	ra,4(sp)
 8040bd8:	df000017 	ldw	fp,0(sp)
 8040bdc:	dec00204 	addi	sp,sp,8
 8040be0:	f800283a 	ret

08040be4 <draw>:
// Renders game components on the screen
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer) {
 8040be4:	defff204 	addi	sp,sp,-56
 8040be8:	dfc00d15 	stw	ra,52(sp)
 8040bec:	df000c15 	stw	fp,48(sp)
 8040bf0:	dcc00b15 	stw	r19,44(sp)
 8040bf4:	dc800a15 	stw	r18,40(sp)
 8040bf8:	dc400915 	stw	r17,36(sp)
 8040bfc:	dc000815 	stw	r16,32(sp)
 8040c00:	df000c04 	addi	fp,sp,48
 8040c04:	e13ff815 	stw	r4,-32(fp)
 8040c08:	e17ff915 	stw	r5,-28(fp)
 8040c0c:	e1bffa15 	stw	r6,-24(fp)
 8040c10:	e1fffb15 	stw	r7,-20(fp)
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
 8040c14:	e03ff715 	stw	zero,-36(fp)
 8040c18:	00004506 	br	8040d30 <draw+0x14c>
		// Wait for screen refresh
		while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dma_dev));
 8040c1c:	0001883a 	nop
 8040c20:	e13ffa17 	ldw	r4,-24(fp)
 8040c24:	8045c700 	call	8045c70 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 8040c28:	103ffd1e 	bne	r2,zero,8040c20 <__alt_data_end+0xfffe1820>
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 8040c2c:	e0bff717 	ldw	r2,-36(fp)
 8040c30:	01400704 	movi	r5,28
 8040c34:	1009883a 	mov	r4,r2
 8040c38:	804109c0 	call	804109c <__mulsi3>
 8040c3c:	1007883a 	mov	r3,r2
 8040c40:	e0bff817 	ldw	r2,-32(fp)
 8040c44:	10c5883a 	add	r2,r2,r3
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8040c48:	14400017 	ldw	r17,0(r2)
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 8040c4c:	e0bff717 	ldw	r2,-36(fp)
 8040c50:	01400704 	movi	r5,28
 8040c54:	1009883a 	mov	r4,r2
 8040c58:	804109c0 	call	804109c <__mulsi3>
 8040c5c:	1007883a 	mov	r3,r2
 8040c60:	e0bff817 	ldw	r2,-32(fp)
 8040c64:	10c5883a 	add	r2,r2,r3
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8040c68:	14800117 	ldw	r18,4(r2)
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 8040c6c:	e0bff717 	ldw	r2,-36(fp)
 8040c70:	01400704 	movi	r5,28
 8040c74:	1009883a 	mov	r4,r2
 8040c78:	804109c0 	call	804109c <__mulsi3>
 8040c7c:	1007883a 	mov	r3,r2
 8040c80:	e0bff817 	ldw	r2,-32(fp)
 8040c84:	10c5883a 	add	r2,r2,r3
 8040c88:	14000017 	ldw	r16,0(r2)
 8040c8c:	e0bff717 	ldw	r2,-36(fp)
 8040c90:	01400704 	movi	r5,28
 8040c94:	1009883a 	mov	r4,r2
 8040c98:	804109c0 	call	804109c <__mulsi3>
 8040c9c:	1007883a 	mov	r3,r2
 8040ca0:	e0bff817 	ldw	r2,-32(fp)
 8040ca4:	10c5883a 	add	r2,r2,r3
 8040ca8:	10800417 	ldw	r2,16(r2)
 8040cac:	8085883a 	add	r2,r16,r2
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8040cb0:	14ffffc4 	addi	r19,r2,-1
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
 8040cb4:	e0bff717 	ldw	r2,-36(fp)
 8040cb8:	01400704 	movi	r5,28
 8040cbc:	1009883a 	mov	r4,r2
 8040cc0:	804109c0 	call	804109c <__mulsi3>
 8040cc4:	1007883a 	mov	r3,r2
 8040cc8:	e0bff817 	ldw	r2,-32(fp)
 8040ccc:	10c5883a 	add	r2,r2,r3
 8040cd0:	14000117 	ldw	r16,4(r2)
 8040cd4:	e0bff717 	ldw	r2,-36(fp)
 8040cd8:	01400704 	movi	r5,28
 8040cdc:	1009883a 	mov	r4,r2
 8040ce0:	804109c0 	call	804109c <__mulsi3>
 8040ce4:	1007883a 	mov	r3,r2
 8040ce8:	e0bff817 	ldw	r2,-32(fp)
 8040cec:	10c5883a 	add	r2,r2,r3
 8040cf0:	10800517 	ldw	r2,20(r2)
 8040cf4:	8085883a 	add	r2,r16,r2
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8040cf8:	10bfffc4 	addi	r2,r2,-1
 8040cfc:	e0c00217 	ldw	r3,8(fp)
 8040d00:	d8c00215 	stw	r3,8(sp)
 8040d04:	e0fffb17 	ldw	r3,-20(fp)
 8040d08:	d8c00115 	stw	r3,4(sp)
 8040d0c:	d8800015 	stw	r2,0(sp)
 8040d10:	980f883a 	mov	r7,r19
 8040d14:	900d883a 	mov	r6,r18
 8040d18:	880b883a 	mov	r5,r17
 8040d1c:	e13ffa17 	ldw	r4,-24(fp)
 8040d20:	8045de00 	call	8045de0 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
}
// Renders game components on the screen
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer) {
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
 8040d24:	e0bff717 	ldw	r2,-36(fp)
 8040d28:	10800044 	addi	r2,r2,1
 8040d2c:	e0bff715 	stw	r2,-36(fp)
 8040d30:	e0fff717 	ldw	r3,-36(fp)
 8040d34:	e0bff917 	ldw	r2,-28(fp)
 8040d38:	18bfb816 	blt	r3,r2,8040c1c <__alt_data_end+0xfffe181c>
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
				colour, buffer);
	}
}
 8040d3c:	0001883a 	nop
 8040d40:	e6fffc04 	addi	sp,fp,-16
 8040d44:	dfc00517 	ldw	ra,20(sp)
 8040d48:	df000417 	ldw	fp,16(sp)
 8040d4c:	dcc00317 	ldw	r19,12(sp)
 8040d50:	dc800217 	ldw	r18,8(sp)
 8040d54:	dc400117 	ldw	r17,4(sp)
 8040d58:	dc000017 	ldw	r16,0(sp)
 8040d5c:	dec00604 	addi	sp,sp,24
 8040d60:	f800283a 	ret

08040d64 <run_game_tick>:

void run_game_tick(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, Rectangle paddles[], int paddle_len, Rectangle balls[], int ball_len, int* scores, int buffer) {
 8040d64:	defff904 	addi	sp,sp,-28
 8040d68:	dfc00615 	stw	ra,24(sp)
 8040d6c:	df000515 	stw	fp,20(sp)
 8040d70:	df000504 	addi	fp,sp,20
 8040d74:	e13ffc15 	stw	r4,-16(fp)
 8040d78:	e17ffd15 	stw	r5,-12(fp)
 8040d7c:	e1bffe15 	stw	r6,-8(fp)
 8040d80:	e1ffff15 	stw	r7,-4(fp)
	// Cleanup - erase old objects
	draw(balls, NUM_BALLS, pixel_buf_dma_dev, BACKGROUND_COLOUR,buffer);
 8040d84:	e0800417 	ldw	r2,16(fp)
 8040d88:	d8800015 	stw	r2,0(sp)
 8040d8c:	000f883a 	mov	r7,zero
 8040d90:	e1bffc17 	ldw	r6,-16(fp)
 8040d94:	01400044 	movi	r5,1
 8040d98:	e13fff17 	ldw	r4,-4(fp)
 8040d9c:	8040be40 	call	8040be4 <draw>
	draw(paddles, NUM_PADDLES, pixel_buf_dma_dev, BACKGROUND_COLOUR, buffer);
 8040da0:	e0800417 	ldw	r2,16(fp)
 8040da4:	d8800015 	stw	r2,0(sp)
 8040da8:	000f883a 	mov	r7,zero
 8040dac:	e1bffc17 	ldw	r6,-16(fp)
 8040db0:	01400084 	movi	r5,2
 8040db4:	e13ffd17 	ldw	r4,-12(fp)
 8040db8:	8040be40 	call	8040be4 <draw>
	// Game logic
	update_rect(balls, paddles, NUM_BALLS, NUM_PADDLES, scores);
 8040dbc:	e0800317 	ldw	r2,12(fp)
 8040dc0:	d8800015 	stw	r2,0(sp)
 8040dc4:	01c00084 	movi	r7,2
 8040dc8:	01800044 	movi	r6,1
 8040dcc:	e17ffd17 	ldw	r5,-12(fp)
 8040dd0:	e13fff17 	ldw	r4,-4(fp)
 8040dd4:	80404ec0 	call	80404ec <update_rect>
	update_paddle(paddles, NUM_PADDLES);
 8040dd8:	01400084 	movi	r5,2
 8040ddc:	e13ffd17 	ldw	r4,-12(fp)
 8040de0:	804026c0 	call	804026c <update_paddle>
	// Render the screen
	draw(balls, NUM_BALLS, pixel_buf_dma_dev, BALL_COLOUR, buffer);
 8040de4:	e0800417 	ldw	r2,16(fp)
 8040de8:	d8800015 	stw	r2,0(sp)
 8040dec:	01ffffd4 	movui	r7,65535
 8040df0:	e1bffc17 	ldw	r6,-16(fp)
 8040df4:	01400044 	movi	r5,1
 8040df8:	e13fff17 	ldw	r4,-4(fp)
 8040dfc:	8040be40 	call	8040be4 <draw>
	draw(paddles, NUM_PADDLES, pixel_buf_dma_dev, PADDLE_COLOUR, buffer);
 8040e00:	e0800417 	ldw	r2,16(fp)
 8040e04:	d8800015 	stw	r2,0(sp)
 8040e08:	01ffffd4 	movui	r7,65535
 8040e0c:	e1bffc17 	ldw	r6,-16(fp)
 8040e10:	01400084 	movi	r5,2
 8040e14:	e13ffd17 	ldw	r4,-12(fp)
 8040e18:	8040be40 	call	8040be4 <draw>
}
 8040e1c:	0001883a 	nop
 8040e20:	e037883a 	mov	sp,fp
 8040e24:	dfc00117 	ldw	ra,4(sp)
 8040e28:	df000017 	ldw	fp,0(sp)
 8040e2c:	dec00204 	addi	sp,sp,8
 8040e30:	f800283a 	ret

08040e34 <alarm_callback.2962>:
		printf ("Error: could not open pixel buffer device \n");
	else
		printf ("Opened pixel buffer device \n");

	// Alarm setup - executes the callback function periodically (every second)
	alt_u32 alarm_callback(void *context) {
 8040e34:	defffd04 	addi	sp,sp,-12
 8040e38:	df000215 	stw	fp,8(sp)
 8040e3c:	df000204 	addi	fp,sp,8
 8040e40:	e13ffe15 	stw	r4,-8(fp)
 8040e44:	6005883a 	mov	r2,r12
 8040e48:	e33fff15 	stw	r12,-4(fp)
		time += 1;
 8040e4c:	10c00017 	ldw	r3,0(r2)
 8040e50:	18c00044 	addi	r3,r3,1
 8040e54:	10c00015 	stw	r3,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8040e58:	d0a6c517 	ldw	r2,-25836(gp)
		return alt_ticks_per_second();
 8040e5c:	0001883a 	nop
	}
 8040e60:	e037883a 	mov	sp,fp
 8040e64:	df000017 	ldw	fp,0(sp)
 8040e68:	dec00104 	addi	sp,sp,4
 8040e6c:	f800283a 	ret

08040e70 <main>:

#define SDRAM_COLOUR_BITS 16


int main()
{
 8040e70:	deffc804 	addi	sp,sp,-224
 8040e74:	dfc03715 	stw	ra,220(sp)
 8040e78:	df003615 	stw	fp,216(sp)
 8040e7c:	df003604 	addi	fp,sp,216
#include "gameutil.h"

#define SDRAM_COLOUR_BITS 16


int main()
 8040e80:	e0bfce04 	addi	r2,fp,-200
 8040e84:	10800104 	addi	r2,r2,4
 8040e88:	e0ffce04 	addi	r3,fp,-200
 8040e8c:	180d883a 	mov	r6,r3
 8040e90:	01420134 	movhi	r5,2052
 8040e94:	29438d04 	addi	r5,r5,3636
 8040e98:	1009883a 	mov	r4,r2
 8040e9c:	80410c40 	call	80410c4 <__trampoline_setup>
{
	int time; // Game timer measured in s
	// Have to set up these pointers to open the device
	// Reference : https://faculty-web.msoe.edu/johnsontimoj/EE3921/files3921/nios_pixel_sw.pdf
	alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
 8040ea0:	01020134 	movhi	r4,2052
 8040ea4:	211e6d04 	addi	r4,r4,31156
 8040ea8:	80459d00 	call	80459d0 <alt_up_pixel_buffer_dma_open_dev>
 8040eac:	e0bfcd15 	stw	r2,-204(fp)
	// Check for error
	if ( pixel_buf_dma_dev == NULL)
 8040eb0:	e0bfcd17 	ldw	r2,-204(fp)
 8040eb4:	1000041e 	bne	r2,zero,8040ec8 <main+0x58>
		printf ("Error: could not open pixel buffer device \n");
 8040eb8:	01020134 	movhi	r4,2052
 8040ebc:	211e7504 	addi	r4,r4,31188
 8040ec0:	80412100 	call	8041210 <puts>
 8040ec4:	00000306 	br	8040ed4 <main+0x64>
	else
		printf ("Opened pixel buffer device \n");
 8040ec8:	01020134 	movhi	r4,2052
 8040ecc:	211e8004 	addi	r4,r4,31232
 8040ed0:	80412100 	call	8041210 <puts>
 8040ed4:	d0e6c517 	ldw	r3,-25836(gp)
		time += 1;
		return alt_ticks_per_second();
	}
	static alt_alarm alarm;
	// Setup alarm to call the callback function every N_TICKS
	if (alt_alarm_start(&alarm, alt_ticks_per_second(), alarm_callback, NULL) < 0){
 8040ed8:	e0bfce04 	addi	r2,fp,-200
 8040edc:	10800104 	addi	r2,r2,4
 8040ee0:	000f883a 	mov	r7,zero
 8040ee4:	100d883a 	mov	r6,r2
 8040ee8:	180b883a 	mov	r5,r3
 8040eec:	01020174 	movhi	r4,2053
 8040ef0:	212c1004 	addi	r4,r4,-20416
 8040ef4:	8043f340 	call	8043f34 <alt_alarm_start>
 8040ef8:	1000030e 	bge	r2,zero,8040f08 <main+0x98>
		printf ("No System Clock Available\n");
 8040efc:	01020134 	movhi	r4,2052
 8040f00:	211e8704 	addi	r4,r4,31260
 8040f04:	80412100 	call	8041210 <puts>
	}


	// Game objects
	int scores[2] = {0, 0};
 8040f08:	e03fd415 	stw	zero,-176(fp)
 8040f0c:	e03fd515 	stw	zero,-172(fp)
	Rectangle balls[NUM_BALLS];
	Rectangle ball = {BALL_XDEFAULT, BALL_YDEFAULT, BALL_XSPEED, BALL_YSPEED, BALL_WIDTH, BALL_HEIGHT, BALL_COLOUR};
 8040f10:	00802804 	movi	r2,160
 8040f14:	e0bfdd15 	stw	r2,-140(fp)
 8040f18:	00801e04 	movi	r2,120
 8040f1c:	e0bfde15 	stw	r2,-136(fp)
 8040f20:	00800104 	movi	r2,4
 8040f24:	e0bfdf15 	stw	r2,-132(fp)
 8040f28:	00800084 	movi	r2,2
 8040f2c:	e0bfe015 	stw	r2,-128(fp)
 8040f30:	00800284 	movi	r2,10
 8040f34:	e0bfe115 	stw	r2,-124(fp)
 8040f38:	00800284 	movi	r2,10
 8040f3c:	e0bfe215 	stw	r2,-120(fp)
 8040f40:	00bfffd4 	movui	r2,65535
 8040f44:	e0bfe315 	stw	r2,-116(fp)
	balls[0] = ball;
 8040f48:	e0bfdd17 	ldw	r2,-140(fp)
 8040f4c:	e0bfd615 	stw	r2,-168(fp)
 8040f50:	e0bfde17 	ldw	r2,-136(fp)
 8040f54:	e0bfd715 	stw	r2,-164(fp)
 8040f58:	e0bfdf17 	ldw	r2,-132(fp)
 8040f5c:	e0bfd815 	stw	r2,-160(fp)
 8040f60:	e0bfe017 	ldw	r2,-128(fp)
 8040f64:	e0bfd915 	stw	r2,-156(fp)
 8040f68:	e0bfe117 	ldw	r2,-124(fp)
 8040f6c:	e0bfda15 	stw	r2,-152(fp)
 8040f70:	e0bfe217 	ldw	r2,-120(fp)
 8040f74:	e0bfdb15 	stw	r2,-148(fp)
 8040f78:	e0bfe317 	ldw	r2,-116(fp)
 8040f7c:	e0bfdc15 	stw	r2,-144(fp)
	Rectangle paddles[NUM_PADDLES];
	Rectangle paddle_left = {0, 0, 0, 0, PADDLE_WIDTH, PADDLE_HEIGHT, PADDLE_COLOUR};
 8040f80:	e03ff215 	stw	zero,-56(fp)
 8040f84:	e03ff315 	stw	zero,-52(fp)
 8040f88:	e03ff415 	stw	zero,-48(fp)
 8040f8c:	e03ff515 	stw	zero,-44(fp)
 8040f90:	00800144 	movi	r2,5
 8040f94:	e0bff615 	stw	r2,-40(fp)
 8040f98:	00800c84 	movi	r2,50
 8040f9c:	e0bff715 	stw	r2,-36(fp)
 8040fa0:	00bfffd4 	movui	r2,65535
 8040fa4:	e0bff815 	stw	r2,-32(fp)
	Rectangle paddle_right = {SCREEN_WIDTH-PADDLE_WIDTH, 0, 0, 0, PADDLE_WIDTH, PADDLE_HEIGHT, PADDLE_COLOUR};
 8040fa8:	00804ec4 	movi	r2,315
 8040fac:	e0bff915 	stw	r2,-28(fp)
 8040fb0:	e03ffa15 	stw	zero,-24(fp)
 8040fb4:	e03ffb15 	stw	zero,-20(fp)
 8040fb8:	e03ffc15 	stw	zero,-16(fp)
 8040fbc:	00800144 	movi	r2,5
 8040fc0:	e0bffd15 	stw	r2,-12(fp)
 8040fc4:	00800c84 	movi	r2,50
 8040fc8:	e0bffe15 	stw	r2,-8(fp)
 8040fcc:	00bfffd4 	movui	r2,65535
 8040fd0:	e0bfff15 	stw	r2,-4(fp)
	paddles[0] = paddle_left;
 8040fd4:	e0bff217 	ldw	r2,-56(fp)
 8040fd8:	e0bfe415 	stw	r2,-112(fp)
 8040fdc:	e0bff317 	ldw	r2,-52(fp)
 8040fe0:	e0bfe515 	stw	r2,-108(fp)
 8040fe4:	e0bff417 	ldw	r2,-48(fp)
 8040fe8:	e0bfe615 	stw	r2,-104(fp)
 8040fec:	e0bff517 	ldw	r2,-44(fp)
 8040ff0:	e0bfe715 	stw	r2,-100(fp)
 8040ff4:	e0bff617 	ldw	r2,-40(fp)
 8040ff8:	e0bfe815 	stw	r2,-96(fp)
 8040ffc:	e0bff717 	ldw	r2,-36(fp)
 8041000:	e0bfe915 	stw	r2,-92(fp)
 8041004:	e0bff817 	ldw	r2,-32(fp)
 8041008:	e0bfea15 	stw	r2,-88(fp)
	paddles[1] = paddle_right;
 804100c:	e0bff917 	ldw	r2,-28(fp)
 8041010:	e0bfeb15 	stw	r2,-84(fp)
 8041014:	e0bffa17 	ldw	r2,-24(fp)
 8041018:	e0bfec15 	stw	r2,-80(fp)
 804101c:	e0bffb17 	ldw	r2,-20(fp)
 8041020:	e0bfed15 	stw	r2,-76(fp)
 8041024:	e0bffc17 	ldw	r2,-16(fp)
 8041028:	e0bfee15 	stw	r2,-72(fp)
 804102c:	e0bffd17 	ldw	r2,-12(fp)
 8041030:	e0bfef15 	stw	r2,-68(fp)
 8041034:	e0bffe17 	ldw	r2,-8(fp)
 8041038:	e0bff015 	stw	r2,-64(fp)
 804103c:	e0bfff17 	ldw	r2,-4(fp)
 8041040:	e0bff115 	stw	r2,-60(fp)


	// Clear screen
	clear(pixel_buf_dma_dev, 0); // Current screen
 8041044:	000b883a 	mov	r5,zero
 8041048:	e13fcd17 	ldw	r4,-204(fp)
 804104c:	8040ba80 	call	8040ba8 <clear>
	clear(pixel_buf_dma_dev, 1); // Back buffer
 8041050:	01400044 	movi	r5,1
 8041054:	e13fcd17 	ldw	r4,-204(fp)
 8041058:	8040ba80 	call	8040ba8 <clear>
	while(1) {
		run_game_tick(pixel_buf_dma_dev, paddles, NUM_PADDLES, balls, NUM_BALLS, scores, 1);
 804105c:	e13fd604 	addi	r4,fp,-168
 8041060:	e0ffe404 	addi	r3,fp,-112
 8041064:	00800044 	movi	r2,1
 8041068:	d8800215 	stw	r2,8(sp)
 804106c:	e0bfd404 	addi	r2,fp,-176
 8041070:	d8800115 	stw	r2,4(sp)
 8041074:	00800044 	movi	r2,1
 8041078:	d8800015 	stw	r2,0(sp)
 804107c:	200f883a 	mov	r7,r4
 8041080:	01800084 	movi	r6,2
 8041084:	180b883a 	mov	r5,r3
 8041088:	e13fcd17 	ldw	r4,-204(fp)
 804108c:	8040d640 	call	8040d64 <run_game_tick>
		usleep(10000);
 8041090:	0109c404 	movi	r4,10000
 8041094:	8044a5c0 	call	8044a5c <usleep>
	}
 8041098:	003ff006 	br	804105c <__alt_data_end+0xfffe1c5c>

0804109c <__mulsi3>:
 804109c:	0005883a 	mov	r2,zero
 80410a0:	20000726 	beq	r4,zero,80410c0 <__mulsi3+0x24>
 80410a4:	20c0004c 	andi	r3,r4,1
 80410a8:	2008d07a 	srli	r4,r4,1
 80410ac:	18000126 	beq	r3,zero,80410b4 <__mulsi3+0x18>
 80410b0:	1145883a 	add	r2,r2,r5
 80410b4:	294b883a 	add	r5,r5,r5
 80410b8:	203ffa1e 	bne	r4,zero,80410a4 <__alt_data_end+0xfffe1ca4>
 80410bc:	f800283a 	ret
 80410c0:	f800283a 	ret

080410c4 <__trampoline_setup>:
 80410c4:	300ed43a 	srli	r7,r6,16
 80410c8:	2806d43a 	srli	r3,r5,16
 80410cc:	31bfffcc 	andi	r6,r6,65535
 80410d0:	380e91ba 	slli	r7,r7,6
 80410d4:	0080c034 	movhi	r2,768
 80410d8:	10800d04 	addi	r2,r2,52
 80410dc:	300c91ba 	slli	r6,r6,6
 80410e0:	388eb03a 	or	r7,r7,r2
 80410e4:	0098c034 	movhi	r2,25344
 80410e8:	10800504 	addi	r2,r2,20
 80410ec:	180691ba 	slli	r3,r3,6
 80410f0:	308cb03a 	or	r6,r6,r2
 80410f4:	297fffcc 	andi	r5,r5,65535
 80410f8:	00802034 	movhi	r2,128
 80410fc:	10800d04 	addi	r2,r2,52
 8041100:	280a91ba 	slli	r5,r5,6
 8041104:	1886b03a 	or	r3,r3,r2
 8041108:	00842034 	movhi	r2,4224
 804110c:	10800504 	addi	r2,r2,20
 8041110:	20c00215 	stw	r3,8(r4)
 8041114:	00c40034 	movhi	r3,4096
 8041118:	288ab03a 	or	r5,r5,r2
 804111c:	18da0e84 	addi	r3,r3,26682
 8041120:	20c00415 	stw	r3,16(r4)
 8041124:	2005883a 	mov	r2,r4
 8041128:	21c00015 	stw	r7,0(r4)
 804112c:	21800115 	stw	r6,4(r4)
 8041130:	21400315 	stw	r5,12(r4)
 8041134:	20c00504 	addi	r3,r4,20
 8041138:	1000003b 	flushd	0(r2)
 804113c:	1000603a 	flushi	r2
 8041140:	10800104 	addi	r2,r2,4
 8041144:	10fffc1e 	bne	r2,r3,8041138 <__alt_data_end+0xfffe1d38>
 8041148:	0000203a 	flushp
 804114c:	f800283a 	ret

08041150 <_puts_r>:
 8041150:	defff604 	addi	sp,sp,-40
 8041154:	dc000715 	stw	r16,28(sp)
 8041158:	2021883a 	mov	r16,r4
 804115c:	2809883a 	mov	r4,r5
 8041160:	dc400815 	stw	r17,32(sp)
 8041164:	dfc00915 	stw	ra,36(sp)
 8041168:	2823883a 	mov	r17,r5
 804116c:	80412240 	call	8041224 <strlen>
 8041170:	10c00044 	addi	r3,r2,1
 8041174:	d8800115 	stw	r2,4(sp)
 8041178:	00820134 	movhi	r2,2052
 804117c:	109e8e04 	addi	r2,r2,31288
 8041180:	d8800215 	stw	r2,8(sp)
 8041184:	00800044 	movi	r2,1
 8041188:	d8800315 	stw	r2,12(sp)
 804118c:	00800084 	movi	r2,2
 8041190:	dc400015 	stw	r17,0(sp)
 8041194:	d8c00615 	stw	r3,24(sp)
 8041198:	dec00415 	stw	sp,16(sp)
 804119c:	d8800515 	stw	r2,20(sp)
 80411a0:	80000226 	beq	r16,zero,80411ac <_puts_r+0x5c>
 80411a4:	80800e17 	ldw	r2,56(r16)
 80411a8:	10001426 	beq	r2,zero,80411fc <_puts_r+0xac>
 80411ac:	81400217 	ldw	r5,8(r16)
 80411b0:	2880030b 	ldhu	r2,12(r5)
 80411b4:	10c8000c 	andi	r3,r2,8192
 80411b8:	1800061e 	bne	r3,zero,80411d4 <_puts_r+0x84>
 80411bc:	29001917 	ldw	r4,100(r5)
 80411c0:	00f7ffc4 	movi	r3,-8193
 80411c4:	10880014 	ori	r2,r2,8192
 80411c8:	20c6703a 	and	r3,r4,r3
 80411cc:	2880030d 	sth	r2,12(r5)
 80411d0:	28c01915 	stw	r3,100(r5)
 80411d4:	d9800404 	addi	r6,sp,16
 80411d8:	8009883a 	mov	r4,r16
 80411dc:	804166c0 	call	804166c <__sfvwrite_r>
 80411e0:	1000091e 	bne	r2,zero,8041208 <_puts_r+0xb8>
 80411e4:	00800284 	movi	r2,10
 80411e8:	dfc00917 	ldw	ra,36(sp)
 80411ec:	dc400817 	ldw	r17,32(sp)
 80411f0:	dc000717 	ldw	r16,28(sp)
 80411f4:	dec00a04 	addi	sp,sp,40
 80411f8:	f800283a 	ret
 80411fc:	8009883a 	mov	r4,r16
 8041200:	804161c0 	call	804161c <__sinit>
 8041204:	003fe906 	br	80411ac <__alt_data_end+0xfffe1dac>
 8041208:	00bfffc4 	movi	r2,-1
 804120c:	003ff606 	br	80411e8 <__alt_data_end+0xfffe1de8>

08041210 <puts>:
 8041210:	00820174 	movhi	r2,2053
 8041214:	10a54804 	addi	r2,r2,-27360
 8041218:	200b883a 	mov	r5,r4
 804121c:	11000017 	ldw	r4,0(r2)
 8041220:	80411501 	jmpi	8041150 <_puts_r>

08041224 <strlen>:
 8041224:	208000cc 	andi	r2,r4,3
 8041228:	10002026 	beq	r2,zero,80412ac <strlen+0x88>
 804122c:	20800007 	ldb	r2,0(r4)
 8041230:	10002026 	beq	r2,zero,80412b4 <strlen+0x90>
 8041234:	2005883a 	mov	r2,r4
 8041238:	00000206 	br	8041244 <strlen+0x20>
 804123c:	10c00007 	ldb	r3,0(r2)
 8041240:	18001826 	beq	r3,zero,80412a4 <strlen+0x80>
 8041244:	10800044 	addi	r2,r2,1
 8041248:	10c000cc 	andi	r3,r2,3
 804124c:	183ffb1e 	bne	r3,zero,804123c <__alt_data_end+0xfffe1e3c>
 8041250:	10c00017 	ldw	r3,0(r2)
 8041254:	01ffbff4 	movhi	r7,65279
 8041258:	39ffbfc4 	addi	r7,r7,-257
 804125c:	00ca303a 	nor	r5,zero,r3
 8041260:	01a02074 	movhi	r6,32897
 8041264:	19c7883a 	add	r3,r3,r7
 8041268:	31a02004 	addi	r6,r6,-32640
 804126c:	1946703a 	and	r3,r3,r5
 8041270:	1986703a 	and	r3,r3,r6
 8041274:	1800091e 	bne	r3,zero,804129c <strlen+0x78>
 8041278:	10800104 	addi	r2,r2,4
 804127c:	10c00017 	ldw	r3,0(r2)
 8041280:	19cb883a 	add	r5,r3,r7
 8041284:	00c6303a 	nor	r3,zero,r3
 8041288:	28c6703a 	and	r3,r5,r3
 804128c:	1986703a 	and	r3,r3,r6
 8041290:	183ff926 	beq	r3,zero,8041278 <__alt_data_end+0xfffe1e78>
 8041294:	00000106 	br	804129c <strlen+0x78>
 8041298:	10800044 	addi	r2,r2,1
 804129c:	10c00007 	ldb	r3,0(r2)
 80412a0:	183ffd1e 	bne	r3,zero,8041298 <__alt_data_end+0xfffe1e98>
 80412a4:	1105c83a 	sub	r2,r2,r4
 80412a8:	f800283a 	ret
 80412ac:	2005883a 	mov	r2,r4
 80412b0:	003fe706 	br	8041250 <__alt_data_end+0xfffe1e50>
 80412b4:	0005883a 	mov	r2,zero
 80412b8:	f800283a 	ret

080412bc <__fp_unlock>:
 80412bc:	0005883a 	mov	r2,zero
 80412c0:	f800283a 	ret

080412c4 <_cleanup_r>:
 80412c4:	01420134 	movhi	r5,2052
 80412c8:	294c9d04 	addi	r5,r5,12916
 80412cc:	8041bf81 	jmpi	8041bf8 <_fwalk_reent>

080412d0 <__sinit.part.1>:
 80412d0:	defff704 	addi	sp,sp,-36
 80412d4:	00c20134 	movhi	r3,2052
 80412d8:	dfc00815 	stw	ra,32(sp)
 80412dc:	ddc00715 	stw	r23,28(sp)
 80412e0:	dd800615 	stw	r22,24(sp)
 80412e4:	dd400515 	stw	r21,20(sp)
 80412e8:	dd000415 	stw	r20,16(sp)
 80412ec:	dcc00315 	stw	r19,12(sp)
 80412f0:	dc800215 	stw	r18,8(sp)
 80412f4:	dc400115 	stw	r17,4(sp)
 80412f8:	dc000015 	stw	r16,0(sp)
 80412fc:	18c4b104 	addi	r3,r3,4804
 8041300:	24000117 	ldw	r16,4(r4)
 8041304:	20c00f15 	stw	r3,60(r4)
 8041308:	2080bb04 	addi	r2,r4,748
 804130c:	00c000c4 	movi	r3,3
 8041310:	20c0b915 	stw	r3,740(r4)
 8041314:	2080ba15 	stw	r2,744(r4)
 8041318:	2000b815 	stw	zero,736(r4)
 804131c:	05c00204 	movi	r23,8
 8041320:	00800104 	movi	r2,4
 8041324:	2025883a 	mov	r18,r4
 8041328:	b80d883a 	mov	r6,r23
 804132c:	81001704 	addi	r4,r16,92
 8041330:	000b883a 	mov	r5,zero
 8041334:	80000015 	stw	zero,0(r16)
 8041338:	80000115 	stw	zero,4(r16)
 804133c:	80000215 	stw	zero,8(r16)
 8041340:	8080030d 	sth	r2,12(r16)
 8041344:	80001915 	stw	zero,100(r16)
 8041348:	8000038d 	sth	zero,14(r16)
 804134c:	80000415 	stw	zero,16(r16)
 8041350:	80000515 	stw	zero,20(r16)
 8041354:	80000615 	stw	zero,24(r16)
 8041358:	80428500 	call	8042850 <memset>
 804135c:	05820134 	movhi	r22,2052
 8041360:	94400217 	ldw	r17,8(r18)
 8041364:	05420134 	movhi	r21,2052
 8041368:	05020134 	movhi	r20,2052
 804136c:	04c20134 	movhi	r19,2052
 8041370:	b58bcc04 	addi	r22,r22,12080
 8041374:	ad4be304 	addi	r21,r21,12172
 8041378:	a50c0204 	addi	r20,r20,12296
 804137c:	9ccc1904 	addi	r19,r19,12388
 8041380:	85800815 	stw	r22,32(r16)
 8041384:	85400915 	stw	r21,36(r16)
 8041388:	85000a15 	stw	r20,40(r16)
 804138c:	84c00b15 	stw	r19,44(r16)
 8041390:	84000715 	stw	r16,28(r16)
 8041394:	00800284 	movi	r2,10
 8041398:	8880030d 	sth	r2,12(r17)
 804139c:	00800044 	movi	r2,1
 80413a0:	b80d883a 	mov	r6,r23
 80413a4:	89001704 	addi	r4,r17,92
 80413a8:	000b883a 	mov	r5,zero
 80413ac:	88000015 	stw	zero,0(r17)
 80413b0:	88000115 	stw	zero,4(r17)
 80413b4:	88000215 	stw	zero,8(r17)
 80413b8:	88001915 	stw	zero,100(r17)
 80413bc:	8880038d 	sth	r2,14(r17)
 80413c0:	88000415 	stw	zero,16(r17)
 80413c4:	88000515 	stw	zero,20(r17)
 80413c8:	88000615 	stw	zero,24(r17)
 80413cc:	80428500 	call	8042850 <memset>
 80413d0:	94000317 	ldw	r16,12(r18)
 80413d4:	00800484 	movi	r2,18
 80413d8:	8c400715 	stw	r17,28(r17)
 80413dc:	8d800815 	stw	r22,32(r17)
 80413e0:	8d400915 	stw	r21,36(r17)
 80413e4:	8d000a15 	stw	r20,40(r17)
 80413e8:	8cc00b15 	stw	r19,44(r17)
 80413ec:	8080030d 	sth	r2,12(r16)
 80413f0:	00800084 	movi	r2,2
 80413f4:	80000015 	stw	zero,0(r16)
 80413f8:	80000115 	stw	zero,4(r16)
 80413fc:	80000215 	stw	zero,8(r16)
 8041400:	80001915 	stw	zero,100(r16)
 8041404:	8080038d 	sth	r2,14(r16)
 8041408:	80000415 	stw	zero,16(r16)
 804140c:	80000515 	stw	zero,20(r16)
 8041410:	80000615 	stw	zero,24(r16)
 8041414:	b80d883a 	mov	r6,r23
 8041418:	000b883a 	mov	r5,zero
 804141c:	81001704 	addi	r4,r16,92
 8041420:	80428500 	call	8042850 <memset>
 8041424:	00800044 	movi	r2,1
 8041428:	84000715 	stw	r16,28(r16)
 804142c:	85800815 	stw	r22,32(r16)
 8041430:	85400915 	stw	r21,36(r16)
 8041434:	85000a15 	stw	r20,40(r16)
 8041438:	84c00b15 	stw	r19,44(r16)
 804143c:	90800e15 	stw	r2,56(r18)
 8041440:	dfc00817 	ldw	ra,32(sp)
 8041444:	ddc00717 	ldw	r23,28(sp)
 8041448:	dd800617 	ldw	r22,24(sp)
 804144c:	dd400517 	ldw	r21,20(sp)
 8041450:	dd000417 	ldw	r20,16(sp)
 8041454:	dcc00317 	ldw	r19,12(sp)
 8041458:	dc800217 	ldw	r18,8(sp)
 804145c:	dc400117 	ldw	r17,4(sp)
 8041460:	dc000017 	ldw	r16,0(sp)
 8041464:	dec00904 	addi	sp,sp,36
 8041468:	f800283a 	ret

0804146c <__fp_lock>:
 804146c:	0005883a 	mov	r2,zero
 8041470:	f800283a 	ret

08041474 <__sfmoreglue>:
 8041474:	defffc04 	addi	sp,sp,-16
 8041478:	dc800215 	stw	r18,8(sp)
 804147c:	2825883a 	mov	r18,r5
 8041480:	dc000015 	stw	r16,0(sp)
 8041484:	01401a04 	movi	r5,104
 8041488:	2021883a 	mov	r16,r4
 804148c:	913fffc4 	addi	r4,r18,-1
 8041490:	dfc00315 	stw	ra,12(sp)
 8041494:	dc400115 	stw	r17,4(sp)
 8041498:	804109c0 	call	804109c <__mulsi3>
 804149c:	8009883a 	mov	r4,r16
 80414a0:	11401d04 	addi	r5,r2,116
 80414a4:	1023883a 	mov	r17,r2
 80414a8:	8041cbc0 	call	8041cbc <_malloc_r>
 80414ac:	1021883a 	mov	r16,r2
 80414b0:	10000726 	beq	r2,zero,80414d0 <__sfmoreglue+0x5c>
 80414b4:	11000304 	addi	r4,r2,12
 80414b8:	10000015 	stw	zero,0(r2)
 80414bc:	14800115 	stw	r18,4(r2)
 80414c0:	11000215 	stw	r4,8(r2)
 80414c4:	89801a04 	addi	r6,r17,104
 80414c8:	000b883a 	mov	r5,zero
 80414cc:	80428500 	call	8042850 <memset>
 80414d0:	8005883a 	mov	r2,r16
 80414d4:	dfc00317 	ldw	ra,12(sp)
 80414d8:	dc800217 	ldw	r18,8(sp)
 80414dc:	dc400117 	ldw	r17,4(sp)
 80414e0:	dc000017 	ldw	r16,0(sp)
 80414e4:	dec00404 	addi	sp,sp,16
 80414e8:	f800283a 	ret

080414ec <__sfp>:
 80414ec:	defffb04 	addi	sp,sp,-20
 80414f0:	dc000015 	stw	r16,0(sp)
 80414f4:	04020174 	movhi	r16,2053
 80414f8:	84254704 	addi	r16,r16,-27364
 80414fc:	dcc00315 	stw	r19,12(sp)
 8041500:	2027883a 	mov	r19,r4
 8041504:	81000017 	ldw	r4,0(r16)
 8041508:	dfc00415 	stw	ra,16(sp)
 804150c:	dc800215 	stw	r18,8(sp)
 8041510:	20800e17 	ldw	r2,56(r4)
 8041514:	dc400115 	stw	r17,4(sp)
 8041518:	1000021e 	bne	r2,zero,8041524 <__sfp+0x38>
 804151c:	80412d00 	call	80412d0 <__sinit.part.1>
 8041520:	81000017 	ldw	r4,0(r16)
 8041524:	2480b804 	addi	r18,r4,736
 8041528:	047fffc4 	movi	r17,-1
 804152c:	91000117 	ldw	r4,4(r18)
 8041530:	94000217 	ldw	r16,8(r18)
 8041534:	213fffc4 	addi	r4,r4,-1
 8041538:	20000a16 	blt	r4,zero,8041564 <__sfp+0x78>
 804153c:	8080030f 	ldh	r2,12(r16)
 8041540:	10000c26 	beq	r2,zero,8041574 <__sfp+0x88>
 8041544:	80c01d04 	addi	r3,r16,116
 8041548:	00000206 	br	8041554 <__sfp+0x68>
 804154c:	18bfe60f 	ldh	r2,-104(r3)
 8041550:	10000826 	beq	r2,zero,8041574 <__sfp+0x88>
 8041554:	213fffc4 	addi	r4,r4,-1
 8041558:	1c3ffd04 	addi	r16,r3,-12
 804155c:	18c01a04 	addi	r3,r3,104
 8041560:	247ffa1e 	bne	r4,r17,804154c <__alt_data_end+0xfffe214c>
 8041564:	90800017 	ldw	r2,0(r18)
 8041568:	10001d26 	beq	r2,zero,80415e0 <__sfp+0xf4>
 804156c:	1025883a 	mov	r18,r2
 8041570:	003fee06 	br	804152c <__alt_data_end+0xfffe212c>
 8041574:	00bfffc4 	movi	r2,-1
 8041578:	8080038d 	sth	r2,14(r16)
 804157c:	00800044 	movi	r2,1
 8041580:	8080030d 	sth	r2,12(r16)
 8041584:	80001915 	stw	zero,100(r16)
 8041588:	80000015 	stw	zero,0(r16)
 804158c:	80000215 	stw	zero,8(r16)
 8041590:	80000115 	stw	zero,4(r16)
 8041594:	80000415 	stw	zero,16(r16)
 8041598:	80000515 	stw	zero,20(r16)
 804159c:	80000615 	stw	zero,24(r16)
 80415a0:	01800204 	movi	r6,8
 80415a4:	000b883a 	mov	r5,zero
 80415a8:	81001704 	addi	r4,r16,92
 80415ac:	80428500 	call	8042850 <memset>
 80415b0:	8005883a 	mov	r2,r16
 80415b4:	80000c15 	stw	zero,48(r16)
 80415b8:	80000d15 	stw	zero,52(r16)
 80415bc:	80001115 	stw	zero,68(r16)
 80415c0:	80001215 	stw	zero,72(r16)
 80415c4:	dfc00417 	ldw	ra,16(sp)
 80415c8:	dcc00317 	ldw	r19,12(sp)
 80415cc:	dc800217 	ldw	r18,8(sp)
 80415d0:	dc400117 	ldw	r17,4(sp)
 80415d4:	dc000017 	ldw	r16,0(sp)
 80415d8:	dec00504 	addi	sp,sp,20
 80415dc:	f800283a 	ret
 80415e0:	01400104 	movi	r5,4
 80415e4:	9809883a 	mov	r4,r19
 80415e8:	80414740 	call	8041474 <__sfmoreglue>
 80415ec:	90800015 	stw	r2,0(r18)
 80415f0:	103fde1e 	bne	r2,zero,804156c <__alt_data_end+0xfffe216c>
 80415f4:	00800304 	movi	r2,12
 80415f8:	98800015 	stw	r2,0(r19)
 80415fc:	0005883a 	mov	r2,zero
 8041600:	003ff006 	br	80415c4 <__alt_data_end+0xfffe21c4>

08041604 <_cleanup>:
 8041604:	00820174 	movhi	r2,2053
 8041608:	10a54704 	addi	r2,r2,-27364
 804160c:	11000017 	ldw	r4,0(r2)
 8041610:	01420134 	movhi	r5,2052
 8041614:	294c9d04 	addi	r5,r5,12916
 8041618:	8041bf81 	jmpi	8041bf8 <_fwalk_reent>

0804161c <__sinit>:
 804161c:	20800e17 	ldw	r2,56(r4)
 8041620:	10000126 	beq	r2,zero,8041628 <__sinit+0xc>
 8041624:	f800283a 	ret
 8041628:	80412d01 	jmpi	80412d0 <__sinit.part.1>

0804162c <__sfp_lock_acquire>:
 804162c:	f800283a 	ret

08041630 <__sfp_lock_release>:
 8041630:	f800283a 	ret

08041634 <__sinit_lock_acquire>:
 8041634:	f800283a 	ret

08041638 <__sinit_lock_release>:
 8041638:	f800283a 	ret

0804163c <__fp_lock_all>:
 804163c:	00820174 	movhi	r2,2053
 8041640:	10a54804 	addi	r2,r2,-27360
 8041644:	11000017 	ldw	r4,0(r2)
 8041648:	01420134 	movhi	r5,2052
 804164c:	29451b04 	addi	r5,r5,5228
 8041650:	8041b341 	jmpi	8041b34 <_fwalk>

08041654 <__fp_unlock_all>:
 8041654:	00820174 	movhi	r2,2053
 8041658:	10a54804 	addi	r2,r2,-27360
 804165c:	11000017 	ldw	r4,0(r2)
 8041660:	01420134 	movhi	r5,2052
 8041664:	2944af04 	addi	r5,r5,4796
 8041668:	8041b341 	jmpi	8041b34 <_fwalk>

0804166c <__sfvwrite_r>:
 804166c:	30800217 	ldw	r2,8(r6)
 8041670:	10006726 	beq	r2,zero,8041810 <__sfvwrite_r+0x1a4>
 8041674:	28c0030b 	ldhu	r3,12(r5)
 8041678:	defff404 	addi	sp,sp,-48
 804167c:	dd400715 	stw	r21,28(sp)
 8041680:	dd000615 	stw	r20,24(sp)
 8041684:	dc000215 	stw	r16,8(sp)
 8041688:	dfc00b15 	stw	ra,44(sp)
 804168c:	df000a15 	stw	fp,40(sp)
 8041690:	ddc00915 	stw	r23,36(sp)
 8041694:	dd800815 	stw	r22,32(sp)
 8041698:	dcc00515 	stw	r19,20(sp)
 804169c:	dc800415 	stw	r18,16(sp)
 80416a0:	dc400315 	stw	r17,12(sp)
 80416a4:	1880020c 	andi	r2,r3,8
 80416a8:	2821883a 	mov	r16,r5
 80416ac:	202b883a 	mov	r21,r4
 80416b0:	3029883a 	mov	r20,r6
 80416b4:	10002726 	beq	r2,zero,8041754 <__sfvwrite_r+0xe8>
 80416b8:	28800417 	ldw	r2,16(r5)
 80416bc:	10002526 	beq	r2,zero,8041754 <__sfvwrite_r+0xe8>
 80416c0:	1880008c 	andi	r2,r3,2
 80416c4:	a4400017 	ldw	r17,0(r20)
 80416c8:	10002a26 	beq	r2,zero,8041774 <__sfvwrite_r+0x108>
 80416cc:	05a00034 	movhi	r22,32768
 80416d0:	0027883a 	mov	r19,zero
 80416d4:	0025883a 	mov	r18,zero
 80416d8:	b5bf0004 	addi	r22,r22,-1024
 80416dc:	980d883a 	mov	r6,r19
 80416e0:	a809883a 	mov	r4,r21
 80416e4:	90004626 	beq	r18,zero,8041800 <__sfvwrite_r+0x194>
 80416e8:	900f883a 	mov	r7,r18
 80416ec:	b480022e 	bgeu	r22,r18,80416f8 <__sfvwrite_r+0x8c>
 80416f0:	01e00034 	movhi	r7,32768
 80416f4:	39ff0004 	addi	r7,r7,-1024
 80416f8:	80800917 	ldw	r2,36(r16)
 80416fc:	81400717 	ldw	r5,28(r16)
 8041700:	103ee83a 	callr	r2
 8041704:	00805a0e 	bge	zero,r2,8041870 <__sfvwrite_r+0x204>
 8041708:	a0c00217 	ldw	r3,8(r20)
 804170c:	98a7883a 	add	r19,r19,r2
 8041710:	90a5c83a 	sub	r18,r18,r2
 8041714:	1885c83a 	sub	r2,r3,r2
 8041718:	a0800215 	stw	r2,8(r20)
 804171c:	103fef1e 	bne	r2,zero,80416dc <__alt_data_end+0xfffe22dc>
 8041720:	0005883a 	mov	r2,zero
 8041724:	dfc00b17 	ldw	ra,44(sp)
 8041728:	df000a17 	ldw	fp,40(sp)
 804172c:	ddc00917 	ldw	r23,36(sp)
 8041730:	dd800817 	ldw	r22,32(sp)
 8041734:	dd400717 	ldw	r21,28(sp)
 8041738:	dd000617 	ldw	r20,24(sp)
 804173c:	dcc00517 	ldw	r19,20(sp)
 8041740:	dc800417 	ldw	r18,16(sp)
 8041744:	dc400317 	ldw	r17,12(sp)
 8041748:	dc000217 	ldw	r16,8(sp)
 804174c:	dec00c04 	addi	sp,sp,48
 8041750:	f800283a 	ret
 8041754:	800b883a 	mov	r5,r16
 8041758:	a809883a 	mov	r4,r21
 804175c:	80430cc0 	call	80430cc <__swsetup_r>
 8041760:	1000ee1e 	bne	r2,zero,8041b1c <__sfvwrite_r+0x4b0>
 8041764:	80c0030b 	ldhu	r3,12(r16)
 8041768:	a4400017 	ldw	r17,0(r20)
 804176c:	1880008c 	andi	r2,r3,2
 8041770:	103fd61e 	bne	r2,zero,80416cc <__alt_data_end+0xfffe22cc>
 8041774:	1880004c 	andi	r2,r3,1
 8041778:	1000421e 	bne	r2,zero,8041884 <__sfvwrite_r+0x218>
 804177c:	0039883a 	mov	fp,zero
 8041780:	0025883a 	mov	r18,zero
 8041784:	90001a26 	beq	r18,zero,80417f0 <__sfvwrite_r+0x184>
 8041788:	1880800c 	andi	r2,r3,512
 804178c:	84c00217 	ldw	r19,8(r16)
 8041790:	10002126 	beq	r2,zero,8041818 <__sfvwrite_r+0x1ac>
 8041794:	982f883a 	mov	r23,r19
 8041798:	94c09636 	bltu	r18,r19,80419f4 <__sfvwrite_r+0x388>
 804179c:	1881200c 	andi	r2,r3,1152
 80417a0:	1000a11e 	bne	r2,zero,8041a28 <__sfvwrite_r+0x3bc>
 80417a4:	81000017 	ldw	r4,0(r16)
 80417a8:	b80d883a 	mov	r6,r23
 80417ac:	e00b883a 	mov	r5,fp
 80417b0:	80426f40 	call	80426f4 <memmove>
 80417b4:	80c00217 	ldw	r3,8(r16)
 80417b8:	81000017 	ldw	r4,0(r16)
 80417bc:	9005883a 	mov	r2,r18
 80417c0:	1ce7c83a 	sub	r19,r3,r19
 80417c4:	25cf883a 	add	r7,r4,r23
 80417c8:	84c00215 	stw	r19,8(r16)
 80417cc:	81c00015 	stw	r7,0(r16)
 80417d0:	a0c00217 	ldw	r3,8(r20)
 80417d4:	e0b9883a 	add	fp,fp,r2
 80417d8:	90a5c83a 	sub	r18,r18,r2
 80417dc:	18a7c83a 	sub	r19,r3,r2
 80417e0:	a4c00215 	stw	r19,8(r20)
 80417e4:	983fce26 	beq	r19,zero,8041720 <__alt_data_end+0xfffe2320>
 80417e8:	80c0030b 	ldhu	r3,12(r16)
 80417ec:	903fe61e 	bne	r18,zero,8041788 <__alt_data_end+0xfffe2388>
 80417f0:	8f000017 	ldw	fp,0(r17)
 80417f4:	8c800117 	ldw	r18,4(r17)
 80417f8:	8c400204 	addi	r17,r17,8
 80417fc:	003fe106 	br	8041784 <__alt_data_end+0xfffe2384>
 8041800:	8cc00017 	ldw	r19,0(r17)
 8041804:	8c800117 	ldw	r18,4(r17)
 8041808:	8c400204 	addi	r17,r17,8
 804180c:	003fb306 	br	80416dc <__alt_data_end+0xfffe22dc>
 8041810:	0005883a 	mov	r2,zero
 8041814:	f800283a 	ret
 8041818:	81000017 	ldw	r4,0(r16)
 804181c:	80800417 	ldw	r2,16(r16)
 8041820:	11005a36 	bltu	r2,r4,804198c <__sfvwrite_r+0x320>
 8041824:	85c00517 	ldw	r23,20(r16)
 8041828:	95c05836 	bltu	r18,r23,804198c <__sfvwrite_r+0x320>
 804182c:	00a00034 	movhi	r2,32768
 8041830:	10bfffc4 	addi	r2,r2,-1
 8041834:	9009883a 	mov	r4,r18
 8041838:	1480012e 	bgeu	r2,r18,8041840 <__sfvwrite_r+0x1d4>
 804183c:	1009883a 	mov	r4,r2
 8041840:	b80b883a 	mov	r5,r23
 8041844:	8043d800 	call	8043d80 <__divsi3>
 8041848:	b80b883a 	mov	r5,r23
 804184c:	1009883a 	mov	r4,r2
 8041850:	804109c0 	call	804109c <__mulsi3>
 8041854:	81400717 	ldw	r5,28(r16)
 8041858:	80c00917 	ldw	r3,36(r16)
 804185c:	100f883a 	mov	r7,r2
 8041860:	e00d883a 	mov	r6,fp
 8041864:	a809883a 	mov	r4,r21
 8041868:	183ee83a 	callr	r3
 804186c:	00bfd816 	blt	zero,r2,80417d0 <__alt_data_end+0xfffe23d0>
 8041870:	8080030b 	ldhu	r2,12(r16)
 8041874:	10801014 	ori	r2,r2,64
 8041878:	8080030d 	sth	r2,12(r16)
 804187c:	00bfffc4 	movi	r2,-1
 8041880:	003fa806 	br	8041724 <__alt_data_end+0xfffe2324>
 8041884:	0027883a 	mov	r19,zero
 8041888:	0011883a 	mov	r8,zero
 804188c:	0039883a 	mov	fp,zero
 8041890:	0025883a 	mov	r18,zero
 8041894:	90001f26 	beq	r18,zero,8041914 <__sfvwrite_r+0x2a8>
 8041898:	40005a26 	beq	r8,zero,8041a04 <__sfvwrite_r+0x398>
 804189c:	982d883a 	mov	r22,r19
 80418a0:	94c0012e 	bgeu	r18,r19,80418a8 <__sfvwrite_r+0x23c>
 80418a4:	902d883a 	mov	r22,r18
 80418a8:	81000017 	ldw	r4,0(r16)
 80418ac:	80800417 	ldw	r2,16(r16)
 80418b0:	b02f883a 	mov	r23,r22
 80418b4:	81c00517 	ldw	r7,20(r16)
 80418b8:	1100032e 	bgeu	r2,r4,80418c8 <__sfvwrite_r+0x25c>
 80418bc:	80c00217 	ldw	r3,8(r16)
 80418c0:	38c7883a 	add	r3,r7,r3
 80418c4:	1d801816 	blt	r3,r22,8041928 <__sfvwrite_r+0x2bc>
 80418c8:	b1c03e16 	blt	r22,r7,80419c4 <__sfvwrite_r+0x358>
 80418cc:	80800917 	ldw	r2,36(r16)
 80418d0:	81400717 	ldw	r5,28(r16)
 80418d4:	e00d883a 	mov	r6,fp
 80418d8:	da000115 	stw	r8,4(sp)
 80418dc:	a809883a 	mov	r4,r21
 80418e0:	103ee83a 	callr	r2
 80418e4:	102f883a 	mov	r23,r2
 80418e8:	da000117 	ldw	r8,4(sp)
 80418ec:	00bfe00e 	bge	zero,r2,8041870 <__alt_data_end+0xfffe2470>
 80418f0:	9de7c83a 	sub	r19,r19,r23
 80418f4:	98001f26 	beq	r19,zero,8041974 <__sfvwrite_r+0x308>
 80418f8:	a0800217 	ldw	r2,8(r20)
 80418fc:	e5f9883a 	add	fp,fp,r23
 8041900:	95e5c83a 	sub	r18,r18,r23
 8041904:	15efc83a 	sub	r23,r2,r23
 8041908:	a5c00215 	stw	r23,8(r20)
 804190c:	b83f8426 	beq	r23,zero,8041720 <__alt_data_end+0xfffe2320>
 8041910:	903fe11e 	bne	r18,zero,8041898 <__alt_data_end+0xfffe2498>
 8041914:	8f000017 	ldw	fp,0(r17)
 8041918:	8c800117 	ldw	r18,4(r17)
 804191c:	0011883a 	mov	r8,zero
 8041920:	8c400204 	addi	r17,r17,8
 8041924:	003fdb06 	br	8041894 <__alt_data_end+0xfffe2494>
 8041928:	180d883a 	mov	r6,r3
 804192c:	e00b883a 	mov	r5,fp
 8041930:	da000115 	stw	r8,4(sp)
 8041934:	d8c00015 	stw	r3,0(sp)
 8041938:	80426f40 	call	80426f4 <memmove>
 804193c:	d8c00017 	ldw	r3,0(sp)
 8041940:	80800017 	ldw	r2,0(r16)
 8041944:	800b883a 	mov	r5,r16
 8041948:	a809883a 	mov	r4,r21
 804194c:	10c5883a 	add	r2,r2,r3
 8041950:	80800015 	stw	r2,0(r16)
 8041954:	d8c00015 	stw	r3,0(sp)
 8041958:	80435940 	call	8043594 <_fflush_r>
 804195c:	d8c00017 	ldw	r3,0(sp)
 8041960:	da000117 	ldw	r8,4(sp)
 8041964:	103fc21e 	bne	r2,zero,8041870 <__alt_data_end+0xfffe2470>
 8041968:	182f883a 	mov	r23,r3
 804196c:	9de7c83a 	sub	r19,r19,r23
 8041970:	983fe11e 	bne	r19,zero,80418f8 <__alt_data_end+0xfffe24f8>
 8041974:	800b883a 	mov	r5,r16
 8041978:	a809883a 	mov	r4,r21
 804197c:	80435940 	call	8043594 <_fflush_r>
 8041980:	103fbb1e 	bne	r2,zero,8041870 <__alt_data_end+0xfffe2470>
 8041984:	0011883a 	mov	r8,zero
 8041988:	003fdb06 	br	80418f8 <__alt_data_end+0xfffe24f8>
 804198c:	94c0012e 	bgeu	r18,r19,8041994 <__sfvwrite_r+0x328>
 8041990:	9027883a 	mov	r19,r18
 8041994:	980d883a 	mov	r6,r19
 8041998:	e00b883a 	mov	r5,fp
 804199c:	80426f40 	call	80426f4 <memmove>
 80419a0:	80800217 	ldw	r2,8(r16)
 80419a4:	80c00017 	ldw	r3,0(r16)
 80419a8:	14c5c83a 	sub	r2,r2,r19
 80419ac:	1cc7883a 	add	r3,r3,r19
 80419b0:	80800215 	stw	r2,8(r16)
 80419b4:	80c00015 	stw	r3,0(r16)
 80419b8:	10004326 	beq	r2,zero,8041ac8 <__sfvwrite_r+0x45c>
 80419bc:	9805883a 	mov	r2,r19
 80419c0:	003f8306 	br	80417d0 <__alt_data_end+0xfffe23d0>
 80419c4:	b00d883a 	mov	r6,r22
 80419c8:	e00b883a 	mov	r5,fp
 80419cc:	da000115 	stw	r8,4(sp)
 80419d0:	80426f40 	call	80426f4 <memmove>
 80419d4:	80800217 	ldw	r2,8(r16)
 80419d8:	80c00017 	ldw	r3,0(r16)
 80419dc:	da000117 	ldw	r8,4(sp)
 80419e0:	1585c83a 	sub	r2,r2,r22
 80419e4:	1dad883a 	add	r22,r3,r22
 80419e8:	80800215 	stw	r2,8(r16)
 80419ec:	85800015 	stw	r22,0(r16)
 80419f0:	003fbf06 	br	80418f0 <__alt_data_end+0xfffe24f0>
 80419f4:	81000017 	ldw	r4,0(r16)
 80419f8:	9027883a 	mov	r19,r18
 80419fc:	902f883a 	mov	r23,r18
 8041a00:	003f6906 	br	80417a8 <__alt_data_end+0xfffe23a8>
 8041a04:	900d883a 	mov	r6,r18
 8041a08:	01400284 	movi	r5,10
 8041a0c:	e009883a 	mov	r4,fp
 8041a10:	80424c80 	call	80424c8 <memchr>
 8041a14:	10003e26 	beq	r2,zero,8041b10 <__sfvwrite_r+0x4a4>
 8041a18:	10800044 	addi	r2,r2,1
 8041a1c:	1727c83a 	sub	r19,r2,fp
 8041a20:	02000044 	movi	r8,1
 8041a24:	003f9d06 	br	804189c <__alt_data_end+0xfffe249c>
 8041a28:	80800517 	ldw	r2,20(r16)
 8041a2c:	81400417 	ldw	r5,16(r16)
 8041a30:	81c00017 	ldw	r7,0(r16)
 8041a34:	10a7883a 	add	r19,r2,r2
 8041a38:	9885883a 	add	r2,r19,r2
 8041a3c:	1026d7fa 	srli	r19,r2,31
 8041a40:	396dc83a 	sub	r22,r7,r5
 8041a44:	b1000044 	addi	r4,r22,1
 8041a48:	9885883a 	add	r2,r19,r2
 8041a4c:	1027d07a 	srai	r19,r2,1
 8041a50:	2485883a 	add	r2,r4,r18
 8041a54:	980d883a 	mov	r6,r19
 8041a58:	9880022e 	bgeu	r19,r2,8041a64 <__sfvwrite_r+0x3f8>
 8041a5c:	1027883a 	mov	r19,r2
 8041a60:	100d883a 	mov	r6,r2
 8041a64:	18c1000c 	andi	r3,r3,1024
 8041a68:	18001c26 	beq	r3,zero,8041adc <__sfvwrite_r+0x470>
 8041a6c:	300b883a 	mov	r5,r6
 8041a70:	a809883a 	mov	r4,r21
 8041a74:	8041cbc0 	call	8041cbc <_malloc_r>
 8041a78:	102f883a 	mov	r23,r2
 8041a7c:	10002926 	beq	r2,zero,8041b24 <__sfvwrite_r+0x4b8>
 8041a80:	81400417 	ldw	r5,16(r16)
 8041a84:	b00d883a 	mov	r6,r22
 8041a88:	1009883a 	mov	r4,r2
 8041a8c:	80425ac0 	call	80425ac <memcpy>
 8041a90:	8080030b 	ldhu	r2,12(r16)
 8041a94:	00fedfc4 	movi	r3,-1153
 8041a98:	10c4703a 	and	r2,r2,r3
 8041a9c:	10802014 	ori	r2,r2,128
 8041aa0:	8080030d 	sth	r2,12(r16)
 8041aa4:	bd89883a 	add	r4,r23,r22
 8041aa8:	9d8fc83a 	sub	r7,r19,r22
 8041aac:	85c00415 	stw	r23,16(r16)
 8041ab0:	84c00515 	stw	r19,20(r16)
 8041ab4:	81000015 	stw	r4,0(r16)
 8041ab8:	9027883a 	mov	r19,r18
 8041abc:	81c00215 	stw	r7,8(r16)
 8041ac0:	902f883a 	mov	r23,r18
 8041ac4:	003f3806 	br	80417a8 <__alt_data_end+0xfffe23a8>
 8041ac8:	800b883a 	mov	r5,r16
 8041acc:	a809883a 	mov	r4,r21
 8041ad0:	80435940 	call	8043594 <_fflush_r>
 8041ad4:	103fb926 	beq	r2,zero,80419bc <__alt_data_end+0xfffe25bc>
 8041ad8:	003f6506 	br	8041870 <__alt_data_end+0xfffe2470>
 8041adc:	a809883a 	mov	r4,r21
 8041ae0:	80429780 	call	8042978 <_realloc_r>
 8041ae4:	102f883a 	mov	r23,r2
 8041ae8:	103fee1e 	bne	r2,zero,8041aa4 <__alt_data_end+0xfffe26a4>
 8041aec:	81400417 	ldw	r5,16(r16)
 8041af0:	a809883a 	mov	r4,r21
 8041af4:	80437440 	call	8043744 <_free_r>
 8041af8:	8080030b 	ldhu	r2,12(r16)
 8041afc:	00ffdfc4 	movi	r3,-129
 8041b00:	1884703a 	and	r2,r3,r2
 8041b04:	00c00304 	movi	r3,12
 8041b08:	a8c00015 	stw	r3,0(r21)
 8041b0c:	003f5906 	br	8041874 <__alt_data_end+0xfffe2474>
 8041b10:	94c00044 	addi	r19,r18,1
 8041b14:	02000044 	movi	r8,1
 8041b18:	003f6006 	br	804189c <__alt_data_end+0xfffe249c>
 8041b1c:	00bfffc4 	movi	r2,-1
 8041b20:	003f0006 	br	8041724 <__alt_data_end+0xfffe2324>
 8041b24:	00800304 	movi	r2,12
 8041b28:	a8800015 	stw	r2,0(r21)
 8041b2c:	8080030b 	ldhu	r2,12(r16)
 8041b30:	003f5006 	br	8041874 <__alt_data_end+0xfffe2474>

08041b34 <_fwalk>:
 8041b34:	defff704 	addi	sp,sp,-36
 8041b38:	dd000415 	stw	r20,16(sp)
 8041b3c:	dfc00815 	stw	ra,32(sp)
 8041b40:	ddc00715 	stw	r23,28(sp)
 8041b44:	dd800615 	stw	r22,24(sp)
 8041b48:	dd400515 	stw	r21,20(sp)
 8041b4c:	dcc00315 	stw	r19,12(sp)
 8041b50:	dc800215 	stw	r18,8(sp)
 8041b54:	dc400115 	stw	r17,4(sp)
 8041b58:	dc000015 	stw	r16,0(sp)
 8041b5c:	2500b804 	addi	r20,r4,736
 8041b60:	a0002326 	beq	r20,zero,8041bf0 <_fwalk+0xbc>
 8041b64:	282b883a 	mov	r21,r5
 8041b68:	002f883a 	mov	r23,zero
 8041b6c:	05800044 	movi	r22,1
 8041b70:	04ffffc4 	movi	r19,-1
 8041b74:	a4400117 	ldw	r17,4(r20)
 8041b78:	a4800217 	ldw	r18,8(r20)
 8041b7c:	8c7fffc4 	addi	r17,r17,-1
 8041b80:	88000d16 	blt	r17,zero,8041bb8 <_fwalk+0x84>
 8041b84:	94000304 	addi	r16,r18,12
 8041b88:	94800384 	addi	r18,r18,14
 8041b8c:	8080000b 	ldhu	r2,0(r16)
 8041b90:	8c7fffc4 	addi	r17,r17,-1
 8041b94:	813ffd04 	addi	r4,r16,-12
 8041b98:	b080042e 	bgeu	r22,r2,8041bac <_fwalk+0x78>
 8041b9c:	9080000f 	ldh	r2,0(r18)
 8041ba0:	14c00226 	beq	r2,r19,8041bac <_fwalk+0x78>
 8041ba4:	a83ee83a 	callr	r21
 8041ba8:	b8aeb03a 	or	r23,r23,r2
 8041bac:	84001a04 	addi	r16,r16,104
 8041bb0:	94801a04 	addi	r18,r18,104
 8041bb4:	8cfff51e 	bne	r17,r19,8041b8c <__alt_data_end+0xfffe278c>
 8041bb8:	a5000017 	ldw	r20,0(r20)
 8041bbc:	a03fed1e 	bne	r20,zero,8041b74 <__alt_data_end+0xfffe2774>
 8041bc0:	b805883a 	mov	r2,r23
 8041bc4:	dfc00817 	ldw	ra,32(sp)
 8041bc8:	ddc00717 	ldw	r23,28(sp)
 8041bcc:	dd800617 	ldw	r22,24(sp)
 8041bd0:	dd400517 	ldw	r21,20(sp)
 8041bd4:	dd000417 	ldw	r20,16(sp)
 8041bd8:	dcc00317 	ldw	r19,12(sp)
 8041bdc:	dc800217 	ldw	r18,8(sp)
 8041be0:	dc400117 	ldw	r17,4(sp)
 8041be4:	dc000017 	ldw	r16,0(sp)
 8041be8:	dec00904 	addi	sp,sp,36
 8041bec:	f800283a 	ret
 8041bf0:	002f883a 	mov	r23,zero
 8041bf4:	003ff206 	br	8041bc0 <__alt_data_end+0xfffe27c0>

08041bf8 <_fwalk_reent>:
 8041bf8:	defff704 	addi	sp,sp,-36
 8041bfc:	dd000415 	stw	r20,16(sp)
 8041c00:	dfc00815 	stw	ra,32(sp)
 8041c04:	ddc00715 	stw	r23,28(sp)
 8041c08:	dd800615 	stw	r22,24(sp)
 8041c0c:	dd400515 	stw	r21,20(sp)
 8041c10:	dcc00315 	stw	r19,12(sp)
 8041c14:	dc800215 	stw	r18,8(sp)
 8041c18:	dc400115 	stw	r17,4(sp)
 8041c1c:	dc000015 	stw	r16,0(sp)
 8041c20:	2500b804 	addi	r20,r4,736
 8041c24:	a0002326 	beq	r20,zero,8041cb4 <_fwalk_reent+0xbc>
 8041c28:	282b883a 	mov	r21,r5
 8041c2c:	2027883a 	mov	r19,r4
 8041c30:	002f883a 	mov	r23,zero
 8041c34:	05800044 	movi	r22,1
 8041c38:	04bfffc4 	movi	r18,-1
 8041c3c:	a4400117 	ldw	r17,4(r20)
 8041c40:	a4000217 	ldw	r16,8(r20)
 8041c44:	8c7fffc4 	addi	r17,r17,-1
 8041c48:	88000c16 	blt	r17,zero,8041c7c <_fwalk_reent+0x84>
 8041c4c:	84000304 	addi	r16,r16,12
 8041c50:	8080000b 	ldhu	r2,0(r16)
 8041c54:	8c7fffc4 	addi	r17,r17,-1
 8041c58:	817ffd04 	addi	r5,r16,-12
 8041c5c:	b080052e 	bgeu	r22,r2,8041c74 <_fwalk_reent+0x7c>
 8041c60:	8080008f 	ldh	r2,2(r16)
 8041c64:	9809883a 	mov	r4,r19
 8041c68:	14800226 	beq	r2,r18,8041c74 <_fwalk_reent+0x7c>
 8041c6c:	a83ee83a 	callr	r21
 8041c70:	b8aeb03a 	or	r23,r23,r2
 8041c74:	84001a04 	addi	r16,r16,104
 8041c78:	8cbff51e 	bne	r17,r18,8041c50 <__alt_data_end+0xfffe2850>
 8041c7c:	a5000017 	ldw	r20,0(r20)
 8041c80:	a03fee1e 	bne	r20,zero,8041c3c <__alt_data_end+0xfffe283c>
 8041c84:	b805883a 	mov	r2,r23
 8041c88:	dfc00817 	ldw	ra,32(sp)
 8041c8c:	ddc00717 	ldw	r23,28(sp)
 8041c90:	dd800617 	ldw	r22,24(sp)
 8041c94:	dd400517 	ldw	r21,20(sp)
 8041c98:	dd000417 	ldw	r20,16(sp)
 8041c9c:	dcc00317 	ldw	r19,12(sp)
 8041ca0:	dc800217 	ldw	r18,8(sp)
 8041ca4:	dc400117 	ldw	r17,4(sp)
 8041ca8:	dc000017 	ldw	r16,0(sp)
 8041cac:	dec00904 	addi	sp,sp,36
 8041cb0:	f800283a 	ret
 8041cb4:	002f883a 	mov	r23,zero
 8041cb8:	003ff206 	br	8041c84 <__alt_data_end+0xfffe2884>

08041cbc <_malloc_r>:
 8041cbc:	defff504 	addi	sp,sp,-44
 8041cc0:	dc800315 	stw	r18,12(sp)
 8041cc4:	dfc00a15 	stw	ra,40(sp)
 8041cc8:	df000915 	stw	fp,36(sp)
 8041ccc:	ddc00815 	stw	r23,32(sp)
 8041cd0:	dd800715 	stw	r22,28(sp)
 8041cd4:	dd400615 	stw	r21,24(sp)
 8041cd8:	dd000515 	stw	r20,20(sp)
 8041cdc:	dcc00415 	stw	r19,16(sp)
 8041ce0:	dc400215 	stw	r17,8(sp)
 8041ce4:	dc000115 	stw	r16,4(sp)
 8041ce8:	288002c4 	addi	r2,r5,11
 8041cec:	00c00584 	movi	r3,22
 8041cf0:	2025883a 	mov	r18,r4
 8041cf4:	18807f2e 	bgeu	r3,r2,8041ef4 <_malloc_r+0x238>
 8041cf8:	047ffe04 	movi	r17,-8
 8041cfc:	1462703a 	and	r17,r2,r17
 8041d00:	8800a316 	blt	r17,zero,8041f90 <_malloc_r+0x2d4>
 8041d04:	8940a236 	bltu	r17,r5,8041f90 <_malloc_r+0x2d4>
 8041d08:	80445fc0 	call	80445fc <__malloc_lock>
 8041d0c:	00807dc4 	movi	r2,503
 8041d10:	1441e92e 	bgeu	r2,r17,80424b8 <_malloc_r+0x7fc>
 8041d14:	8804d27a 	srli	r2,r17,9
 8041d18:	1000a126 	beq	r2,zero,8041fa0 <_malloc_r+0x2e4>
 8041d1c:	00c00104 	movi	r3,4
 8041d20:	18811e36 	bltu	r3,r2,804219c <_malloc_r+0x4e0>
 8041d24:	8804d1ba 	srli	r2,r17,6
 8041d28:	12000e44 	addi	r8,r2,57
 8041d2c:	11c00e04 	addi	r7,r2,56
 8041d30:	4209883a 	add	r4,r8,r8
 8041d34:	04c20134 	movhi	r19,2052
 8041d38:	2109883a 	add	r4,r4,r4
 8041d3c:	9cdfae04 	addi	r19,r19,32440
 8041d40:	2109883a 	add	r4,r4,r4
 8041d44:	9909883a 	add	r4,r19,r4
 8041d48:	24000117 	ldw	r16,4(r4)
 8041d4c:	213ffe04 	addi	r4,r4,-8
 8041d50:	24009726 	beq	r4,r16,8041fb0 <_malloc_r+0x2f4>
 8041d54:	80800117 	ldw	r2,4(r16)
 8041d58:	01bfff04 	movi	r6,-4
 8041d5c:	014003c4 	movi	r5,15
 8041d60:	1184703a 	and	r2,r2,r6
 8041d64:	1447c83a 	sub	r3,r2,r17
 8041d68:	28c00716 	blt	r5,r3,8041d88 <_malloc_r+0xcc>
 8041d6c:	1800920e 	bge	r3,zero,8041fb8 <_malloc_r+0x2fc>
 8041d70:	84000317 	ldw	r16,12(r16)
 8041d74:	24008e26 	beq	r4,r16,8041fb0 <_malloc_r+0x2f4>
 8041d78:	80800117 	ldw	r2,4(r16)
 8041d7c:	1184703a 	and	r2,r2,r6
 8041d80:	1447c83a 	sub	r3,r2,r17
 8041d84:	28fff90e 	bge	r5,r3,8041d6c <__alt_data_end+0xfffe296c>
 8041d88:	3809883a 	mov	r4,r7
 8041d8c:	01820134 	movhi	r6,2052
 8041d90:	9c000417 	ldw	r16,16(r19)
 8041d94:	319fae04 	addi	r6,r6,32440
 8041d98:	32000204 	addi	r8,r6,8
 8041d9c:	82013426 	beq	r16,r8,8042270 <_malloc_r+0x5b4>
 8041da0:	80c00117 	ldw	r3,4(r16)
 8041da4:	00bfff04 	movi	r2,-4
 8041da8:	188e703a 	and	r7,r3,r2
 8041dac:	3c45c83a 	sub	r2,r7,r17
 8041db0:	00c003c4 	movi	r3,15
 8041db4:	18811f16 	blt	r3,r2,8042234 <_malloc_r+0x578>
 8041db8:	32000515 	stw	r8,20(r6)
 8041dbc:	32000415 	stw	r8,16(r6)
 8041dc0:	10007f0e 	bge	r2,zero,8041fc0 <_malloc_r+0x304>
 8041dc4:	00807fc4 	movi	r2,511
 8041dc8:	11c0fd36 	bltu	r2,r7,80421c0 <_malloc_r+0x504>
 8041dcc:	3806d0fa 	srli	r3,r7,3
 8041dd0:	01c00044 	movi	r7,1
 8041dd4:	30800117 	ldw	r2,4(r6)
 8041dd8:	19400044 	addi	r5,r3,1
 8041ddc:	294b883a 	add	r5,r5,r5
 8041de0:	1807d0ba 	srai	r3,r3,2
 8041de4:	294b883a 	add	r5,r5,r5
 8041de8:	294b883a 	add	r5,r5,r5
 8041dec:	298b883a 	add	r5,r5,r6
 8041df0:	38c6983a 	sll	r3,r7,r3
 8041df4:	29c00017 	ldw	r7,0(r5)
 8041df8:	2a7ffe04 	addi	r9,r5,-8
 8041dfc:	1886b03a 	or	r3,r3,r2
 8041e00:	82400315 	stw	r9,12(r16)
 8041e04:	81c00215 	stw	r7,8(r16)
 8041e08:	30c00115 	stw	r3,4(r6)
 8041e0c:	2c000015 	stw	r16,0(r5)
 8041e10:	3c000315 	stw	r16,12(r7)
 8041e14:	2005d0ba 	srai	r2,r4,2
 8041e18:	01400044 	movi	r5,1
 8041e1c:	288a983a 	sll	r5,r5,r2
 8041e20:	19406f36 	bltu	r3,r5,8041fe0 <_malloc_r+0x324>
 8041e24:	28c4703a 	and	r2,r5,r3
 8041e28:	10000a1e 	bne	r2,zero,8041e54 <_malloc_r+0x198>
 8041e2c:	00bfff04 	movi	r2,-4
 8041e30:	294b883a 	add	r5,r5,r5
 8041e34:	2088703a 	and	r4,r4,r2
 8041e38:	28c4703a 	and	r2,r5,r3
 8041e3c:	21000104 	addi	r4,r4,4
 8041e40:	1000041e 	bne	r2,zero,8041e54 <_malloc_r+0x198>
 8041e44:	294b883a 	add	r5,r5,r5
 8041e48:	28c4703a 	and	r2,r5,r3
 8041e4c:	21000104 	addi	r4,r4,4
 8041e50:	103ffc26 	beq	r2,zero,8041e44 <__alt_data_end+0xfffe2a44>
 8041e54:	02bfff04 	movi	r10,-4
 8041e58:	024003c4 	movi	r9,15
 8041e5c:	21800044 	addi	r6,r4,1
 8041e60:	318d883a 	add	r6,r6,r6
 8041e64:	318d883a 	add	r6,r6,r6
 8041e68:	318d883a 	add	r6,r6,r6
 8041e6c:	998d883a 	add	r6,r19,r6
 8041e70:	333ffe04 	addi	r12,r6,-8
 8041e74:	2017883a 	mov	r11,r4
 8041e78:	31800104 	addi	r6,r6,4
 8041e7c:	34000017 	ldw	r16,0(r6)
 8041e80:	31fffd04 	addi	r7,r6,-12
 8041e84:	81c0041e 	bne	r16,r7,8041e98 <_malloc_r+0x1dc>
 8041e88:	0000fb06 	br	8042278 <_malloc_r+0x5bc>
 8041e8c:	1801030e 	bge	r3,zero,804229c <_malloc_r+0x5e0>
 8041e90:	84000317 	ldw	r16,12(r16)
 8041e94:	81c0f826 	beq	r16,r7,8042278 <_malloc_r+0x5bc>
 8041e98:	80800117 	ldw	r2,4(r16)
 8041e9c:	1284703a 	and	r2,r2,r10
 8041ea0:	1447c83a 	sub	r3,r2,r17
 8041ea4:	48fff90e 	bge	r9,r3,8041e8c <__alt_data_end+0xfffe2a8c>
 8041ea8:	80800317 	ldw	r2,12(r16)
 8041eac:	81000217 	ldw	r4,8(r16)
 8041eb0:	89400054 	ori	r5,r17,1
 8041eb4:	81400115 	stw	r5,4(r16)
 8041eb8:	20800315 	stw	r2,12(r4)
 8041ebc:	11000215 	stw	r4,8(r2)
 8041ec0:	8463883a 	add	r17,r16,r17
 8041ec4:	9c400515 	stw	r17,20(r19)
 8041ec8:	9c400415 	stw	r17,16(r19)
 8041ecc:	18800054 	ori	r2,r3,1
 8041ed0:	88800115 	stw	r2,4(r17)
 8041ed4:	8a000315 	stw	r8,12(r17)
 8041ed8:	8a000215 	stw	r8,8(r17)
 8041edc:	88e3883a 	add	r17,r17,r3
 8041ee0:	88c00015 	stw	r3,0(r17)
 8041ee4:	9009883a 	mov	r4,r18
 8041ee8:	80446200 	call	8044620 <__malloc_unlock>
 8041eec:	80800204 	addi	r2,r16,8
 8041ef0:	00001b06 	br	8041f60 <_malloc_r+0x2a4>
 8041ef4:	04400404 	movi	r17,16
 8041ef8:	89402536 	bltu	r17,r5,8041f90 <_malloc_r+0x2d4>
 8041efc:	80445fc0 	call	80445fc <__malloc_lock>
 8041f00:	00800184 	movi	r2,6
 8041f04:	01000084 	movi	r4,2
 8041f08:	04c20134 	movhi	r19,2052
 8041f0c:	1085883a 	add	r2,r2,r2
 8041f10:	9cdfae04 	addi	r19,r19,32440
 8041f14:	1085883a 	add	r2,r2,r2
 8041f18:	9885883a 	add	r2,r19,r2
 8041f1c:	14000117 	ldw	r16,4(r2)
 8041f20:	10fffe04 	addi	r3,r2,-8
 8041f24:	80c0d926 	beq	r16,r3,804228c <_malloc_r+0x5d0>
 8041f28:	80c00117 	ldw	r3,4(r16)
 8041f2c:	81000317 	ldw	r4,12(r16)
 8041f30:	00bfff04 	movi	r2,-4
 8041f34:	1884703a 	and	r2,r3,r2
 8041f38:	81400217 	ldw	r5,8(r16)
 8041f3c:	8085883a 	add	r2,r16,r2
 8041f40:	10c00117 	ldw	r3,4(r2)
 8041f44:	29000315 	stw	r4,12(r5)
 8041f48:	21400215 	stw	r5,8(r4)
 8041f4c:	18c00054 	ori	r3,r3,1
 8041f50:	10c00115 	stw	r3,4(r2)
 8041f54:	9009883a 	mov	r4,r18
 8041f58:	80446200 	call	8044620 <__malloc_unlock>
 8041f5c:	80800204 	addi	r2,r16,8
 8041f60:	dfc00a17 	ldw	ra,40(sp)
 8041f64:	df000917 	ldw	fp,36(sp)
 8041f68:	ddc00817 	ldw	r23,32(sp)
 8041f6c:	dd800717 	ldw	r22,28(sp)
 8041f70:	dd400617 	ldw	r21,24(sp)
 8041f74:	dd000517 	ldw	r20,20(sp)
 8041f78:	dcc00417 	ldw	r19,16(sp)
 8041f7c:	dc800317 	ldw	r18,12(sp)
 8041f80:	dc400217 	ldw	r17,8(sp)
 8041f84:	dc000117 	ldw	r16,4(sp)
 8041f88:	dec00b04 	addi	sp,sp,44
 8041f8c:	f800283a 	ret
 8041f90:	00800304 	movi	r2,12
 8041f94:	90800015 	stw	r2,0(r18)
 8041f98:	0005883a 	mov	r2,zero
 8041f9c:	003ff006 	br	8041f60 <__alt_data_end+0xfffe2b60>
 8041fa0:	01002004 	movi	r4,128
 8041fa4:	02001004 	movi	r8,64
 8041fa8:	01c00fc4 	movi	r7,63
 8041fac:	003f6106 	br	8041d34 <__alt_data_end+0xfffe2934>
 8041fb0:	4009883a 	mov	r4,r8
 8041fb4:	003f7506 	br	8041d8c <__alt_data_end+0xfffe298c>
 8041fb8:	81000317 	ldw	r4,12(r16)
 8041fbc:	003fde06 	br	8041f38 <__alt_data_end+0xfffe2b38>
 8041fc0:	81c5883a 	add	r2,r16,r7
 8041fc4:	11400117 	ldw	r5,4(r2)
 8041fc8:	9009883a 	mov	r4,r18
 8041fcc:	29400054 	ori	r5,r5,1
 8041fd0:	11400115 	stw	r5,4(r2)
 8041fd4:	80446200 	call	8044620 <__malloc_unlock>
 8041fd8:	80800204 	addi	r2,r16,8
 8041fdc:	003fe006 	br	8041f60 <__alt_data_end+0xfffe2b60>
 8041fe0:	9c000217 	ldw	r16,8(r19)
 8041fe4:	00bfff04 	movi	r2,-4
 8041fe8:	85800117 	ldw	r22,4(r16)
 8041fec:	b0ac703a 	and	r22,r22,r2
 8041ff0:	b4400336 	bltu	r22,r17,8042000 <_malloc_r+0x344>
 8041ff4:	b445c83a 	sub	r2,r22,r17
 8041ff8:	00c003c4 	movi	r3,15
 8041ffc:	18805d16 	blt	r3,r2,8042174 <_malloc_r+0x4b8>
 8042000:	05c20174 	movhi	r23,2053
 8042004:	00820174 	movhi	r2,2053
 8042008:	10ac0704 	addi	r2,r2,-20452
 804200c:	bde54904 	addi	r23,r23,-27356
 8042010:	15400017 	ldw	r21,0(r2)
 8042014:	b8c00017 	ldw	r3,0(r23)
 8042018:	00bfffc4 	movi	r2,-1
 804201c:	858d883a 	add	r6,r16,r22
 8042020:	8d6b883a 	add	r21,r17,r21
 8042024:	1880ea26 	beq	r3,r2,80423d0 <_malloc_r+0x714>
 8042028:	ad4403c4 	addi	r21,r21,4111
 804202c:	00bc0004 	movi	r2,-4096
 8042030:	a8aa703a 	and	r21,r21,r2
 8042034:	a80b883a 	mov	r5,r21
 8042038:	9009883a 	mov	r4,r18
 804203c:	d9800015 	stw	r6,0(sp)
 8042040:	8042edc0 	call	8042edc <_sbrk_r>
 8042044:	1029883a 	mov	r20,r2
 8042048:	00bfffc4 	movi	r2,-1
 804204c:	d9800017 	ldw	r6,0(sp)
 8042050:	a080e826 	beq	r20,r2,80423f4 <_malloc_r+0x738>
 8042054:	a180a636 	bltu	r20,r6,80422f0 <_malloc_r+0x634>
 8042058:	07020174 	movhi	fp,2053
 804205c:	e72c1604 	addi	fp,fp,-20392
 8042060:	e0800017 	ldw	r2,0(fp)
 8042064:	a887883a 	add	r3,r21,r2
 8042068:	e0c00015 	stw	r3,0(fp)
 804206c:	3500e626 	beq	r6,r20,8042408 <_malloc_r+0x74c>
 8042070:	b9000017 	ldw	r4,0(r23)
 8042074:	00bfffc4 	movi	r2,-1
 8042078:	2080ee26 	beq	r4,r2,8042434 <_malloc_r+0x778>
 804207c:	a185c83a 	sub	r2,r20,r6
 8042080:	10c5883a 	add	r2,r2,r3
 8042084:	e0800015 	stw	r2,0(fp)
 8042088:	a0c001cc 	andi	r3,r20,7
 804208c:	1800bc26 	beq	r3,zero,8042380 <_malloc_r+0x6c4>
 8042090:	a0e9c83a 	sub	r20,r20,r3
 8042094:	00840204 	movi	r2,4104
 8042098:	a5000204 	addi	r20,r20,8
 804209c:	10c7c83a 	sub	r3,r2,r3
 80420a0:	a545883a 	add	r2,r20,r21
 80420a4:	1083ffcc 	andi	r2,r2,4095
 80420a8:	18abc83a 	sub	r21,r3,r2
 80420ac:	a80b883a 	mov	r5,r21
 80420b0:	9009883a 	mov	r4,r18
 80420b4:	8042edc0 	call	8042edc <_sbrk_r>
 80420b8:	00ffffc4 	movi	r3,-1
 80420bc:	10c0e126 	beq	r2,r3,8042444 <_malloc_r+0x788>
 80420c0:	1505c83a 	sub	r2,r2,r20
 80420c4:	1545883a 	add	r2,r2,r21
 80420c8:	10800054 	ori	r2,r2,1
 80420cc:	e0c00017 	ldw	r3,0(fp)
 80420d0:	9d000215 	stw	r20,8(r19)
 80420d4:	a0800115 	stw	r2,4(r20)
 80420d8:	a8c7883a 	add	r3,r21,r3
 80420dc:	e0c00015 	stw	r3,0(fp)
 80420e0:	84c00e26 	beq	r16,r19,804211c <_malloc_r+0x460>
 80420e4:	018003c4 	movi	r6,15
 80420e8:	3580a72e 	bgeu	r6,r22,8042388 <_malloc_r+0x6cc>
 80420ec:	81400117 	ldw	r5,4(r16)
 80420f0:	013ffe04 	movi	r4,-8
 80420f4:	b0bffd04 	addi	r2,r22,-12
 80420f8:	1104703a 	and	r2,r2,r4
 80420fc:	2900004c 	andi	r4,r5,1
 8042100:	2088b03a 	or	r4,r4,r2
 8042104:	81000115 	stw	r4,4(r16)
 8042108:	01400144 	movi	r5,5
 804210c:	8089883a 	add	r4,r16,r2
 8042110:	21400115 	stw	r5,4(r4)
 8042114:	21400215 	stw	r5,8(r4)
 8042118:	3080cd36 	bltu	r6,r2,8042450 <_malloc_r+0x794>
 804211c:	00820174 	movhi	r2,2053
 8042120:	10ac0604 	addi	r2,r2,-20456
 8042124:	11000017 	ldw	r4,0(r2)
 8042128:	20c0012e 	bgeu	r4,r3,8042130 <_malloc_r+0x474>
 804212c:	10c00015 	stw	r3,0(r2)
 8042130:	00820174 	movhi	r2,2053
 8042134:	10ac0504 	addi	r2,r2,-20460
 8042138:	11000017 	ldw	r4,0(r2)
 804213c:	9c000217 	ldw	r16,8(r19)
 8042140:	20c0012e 	bgeu	r4,r3,8042148 <_malloc_r+0x48c>
 8042144:	10c00015 	stw	r3,0(r2)
 8042148:	80c00117 	ldw	r3,4(r16)
 804214c:	00bfff04 	movi	r2,-4
 8042150:	1886703a 	and	r3,r3,r2
 8042154:	1c45c83a 	sub	r2,r3,r17
 8042158:	1c400236 	bltu	r3,r17,8042164 <_malloc_r+0x4a8>
 804215c:	00c003c4 	movi	r3,15
 8042160:	18800416 	blt	r3,r2,8042174 <_malloc_r+0x4b8>
 8042164:	9009883a 	mov	r4,r18
 8042168:	80446200 	call	8044620 <__malloc_unlock>
 804216c:	0005883a 	mov	r2,zero
 8042170:	003f7b06 	br	8041f60 <__alt_data_end+0xfffe2b60>
 8042174:	88c00054 	ori	r3,r17,1
 8042178:	80c00115 	stw	r3,4(r16)
 804217c:	8463883a 	add	r17,r16,r17
 8042180:	10800054 	ori	r2,r2,1
 8042184:	9c400215 	stw	r17,8(r19)
 8042188:	88800115 	stw	r2,4(r17)
 804218c:	9009883a 	mov	r4,r18
 8042190:	80446200 	call	8044620 <__malloc_unlock>
 8042194:	80800204 	addi	r2,r16,8
 8042198:	003f7106 	br	8041f60 <__alt_data_end+0xfffe2b60>
 804219c:	00c00504 	movi	r3,20
 80421a0:	18804a2e 	bgeu	r3,r2,80422cc <_malloc_r+0x610>
 80421a4:	00c01504 	movi	r3,84
 80421a8:	18806e36 	bltu	r3,r2,8042364 <_malloc_r+0x6a8>
 80421ac:	8804d33a 	srli	r2,r17,12
 80421b0:	12001bc4 	addi	r8,r2,111
 80421b4:	11c01b84 	addi	r7,r2,110
 80421b8:	4209883a 	add	r4,r8,r8
 80421bc:	003edd06 	br	8041d34 <__alt_data_end+0xfffe2934>
 80421c0:	3804d27a 	srli	r2,r7,9
 80421c4:	00c00104 	movi	r3,4
 80421c8:	1880442e 	bgeu	r3,r2,80422dc <_malloc_r+0x620>
 80421cc:	00c00504 	movi	r3,20
 80421d0:	18808136 	bltu	r3,r2,80423d8 <_malloc_r+0x71c>
 80421d4:	11401704 	addi	r5,r2,92
 80421d8:	10c016c4 	addi	r3,r2,91
 80421dc:	294b883a 	add	r5,r5,r5
 80421e0:	294b883a 	add	r5,r5,r5
 80421e4:	294b883a 	add	r5,r5,r5
 80421e8:	994b883a 	add	r5,r19,r5
 80421ec:	28800017 	ldw	r2,0(r5)
 80421f0:	01820134 	movhi	r6,2052
 80421f4:	297ffe04 	addi	r5,r5,-8
 80421f8:	319fae04 	addi	r6,r6,32440
 80421fc:	28806526 	beq	r5,r2,8042394 <_malloc_r+0x6d8>
 8042200:	01bfff04 	movi	r6,-4
 8042204:	10c00117 	ldw	r3,4(r2)
 8042208:	1986703a 	and	r3,r3,r6
 804220c:	38c0022e 	bgeu	r7,r3,8042218 <_malloc_r+0x55c>
 8042210:	10800217 	ldw	r2,8(r2)
 8042214:	28bffb1e 	bne	r5,r2,8042204 <__alt_data_end+0xfffe2e04>
 8042218:	11400317 	ldw	r5,12(r2)
 804221c:	98c00117 	ldw	r3,4(r19)
 8042220:	81400315 	stw	r5,12(r16)
 8042224:	80800215 	stw	r2,8(r16)
 8042228:	2c000215 	stw	r16,8(r5)
 804222c:	14000315 	stw	r16,12(r2)
 8042230:	003ef806 	br	8041e14 <__alt_data_end+0xfffe2a14>
 8042234:	88c00054 	ori	r3,r17,1
 8042238:	80c00115 	stw	r3,4(r16)
 804223c:	8463883a 	add	r17,r16,r17
 8042240:	34400515 	stw	r17,20(r6)
 8042244:	34400415 	stw	r17,16(r6)
 8042248:	10c00054 	ori	r3,r2,1
 804224c:	8a000315 	stw	r8,12(r17)
 8042250:	8a000215 	stw	r8,8(r17)
 8042254:	88c00115 	stw	r3,4(r17)
 8042258:	88a3883a 	add	r17,r17,r2
 804225c:	88800015 	stw	r2,0(r17)
 8042260:	9009883a 	mov	r4,r18
 8042264:	80446200 	call	8044620 <__malloc_unlock>
 8042268:	80800204 	addi	r2,r16,8
 804226c:	003f3c06 	br	8041f60 <__alt_data_end+0xfffe2b60>
 8042270:	30c00117 	ldw	r3,4(r6)
 8042274:	003ee706 	br	8041e14 <__alt_data_end+0xfffe2a14>
 8042278:	5ac00044 	addi	r11,r11,1
 804227c:	588000cc 	andi	r2,r11,3
 8042280:	31800204 	addi	r6,r6,8
 8042284:	103efd1e 	bne	r2,zero,8041e7c <__alt_data_end+0xfffe2a7c>
 8042288:	00002406 	br	804231c <_malloc_r+0x660>
 804228c:	14000317 	ldw	r16,12(r2)
 8042290:	143f251e 	bne	r2,r16,8041f28 <__alt_data_end+0xfffe2b28>
 8042294:	21000084 	addi	r4,r4,2
 8042298:	003ebc06 	br	8041d8c <__alt_data_end+0xfffe298c>
 804229c:	8085883a 	add	r2,r16,r2
 80422a0:	10c00117 	ldw	r3,4(r2)
 80422a4:	81000317 	ldw	r4,12(r16)
 80422a8:	81400217 	ldw	r5,8(r16)
 80422ac:	18c00054 	ori	r3,r3,1
 80422b0:	10c00115 	stw	r3,4(r2)
 80422b4:	29000315 	stw	r4,12(r5)
 80422b8:	21400215 	stw	r5,8(r4)
 80422bc:	9009883a 	mov	r4,r18
 80422c0:	80446200 	call	8044620 <__malloc_unlock>
 80422c4:	80800204 	addi	r2,r16,8
 80422c8:	003f2506 	br	8041f60 <__alt_data_end+0xfffe2b60>
 80422cc:	12001704 	addi	r8,r2,92
 80422d0:	11c016c4 	addi	r7,r2,91
 80422d4:	4209883a 	add	r4,r8,r8
 80422d8:	003e9606 	br	8041d34 <__alt_data_end+0xfffe2934>
 80422dc:	3804d1ba 	srli	r2,r7,6
 80422e0:	11400e44 	addi	r5,r2,57
 80422e4:	10c00e04 	addi	r3,r2,56
 80422e8:	294b883a 	add	r5,r5,r5
 80422ec:	003fbc06 	br	80421e0 <__alt_data_end+0xfffe2de0>
 80422f0:	84ff5926 	beq	r16,r19,8042058 <__alt_data_end+0xfffe2c58>
 80422f4:	00820134 	movhi	r2,2052
 80422f8:	109fae04 	addi	r2,r2,32440
 80422fc:	14000217 	ldw	r16,8(r2)
 8042300:	00bfff04 	movi	r2,-4
 8042304:	80c00117 	ldw	r3,4(r16)
 8042308:	1886703a 	and	r3,r3,r2
 804230c:	003f9106 	br	8042154 <__alt_data_end+0xfffe2d54>
 8042310:	60800217 	ldw	r2,8(r12)
 8042314:	213fffc4 	addi	r4,r4,-1
 8042318:	1300651e 	bne	r2,r12,80424b0 <_malloc_r+0x7f4>
 804231c:	208000cc 	andi	r2,r4,3
 8042320:	633ffe04 	addi	r12,r12,-8
 8042324:	103ffa1e 	bne	r2,zero,8042310 <__alt_data_end+0xfffe2f10>
 8042328:	98800117 	ldw	r2,4(r19)
 804232c:	0146303a 	nor	r3,zero,r5
 8042330:	1884703a 	and	r2,r3,r2
 8042334:	98800115 	stw	r2,4(r19)
 8042338:	294b883a 	add	r5,r5,r5
 804233c:	117f2836 	bltu	r2,r5,8041fe0 <__alt_data_end+0xfffe2be0>
 8042340:	283f2726 	beq	r5,zero,8041fe0 <__alt_data_end+0xfffe2be0>
 8042344:	2886703a 	and	r3,r5,r2
 8042348:	5809883a 	mov	r4,r11
 804234c:	183ec31e 	bne	r3,zero,8041e5c <__alt_data_end+0xfffe2a5c>
 8042350:	294b883a 	add	r5,r5,r5
 8042354:	2886703a 	and	r3,r5,r2
 8042358:	21000104 	addi	r4,r4,4
 804235c:	183ffc26 	beq	r3,zero,8042350 <__alt_data_end+0xfffe2f50>
 8042360:	003ebe06 	br	8041e5c <__alt_data_end+0xfffe2a5c>
 8042364:	00c05504 	movi	r3,340
 8042368:	18801236 	bltu	r3,r2,80423b4 <_malloc_r+0x6f8>
 804236c:	8804d3fa 	srli	r2,r17,15
 8042370:	12001e04 	addi	r8,r2,120
 8042374:	11c01dc4 	addi	r7,r2,119
 8042378:	4209883a 	add	r4,r8,r8
 804237c:	003e6d06 	br	8041d34 <__alt_data_end+0xfffe2934>
 8042380:	00c40004 	movi	r3,4096
 8042384:	003f4606 	br	80420a0 <__alt_data_end+0xfffe2ca0>
 8042388:	00800044 	movi	r2,1
 804238c:	a0800115 	stw	r2,4(r20)
 8042390:	003f7406 	br	8042164 <__alt_data_end+0xfffe2d64>
 8042394:	1805d0ba 	srai	r2,r3,2
 8042398:	01c00044 	movi	r7,1
 804239c:	30c00117 	ldw	r3,4(r6)
 80423a0:	388e983a 	sll	r7,r7,r2
 80423a4:	2805883a 	mov	r2,r5
 80423a8:	38c6b03a 	or	r3,r7,r3
 80423ac:	30c00115 	stw	r3,4(r6)
 80423b0:	003f9b06 	br	8042220 <__alt_data_end+0xfffe2e20>
 80423b4:	00c15504 	movi	r3,1364
 80423b8:	18801a36 	bltu	r3,r2,8042424 <_malloc_r+0x768>
 80423bc:	8804d4ba 	srli	r2,r17,18
 80423c0:	12001f44 	addi	r8,r2,125
 80423c4:	11c01f04 	addi	r7,r2,124
 80423c8:	4209883a 	add	r4,r8,r8
 80423cc:	003e5906 	br	8041d34 <__alt_data_end+0xfffe2934>
 80423d0:	ad400404 	addi	r21,r21,16
 80423d4:	003f1706 	br	8042034 <__alt_data_end+0xfffe2c34>
 80423d8:	00c01504 	movi	r3,84
 80423dc:	18802336 	bltu	r3,r2,804246c <_malloc_r+0x7b0>
 80423e0:	3804d33a 	srli	r2,r7,12
 80423e4:	11401bc4 	addi	r5,r2,111
 80423e8:	10c01b84 	addi	r3,r2,110
 80423ec:	294b883a 	add	r5,r5,r5
 80423f0:	003f7b06 	br	80421e0 <__alt_data_end+0xfffe2de0>
 80423f4:	9c000217 	ldw	r16,8(r19)
 80423f8:	00bfff04 	movi	r2,-4
 80423fc:	80c00117 	ldw	r3,4(r16)
 8042400:	1886703a 	and	r3,r3,r2
 8042404:	003f5306 	br	8042154 <__alt_data_end+0xfffe2d54>
 8042408:	3083ffcc 	andi	r2,r6,4095
 804240c:	103f181e 	bne	r2,zero,8042070 <__alt_data_end+0xfffe2c70>
 8042410:	99000217 	ldw	r4,8(r19)
 8042414:	b545883a 	add	r2,r22,r21
 8042418:	10800054 	ori	r2,r2,1
 804241c:	20800115 	stw	r2,4(r4)
 8042420:	003f3e06 	br	804211c <__alt_data_end+0xfffe2d1c>
 8042424:	01003f84 	movi	r4,254
 8042428:	02001fc4 	movi	r8,127
 804242c:	01c01f84 	movi	r7,126
 8042430:	003e4006 	br	8041d34 <__alt_data_end+0xfffe2934>
 8042434:	00820174 	movhi	r2,2053
 8042438:	10a54904 	addi	r2,r2,-27356
 804243c:	15000015 	stw	r20,0(r2)
 8042440:	003f1106 	br	8042088 <__alt_data_end+0xfffe2c88>
 8042444:	00800044 	movi	r2,1
 8042448:	002b883a 	mov	r21,zero
 804244c:	003f1f06 	br	80420cc <__alt_data_end+0xfffe2ccc>
 8042450:	81400204 	addi	r5,r16,8
 8042454:	9009883a 	mov	r4,r18
 8042458:	80437440 	call	8043744 <_free_r>
 804245c:	00820174 	movhi	r2,2053
 8042460:	10ac1604 	addi	r2,r2,-20392
 8042464:	10c00017 	ldw	r3,0(r2)
 8042468:	003f2c06 	br	804211c <__alt_data_end+0xfffe2d1c>
 804246c:	00c05504 	movi	r3,340
 8042470:	18800536 	bltu	r3,r2,8042488 <_malloc_r+0x7cc>
 8042474:	3804d3fa 	srli	r2,r7,15
 8042478:	11401e04 	addi	r5,r2,120
 804247c:	10c01dc4 	addi	r3,r2,119
 8042480:	294b883a 	add	r5,r5,r5
 8042484:	003f5606 	br	80421e0 <__alt_data_end+0xfffe2de0>
 8042488:	00c15504 	movi	r3,1364
 804248c:	18800536 	bltu	r3,r2,80424a4 <_malloc_r+0x7e8>
 8042490:	3804d4ba 	srli	r2,r7,18
 8042494:	11401f44 	addi	r5,r2,125
 8042498:	10c01f04 	addi	r3,r2,124
 804249c:	294b883a 	add	r5,r5,r5
 80424a0:	003f4f06 	br	80421e0 <__alt_data_end+0xfffe2de0>
 80424a4:	01403f84 	movi	r5,254
 80424a8:	00c01f84 	movi	r3,126
 80424ac:	003f4c06 	br	80421e0 <__alt_data_end+0xfffe2de0>
 80424b0:	98800117 	ldw	r2,4(r19)
 80424b4:	003fa006 	br	8042338 <__alt_data_end+0xfffe2f38>
 80424b8:	8808d0fa 	srli	r4,r17,3
 80424bc:	20800044 	addi	r2,r4,1
 80424c0:	1085883a 	add	r2,r2,r2
 80424c4:	003e9006 	br	8041f08 <__alt_data_end+0xfffe2b08>

080424c8 <memchr>:
 80424c8:	208000cc 	andi	r2,r4,3
 80424cc:	280f883a 	mov	r7,r5
 80424d0:	10003426 	beq	r2,zero,80425a4 <memchr+0xdc>
 80424d4:	30bfffc4 	addi	r2,r6,-1
 80424d8:	30001a26 	beq	r6,zero,8042544 <memchr+0x7c>
 80424dc:	20c00003 	ldbu	r3,0(r4)
 80424e0:	29803fcc 	andi	r6,r5,255
 80424e4:	30c0051e 	bne	r6,r3,80424fc <memchr+0x34>
 80424e8:	00001806 	br	804254c <memchr+0x84>
 80424ec:	10001526 	beq	r2,zero,8042544 <memchr+0x7c>
 80424f0:	20c00003 	ldbu	r3,0(r4)
 80424f4:	10bfffc4 	addi	r2,r2,-1
 80424f8:	30c01426 	beq	r6,r3,804254c <memchr+0x84>
 80424fc:	21000044 	addi	r4,r4,1
 8042500:	20c000cc 	andi	r3,r4,3
 8042504:	183ff91e 	bne	r3,zero,80424ec <__alt_data_end+0xfffe30ec>
 8042508:	020000c4 	movi	r8,3
 804250c:	40801136 	bltu	r8,r2,8042554 <memchr+0x8c>
 8042510:	10000c26 	beq	r2,zero,8042544 <memchr+0x7c>
 8042514:	20c00003 	ldbu	r3,0(r4)
 8042518:	29403fcc 	andi	r5,r5,255
 804251c:	28c00b26 	beq	r5,r3,804254c <memchr+0x84>
 8042520:	20c00044 	addi	r3,r4,1
 8042524:	39803fcc 	andi	r6,r7,255
 8042528:	2089883a 	add	r4,r4,r2
 804252c:	00000306 	br	804253c <memchr+0x74>
 8042530:	18c00044 	addi	r3,r3,1
 8042534:	197fffc3 	ldbu	r5,-1(r3)
 8042538:	31400526 	beq	r6,r5,8042550 <memchr+0x88>
 804253c:	1805883a 	mov	r2,r3
 8042540:	20fffb1e 	bne	r4,r3,8042530 <__alt_data_end+0xfffe3130>
 8042544:	0005883a 	mov	r2,zero
 8042548:	f800283a 	ret
 804254c:	2005883a 	mov	r2,r4
 8042550:	f800283a 	ret
 8042554:	28c03fcc 	andi	r3,r5,255
 8042558:	1812923a 	slli	r9,r3,8
 804255c:	02ffbff4 	movhi	r11,65279
 8042560:	02a02074 	movhi	r10,32897
 8042564:	48d2b03a 	or	r9,r9,r3
 8042568:	4806943a 	slli	r3,r9,16
 804256c:	5affbfc4 	addi	r11,r11,-257
 8042570:	52a02004 	addi	r10,r10,-32640
 8042574:	48d2b03a 	or	r9,r9,r3
 8042578:	20c00017 	ldw	r3,0(r4)
 804257c:	48c6f03a 	xor	r3,r9,r3
 8042580:	1acd883a 	add	r6,r3,r11
 8042584:	00c6303a 	nor	r3,zero,r3
 8042588:	30c6703a 	and	r3,r6,r3
 804258c:	1a86703a 	and	r3,r3,r10
 8042590:	183fe01e 	bne	r3,zero,8042514 <__alt_data_end+0xfffe3114>
 8042594:	10bfff04 	addi	r2,r2,-4
 8042598:	21000104 	addi	r4,r4,4
 804259c:	40bff636 	bltu	r8,r2,8042578 <__alt_data_end+0xfffe3178>
 80425a0:	003fdb06 	br	8042510 <__alt_data_end+0xfffe3110>
 80425a4:	3005883a 	mov	r2,r6
 80425a8:	003fd706 	br	8042508 <__alt_data_end+0xfffe3108>

080425ac <memcpy>:
 80425ac:	defffd04 	addi	sp,sp,-12
 80425b0:	dfc00215 	stw	ra,8(sp)
 80425b4:	dc400115 	stw	r17,4(sp)
 80425b8:	dc000015 	stw	r16,0(sp)
 80425bc:	00c003c4 	movi	r3,15
 80425c0:	2005883a 	mov	r2,r4
 80425c4:	1980452e 	bgeu	r3,r6,80426dc <memcpy+0x130>
 80425c8:	2906b03a 	or	r3,r5,r4
 80425cc:	18c000cc 	andi	r3,r3,3
 80425d0:	1800441e 	bne	r3,zero,80426e4 <memcpy+0x138>
 80425d4:	347ffc04 	addi	r17,r6,-16
 80425d8:	8822d13a 	srli	r17,r17,4
 80425dc:	28c00104 	addi	r3,r5,4
 80425e0:	23400104 	addi	r13,r4,4
 80425e4:	8820913a 	slli	r16,r17,4
 80425e8:	2b000204 	addi	r12,r5,8
 80425ec:	22c00204 	addi	r11,r4,8
 80425f0:	84000504 	addi	r16,r16,20
 80425f4:	2a800304 	addi	r10,r5,12
 80425f8:	22400304 	addi	r9,r4,12
 80425fc:	2c21883a 	add	r16,r5,r16
 8042600:	2811883a 	mov	r8,r5
 8042604:	200f883a 	mov	r7,r4
 8042608:	41000017 	ldw	r4,0(r8)
 804260c:	1fc00017 	ldw	ra,0(r3)
 8042610:	63c00017 	ldw	r15,0(r12)
 8042614:	39000015 	stw	r4,0(r7)
 8042618:	53800017 	ldw	r14,0(r10)
 804261c:	6fc00015 	stw	ra,0(r13)
 8042620:	5bc00015 	stw	r15,0(r11)
 8042624:	4b800015 	stw	r14,0(r9)
 8042628:	18c00404 	addi	r3,r3,16
 804262c:	39c00404 	addi	r7,r7,16
 8042630:	42000404 	addi	r8,r8,16
 8042634:	6b400404 	addi	r13,r13,16
 8042638:	63000404 	addi	r12,r12,16
 804263c:	5ac00404 	addi	r11,r11,16
 8042640:	52800404 	addi	r10,r10,16
 8042644:	4a400404 	addi	r9,r9,16
 8042648:	1c3fef1e 	bne	r3,r16,8042608 <__alt_data_end+0xfffe3208>
 804264c:	89c00044 	addi	r7,r17,1
 8042650:	380e913a 	slli	r7,r7,4
 8042654:	310003cc 	andi	r4,r6,15
 8042658:	02c000c4 	movi	r11,3
 804265c:	11c7883a 	add	r3,r2,r7
 8042660:	29cb883a 	add	r5,r5,r7
 8042664:	5900212e 	bgeu	r11,r4,80426ec <memcpy+0x140>
 8042668:	1813883a 	mov	r9,r3
 804266c:	2811883a 	mov	r8,r5
 8042670:	200f883a 	mov	r7,r4
 8042674:	42800017 	ldw	r10,0(r8)
 8042678:	4a400104 	addi	r9,r9,4
 804267c:	39ffff04 	addi	r7,r7,-4
 8042680:	4abfff15 	stw	r10,-4(r9)
 8042684:	42000104 	addi	r8,r8,4
 8042688:	59fffa36 	bltu	r11,r7,8042674 <__alt_data_end+0xfffe3274>
 804268c:	213fff04 	addi	r4,r4,-4
 8042690:	2008d0ba 	srli	r4,r4,2
 8042694:	318000cc 	andi	r6,r6,3
 8042698:	21000044 	addi	r4,r4,1
 804269c:	2109883a 	add	r4,r4,r4
 80426a0:	2109883a 	add	r4,r4,r4
 80426a4:	1907883a 	add	r3,r3,r4
 80426a8:	290b883a 	add	r5,r5,r4
 80426ac:	30000626 	beq	r6,zero,80426c8 <memcpy+0x11c>
 80426b0:	198d883a 	add	r6,r3,r6
 80426b4:	29c00003 	ldbu	r7,0(r5)
 80426b8:	18c00044 	addi	r3,r3,1
 80426bc:	29400044 	addi	r5,r5,1
 80426c0:	19ffffc5 	stb	r7,-1(r3)
 80426c4:	19bffb1e 	bne	r3,r6,80426b4 <__alt_data_end+0xfffe32b4>
 80426c8:	dfc00217 	ldw	ra,8(sp)
 80426cc:	dc400117 	ldw	r17,4(sp)
 80426d0:	dc000017 	ldw	r16,0(sp)
 80426d4:	dec00304 	addi	sp,sp,12
 80426d8:	f800283a 	ret
 80426dc:	2007883a 	mov	r3,r4
 80426e0:	003ff206 	br	80426ac <__alt_data_end+0xfffe32ac>
 80426e4:	2007883a 	mov	r3,r4
 80426e8:	003ff106 	br	80426b0 <__alt_data_end+0xfffe32b0>
 80426ec:	200d883a 	mov	r6,r4
 80426f0:	003fee06 	br	80426ac <__alt_data_end+0xfffe32ac>

080426f4 <memmove>:
 80426f4:	2005883a 	mov	r2,r4
 80426f8:	29000b2e 	bgeu	r5,r4,8042728 <memmove+0x34>
 80426fc:	298f883a 	add	r7,r5,r6
 8042700:	21c0092e 	bgeu	r4,r7,8042728 <memmove+0x34>
 8042704:	2187883a 	add	r3,r4,r6
 8042708:	198bc83a 	sub	r5,r3,r6
 804270c:	30004826 	beq	r6,zero,8042830 <memmove+0x13c>
 8042710:	39ffffc4 	addi	r7,r7,-1
 8042714:	39000003 	ldbu	r4,0(r7)
 8042718:	18ffffc4 	addi	r3,r3,-1
 804271c:	19000005 	stb	r4,0(r3)
 8042720:	28fffb1e 	bne	r5,r3,8042710 <__alt_data_end+0xfffe3310>
 8042724:	f800283a 	ret
 8042728:	00c003c4 	movi	r3,15
 804272c:	1980412e 	bgeu	r3,r6,8042834 <memmove+0x140>
 8042730:	2886b03a 	or	r3,r5,r2
 8042734:	18c000cc 	andi	r3,r3,3
 8042738:	1800401e 	bne	r3,zero,804283c <memmove+0x148>
 804273c:	33fffc04 	addi	r15,r6,-16
 8042740:	781ed13a 	srli	r15,r15,4
 8042744:	28c00104 	addi	r3,r5,4
 8042748:	13400104 	addi	r13,r2,4
 804274c:	781c913a 	slli	r14,r15,4
 8042750:	2b000204 	addi	r12,r5,8
 8042754:	12c00204 	addi	r11,r2,8
 8042758:	73800504 	addi	r14,r14,20
 804275c:	2a800304 	addi	r10,r5,12
 8042760:	12400304 	addi	r9,r2,12
 8042764:	2b9d883a 	add	r14,r5,r14
 8042768:	2811883a 	mov	r8,r5
 804276c:	100f883a 	mov	r7,r2
 8042770:	41000017 	ldw	r4,0(r8)
 8042774:	39c00404 	addi	r7,r7,16
 8042778:	18c00404 	addi	r3,r3,16
 804277c:	393ffc15 	stw	r4,-16(r7)
 8042780:	193ffc17 	ldw	r4,-16(r3)
 8042784:	6b400404 	addi	r13,r13,16
 8042788:	5ac00404 	addi	r11,r11,16
 804278c:	693ffc15 	stw	r4,-16(r13)
 8042790:	61000017 	ldw	r4,0(r12)
 8042794:	4a400404 	addi	r9,r9,16
 8042798:	42000404 	addi	r8,r8,16
 804279c:	593ffc15 	stw	r4,-16(r11)
 80427a0:	51000017 	ldw	r4,0(r10)
 80427a4:	63000404 	addi	r12,r12,16
 80427a8:	52800404 	addi	r10,r10,16
 80427ac:	493ffc15 	stw	r4,-16(r9)
 80427b0:	1bbfef1e 	bne	r3,r14,8042770 <__alt_data_end+0xfffe3370>
 80427b4:	79000044 	addi	r4,r15,1
 80427b8:	2008913a 	slli	r4,r4,4
 80427bc:	328003cc 	andi	r10,r6,15
 80427c0:	02c000c4 	movi	r11,3
 80427c4:	1107883a 	add	r3,r2,r4
 80427c8:	290b883a 	add	r5,r5,r4
 80427cc:	5a801e2e 	bgeu	r11,r10,8042848 <memmove+0x154>
 80427d0:	1813883a 	mov	r9,r3
 80427d4:	2811883a 	mov	r8,r5
 80427d8:	500f883a 	mov	r7,r10
 80427dc:	41000017 	ldw	r4,0(r8)
 80427e0:	4a400104 	addi	r9,r9,4
 80427e4:	39ffff04 	addi	r7,r7,-4
 80427e8:	493fff15 	stw	r4,-4(r9)
 80427ec:	42000104 	addi	r8,r8,4
 80427f0:	59fffa36 	bltu	r11,r7,80427dc <__alt_data_end+0xfffe33dc>
 80427f4:	513fff04 	addi	r4,r10,-4
 80427f8:	2008d0ba 	srli	r4,r4,2
 80427fc:	318000cc 	andi	r6,r6,3
 8042800:	21000044 	addi	r4,r4,1
 8042804:	2109883a 	add	r4,r4,r4
 8042808:	2109883a 	add	r4,r4,r4
 804280c:	1907883a 	add	r3,r3,r4
 8042810:	290b883a 	add	r5,r5,r4
 8042814:	30000b26 	beq	r6,zero,8042844 <memmove+0x150>
 8042818:	198d883a 	add	r6,r3,r6
 804281c:	29c00003 	ldbu	r7,0(r5)
 8042820:	18c00044 	addi	r3,r3,1
 8042824:	29400044 	addi	r5,r5,1
 8042828:	19ffffc5 	stb	r7,-1(r3)
 804282c:	19bffb1e 	bne	r3,r6,804281c <__alt_data_end+0xfffe341c>
 8042830:	f800283a 	ret
 8042834:	1007883a 	mov	r3,r2
 8042838:	003ff606 	br	8042814 <__alt_data_end+0xfffe3414>
 804283c:	1007883a 	mov	r3,r2
 8042840:	003ff506 	br	8042818 <__alt_data_end+0xfffe3418>
 8042844:	f800283a 	ret
 8042848:	500d883a 	mov	r6,r10
 804284c:	003ff106 	br	8042814 <__alt_data_end+0xfffe3414>

08042850 <memset>:
 8042850:	20c000cc 	andi	r3,r4,3
 8042854:	2005883a 	mov	r2,r4
 8042858:	18004426 	beq	r3,zero,804296c <memset+0x11c>
 804285c:	31ffffc4 	addi	r7,r6,-1
 8042860:	30004026 	beq	r6,zero,8042964 <memset+0x114>
 8042864:	2813883a 	mov	r9,r5
 8042868:	200d883a 	mov	r6,r4
 804286c:	2007883a 	mov	r3,r4
 8042870:	00000406 	br	8042884 <memset+0x34>
 8042874:	3a3fffc4 	addi	r8,r7,-1
 8042878:	31800044 	addi	r6,r6,1
 804287c:	38003926 	beq	r7,zero,8042964 <memset+0x114>
 8042880:	400f883a 	mov	r7,r8
 8042884:	18c00044 	addi	r3,r3,1
 8042888:	32400005 	stb	r9,0(r6)
 804288c:	1a0000cc 	andi	r8,r3,3
 8042890:	403ff81e 	bne	r8,zero,8042874 <__alt_data_end+0xfffe3474>
 8042894:	010000c4 	movi	r4,3
 8042898:	21c02d2e 	bgeu	r4,r7,8042950 <memset+0x100>
 804289c:	29003fcc 	andi	r4,r5,255
 80428a0:	200c923a 	slli	r6,r4,8
 80428a4:	3108b03a 	or	r4,r6,r4
 80428a8:	200c943a 	slli	r6,r4,16
 80428ac:	218cb03a 	or	r6,r4,r6
 80428b0:	010003c4 	movi	r4,15
 80428b4:	21c0182e 	bgeu	r4,r7,8042918 <memset+0xc8>
 80428b8:	3b3ffc04 	addi	r12,r7,-16
 80428bc:	6018d13a 	srli	r12,r12,4
 80428c0:	1a000104 	addi	r8,r3,4
 80428c4:	1ac00204 	addi	r11,r3,8
 80428c8:	6008913a 	slli	r4,r12,4
 80428cc:	1a800304 	addi	r10,r3,12
 80428d0:	1813883a 	mov	r9,r3
 80428d4:	21000504 	addi	r4,r4,20
 80428d8:	1909883a 	add	r4,r3,r4
 80428dc:	49800015 	stw	r6,0(r9)
 80428e0:	41800015 	stw	r6,0(r8)
 80428e4:	59800015 	stw	r6,0(r11)
 80428e8:	51800015 	stw	r6,0(r10)
 80428ec:	42000404 	addi	r8,r8,16
 80428f0:	4a400404 	addi	r9,r9,16
 80428f4:	5ac00404 	addi	r11,r11,16
 80428f8:	52800404 	addi	r10,r10,16
 80428fc:	413ff71e 	bne	r8,r4,80428dc <__alt_data_end+0xfffe34dc>
 8042900:	63000044 	addi	r12,r12,1
 8042904:	6018913a 	slli	r12,r12,4
 8042908:	39c003cc 	andi	r7,r7,15
 804290c:	010000c4 	movi	r4,3
 8042910:	1b07883a 	add	r3,r3,r12
 8042914:	21c00e2e 	bgeu	r4,r7,8042950 <memset+0x100>
 8042918:	1813883a 	mov	r9,r3
 804291c:	3811883a 	mov	r8,r7
 8042920:	010000c4 	movi	r4,3
 8042924:	49800015 	stw	r6,0(r9)
 8042928:	423fff04 	addi	r8,r8,-4
 804292c:	4a400104 	addi	r9,r9,4
 8042930:	223ffc36 	bltu	r4,r8,8042924 <__alt_data_end+0xfffe3524>
 8042934:	393fff04 	addi	r4,r7,-4
 8042938:	2008d0ba 	srli	r4,r4,2
 804293c:	39c000cc 	andi	r7,r7,3
 8042940:	21000044 	addi	r4,r4,1
 8042944:	2109883a 	add	r4,r4,r4
 8042948:	2109883a 	add	r4,r4,r4
 804294c:	1907883a 	add	r3,r3,r4
 8042950:	38000526 	beq	r7,zero,8042968 <memset+0x118>
 8042954:	19cf883a 	add	r7,r3,r7
 8042958:	19400005 	stb	r5,0(r3)
 804295c:	18c00044 	addi	r3,r3,1
 8042960:	38fffd1e 	bne	r7,r3,8042958 <__alt_data_end+0xfffe3558>
 8042964:	f800283a 	ret
 8042968:	f800283a 	ret
 804296c:	2007883a 	mov	r3,r4
 8042970:	300f883a 	mov	r7,r6
 8042974:	003fc706 	br	8042894 <__alt_data_end+0xfffe3494>

08042978 <_realloc_r>:
 8042978:	defff604 	addi	sp,sp,-40
 804297c:	dc800215 	stw	r18,8(sp)
 8042980:	dfc00915 	stw	ra,36(sp)
 8042984:	df000815 	stw	fp,32(sp)
 8042988:	ddc00715 	stw	r23,28(sp)
 804298c:	dd800615 	stw	r22,24(sp)
 8042990:	dd400515 	stw	r21,20(sp)
 8042994:	dd000415 	stw	r20,16(sp)
 8042998:	dcc00315 	stw	r19,12(sp)
 804299c:	dc400115 	stw	r17,4(sp)
 80429a0:	dc000015 	stw	r16,0(sp)
 80429a4:	3025883a 	mov	r18,r6
 80429a8:	2800b726 	beq	r5,zero,8042c88 <_realloc_r+0x310>
 80429ac:	282b883a 	mov	r21,r5
 80429b0:	2029883a 	mov	r20,r4
 80429b4:	80445fc0 	call	80445fc <__malloc_lock>
 80429b8:	a8bfff17 	ldw	r2,-4(r21)
 80429bc:	043fff04 	movi	r16,-4
 80429c0:	90c002c4 	addi	r3,r18,11
 80429c4:	01000584 	movi	r4,22
 80429c8:	acfffe04 	addi	r19,r21,-8
 80429cc:	1420703a 	and	r16,r2,r16
 80429d0:	20c0332e 	bgeu	r4,r3,8042aa0 <_realloc_r+0x128>
 80429d4:	047ffe04 	movi	r17,-8
 80429d8:	1c62703a 	and	r17,r3,r17
 80429dc:	8807883a 	mov	r3,r17
 80429e0:	88005816 	blt	r17,zero,8042b44 <_realloc_r+0x1cc>
 80429e4:	8c805736 	bltu	r17,r18,8042b44 <_realloc_r+0x1cc>
 80429e8:	80c0300e 	bge	r16,r3,8042aac <_realloc_r+0x134>
 80429ec:	07020134 	movhi	fp,2052
 80429f0:	e71fae04 	addi	fp,fp,32440
 80429f4:	e1c00217 	ldw	r7,8(fp)
 80429f8:	9c09883a 	add	r4,r19,r16
 80429fc:	22000117 	ldw	r8,4(r4)
 8042a00:	21c06326 	beq	r4,r7,8042b90 <_realloc_r+0x218>
 8042a04:	017fff84 	movi	r5,-2
 8042a08:	414a703a 	and	r5,r8,r5
 8042a0c:	214b883a 	add	r5,r4,r5
 8042a10:	29800117 	ldw	r6,4(r5)
 8042a14:	3180004c 	andi	r6,r6,1
 8042a18:	30003f26 	beq	r6,zero,8042b18 <_realloc_r+0x1a0>
 8042a1c:	1080004c 	andi	r2,r2,1
 8042a20:	10008326 	beq	r2,zero,8042c30 <_realloc_r+0x2b8>
 8042a24:	900b883a 	mov	r5,r18
 8042a28:	a009883a 	mov	r4,r20
 8042a2c:	8041cbc0 	call	8041cbc <_malloc_r>
 8042a30:	1025883a 	mov	r18,r2
 8042a34:	10011e26 	beq	r2,zero,8042eb0 <_realloc_r+0x538>
 8042a38:	a93fff17 	ldw	r4,-4(r21)
 8042a3c:	10fffe04 	addi	r3,r2,-8
 8042a40:	00bfff84 	movi	r2,-2
 8042a44:	2084703a 	and	r2,r4,r2
 8042a48:	9885883a 	add	r2,r19,r2
 8042a4c:	1880ee26 	beq	r3,r2,8042e08 <_realloc_r+0x490>
 8042a50:	81bfff04 	addi	r6,r16,-4
 8042a54:	00800904 	movi	r2,36
 8042a58:	1180b836 	bltu	r2,r6,8042d3c <_realloc_r+0x3c4>
 8042a5c:	00c004c4 	movi	r3,19
 8042a60:	19809636 	bltu	r3,r6,8042cbc <_realloc_r+0x344>
 8042a64:	9005883a 	mov	r2,r18
 8042a68:	a807883a 	mov	r3,r21
 8042a6c:	19000017 	ldw	r4,0(r3)
 8042a70:	11000015 	stw	r4,0(r2)
 8042a74:	19000117 	ldw	r4,4(r3)
 8042a78:	11000115 	stw	r4,4(r2)
 8042a7c:	18c00217 	ldw	r3,8(r3)
 8042a80:	10c00215 	stw	r3,8(r2)
 8042a84:	a80b883a 	mov	r5,r21
 8042a88:	a009883a 	mov	r4,r20
 8042a8c:	80437440 	call	8043744 <_free_r>
 8042a90:	a009883a 	mov	r4,r20
 8042a94:	80446200 	call	8044620 <__malloc_unlock>
 8042a98:	9005883a 	mov	r2,r18
 8042a9c:	00001206 	br	8042ae8 <_realloc_r+0x170>
 8042aa0:	00c00404 	movi	r3,16
 8042aa4:	1823883a 	mov	r17,r3
 8042aa8:	003fce06 	br	80429e4 <__alt_data_end+0xfffe35e4>
 8042aac:	a825883a 	mov	r18,r21
 8042ab0:	8445c83a 	sub	r2,r16,r17
 8042ab4:	00c003c4 	movi	r3,15
 8042ab8:	18802636 	bltu	r3,r2,8042b54 <_realloc_r+0x1dc>
 8042abc:	99800117 	ldw	r6,4(r19)
 8042ac0:	9c07883a 	add	r3,r19,r16
 8042ac4:	3180004c 	andi	r6,r6,1
 8042ac8:	3420b03a 	or	r16,r6,r16
 8042acc:	9c000115 	stw	r16,4(r19)
 8042ad0:	18800117 	ldw	r2,4(r3)
 8042ad4:	10800054 	ori	r2,r2,1
 8042ad8:	18800115 	stw	r2,4(r3)
 8042adc:	a009883a 	mov	r4,r20
 8042ae0:	80446200 	call	8044620 <__malloc_unlock>
 8042ae4:	9005883a 	mov	r2,r18
 8042ae8:	dfc00917 	ldw	ra,36(sp)
 8042aec:	df000817 	ldw	fp,32(sp)
 8042af0:	ddc00717 	ldw	r23,28(sp)
 8042af4:	dd800617 	ldw	r22,24(sp)
 8042af8:	dd400517 	ldw	r21,20(sp)
 8042afc:	dd000417 	ldw	r20,16(sp)
 8042b00:	dcc00317 	ldw	r19,12(sp)
 8042b04:	dc800217 	ldw	r18,8(sp)
 8042b08:	dc400117 	ldw	r17,4(sp)
 8042b0c:	dc000017 	ldw	r16,0(sp)
 8042b10:	dec00a04 	addi	sp,sp,40
 8042b14:	f800283a 	ret
 8042b18:	017fff04 	movi	r5,-4
 8042b1c:	414a703a 	and	r5,r8,r5
 8042b20:	814d883a 	add	r6,r16,r5
 8042b24:	30c01f16 	blt	r6,r3,8042ba4 <_realloc_r+0x22c>
 8042b28:	20800317 	ldw	r2,12(r4)
 8042b2c:	20c00217 	ldw	r3,8(r4)
 8042b30:	a825883a 	mov	r18,r21
 8042b34:	3021883a 	mov	r16,r6
 8042b38:	18800315 	stw	r2,12(r3)
 8042b3c:	10c00215 	stw	r3,8(r2)
 8042b40:	003fdb06 	br	8042ab0 <__alt_data_end+0xfffe36b0>
 8042b44:	00800304 	movi	r2,12
 8042b48:	a0800015 	stw	r2,0(r20)
 8042b4c:	0005883a 	mov	r2,zero
 8042b50:	003fe506 	br	8042ae8 <__alt_data_end+0xfffe36e8>
 8042b54:	98c00117 	ldw	r3,4(r19)
 8042b58:	9c4b883a 	add	r5,r19,r17
 8042b5c:	11000054 	ori	r4,r2,1
 8042b60:	18c0004c 	andi	r3,r3,1
 8042b64:	1c62b03a 	or	r17,r3,r17
 8042b68:	9c400115 	stw	r17,4(r19)
 8042b6c:	29000115 	stw	r4,4(r5)
 8042b70:	2885883a 	add	r2,r5,r2
 8042b74:	10c00117 	ldw	r3,4(r2)
 8042b78:	29400204 	addi	r5,r5,8
 8042b7c:	a009883a 	mov	r4,r20
 8042b80:	18c00054 	ori	r3,r3,1
 8042b84:	10c00115 	stw	r3,4(r2)
 8042b88:	80437440 	call	8043744 <_free_r>
 8042b8c:	003fd306 	br	8042adc <__alt_data_end+0xfffe36dc>
 8042b90:	017fff04 	movi	r5,-4
 8042b94:	414a703a 	and	r5,r8,r5
 8042b98:	89800404 	addi	r6,r17,16
 8042b9c:	8151883a 	add	r8,r16,r5
 8042ba0:	4180590e 	bge	r8,r6,8042d08 <_realloc_r+0x390>
 8042ba4:	1080004c 	andi	r2,r2,1
 8042ba8:	103f9e1e 	bne	r2,zero,8042a24 <__alt_data_end+0xfffe3624>
 8042bac:	adbffe17 	ldw	r22,-8(r21)
 8042bb0:	00bfff04 	movi	r2,-4
 8042bb4:	9dadc83a 	sub	r22,r19,r22
 8042bb8:	b1800117 	ldw	r6,4(r22)
 8042bbc:	3084703a 	and	r2,r6,r2
 8042bc0:	20002026 	beq	r4,zero,8042c44 <_realloc_r+0x2cc>
 8042bc4:	80af883a 	add	r23,r16,r2
 8042bc8:	b96f883a 	add	r23,r23,r5
 8042bcc:	21c05f26 	beq	r4,r7,8042d4c <_realloc_r+0x3d4>
 8042bd0:	b8c01c16 	blt	r23,r3,8042c44 <_realloc_r+0x2cc>
 8042bd4:	20800317 	ldw	r2,12(r4)
 8042bd8:	20c00217 	ldw	r3,8(r4)
 8042bdc:	81bfff04 	addi	r6,r16,-4
 8042be0:	01000904 	movi	r4,36
 8042be4:	18800315 	stw	r2,12(r3)
 8042be8:	10c00215 	stw	r3,8(r2)
 8042bec:	b0c00217 	ldw	r3,8(r22)
 8042bf0:	b0800317 	ldw	r2,12(r22)
 8042bf4:	b4800204 	addi	r18,r22,8
 8042bf8:	18800315 	stw	r2,12(r3)
 8042bfc:	10c00215 	stw	r3,8(r2)
 8042c00:	21801b36 	bltu	r4,r6,8042c70 <_realloc_r+0x2f8>
 8042c04:	008004c4 	movi	r2,19
 8042c08:	1180352e 	bgeu	r2,r6,8042ce0 <_realloc_r+0x368>
 8042c0c:	a8800017 	ldw	r2,0(r21)
 8042c10:	b0800215 	stw	r2,8(r22)
 8042c14:	a8800117 	ldw	r2,4(r21)
 8042c18:	b0800315 	stw	r2,12(r22)
 8042c1c:	008006c4 	movi	r2,27
 8042c20:	11807f36 	bltu	r2,r6,8042e20 <_realloc_r+0x4a8>
 8042c24:	b0800404 	addi	r2,r22,16
 8042c28:	ad400204 	addi	r21,r21,8
 8042c2c:	00002d06 	br	8042ce4 <_realloc_r+0x36c>
 8042c30:	adbffe17 	ldw	r22,-8(r21)
 8042c34:	00bfff04 	movi	r2,-4
 8042c38:	9dadc83a 	sub	r22,r19,r22
 8042c3c:	b1000117 	ldw	r4,4(r22)
 8042c40:	2084703a 	and	r2,r4,r2
 8042c44:	b03f7726 	beq	r22,zero,8042a24 <__alt_data_end+0xfffe3624>
 8042c48:	80af883a 	add	r23,r16,r2
 8042c4c:	b8ff7516 	blt	r23,r3,8042a24 <__alt_data_end+0xfffe3624>
 8042c50:	b0800317 	ldw	r2,12(r22)
 8042c54:	b0c00217 	ldw	r3,8(r22)
 8042c58:	81bfff04 	addi	r6,r16,-4
 8042c5c:	01000904 	movi	r4,36
 8042c60:	18800315 	stw	r2,12(r3)
 8042c64:	10c00215 	stw	r3,8(r2)
 8042c68:	b4800204 	addi	r18,r22,8
 8042c6c:	21bfe52e 	bgeu	r4,r6,8042c04 <__alt_data_end+0xfffe3804>
 8042c70:	a80b883a 	mov	r5,r21
 8042c74:	9009883a 	mov	r4,r18
 8042c78:	80426f40 	call	80426f4 <memmove>
 8042c7c:	b821883a 	mov	r16,r23
 8042c80:	b027883a 	mov	r19,r22
 8042c84:	003f8a06 	br	8042ab0 <__alt_data_end+0xfffe36b0>
 8042c88:	300b883a 	mov	r5,r6
 8042c8c:	dfc00917 	ldw	ra,36(sp)
 8042c90:	df000817 	ldw	fp,32(sp)
 8042c94:	ddc00717 	ldw	r23,28(sp)
 8042c98:	dd800617 	ldw	r22,24(sp)
 8042c9c:	dd400517 	ldw	r21,20(sp)
 8042ca0:	dd000417 	ldw	r20,16(sp)
 8042ca4:	dcc00317 	ldw	r19,12(sp)
 8042ca8:	dc800217 	ldw	r18,8(sp)
 8042cac:	dc400117 	ldw	r17,4(sp)
 8042cb0:	dc000017 	ldw	r16,0(sp)
 8042cb4:	dec00a04 	addi	sp,sp,40
 8042cb8:	8041cbc1 	jmpi	8041cbc <_malloc_r>
 8042cbc:	a8c00017 	ldw	r3,0(r21)
 8042cc0:	90c00015 	stw	r3,0(r18)
 8042cc4:	a8c00117 	ldw	r3,4(r21)
 8042cc8:	90c00115 	stw	r3,4(r18)
 8042ccc:	00c006c4 	movi	r3,27
 8042cd0:	19804536 	bltu	r3,r6,8042de8 <_realloc_r+0x470>
 8042cd4:	90800204 	addi	r2,r18,8
 8042cd8:	a8c00204 	addi	r3,r21,8
 8042cdc:	003f6306 	br	8042a6c <__alt_data_end+0xfffe366c>
 8042ce0:	9005883a 	mov	r2,r18
 8042ce4:	a8c00017 	ldw	r3,0(r21)
 8042ce8:	b821883a 	mov	r16,r23
 8042cec:	b027883a 	mov	r19,r22
 8042cf0:	10c00015 	stw	r3,0(r2)
 8042cf4:	a8c00117 	ldw	r3,4(r21)
 8042cf8:	10c00115 	stw	r3,4(r2)
 8042cfc:	a8c00217 	ldw	r3,8(r21)
 8042d00:	10c00215 	stw	r3,8(r2)
 8042d04:	003f6a06 	br	8042ab0 <__alt_data_end+0xfffe36b0>
 8042d08:	9c67883a 	add	r19,r19,r17
 8042d0c:	4445c83a 	sub	r2,r8,r17
 8042d10:	e4c00215 	stw	r19,8(fp)
 8042d14:	10800054 	ori	r2,r2,1
 8042d18:	98800115 	stw	r2,4(r19)
 8042d1c:	a8bfff17 	ldw	r2,-4(r21)
 8042d20:	a009883a 	mov	r4,r20
 8042d24:	1080004c 	andi	r2,r2,1
 8042d28:	1462b03a 	or	r17,r2,r17
 8042d2c:	ac7fff15 	stw	r17,-4(r21)
 8042d30:	80446200 	call	8044620 <__malloc_unlock>
 8042d34:	a805883a 	mov	r2,r21
 8042d38:	003f6b06 	br	8042ae8 <__alt_data_end+0xfffe36e8>
 8042d3c:	a80b883a 	mov	r5,r21
 8042d40:	9009883a 	mov	r4,r18
 8042d44:	80426f40 	call	80426f4 <memmove>
 8042d48:	003f4e06 	br	8042a84 <__alt_data_end+0xfffe3684>
 8042d4c:	89000404 	addi	r4,r17,16
 8042d50:	b93fbc16 	blt	r23,r4,8042c44 <__alt_data_end+0xfffe3844>
 8042d54:	b0800317 	ldw	r2,12(r22)
 8042d58:	b0c00217 	ldw	r3,8(r22)
 8042d5c:	81bfff04 	addi	r6,r16,-4
 8042d60:	01000904 	movi	r4,36
 8042d64:	18800315 	stw	r2,12(r3)
 8042d68:	10c00215 	stw	r3,8(r2)
 8042d6c:	b4800204 	addi	r18,r22,8
 8042d70:	21804336 	bltu	r4,r6,8042e80 <_realloc_r+0x508>
 8042d74:	008004c4 	movi	r2,19
 8042d78:	11803f2e 	bgeu	r2,r6,8042e78 <_realloc_r+0x500>
 8042d7c:	a8800017 	ldw	r2,0(r21)
 8042d80:	b0800215 	stw	r2,8(r22)
 8042d84:	a8800117 	ldw	r2,4(r21)
 8042d88:	b0800315 	stw	r2,12(r22)
 8042d8c:	008006c4 	movi	r2,27
 8042d90:	11803f36 	bltu	r2,r6,8042e90 <_realloc_r+0x518>
 8042d94:	b0800404 	addi	r2,r22,16
 8042d98:	ad400204 	addi	r21,r21,8
 8042d9c:	a8c00017 	ldw	r3,0(r21)
 8042da0:	10c00015 	stw	r3,0(r2)
 8042da4:	a8c00117 	ldw	r3,4(r21)
 8042da8:	10c00115 	stw	r3,4(r2)
 8042dac:	a8c00217 	ldw	r3,8(r21)
 8042db0:	10c00215 	stw	r3,8(r2)
 8042db4:	b447883a 	add	r3,r22,r17
 8042db8:	bc45c83a 	sub	r2,r23,r17
 8042dbc:	e0c00215 	stw	r3,8(fp)
 8042dc0:	10800054 	ori	r2,r2,1
 8042dc4:	18800115 	stw	r2,4(r3)
 8042dc8:	b0800117 	ldw	r2,4(r22)
 8042dcc:	a009883a 	mov	r4,r20
 8042dd0:	1080004c 	andi	r2,r2,1
 8042dd4:	1462b03a 	or	r17,r2,r17
 8042dd8:	b4400115 	stw	r17,4(r22)
 8042ddc:	80446200 	call	8044620 <__malloc_unlock>
 8042de0:	9005883a 	mov	r2,r18
 8042de4:	003f4006 	br	8042ae8 <__alt_data_end+0xfffe36e8>
 8042de8:	a8c00217 	ldw	r3,8(r21)
 8042dec:	90c00215 	stw	r3,8(r18)
 8042df0:	a8c00317 	ldw	r3,12(r21)
 8042df4:	90c00315 	stw	r3,12(r18)
 8042df8:	30801126 	beq	r6,r2,8042e40 <_realloc_r+0x4c8>
 8042dfc:	90800404 	addi	r2,r18,16
 8042e00:	a8c00404 	addi	r3,r21,16
 8042e04:	003f1906 	br	8042a6c <__alt_data_end+0xfffe366c>
 8042e08:	90ffff17 	ldw	r3,-4(r18)
 8042e0c:	00bfff04 	movi	r2,-4
 8042e10:	a825883a 	mov	r18,r21
 8042e14:	1884703a 	and	r2,r3,r2
 8042e18:	80a1883a 	add	r16,r16,r2
 8042e1c:	003f2406 	br	8042ab0 <__alt_data_end+0xfffe36b0>
 8042e20:	a8800217 	ldw	r2,8(r21)
 8042e24:	b0800415 	stw	r2,16(r22)
 8042e28:	a8800317 	ldw	r2,12(r21)
 8042e2c:	b0800515 	stw	r2,20(r22)
 8042e30:	31000a26 	beq	r6,r4,8042e5c <_realloc_r+0x4e4>
 8042e34:	b0800604 	addi	r2,r22,24
 8042e38:	ad400404 	addi	r21,r21,16
 8042e3c:	003fa906 	br	8042ce4 <__alt_data_end+0xfffe38e4>
 8042e40:	a9000417 	ldw	r4,16(r21)
 8042e44:	90800604 	addi	r2,r18,24
 8042e48:	a8c00604 	addi	r3,r21,24
 8042e4c:	91000415 	stw	r4,16(r18)
 8042e50:	a9000517 	ldw	r4,20(r21)
 8042e54:	91000515 	stw	r4,20(r18)
 8042e58:	003f0406 	br	8042a6c <__alt_data_end+0xfffe366c>
 8042e5c:	a8c00417 	ldw	r3,16(r21)
 8042e60:	ad400604 	addi	r21,r21,24
 8042e64:	b0800804 	addi	r2,r22,32
 8042e68:	b0c00615 	stw	r3,24(r22)
 8042e6c:	a8ffff17 	ldw	r3,-4(r21)
 8042e70:	b0c00715 	stw	r3,28(r22)
 8042e74:	003f9b06 	br	8042ce4 <__alt_data_end+0xfffe38e4>
 8042e78:	9005883a 	mov	r2,r18
 8042e7c:	003fc706 	br	8042d9c <__alt_data_end+0xfffe399c>
 8042e80:	a80b883a 	mov	r5,r21
 8042e84:	9009883a 	mov	r4,r18
 8042e88:	80426f40 	call	80426f4 <memmove>
 8042e8c:	003fc906 	br	8042db4 <__alt_data_end+0xfffe39b4>
 8042e90:	a8800217 	ldw	r2,8(r21)
 8042e94:	b0800415 	stw	r2,16(r22)
 8042e98:	a8800317 	ldw	r2,12(r21)
 8042e9c:	b0800515 	stw	r2,20(r22)
 8042ea0:	31000726 	beq	r6,r4,8042ec0 <_realloc_r+0x548>
 8042ea4:	b0800604 	addi	r2,r22,24
 8042ea8:	ad400404 	addi	r21,r21,16
 8042eac:	003fbb06 	br	8042d9c <__alt_data_end+0xfffe399c>
 8042eb0:	a009883a 	mov	r4,r20
 8042eb4:	80446200 	call	8044620 <__malloc_unlock>
 8042eb8:	0005883a 	mov	r2,zero
 8042ebc:	003f0a06 	br	8042ae8 <__alt_data_end+0xfffe36e8>
 8042ec0:	a8c00417 	ldw	r3,16(r21)
 8042ec4:	ad400604 	addi	r21,r21,24
 8042ec8:	b0800804 	addi	r2,r22,32
 8042ecc:	b0c00615 	stw	r3,24(r22)
 8042ed0:	a8ffff17 	ldw	r3,-4(r21)
 8042ed4:	b0c00715 	stw	r3,28(r22)
 8042ed8:	003fb006 	br	8042d9c <__alt_data_end+0xfffe399c>

08042edc <_sbrk_r>:
 8042edc:	defffd04 	addi	sp,sp,-12
 8042ee0:	dc000015 	stw	r16,0(sp)
 8042ee4:	04020174 	movhi	r16,2053
 8042ee8:	dc400115 	stw	r17,4(sp)
 8042eec:	842c0804 	addi	r16,r16,-20448
 8042ef0:	2023883a 	mov	r17,r4
 8042ef4:	2809883a 	mov	r4,r5
 8042ef8:	dfc00215 	stw	ra,8(sp)
 8042efc:	80000015 	stw	zero,0(r16)
 8042f00:	80448080 	call	8044808 <sbrk>
 8042f04:	00ffffc4 	movi	r3,-1
 8042f08:	10c00526 	beq	r2,r3,8042f20 <_sbrk_r+0x44>
 8042f0c:	dfc00217 	ldw	ra,8(sp)
 8042f10:	dc400117 	ldw	r17,4(sp)
 8042f14:	dc000017 	ldw	r16,0(sp)
 8042f18:	dec00304 	addi	sp,sp,12
 8042f1c:	f800283a 	ret
 8042f20:	80c00017 	ldw	r3,0(r16)
 8042f24:	183ff926 	beq	r3,zero,8042f0c <__alt_data_end+0xfffe3b0c>
 8042f28:	88c00015 	stw	r3,0(r17)
 8042f2c:	003ff706 	br	8042f0c <__alt_data_end+0xfffe3b0c>

08042f30 <__sread>:
 8042f30:	defffe04 	addi	sp,sp,-8
 8042f34:	dc000015 	stw	r16,0(sp)
 8042f38:	2821883a 	mov	r16,r5
 8042f3c:	2940038f 	ldh	r5,14(r5)
 8042f40:	dfc00115 	stw	ra,4(sp)
 8042f44:	8043c700 	call	8043c70 <_read_r>
 8042f48:	10000716 	blt	r2,zero,8042f68 <__sread+0x38>
 8042f4c:	80c01417 	ldw	r3,80(r16)
 8042f50:	1887883a 	add	r3,r3,r2
 8042f54:	80c01415 	stw	r3,80(r16)
 8042f58:	dfc00117 	ldw	ra,4(sp)
 8042f5c:	dc000017 	ldw	r16,0(sp)
 8042f60:	dec00204 	addi	sp,sp,8
 8042f64:	f800283a 	ret
 8042f68:	80c0030b 	ldhu	r3,12(r16)
 8042f6c:	18fbffcc 	andi	r3,r3,61439
 8042f70:	80c0030d 	sth	r3,12(r16)
 8042f74:	dfc00117 	ldw	ra,4(sp)
 8042f78:	dc000017 	ldw	r16,0(sp)
 8042f7c:	dec00204 	addi	sp,sp,8
 8042f80:	f800283a 	ret

08042f84 <__seofread>:
 8042f84:	0005883a 	mov	r2,zero
 8042f88:	f800283a 	ret

08042f8c <__swrite>:
 8042f8c:	2880030b 	ldhu	r2,12(r5)
 8042f90:	defffb04 	addi	sp,sp,-20
 8042f94:	dcc00315 	stw	r19,12(sp)
 8042f98:	dc800215 	stw	r18,8(sp)
 8042f9c:	dc400115 	stw	r17,4(sp)
 8042fa0:	dc000015 	stw	r16,0(sp)
 8042fa4:	dfc00415 	stw	ra,16(sp)
 8042fa8:	10c0400c 	andi	r3,r2,256
 8042fac:	2821883a 	mov	r16,r5
 8042fb0:	2023883a 	mov	r17,r4
 8042fb4:	3025883a 	mov	r18,r6
 8042fb8:	3827883a 	mov	r19,r7
 8042fbc:	18000526 	beq	r3,zero,8042fd4 <__swrite+0x48>
 8042fc0:	2940038f 	ldh	r5,14(r5)
 8042fc4:	01c00084 	movi	r7,2
 8042fc8:	000d883a 	mov	r6,zero
 8042fcc:	8043a540 	call	8043a54 <_lseek_r>
 8042fd0:	8080030b 	ldhu	r2,12(r16)
 8042fd4:	8140038f 	ldh	r5,14(r16)
 8042fd8:	10bbffcc 	andi	r2,r2,61439
 8042fdc:	980f883a 	mov	r7,r19
 8042fe0:	900d883a 	mov	r6,r18
 8042fe4:	8809883a 	mov	r4,r17
 8042fe8:	8080030d 	sth	r2,12(r16)
 8042fec:	dfc00417 	ldw	ra,16(sp)
 8042ff0:	dcc00317 	ldw	r19,12(sp)
 8042ff4:	dc800217 	ldw	r18,8(sp)
 8042ff8:	dc400117 	ldw	r17,4(sp)
 8042ffc:	dc000017 	ldw	r16,0(sp)
 8043000:	dec00504 	addi	sp,sp,20
 8043004:	804306c1 	jmpi	804306c <_write_r>

08043008 <__sseek>:
 8043008:	defffe04 	addi	sp,sp,-8
 804300c:	dc000015 	stw	r16,0(sp)
 8043010:	2821883a 	mov	r16,r5
 8043014:	2940038f 	ldh	r5,14(r5)
 8043018:	dfc00115 	stw	ra,4(sp)
 804301c:	8043a540 	call	8043a54 <_lseek_r>
 8043020:	00ffffc4 	movi	r3,-1
 8043024:	10c00826 	beq	r2,r3,8043048 <__sseek+0x40>
 8043028:	80c0030b 	ldhu	r3,12(r16)
 804302c:	80801415 	stw	r2,80(r16)
 8043030:	18c40014 	ori	r3,r3,4096
 8043034:	80c0030d 	sth	r3,12(r16)
 8043038:	dfc00117 	ldw	ra,4(sp)
 804303c:	dc000017 	ldw	r16,0(sp)
 8043040:	dec00204 	addi	sp,sp,8
 8043044:	f800283a 	ret
 8043048:	80c0030b 	ldhu	r3,12(r16)
 804304c:	18fbffcc 	andi	r3,r3,61439
 8043050:	80c0030d 	sth	r3,12(r16)
 8043054:	dfc00117 	ldw	ra,4(sp)
 8043058:	dc000017 	ldw	r16,0(sp)
 804305c:	dec00204 	addi	sp,sp,8
 8043060:	f800283a 	ret

08043064 <__sclose>:
 8043064:	2940038f 	ldh	r5,14(r5)
 8043068:	80432201 	jmpi	8043220 <_close_r>

0804306c <_write_r>:
 804306c:	defffd04 	addi	sp,sp,-12
 8043070:	2805883a 	mov	r2,r5
 8043074:	dc000015 	stw	r16,0(sp)
 8043078:	04020174 	movhi	r16,2053
 804307c:	dc400115 	stw	r17,4(sp)
 8043080:	300b883a 	mov	r5,r6
 8043084:	842c0804 	addi	r16,r16,-20448
 8043088:	2023883a 	mov	r17,r4
 804308c:	380d883a 	mov	r6,r7
 8043090:	1009883a 	mov	r4,r2
 8043094:	dfc00215 	stw	ra,8(sp)
 8043098:	80000015 	stw	zero,0(r16)
 804309c:	8044ac80 	call	8044ac8 <write>
 80430a0:	00ffffc4 	movi	r3,-1
 80430a4:	10c00526 	beq	r2,r3,80430bc <_write_r+0x50>
 80430a8:	dfc00217 	ldw	ra,8(sp)
 80430ac:	dc400117 	ldw	r17,4(sp)
 80430b0:	dc000017 	ldw	r16,0(sp)
 80430b4:	dec00304 	addi	sp,sp,12
 80430b8:	f800283a 	ret
 80430bc:	80c00017 	ldw	r3,0(r16)
 80430c0:	183ff926 	beq	r3,zero,80430a8 <__alt_data_end+0xfffe3ca8>
 80430c4:	88c00015 	stw	r3,0(r17)
 80430c8:	003ff706 	br	80430a8 <__alt_data_end+0xfffe3ca8>

080430cc <__swsetup_r>:
 80430cc:	00820174 	movhi	r2,2053
 80430d0:	defffd04 	addi	sp,sp,-12
 80430d4:	10a54804 	addi	r2,r2,-27360
 80430d8:	dc400115 	stw	r17,4(sp)
 80430dc:	2023883a 	mov	r17,r4
 80430e0:	11000017 	ldw	r4,0(r2)
 80430e4:	dc000015 	stw	r16,0(sp)
 80430e8:	dfc00215 	stw	ra,8(sp)
 80430ec:	2821883a 	mov	r16,r5
 80430f0:	20000226 	beq	r4,zero,80430fc <__swsetup_r+0x30>
 80430f4:	20800e17 	ldw	r2,56(r4)
 80430f8:	10003126 	beq	r2,zero,80431c0 <__swsetup_r+0xf4>
 80430fc:	8080030b 	ldhu	r2,12(r16)
 8043100:	10c0020c 	andi	r3,r2,8
 8043104:	1009883a 	mov	r4,r2
 8043108:	18000f26 	beq	r3,zero,8043148 <__swsetup_r+0x7c>
 804310c:	80c00417 	ldw	r3,16(r16)
 8043110:	18001526 	beq	r3,zero,8043168 <__swsetup_r+0x9c>
 8043114:	1100004c 	andi	r4,r2,1
 8043118:	20001c1e 	bne	r4,zero,804318c <__swsetup_r+0xc0>
 804311c:	1080008c 	andi	r2,r2,2
 8043120:	1000291e 	bne	r2,zero,80431c8 <__swsetup_r+0xfc>
 8043124:	80800517 	ldw	r2,20(r16)
 8043128:	80800215 	stw	r2,8(r16)
 804312c:	18001c26 	beq	r3,zero,80431a0 <__swsetup_r+0xd4>
 8043130:	0005883a 	mov	r2,zero
 8043134:	dfc00217 	ldw	ra,8(sp)
 8043138:	dc400117 	ldw	r17,4(sp)
 804313c:	dc000017 	ldw	r16,0(sp)
 8043140:	dec00304 	addi	sp,sp,12
 8043144:	f800283a 	ret
 8043148:	2080040c 	andi	r2,r4,16
 804314c:	10002e26 	beq	r2,zero,8043208 <__swsetup_r+0x13c>
 8043150:	2080010c 	andi	r2,r4,4
 8043154:	10001e1e 	bne	r2,zero,80431d0 <__swsetup_r+0x104>
 8043158:	80c00417 	ldw	r3,16(r16)
 804315c:	20800214 	ori	r2,r4,8
 8043160:	8080030d 	sth	r2,12(r16)
 8043164:	183feb1e 	bne	r3,zero,8043114 <__alt_data_end+0xfffe3d14>
 8043168:	1100a00c 	andi	r4,r2,640
 804316c:	01408004 	movi	r5,512
 8043170:	217fe826 	beq	r4,r5,8043114 <__alt_data_end+0xfffe3d14>
 8043174:	800b883a 	mov	r5,r16
 8043178:	8809883a 	mov	r4,r17
 804317c:	8043ab40 	call	8043ab4 <__smakebuf_r>
 8043180:	8080030b 	ldhu	r2,12(r16)
 8043184:	80c00417 	ldw	r3,16(r16)
 8043188:	003fe206 	br	8043114 <__alt_data_end+0xfffe3d14>
 804318c:	80800517 	ldw	r2,20(r16)
 8043190:	80000215 	stw	zero,8(r16)
 8043194:	0085c83a 	sub	r2,zero,r2
 8043198:	80800615 	stw	r2,24(r16)
 804319c:	183fe41e 	bne	r3,zero,8043130 <__alt_data_end+0xfffe3d30>
 80431a0:	80c0030b 	ldhu	r3,12(r16)
 80431a4:	0005883a 	mov	r2,zero
 80431a8:	1900200c 	andi	r4,r3,128
 80431ac:	203fe126 	beq	r4,zero,8043134 <__alt_data_end+0xfffe3d34>
 80431b0:	18c01014 	ori	r3,r3,64
 80431b4:	80c0030d 	sth	r3,12(r16)
 80431b8:	00bfffc4 	movi	r2,-1
 80431bc:	003fdd06 	br	8043134 <__alt_data_end+0xfffe3d34>
 80431c0:	804161c0 	call	804161c <__sinit>
 80431c4:	003fcd06 	br	80430fc <__alt_data_end+0xfffe3cfc>
 80431c8:	0005883a 	mov	r2,zero
 80431cc:	003fd606 	br	8043128 <__alt_data_end+0xfffe3d28>
 80431d0:	81400c17 	ldw	r5,48(r16)
 80431d4:	28000626 	beq	r5,zero,80431f0 <__swsetup_r+0x124>
 80431d8:	80801004 	addi	r2,r16,64
 80431dc:	28800326 	beq	r5,r2,80431ec <__swsetup_r+0x120>
 80431e0:	8809883a 	mov	r4,r17
 80431e4:	80437440 	call	8043744 <_free_r>
 80431e8:	8100030b 	ldhu	r4,12(r16)
 80431ec:	80000c15 	stw	zero,48(r16)
 80431f0:	80c00417 	ldw	r3,16(r16)
 80431f4:	00bff6c4 	movi	r2,-37
 80431f8:	1108703a 	and	r4,r2,r4
 80431fc:	80000115 	stw	zero,4(r16)
 8043200:	80c00015 	stw	r3,0(r16)
 8043204:	003fd506 	br	804315c <__alt_data_end+0xfffe3d5c>
 8043208:	00800244 	movi	r2,9
 804320c:	88800015 	stw	r2,0(r17)
 8043210:	20801014 	ori	r2,r4,64
 8043214:	8080030d 	sth	r2,12(r16)
 8043218:	00bfffc4 	movi	r2,-1
 804321c:	003fc506 	br	8043134 <__alt_data_end+0xfffe3d34>

08043220 <_close_r>:
 8043220:	defffd04 	addi	sp,sp,-12
 8043224:	dc000015 	stw	r16,0(sp)
 8043228:	04020174 	movhi	r16,2053
 804322c:	dc400115 	stw	r17,4(sp)
 8043230:	842c0804 	addi	r16,r16,-20448
 8043234:	2023883a 	mov	r17,r4
 8043238:	2809883a 	mov	r4,r5
 804323c:	dfc00215 	stw	ra,8(sp)
 8043240:	80000015 	stw	zero,0(r16)
 8043244:	804409c0 	call	804409c <close>
 8043248:	00ffffc4 	movi	r3,-1
 804324c:	10c00526 	beq	r2,r3,8043264 <_close_r+0x44>
 8043250:	dfc00217 	ldw	ra,8(sp)
 8043254:	dc400117 	ldw	r17,4(sp)
 8043258:	dc000017 	ldw	r16,0(sp)
 804325c:	dec00304 	addi	sp,sp,12
 8043260:	f800283a 	ret
 8043264:	80c00017 	ldw	r3,0(r16)
 8043268:	183ff926 	beq	r3,zero,8043250 <__alt_data_end+0xfffe3e50>
 804326c:	88c00015 	stw	r3,0(r17)
 8043270:	003ff706 	br	8043250 <__alt_data_end+0xfffe3e50>

08043274 <_fclose_r>:
 8043274:	28003926 	beq	r5,zero,804335c <_fclose_r+0xe8>
 8043278:	defffc04 	addi	sp,sp,-16
 804327c:	dc400115 	stw	r17,4(sp)
 8043280:	dc000015 	stw	r16,0(sp)
 8043284:	dfc00315 	stw	ra,12(sp)
 8043288:	dc800215 	stw	r18,8(sp)
 804328c:	2023883a 	mov	r17,r4
 8043290:	2821883a 	mov	r16,r5
 8043294:	20000226 	beq	r4,zero,80432a0 <_fclose_r+0x2c>
 8043298:	20800e17 	ldw	r2,56(r4)
 804329c:	10002726 	beq	r2,zero,804333c <_fclose_r+0xc8>
 80432a0:	8080030f 	ldh	r2,12(r16)
 80432a4:	1000071e 	bne	r2,zero,80432c4 <_fclose_r+0x50>
 80432a8:	0005883a 	mov	r2,zero
 80432ac:	dfc00317 	ldw	ra,12(sp)
 80432b0:	dc800217 	ldw	r18,8(sp)
 80432b4:	dc400117 	ldw	r17,4(sp)
 80432b8:	dc000017 	ldw	r16,0(sp)
 80432bc:	dec00404 	addi	sp,sp,16
 80432c0:	f800283a 	ret
 80432c4:	800b883a 	mov	r5,r16
 80432c8:	8809883a 	mov	r4,r17
 80432cc:	80433780 	call	8043378 <__sflush_r>
 80432d0:	1025883a 	mov	r18,r2
 80432d4:	80800b17 	ldw	r2,44(r16)
 80432d8:	10000426 	beq	r2,zero,80432ec <_fclose_r+0x78>
 80432dc:	81400717 	ldw	r5,28(r16)
 80432e0:	8809883a 	mov	r4,r17
 80432e4:	103ee83a 	callr	r2
 80432e8:	10001616 	blt	r2,zero,8043344 <_fclose_r+0xd0>
 80432ec:	8080030b 	ldhu	r2,12(r16)
 80432f0:	1080200c 	andi	r2,r2,128
 80432f4:	1000151e 	bne	r2,zero,804334c <_fclose_r+0xd8>
 80432f8:	81400c17 	ldw	r5,48(r16)
 80432fc:	28000526 	beq	r5,zero,8043314 <_fclose_r+0xa0>
 8043300:	80801004 	addi	r2,r16,64
 8043304:	28800226 	beq	r5,r2,8043310 <_fclose_r+0x9c>
 8043308:	8809883a 	mov	r4,r17
 804330c:	80437440 	call	8043744 <_free_r>
 8043310:	80000c15 	stw	zero,48(r16)
 8043314:	81401117 	ldw	r5,68(r16)
 8043318:	28000326 	beq	r5,zero,8043328 <_fclose_r+0xb4>
 804331c:	8809883a 	mov	r4,r17
 8043320:	80437440 	call	8043744 <_free_r>
 8043324:	80001115 	stw	zero,68(r16)
 8043328:	804162c0 	call	804162c <__sfp_lock_acquire>
 804332c:	8000030d 	sth	zero,12(r16)
 8043330:	80416300 	call	8041630 <__sfp_lock_release>
 8043334:	9005883a 	mov	r2,r18
 8043338:	003fdc06 	br	80432ac <__alt_data_end+0xfffe3eac>
 804333c:	804161c0 	call	804161c <__sinit>
 8043340:	003fd706 	br	80432a0 <__alt_data_end+0xfffe3ea0>
 8043344:	04bfffc4 	movi	r18,-1
 8043348:	003fe806 	br	80432ec <__alt_data_end+0xfffe3eec>
 804334c:	81400417 	ldw	r5,16(r16)
 8043350:	8809883a 	mov	r4,r17
 8043354:	80437440 	call	8043744 <_free_r>
 8043358:	003fe706 	br	80432f8 <__alt_data_end+0xfffe3ef8>
 804335c:	0005883a 	mov	r2,zero
 8043360:	f800283a 	ret

08043364 <fclose>:
 8043364:	00820174 	movhi	r2,2053
 8043368:	10a54804 	addi	r2,r2,-27360
 804336c:	200b883a 	mov	r5,r4
 8043370:	11000017 	ldw	r4,0(r2)
 8043374:	80432741 	jmpi	8043274 <_fclose_r>

08043378 <__sflush_r>:
 8043378:	2880030b 	ldhu	r2,12(r5)
 804337c:	defffb04 	addi	sp,sp,-20
 8043380:	dcc00315 	stw	r19,12(sp)
 8043384:	dc400115 	stw	r17,4(sp)
 8043388:	dfc00415 	stw	ra,16(sp)
 804338c:	dc800215 	stw	r18,8(sp)
 8043390:	dc000015 	stw	r16,0(sp)
 8043394:	10c0020c 	andi	r3,r2,8
 8043398:	2823883a 	mov	r17,r5
 804339c:	2027883a 	mov	r19,r4
 80433a0:	1800311e 	bne	r3,zero,8043468 <__sflush_r+0xf0>
 80433a4:	28c00117 	ldw	r3,4(r5)
 80433a8:	10820014 	ori	r2,r2,2048
 80433ac:	2880030d 	sth	r2,12(r5)
 80433b0:	00c04b0e 	bge	zero,r3,80434e0 <__sflush_r+0x168>
 80433b4:	8a000a17 	ldw	r8,40(r17)
 80433b8:	40002326 	beq	r8,zero,8043448 <__sflush_r+0xd0>
 80433bc:	9c000017 	ldw	r16,0(r19)
 80433c0:	10c4000c 	andi	r3,r2,4096
 80433c4:	98000015 	stw	zero,0(r19)
 80433c8:	18004826 	beq	r3,zero,80434ec <__sflush_r+0x174>
 80433cc:	89801417 	ldw	r6,80(r17)
 80433d0:	10c0010c 	andi	r3,r2,4
 80433d4:	18000626 	beq	r3,zero,80433f0 <__sflush_r+0x78>
 80433d8:	88c00117 	ldw	r3,4(r17)
 80433dc:	88800c17 	ldw	r2,48(r17)
 80433e0:	30cdc83a 	sub	r6,r6,r3
 80433e4:	10000226 	beq	r2,zero,80433f0 <__sflush_r+0x78>
 80433e8:	88800f17 	ldw	r2,60(r17)
 80433ec:	308dc83a 	sub	r6,r6,r2
 80433f0:	89400717 	ldw	r5,28(r17)
 80433f4:	000f883a 	mov	r7,zero
 80433f8:	9809883a 	mov	r4,r19
 80433fc:	403ee83a 	callr	r8
 8043400:	00ffffc4 	movi	r3,-1
 8043404:	10c04426 	beq	r2,r3,8043518 <__sflush_r+0x1a0>
 8043408:	88c0030b 	ldhu	r3,12(r17)
 804340c:	89000417 	ldw	r4,16(r17)
 8043410:	88000115 	stw	zero,4(r17)
 8043414:	197dffcc 	andi	r5,r3,63487
 8043418:	8940030d 	sth	r5,12(r17)
 804341c:	89000015 	stw	r4,0(r17)
 8043420:	18c4000c 	andi	r3,r3,4096
 8043424:	18002c1e 	bne	r3,zero,80434d8 <__sflush_r+0x160>
 8043428:	89400c17 	ldw	r5,48(r17)
 804342c:	9c000015 	stw	r16,0(r19)
 8043430:	28000526 	beq	r5,zero,8043448 <__sflush_r+0xd0>
 8043434:	88801004 	addi	r2,r17,64
 8043438:	28800226 	beq	r5,r2,8043444 <__sflush_r+0xcc>
 804343c:	9809883a 	mov	r4,r19
 8043440:	80437440 	call	8043744 <_free_r>
 8043444:	88000c15 	stw	zero,48(r17)
 8043448:	0005883a 	mov	r2,zero
 804344c:	dfc00417 	ldw	ra,16(sp)
 8043450:	dcc00317 	ldw	r19,12(sp)
 8043454:	dc800217 	ldw	r18,8(sp)
 8043458:	dc400117 	ldw	r17,4(sp)
 804345c:	dc000017 	ldw	r16,0(sp)
 8043460:	dec00504 	addi	sp,sp,20
 8043464:	f800283a 	ret
 8043468:	2c800417 	ldw	r18,16(r5)
 804346c:	903ff626 	beq	r18,zero,8043448 <__alt_data_end+0xfffe4048>
 8043470:	2c000017 	ldw	r16,0(r5)
 8043474:	108000cc 	andi	r2,r2,3
 8043478:	2c800015 	stw	r18,0(r5)
 804347c:	84a1c83a 	sub	r16,r16,r18
 8043480:	1000131e 	bne	r2,zero,80434d0 <__sflush_r+0x158>
 8043484:	28800517 	ldw	r2,20(r5)
 8043488:	88800215 	stw	r2,8(r17)
 804348c:	04000316 	blt	zero,r16,804349c <__sflush_r+0x124>
 8043490:	003fed06 	br	8043448 <__alt_data_end+0xfffe4048>
 8043494:	90a5883a 	add	r18,r18,r2
 8043498:	043feb0e 	bge	zero,r16,8043448 <__alt_data_end+0xfffe4048>
 804349c:	88800917 	ldw	r2,36(r17)
 80434a0:	89400717 	ldw	r5,28(r17)
 80434a4:	800f883a 	mov	r7,r16
 80434a8:	900d883a 	mov	r6,r18
 80434ac:	9809883a 	mov	r4,r19
 80434b0:	103ee83a 	callr	r2
 80434b4:	80a1c83a 	sub	r16,r16,r2
 80434b8:	00bff616 	blt	zero,r2,8043494 <__alt_data_end+0xfffe4094>
 80434bc:	88c0030b 	ldhu	r3,12(r17)
 80434c0:	00bfffc4 	movi	r2,-1
 80434c4:	18c01014 	ori	r3,r3,64
 80434c8:	88c0030d 	sth	r3,12(r17)
 80434cc:	003fdf06 	br	804344c <__alt_data_end+0xfffe404c>
 80434d0:	0005883a 	mov	r2,zero
 80434d4:	003fec06 	br	8043488 <__alt_data_end+0xfffe4088>
 80434d8:	88801415 	stw	r2,80(r17)
 80434dc:	003fd206 	br	8043428 <__alt_data_end+0xfffe4028>
 80434e0:	28c00f17 	ldw	r3,60(r5)
 80434e4:	00ffb316 	blt	zero,r3,80433b4 <__alt_data_end+0xfffe3fb4>
 80434e8:	003fd706 	br	8043448 <__alt_data_end+0xfffe4048>
 80434ec:	89400717 	ldw	r5,28(r17)
 80434f0:	000d883a 	mov	r6,zero
 80434f4:	01c00044 	movi	r7,1
 80434f8:	9809883a 	mov	r4,r19
 80434fc:	403ee83a 	callr	r8
 8043500:	100d883a 	mov	r6,r2
 8043504:	00bfffc4 	movi	r2,-1
 8043508:	30801426 	beq	r6,r2,804355c <__sflush_r+0x1e4>
 804350c:	8880030b 	ldhu	r2,12(r17)
 8043510:	8a000a17 	ldw	r8,40(r17)
 8043514:	003fae06 	br	80433d0 <__alt_data_end+0xfffe3fd0>
 8043518:	98c00017 	ldw	r3,0(r19)
 804351c:	183fba26 	beq	r3,zero,8043408 <__alt_data_end+0xfffe4008>
 8043520:	01000744 	movi	r4,29
 8043524:	19000626 	beq	r3,r4,8043540 <__sflush_r+0x1c8>
 8043528:	01000584 	movi	r4,22
 804352c:	19000426 	beq	r3,r4,8043540 <__sflush_r+0x1c8>
 8043530:	88c0030b 	ldhu	r3,12(r17)
 8043534:	18c01014 	ori	r3,r3,64
 8043538:	88c0030d 	sth	r3,12(r17)
 804353c:	003fc306 	br	804344c <__alt_data_end+0xfffe404c>
 8043540:	8880030b 	ldhu	r2,12(r17)
 8043544:	88c00417 	ldw	r3,16(r17)
 8043548:	88000115 	stw	zero,4(r17)
 804354c:	10bdffcc 	andi	r2,r2,63487
 8043550:	8880030d 	sth	r2,12(r17)
 8043554:	88c00015 	stw	r3,0(r17)
 8043558:	003fb306 	br	8043428 <__alt_data_end+0xfffe4028>
 804355c:	98800017 	ldw	r2,0(r19)
 8043560:	103fea26 	beq	r2,zero,804350c <__alt_data_end+0xfffe410c>
 8043564:	00c00744 	movi	r3,29
 8043568:	10c00226 	beq	r2,r3,8043574 <__sflush_r+0x1fc>
 804356c:	00c00584 	movi	r3,22
 8043570:	10c0031e 	bne	r2,r3,8043580 <__sflush_r+0x208>
 8043574:	9c000015 	stw	r16,0(r19)
 8043578:	0005883a 	mov	r2,zero
 804357c:	003fb306 	br	804344c <__alt_data_end+0xfffe404c>
 8043580:	88c0030b 	ldhu	r3,12(r17)
 8043584:	3005883a 	mov	r2,r6
 8043588:	18c01014 	ori	r3,r3,64
 804358c:	88c0030d 	sth	r3,12(r17)
 8043590:	003fae06 	br	804344c <__alt_data_end+0xfffe404c>

08043594 <_fflush_r>:
 8043594:	defffd04 	addi	sp,sp,-12
 8043598:	dc000115 	stw	r16,4(sp)
 804359c:	dfc00215 	stw	ra,8(sp)
 80435a0:	2021883a 	mov	r16,r4
 80435a4:	20000226 	beq	r4,zero,80435b0 <_fflush_r+0x1c>
 80435a8:	20800e17 	ldw	r2,56(r4)
 80435ac:	10000c26 	beq	r2,zero,80435e0 <_fflush_r+0x4c>
 80435b0:	2880030f 	ldh	r2,12(r5)
 80435b4:	1000051e 	bne	r2,zero,80435cc <_fflush_r+0x38>
 80435b8:	0005883a 	mov	r2,zero
 80435bc:	dfc00217 	ldw	ra,8(sp)
 80435c0:	dc000117 	ldw	r16,4(sp)
 80435c4:	dec00304 	addi	sp,sp,12
 80435c8:	f800283a 	ret
 80435cc:	8009883a 	mov	r4,r16
 80435d0:	dfc00217 	ldw	ra,8(sp)
 80435d4:	dc000117 	ldw	r16,4(sp)
 80435d8:	dec00304 	addi	sp,sp,12
 80435dc:	80433781 	jmpi	8043378 <__sflush_r>
 80435e0:	d9400015 	stw	r5,0(sp)
 80435e4:	804161c0 	call	804161c <__sinit>
 80435e8:	d9400017 	ldw	r5,0(sp)
 80435ec:	003ff006 	br	80435b0 <__alt_data_end+0xfffe41b0>

080435f0 <fflush>:
 80435f0:	20000526 	beq	r4,zero,8043608 <fflush+0x18>
 80435f4:	00820174 	movhi	r2,2053
 80435f8:	10a54804 	addi	r2,r2,-27360
 80435fc:	200b883a 	mov	r5,r4
 8043600:	11000017 	ldw	r4,0(r2)
 8043604:	80435941 	jmpi	8043594 <_fflush_r>
 8043608:	00820174 	movhi	r2,2053
 804360c:	10a54704 	addi	r2,r2,-27364
 8043610:	11000017 	ldw	r4,0(r2)
 8043614:	01420134 	movhi	r5,2052
 8043618:	294d6504 	addi	r5,r5,13716
 804361c:	8041bf81 	jmpi	8041bf8 <_fwalk_reent>

08043620 <_malloc_trim_r>:
 8043620:	defffb04 	addi	sp,sp,-20
 8043624:	dcc00315 	stw	r19,12(sp)
 8043628:	04c20134 	movhi	r19,2052
 804362c:	dc800215 	stw	r18,8(sp)
 8043630:	dc400115 	stw	r17,4(sp)
 8043634:	dc000015 	stw	r16,0(sp)
 8043638:	dfc00415 	stw	ra,16(sp)
 804363c:	2821883a 	mov	r16,r5
 8043640:	9cdfae04 	addi	r19,r19,32440
 8043644:	2025883a 	mov	r18,r4
 8043648:	80445fc0 	call	80445fc <__malloc_lock>
 804364c:	98800217 	ldw	r2,8(r19)
 8043650:	14400117 	ldw	r17,4(r2)
 8043654:	00bfff04 	movi	r2,-4
 8043658:	88a2703a 	and	r17,r17,r2
 804365c:	8c21c83a 	sub	r16,r17,r16
 8043660:	8403fbc4 	addi	r16,r16,4079
 8043664:	8020d33a 	srli	r16,r16,12
 8043668:	0083ffc4 	movi	r2,4095
 804366c:	843fffc4 	addi	r16,r16,-1
 8043670:	8020933a 	slli	r16,r16,12
 8043674:	1400060e 	bge	r2,r16,8043690 <_malloc_trim_r+0x70>
 8043678:	000b883a 	mov	r5,zero
 804367c:	9009883a 	mov	r4,r18
 8043680:	8042edc0 	call	8042edc <_sbrk_r>
 8043684:	98c00217 	ldw	r3,8(r19)
 8043688:	1c47883a 	add	r3,r3,r17
 804368c:	10c00a26 	beq	r2,r3,80436b8 <_malloc_trim_r+0x98>
 8043690:	9009883a 	mov	r4,r18
 8043694:	80446200 	call	8044620 <__malloc_unlock>
 8043698:	0005883a 	mov	r2,zero
 804369c:	dfc00417 	ldw	ra,16(sp)
 80436a0:	dcc00317 	ldw	r19,12(sp)
 80436a4:	dc800217 	ldw	r18,8(sp)
 80436a8:	dc400117 	ldw	r17,4(sp)
 80436ac:	dc000017 	ldw	r16,0(sp)
 80436b0:	dec00504 	addi	sp,sp,20
 80436b4:	f800283a 	ret
 80436b8:	040bc83a 	sub	r5,zero,r16
 80436bc:	9009883a 	mov	r4,r18
 80436c0:	8042edc0 	call	8042edc <_sbrk_r>
 80436c4:	00ffffc4 	movi	r3,-1
 80436c8:	10c00d26 	beq	r2,r3,8043700 <_malloc_trim_r+0xe0>
 80436cc:	00c20174 	movhi	r3,2053
 80436d0:	18ec1604 	addi	r3,r3,-20392
 80436d4:	18800017 	ldw	r2,0(r3)
 80436d8:	99000217 	ldw	r4,8(r19)
 80436dc:	8c23c83a 	sub	r17,r17,r16
 80436e0:	8c400054 	ori	r17,r17,1
 80436e4:	1421c83a 	sub	r16,r2,r16
 80436e8:	24400115 	stw	r17,4(r4)
 80436ec:	9009883a 	mov	r4,r18
 80436f0:	1c000015 	stw	r16,0(r3)
 80436f4:	80446200 	call	8044620 <__malloc_unlock>
 80436f8:	00800044 	movi	r2,1
 80436fc:	003fe706 	br	804369c <__alt_data_end+0xfffe429c>
 8043700:	000b883a 	mov	r5,zero
 8043704:	9009883a 	mov	r4,r18
 8043708:	8042edc0 	call	8042edc <_sbrk_r>
 804370c:	99000217 	ldw	r4,8(r19)
 8043710:	014003c4 	movi	r5,15
 8043714:	1107c83a 	sub	r3,r2,r4
 8043718:	28ffdd0e 	bge	r5,r3,8043690 <__alt_data_end+0xfffe4290>
 804371c:	01420174 	movhi	r5,2053
 8043720:	29654904 	addi	r5,r5,-27356
 8043724:	29400017 	ldw	r5,0(r5)
 8043728:	18c00054 	ori	r3,r3,1
 804372c:	20c00115 	stw	r3,4(r4)
 8043730:	00c20174 	movhi	r3,2053
 8043734:	1145c83a 	sub	r2,r2,r5
 8043738:	18ec1604 	addi	r3,r3,-20392
 804373c:	18800015 	stw	r2,0(r3)
 8043740:	003fd306 	br	8043690 <__alt_data_end+0xfffe4290>

08043744 <_free_r>:
 8043744:	28004126 	beq	r5,zero,804384c <_free_r+0x108>
 8043748:	defffd04 	addi	sp,sp,-12
 804374c:	dc400115 	stw	r17,4(sp)
 8043750:	dc000015 	stw	r16,0(sp)
 8043754:	2023883a 	mov	r17,r4
 8043758:	2821883a 	mov	r16,r5
 804375c:	dfc00215 	stw	ra,8(sp)
 8043760:	80445fc0 	call	80445fc <__malloc_lock>
 8043764:	81ffff17 	ldw	r7,-4(r16)
 8043768:	00bfff84 	movi	r2,-2
 804376c:	01020134 	movhi	r4,2052
 8043770:	81bffe04 	addi	r6,r16,-8
 8043774:	3884703a 	and	r2,r7,r2
 8043778:	211fae04 	addi	r4,r4,32440
 804377c:	308b883a 	add	r5,r6,r2
 8043780:	2a400117 	ldw	r9,4(r5)
 8043784:	22000217 	ldw	r8,8(r4)
 8043788:	00ffff04 	movi	r3,-4
 804378c:	48c6703a 	and	r3,r9,r3
 8043790:	2a005726 	beq	r5,r8,80438f0 <_free_r+0x1ac>
 8043794:	28c00115 	stw	r3,4(r5)
 8043798:	39c0004c 	andi	r7,r7,1
 804379c:	3800091e 	bne	r7,zero,80437c4 <_free_r+0x80>
 80437a0:	823ffe17 	ldw	r8,-8(r16)
 80437a4:	22400204 	addi	r9,r4,8
 80437a8:	320dc83a 	sub	r6,r6,r8
 80437ac:	31c00217 	ldw	r7,8(r6)
 80437b0:	1205883a 	add	r2,r2,r8
 80437b4:	3a406526 	beq	r7,r9,804394c <_free_r+0x208>
 80437b8:	32000317 	ldw	r8,12(r6)
 80437bc:	3a000315 	stw	r8,12(r7)
 80437c0:	41c00215 	stw	r7,8(r8)
 80437c4:	28cf883a 	add	r7,r5,r3
 80437c8:	39c00117 	ldw	r7,4(r7)
 80437cc:	39c0004c 	andi	r7,r7,1
 80437d0:	38003a26 	beq	r7,zero,80438bc <_free_r+0x178>
 80437d4:	10c00054 	ori	r3,r2,1
 80437d8:	30c00115 	stw	r3,4(r6)
 80437dc:	3087883a 	add	r3,r6,r2
 80437e0:	18800015 	stw	r2,0(r3)
 80437e4:	00c07fc4 	movi	r3,511
 80437e8:	18801936 	bltu	r3,r2,8043850 <_free_r+0x10c>
 80437ec:	1004d0fa 	srli	r2,r2,3
 80437f0:	01c00044 	movi	r7,1
 80437f4:	21400117 	ldw	r5,4(r4)
 80437f8:	10c00044 	addi	r3,r2,1
 80437fc:	18c7883a 	add	r3,r3,r3
 8043800:	1005d0ba 	srai	r2,r2,2
 8043804:	18c7883a 	add	r3,r3,r3
 8043808:	18c7883a 	add	r3,r3,r3
 804380c:	1907883a 	add	r3,r3,r4
 8043810:	3884983a 	sll	r2,r7,r2
 8043814:	19c00017 	ldw	r7,0(r3)
 8043818:	1a3ffe04 	addi	r8,r3,-8
 804381c:	1144b03a 	or	r2,r2,r5
 8043820:	32000315 	stw	r8,12(r6)
 8043824:	31c00215 	stw	r7,8(r6)
 8043828:	20800115 	stw	r2,4(r4)
 804382c:	19800015 	stw	r6,0(r3)
 8043830:	39800315 	stw	r6,12(r7)
 8043834:	8809883a 	mov	r4,r17
 8043838:	dfc00217 	ldw	ra,8(sp)
 804383c:	dc400117 	ldw	r17,4(sp)
 8043840:	dc000017 	ldw	r16,0(sp)
 8043844:	dec00304 	addi	sp,sp,12
 8043848:	80446201 	jmpi	8044620 <__malloc_unlock>
 804384c:	f800283a 	ret
 8043850:	100ad27a 	srli	r5,r2,9
 8043854:	00c00104 	movi	r3,4
 8043858:	19404a36 	bltu	r3,r5,8043984 <_free_r+0x240>
 804385c:	100ad1ba 	srli	r5,r2,6
 8043860:	28c00e44 	addi	r3,r5,57
 8043864:	18c7883a 	add	r3,r3,r3
 8043868:	29400e04 	addi	r5,r5,56
 804386c:	18c7883a 	add	r3,r3,r3
 8043870:	18c7883a 	add	r3,r3,r3
 8043874:	1909883a 	add	r4,r3,r4
 8043878:	20c00017 	ldw	r3,0(r4)
 804387c:	01c20134 	movhi	r7,2052
 8043880:	213ffe04 	addi	r4,r4,-8
 8043884:	39dfae04 	addi	r7,r7,32440
 8043888:	20c04426 	beq	r4,r3,804399c <_free_r+0x258>
 804388c:	01ffff04 	movi	r7,-4
 8043890:	19400117 	ldw	r5,4(r3)
 8043894:	29ca703a 	and	r5,r5,r7
 8043898:	1140022e 	bgeu	r2,r5,80438a4 <_free_r+0x160>
 804389c:	18c00217 	ldw	r3,8(r3)
 80438a0:	20fffb1e 	bne	r4,r3,8043890 <__alt_data_end+0xfffe4490>
 80438a4:	19000317 	ldw	r4,12(r3)
 80438a8:	31000315 	stw	r4,12(r6)
 80438ac:	30c00215 	stw	r3,8(r6)
 80438b0:	21800215 	stw	r6,8(r4)
 80438b4:	19800315 	stw	r6,12(r3)
 80438b8:	003fde06 	br	8043834 <__alt_data_end+0xfffe4434>
 80438bc:	29c00217 	ldw	r7,8(r5)
 80438c0:	10c5883a 	add	r2,r2,r3
 80438c4:	00c20134 	movhi	r3,2052
 80438c8:	18dfb004 	addi	r3,r3,32448
 80438cc:	38c03b26 	beq	r7,r3,80439bc <_free_r+0x278>
 80438d0:	2a000317 	ldw	r8,12(r5)
 80438d4:	11400054 	ori	r5,r2,1
 80438d8:	3087883a 	add	r3,r6,r2
 80438dc:	3a000315 	stw	r8,12(r7)
 80438e0:	41c00215 	stw	r7,8(r8)
 80438e4:	31400115 	stw	r5,4(r6)
 80438e8:	18800015 	stw	r2,0(r3)
 80438ec:	003fbd06 	br	80437e4 <__alt_data_end+0xfffe43e4>
 80438f0:	39c0004c 	andi	r7,r7,1
 80438f4:	10c5883a 	add	r2,r2,r3
 80438f8:	3800071e 	bne	r7,zero,8043918 <_free_r+0x1d4>
 80438fc:	81fffe17 	ldw	r7,-8(r16)
 8043900:	31cdc83a 	sub	r6,r6,r7
 8043904:	30c00317 	ldw	r3,12(r6)
 8043908:	31400217 	ldw	r5,8(r6)
 804390c:	11c5883a 	add	r2,r2,r7
 8043910:	28c00315 	stw	r3,12(r5)
 8043914:	19400215 	stw	r5,8(r3)
 8043918:	10c00054 	ori	r3,r2,1
 804391c:	30c00115 	stw	r3,4(r6)
 8043920:	00c20174 	movhi	r3,2053
 8043924:	18e54a04 	addi	r3,r3,-27352
 8043928:	18c00017 	ldw	r3,0(r3)
 804392c:	21800215 	stw	r6,8(r4)
 8043930:	10ffc036 	bltu	r2,r3,8043834 <__alt_data_end+0xfffe4434>
 8043934:	00820174 	movhi	r2,2053
 8043938:	10ac0704 	addi	r2,r2,-20452
 804393c:	11400017 	ldw	r5,0(r2)
 8043940:	8809883a 	mov	r4,r17
 8043944:	80436200 	call	8043620 <_malloc_trim_r>
 8043948:	003fba06 	br	8043834 <__alt_data_end+0xfffe4434>
 804394c:	28c9883a 	add	r4,r5,r3
 8043950:	21000117 	ldw	r4,4(r4)
 8043954:	2100004c 	andi	r4,r4,1
 8043958:	2000391e 	bne	r4,zero,8043a40 <_free_r+0x2fc>
 804395c:	29c00217 	ldw	r7,8(r5)
 8043960:	29000317 	ldw	r4,12(r5)
 8043964:	1885883a 	add	r2,r3,r2
 8043968:	10c00054 	ori	r3,r2,1
 804396c:	39000315 	stw	r4,12(r7)
 8043970:	21c00215 	stw	r7,8(r4)
 8043974:	30c00115 	stw	r3,4(r6)
 8043978:	308d883a 	add	r6,r6,r2
 804397c:	30800015 	stw	r2,0(r6)
 8043980:	003fac06 	br	8043834 <__alt_data_end+0xfffe4434>
 8043984:	00c00504 	movi	r3,20
 8043988:	19401536 	bltu	r3,r5,80439e0 <_free_r+0x29c>
 804398c:	28c01704 	addi	r3,r5,92
 8043990:	18c7883a 	add	r3,r3,r3
 8043994:	294016c4 	addi	r5,r5,91
 8043998:	003fb406 	br	804386c <__alt_data_end+0xfffe446c>
 804399c:	280bd0ba 	srai	r5,r5,2
 80439a0:	00c00044 	movi	r3,1
 80439a4:	38800117 	ldw	r2,4(r7)
 80439a8:	194a983a 	sll	r5,r3,r5
 80439ac:	2007883a 	mov	r3,r4
 80439b0:	2884b03a 	or	r2,r5,r2
 80439b4:	38800115 	stw	r2,4(r7)
 80439b8:	003fbb06 	br	80438a8 <__alt_data_end+0xfffe44a8>
 80439bc:	21800515 	stw	r6,20(r4)
 80439c0:	21800415 	stw	r6,16(r4)
 80439c4:	10c00054 	ori	r3,r2,1
 80439c8:	31c00315 	stw	r7,12(r6)
 80439cc:	31c00215 	stw	r7,8(r6)
 80439d0:	30c00115 	stw	r3,4(r6)
 80439d4:	308d883a 	add	r6,r6,r2
 80439d8:	30800015 	stw	r2,0(r6)
 80439dc:	003f9506 	br	8043834 <__alt_data_end+0xfffe4434>
 80439e0:	00c01504 	movi	r3,84
 80439e4:	19400536 	bltu	r3,r5,80439fc <_free_r+0x2b8>
 80439e8:	100ad33a 	srli	r5,r2,12
 80439ec:	28c01bc4 	addi	r3,r5,111
 80439f0:	18c7883a 	add	r3,r3,r3
 80439f4:	29401b84 	addi	r5,r5,110
 80439f8:	003f9c06 	br	804386c <__alt_data_end+0xfffe446c>
 80439fc:	00c05504 	movi	r3,340
 8043a00:	19400536 	bltu	r3,r5,8043a18 <_free_r+0x2d4>
 8043a04:	100ad3fa 	srli	r5,r2,15
 8043a08:	28c01e04 	addi	r3,r5,120
 8043a0c:	18c7883a 	add	r3,r3,r3
 8043a10:	29401dc4 	addi	r5,r5,119
 8043a14:	003f9506 	br	804386c <__alt_data_end+0xfffe446c>
 8043a18:	00c15504 	movi	r3,1364
 8043a1c:	19400536 	bltu	r3,r5,8043a34 <_free_r+0x2f0>
 8043a20:	100ad4ba 	srli	r5,r2,18
 8043a24:	28c01f44 	addi	r3,r5,125
 8043a28:	18c7883a 	add	r3,r3,r3
 8043a2c:	29401f04 	addi	r5,r5,124
 8043a30:	003f8e06 	br	804386c <__alt_data_end+0xfffe446c>
 8043a34:	00c03f84 	movi	r3,254
 8043a38:	01401f84 	movi	r5,126
 8043a3c:	003f8b06 	br	804386c <__alt_data_end+0xfffe446c>
 8043a40:	10c00054 	ori	r3,r2,1
 8043a44:	30c00115 	stw	r3,4(r6)
 8043a48:	308d883a 	add	r6,r6,r2
 8043a4c:	30800015 	stw	r2,0(r6)
 8043a50:	003f7806 	br	8043834 <__alt_data_end+0xfffe4434>

08043a54 <_lseek_r>:
 8043a54:	defffd04 	addi	sp,sp,-12
 8043a58:	2805883a 	mov	r2,r5
 8043a5c:	dc000015 	stw	r16,0(sp)
 8043a60:	04020174 	movhi	r16,2053
 8043a64:	dc400115 	stw	r17,4(sp)
 8043a68:	300b883a 	mov	r5,r6
 8043a6c:	842c0804 	addi	r16,r16,-20448
 8043a70:	2023883a 	mov	r17,r4
 8043a74:	380d883a 	mov	r6,r7
 8043a78:	1009883a 	mov	r4,r2
 8043a7c:	dfc00215 	stw	ra,8(sp)
 8043a80:	80000015 	stw	zero,0(r16)
 8043a84:	80444a40 	call	80444a4 <lseek>
 8043a88:	00ffffc4 	movi	r3,-1
 8043a8c:	10c00526 	beq	r2,r3,8043aa4 <_lseek_r+0x50>
 8043a90:	dfc00217 	ldw	ra,8(sp)
 8043a94:	dc400117 	ldw	r17,4(sp)
 8043a98:	dc000017 	ldw	r16,0(sp)
 8043a9c:	dec00304 	addi	sp,sp,12
 8043aa0:	f800283a 	ret
 8043aa4:	80c00017 	ldw	r3,0(r16)
 8043aa8:	183ff926 	beq	r3,zero,8043a90 <__alt_data_end+0xfffe4690>
 8043aac:	88c00015 	stw	r3,0(r17)
 8043ab0:	003ff706 	br	8043a90 <__alt_data_end+0xfffe4690>

08043ab4 <__smakebuf_r>:
 8043ab4:	2880030b 	ldhu	r2,12(r5)
 8043ab8:	10c0008c 	andi	r3,r2,2
 8043abc:	1800411e 	bne	r3,zero,8043bc4 <__smakebuf_r+0x110>
 8043ac0:	deffec04 	addi	sp,sp,-80
 8043ac4:	dc000f15 	stw	r16,60(sp)
 8043ac8:	2821883a 	mov	r16,r5
 8043acc:	2940038f 	ldh	r5,14(r5)
 8043ad0:	dc401015 	stw	r17,64(sp)
 8043ad4:	dfc01315 	stw	ra,76(sp)
 8043ad8:	dcc01215 	stw	r19,72(sp)
 8043adc:	dc801115 	stw	r18,68(sp)
 8043ae0:	2023883a 	mov	r17,r4
 8043ae4:	28001c16 	blt	r5,zero,8043b58 <__smakebuf_r+0xa4>
 8043ae8:	d80d883a 	mov	r6,sp
 8043aec:	8043cd00 	call	8043cd0 <_fstat_r>
 8043af0:	10001816 	blt	r2,zero,8043b54 <__smakebuf_r+0xa0>
 8043af4:	d8800117 	ldw	r2,4(sp)
 8043af8:	00e00014 	movui	r3,32768
 8043afc:	10bc000c 	andi	r2,r2,61440
 8043b00:	14c80020 	cmpeqi	r19,r2,8192
 8043b04:	10c03726 	beq	r2,r3,8043be4 <__smakebuf_r+0x130>
 8043b08:	80c0030b 	ldhu	r3,12(r16)
 8043b0c:	18c20014 	ori	r3,r3,2048
 8043b10:	80c0030d 	sth	r3,12(r16)
 8043b14:	00c80004 	movi	r3,8192
 8043b18:	10c0521e 	bne	r2,r3,8043c64 <__smakebuf_r+0x1b0>
 8043b1c:	8140038f 	ldh	r5,14(r16)
 8043b20:	8809883a 	mov	r4,r17
 8043b24:	8043d2c0 	call	8043d2c <_isatty_r>
 8043b28:	10004c26 	beq	r2,zero,8043c5c <__smakebuf_r+0x1a8>
 8043b2c:	8080030b 	ldhu	r2,12(r16)
 8043b30:	80c010c4 	addi	r3,r16,67
 8043b34:	80c00015 	stw	r3,0(r16)
 8043b38:	10800054 	ori	r2,r2,1
 8043b3c:	8080030d 	sth	r2,12(r16)
 8043b40:	00800044 	movi	r2,1
 8043b44:	80c00415 	stw	r3,16(r16)
 8043b48:	80800515 	stw	r2,20(r16)
 8043b4c:	04810004 	movi	r18,1024
 8043b50:	00000706 	br	8043b70 <__smakebuf_r+0xbc>
 8043b54:	8080030b 	ldhu	r2,12(r16)
 8043b58:	10c0200c 	andi	r3,r2,128
 8043b5c:	18001f1e 	bne	r3,zero,8043bdc <__smakebuf_r+0x128>
 8043b60:	04810004 	movi	r18,1024
 8043b64:	10820014 	ori	r2,r2,2048
 8043b68:	8080030d 	sth	r2,12(r16)
 8043b6c:	0027883a 	mov	r19,zero
 8043b70:	900b883a 	mov	r5,r18
 8043b74:	8809883a 	mov	r4,r17
 8043b78:	8041cbc0 	call	8041cbc <_malloc_r>
 8043b7c:	10002c26 	beq	r2,zero,8043c30 <__smakebuf_r+0x17c>
 8043b80:	80c0030b 	ldhu	r3,12(r16)
 8043b84:	01020134 	movhi	r4,2052
 8043b88:	2104b104 	addi	r4,r4,4804
 8043b8c:	89000f15 	stw	r4,60(r17)
 8043b90:	18c02014 	ori	r3,r3,128
 8043b94:	80c0030d 	sth	r3,12(r16)
 8043b98:	80800015 	stw	r2,0(r16)
 8043b9c:	80800415 	stw	r2,16(r16)
 8043ba0:	84800515 	stw	r18,20(r16)
 8043ba4:	98001a1e 	bne	r19,zero,8043c10 <__smakebuf_r+0x15c>
 8043ba8:	dfc01317 	ldw	ra,76(sp)
 8043bac:	dcc01217 	ldw	r19,72(sp)
 8043bb0:	dc801117 	ldw	r18,68(sp)
 8043bb4:	dc401017 	ldw	r17,64(sp)
 8043bb8:	dc000f17 	ldw	r16,60(sp)
 8043bbc:	dec01404 	addi	sp,sp,80
 8043bc0:	f800283a 	ret
 8043bc4:	288010c4 	addi	r2,r5,67
 8043bc8:	28800015 	stw	r2,0(r5)
 8043bcc:	28800415 	stw	r2,16(r5)
 8043bd0:	00800044 	movi	r2,1
 8043bd4:	28800515 	stw	r2,20(r5)
 8043bd8:	f800283a 	ret
 8043bdc:	04801004 	movi	r18,64
 8043be0:	003fe006 	br	8043b64 <__alt_data_end+0xfffe4764>
 8043be4:	81000a17 	ldw	r4,40(r16)
 8043be8:	00c20134 	movhi	r3,2052
 8043bec:	18cc0204 	addi	r3,r3,12296
 8043bf0:	20ffc51e 	bne	r4,r3,8043b08 <__alt_data_end+0xfffe4708>
 8043bf4:	8080030b 	ldhu	r2,12(r16)
 8043bf8:	04810004 	movi	r18,1024
 8043bfc:	84801315 	stw	r18,76(r16)
 8043c00:	1484b03a 	or	r2,r2,r18
 8043c04:	8080030d 	sth	r2,12(r16)
 8043c08:	0027883a 	mov	r19,zero
 8043c0c:	003fd806 	br	8043b70 <__alt_data_end+0xfffe4770>
 8043c10:	8140038f 	ldh	r5,14(r16)
 8043c14:	8809883a 	mov	r4,r17
 8043c18:	8043d2c0 	call	8043d2c <_isatty_r>
 8043c1c:	103fe226 	beq	r2,zero,8043ba8 <__alt_data_end+0xfffe47a8>
 8043c20:	8080030b 	ldhu	r2,12(r16)
 8043c24:	10800054 	ori	r2,r2,1
 8043c28:	8080030d 	sth	r2,12(r16)
 8043c2c:	003fde06 	br	8043ba8 <__alt_data_end+0xfffe47a8>
 8043c30:	8080030b 	ldhu	r2,12(r16)
 8043c34:	10c0800c 	andi	r3,r2,512
 8043c38:	183fdb1e 	bne	r3,zero,8043ba8 <__alt_data_end+0xfffe47a8>
 8043c3c:	10800094 	ori	r2,r2,2
 8043c40:	80c010c4 	addi	r3,r16,67
 8043c44:	8080030d 	sth	r2,12(r16)
 8043c48:	00800044 	movi	r2,1
 8043c4c:	80c00015 	stw	r3,0(r16)
 8043c50:	80c00415 	stw	r3,16(r16)
 8043c54:	80800515 	stw	r2,20(r16)
 8043c58:	003fd306 	br	8043ba8 <__alt_data_end+0xfffe47a8>
 8043c5c:	04810004 	movi	r18,1024
 8043c60:	003fc306 	br	8043b70 <__alt_data_end+0xfffe4770>
 8043c64:	0027883a 	mov	r19,zero
 8043c68:	04810004 	movi	r18,1024
 8043c6c:	003fc006 	br	8043b70 <__alt_data_end+0xfffe4770>

08043c70 <_read_r>:
 8043c70:	defffd04 	addi	sp,sp,-12
 8043c74:	2805883a 	mov	r2,r5
 8043c78:	dc000015 	stw	r16,0(sp)
 8043c7c:	04020174 	movhi	r16,2053
 8043c80:	dc400115 	stw	r17,4(sp)
 8043c84:	300b883a 	mov	r5,r6
 8043c88:	842c0804 	addi	r16,r16,-20448
 8043c8c:	2023883a 	mov	r17,r4
 8043c90:	380d883a 	mov	r6,r7
 8043c94:	1009883a 	mov	r4,r2
 8043c98:	dfc00215 	stw	ra,8(sp)
 8043c9c:	80000015 	stw	zero,0(r16)
 8043ca0:	80446800 	call	8044680 <read>
 8043ca4:	00ffffc4 	movi	r3,-1
 8043ca8:	10c00526 	beq	r2,r3,8043cc0 <_read_r+0x50>
 8043cac:	dfc00217 	ldw	ra,8(sp)
 8043cb0:	dc400117 	ldw	r17,4(sp)
 8043cb4:	dc000017 	ldw	r16,0(sp)
 8043cb8:	dec00304 	addi	sp,sp,12
 8043cbc:	f800283a 	ret
 8043cc0:	80c00017 	ldw	r3,0(r16)
 8043cc4:	183ff926 	beq	r3,zero,8043cac <__alt_data_end+0xfffe48ac>
 8043cc8:	88c00015 	stw	r3,0(r17)
 8043ccc:	003ff706 	br	8043cac <__alt_data_end+0xfffe48ac>

08043cd0 <_fstat_r>:
 8043cd0:	defffd04 	addi	sp,sp,-12
 8043cd4:	2805883a 	mov	r2,r5
 8043cd8:	dc000015 	stw	r16,0(sp)
 8043cdc:	04020174 	movhi	r16,2053
 8043ce0:	dc400115 	stw	r17,4(sp)
 8043ce4:	842c0804 	addi	r16,r16,-20448
 8043ce8:	2023883a 	mov	r17,r4
 8043cec:	300b883a 	mov	r5,r6
 8043cf0:	1009883a 	mov	r4,r2
 8043cf4:	dfc00215 	stw	ra,8(sp)
 8043cf8:	80000015 	stw	zero,0(r16)
 8043cfc:	80441dc0 	call	80441dc <fstat>
 8043d00:	00ffffc4 	movi	r3,-1
 8043d04:	10c00526 	beq	r2,r3,8043d1c <_fstat_r+0x4c>
 8043d08:	dfc00217 	ldw	ra,8(sp)
 8043d0c:	dc400117 	ldw	r17,4(sp)
 8043d10:	dc000017 	ldw	r16,0(sp)
 8043d14:	dec00304 	addi	sp,sp,12
 8043d18:	f800283a 	ret
 8043d1c:	80c00017 	ldw	r3,0(r16)
 8043d20:	183ff926 	beq	r3,zero,8043d08 <__alt_data_end+0xfffe4908>
 8043d24:	88c00015 	stw	r3,0(r17)
 8043d28:	003ff706 	br	8043d08 <__alt_data_end+0xfffe4908>

08043d2c <_isatty_r>:
 8043d2c:	defffd04 	addi	sp,sp,-12
 8043d30:	dc000015 	stw	r16,0(sp)
 8043d34:	04020174 	movhi	r16,2053
 8043d38:	dc400115 	stw	r17,4(sp)
 8043d3c:	842c0804 	addi	r16,r16,-20448
 8043d40:	2023883a 	mov	r17,r4
 8043d44:	2809883a 	mov	r4,r5
 8043d48:	dfc00215 	stw	ra,8(sp)
 8043d4c:	80000015 	stw	zero,0(r16)
 8043d50:	80442d00 	call	80442d0 <isatty>
 8043d54:	00ffffc4 	movi	r3,-1
 8043d58:	10c00526 	beq	r2,r3,8043d70 <_isatty_r+0x44>
 8043d5c:	dfc00217 	ldw	ra,8(sp)
 8043d60:	dc400117 	ldw	r17,4(sp)
 8043d64:	dc000017 	ldw	r16,0(sp)
 8043d68:	dec00304 	addi	sp,sp,12
 8043d6c:	f800283a 	ret
 8043d70:	80c00017 	ldw	r3,0(r16)
 8043d74:	183ff926 	beq	r3,zero,8043d5c <__alt_data_end+0xfffe495c>
 8043d78:	88c00015 	stw	r3,0(r17)
 8043d7c:	003ff706 	br	8043d5c <__alt_data_end+0xfffe495c>

08043d80 <__divsi3>:
 8043d80:	20001b16 	blt	r4,zero,8043df0 <__divsi3+0x70>
 8043d84:	000f883a 	mov	r7,zero
 8043d88:	28001616 	blt	r5,zero,8043de4 <__divsi3+0x64>
 8043d8c:	200d883a 	mov	r6,r4
 8043d90:	29001a2e 	bgeu	r5,r4,8043dfc <__divsi3+0x7c>
 8043d94:	00800804 	movi	r2,32
 8043d98:	00c00044 	movi	r3,1
 8043d9c:	00000106 	br	8043da4 <__divsi3+0x24>
 8043da0:	10000d26 	beq	r2,zero,8043dd8 <__divsi3+0x58>
 8043da4:	294b883a 	add	r5,r5,r5
 8043da8:	10bfffc4 	addi	r2,r2,-1
 8043dac:	18c7883a 	add	r3,r3,r3
 8043db0:	293ffb36 	bltu	r5,r4,8043da0 <__alt_data_end+0xfffe49a0>
 8043db4:	0005883a 	mov	r2,zero
 8043db8:	18000726 	beq	r3,zero,8043dd8 <__divsi3+0x58>
 8043dbc:	0005883a 	mov	r2,zero
 8043dc0:	31400236 	bltu	r6,r5,8043dcc <__divsi3+0x4c>
 8043dc4:	314dc83a 	sub	r6,r6,r5
 8043dc8:	10c4b03a 	or	r2,r2,r3
 8043dcc:	1806d07a 	srli	r3,r3,1
 8043dd0:	280ad07a 	srli	r5,r5,1
 8043dd4:	183ffa1e 	bne	r3,zero,8043dc0 <__alt_data_end+0xfffe49c0>
 8043dd8:	38000126 	beq	r7,zero,8043de0 <__divsi3+0x60>
 8043ddc:	0085c83a 	sub	r2,zero,r2
 8043de0:	f800283a 	ret
 8043de4:	014bc83a 	sub	r5,zero,r5
 8043de8:	39c0005c 	xori	r7,r7,1
 8043dec:	003fe706 	br	8043d8c <__alt_data_end+0xfffe498c>
 8043df0:	0109c83a 	sub	r4,zero,r4
 8043df4:	01c00044 	movi	r7,1
 8043df8:	003fe306 	br	8043d88 <__alt_data_end+0xfffe4988>
 8043dfc:	00c00044 	movi	r3,1
 8043e00:	003fee06 	br	8043dbc <__alt_data_end+0xfffe49bc>

08043e04 <__modsi3>:
 8043e04:	20001716 	blt	r4,zero,8043e64 <__modsi3+0x60>
 8043e08:	000f883a 	mov	r7,zero
 8043e0c:	2005883a 	mov	r2,r4
 8043e10:	28001216 	blt	r5,zero,8043e5c <__modsi3+0x58>
 8043e14:	2900162e 	bgeu	r5,r4,8043e70 <__modsi3+0x6c>
 8043e18:	01800804 	movi	r6,32
 8043e1c:	00c00044 	movi	r3,1
 8043e20:	00000106 	br	8043e28 <__modsi3+0x24>
 8043e24:	30000a26 	beq	r6,zero,8043e50 <__modsi3+0x4c>
 8043e28:	294b883a 	add	r5,r5,r5
 8043e2c:	31bfffc4 	addi	r6,r6,-1
 8043e30:	18c7883a 	add	r3,r3,r3
 8043e34:	293ffb36 	bltu	r5,r4,8043e24 <__alt_data_end+0xfffe4a24>
 8043e38:	18000526 	beq	r3,zero,8043e50 <__modsi3+0x4c>
 8043e3c:	1806d07a 	srli	r3,r3,1
 8043e40:	11400136 	bltu	r2,r5,8043e48 <__modsi3+0x44>
 8043e44:	1145c83a 	sub	r2,r2,r5
 8043e48:	280ad07a 	srli	r5,r5,1
 8043e4c:	183ffb1e 	bne	r3,zero,8043e3c <__alt_data_end+0xfffe4a3c>
 8043e50:	38000126 	beq	r7,zero,8043e58 <__modsi3+0x54>
 8043e54:	0085c83a 	sub	r2,zero,r2
 8043e58:	f800283a 	ret
 8043e5c:	014bc83a 	sub	r5,zero,r5
 8043e60:	003fec06 	br	8043e14 <__alt_data_end+0xfffe4a14>
 8043e64:	0109c83a 	sub	r4,zero,r4
 8043e68:	01c00044 	movi	r7,1
 8043e6c:	003fe706 	br	8043e0c <__alt_data_end+0xfffe4a0c>
 8043e70:	00c00044 	movi	r3,1
 8043e74:	003ff106 	br	8043e3c <__alt_data_end+0xfffe4a3c>

08043e78 <__udivsi3>:
 8043e78:	200d883a 	mov	r6,r4
 8043e7c:	2900152e 	bgeu	r5,r4,8043ed4 <__udivsi3+0x5c>
 8043e80:	28001416 	blt	r5,zero,8043ed4 <__udivsi3+0x5c>
 8043e84:	00800804 	movi	r2,32
 8043e88:	00c00044 	movi	r3,1
 8043e8c:	00000206 	br	8043e98 <__udivsi3+0x20>
 8043e90:	10000e26 	beq	r2,zero,8043ecc <__udivsi3+0x54>
 8043e94:	28000516 	blt	r5,zero,8043eac <__udivsi3+0x34>
 8043e98:	294b883a 	add	r5,r5,r5
 8043e9c:	10bfffc4 	addi	r2,r2,-1
 8043ea0:	18c7883a 	add	r3,r3,r3
 8043ea4:	293ffa36 	bltu	r5,r4,8043e90 <__alt_data_end+0xfffe4a90>
 8043ea8:	18000826 	beq	r3,zero,8043ecc <__udivsi3+0x54>
 8043eac:	0005883a 	mov	r2,zero
 8043eb0:	31400236 	bltu	r6,r5,8043ebc <__udivsi3+0x44>
 8043eb4:	314dc83a 	sub	r6,r6,r5
 8043eb8:	10c4b03a 	or	r2,r2,r3
 8043ebc:	1806d07a 	srli	r3,r3,1
 8043ec0:	280ad07a 	srli	r5,r5,1
 8043ec4:	183ffa1e 	bne	r3,zero,8043eb0 <__alt_data_end+0xfffe4ab0>
 8043ec8:	f800283a 	ret
 8043ecc:	0005883a 	mov	r2,zero
 8043ed0:	f800283a 	ret
 8043ed4:	00c00044 	movi	r3,1
 8043ed8:	003ff406 	br	8043eac <__alt_data_end+0xfffe4aac>

08043edc <__umodsi3>:
 8043edc:	2005883a 	mov	r2,r4
 8043ee0:	2900122e 	bgeu	r5,r4,8043f2c <__umodsi3+0x50>
 8043ee4:	28001116 	blt	r5,zero,8043f2c <__umodsi3+0x50>
 8043ee8:	01800804 	movi	r6,32
 8043eec:	00c00044 	movi	r3,1
 8043ef0:	00000206 	br	8043efc <__umodsi3+0x20>
 8043ef4:	30000c26 	beq	r6,zero,8043f28 <__umodsi3+0x4c>
 8043ef8:	28000516 	blt	r5,zero,8043f10 <__umodsi3+0x34>
 8043efc:	294b883a 	add	r5,r5,r5
 8043f00:	31bfffc4 	addi	r6,r6,-1
 8043f04:	18c7883a 	add	r3,r3,r3
 8043f08:	293ffa36 	bltu	r5,r4,8043ef4 <__alt_data_end+0xfffe4af4>
 8043f0c:	18000626 	beq	r3,zero,8043f28 <__umodsi3+0x4c>
 8043f10:	1806d07a 	srli	r3,r3,1
 8043f14:	11400136 	bltu	r2,r5,8043f1c <__umodsi3+0x40>
 8043f18:	1145c83a 	sub	r2,r2,r5
 8043f1c:	280ad07a 	srli	r5,r5,1
 8043f20:	183ffb1e 	bne	r3,zero,8043f10 <__alt_data_end+0xfffe4b10>
 8043f24:	f800283a 	ret
 8043f28:	f800283a 	ret
 8043f2c:	00c00044 	movi	r3,1
 8043f30:	003ff706 	br	8043f10 <__alt_data_end+0xfffe4b10>

08043f34 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8043f34:	defff504 	addi	sp,sp,-44
 8043f38:	df000a15 	stw	fp,40(sp)
 8043f3c:	df000a04 	addi	fp,sp,40
 8043f40:	e13ffc15 	stw	r4,-16(fp)
 8043f44:	e17ffd15 	stw	r5,-12(fp)
 8043f48:	e1bffe15 	stw	r6,-8(fp)
 8043f4c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8043f50:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8043f54:	d0a6c517 	ldw	r2,-25836(gp)
  
  if (alt_ticks_per_second ())
 8043f58:	10003c26 	beq	r2,zero,804404c <alt_alarm_start+0x118>
  {
    if (alarm)
 8043f5c:	e0bffc17 	ldw	r2,-16(fp)
 8043f60:	10003826 	beq	r2,zero,8044044 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8043f64:	e0bffc17 	ldw	r2,-16(fp)
 8043f68:	e0fffe17 	ldw	r3,-8(fp)
 8043f6c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8043f70:	e0bffc17 	ldw	r2,-16(fp)
 8043f74:	e0ffff17 	ldw	r3,-4(fp)
 8043f78:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8043f7c:	0005303a 	rdctl	r2,status
 8043f80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8043f84:	e0fff917 	ldw	r3,-28(fp)
 8043f88:	00bfff84 	movi	r2,-2
 8043f8c:	1884703a 	and	r2,r3,r2
 8043f90:	1001703a 	wrctl	status,r2
  
  return context;
 8043f94:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8043f98:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8043f9c:	d0a6c617 	ldw	r2,-25832(gp)
      
      current_nticks = alt_nticks();
 8043fa0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8043fa4:	e0fffd17 	ldw	r3,-12(fp)
 8043fa8:	e0bff617 	ldw	r2,-40(fp)
 8043fac:	1885883a 	add	r2,r3,r2
 8043fb0:	10c00044 	addi	r3,r2,1
 8043fb4:	e0bffc17 	ldw	r2,-16(fp)
 8043fb8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8043fbc:	e0bffc17 	ldw	r2,-16(fp)
 8043fc0:	10c00217 	ldw	r3,8(r2)
 8043fc4:	e0bff617 	ldw	r2,-40(fp)
 8043fc8:	1880042e 	bgeu	r3,r2,8043fdc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8043fcc:	e0bffc17 	ldw	r2,-16(fp)
 8043fd0:	00c00044 	movi	r3,1
 8043fd4:	10c00405 	stb	r3,16(r2)
 8043fd8:	00000206 	br	8043fe4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8043fdc:	e0bffc17 	ldw	r2,-16(fp)
 8043fe0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8043fe4:	e0bffc17 	ldw	r2,-16(fp)
 8043fe8:	d0e00b04 	addi	r3,gp,-32724
 8043fec:	e0fffa15 	stw	r3,-24(fp)
 8043ff0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8043ff4:	e0bffb17 	ldw	r2,-20(fp)
 8043ff8:	e0fffa17 	ldw	r3,-24(fp)
 8043ffc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8044000:	e0bffa17 	ldw	r2,-24(fp)
 8044004:	10c00017 	ldw	r3,0(r2)
 8044008:	e0bffb17 	ldw	r2,-20(fp)
 804400c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8044010:	e0bffa17 	ldw	r2,-24(fp)
 8044014:	10800017 	ldw	r2,0(r2)
 8044018:	e0fffb17 	ldw	r3,-20(fp)
 804401c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8044020:	e0bffa17 	ldw	r2,-24(fp)
 8044024:	e0fffb17 	ldw	r3,-20(fp)
 8044028:	10c00015 	stw	r3,0(r2)
 804402c:	e0bff817 	ldw	r2,-32(fp)
 8044030:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8044034:	e0bff717 	ldw	r2,-36(fp)
 8044038:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 804403c:	0005883a 	mov	r2,zero
 8044040:	00000306 	br	8044050 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8044044:	00bffa84 	movi	r2,-22
 8044048:	00000106 	br	8044050 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 804404c:	00bfde84 	movi	r2,-134
  }
}
 8044050:	e037883a 	mov	sp,fp
 8044054:	df000017 	ldw	fp,0(sp)
 8044058:	dec00104 	addi	sp,sp,4
 804405c:	f800283a 	ret

08044060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8044060:	defffe04 	addi	sp,sp,-8
 8044064:	dfc00115 	stw	ra,4(sp)
 8044068:	df000015 	stw	fp,0(sp)
 804406c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044070:	d0a00917 	ldw	r2,-32732(gp)
 8044074:	10000326 	beq	r2,zero,8044084 <alt_get_errno+0x24>
 8044078:	d0a00917 	ldw	r2,-32732(gp)
 804407c:	103ee83a 	callr	r2
 8044080:	00000106 	br	8044088 <alt_get_errno+0x28>
 8044084:	d0a6c104 	addi	r2,gp,-25852
}
 8044088:	e037883a 	mov	sp,fp
 804408c:	dfc00117 	ldw	ra,4(sp)
 8044090:	df000017 	ldw	fp,0(sp)
 8044094:	dec00204 	addi	sp,sp,8
 8044098:	f800283a 	ret

0804409c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 804409c:	defffb04 	addi	sp,sp,-20
 80440a0:	dfc00415 	stw	ra,16(sp)
 80440a4:	df000315 	stw	fp,12(sp)
 80440a8:	df000304 	addi	fp,sp,12
 80440ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80440b0:	e0bfff17 	ldw	r2,-4(fp)
 80440b4:	10000816 	blt	r2,zero,80440d8 <close+0x3c>
 80440b8:	01400304 	movi	r5,12
 80440bc:	e13fff17 	ldw	r4,-4(fp)
 80440c0:	804109c0 	call	804109c <__mulsi3>
 80440c4:	1007883a 	mov	r3,r2
 80440c8:	00820174 	movhi	r2,2053
 80440cc:	10a0ba04 	addi	r2,r2,-32024
 80440d0:	1885883a 	add	r2,r3,r2
 80440d4:	00000106 	br	80440dc <close+0x40>
 80440d8:	0005883a 	mov	r2,zero
 80440dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80440e0:	e0bffd17 	ldw	r2,-12(fp)
 80440e4:	10001926 	beq	r2,zero,804414c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80440e8:	e0bffd17 	ldw	r2,-12(fp)
 80440ec:	10800017 	ldw	r2,0(r2)
 80440f0:	10800417 	ldw	r2,16(r2)
 80440f4:	10000626 	beq	r2,zero,8044110 <close+0x74>
 80440f8:	e0bffd17 	ldw	r2,-12(fp)
 80440fc:	10800017 	ldw	r2,0(r2)
 8044100:	10800417 	ldw	r2,16(r2)
 8044104:	e13ffd17 	ldw	r4,-12(fp)
 8044108:	103ee83a 	callr	r2
 804410c:	00000106 	br	8044114 <close+0x78>
 8044110:	0005883a 	mov	r2,zero
 8044114:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8044118:	e13fff17 	ldw	r4,-4(fp)
 804411c:	80447840 	call	8044784 <alt_release_fd>
    if (rval < 0)
 8044120:	e0bffe17 	ldw	r2,-8(fp)
 8044124:	1000070e 	bge	r2,zero,8044144 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8044128:	80440600 	call	8044060 <alt_get_errno>
 804412c:	1007883a 	mov	r3,r2
 8044130:	e0bffe17 	ldw	r2,-8(fp)
 8044134:	0085c83a 	sub	r2,zero,r2
 8044138:	18800015 	stw	r2,0(r3)
      return -1;
 804413c:	00bfffc4 	movi	r2,-1
 8044140:	00000706 	br	8044160 <close+0xc4>
    }
    return 0;
 8044144:	0005883a 	mov	r2,zero
 8044148:	00000506 	br	8044160 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 804414c:	80440600 	call	8044060 <alt_get_errno>
 8044150:	1007883a 	mov	r3,r2
 8044154:	00801444 	movi	r2,81
 8044158:	18800015 	stw	r2,0(r3)
    return -1;
 804415c:	00bfffc4 	movi	r2,-1
  }
}
 8044160:	e037883a 	mov	sp,fp
 8044164:	dfc00117 	ldw	ra,4(sp)
 8044168:	df000017 	ldw	fp,0(sp)
 804416c:	dec00204 	addi	sp,sp,8
 8044170:	f800283a 	ret

08044174 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8044174:	defffc04 	addi	sp,sp,-16
 8044178:	df000315 	stw	fp,12(sp)
 804417c:	df000304 	addi	fp,sp,12
 8044180:	e13ffd15 	stw	r4,-12(fp)
 8044184:	e17ffe15 	stw	r5,-8(fp)
 8044188:	e1bfff15 	stw	r6,-4(fp)
  return len;
 804418c:	e0bfff17 	ldw	r2,-4(fp)
}
 8044190:	e037883a 	mov	sp,fp
 8044194:	df000017 	ldw	fp,0(sp)
 8044198:	dec00104 	addi	sp,sp,4
 804419c:	f800283a 	ret

080441a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80441a0:	defffe04 	addi	sp,sp,-8
 80441a4:	dfc00115 	stw	ra,4(sp)
 80441a8:	df000015 	stw	fp,0(sp)
 80441ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80441b0:	d0a00917 	ldw	r2,-32732(gp)
 80441b4:	10000326 	beq	r2,zero,80441c4 <alt_get_errno+0x24>
 80441b8:	d0a00917 	ldw	r2,-32732(gp)
 80441bc:	103ee83a 	callr	r2
 80441c0:	00000106 	br	80441c8 <alt_get_errno+0x28>
 80441c4:	d0a6c104 	addi	r2,gp,-25852
}
 80441c8:	e037883a 	mov	sp,fp
 80441cc:	dfc00117 	ldw	ra,4(sp)
 80441d0:	df000017 	ldw	fp,0(sp)
 80441d4:	dec00204 	addi	sp,sp,8
 80441d8:	f800283a 	ret

080441dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80441dc:	defffb04 	addi	sp,sp,-20
 80441e0:	dfc00415 	stw	ra,16(sp)
 80441e4:	df000315 	stw	fp,12(sp)
 80441e8:	df000304 	addi	fp,sp,12
 80441ec:	e13ffe15 	stw	r4,-8(fp)
 80441f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80441f4:	e0bffe17 	ldw	r2,-8(fp)
 80441f8:	10000816 	blt	r2,zero,804421c <fstat+0x40>
 80441fc:	01400304 	movi	r5,12
 8044200:	e13ffe17 	ldw	r4,-8(fp)
 8044204:	804109c0 	call	804109c <__mulsi3>
 8044208:	1007883a 	mov	r3,r2
 804420c:	00820174 	movhi	r2,2053
 8044210:	10a0ba04 	addi	r2,r2,-32024
 8044214:	1885883a 	add	r2,r3,r2
 8044218:	00000106 	br	8044220 <fstat+0x44>
 804421c:	0005883a 	mov	r2,zero
 8044220:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8044224:	e0bffd17 	ldw	r2,-12(fp)
 8044228:	10001026 	beq	r2,zero,804426c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 804422c:	e0bffd17 	ldw	r2,-12(fp)
 8044230:	10800017 	ldw	r2,0(r2)
 8044234:	10800817 	ldw	r2,32(r2)
 8044238:	10000726 	beq	r2,zero,8044258 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 804423c:	e0bffd17 	ldw	r2,-12(fp)
 8044240:	10800017 	ldw	r2,0(r2)
 8044244:	10800817 	ldw	r2,32(r2)
 8044248:	e17fff17 	ldw	r5,-4(fp)
 804424c:	e13ffd17 	ldw	r4,-12(fp)
 8044250:	103ee83a 	callr	r2
 8044254:	00000a06 	br	8044280 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8044258:	e0bfff17 	ldw	r2,-4(fp)
 804425c:	00c80004 	movi	r3,8192
 8044260:	10c00115 	stw	r3,4(r2)
      return 0;
 8044264:	0005883a 	mov	r2,zero
 8044268:	00000506 	br	8044280 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 804426c:	80441a00 	call	80441a0 <alt_get_errno>
 8044270:	1007883a 	mov	r3,r2
 8044274:	00801444 	movi	r2,81
 8044278:	18800015 	stw	r2,0(r3)
    return -1;
 804427c:	00bfffc4 	movi	r2,-1
  }
}
 8044280:	e037883a 	mov	sp,fp
 8044284:	dfc00117 	ldw	ra,4(sp)
 8044288:	df000017 	ldw	fp,0(sp)
 804428c:	dec00204 	addi	sp,sp,8
 8044290:	f800283a 	ret

08044294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8044294:	defffe04 	addi	sp,sp,-8
 8044298:	dfc00115 	stw	ra,4(sp)
 804429c:	df000015 	stw	fp,0(sp)
 80442a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80442a4:	d0a00917 	ldw	r2,-32732(gp)
 80442a8:	10000326 	beq	r2,zero,80442b8 <alt_get_errno+0x24>
 80442ac:	d0a00917 	ldw	r2,-32732(gp)
 80442b0:	103ee83a 	callr	r2
 80442b4:	00000106 	br	80442bc <alt_get_errno+0x28>
 80442b8:	d0a6c104 	addi	r2,gp,-25852
}
 80442bc:	e037883a 	mov	sp,fp
 80442c0:	dfc00117 	ldw	ra,4(sp)
 80442c4:	df000017 	ldw	fp,0(sp)
 80442c8:	dec00204 	addi	sp,sp,8
 80442cc:	f800283a 	ret

080442d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80442d0:	deffed04 	addi	sp,sp,-76
 80442d4:	dfc01215 	stw	ra,72(sp)
 80442d8:	df001115 	stw	fp,68(sp)
 80442dc:	df001104 	addi	fp,sp,68
 80442e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80442e4:	e0bfff17 	ldw	r2,-4(fp)
 80442e8:	10000816 	blt	r2,zero,804430c <isatty+0x3c>
 80442ec:	01400304 	movi	r5,12
 80442f0:	e13fff17 	ldw	r4,-4(fp)
 80442f4:	804109c0 	call	804109c <__mulsi3>
 80442f8:	1007883a 	mov	r3,r2
 80442fc:	00820174 	movhi	r2,2053
 8044300:	10a0ba04 	addi	r2,r2,-32024
 8044304:	1885883a 	add	r2,r3,r2
 8044308:	00000106 	br	8044310 <isatty+0x40>
 804430c:	0005883a 	mov	r2,zero
 8044310:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8044314:	e0bfef17 	ldw	r2,-68(fp)
 8044318:	10000e26 	beq	r2,zero,8044354 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 804431c:	e0bfef17 	ldw	r2,-68(fp)
 8044320:	10800017 	ldw	r2,0(r2)
 8044324:	10800817 	ldw	r2,32(r2)
 8044328:	1000021e 	bne	r2,zero,8044334 <isatty+0x64>
    {
      return 1;
 804432c:	00800044 	movi	r2,1
 8044330:	00000d06 	br	8044368 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8044334:	e0bff004 	addi	r2,fp,-64
 8044338:	100b883a 	mov	r5,r2
 804433c:	e13fff17 	ldw	r4,-4(fp)
 8044340:	80441dc0 	call	80441dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8044344:	e0bff117 	ldw	r2,-60(fp)
 8044348:	10880020 	cmpeqi	r2,r2,8192
 804434c:	10803fcc 	andi	r2,r2,255
 8044350:	00000506 	br	8044368 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8044354:	80442940 	call	8044294 <alt_get_errno>
 8044358:	1007883a 	mov	r3,r2
 804435c:	00801444 	movi	r2,81
 8044360:	18800015 	stw	r2,0(r3)
    return 0;
 8044364:	0005883a 	mov	r2,zero
  }
}
 8044368:	e037883a 	mov	sp,fp
 804436c:	dfc00117 	ldw	ra,4(sp)
 8044370:	df000017 	ldw	fp,0(sp)
 8044374:	dec00204 	addi	sp,sp,8
 8044378:	f800283a 	ret

0804437c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 804437c:	defffc04 	addi	sp,sp,-16
 8044380:	df000315 	stw	fp,12(sp)
 8044384:	df000304 	addi	fp,sp,12
 8044388:	e13ffd15 	stw	r4,-12(fp)
 804438c:	e17ffe15 	stw	r5,-8(fp)
 8044390:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8044394:	e0fffe17 	ldw	r3,-8(fp)
 8044398:	e0bffd17 	ldw	r2,-12(fp)
 804439c:	18800c26 	beq	r3,r2,80443d0 <alt_load_section+0x54>
  {
    while( to != end )
 80443a0:	00000806 	br	80443c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80443a4:	e0bffe17 	ldw	r2,-8(fp)
 80443a8:	10c00104 	addi	r3,r2,4
 80443ac:	e0fffe15 	stw	r3,-8(fp)
 80443b0:	e0fffd17 	ldw	r3,-12(fp)
 80443b4:	19000104 	addi	r4,r3,4
 80443b8:	e13ffd15 	stw	r4,-12(fp)
 80443bc:	18c00017 	ldw	r3,0(r3)
 80443c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80443c4:	e0fffe17 	ldw	r3,-8(fp)
 80443c8:	e0bfff17 	ldw	r2,-4(fp)
 80443cc:	18bff51e 	bne	r3,r2,80443a4 <__alt_data_end+0xfffe4fa4>
    {
      *to++ = *from++;
    }
  }
}
 80443d0:	0001883a 	nop
 80443d4:	e037883a 	mov	sp,fp
 80443d8:	df000017 	ldw	fp,0(sp)
 80443dc:	dec00104 	addi	sp,sp,4
 80443e0:	f800283a 	ret

080443e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80443e4:	defffe04 	addi	sp,sp,-8
 80443e8:	dfc00115 	stw	ra,4(sp)
 80443ec:	df000015 	stw	fp,0(sp)
 80443f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80443f4:	01820174 	movhi	r6,2053
 80443f8:	31a55504 	addi	r6,r6,-27308
 80443fc:	01420134 	movhi	r5,2052
 8044400:	295ea504 	addi	r5,r5,31380
 8044404:	01020174 	movhi	r4,2053
 8044408:	21255504 	addi	r4,r4,-27308
 804440c:	804437c0 	call	804437c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8044410:	01820134 	movhi	r6,2052
 8044414:	31808c04 	addi	r6,r6,560
 8044418:	01420134 	movhi	r5,2052
 804441c:	29400804 	addi	r5,r5,32
 8044420:	01020134 	movhi	r4,2052
 8044424:	21000804 	addi	r4,r4,32
 8044428:	804437c0 	call	804437c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 804442c:	01820134 	movhi	r6,2052
 8044430:	319ea504 	addi	r6,r6,31380
 8044434:	01420134 	movhi	r5,2052
 8044438:	295e6d04 	addi	r5,r5,31156
 804443c:	01020134 	movhi	r4,2052
 8044440:	211e6d04 	addi	r4,r4,31156
 8044444:	804437c0 	call	804437c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8044448:	8046aa00 	call	8046aa0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 804444c:	8046cf00 	call	8046cf0 <alt_icache_flush_all>
}
 8044450:	0001883a 	nop
 8044454:	e037883a 	mov	sp,fp
 8044458:	dfc00117 	ldw	ra,4(sp)
 804445c:	df000017 	ldw	fp,0(sp)
 8044460:	dec00204 	addi	sp,sp,8
 8044464:	f800283a 	ret

08044468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8044468:	defffe04 	addi	sp,sp,-8
 804446c:	dfc00115 	stw	ra,4(sp)
 8044470:	df000015 	stw	fp,0(sp)
 8044474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044478:	d0a00917 	ldw	r2,-32732(gp)
 804447c:	10000326 	beq	r2,zero,804448c <alt_get_errno+0x24>
 8044480:	d0a00917 	ldw	r2,-32732(gp)
 8044484:	103ee83a 	callr	r2
 8044488:	00000106 	br	8044490 <alt_get_errno+0x28>
 804448c:	d0a6c104 	addi	r2,gp,-25852
}
 8044490:	e037883a 	mov	sp,fp
 8044494:	dfc00117 	ldw	ra,4(sp)
 8044498:	df000017 	ldw	fp,0(sp)
 804449c:	dec00204 	addi	sp,sp,8
 80444a0:	f800283a 	ret

080444a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80444a4:	defff904 	addi	sp,sp,-28
 80444a8:	dfc00615 	stw	ra,24(sp)
 80444ac:	df000515 	stw	fp,20(sp)
 80444b0:	df000504 	addi	fp,sp,20
 80444b4:	e13ffd15 	stw	r4,-12(fp)
 80444b8:	e17ffe15 	stw	r5,-8(fp)
 80444bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80444c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80444c4:	e0bffd17 	ldw	r2,-12(fp)
 80444c8:	10000816 	blt	r2,zero,80444ec <lseek+0x48>
 80444cc:	01400304 	movi	r5,12
 80444d0:	e13ffd17 	ldw	r4,-12(fp)
 80444d4:	804109c0 	call	804109c <__mulsi3>
 80444d8:	1007883a 	mov	r3,r2
 80444dc:	00820174 	movhi	r2,2053
 80444e0:	10a0ba04 	addi	r2,r2,-32024
 80444e4:	1885883a 	add	r2,r3,r2
 80444e8:	00000106 	br	80444f0 <lseek+0x4c>
 80444ec:	0005883a 	mov	r2,zero
 80444f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80444f4:	e0bffc17 	ldw	r2,-16(fp)
 80444f8:	10001026 	beq	r2,zero,804453c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80444fc:	e0bffc17 	ldw	r2,-16(fp)
 8044500:	10800017 	ldw	r2,0(r2)
 8044504:	10800717 	ldw	r2,28(r2)
 8044508:	10000926 	beq	r2,zero,8044530 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 804450c:	e0bffc17 	ldw	r2,-16(fp)
 8044510:	10800017 	ldw	r2,0(r2)
 8044514:	10800717 	ldw	r2,28(r2)
 8044518:	e1bfff17 	ldw	r6,-4(fp)
 804451c:	e17ffe17 	ldw	r5,-8(fp)
 8044520:	e13ffc17 	ldw	r4,-16(fp)
 8044524:	103ee83a 	callr	r2
 8044528:	e0bffb15 	stw	r2,-20(fp)
 804452c:	00000506 	br	8044544 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8044530:	00bfde84 	movi	r2,-134
 8044534:	e0bffb15 	stw	r2,-20(fp)
 8044538:	00000206 	br	8044544 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 804453c:	00bfebc4 	movi	r2,-81
 8044540:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8044544:	e0bffb17 	ldw	r2,-20(fp)
 8044548:	1000070e 	bge	r2,zero,8044568 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 804454c:	80444680 	call	8044468 <alt_get_errno>
 8044550:	1007883a 	mov	r3,r2
 8044554:	e0bffb17 	ldw	r2,-20(fp)
 8044558:	0085c83a 	sub	r2,zero,r2
 804455c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8044560:	00bfffc4 	movi	r2,-1
 8044564:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8044568:	e0bffb17 	ldw	r2,-20(fp)
}
 804456c:	e037883a 	mov	sp,fp
 8044570:	dfc00117 	ldw	ra,4(sp)
 8044574:	df000017 	ldw	fp,0(sp)
 8044578:	dec00204 	addi	sp,sp,8
 804457c:	f800283a 	ret

08044580 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8044580:	defffd04 	addi	sp,sp,-12
 8044584:	dfc00215 	stw	ra,8(sp)
 8044588:	df000115 	stw	fp,4(sp)
 804458c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8044590:	0009883a 	mov	r4,zero
 8044594:	8044bfc0 	call	8044bfc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8044598:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 804459c:	8044c340 	call	8044c34 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80445a0:	01820134 	movhi	r6,2052
 80445a4:	319e9304 	addi	r6,r6,31308
 80445a8:	01420134 	movhi	r5,2052
 80445ac:	295e9304 	addi	r5,r5,31308
 80445b0:	01020134 	movhi	r4,2052
 80445b4:	211e9304 	addi	r4,r4,31308
 80445b8:	80470940 	call	8047094 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80445bc:	8046ba00 	call	8046ba0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80445c0:	01020134 	movhi	r4,2052
 80445c4:	211b0004 	addi	r4,r4,27648
 80445c8:	80476200 	call	8047620 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80445cc:	d0a6c217 	ldw	r2,-25848(gp)
 80445d0:	d0e6c317 	ldw	r3,-25844(gp)
 80445d4:	d126c417 	ldw	r4,-25840(gp)
 80445d8:	200d883a 	mov	r6,r4
 80445dc:	180b883a 	mov	r5,r3
 80445e0:	1009883a 	mov	r4,r2
 80445e4:	8040e700 	call	8040e70 <main>
 80445e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80445ec:	01000044 	movi	r4,1
 80445f0:	804409c0 	call	804409c <close>
  exit (result);
 80445f4:	e13fff17 	ldw	r4,-4(fp)
 80445f8:	80476340 	call	8047634 <exit>

080445fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80445fc:	defffe04 	addi	sp,sp,-8
 8044600:	df000115 	stw	fp,4(sp)
 8044604:	df000104 	addi	fp,sp,4
 8044608:	e13fff15 	stw	r4,-4(fp)
}
 804460c:	0001883a 	nop
 8044610:	e037883a 	mov	sp,fp
 8044614:	df000017 	ldw	fp,0(sp)
 8044618:	dec00104 	addi	sp,sp,4
 804461c:	f800283a 	ret

08044620 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8044620:	defffe04 	addi	sp,sp,-8
 8044624:	df000115 	stw	fp,4(sp)
 8044628:	df000104 	addi	fp,sp,4
 804462c:	e13fff15 	stw	r4,-4(fp)
}
 8044630:	0001883a 	nop
 8044634:	e037883a 	mov	sp,fp
 8044638:	df000017 	ldw	fp,0(sp)
 804463c:	dec00104 	addi	sp,sp,4
 8044640:	f800283a 	ret

08044644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8044644:	defffe04 	addi	sp,sp,-8
 8044648:	dfc00115 	stw	ra,4(sp)
 804464c:	df000015 	stw	fp,0(sp)
 8044650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044654:	d0a00917 	ldw	r2,-32732(gp)
 8044658:	10000326 	beq	r2,zero,8044668 <alt_get_errno+0x24>
 804465c:	d0a00917 	ldw	r2,-32732(gp)
 8044660:	103ee83a 	callr	r2
 8044664:	00000106 	br	804466c <alt_get_errno+0x28>
 8044668:	d0a6c104 	addi	r2,gp,-25852
}
 804466c:	e037883a 	mov	sp,fp
 8044670:	dfc00117 	ldw	ra,4(sp)
 8044674:	df000017 	ldw	fp,0(sp)
 8044678:	dec00204 	addi	sp,sp,8
 804467c:	f800283a 	ret

08044680 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8044680:	defff904 	addi	sp,sp,-28
 8044684:	dfc00615 	stw	ra,24(sp)
 8044688:	df000515 	stw	fp,20(sp)
 804468c:	df000504 	addi	fp,sp,20
 8044690:	e13ffd15 	stw	r4,-12(fp)
 8044694:	e17ffe15 	stw	r5,-8(fp)
 8044698:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804469c:	e0bffd17 	ldw	r2,-12(fp)
 80446a0:	10000816 	blt	r2,zero,80446c4 <read+0x44>
 80446a4:	01400304 	movi	r5,12
 80446a8:	e13ffd17 	ldw	r4,-12(fp)
 80446ac:	804109c0 	call	804109c <__mulsi3>
 80446b0:	1007883a 	mov	r3,r2
 80446b4:	00820174 	movhi	r2,2053
 80446b8:	10a0ba04 	addi	r2,r2,-32024
 80446bc:	1885883a 	add	r2,r3,r2
 80446c0:	00000106 	br	80446c8 <read+0x48>
 80446c4:	0005883a 	mov	r2,zero
 80446c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80446cc:	e0bffb17 	ldw	r2,-20(fp)
 80446d0:	10002226 	beq	r2,zero,804475c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80446d4:	e0bffb17 	ldw	r2,-20(fp)
 80446d8:	10800217 	ldw	r2,8(r2)
 80446dc:	108000cc 	andi	r2,r2,3
 80446e0:	10800060 	cmpeqi	r2,r2,1
 80446e4:	1000181e 	bne	r2,zero,8044748 <read+0xc8>
        (fd->dev->read))
 80446e8:	e0bffb17 	ldw	r2,-20(fp)
 80446ec:	10800017 	ldw	r2,0(r2)
 80446f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80446f4:	10001426 	beq	r2,zero,8044748 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80446f8:	e0bffb17 	ldw	r2,-20(fp)
 80446fc:	10800017 	ldw	r2,0(r2)
 8044700:	10800517 	ldw	r2,20(r2)
 8044704:	e0ffff17 	ldw	r3,-4(fp)
 8044708:	180d883a 	mov	r6,r3
 804470c:	e17ffe17 	ldw	r5,-8(fp)
 8044710:	e13ffb17 	ldw	r4,-20(fp)
 8044714:	103ee83a 	callr	r2
 8044718:	e0bffc15 	stw	r2,-16(fp)
 804471c:	e0bffc17 	ldw	r2,-16(fp)
 8044720:	1000070e 	bge	r2,zero,8044740 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8044724:	80446440 	call	8044644 <alt_get_errno>
 8044728:	1007883a 	mov	r3,r2
 804472c:	e0bffc17 	ldw	r2,-16(fp)
 8044730:	0085c83a 	sub	r2,zero,r2
 8044734:	18800015 	stw	r2,0(r3)
          return -1;
 8044738:	00bfffc4 	movi	r2,-1
 804473c:	00000c06 	br	8044770 <read+0xf0>
        }
        return rval;
 8044740:	e0bffc17 	ldw	r2,-16(fp)
 8044744:	00000a06 	br	8044770 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8044748:	80446440 	call	8044644 <alt_get_errno>
 804474c:	1007883a 	mov	r3,r2
 8044750:	00800344 	movi	r2,13
 8044754:	18800015 	stw	r2,0(r3)
 8044758:	00000406 	br	804476c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 804475c:	80446440 	call	8044644 <alt_get_errno>
 8044760:	1007883a 	mov	r3,r2
 8044764:	00801444 	movi	r2,81
 8044768:	18800015 	stw	r2,0(r3)
  }
  return -1;
 804476c:	00bfffc4 	movi	r2,-1
}
 8044770:	e037883a 	mov	sp,fp
 8044774:	dfc00117 	ldw	ra,4(sp)
 8044778:	df000017 	ldw	fp,0(sp)
 804477c:	dec00204 	addi	sp,sp,8
 8044780:	f800283a 	ret

08044784 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8044784:	defffc04 	addi	sp,sp,-16
 8044788:	dfc00315 	stw	ra,12(sp)
 804478c:	df000215 	stw	fp,8(sp)
 8044790:	dc000115 	stw	r16,4(sp)
 8044794:	df000204 	addi	fp,sp,8
 8044798:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 804479c:	e0bffe17 	ldw	r2,-8(fp)
 80447a0:	108000d0 	cmplti	r2,r2,3
 80447a4:	1000111e 	bne	r2,zero,80447ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80447a8:	04020174 	movhi	r16,2053
 80447ac:	8420ba04 	addi	r16,r16,-32024
 80447b0:	e0bffe17 	ldw	r2,-8(fp)
 80447b4:	01400304 	movi	r5,12
 80447b8:	1009883a 	mov	r4,r2
 80447bc:	804109c0 	call	804109c <__mulsi3>
 80447c0:	8085883a 	add	r2,r16,r2
 80447c4:	10800204 	addi	r2,r2,8
 80447c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80447cc:	04020174 	movhi	r16,2053
 80447d0:	8420ba04 	addi	r16,r16,-32024
 80447d4:	e0bffe17 	ldw	r2,-8(fp)
 80447d8:	01400304 	movi	r5,12
 80447dc:	1009883a 	mov	r4,r2
 80447e0:	804109c0 	call	804109c <__mulsi3>
 80447e4:	8085883a 	add	r2,r16,r2
 80447e8:	10000015 	stw	zero,0(r2)
  }
}
 80447ec:	0001883a 	nop
 80447f0:	e6ffff04 	addi	sp,fp,-4
 80447f4:	dfc00217 	ldw	ra,8(sp)
 80447f8:	df000117 	ldw	fp,4(sp)
 80447fc:	dc000017 	ldw	r16,0(sp)
 8044800:	dec00304 	addi	sp,sp,12
 8044804:	f800283a 	ret

08044808 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8044808:	defff904 	addi	sp,sp,-28
 804480c:	df000615 	stw	fp,24(sp)
 8044810:	df000604 	addi	fp,sp,24
 8044814:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8044818:	0005303a 	rdctl	r2,status
 804481c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8044820:	e0fffe17 	ldw	r3,-8(fp)
 8044824:	00bfff84 	movi	r2,-2
 8044828:	1884703a 	and	r2,r3,r2
 804482c:	1001703a 	wrctl	status,r2
  
  return context;
 8044830:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8044834:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8044838:	d0a00a17 	ldw	r2,-32728(gp)
 804483c:	10c000c4 	addi	r3,r2,3
 8044840:	00bfff04 	movi	r2,-4
 8044844:	1884703a 	and	r2,r3,r2
 8044848:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 804484c:	d0e00a17 	ldw	r3,-32728(gp)
 8044850:	e0bfff17 	ldw	r2,-4(fp)
 8044854:	1887883a 	add	r3,r3,r2
 8044858:	008201b4 	movhi	r2,2054
 804485c:	10bd0004 	addi	r2,r2,-3072
 8044860:	10c0062e 	bgeu	r2,r3,804487c <sbrk+0x74>
 8044864:	e0bffb17 	ldw	r2,-20(fp)
 8044868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804486c:	e0bffa17 	ldw	r2,-24(fp)
 8044870:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8044874:	00bfffc4 	movi	r2,-1
 8044878:	00000b06 	br	80448a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 804487c:	d0a00a17 	ldw	r2,-32728(gp)
 8044880:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8044884:	d0e00a17 	ldw	r3,-32728(gp)
 8044888:	e0bfff17 	ldw	r2,-4(fp)
 804488c:	1885883a 	add	r2,r3,r2
 8044890:	d0a00a15 	stw	r2,-32728(gp)
 8044894:	e0bffb17 	ldw	r2,-20(fp)
 8044898:	e0bffc15 	stw	r2,-16(fp)
 804489c:	e0bffc17 	ldw	r2,-16(fp)
 80448a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80448a4:	e0bffd17 	ldw	r2,-12(fp)
} 
 80448a8:	e037883a 	mov	sp,fp
 80448ac:	df000017 	ldw	fp,0(sp)
 80448b0:	dec00104 	addi	sp,sp,4
 80448b4:	f800283a 	ret

080448b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80448b8:	defffa04 	addi	sp,sp,-24
 80448bc:	df000515 	stw	fp,20(sp)
 80448c0:	df000504 	addi	fp,sp,20
 80448c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80448c8:	0005303a 	rdctl	r2,status
 80448cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80448d0:	e0fffc17 	ldw	r3,-16(fp)
 80448d4:	00bfff84 	movi	r2,-2
 80448d8:	1884703a 	and	r2,r3,r2
 80448dc:	1001703a 	wrctl	status,r2
  
  return context;
 80448e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80448e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80448e8:	e0bfff17 	ldw	r2,-4(fp)
 80448ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80448f0:	e0bffd17 	ldw	r2,-12(fp)
 80448f4:	10800017 	ldw	r2,0(r2)
 80448f8:	e0fffd17 	ldw	r3,-12(fp)
 80448fc:	18c00117 	ldw	r3,4(r3)
 8044900:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8044904:	e0bffd17 	ldw	r2,-12(fp)
 8044908:	10800117 	ldw	r2,4(r2)
 804490c:	e0fffd17 	ldw	r3,-12(fp)
 8044910:	18c00017 	ldw	r3,0(r3)
 8044914:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8044918:	e0bffd17 	ldw	r2,-12(fp)
 804491c:	e0fffd17 	ldw	r3,-12(fp)
 8044920:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8044924:	e0bffd17 	ldw	r2,-12(fp)
 8044928:	e0fffd17 	ldw	r3,-12(fp)
 804492c:	10c00015 	stw	r3,0(r2)
 8044930:	e0bffb17 	ldw	r2,-20(fp)
 8044934:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8044938:	e0bffe17 	ldw	r2,-8(fp)
 804493c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8044940:	0001883a 	nop
 8044944:	e037883a 	mov	sp,fp
 8044948:	df000017 	ldw	fp,0(sp)
 804494c:	dec00104 	addi	sp,sp,4
 8044950:	f800283a 	ret

08044954 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8044954:	defffb04 	addi	sp,sp,-20
 8044958:	dfc00415 	stw	ra,16(sp)
 804495c:	df000315 	stw	fp,12(sp)
 8044960:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8044964:	d0a00b17 	ldw	r2,-32724(gp)
 8044968:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 804496c:	d0a6c617 	ldw	r2,-25832(gp)
 8044970:	10800044 	addi	r2,r2,1
 8044974:	d0a6c615 	stw	r2,-25832(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8044978:	00002e06 	br	8044a34 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 804497c:	e0bffd17 	ldw	r2,-12(fp)
 8044980:	10800017 	ldw	r2,0(r2)
 8044984:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8044988:	e0bffd17 	ldw	r2,-12(fp)
 804498c:	10800403 	ldbu	r2,16(r2)
 8044990:	10803fcc 	andi	r2,r2,255
 8044994:	10000426 	beq	r2,zero,80449a8 <alt_tick+0x54>
 8044998:	d0a6c617 	ldw	r2,-25832(gp)
 804499c:	1000021e 	bne	r2,zero,80449a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80449a0:	e0bffd17 	ldw	r2,-12(fp)
 80449a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80449a8:	e0bffd17 	ldw	r2,-12(fp)
 80449ac:	10800217 	ldw	r2,8(r2)
 80449b0:	d0e6c617 	ldw	r3,-25832(gp)
 80449b4:	18801d36 	bltu	r3,r2,8044a2c <alt_tick+0xd8>
 80449b8:	e0bffd17 	ldw	r2,-12(fp)
 80449bc:	10800403 	ldbu	r2,16(r2)
 80449c0:	10803fcc 	andi	r2,r2,255
 80449c4:	1000191e 	bne	r2,zero,8044a2c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80449c8:	e0bffd17 	ldw	r2,-12(fp)
 80449cc:	10800317 	ldw	r2,12(r2)
 80449d0:	e0fffd17 	ldw	r3,-12(fp)
 80449d4:	18c00517 	ldw	r3,20(r3)
 80449d8:	1809883a 	mov	r4,r3
 80449dc:	103ee83a 	callr	r2
 80449e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80449e4:	e0bfff17 	ldw	r2,-4(fp)
 80449e8:	1000031e 	bne	r2,zero,80449f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80449ec:	e13ffd17 	ldw	r4,-12(fp)
 80449f0:	80448b80 	call	80448b8 <alt_alarm_stop>
 80449f4:	00000d06 	br	8044a2c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80449f8:	e0bffd17 	ldw	r2,-12(fp)
 80449fc:	10c00217 	ldw	r3,8(r2)
 8044a00:	e0bfff17 	ldw	r2,-4(fp)
 8044a04:	1887883a 	add	r3,r3,r2
 8044a08:	e0bffd17 	ldw	r2,-12(fp)
 8044a0c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8044a10:	e0bffd17 	ldw	r2,-12(fp)
 8044a14:	10c00217 	ldw	r3,8(r2)
 8044a18:	d0a6c617 	ldw	r2,-25832(gp)
 8044a1c:	1880032e 	bgeu	r3,r2,8044a2c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8044a20:	e0bffd17 	ldw	r2,-12(fp)
 8044a24:	00c00044 	movi	r3,1
 8044a28:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8044a2c:	e0bffe17 	ldw	r2,-8(fp)
 8044a30:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8044a34:	e0fffd17 	ldw	r3,-12(fp)
 8044a38:	d0a00b04 	addi	r2,gp,-32724
 8044a3c:	18bfcf1e 	bne	r3,r2,804497c <__alt_data_end+0xfffe557c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8044a40:	0001883a 	nop
}
 8044a44:	0001883a 	nop
 8044a48:	e037883a 	mov	sp,fp
 8044a4c:	dfc00117 	ldw	ra,4(sp)
 8044a50:	df000017 	ldw	fp,0(sp)
 8044a54:	dec00204 	addi	sp,sp,8
 8044a58:	f800283a 	ret

08044a5c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8044a5c:	defffd04 	addi	sp,sp,-12
 8044a60:	dfc00215 	stw	ra,8(sp)
 8044a64:	df000115 	stw	fp,4(sp)
 8044a68:	df000104 	addi	fp,sp,4
 8044a6c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8044a70:	e13fff17 	ldw	r4,-4(fp)
 8044a74:	80469480 	call	8046948 <alt_busy_sleep>
}
 8044a78:	e037883a 	mov	sp,fp
 8044a7c:	dfc00117 	ldw	ra,4(sp)
 8044a80:	df000017 	ldw	fp,0(sp)
 8044a84:	dec00204 	addi	sp,sp,8
 8044a88:	f800283a 	ret

08044a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8044a8c:	defffe04 	addi	sp,sp,-8
 8044a90:	dfc00115 	stw	ra,4(sp)
 8044a94:	df000015 	stw	fp,0(sp)
 8044a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044a9c:	d0a00917 	ldw	r2,-32732(gp)
 8044aa0:	10000326 	beq	r2,zero,8044ab0 <alt_get_errno+0x24>
 8044aa4:	d0a00917 	ldw	r2,-32732(gp)
 8044aa8:	103ee83a 	callr	r2
 8044aac:	00000106 	br	8044ab4 <alt_get_errno+0x28>
 8044ab0:	d0a6c104 	addi	r2,gp,-25852
}
 8044ab4:	e037883a 	mov	sp,fp
 8044ab8:	dfc00117 	ldw	ra,4(sp)
 8044abc:	df000017 	ldw	fp,0(sp)
 8044ac0:	dec00204 	addi	sp,sp,8
 8044ac4:	f800283a 	ret

08044ac8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8044ac8:	defff904 	addi	sp,sp,-28
 8044acc:	dfc00615 	stw	ra,24(sp)
 8044ad0:	df000515 	stw	fp,20(sp)
 8044ad4:	df000504 	addi	fp,sp,20
 8044ad8:	e13ffd15 	stw	r4,-12(fp)
 8044adc:	e17ffe15 	stw	r5,-8(fp)
 8044ae0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8044ae4:	e0bffd17 	ldw	r2,-12(fp)
 8044ae8:	10000816 	blt	r2,zero,8044b0c <write+0x44>
 8044aec:	01400304 	movi	r5,12
 8044af0:	e13ffd17 	ldw	r4,-12(fp)
 8044af4:	804109c0 	call	804109c <__mulsi3>
 8044af8:	1007883a 	mov	r3,r2
 8044afc:	00820174 	movhi	r2,2053
 8044b00:	10a0ba04 	addi	r2,r2,-32024
 8044b04:	1885883a 	add	r2,r3,r2
 8044b08:	00000106 	br	8044b10 <write+0x48>
 8044b0c:	0005883a 	mov	r2,zero
 8044b10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8044b14:	e0bffb17 	ldw	r2,-20(fp)
 8044b18:	10002126 	beq	r2,zero,8044ba0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8044b1c:	e0bffb17 	ldw	r2,-20(fp)
 8044b20:	10800217 	ldw	r2,8(r2)
 8044b24:	108000cc 	andi	r2,r2,3
 8044b28:	10001826 	beq	r2,zero,8044b8c <write+0xc4>
 8044b2c:	e0bffb17 	ldw	r2,-20(fp)
 8044b30:	10800017 	ldw	r2,0(r2)
 8044b34:	10800617 	ldw	r2,24(r2)
 8044b38:	10001426 	beq	r2,zero,8044b8c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8044b3c:	e0bffb17 	ldw	r2,-20(fp)
 8044b40:	10800017 	ldw	r2,0(r2)
 8044b44:	10800617 	ldw	r2,24(r2)
 8044b48:	e0ffff17 	ldw	r3,-4(fp)
 8044b4c:	180d883a 	mov	r6,r3
 8044b50:	e17ffe17 	ldw	r5,-8(fp)
 8044b54:	e13ffb17 	ldw	r4,-20(fp)
 8044b58:	103ee83a 	callr	r2
 8044b5c:	e0bffc15 	stw	r2,-16(fp)
 8044b60:	e0bffc17 	ldw	r2,-16(fp)
 8044b64:	1000070e 	bge	r2,zero,8044b84 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8044b68:	8044a8c0 	call	8044a8c <alt_get_errno>
 8044b6c:	1007883a 	mov	r3,r2
 8044b70:	e0bffc17 	ldw	r2,-16(fp)
 8044b74:	0085c83a 	sub	r2,zero,r2
 8044b78:	18800015 	stw	r2,0(r3)
        return -1;
 8044b7c:	00bfffc4 	movi	r2,-1
 8044b80:	00000c06 	br	8044bb4 <write+0xec>
      }
      return rval;
 8044b84:	e0bffc17 	ldw	r2,-16(fp)
 8044b88:	00000a06 	br	8044bb4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8044b8c:	8044a8c0 	call	8044a8c <alt_get_errno>
 8044b90:	1007883a 	mov	r3,r2
 8044b94:	00800344 	movi	r2,13
 8044b98:	18800015 	stw	r2,0(r3)
 8044b9c:	00000406 	br	8044bb0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8044ba0:	8044a8c0 	call	8044a8c <alt_get_errno>
 8044ba4:	1007883a 	mov	r3,r2
 8044ba8:	00801444 	movi	r2,81
 8044bac:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8044bb0:	00bfffc4 	movi	r2,-1
}
 8044bb4:	e037883a 	mov	sp,fp
 8044bb8:	dfc00117 	ldw	ra,4(sp)
 8044bbc:	df000017 	ldw	fp,0(sp)
 8044bc0:	dec00204 	addi	sp,sp,8
 8044bc4:	f800283a 	ret

08044bc8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8044bc8:	defffd04 	addi	sp,sp,-12
 8044bcc:	dfc00215 	stw	ra,8(sp)
 8044bd0:	df000115 	stw	fp,4(sp)
 8044bd4:	df000104 	addi	fp,sp,4
 8044bd8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8044bdc:	d1600604 	addi	r5,gp,-32744
 8044be0:	e13fff17 	ldw	r4,-4(fp)
 8044be4:	8046afc0 	call	8046afc <alt_dev_llist_insert>
}
 8044be8:	e037883a 	mov	sp,fp
 8044bec:	dfc00117 	ldw	ra,4(sp)
 8044bf0:	df000017 	ldw	fp,0(sp)
 8044bf4:	dec00204 	addi	sp,sp,8
 8044bf8:	f800283a 	ret

08044bfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8044bfc:	defffd04 	addi	sp,sp,-12
 8044c00:	dfc00215 	stw	ra,8(sp)
 8044c04:	df000115 	stw	fp,4(sp)
 8044c08:	df000104 	addi	fp,sp,4
 8044c0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( TOP_LEVEL, top_level);
 8044c10:	80473940 	call	8047394 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8044c14:	00800044 	movi	r2,1
 8044c18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8044c1c:	0001883a 	nop
 8044c20:	e037883a 	mov	sp,fp
 8044c24:	dfc00117 	ldw	ra,4(sp)
 8044c28:	df000017 	ldw	fp,0(sp)
 8044c2c:	dec00204 	addi	sp,sp,8
 8044c30:	f800283a 	ret

08044c34 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8044c34:	defffd04 	addi	sp,sp,-12
 8044c38:	dfc00215 	stw	ra,8(sp)
 8044c3c:	df000115 	stw	fp,4(sp)
 8044c40:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8044c44:	01c0fa04 	movi	r7,1000
 8044c48:	01800044 	movi	r6,1
 8044c4c:	000b883a 	mov	r5,zero
 8044c50:	01020234 	movhi	r4,2056
 8044c54:	21040804 	addi	r4,r4,4128
 8044c58:	80459540 	call	8045954 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8044c5c:	000d883a 	mov	r6,zero
 8044c60:	000b883a 	mov	r5,zero
 8044c64:	01020174 	movhi	r4,2053
 8044c68:	21212404 	addi	r4,r4,-31600
 8044c6c:	8044fd80 	call	8044fd8 <altera_avalon_jtag_uart_init>
 8044c70:	01020174 	movhi	r4,2053
 8044c74:	21211a04 	addi	r4,r4,-31640
 8044c78:	8044bc80 	call	8044bc8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8044c7c:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8044c80:	00820174 	movhi	r2,2053
 8044c84:	10a53204 	addi	r2,r2,-27448
 8044c88:	10800a17 	ldw	r2,40(r2)
 8044c8c:	10800017 	ldw	r2,0(r2)
 8044c90:	1007883a 	mov	r3,r2
 8044c94:	00820174 	movhi	r2,2053
 8044c98:	10a53204 	addi	r2,r2,-27448
 8044c9c:	10c00b15 	stw	r3,44(r2)
 8044ca0:	00820174 	movhi	r2,2053
 8044ca4:	10a53204 	addi	r2,r2,-27448
 8044ca8:	10800a17 	ldw	r2,40(r2)
 8044cac:	10800104 	addi	r2,r2,4
 8044cb0:	10800017 	ldw	r2,0(r2)
 8044cb4:	1007883a 	mov	r3,r2
 8044cb8:	00820174 	movhi	r2,2053
 8044cbc:	10a53204 	addi	r2,r2,-27448
 8044cc0:	10c00c15 	stw	r3,48(r2)
 8044cc4:	00820174 	movhi	r2,2053
 8044cc8:	10a53204 	addi	r2,r2,-27448
 8044ccc:	10800a17 	ldw	r2,40(r2)
 8044cd0:	10800204 	addi	r2,r2,8
 8044cd4:	10800017 	ldw	r2,0(r2)
 8044cd8:	10ffffcc 	andi	r3,r2,65535
 8044cdc:	00820174 	movhi	r2,2053
 8044ce0:	10a53204 	addi	r2,r2,-27448
 8044ce4:	10c00f15 	stw	r3,60(r2)
 8044ce8:	00820174 	movhi	r2,2053
 8044cec:	10a53204 	addi	r2,r2,-27448
 8044cf0:	10800a17 	ldw	r2,40(r2)
 8044cf4:	10800204 	addi	r2,r2,8
 8044cf8:	10800017 	ldw	r2,0(r2)
 8044cfc:	1006d43a 	srli	r3,r2,16
 8044d00:	00820174 	movhi	r2,2053
 8044d04:	10a53204 	addi	r2,r2,-27448
 8044d08:	10c01015 	stw	r3,64(r2)
 8044d0c:	00820174 	movhi	r2,2053
 8044d10:	10a53204 	addi	r2,r2,-27448
 8044d14:	10800a17 	ldw	r2,40(r2)
 8044d18:	10800304 	addi	r2,r2,12
 8044d1c:	10800017 	ldw	r2,0(r2)
 8044d20:	1005d07a 	srai	r2,r2,1
 8044d24:	10c0004c 	andi	r3,r2,1
 8044d28:	00820174 	movhi	r2,2053
 8044d2c:	10a53204 	addi	r2,r2,-27448
 8044d30:	10c00d15 	stw	r3,52(r2)
 8044d34:	00820174 	movhi	r2,2053
 8044d38:	10a53204 	addi	r2,r2,-27448
 8044d3c:	10800a17 	ldw	r2,40(r2)
 8044d40:	10800304 	addi	r2,r2,12
 8044d44:	10800017 	ldw	r2,0(r2)
 8044d48:	1005d13a 	srai	r2,r2,4
 8044d4c:	10c003cc 	andi	r3,r2,15
 8044d50:	00820174 	movhi	r2,2053
 8044d54:	10a53204 	addi	r2,r2,-27448
 8044d58:	10c00e15 	stw	r3,56(r2)
 8044d5c:	00820174 	movhi	r2,2053
 8044d60:	10a53204 	addi	r2,r2,-27448
 8044d64:	10800a17 	ldw	r2,40(r2)
 8044d68:	10800304 	addi	r2,r2,12
 8044d6c:	10800017 	ldw	r2,0(r2)
 8044d70:	1005d43a 	srai	r2,r2,16
 8044d74:	e0bfff05 	stb	r2,-4(fp)
 8044d78:	00820174 	movhi	r2,2053
 8044d7c:	10a53204 	addi	r2,r2,-27448
 8044d80:	10800a17 	ldw	r2,40(r2)
 8044d84:	10800304 	addi	r2,r2,12
 8044d88:	10800017 	ldw	r2,0(r2)
 8044d8c:	1004d63a 	srli	r2,r2,24
 8044d90:	e0bfff45 	stb	r2,-3(fp)
 8044d94:	00820174 	movhi	r2,2053
 8044d98:	10a53204 	addi	r2,r2,-27448
 8044d9c:	10800e17 	ldw	r2,56(r2)
 8044da0:	10800058 	cmpnei	r2,r2,1
 8044da4:	1000041e 	bne	r2,zero,8044db8 <alt_sys_init+0x184>
 8044da8:	00820174 	movhi	r2,2053
 8044dac:	10a53204 	addi	r2,r2,-27448
 8044db0:	10001115 	stw	zero,68(r2)
 8044db4:	00000e06 	br	8044df0 <alt_sys_init+0x1bc>
 8044db8:	00820174 	movhi	r2,2053
 8044dbc:	10a53204 	addi	r2,r2,-27448
 8044dc0:	10800e17 	ldw	r2,56(r2)
 8044dc4:	10800098 	cmpnei	r2,r2,2
 8044dc8:	1000051e 	bne	r2,zero,8044de0 <alt_sys_init+0x1ac>
 8044dcc:	00820174 	movhi	r2,2053
 8044dd0:	10a53204 	addi	r2,r2,-27448
 8044dd4:	00c00044 	movi	r3,1
 8044dd8:	10c01115 	stw	r3,68(r2)
 8044ddc:	00000406 	br	8044df0 <alt_sys_init+0x1bc>
 8044de0:	00820174 	movhi	r2,2053
 8044de4:	10a53204 	addi	r2,r2,-27448
 8044de8:	00c00084 	movi	r3,2
 8044dec:	10c01115 	stw	r3,68(r2)
 8044df0:	e0bfff03 	ldbu	r2,-4(fp)
 8044df4:	00c00804 	movi	r3,32
 8044df8:	1885c83a 	sub	r2,r3,r2
 8044dfc:	00ffffc4 	movi	r3,-1
 8044e00:	1886d83a 	srl	r3,r3,r2
 8044e04:	00820174 	movhi	r2,2053
 8044e08:	10a53204 	addi	r2,r2,-27448
 8044e0c:	10c01215 	stw	r3,72(r2)
 8044e10:	e0ffff03 	ldbu	r3,-4(fp)
 8044e14:	00820174 	movhi	r2,2053
 8044e18:	10a53204 	addi	r2,r2,-27448
 8044e1c:	10801117 	ldw	r2,68(r2)
 8044e20:	1887883a 	add	r3,r3,r2
 8044e24:	00820174 	movhi	r2,2053
 8044e28:	10a53204 	addi	r2,r2,-27448
 8044e2c:	10c01315 	stw	r3,76(r2)
 8044e30:	e0bfff43 	ldbu	r2,-3(fp)
 8044e34:	00c00804 	movi	r3,32
 8044e38:	1885c83a 	sub	r2,r3,r2
 8044e3c:	00ffffc4 	movi	r3,-1
 8044e40:	1886d83a 	srl	r3,r3,r2
 8044e44:	00820174 	movhi	r2,2053
 8044e48:	10a53204 	addi	r2,r2,-27448
 8044e4c:	10c01415 	stw	r3,80(r2)
 8044e50:	01020174 	movhi	r4,2053
 8044e54:	21253204 	addi	r4,r4,-27448
 8044e58:	8044bc80 	call	8044bc8 <alt_dev_reg>
}
 8044e5c:	0001883a 	nop
 8044e60:	e037883a 	mov	sp,fp
 8044e64:	dfc00117 	ldw	ra,4(sp)
 8044e68:	df000017 	ldw	fp,0(sp)
 8044e6c:	dec00204 	addi	sp,sp,8
 8044e70:	f800283a 	ret

08044e74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8044e74:	defffa04 	addi	sp,sp,-24
 8044e78:	dfc00515 	stw	ra,20(sp)
 8044e7c:	df000415 	stw	fp,16(sp)
 8044e80:	df000404 	addi	fp,sp,16
 8044e84:	e13ffd15 	stw	r4,-12(fp)
 8044e88:	e17ffe15 	stw	r5,-8(fp)
 8044e8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8044e90:	e0bffd17 	ldw	r2,-12(fp)
 8044e94:	10800017 	ldw	r2,0(r2)
 8044e98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8044e9c:	e0bffc17 	ldw	r2,-16(fp)
 8044ea0:	10c00a04 	addi	r3,r2,40
 8044ea4:	e0bffd17 	ldw	r2,-12(fp)
 8044ea8:	10800217 	ldw	r2,8(r2)
 8044eac:	100f883a 	mov	r7,r2
 8044eb0:	e1bfff17 	ldw	r6,-4(fp)
 8044eb4:	e17ffe17 	ldw	r5,-8(fp)
 8044eb8:	1809883a 	mov	r4,r3
 8044ebc:	804549c0 	call	804549c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8044ec0:	e037883a 	mov	sp,fp
 8044ec4:	dfc00117 	ldw	ra,4(sp)
 8044ec8:	df000017 	ldw	fp,0(sp)
 8044ecc:	dec00204 	addi	sp,sp,8
 8044ed0:	f800283a 	ret

08044ed4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8044ed4:	defffa04 	addi	sp,sp,-24
 8044ed8:	dfc00515 	stw	ra,20(sp)
 8044edc:	df000415 	stw	fp,16(sp)
 8044ee0:	df000404 	addi	fp,sp,16
 8044ee4:	e13ffd15 	stw	r4,-12(fp)
 8044ee8:	e17ffe15 	stw	r5,-8(fp)
 8044eec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8044ef0:	e0bffd17 	ldw	r2,-12(fp)
 8044ef4:	10800017 	ldw	r2,0(r2)
 8044ef8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8044efc:	e0bffc17 	ldw	r2,-16(fp)
 8044f00:	10c00a04 	addi	r3,r2,40
 8044f04:	e0bffd17 	ldw	r2,-12(fp)
 8044f08:	10800217 	ldw	r2,8(r2)
 8044f0c:	100f883a 	mov	r7,r2
 8044f10:	e1bfff17 	ldw	r6,-4(fp)
 8044f14:	e17ffe17 	ldw	r5,-8(fp)
 8044f18:	1809883a 	mov	r4,r3
 8044f1c:	80456b80 	call	80456b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8044f20:	e037883a 	mov	sp,fp
 8044f24:	dfc00117 	ldw	ra,4(sp)
 8044f28:	df000017 	ldw	fp,0(sp)
 8044f2c:	dec00204 	addi	sp,sp,8
 8044f30:	f800283a 	ret

08044f34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8044f34:	defffc04 	addi	sp,sp,-16
 8044f38:	dfc00315 	stw	ra,12(sp)
 8044f3c:	df000215 	stw	fp,8(sp)
 8044f40:	df000204 	addi	fp,sp,8
 8044f44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8044f48:	e0bfff17 	ldw	r2,-4(fp)
 8044f4c:	10800017 	ldw	r2,0(r2)
 8044f50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8044f54:	e0bffe17 	ldw	r2,-8(fp)
 8044f58:	10c00a04 	addi	r3,r2,40
 8044f5c:	e0bfff17 	ldw	r2,-4(fp)
 8044f60:	10800217 	ldw	r2,8(r2)
 8044f64:	100b883a 	mov	r5,r2
 8044f68:	1809883a 	mov	r4,r3
 8044f6c:	80453440 	call	8045344 <altera_avalon_jtag_uart_close>
}
 8044f70:	e037883a 	mov	sp,fp
 8044f74:	dfc00117 	ldw	ra,4(sp)
 8044f78:	df000017 	ldw	fp,0(sp)
 8044f7c:	dec00204 	addi	sp,sp,8
 8044f80:	f800283a 	ret

08044f84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8044f84:	defffa04 	addi	sp,sp,-24
 8044f88:	dfc00515 	stw	ra,20(sp)
 8044f8c:	df000415 	stw	fp,16(sp)
 8044f90:	df000404 	addi	fp,sp,16
 8044f94:	e13ffd15 	stw	r4,-12(fp)
 8044f98:	e17ffe15 	stw	r5,-8(fp)
 8044f9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8044fa0:	e0bffd17 	ldw	r2,-12(fp)
 8044fa4:	10800017 	ldw	r2,0(r2)
 8044fa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8044fac:	e0bffc17 	ldw	r2,-16(fp)
 8044fb0:	10800a04 	addi	r2,r2,40
 8044fb4:	e1bfff17 	ldw	r6,-4(fp)
 8044fb8:	e17ffe17 	ldw	r5,-8(fp)
 8044fbc:	1009883a 	mov	r4,r2
 8044fc0:	80453ac0 	call	80453ac <altera_avalon_jtag_uart_ioctl>
}
 8044fc4:	e037883a 	mov	sp,fp
 8044fc8:	dfc00117 	ldw	ra,4(sp)
 8044fcc:	df000017 	ldw	fp,0(sp)
 8044fd0:	dec00204 	addi	sp,sp,8
 8044fd4:	f800283a 	ret

08044fd8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8044fd8:	defffa04 	addi	sp,sp,-24
 8044fdc:	dfc00515 	stw	ra,20(sp)
 8044fe0:	df000415 	stw	fp,16(sp)
 8044fe4:	df000404 	addi	fp,sp,16
 8044fe8:	e13ffd15 	stw	r4,-12(fp)
 8044fec:	e17ffe15 	stw	r5,-8(fp)
 8044ff0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8044ff4:	e0bffd17 	ldw	r2,-12(fp)
 8044ff8:	00c00044 	movi	r3,1
 8044ffc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8045000:	e0bffd17 	ldw	r2,-12(fp)
 8045004:	10800017 	ldw	r2,0(r2)
 8045008:	10800104 	addi	r2,r2,4
 804500c:	1007883a 	mov	r3,r2
 8045010:	e0bffd17 	ldw	r2,-12(fp)
 8045014:	10800817 	ldw	r2,32(r2)
 8045018:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 804501c:	e0bffe17 	ldw	r2,-8(fp)
 8045020:	e0ffff17 	ldw	r3,-4(fp)
 8045024:	d8000015 	stw	zero,0(sp)
 8045028:	e1fffd17 	ldw	r7,-12(fp)
 804502c:	01820134 	movhi	r6,2052
 8045030:	31942604 	addi	r6,r6,20632
 8045034:	180b883a 	mov	r5,r3
 8045038:	1009883a 	mov	r4,r2
 804503c:	8046d100 	call	8046d10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8045040:	e0bffd17 	ldw	r2,-12(fp)
 8045044:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8045048:	e0bffd17 	ldw	r2,-12(fp)
 804504c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8045050:	d0e6c517 	ldw	r3,-25836(gp)
 8045054:	e1fffd17 	ldw	r7,-12(fp)
 8045058:	01820134 	movhi	r6,2052
 804505c:	3194a904 	addi	r6,r6,21156
 8045060:	180b883a 	mov	r5,r3
 8045064:	1009883a 	mov	r4,r2
 8045068:	8043f340 	call	8043f34 <alt_alarm_start>
 804506c:	1000040e 	bge	r2,zero,8045080 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8045070:	e0fffd17 	ldw	r3,-12(fp)
 8045074:	00a00034 	movhi	r2,32768
 8045078:	10bfffc4 	addi	r2,r2,-1
 804507c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8045080:	0001883a 	nop
 8045084:	e037883a 	mov	sp,fp
 8045088:	dfc00117 	ldw	ra,4(sp)
 804508c:	df000017 	ldw	fp,0(sp)
 8045090:	dec00204 	addi	sp,sp,8
 8045094:	f800283a 	ret

08045098 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8045098:	defff804 	addi	sp,sp,-32
 804509c:	df000715 	stw	fp,28(sp)
 80450a0:	df000704 	addi	fp,sp,28
 80450a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80450a8:	e0bfff17 	ldw	r2,-4(fp)
 80450ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80450b0:	e0bffb17 	ldw	r2,-20(fp)
 80450b4:	10800017 	ldw	r2,0(r2)
 80450b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80450bc:	e0bffc17 	ldw	r2,-16(fp)
 80450c0:	10800104 	addi	r2,r2,4
 80450c4:	10800037 	ldwio	r2,0(r2)
 80450c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80450cc:	e0bffd17 	ldw	r2,-12(fp)
 80450d0:	1080c00c 	andi	r2,r2,768
 80450d4:	10006d26 	beq	r2,zero,804528c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80450d8:	e0bffd17 	ldw	r2,-12(fp)
 80450dc:	1080400c 	andi	r2,r2,256
 80450e0:	10003526 	beq	r2,zero,80451b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80450e4:	00800074 	movhi	r2,1
 80450e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80450ec:	e0bffb17 	ldw	r2,-20(fp)
 80450f0:	10800a17 	ldw	r2,40(r2)
 80450f4:	10800044 	addi	r2,r2,1
 80450f8:	1081ffcc 	andi	r2,r2,2047
 80450fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8045100:	e0bffb17 	ldw	r2,-20(fp)
 8045104:	10c00b17 	ldw	r3,44(r2)
 8045108:	e0bffe17 	ldw	r2,-8(fp)
 804510c:	18801526 	beq	r3,r2,8045164 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8045110:	e0bffc17 	ldw	r2,-16(fp)
 8045114:	10800037 	ldwio	r2,0(r2)
 8045118:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 804511c:	e0bff917 	ldw	r2,-28(fp)
 8045120:	10a0000c 	andi	r2,r2,32768
 8045124:	10001126 	beq	r2,zero,804516c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8045128:	e0bffb17 	ldw	r2,-20(fp)
 804512c:	10800a17 	ldw	r2,40(r2)
 8045130:	e0fff917 	ldw	r3,-28(fp)
 8045134:	1809883a 	mov	r4,r3
 8045138:	e0fffb17 	ldw	r3,-20(fp)
 804513c:	1885883a 	add	r2,r3,r2
 8045140:	10800e04 	addi	r2,r2,56
 8045144:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8045148:	e0bffb17 	ldw	r2,-20(fp)
 804514c:	10800a17 	ldw	r2,40(r2)
 8045150:	10800044 	addi	r2,r2,1
 8045154:	10c1ffcc 	andi	r3,r2,2047
 8045158:	e0bffb17 	ldw	r2,-20(fp)
 804515c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8045160:	003fe206 	br	80450ec <__alt_data_end+0xfffe5cec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8045164:	0001883a 	nop
 8045168:	00000106 	br	8045170 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 804516c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8045170:	e0bff917 	ldw	r2,-28(fp)
 8045174:	10bfffec 	andhi	r2,r2,65535
 8045178:	10000f26 	beq	r2,zero,80451b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 804517c:	e0bffb17 	ldw	r2,-20(fp)
 8045180:	10c00817 	ldw	r3,32(r2)
 8045184:	00bfff84 	movi	r2,-2
 8045188:	1886703a 	and	r3,r3,r2
 804518c:	e0bffb17 	ldw	r2,-20(fp)
 8045190:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8045194:	e0bffc17 	ldw	r2,-16(fp)
 8045198:	10800104 	addi	r2,r2,4
 804519c:	1007883a 	mov	r3,r2
 80451a0:	e0bffb17 	ldw	r2,-20(fp)
 80451a4:	10800817 	ldw	r2,32(r2)
 80451a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80451ac:	e0bffc17 	ldw	r2,-16(fp)
 80451b0:	10800104 	addi	r2,r2,4
 80451b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80451b8:	e0bffd17 	ldw	r2,-12(fp)
 80451bc:	1080800c 	andi	r2,r2,512
 80451c0:	103fbe26 	beq	r2,zero,80450bc <__alt_data_end+0xfffe5cbc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80451c4:	e0bffd17 	ldw	r2,-12(fp)
 80451c8:	1004d43a 	srli	r2,r2,16
 80451cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80451d0:	00001406 	br	8045224 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80451d4:	e0bffc17 	ldw	r2,-16(fp)
 80451d8:	e0fffb17 	ldw	r3,-20(fp)
 80451dc:	18c00d17 	ldw	r3,52(r3)
 80451e0:	e13ffb17 	ldw	r4,-20(fp)
 80451e4:	20c7883a 	add	r3,r4,r3
 80451e8:	18c20e04 	addi	r3,r3,2104
 80451ec:	18c00003 	ldbu	r3,0(r3)
 80451f0:	18c03fcc 	andi	r3,r3,255
 80451f4:	18c0201c 	xori	r3,r3,128
 80451f8:	18ffe004 	addi	r3,r3,-128
 80451fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8045200:	e0bffb17 	ldw	r2,-20(fp)
 8045204:	10800d17 	ldw	r2,52(r2)
 8045208:	10800044 	addi	r2,r2,1
 804520c:	10c1ffcc 	andi	r3,r2,2047
 8045210:	e0bffb17 	ldw	r2,-20(fp)
 8045214:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8045218:	e0bffa17 	ldw	r2,-24(fp)
 804521c:	10bfffc4 	addi	r2,r2,-1
 8045220:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8045224:	e0bffa17 	ldw	r2,-24(fp)
 8045228:	10000526 	beq	r2,zero,8045240 <altera_avalon_jtag_uart_irq+0x1a8>
 804522c:	e0bffb17 	ldw	r2,-20(fp)
 8045230:	10c00d17 	ldw	r3,52(r2)
 8045234:	e0bffb17 	ldw	r2,-20(fp)
 8045238:	10800c17 	ldw	r2,48(r2)
 804523c:	18bfe51e 	bne	r3,r2,80451d4 <__alt_data_end+0xfffe5dd4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8045240:	e0bffa17 	ldw	r2,-24(fp)
 8045244:	103f9d26 	beq	r2,zero,80450bc <__alt_data_end+0xfffe5cbc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8045248:	e0bffb17 	ldw	r2,-20(fp)
 804524c:	10c00817 	ldw	r3,32(r2)
 8045250:	00bfff44 	movi	r2,-3
 8045254:	1886703a 	and	r3,r3,r2
 8045258:	e0bffb17 	ldw	r2,-20(fp)
 804525c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8045260:	e0bffb17 	ldw	r2,-20(fp)
 8045264:	10800017 	ldw	r2,0(r2)
 8045268:	10800104 	addi	r2,r2,4
 804526c:	1007883a 	mov	r3,r2
 8045270:	e0bffb17 	ldw	r2,-20(fp)
 8045274:	10800817 	ldw	r2,32(r2)
 8045278:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 804527c:	e0bffc17 	ldw	r2,-16(fp)
 8045280:	10800104 	addi	r2,r2,4
 8045284:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8045288:	003f8c06 	br	80450bc <__alt_data_end+0xfffe5cbc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 804528c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8045290:	0001883a 	nop
 8045294:	e037883a 	mov	sp,fp
 8045298:	df000017 	ldw	fp,0(sp)
 804529c:	dec00104 	addi	sp,sp,4
 80452a0:	f800283a 	ret

080452a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80452a4:	defff804 	addi	sp,sp,-32
 80452a8:	df000715 	stw	fp,28(sp)
 80452ac:	df000704 	addi	fp,sp,28
 80452b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80452b4:	e0bffb17 	ldw	r2,-20(fp)
 80452b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80452bc:	e0bff917 	ldw	r2,-28(fp)
 80452c0:	10800017 	ldw	r2,0(r2)
 80452c4:	10800104 	addi	r2,r2,4
 80452c8:	10800037 	ldwio	r2,0(r2)
 80452cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80452d0:	e0bffa17 	ldw	r2,-24(fp)
 80452d4:	1081000c 	andi	r2,r2,1024
 80452d8:	10000b26 	beq	r2,zero,8045308 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80452dc:	e0bff917 	ldw	r2,-28(fp)
 80452e0:	10800017 	ldw	r2,0(r2)
 80452e4:	10800104 	addi	r2,r2,4
 80452e8:	1007883a 	mov	r3,r2
 80452ec:	e0bff917 	ldw	r2,-28(fp)
 80452f0:	10800817 	ldw	r2,32(r2)
 80452f4:	10810014 	ori	r2,r2,1024
 80452f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80452fc:	e0bff917 	ldw	r2,-28(fp)
 8045300:	10000915 	stw	zero,36(r2)
 8045304:	00000a06 	br	8045330 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8045308:	e0bff917 	ldw	r2,-28(fp)
 804530c:	10c00917 	ldw	r3,36(r2)
 8045310:	00a00034 	movhi	r2,32768
 8045314:	10bfff04 	addi	r2,r2,-4
 8045318:	10c00536 	bltu	r2,r3,8045330 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 804531c:	e0bff917 	ldw	r2,-28(fp)
 8045320:	10800917 	ldw	r2,36(r2)
 8045324:	10c00044 	addi	r3,r2,1
 8045328:	e0bff917 	ldw	r2,-28(fp)
 804532c:	10c00915 	stw	r3,36(r2)
 8045330:	d0a6c517 	ldw	r2,-25836(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8045334:	e037883a 	mov	sp,fp
 8045338:	df000017 	ldw	fp,0(sp)
 804533c:	dec00104 	addi	sp,sp,4
 8045340:	f800283a 	ret

08045344 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8045344:	defffd04 	addi	sp,sp,-12
 8045348:	df000215 	stw	fp,8(sp)
 804534c:	df000204 	addi	fp,sp,8
 8045350:	e13ffe15 	stw	r4,-8(fp)
 8045354:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8045358:	00000506 	br	8045370 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 804535c:	e0bfff17 	ldw	r2,-4(fp)
 8045360:	1090000c 	andi	r2,r2,16384
 8045364:	10000226 	beq	r2,zero,8045370 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8045368:	00bffd44 	movi	r2,-11
 804536c:	00000b06 	br	804539c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8045370:	e0bffe17 	ldw	r2,-8(fp)
 8045374:	10c00d17 	ldw	r3,52(r2)
 8045378:	e0bffe17 	ldw	r2,-8(fp)
 804537c:	10800c17 	ldw	r2,48(r2)
 8045380:	18800526 	beq	r3,r2,8045398 <altera_avalon_jtag_uart_close+0x54>
 8045384:	e0bffe17 	ldw	r2,-8(fp)
 8045388:	10c00917 	ldw	r3,36(r2)
 804538c:	e0bffe17 	ldw	r2,-8(fp)
 8045390:	10800117 	ldw	r2,4(r2)
 8045394:	18bff136 	bltu	r3,r2,804535c <__alt_data_end+0xfffe5f5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8045398:	0005883a 	mov	r2,zero
}
 804539c:	e037883a 	mov	sp,fp
 80453a0:	df000017 	ldw	fp,0(sp)
 80453a4:	dec00104 	addi	sp,sp,4
 80453a8:	f800283a 	ret

080453ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80453ac:	defffa04 	addi	sp,sp,-24
 80453b0:	df000515 	stw	fp,20(sp)
 80453b4:	df000504 	addi	fp,sp,20
 80453b8:	e13ffd15 	stw	r4,-12(fp)
 80453bc:	e17ffe15 	stw	r5,-8(fp)
 80453c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80453c4:	00bff9c4 	movi	r2,-25
 80453c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80453cc:	e0bffe17 	ldw	r2,-8(fp)
 80453d0:	10da8060 	cmpeqi	r3,r2,27137
 80453d4:	1800031e 	bne	r3,zero,80453e4 <altera_avalon_jtag_uart_ioctl+0x38>
 80453d8:	109a80a0 	cmpeqi	r2,r2,27138
 80453dc:	1000181e 	bne	r2,zero,8045440 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80453e0:	00002906 	br	8045488 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80453e4:	e0bffd17 	ldw	r2,-12(fp)
 80453e8:	10c00117 	ldw	r3,4(r2)
 80453ec:	00a00034 	movhi	r2,32768
 80453f0:	10bfffc4 	addi	r2,r2,-1
 80453f4:	18802126 	beq	r3,r2,804547c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80453f8:	e0bfff17 	ldw	r2,-4(fp)
 80453fc:	10800017 	ldw	r2,0(r2)
 8045400:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8045404:	e0bffc17 	ldw	r2,-16(fp)
 8045408:	10800090 	cmplti	r2,r2,2
 804540c:	1000061e 	bne	r2,zero,8045428 <altera_avalon_jtag_uart_ioctl+0x7c>
 8045410:	e0fffc17 	ldw	r3,-16(fp)
 8045414:	00a00034 	movhi	r2,32768
 8045418:	10bfffc4 	addi	r2,r2,-1
 804541c:	18800226 	beq	r3,r2,8045428 <altera_avalon_jtag_uart_ioctl+0x7c>
 8045420:	e0bffc17 	ldw	r2,-16(fp)
 8045424:	00000206 	br	8045430 <altera_avalon_jtag_uart_ioctl+0x84>
 8045428:	00a00034 	movhi	r2,32768
 804542c:	10bfff84 	addi	r2,r2,-2
 8045430:	e0fffd17 	ldw	r3,-12(fp)
 8045434:	18800115 	stw	r2,4(r3)
      rc = 0;
 8045438:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 804543c:	00000f06 	br	804547c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8045440:	e0bffd17 	ldw	r2,-12(fp)
 8045444:	10c00117 	ldw	r3,4(r2)
 8045448:	00a00034 	movhi	r2,32768
 804544c:	10bfffc4 	addi	r2,r2,-1
 8045450:	18800c26 	beq	r3,r2,8045484 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8045454:	e0bffd17 	ldw	r2,-12(fp)
 8045458:	10c00917 	ldw	r3,36(r2)
 804545c:	e0bffd17 	ldw	r2,-12(fp)
 8045460:	10800117 	ldw	r2,4(r2)
 8045464:	1885803a 	cmpltu	r2,r3,r2
 8045468:	10c03fcc 	andi	r3,r2,255
 804546c:	e0bfff17 	ldw	r2,-4(fp)
 8045470:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8045474:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8045478:	00000206 	br	8045484 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 804547c:	0001883a 	nop
 8045480:	00000106 	br	8045488 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8045484:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8045488:	e0bffb17 	ldw	r2,-20(fp)
}
 804548c:	e037883a 	mov	sp,fp
 8045490:	df000017 	ldw	fp,0(sp)
 8045494:	dec00104 	addi	sp,sp,4
 8045498:	f800283a 	ret

0804549c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 804549c:	defff304 	addi	sp,sp,-52
 80454a0:	dfc00c15 	stw	ra,48(sp)
 80454a4:	df000b15 	stw	fp,44(sp)
 80454a8:	df000b04 	addi	fp,sp,44
 80454ac:	e13ffc15 	stw	r4,-16(fp)
 80454b0:	e17ffd15 	stw	r5,-12(fp)
 80454b4:	e1bffe15 	stw	r6,-8(fp)
 80454b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80454bc:	e0bffd17 	ldw	r2,-12(fp)
 80454c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80454c4:	00004706 	br	80455e4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80454c8:	e0bffc17 	ldw	r2,-16(fp)
 80454cc:	10800a17 	ldw	r2,40(r2)
 80454d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80454d4:	e0bffc17 	ldw	r2,-16(fp)
 80454d8:	10800b17 	ldw	r2,44(r2)
 80454dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80454e0:	e0fff717 	ldw	r3,-36(fp)
 80454e4:	e0bff817 	ldw	r2,-32(fp)
 80454e8:	18800536 	bltu	r3,r2,8045500 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80454ec:	e0fff717 	ldw	r3,-36(fp)
 80454f0:	e0bff817 	ldw	r2,-32(fp)
 80454f4:	1885c83a 	sub	r2,r3,r2
 80454f8:	e0bff615 	stw	r2,-40(fp)
 80454fc:	00000406 	br	8045510 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8045500:	00c20004 	movi	r3,2048
 8045504:	e0bff817 	ldw	r2,-32(fp)
 8045508:	1885c83a 	sub	r2,r3,r2
 804550c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8045510:	e0bff617 	ldw	r2,-40(fp)
 8045514:	10001e26 	beq	r2,zero,8045590 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8045518:	e0fffe17 	ldw	r3,-8(fp)
 804551c:	e0bff617 	ldw	r2,-40(fp)
 8045520:	1880022e 	bgeu	r3,r2,804552c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8045524:	e0bffe17 	ldw	r2,-8(fp)
 8045528:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 804552c:	e0bffc17 	ldw	r2,-16(fp)
 8045530:	10c00e04 	addi	r3,r2,56
 8045534:	e0bff817 	ldw	r2,-32(fp)
 8045538:	1885883a 	add	r2,r3,r2
 804553c:	e1bff617 	ldw	r6,-40(fp)
 8045540:	100b883a 	mov	r5,r2
 8045544:	e13ff517 	ldw	r4,-44(fp)
 8045548:	80425ac0 	call	80425ac <memcpy>
      ptr   += n;
 804554c:	e0fff517 	ldw	r3,-44(fp)
 8045550:	e0bff617 	ldw	r2,-40(fp)
 8045554:	1885883a 	add	r2,r3,r2
 8045558:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 804555c:	e0fffe17 	ldw	r3,-8(fp)
 8045560:	e0bff617 	ldw	r2,-40(fp)
 8045564:	1885c83a 	sub	r2,r3,r2
 8045568:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 804556c:	e0fff817 	ldw	r3,-32(fp)
 8045570:	e0bff617 	ldw	r2,-40(fp)
 8045574:	1885883a 	add	r2,r3,r2
 8045578:	10c1ffcc 	andi	r3,r2,2047
 804557c:	e0bffc17 	ldw	r2,-16(fp)
 8045580:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8045584:	e0bffe17 	ldw	r2,-8(fp)
 8045588:	00bfcf16 	blt	zero,r2,80454c8 <__alt_data_end+0xfffe60c8>
 804558c:	00000106 	br	8045594 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8045590:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8045594:	e0fff517 	ldw	r3,-44(fp)
 8045598:	e0bffd17 	ldw	r2,-12(fp)
 804559c:	1880141e 	bne	r3,r2,80455f0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80455a0:	e0bfff17 	ldw	r2,-4(fp)
 80455a4:	1090000c 	andi	r2,r2,16384
 80455a8:	1000131e 	bne	r2,zero,80455f8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80455ac:	0001883a 	nop
 80455b0:	e0bffc17 	ldw	r2,-16(fp)
 80455b4:	10c00a17 	ldw	r3,40(r2)
 80455b8:	e0bff717 	ldw	r2,-36(fp)
 80455bc:	1880051e 	bne	r3,r2,80455d4 <altera_avalon_jtag_uart_read+0x138>
 80455c0:	e0bffc17 	ldw	r2,-16(fp)
 80455c4:	10c00917 	ldw	r3,36(r2)
 80455c8:	e0bffc17 	ldw	r2,-16(fp)
 80455cc:	10800117 	ldw	r2,4(r2)
 80455d0:	18bff736 	bltu	r3,r2,80455b0 <__alt_data_end+0xfffe61b0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80455d4:	e0bffc17 	ldw	r2,-16(fp)
 80455d8:	10c00a17 	ldw	r3,40(r2)
 80455dc:	e0bff717 	ldw	r2,-36(fp)
 80455e0:	18800726 	beq	r3,r2,8045600 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80455e4:	e0bffe17 	ldw	r2,-8(fp)
 80455e8:	00bfb716 	blt	zero,r2,80454c8 <__alt_data_end+0xfffe60c8>
 80455ec:	00000506 	br	8045604 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80455f0:	0001883a 	nop
 80455f4:	00000306 	br	8045604 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80455f8:	0001883a 	nop
 80455fc:	00000106 	br	8045604 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8045600:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8045604:	e0fff517 	ldw	r3,-44(fp)
 8045608:	e0bffd17 	ldw	r2,-12(fp)
 804560c:	18801826 	beq	r3,r2,8045670 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8045610:	0005303a 	rdctl	r2,status
 8045614:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8045618:	e0fffb17 	ldw	r3,-20(fp)
 804561c:	00bfff84 	movi	r2,-2
 8045620:	1884703a 	and	r2,r3,r2
 8045624:	1001703a 	wrctl	status,r2
  
  return context;
 8045628:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 804562c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8045630:	e0bffc17 	ldw	r2,-16(fp)
 8045634:	10800817 	ldw	r2,32(r2)
 8045638:	10c00054 	ori	r3,r2,1
 804563c:	e0bffc17 	ldw	r2,-16(fp)
 8045640:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8045644:	e0bffc17 	ldw	r2,-16(fp)
 8045648:	10800017 	ldw	r2,0(r2)
 804564c:	10800104 	addi	r2,r2,4
 8045650:	1007883a 	mov	r3,r2
 8045654:	e0bffc17 	ldw	r2,-16(fp)
 8045658:	10800817 	ldw	r2,32(r2)
 804565c:	18800035 	stwio	r2,0(r3)
 8045660:	e0bffa17 	ldw	r2,-24(fp)
 8045664:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8045668:	e0bff917 	ldw	r2,-28(fp)
 804566c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8045670:	e0fff517 	ldw	r3,-44(fp)
 8045674:	e0bffd17 	ldw	r2,-12(fp)
 8045678:	18800426 	beq	r3,r2,804568c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 804567c:	e0fff517 	ldw	r3,-44(fp)
 8045680:	e0bffd17 	ldw	r2,-12(fp)
 8045684:	1885c83a 	sub	r2,r3,r2
 8045688:	00000606 	br	80456a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 804568c:	e0bfff17 	ldw	r2,-4(fp)
 8045690:	1090000c 	andi	r2,r2,16384
 8045694:	10000226 	beq	r2,zero,80456a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8045698:	00bffd44 	movi	r2,-11
 804569c:	00000106 	br	80456a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80456a0:	00bffec4 	movi	r2,-5
}
 80456a4:	e037883a 	mov	sp,fp
 80456a8:	dfc00117 	ldw	ra,4(sp)
 80456ac:	df000017 	ldw	fp,0(sp)
 80456b0:	dec00204 	addi	sp,sp,8
 80456b4:	f800283a 	ret

080456b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80456b8:	defff304 	addi	sp,sp,-52
 80456bc:	dfc00c15 	stw	ra,48(sp)
 80456c0:	df000b15 	stw	fp,44(sp)
 80456c4:	df000b04 	addi	fp,sp,44
 80456c8:	e13ffc15 	stw	r4,-16(fp)
 80456cc:	e17ffd15 	stw	r5,-12(fp)
 80456d0:	e1bffe15 	stw	r6,-8(fp)
 80456d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80456d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80456dc:	e0bffd17 	ldw	r2,-12(fp)
 80456e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80456e4:	00003706 	br	80457c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80456e8:	e0bffc17 	ldw	r2,-16(fp)
 80456ec:	10800c17 	ldw	r2,48(r2)
 80456f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80456f4:	e0bffc17 	ldw	r2,-16(fp)
 80456f8:	10800d17 	ldw	r2,52(r2)
 80456fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8045700:	e0fff917 	ldw	r3,-28(fp)
 8045704:	e0bff517 	ldw	r2,-44(fp)
 8045708:	1880062e 	bgeu	r3,r2,8045724 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 804570c:	e0fff517 	ldw	r3,-44(fp)
 8045710:	e0bff917 	ldw	r2,-28(fp)
 8045714:	1885c83a 	sub	r2,r3,r2
 8045718:	10bfffc4 	addi	r2,r2,-1
 804571c:	e0bff615 	stw	r2,-40(fp)
 8045720:	00000b06 	br	8045750 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8045724:	e0bff517 	ldw	r2,-44(fp)
 8045728:	10000526 	beq	r2,zero,8045740 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 804572c:	00c20004 	movi	r3,2048
 8045730:	e0bff917 	ldw	r2,-28(fp)
 8045734:	1885c83a 	sub	r2,r3,r2
 8045738:	e0bff615 	stw	r2,-40(fp)
 804573c:	00000406 	br	8045750 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8045740:	00c1ffc4 	movi	r3,2047
 8045744:	e0bff917 	ldw	r2,-28(fp)
 8045748:	1885c83a 	sub	r2,r3,r2
 804574c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8045750:	e0bff617 	ldw	r2,-40(fp)
 8045754:	10001e26 	beq	r2,zero,80457d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8045758:	e0fffe17 	ldw	r3,-8(fp)
 804575c:	e0bff617 	ldw	r2,-40(fp)
 8045760:	1880022e 	bgeu	r3,r2,804576c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8045764:	e0bffe17 	ldw	r2,-8(fp)
 8045768:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 804576c:	e0bffc17 	ldw	r2,-16(fp)
 8045770:	10c20e04 	addi	r3,r2,2104
 8045774:	e0bff917 	ldw	r2,-28(fp)
 8045778:	1885883a 	add	r2,r3,r2
 804577c:	e1bff617 	ldw	r6,-40(fp)
 8045780:	e17ffd17 	ldw	r5,-12(fp)
 8045784:	1009883a 	mov	r4,r2
 8045788:	80425ac0 	call	80425ac <memcpy>
      ptr   += n;
 804578c:	e0fffd17 	ldw	r3,-12(fp)
 8045790:	e0bff617 	ldw	r2,-40(fp)
 8045794:	1885883a 	add	r2,r3,r2
 8045798:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 804579c:	e0fffe17 	ldw	r3,-8(fp)
 80457a0:	e0bff617 	ldw	r2,-40(fp)
 80457a4:	1885c83a 	sub	r2,r3,r2
 80457a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80457ac:	e0fff917 	ldw	r3,-28(fp)
 80457b0:	e0bff617 	ldw	r2,-40(fp)
 80457b4:	1885883a 	add	r2,r3,r2
 80457b8:	10c1ffcc 	andi	r3,r2,2047
 80457bc:	e0bffc17 	ldw	r2,-16(fp)
 80457c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80457c4:	e0bffe17 	ldw	r2,-8(fp)
 80457c8:	00bfc716 	blt	zero,r2,80456e8 <__alt_data_end+0xfffe62e8>
 80457cc:	00000106 	br	80457d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80457d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80457d4:	0005303a 	rdctl	r2,status
 80457d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80457dc:	e0fffb17 	ldw	r3,-20(fp)
 80457e0:	00bfff84 	movi	r2,-2
 80457e4:	1884703a 	and	r2,r3,r2
 80457e8:	1001703a 	wrctl	status,r2
  
  return context;
 80457ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80457f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80457f4:	e0bffc17 	ldw	r2,-16(fp)
 80457f8:	10800817 	ldw	r2,32(r2)
 80457fc:	10c00094 	ori	r3,r2,2
 8045800:	e0bffc17 	ldw	r2,-16(fp)
 8045804:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8045808:	e0bffc17 	ldw	r2,-16(fp)
 804580c:	10800017 	ldw	r2,0(r2)
 8045810:	10800104 	addi	r2,r2,4
 8045814:	1007883a 	mov	r3,r2
 8045818:	e0bffc17 	ldw	r2,-16(fp)
 804581c:	10800817 	ldw	r2,32(r2)
 8045820:	18800035 	stwio	r2,0(r3)
 8045824:	e0bffa17 	ldw	r2,-24(fp)
 8045828:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804582c:	e0bff817 	ldw	r2,-32(fp)
 8045830:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8045834:	e0bffe17 	ldw	r2,-8(fp)
 8045838:	0080100e 	bge	zero,r2,804587c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 804583c:	e0bfff17 	ldw	r2,-4(fp)
 8045840:	1090000c 	andi	r2,r2,16384
 8045844:	1000101e 	bne	r2,zero,8045888 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8045848:	0001883a 	nop
 804584c:	e0bffc17 	ldw	r2,-16(fp)
 8045850:	10c00d17 	ldw	r3,52(r2)
 8045854:	e0bff517 	ldw	r2,-44(fp)
 8045858:	1880051e 	bne	r3,r2,8045870 <altera_avalon_jtag_uart_write+0x1b8>
 804585c:	e0bffc17 	ldw	r2,-16(fp)
 8045860:	10c00917 	ldw	r3,36(r2)
 8045864:	e0bffc17 	ldw	r2,-16(fp)
 8045868:	10800117 	ldw	r2,4(r2)
 804586c:	18bff736 	bltu	r3,r2,804584c <__alt_data_end+0xfffe644c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8045870:	e0bffc17 	ldw	r2,-16(fp)
 8045874:	10800917 	ldw	r2,36(r2)
 8045878:	1000051e 	bne	r2,zero,8045890 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 804587c:	e0bffe17 	ldw	r2,-8(fp)
 8045880:	00bfd016 	blt	zero,r2,80457c4 <__alt_data_end+0xfffe63c4>
 8045884:	00000306 	br	8045894 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8045888:	0001883a 	nop
 804588c:	00000106 	br	8045894 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8045890:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8045894:	e0fffd17 	ldw	r3,-12(fp)
 8045898:	e0bff717 	ldw	r2,-36(fp)
 804589c:	18800426 	beq	r3,r2,80458b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80458a0:	e0fffd17 	ldw	r3,-12(fp)
 80458a4:	e0bff717 	ldw	r2,-36(fp)
 80458a8:	1885c83a 	sub	r2,r3,r2
 80458ac:	00000606 	br	80458c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80458b0:	e0bfff17 	ldw	r2,-4(fp)
 80458b4:	1090000c 	andi	r2,r2,16384
 80458b8:	10000226 	beq	r2,zero,80458c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80458bc:	00bffd44 	movi	r2,-11
 80458c0:	00000106 	br	80458c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80458c4:	00bffec4 	movi	r2,-5
}
 80458c8:	e037883a 	mov	sp,fp
 80458cc:	dfc00117 	ldw	ra,4(sp)
 80458d0:	df000017 	ldw	fp,0(sp)
 80458d4:	dec00204 	addi	sp,sp,8
 80458d8:	f800283a 	ret

080458dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80458dc:	defffa04 	addi	sp,sp,-24
 80458e0:	dfc00515 	stw	ra,20(sp)
 80458e4:	df000415 	stw	fp,16(sp)
 80458e8:	df000404 	addi	fp,sp,16
 80458ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80458f0:	0007883a 	mov	r3,zero
 80458f4:	e0bfff17 	ldw	r2,-4(fp)
 80458f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80458fc:	e0bfff17 	ldw	r2,-4(fp)
 8045900:	10800104 	addi	r2,r2,4
 8045904:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8045908:	0005303a 	rdctl	r2,status
 804590c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8045910:	e0fffd17 	ldw	r3,-12(fp)
 8045914:	00bfff84 	movi	r2,-2
 8045918:	1884703a 	and	r2,r3,r2
 804591c:	1001703a 	wrctl	status,r2
  
  return context;
 8045920:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8045924:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8045928:	80449540 	call	8044954 <alt_tick>
 804592c:	e0bffc17 	ldw	r2,-16(fp)
 8045930:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8045934:	e0bffe17 	ldw	r2,-8(fp)
 8045938:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 804593c:	0001883a 	nop
 8045940:	e037883a 	mov	sp,fp
 8045944:	dfc00117 	ldw	ra,4(sp)
 8045948:	df000017 	ldw	fp,0(sp)
 804594c:	dec00204 	addi	sp,sp,8
 8045950:	f800283a 	ret

08045954 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8045954:	defff804 	addi	sp,sp,-32
 8045958:	dfc00715 	stw	ra,28(sp)
 804595c:	df000615 	stw	fp,24(sp)
 8045960:	df000604 	addi	fp,sp,24
 8045964:	e13ffc15 	stw	r4,-16(fp)
 8045968:	e17ffd15 	stw	r5,-12(fp)
 804596c:	e1bffe15 	stw	r6,-8(fp)
 8045970:	e1ffff15 	stw	r7,-4(fp)
 8045974:	e0bfff17 	ldw	r2,-4(fp)
 8045978:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 804597c:	d0a6c517 	ldw	r2,-25836(gp)
 8045980:	1000021e 	bne	r2,zero,804598c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8045984:	e0bffb17 	ldw	r2,-20(fp)
 8045988:	d0a6c515 	stw	r2,-25836(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 804598c:	e0bffc17 	ldw	r2,-16(fp)
 8045990:	10800104 	addi	r2,r2,4
 8045994:	00c001c4 	movi	r3,7
 8045998:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 804599c:	d8000015 	stw	zero,0(sp)
 80459a0:	e1fffc17 	ldw	r7,-16(fp)
 80459a4:	01820134 	movhi	r6,2052
 80459a8:	31963704 	addi	r6,r6,22748
 80459ac:	e17ffe17 	ldw	r5,-8(fp)
 80459b0:	e13ffd17 	ldw	r4,-12(fp)
 80459b4:	8046d100 	call	8046d10 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80459b8:	0001883a 	nop
 80459bc:	e037883a 	mov	sp,fp
 80459c0:	dfc00117 	ldw	ra,4(sp)
 80459c4:	df000017 	ldw	fp,0(sp)
 80459c8:	dec00204 	addi	sp,sp,8
 80459cc:	f800283a 	ret

080459d0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 80459d0:	defffc04 	addi	sp,sp,-16
 80459d4:	dfc00315 	stw	ra,12(sp)
 80459d8:	df000215 	stw	fp,8(sp)
 80459dc:	df000204 	addi	fp,sp,8
 80459e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 80459e4:	d1600604 	addi	r5,gp,-32744
 80459e8:	e13fff17 	ldw	r4,-4(fp)
 80459ec:	8046c600 	call	8046c60 <alt_find_dev>
 80459f0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80459f4:	e0bffe17 	ldw	r2,-8(fp)
}
 80459f8:	e037883a 	mov	sp,fp
 80459fc:	dfc00117 	ldw	ra,4(sp)
 8045a00:	df000017 	ldw	fp,0(sp)
 8045a04:	dec00204 	addi	sp,sp,8
 8045a08:	f800283a 	ret

08045a0c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8045a0c:	defff904 	addi	sp,sp,-28
 8045a10:	dfc00615 	stw	ra,24(sp)
 8045a14:	df000515 	stw	fp,20(sp)
 8045a18:	df000504 	addi	fp,sp,20
 8045a1c:	e13ffc15 	stw	r4,-16(fp)
 8045a20:	e17ffd15 	stw	r5,-12(fp)
 8045a24:	e1bffe15 	stw	r6,-8(fp)
 8045a28:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8045a2c:	e0bffc17 	ldw	r2,-16(fp)
 8045a30:	10800f17 	ldw	r2,60(r2)
 8045a34:	e0fffe17 	ldw	r3,-8(fp)
 8045a38:	1880042e 	bgeu	r3,r2,8045a4c <alt_up_pixel_buffer_dma_draw+0x40>
 8045a3c:	e0bffc17 	ldw	r2,-16(fp)
 8045a40:	10801017 	ldw	r2,64(r2)
 8045a44:	e0ffff17 	ldw	r3,-4(fp)
 8045a48:	18800236 	bltu	r3,r2,8045a54 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 8045a4c:	00bfffc4 	movi	r2,-1
 8045a50:	00005306 	br	8045ba0 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 8045a54:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8045a58:	e0bffc17 	ldw	r2,-16(fp)
 8045a5c:	10800d17 	ldw	r2,52(r2)
 8045a60:	1000151e 	bne	r2,zero,8045ab8 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8045a64:	e0bffc17 	ldw	r2,-16(fp)
 8045a68:	10c01217 	ldw	r3,72(r2)
 8045a6c:	e0bffe17 	ldw	r2,-8(fp)
 8045a70:	1886703a 	and	r3,r3,r2
 8045a74:	e0bffc17 	ldw	r2,-16(fp)
 8045a78:	10801117 	ldw	r2,68(r2)
 8045a7c:	1884983a 	sll	r2,r3,r2
 8045a80:	e0fffb17 	ldw	r3,-20(fp)
 8045a84:	1885883a 	add	r2,r3,r2
 8045a88:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8045a8c:	e0bffc17 	ldw	r2,-16(fp)
 8045a90:	10c01417 	ldw	r3,80(r2)
 8045a94:	e0bfff17 	ldw	r2,-4(fp)
 8045a98:	1886703a 	and	r3,r3,r2
 8045a9c:	e0bffc17 	ldw	r2,-16(fp)
 8045aa0:	10801317 	ldw	r2,76(r2)
 8045aa4:	1884983a 	sll	r2,r3,r2
 8045aa8:	e0fffb17 	ldw	r3,-20(fp)
 8045aac:	1885883a 	add	r2,r3,r2
 8045ab0:	e0bffb15 	stw	r2,-20(fp)
 8045ab4:	00001a06 	br	8045b20 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8045ab8:	e0bffc17 	ldw	r2,-16(fp)
 8045abc:	10c01217 	ldw	r3,72(r2)
 8045ac0:	e0bffe17 	ldw	r2,-8(fp)
 8045ac4:	1886703a 	and	r3,r3,r2
 8045ac8:	e0bffc17 	ldw	r2,-16(fp)
 8045acc:	10801117 	ldw	r2,68(r2)
 8045ad0:	1884983a 	sll	r2,r3,r2
 8045ad4:	e0fffb17 	ldw	r3,-20(fp)
 8045ad8:	1885883a 	add	r2,r3,r2
 8045adc:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8045ae0:	e0bffc17 	ldw	r2,-16(fp)
 8045ae4:	10c01417 	ldw	r3,80(r2)
 8045ae8:	e0bfff17 	ldw	r2,-4(fp)
 8045aec:	1886703a 	and	r3,r3,r2
 8045af0:	e0bffc17 	ldw	r2,-16(fp)
 8045af4:	10800f17 	ldw	r2,60(r2)
 8045af8:	100b883a 	mov	r5,r2
 8045afc:	1809883a 	mov	r4,r3
 8045b00:	804109c0 	call	804109c <__mulsi3>
 8045b04:	1007883a 	mov	r3,r2
 8045b08:	e0bffc17 	ldw	r2,-16(fp)
 8045b0c:	10801117 	ldw	r2,68(r2)
 8045b10:	1884983a 	sll	r2,r3,r2
 8045b14:	e0fffb17 	ldw	r3,-20(fp)
 8045b18:	1885883a 	add	r2,r3,r2
 8045b1c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8045b20:	e0bffc17 	ldw	r2,-16(fp)
 8045b24:	10800e17 	ldw	r2,56(r2)
 8045b28:	10800058 	cmpnei	r2,r2,1
 8045b2c:	1000081e 	bne	r2,zero,8045b50 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8045b30:	e0bffc17 	ldw	r2,-16(fp)
 8045b34:	10c00c17 	ldw	r3,48(r2)
 8045b38:	e0bffb17 	ldw	r2,-20(fp)
 8045b3c:	1885883a 	add	r2,r3,r2
 8045b40:	1007883a 	mov	r3,r2
 8045b44:	e0bffd17 	ldw	r2,-12(fp)
 8045b48:	18800025 	stbio	r2,0(r3)
 8045b4c:	00001306 	br	8045b9c <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8045b50:	e0bffc17 	ldw	r2,-16(fp)
 8045b54:	10800e17 	ldw	r2,56(r2)
 8045b58:	10800098 	cmpnei	r2,r2,2
 8045b5c:	1000081e 	bne	r2,zero,8045b80 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8045b60:	e0bffc17 	ldw	r2,-16(fp)
 8045b64:	10c00c17 	ldw	r3,48(r2)
 8045b68:	e0bffb17 	ldw	r2,-20(fp)
 8045b6c:	1885883a 	add	r2,r3,r2
 8045b70:	1007883a 	mov	r3,r2
 8045b74:	e0bffd17 	ldw	r2,-12(fp)
 8045b78:	1880002d 	sthio	r2,0(r3)
 8045b7c:	00000706 	br	8045b9c <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8045b80:	e0bffc17 	ldw	r2,-16(fp)
 8045b84:	10c00c17 	ldw	r3,48(r2)
 8045b88:	e0bffb17 	ldw	r2,-20(fp)
 8045b8c:	1885883a 	add	r2,r3,r2
 8045b90:	1007883a 	mov	r3,r2
 8045b94:	e0bffd17 	ldw	r2,-12(fp)
 8045b98:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 8045b9c:	0005883a 	mov	r2,zero
}
 8045ba0:	e037883a 	mov	sp,fp
 8045ba4:	dfc00117 	ldw	ra,4(sp)
 8045ba8:	df000017 	ldw	fp,0(sp)
 8045bac:	dec00204 	addi	sp,sp,8
 8045bb0:	f800283a 	ret

08045bb4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8045bb4:	defffd04 	addi	sp,sp,-12
 8045bb8:	df000215 	stw	fp,8(sp)
 8045bbc:	df000204 	addi	fp,sp,8
 8045bc0:	e13ffe15 	stw	r4,-8(fp)
 8045bc4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8045bc8:	e0bffe17 	ldw	r2,-8(fp)
 8045bcc:	10800a17 	ldw	r2,40(r2)
 8045bd0:	10800104 	addi	r2,r2,4
 8045bd4:	1007883a 	mov	r3,r2
 8045bd8:	e0bfff17 	ldw	r2,-4(fp)
 8045bdc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8045be0:	e0bffe17 	ldw	r2,-8(fp)
 8045be4:	10800a17 	ldw	r2,40(r2)
 8045be8:	10800104 	addi	r2,r2,4
 8045bec:	10800037 	ldwio	r2,0(r2)
 8045bf0:	1007883a 	mov	r3,r2
 8045bf4:	e0bffe17 	ldw	r2,-8(fp)
 8045bf8:	10c00c15 	stw	r3,48(r2)
	return 0;
 8045bfc:	0005883a 	mov	r2,zero
}
 8045c00:	e037883a 	mov	sp,fp
 8045c04:	df000017 	ldw	fp,0(sp)
 8045c08:	dec00104 	addi	sp,sp,4
 8045c0c:	f800283a 	ret

08045c10 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8045c10:	defffd04 	addi	sp,sp,-12
 8045c14:	df000215 	stw	fp,8(sp)
 8045c18:	dc000115 	stw	r16,4(sp)
 8045c1c:	df000204 	addi	fp,sp,8
 8045c20:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8045c24:	e0bffe17 	ldw	r2,-8(fp)
 8045c28:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8045c2c:	e0bffe17 	ldw	r2,-8(fp)
 8045c30:	10800a17 	ldw	r2,40(r2)
 8045c34:	1007883a 	mov	r3,r2
 8045c38:	00800044 	movi	r2,1
 8045c3c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8045c40:	e0bffe17 	ldw	r2,-8(fp)
 8045c44:	10c00b17 	ldw	r3,44(r2)
 8045c48:	e0bffe17 	ldw	r2,-8(fp)
 8045c4c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8045c50:	e0bffe17 	ldw	r2,-8(fp)
 8045c54:	14000b15 	stw	r16,44(r2)
	return 0;
 8045c58:	0005883a 	mov	r2,zero
}
 8045c5c:	e6ffff04 	addi	sp,fp,-4
 8045c60:	df000117 	ldw	fp,4(sp)
 8045c64:	dc000017 	ldw	r16,0(sp)
 8045c68:	dec00204 	addi	sp,sp,8
 8045c6c:	f800283a 	ret

08045c70 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8045c70:	defffe04 	addi	sp,sp,-8
 8045c74:	df000115 	stw	fp,4(sp)
 8045c78:	df000104 	addi	fp,sp,4
 8045c7c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8045c80:	e0bfff17 	ldw	r2,-4(fp)
 8045c84:	10800a17 	ldw	r2,40(r2)
 8045c88:	10800304 	addi	r2,r2,12
 8045c8c:	10800037 	ldwio	r2,0(r2)
 8045c90:	1080004c 	andi	r2,r2,1
}
 8045c94:	e037883a 	mov	sp,fp
 8045c98:	df000017 	ldw	fp,0(sp)
 8045c9c:	dec00104 	addi	sp,sp,4
 8045ca0:	f800283a 	ret

08045ca4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8045ca4:	defff604 	addi	sp,sp,-40
 8045ca8:	dfc00915 	stw	ra,36(sp)
 8045cac:	df000815 	stw	fp,32(sp)
 8045cb0:	dd400715 	stw	r21,28(sp)
 8045cb4:	dd000615 	stw	r20,24(sp)
 8045cb8:	dcc00515 	stw	r19,20(sp)
 8045cbc:	dc800415 	stw	r18,16(sp)
 8045cc0:	dc400315 	stw	r17,12(sp)
 8045cc4:	dc000215 	stw	r16,8(sp)
 8045cc8:	df000804 	addi	fp,sp,32
 8045ccc:	e13ff815 	stw	r4,-32(fp)
 8045cd0:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8045cd4:	e0bff917 	ldw	r2,-28(fp)
 8045cd8:	10800058 	cmpnei	r2,r2,1
 8045cdc:	1000031e 	bne	r2,zero,8045cec <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 8045ce0:	e0bff817 	ldw	r2,-32(fp)
 8045ce4:	14400c17 	ldw	r17,48(r2)
 8045ce8:	00000206 	br	8045cf4 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 8045cec:	e0bff817 	ldw	r2,-32(fp)
 8045cf0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 8045cf4:	e0bff817 	ldw	r2,-32(fp)
 8045cf8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8045cfc:	e0bff817 	ldw	r2,-32(fp)
 8045d00:	10800e17 	ldw	r2,56(r2)
 8045d04:	10800098 	cmpnei	r2,r2,2
 8045d08:	1000031e 	bne	r2,zero,8045d18 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 8045d0c:	8405883a 	add	r2,r16,r16
 8045d10:	1021883a 	mov	r16,r2
 8045d14:	00000306 	br	8045d24 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8045d18:	8405883a 	add	r2,r16,r16
 8045d1c:	1085883a 	add	r2,r2,r2
 8045d20:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 8045d24:	e0bff817 	ldw	r2,-32(fp)
 8045d28:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8045d2c:	e0bff817 	ldw	r2,-32(fp)
 8045d30:	10800d17 	ldw	r2,52(r2)
 8045d34:	1000111e 	bne	r2,zero,8045d7c <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8045d38:	e0bff817 	ldw	r2,-32(fp)
 8045d3c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 8045d40:	0029883a 	mov	r20,zero
 8045d44:	00000b06 	br	8045d74 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8045d48:	0025883a 	mov	r18,zero
 8045d4c:	00000406 	br	8045d60 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 8045d50:	9445883a 	add	r2,r18,r17
 8045d54:	0007883a 	mov	r3,zero
 8045d58:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8045d5c:	94800104 	addi	r18,r18,4
 8045d60:	943ffb36 	bltu	r18,r16,8045d50 <__alt_data_end+0xfffe6950>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8045d64:	00800044 	movi	r2,1
 8045d68:	1544983a 	sll	r2,r2,r21
 8045d6c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8045d70:	a5000044 	addi	r20,r20,1
 8045d74:	a4fff436 	bltu	r20,r19,8045d48 <__alt_data_end+0xfffe6948>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8045d78:	00000d06 	br	8045db0 <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8045d7c:	800b883a 	mov	r5,r16
 8045d80:	9809883a 	mov	r4,r19
 8045d84:	804109c0 	call	804109c <__mulsi3>
 8045d88:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 8045d8c:	0021883a 	mov	r16,zero
 8045d90:	00000506 	br	8045da8 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 8045d94:	8005883a 	mov	r2,r16
 8045d98:	1445883a 	add	r2,r2,r17
 8045d9c:	0007883a 	mov	r3,zero
 8045da0:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8045da4:	84000104 	addi	r16,r16,4
 8045da8:	8005883a 	mov	r2,r16
 8045dac:	14fff936 	bltu	r2,r19,8045d94 <__alt_data_end+0xfffe6994>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8045db0:	0001883a 	nop
 8045db4:	e6fffa04 	addi	sp,fp,-24
 8045db8:	dfc00717 	ldw	ra,28(sp)
 8045dbc:	df000617 	ldw	fp,24(sp)
 8045dc0:	dd400517 	ldw	r21,20(sp)
 8045dc4:	dd000417 	ldw	r20,16(sp)
 8045dc8:	dcc00317 	ldw	r19,12(sp)
 8045dcc:	dc800217 	ldw	r18,8(sp)
 8045dd0:	dc400117 	ldw	r17,4(sp)
 8045dd4:	dc000017 	ldw	r16,0(sp)
 8045dd8:	dec00804 	addi	sp,sp,32
 8045ddc:	f800283a 	ret

08045de0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 8045de0:	defff204 	addi	sp,sp,-56
 8045de4:	dfc00d15 	stw	ra,52(sp)
 8045de8:	df000c15 	stw	fp,48(sp)
 8045dec:	ddc00b15 	stw	r23,44(sp)
 8045df0:	dd800a15 	stw	r22,40(sp)
 8045df4:	dd400915 	stw	r21,36(sp)
 8045df8:	dd000815 	stw	r20,32(sp)
 8045dfc:	dcc00715 	stw	r19,28(sp)
 8045e00:	dc800615 	stw	r18,24(sp)
 8045e04:	dc400515 	stw	r17,20(sp)
 8045e08:	dc000415 	stw	r16,16(sp)
 8045e0c:	df000c04 	addi	fp,sp,48
 8045e10:	e13ff415 	stw	r4,-48(fp)
 8045e14:	e17ff515 	stw	r5,-44(fp)
 8045e18:	e1bff615 	stw	r6,-40(fp)
 8045e1c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8045e20:	e0bff417 	ldw	r2,-48(fp)
 8045e24:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8045e28:	e0bff417 	ldw	r2,-48(fp)
 8045e2c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8045e30:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 8045e34:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 8045e38:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 8045e3c:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 8045e40:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8045e44:	a580032e 	bgeu	r20,r22,8045e54 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 8045e48:	b02b883a 	mov	r21,r22
		l_x = r_x;
 8045e4c:	a02d883a 	mov	r22,r20
		r_x = temp;
 8045e50:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 8045e54:	9c40032e 	bgeu	r19,r17,8045e64 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 8045e58:	882b883a 	mov	r21,r17
		t_y = b_y;
 8045e5c:	9823883a 	mov	r17,r19
		b_y = temp;
 8045e60:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8045e64:	b4808f2e 	bgeu	r22,r18,80460a4 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 8045e68:	8c008e2e 	bgeu	r17,r16,80460a4 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8045e6c:	a4800136 	bltu	r20,r18,8045e74 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 8045e70:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8045e74:	9c000136 	bltu	r19,r16,8045e7c <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8045e78:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8045e7c:	e0800417 	ldw	r2,16(fp)
 8045e80:	10800058 	cmpnei	r2,r2,1
 8045e84:	1000031e 	bne	r2,zero,8045e94 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 8045e88:	e0bff417 	ldw	r2,-48(fp)
 8045e8c:	14000c17 	ldw	r16,48(r2)
 8045e90:	00000206 	br	8045e9c <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 8045e94:	e0bff417 	ldw	r2,-48(fp)
 8045e98:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8045e9c:	e0bff417 	ldw	r2,-48(fp)
 8045ea0:	10800d17 	ldw	r2,52(r2)
 8045ea4:	10003c1e 	bne	r2,zero,8045f98 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8045ea8:	e0bff417 	ldw	r2,-48(fp)
 8045eac:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8045eb0:	8d44983a 	sll	r2,r17,r21
 8045eb4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8045eb8:	e0bff417 	ldw	r2,-48(fp)
 8045ebc:	10800e17 	ldw	r2,56(r2)
 8045ec0:	10800058 	cmpnei	r2,r2,1
 8045ec4:	10000f1e 	bne	r2,zero,8045f04 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 8045ec8:	8825883a 	mov	r18,r17
 8045ecc:	00000b06 	br	8045efc <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 8045ed0:	b023883a 	mov	r17,r22
 8045ed4:	00000406 	br	8045ee8 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8045ed8:	8c05883a 	add	r2,r17,r16
 8045edc:	b807883a 	mov	r3,r23
 8045ee0:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8045ee4:	8c400044 	addi	r17,r17,1
 8045ee8:	a47ffb2e 	bgeu	r20,r17,8045ed8 <__alt_data_end+0xfffe6ad8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8045eec:	00800044 	movi	r2,1
 8045ef0:	1544983a 	sll	r2,r2,r21
 8045ef4:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8045ef8:	94800044 	addi	r18,r18,1
 8045efc:	9cbff42e 	bgeu	r19,r18,8045ed0 <__alt_data_end+0xfffe6ad0>
 8045f00:	00006906 	br	80460a8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8045f04:	e0bff417 	ldw	r2,-48(fp)
 8045f08:	10800e17 	ldw	r2,56(r2)
 8045f0c:	10800098 	cmpnei	r2,r2,2
 8045f10:	1000101e 	bne	r2,zero,8045f54 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 8045f14:	8825883a 	mov	r18,r17
 8045f18:	00000c06 	br	8045f4c <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 8045f1c:	b023883a 	mov	r17,r22
 8045f20:	00000506 	br	8045f38 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8045f24:	8c45883a 	add	r2,r17,r17
 8045f28:	1405883a 	add	r2,r2,r16
 8045f2c:	b807883a 	mov	r3,r23
 8045f30:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8045f34:	8c400044 	addi	r17,r17,1
 8045f38:	a47ffa2e 	bgeu	r20,r17,8045f24 <__alt_data_end+0xfffe6b24>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 8045f3c:	00800044 	movi	r2,1
 8045f40:	1544983a 	sll	r2,r2,r21
 8045f44:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8045f48:	94800044 	addi	r18,r18,1
 8045f4c:	9cbff32e 	bgeu	r19,r18,8045f1c <__alt_data_end+0xfffe6b1c>
 8045f50:	00005506 	br	80460a8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8045f54:	8825883a 	mov	r18,r17
 8045f58:	00000d06 	br	8045f90 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 8045f5c:	b023883a 	mov	r17,r22
 8045f60:	00000606 	br	8045f7c <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8045f64:	8c45883a 	add	r2,r17,r17
 8045f68:	1085883a 	add	r2,r2,r2
 8045f6c:	1405883a 	add	r2,r2,r16
 8045f70:	b807883a 	mov	r3,r23
 8045f74:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8045f78:	8c400044 	addi	r17,r17,1
 8045f7c:	a47ff92e 	bgeu	r20,r17,8045f64 <__alt_data_end+0xfffe6b64>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8045f80:	00800044 	movi	r2,1
 8045f84:	1544983a 	sll	r2,r2,r21
 8045f88:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8045f8c:	94800044 	addi	r18,r18,1
 8045f90:	9cbff22e 	bgeu	r19,r18,8045f5c <__alt_data_end+0xfffe6b5c>
 8045f94:	00004406 	br	80460a8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8045f98:	e0bff417 	ldw	r2,-48(fp)
 8045f9c:	10800e17 	ldw	r2,56(r2)
 8045fa0:	10800058 	cmpnei	r2,r2,1
 8045fa4:	1000111e 	bne	r2,zero,8045fec <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 8045fa8:	900b883a 	mov	r5,r18
 8045fac:	8809883a 	mov	r4,r17
 8045fb0:	804109c0 	call	804109c <__mulsi3>
 8045fb4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8045fb8:	882b883a 	mov	r21,r17
 8045fbc:	00000906 	br	8045fe4 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 8045fc0:	b023883a 	mov	r17,r22
 8045fc4:	00000406 	br	8045fd8 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8045fc8:	8c05883a 	add	r2,r17,r16
 8045fcc:	b807883a 	mov	r3,r23
 8045fd0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8045fd4:	8c400044 	addi	r17,r17,1
 8045fd8:	a47ffb2e 	bgeu	r20,r17,8045fc8 <__alt_data_end+0xfffe6bc8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8045fdc:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8045fe0:	ad400044 	addi	r21,r21,1
 8045fe4:	9d7ff62e 	bgeu	r19,r21,8045fc0 <__alt_data_end+0xfffe6bc0>
 8045fe8:	00002f06 	br	80460a8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8045fec:	e0bff417 	ldw	r2,-48(fp)
 8045ff0:	10800e17 	ldw	r2,56(r2)
 8045ff4:	10800098 	cmpnei	r2,r2,2
 8045ff8:	1000141e 	bne	r2,zero,804604c <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 8045ffc:	9485883a 	add	r2,r18,r18
 8046000:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8046004:	900b883a 	mov	r5,r18
 8046008:	8809883a 	mov	r4,r17
 804600c:	804109c0 	call	804109c <__mulsi3>
 8046010:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8046014:	882b883a 	mov	r21,r17
 8046018:	00000a06 	br	8046044 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 804601c:	b023883a 	mov	r17,r22
 8046020:	00000506 	br	8046038 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8046024:	8c45883a 	add	r2,r17,r17
 8046028:	1405883a 	add	r2,r2,r16
 804602c:	b807883a 	mov	r3,r23
 8046030:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8046034:	8c400044 	addi	r17,r17,1
 8046038:	a47ffa2e 	bgeu	r20,r17,8046024 <__alt_data_end+0xfffe6c24>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 804603c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8046040:	ad400044 	addi	r21,r21,1
 8046044:	9d7ff52e 	bgeu	r19,r21,804601c <__alt_data_end+0xfffe6c1c>
 8046048:	00001706 	br	80460a8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 804604c:	9485883a 	add	r2,r18,r18
 8046050:	1085883a 	add	r2,r2,r2
 8046054:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8046058:	900b883a 	mov	r5,r18
 804605c:	8809883a 	mov	r4,r17
 8046060:	804109c0 	call	804109c <__mulsi3>
 8046064:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8046068:	882b883a 	mov	r21,r17
 804606c:	00000b06 	br	804609c <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 8046070:	b023883a 	mov	r17,r22
 8046074:	00000606 	br	8046090 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8046078:	8c45883a 	add	r2,r17,r17
 804607c:	1085883a 	add	r2,r2,r2
 8046080:	1405883a 	add	r2,r2,r16
 8046084:	b807883a 	mov	r3,r23
 8046088:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 804608c:	8c400044 	addi	r17,r17,1
 8046090:	a47ff92e 	bgeu	r20,r17,8046078 <__alt_data_end+0xfffe6c78>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8046094:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8046098:	ad400044 	addi	r21,r21,1
 804609c:	9d7ff42e 	bgeu	r19,r21,8046070 <__alt_data_end+0xfffe6c70>
 80460a0:	00000106 	br	80460a8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 80460a4:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 80460a8:	e6fff804 	addi	sp,fp,-32
 80460ac:	dfc00917 	ldw	ra,36(sp)
 80460b0:	df000817 	ldw	fp,32(sp)
 80460b4:	ddc00717 	ldw	r23,28(sp)
 80460b8:	dd800617 	ldw	r22,24(sp)
 80460bc:	dd400517 	ldw	r21,20(sp)
 80460c0:	dd000417 	ldw	r20,16(sp)
 80460c4:	dcc00317 	ldw	r19,12(sp)
 80460c8:	dc800217 	ldw	r18,8(sp)
 80460cc:	dc400117 	ldw	r17,4(sp)
 80460d0:	dc000017 	ldw	r16,0(sp)
 80460d4:	dec00a04 	addi	sp,sp,40
 80460d8:	f800283a 	ret

080460dc <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 80460dc:	defff304 	addi	sp,sp,-52
 80460e0:	dfc00c15 	stw	ra,48(sp)
 80460e4:	df000b15 	stw	fp,44(sp)
 80460e8:	dd800a15 	stw	r22,40(sp)
 80460ec:	dd400915 	stw	r21,36(sp)
 80460f0:	dd000815 	stw	r20,32(sp)
 80460f4:	dcc00715 	stw	r19,28(sp)
 80460f8:	dc800615 	stw	r18,24(sp)
 80460fc:	dc400515 	stw	r17,20(sp)
 8046100:	dc000415 	stw	r16,16(sp)
 8046104:	df000b04 	addi	fp,sp,44
 8046108:	e13ff515 	stw	r4,-44(fp)
 804610c:	e17ff615 	stw	r5,-40(fp)
 8046110:	e1bff715 	stw	r6,-36(fp)
 8046114:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8046118:	e0bff517 	ldw	r2,-44(fp)
 804611c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8046120:	e0bff517 	ldw	r2,-44(fp)
 8046124:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8046128:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 804612c:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 8046130:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 8046134:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8046138:	9440032e 	bgeu	r18,r17,8046148 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 804613c:	882d883a 	mov	r22,r17
		l_x = r_x;
 8046140:	9023883a 	mov	r17,r18
		r_x = temp;
 8046144:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8046148:	8cc0632e 	bgeu	r17,r19,80462d8 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 804614c:	a400622e 	bgeu	r20,r16,80462d8 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8046150:	94c00136 	bltu	r18,r19,8046158 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 8046154:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8046158:	e0800317 	ldw	r2,12(fp)
 804615c:	10800058 	cmpnei	r2,r2,1
 8046160:	1000031e 	bne	r2,zero,8046170 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8046164:	e0bff517 	ldw	r2,-44(fp)
 8046168:	14000c17 	ldw	r16,48(r2)
 804616c:	00000206 	br	8046178 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8046170:	e0bff517 	ldw	r2,-44(fp)
 8046174:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8046178:	e0bff517 	ldw	r2,-44(fp)
 804617c:	10800d17 	ldw	r2,52(r2)
 8046180:	1000231e 	bne	r2,zero,8046210 <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8046184:	e0bff517 	ldw	r2,-44(fp)
 8046188:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 804618c:	a4c4983a 	sll	r2,r20,r19
 8046190:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8046194:	e0bff517 	ldw	r2,-44(fp)
 8046198:	10800e17 	ldw	r2,56(r2)
 804619c:	10800058 	cmpnei	r2,r2,1
 80461a0:	1000071e 	bne	r2,zero,80461c0 <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 80461a4:	00000406 	br	80461b8 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 80461a8:	8c05883a 	add	r2,r17,r16
 80461ac:	a807883a 	mov	r3,r21
 80461b0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80461b4:	8c400044 	addi	r17,r17,1
 80461b8:	947ffb2e 	bgeu	r18,r17,80461a8 <__alt_data_end+0xfffe6da8>
 80461bc:	00004706 	br	80462dc <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80461c0:	e0bff517 	ldw	r2,-44(fp)
 80461c4:	10800e17 	ldw	r2,56(r2)
 80461c8:	10800098 	cmpnei	r2,r2,2
 80461cc:	10000e1e 	bne	r2,zero,8046208 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 80461d0:	00000506 	br	80461e8 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 80461d4:	8c45883a 	add	r2,r17,r17
 80461d8:	1405883a 	add	r2,r2,r16
 80461dc:	a807883a 	mov	r3,r21
 80461e0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80461e4:	8c400044 	addi	r17,r17,1
 80461e8:	947ffa2e 	bgeu	r18,r17,80461d4 <__alt_data_end+0xfffe6dd4>
 80461ec:	00003b06 	br	80462dc <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 80461f0:	8c45883a 	add	r2,r17,r17
 80461f4:	1085883a 	add	r2,r2,r2
 80461f8:	1405883a 	add	r2,r2,r16
 80461fc:	a807883a 	mov	r3,r21
 8046200:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8046204:	8c400044 	addi	r17,r17,1
 8046208:	947ff92e 	bgeu	r18,r17,80461f0 <__alt_data_end+0xfffe6df0>
 804620c:	00003306 	br	80462dc <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8046210:	e0bff517 	ldw	r2,-44(fp)
 8046214:	10800e17 	ldw	r2,56(r2)
 8046218:	10800058 	cmpnei	r2,r2,1
 804621c:	10000b1e 	bne	r2,zero,804624c <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 8046220:	980b883a 	mov	r5,r19
 8046224:	a009883a 	mov	r4,r20
 8046228:	804109c0 	call	804109c <__mulsi3>
 804622c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8046230:	00000406 	br	8046244 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8046234:	8c05883a 	add	r2,r17,r16
 8046238:	a807883a 	mov	r3,r21
 804623c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8046240:	8c400044 	addi	r17,r17,1
 8046244:	947ffb2e 	bgeu	r18,r17,8046234 <__alt_data_end+0xfffe6e34>
 8046248:	00002406 	br	80462dc <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 804624c:	e0bff517 	ldw	r2,-44(fp)
 8046250:	10800e17 	ldw	r2,56(r2)
 8046254:	10800098 	cmpnei	r2,r2,2
 8046258:	10000e1e 	bne	r2,zero,8046294 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 804625c:	9cc5883a 	add	r2,r19,r19
 8046260:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8046264:	980b883a 	mov	r5,r19
 8046268:	a009883a 	mov	r4,r20
 804626c:	804109c0 	call	804109c <__mulsi3>
 8046270:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8046274:	00000506 	br	804628c <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8046278:	8c45883a 	add	r2,r17,r17
 804627c:	1405883a 	add	r2,r2,r16
 8046280:	a807883a 	mov	r3,r21
 8046284:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8046288:	8c400044 	addi	r17,r17,1
 804628c:	947ffa2e 	bgeu	r18,r17,8046278 <__alt_data_end+0xfffe6e78>
 8046290:	00001206 	br	80462dc <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8046294:	9cc5883a 	add	r2,r19,r19
 8046298:	1085883a 	add	r2,r2,r2
 804629c:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 80462a0:	980b883a 	mov	r5,r19
 80462a4:	a009883a 	mov	r4,r20
 80462a8:	804109c0 	call	804109c <__mulsi3>
 80462ac:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 80462b0:	00000606 	br	80462cc <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 80462b4:	8c45883a 	add	r2,r17,r17
 80462b8:	1085883a 	add	r2,r2,r2
 80462bc:	1405883a 	add	r2,r2,r16
 80462c0:	a807883a 	mov	r3,r21
 80462c4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 80462c8:	8c400044 	addi	r17,r17,1
 80462cc:	947ff92e 	bgeu	r18,r17,80462b4 <__alt_data_end+0xfffe6eb4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 80462d0:	84e1883a 	add	r16,r16,r19
 80462d4:	00000106 	br	80462dc <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 80462d8:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 80462dc:	e6fff904 	addi	sp,fp,-28
 80462e0:	dfc00817 	ldw	ra,32(sp)
 80462e4:	df000717 	ldw	fp,28(sp)
 80462e8:	dd800617 	ldw	r22,24(sp)
 80462ec:	dd400517 	ldw	r21,20(sp)
 80462f0:	dd000417 	ldw	r20,16(sp)
 80462f4:	dcc00317 	ldw	r19,12(sp)
 80462f8:	dc800217 	ldw	r18,8(sp)
 80462fc:	dc400117 	ldw	r17,4(sp)
 8046300:	dc000017 	ldw	r16,0(sp)
 8046304:	dec00904 	addi	sp,sp,36
 8046308:	f800283a 	ret

0804630c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 804630c:	defff304 	addi	sp,sp,-52
 8046310:	dfc00c15 	stw	ra,48(sp)
 8046314:	df000b15 	stw	fp,44(sp)
 8046318:	dd800a15 	stw	r22,40(sp)
 804631c:	dd400915 	stw	r21,36(sp)
 8046320:	dd000815 	stw	r20,32(sp)
 8046324:	dcc00715 	stw	r19,28(sp)
 8046328:	dc800615 	stw	r18,24(sp)
 804632c:	dc400515 	stw	r17,20(sp)
 8046330:	dc000415 	stw	r16,16(sp)
 8046334:	df000b04 	addi	fp,sp,44
 8046338:	e13ff515 	stw	r4,-44(fp)
 804633c:	e17ff615 	stw	r5,-40(fp)
 8046340:	e1bff715 	stw	r6,-36(fp)
 8046344:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8046348:	e0bff517 	ldw	r2,-44(fp)
 804634c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8046350:	e0bff517 	ldw	r2,-44(fp)
 8046354:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8046358:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 804635c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 8046360:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 8046364:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8046368:	9500032e 	bgeu	r18,r20,8046378 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 804636c:	a02b883a 	mov	r21,r20
		t_y = b_y;
 8046370:	9029883a 	mov	r20,r18
		b_y = temp;
 8046374:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8046378:	8cc0722e 	bgeu	r17,r19,8046544 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 804637c:	a400712e 	bgeu	r20,r16,8046544 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8046380:	94000136 	bltu	r18,r16,8046388 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 8046384:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8046388:	e0800317 	ldw	r2,12(fp)
 804638c:	10800058 	cmpnei	r2,r2,1
 8046390:	1000031e 	bne	r2,zero,80463a0 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8046394:	e0bff517 	ldw	r2,-44(fp)
 8046398:	14000c17 	ldw	r16,48(r2)
 804639c:	00000206 	br	80463a8 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 80463a0:	e0bff517 	ldw	r2,-44(fp)
 80463a4:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80463a8:	e0bff517 	ldw	r2,-44(fp)
 80463ac:	10800d17 	ldw	r2,52(r2)
 80463b0:	1000301e 	bne	r2,zero,8046474 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80463b4:	e0bff517 	ldw	r2,-44(fp)
 80463b8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 80463bc:	a544983a 	sll	r2,r20,r21
 80463c0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80463c4:	e0bff517 	ldw	r2,-44(fp)
 80463c8:	10800e17 	ldw	r2,56(r2)
 80463cc:	10800058 	cmpnei	r2,r2,1
 80463d0:	10000b1e 	bne	r2,zero,8046400 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 80463d4:	a027883a 	mov	r19,r20
 80463d8:	00000706 	br	80463f8 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80463dc:	8c05883a 	add	r2,r17,r16
 80463e0:	b007883a 	mov	r3,r22
 80463e4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80463e8:	00800044 	movi	r2,1
 80463ec:	1544983a 	sll	r2,r2,r21
 80463f0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80463f4:	9cc00044 	addi	r19,r19,1
 80463f8:	94fff82e 	bgeu	r18,r19,80463dc <__alt_data_end+0xfffe6fdc>
 80463fc:	00005206 	br	8046548 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8046400:	e0bff517 	ldw	r2,-44(fp)
 8046404:	10800e17 	ldw	r2,56(r2)
 8046408:	10800098 	cmpnei	r2,r2,2
 804640c:	10000c1e 	bne	r2,zero,8046440 <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 8046410:	a027883a 	mov	r19,r20
 8046414:	00000806 	br	8046438 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8046418:	8c45883a 	add	r2,r17,r17
 804641c:	1405883a 	add	r2,r2,r16
 8046420:	b007883a 	mov	r3,r22
 8046424:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8046428:	00800044 	movi	r2,1
 804642c:	1544983a 	sll	r2,r2,r21
 8046430:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8046434:	9cc00044 	addi	r19,r19,1
 8046438:	94fff72e 	bgeu	r18,r19,8046418 <__alt_data_end+0xfffe7018>
 804643c:	00004206 	br	8046548 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8046440:	a027883a 	mov	r19,r20
 8046444:	00000906 	br	804646c <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8046448:	8c45883a 	add	r2,r17,r17
 804644c:	1085883a 	add	r2,r2,r2
 8046450:	1405883a 	add	r2,r2,r16
 8046454:	b007883a 	mov	r3,r22
 8046458:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 804645c:	00800044 	movi	r2,1
 8046460:	1544983a 	sll	r2,r2,r21
 8046464:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8046468:	9cc00044 	addi	r19,r19,1
 804646c:	94fff62e 	bgeu	r18,r19,8046448 <__alt_data_end+0xfffe7048>
 8046470:	00003506 	br	8046548 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8046474:	e0bff517 	ldw	r2,-44(fp)
 8046478:	10800e17 	ldw	r2,56(r2)
 804647c:	10800058 	cmpnei	r2,r2,1
 8046480:	10000c1e 	bne	r2,zero,80464b4 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 8046484:	980b883a 	mov	r5,r19
 8046488:	a009883a 	mov	r4,r20
 804648c:	804109c0 	call	804109c <__mulsi3>
 8046490:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8046494:	00000506 	br	80464ac <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8046498:	8c05883a 	add	r2,r17,r16
 804649c:	b007883a 	mov	r3,r22
 80464a0:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 80464a4:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80464a8:	a5000044 	addi	r20,r20,1
 80464ac:	953ffa2e 	bgeu	r18,r20,8046498 <__alt_data_end+0xfffe7098>
 80464b0:	00002506 	br	8046548 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80464b4:	e0bff517 	ldw	r2,-44(fp)
 80464b8:	10800e17 	ldw	r2,56(r2)
 80464bc:	10800098 	cmpnei	r2,r2,2
 80464c0:	10000f1e 	bne	r2,zero,8046500 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 80464c4:	9cc5883a 	add	r2,r19,r19
 80464c8:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 80464cc:	980b883a 	mov	r5,r19
 80464d0:	a009883a 	mov	r4,r20
 80464d4:	804109c0 	call	804109c <__mulsi3>
 80464d8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80464dc:	00000606 	br	80464f8 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 80464e0:	8c45883a 	add	r2,r17,r17
 80464e4:	1405883a 	add	r2,r2,r16
 80464e8:	b007883a 	mov	r3,r22
 80464ec:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 80464f0:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80464f4:	a5000044 	addi	r20,r20,1
 80464f8:	953ff92e 	bgeu	r18,r20,80464e0 <__alt_data_end+0xfffe70e0>
 80464fc:	00001206 	br	8046548 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8046500:	9cc5883a 	add	r2,r19,r19
 8046504:	1085883a 	add	r2,r2,r2
 8046508:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 804650c:	980b883a 	mov	r5,r19
 8046510:	a009883a 	mov	r4,r20
 8046514:	804109c0 	call	804109c <__mulsi3>
 8046518:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 804651c:	00000706 	br	804653c <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8046520:	8c45883a 	add	r2,r17,r17
 8046524:	1085883a 	add	r2,r2,r2
 8046528:	1405883a 	add	r2,r2,r16
 804652c:	b007883a 	mov	r3,r22
 8046530:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8046534:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8046538:	a5000044 	addi	r20,r20,1
 804653c:	953ff82e 	bgeu	r18,r20,8046520 <__alt_data_end+0xfffe7120>
 8046540:	00000106 	br	8046548 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8046544:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8046548:	e6fff904 	addi	sp,fp,-28
 804654c:	dfc00817 	ldw	ra,32(sp)
 8046550:	df000717 	ldw	fp,28(sp)
 8046554:	dd800617 	ldw	r22,24(sp)
 8046558:	dd400517 	ldw	r21,20(sp)
 804655c:	dd000417 	ldw	r20,16(sp)
 8046560:	dcc00317 	ldw	r19,12(sp)
 8046564:	dc800217 	ldw	r18,8(sp)
 8046568:	dc400117 	ldw	r17,4(sp)
 804656c:	dc000017 	ldw	r16,0(sp)
 8046570:	dec00904 	addi	sp,sp,36
 8046574:	f800283a 	ret

08046578 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8046578:	defff804 	addi	sp,sp,-32
 804657c:	dfc00715 	stw	ra,28(sp)
 8046580:	df000615 	stw	fp,24(sp)
 8046584:	df000604 	addi	fp,sp,24
 8046588:	e13ffc15 	stw	r4,-16(fp)
 804658c:	e17ffd15 	stw	r5,-12(fp)
 8046590:	e1bffe15 	stw	r6,-8(fp)
 8046594:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8046598:	e0800417 	ldw	r2,16(fp)
 804659c:	d8800115 	stw	r2,4(sp)
 80465a0:	e0800317 	ldw	r2,12(fp)
 80465a4:	d8800015 	stw	r2,0(sp)
 80465a8:	e1fffe17 	ldw	r7,-8(fp)
 80465ac:	e1bfff17 	ldw	r6,-4(fp)
 80465b0:	e17ffd17 	ldw	r5,-12(fp)
 80465b4:	e13ffc17 	ldw	r4,-16(fp)
 80465b8:	80460dc0 	call	80460dc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 80465bc:	e0800417 	ldw	r2,16(fp)
 80465c0:	d8800115 	stw	r2,4(sp)
 80465c4:	e0800317 	ldw	r2,12(fp)
 80465c8:	d8800015 	stw	r2,0(sp)
 80465cc:	e1c00217 	ldw	r7,8(fp)
 80465d0:	e1bfff17 	ldw	r6,-4(fp)
 80465d4:	e17ffd17 	ldw	r5,-12(fp)
 80465d8:	e13ffc17 	ldw	r4,-16(fp)
 80465dc:	80460dc0 	call	80460dc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 80465e0:	e0800417 	ldw	r2,16(fp)
 80465e4:	d8800115 	stw	r2,4(sp)
 80465e8:	e0800317 	ldw	r2,12(fp)
 80465ec:	d8800015 	stw	r2,0(sp)
 80465f0:	e1c00217 	ldw	r7,8(fp)
 80465f4:	e1bffe17 	ldw	r6,-8(fp)
 80465f8:	e17ffd17 	ldw	r5,-12(fp)
 80465fc:	e13ffc17 	ldw	r4,-16(fp)
 8046600:	804630c0 	call	804630c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8046604:	e0800417 	ldw	r2,16(fp)
 8046608:	d8800115 	stw	r2,4(sp)
 804660c:	e0800317 	ldw	r2,12(fp)
 8046610:	d8800015 	stw	r2,0(sp)
 8046614:	e1c00217 	ldw	r7,8(fp)
 8046618:	e1bffe17 	ldw	r6,-8(fp)
 804661c:	e17fff17 	ldw	r5,-4(fp)
 8046620:	e13ffc17 	ldw	r4,-16(fp)
 8046624:	804630c0 	call	804630c <alt_up_pixel_buffer_dma_draw_vline>
}
 8046628:	0001883a 	nop
 804662c:	e037883a 	mov	sp,fp
 8046630:	dfc00117 	ldw	ra,4(sp)
 8046634:	df000017 	ldw	fp,0(sp)
 8046638:	dec00204 	addi	sp,sp,8
 804663c:	f800283a 	ret

08046640 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8046640:	defffb04 	addi	sp,sp,-20
 8046644:	dfc00415 	stw	ra,16(sp)
 8046648:	df000315 	stw	fp,12(sp)
 804664c:	dc800215 	stw	r18,8(sp)
 8046650:	dc400115 	stw	r17,4(sp)
 8046654:	dc000015 	stw	r16,0(sp)
 8046658:	df000304 	addi	fp,sp,12
 804665c:	2021883a 	mov	r16,r4
 8046660:	2807883a 	mov	r3,r5
 8046664:	3023883a 	mov	r17,r6
 8046668:	3809883a 	mov	r4,r7
 804666c:	e4800217 	ldw	r18,8(fp)
 8046670:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 8046674:	1000071e 	bne	r2,zero,8046694 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8046678:	200b883a 	mov	r5,r4
 804667c:	1809883a 	mov	r4,r3
 8046680:	804109c0 	call	804109c <__mulsi3>
 8046684:	1445883a 	add	r2,r2,r17
 8046688:	1405883a 	add	r2,r2,r16
 804668c:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8046690:	00001206 	br	80466dc <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 8046694:	10800058 	cmpnei	r2,r2,1
 8046698:	1000081e 	bne	r2,zero,80466bc <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 804669c:	200b883a 	mov	r5,r4
 80466a0:	1809883a 	mov	r4,r3
 80466a4:	804109c0 	call	804109c <__mulsi3>
 80466a8:	1445883a 	add	r2,r2,r17
 80466ac:	1085883a 	add	r2,r2,r2
 80466b0:	1405883a 	add	r2,r2,r16
 80466b4:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 80466b8:	00000806 	br	80466dc <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80466bc:	200b883a 	mov	r5,r4
 80466c0:	1809883a 	mov	r4,r3
 80466c4:	804109c0 	call	804109c <__mulsi3>
 80466c8:	1445883a 	add	r2,r2,r17
 80466cc:	1085883a 	add	r2,r2,r2
 80466d0:	1085883a 	add	r2,r2,r2
 80466d4:	1405883a 	add	r2,r2,r16
 80466d8:	14800035 	stwio	r18,0(r2)
}
 80466dc:	0001883a 	nop
 80466e0:	e6fffd04 	addi	sp,fp,-12
 80466e4:	dfc00417 	ldw	ra,16(sp)
 80466e8:	df000317 	ldw	fp,12(sp)
 80466ec:	dc800217 	ldw	r18,8(sp)
 80466f0:	dc400117 	ldw	r17,4(sp)
 80466f4:	dc000017 	ldw	r16,0(sp)
 80466f8:	dec00504 	addi	sp,sp,20
 80466fc:	f800283a 	ret

08046700 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8046700:	deffeb04 	addi	sp,sp,-84
 8046704:	dfc01415 	stw	ra,80(sp)
 8046708:	df001315 	stw	fp,76(sp)
 804670c:	ddc01215 	stw	r23,72(sp)
 8046710:	dd801115 	stw	r22,68(sp)
 8046714:	dd401015 	stw	r21,64(sp)
 8046718:	dd000f15 	stw	r20,60(sp)
 804671c:	dcc00e15 	stw	r19,56(sp)
 8046720:	dc800d15 	stw	r18,52(sp)
 8046724:	dc400c15 	stw	r17,48(sp)
 8046728:	dc000b15 	stw	r16,44(sp)
 804672c:	df001304 	addi	fp,sp,76
 8046730:	e13fef15 	stw	r4,-68(fp)
 8046734:	e17ff015 	stw	r5,-64(fp)
 8046738:	e1bff115 	stw	r6,-60(fp)
 804673c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8046740:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8046744:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 8046748:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 804674c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8046750:	a4c5c83a 	sub	r2,r20,r19
 8046754:	1000010e 	bge	r2,zero,804675c <alt_up_pixel_buffer_dma_draw_line+0x5c>
 8046758:	0085c83a 	sub	r2,zero,r2
 804675c:	1007883a 	mov	r3,r2
 8046760:	9445c83a 	sub	r2,r18,r17
 8046764:	1000010e 	bge	r2,zero,804676c <alt_up_pixel_buffer_dma_draw_line+0x6c>
 8046768:	0085c83a 	sub	r2,zero,r2
 804676c:	10c4803a 	cmplt	r2,r2,r3
 8046770:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8046774:	e0bfef17 	ldw	r2,-68(fp)
 8046778:	10800e17 	ldw	r2,56(r2)
 804677c:	10800060 	cmpeqi	r2,r2,1
 8046780:	1000081e 	bne	r2,zero,80467a4 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8046784:	e0bfef17 	ldw	r2,-68(fp)
 8046788:	10800e17 	ldw	r2,56(r2)
 804678c:	10800098 	cmpnei	r2,r2,2
 8046790:	1000021e 	bne	r2,zero,804679c <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8046794:	00800044 	movi	r2,1
 8046798:	00000306 	br	80467a8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 804679c:	00800084 	movi	r2,2
 80467a0:	00000106 	br	80467a8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 80467a4:	0005883a 	mov	r2,zero
 80467a8:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 80467ac:	e0800317 	ldw	r2,12(fp)
 80467b0:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 80467b4:	e0bfef17 	ldw	r2,-68(fp)
 80467b8:	10800d17 	ldw	r2,52(r2)
 80467bc:	1000071e 	bne	r2,zero,80467dc <alt_up_pixel_buffer_dma_draw_line+0xdc>
 80467c0:	e0bfef17 	ldw	r2,-68(fp)
 80467c4:	10801317 	ldw	r2,76(r2)
 80467c8:	e0fff417 	ldw	r3,-48(fp)
 80467cc:	10c5c83a 	sub	r2,r2,r3
 80467d0:	00c00044 	movi	r3,1
 80467d4:	1884983a 	sll	r2,r3,r2
 80467d8:	00000206 	br	80467e4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 80467dc:	e0bfef17 	ldw	r2,-68(fp)
 80467e0:	10800f17 	ldw	r2,60(r2)
 80467e4:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 80467e8:	e0800417 	ldw	r2,16(fp)
 80467ec:	10800058 	cmpnei	r2,r2,1
 80467f0:	1000031e 	bne	r2,zero,8046800 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 80467f4:	e0bfef17 	ldw	r2,-68(fp)
 80467f8:	15c00c17 	ldw	r23,48(r2)
 80467fc:	00000206 	br	8046808 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8046800:	e0bfef17 	ldw	r2,-68(fp)
 8046804:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 8046808:	e0bff307 	ldb	r2,-52(fp)
 804680c:	0080060e 	bge	zero,r2,8046828 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8046810:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8046814:	9823883a 	mov	r17,r19
		y_0 = error;
 8046818:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 804681c:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8046820:	a025883a 	mov	r18,r20
		y_1 = error;
 8046824:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 8046828:	9440060e 	bge	r18,r17,8046844 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 804682c:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8046830:	9023883a 	mov	r17,r18
		x_1 = error;
 8046834:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 8046838:	9821883a 	mov	r16,r19
		y_0 = y_1;
 804683c:	a027883a 	mov	r19,r20
		y_1 = error;
 8046840:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8046844:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 8046848:	a4c5c83a 	sub	r2,r20,r19
 804684c:	1000010e 	bge	r2,zero,8046854 <alt_up_pixel_buffer_dma_draw_line+0x154>
 8046850:	0085c83a 	sub	r2,zero,r2
 8046854:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 8046858:	a804d7fa 	srli	r2,r21,31
 804685c:	1545883a 	add	r2,r2,r21
 8046860:	1005d07a 	srai	r2,r2,1
 8046864:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8046868:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 804686c:	9d00020e 	bge	r19,r20,8046878 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8046870:	04c00044 	movi	r19,1
 8046874:	00000106 	br	804687c <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 8046878:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 804687c:	e0bff307 	ldb	r2,-52(fp)
 8046880:	10800058 	cmpnei	r2,r2,1
 8046884:	1000211e 	bne	r2,zero,804690c <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 8046888:	00000f06 	br	80468c8 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 804688c:	e0bff417 	ldw	r2,-48(fp)
 8046890:	d8800115 	stw	r2,4(sp)
 8046894:	e0bff517 	ldw	r2,-44(fp)
 8046898:	d8800015 	stw	r2,0(sp)
 804689c:	880f883a 	mov	r7,r17
 80468a0:	b00d883a 	mov	r6,r22
 80468a4:	e17ff617 	ldw	r5,-40(fp)
 80468a8:	b809883a 	mov	r4,r23
 80468ac:	80466400 	call	8046640 <helper_plot_pixel>
			error = error + deltay;
 80468b0:	e0bff717 	ldw	r2,-36(fp)
 80468b4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 80468b8:	0400020e 	bge	zero,r16,80468c4 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 80468bc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 80468c0:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 80468c4:	8c400044 	addi	r17,r17,1
 80468c8:	947ff00e 	bge	r18,r17,804688c <__alt_data_end+0xfffe748c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 80468cc:	00001006 	br	8046910 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 80468d0:	e0bff417 	ldw	r2,-48(fp)
 80468d4:	d8800115 	stw	r2,4(sp)
 80468d8:	e0bff517 	ldw	r2,-44(fp)
 80468dc:	d8800015 	stw	r2,0(sp)
 80468e0:	b00f883a 	mov	r7,r22
 80468e4:	880d883a 	mov	r6,r17
 80468e8:	e17ff617 	ldw	r5,-40(fp)
 80468ec:	b809883a 	mov	r4,r23
 80468f0:	80466400 	call	8046640 <helper_plot_pixel>
			error = error + deltay;
 80468f4:	e0bff717 	ldw	r2,-36(fp)
 80468f8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 80468fc:	0400020e 	bge	zero,r16,8046908 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8046900:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8046904:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8046908:	8c400044 	addi	r17,r17,1
 804690c:	947ff00e 	bge	r18,r17,80468d0 <__alt_data_end+0xfffe74d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8046910:	0001883a 	nop
 8046914:	e6fff804 	addi	sp,fp,-32
 8046918:	dfc00917 	ldw	ra,36(sp)
 804691c:	df000817 	ldw	fp,32(sp)
 8046920:	ddc00717 	ldw	r23,28(sp)
 8046924:	dd800617 	ldw	r22,24(sp)
 8046928:	dd400517 	ldw	r21,20(sp)
 804692c:	dd000417 	ldw	r20,16(sp)
 8046930:	dcc00317 	ldw	r19,12(sp)
 8046934:	dc800217 	ldw	r18,8(sp)
 8046938:	dc400117 	ldw	r17,4(sp)
 804693c:	dc000017 	ldw	r16,0(sp)
 8046940:	dec00a04 	addi	sp,sp,40
 8046944:	f800283a 	ret

08046948 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8046948:	defffa04 	addi	sp,sp,-24
 804694c:	dfc00515 	stw	ra,20(sp)
 8046950:	df000415 	stw	fp,16(sp)
 8046954:	df000404 	addi	fp,sp,16
 8046958:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 804695c:	00800244 	movi	r2,9
 8046960:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8046964:	014003f4 	movhi	r5,15
 8046968:	29509004 	addi	r5,r5,16960
 804696c:	e13ffd17 	ldw	r4,-12(fp)
 8046970:	804109c0 	call	804109c <__mulsi3>
 8046974:	100b883a 	mov	r5,r2
 8046978:	0100bef4 	movhi	r4,763
 804697c:	213c2004 	addi	r4,r4,-3968
 8046980:	8043e780 	call	8043e78 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8046984:	100b883a 	mov	r5,r2
 8046988:	01200034 	movhi	r4,32768
 804698c:	213fffc4 	addi	r4,r4,-1
 8046990:	8043e780 	call	8043e78 <__udivsi3>
 8046994:	100b883a 	mov	r5,r2
 8046998:	e13fff17 	ldw	r4,-4(fp)
 804699c:	8043e780 	call	8043e78 <__udivsi3>
 80469a0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80469a4:	e0bffe17 	ldw	r2,-8(fp)
 80469a8:	10002a26 	beq	r2,zero,8046a54 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80469ac:	e03ffc15 	stw	zero,-16(fp)
 80469b0:	00001706 	br	8046a10 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80469b4:	00a00034 	movhi	r2,32768
 80469b8:	10bfffc4 	addi	r2,r2,-1
 80469bc:	10bfffc4 	addi	r2,r2,-1
 80469c0:	103ffe1e 	bne	r2,zero,80469bc <__alt_data_end+0xfffe75bc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80469c4:	014003f4 	movhi	r5,15
 80469c8:	29509004 	addi	r5,r5,16960
 80469cc:	e13ffd17 	ldw	r4,-12(fp)
 80469d0:	804109c0 	call	804109c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80469d4:	100b883a 	mov	r5,r2
 80469d8:	0100bef4 	movhi	r4,763
 80469dc:	213c2004 	addi	r4,r4,-3968
 80469e0:	8043e780 	call	8043e78 <__udivsi3>
 80469e4:	100b883a 	mov	r5,r2
 80469e8:	01200034 	movhi	r4,32768
 80469ec:	213fffc4 	addi	r4,r4,-1
 80469f0:	8043e780 	call	8043e78 <__udivsi3>
 80469f4:	1007883a 	mov	r3,r2
 80469f8:	e0bfff17 	ldw	r2,-4(fp)
 80469fc:	10c5c83a 	sub	r2,r2,r3
 8046a00:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8046a04:	e0bffc17 	ldw	r2,-16(fp)
 8046a08:	10800044 	addi	r2,r2,1
 8046a0c:	e0bffc15 	stw	r2,-16(fp)
 8046a10:	e0fffc17 	ldw	r3,-16(fp)
 8046a14:	e0bffe17 	ldw	r2,-8(fp)
 8046a18:	18bfe616 	blt	r3,r2,80469b4 <__alt_data_end+0xfffe75b4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8046a1c:	014003f4 	movhi	r5,15
 8046a20:	29509004 	addi	r5,r5,16960
 8046a24:	e13ffd17 	ldw	r4,-12(fp)
 8046a28:	804109c0 	call	804109c <__mulsi3>
 8046a2c:	100b883a 	mov	r5,r2
 8046a30:	0100bef4 	movhi	r4,763
 8046a34:	213c2004 	addi	r4,r4,-3968
 8046a38:	8043e780 	call	8043e78 <__udivsi3>
 8046a3c:	e17fff17 	ldw	r5,-4(fp)
 8046a40:	1009883a 	mov	r4,r2
 8046a44:	804109c0 	call	804109c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8046a48:	10bfffc4 	addi	r2,r2,-1
 8046a4c:	103ffe1e 	bne	r2,zero,8046a48 <__alt_data_end+0xfffe7648>
 8046a50:	00000d06 	br	8046a88 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8046a54:	014003f4 	movhi	r5,15
 8046a58:	29509004 	addi	r5,r5,16960
 8046a5c:	e13ffd17 	ldw	r4,-12(fp)
 8046a60:	804109c0 	call	804109c <__mulsi3>
 8046a64:	100b883a 	mov	r5,r2
 8046a68:	0100bef4 	movhi	r4,763
 8046a6c:	213c2004 	addi	r4,r4,-3968
 8046a70:	8043e780 	call	8043e78 <__udivsi3>
 8046a74:	e17fff17 	ldw	r5,-4(fp)
 8046a78:	1009883a 	mov	r4,r2
 8046a7c:	804109c0 	call	804109c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8046a80:	10bfffc4 	addi	r2,r2,-1
 8046a84:	00bffe16 	blt	zero,r2,8046a80 <__alt_data_end+0xfffe7680>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8046a88:	0005883a 	mov	r2,zero
}
 8046a8c:	e037883a 	mov	sp,fp
 8046a90:	dfc00117 	ldw	ra,4(sp)
 8046a94:	df000017 	ldw	fp,0(sp)
 8046a98:	dec00204 	addi	sp,sp,8
 8046a9c:	f800283a 	ret

08046aa0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8046aa0:	deffff04 	addi	sp,sp,-4
 8046aa4:	df000015 	stw	fp,0(sp)
 8046aa8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8046aac:	0001883a 	nop
 8046ab0:	e037883a 	mov	sp,fp
 8046ab4:	df000017 	ldw	fp,0(sp)
 8046ab8:	dec00104 	addi	sp,sp,4
 8046abc:	f800283a 	ret

08046ac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8046ac0:	defffe04 	addi	sp,sp,-8
 8046ac4:	dfc00115 	stw	ra,4(sp)
 8046ac8:	df000015 	stw	fp,0(sp)
 8046acc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8046ad0:	d0a00917 	ldw	r2,-32732(gp)
 8046ad4:	10000326 	beq	r2,zero,8046ae4 <alt_get_errno+0x24>
 8046ad8:	d0a00917 	ldw	r2,-32732(gp)
 8046adc:	103ee83a 	callr	r2
 8046ae0:	00000106 	br	8046ae8 <alt_get_errno+0x28>
 8046ae4:	d0a6c104 	addi	r2,gp,-25852
}
 8046ae8:	e037883a 	mov	sp,fp
 8046aec:	dfc00117 	ldw	ra,4(sp)
 8046af0:	df000017 	ldw	fp,0(sp)
 8046af4:	dec00204 	addi	sp,sp,8
 8046af8:	f800283a 	ret

08046afc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8046afc:	defffa04 	addi	sp,sp,-24
 8046b00:	dfc00515 	stw	ra,20(sp)
 8046b04:	df000415 	stw	fp,16(sp)
 8046b08:	df000404 	addi	fp,sp,16
 8046b0c:	e13ffe15 	stw	r4,-8(fp)
 8046b10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8046b14:	e0bffe17 	ldw	r2,-8(fp)
 8046b18:	10000326 	beq	r2,zero,8046b28 <alt_dev_llist_insert+0x2c>
 8046b1c:	e0bffe17 	ldw	r2,-8(fp)
 8046b20:	10800217 	ldw	r2,8(r2)
 8046b24:	1000061e 	bne	r2,zero,8046b40 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8046b28:	8046ac00 	call	8046ac0 <alt_get_errno>
 8046b2c:	1007883a 	mov	r3,r2
 8046b30:	00800584 	movi	r2,22
 8046b34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8046b38:	00bffa84 	movi	r2,-22
 8046b3c:	00001306 	br	8046b8c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8046b40:	e0bffe17 	ldw	r2,-8(fp)
 8046b44:	e0ffff17 	ldw	r3,-4(fp)
 8046b48:	e0fffc15 	stw	r3,-16(fp)
 8046b4c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8046b50:	e0bffd17 	ldw	r2,-12(fp)
 8046b54:	e0fffc17 	ldw	r3,-16(fp)
 8046b58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8046b5c:	e0bffc17 	ldw	r2,-16(fp)
 8046b60:	10c00017 	ldw	r3,0(r2)
 8046b64:	e0bffd17 	ldw	r2,-12(fp)
 8046b68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8046b6c:	e0bffc17 	ldw	r2,-16(fp)
 8046b70:	10800017 	ldw	r2,0(r2)
 8046b74:	e0fffd17 	ldw	r3,-12(fp)
 8046b78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8046b7c:	e0bffc17 	ldw	r2,-16(fp)
 8046b80:	e0fffd17 	ldw	r3,-12(fp)
 8046b84:	10c00015 	stw	r3,0(r2)

  return 0;  
 8046b88:	0005883a 	mov	r2,zero
}
 8046b8c:	e037883a 	mov	sp,fp
 8046b90:	dfc00117 	ldw	ra,4(sp)
 8046b94:	df000017 	ldw	fp,0(sp)
 8046b98:	dec00204 	addi	sp,sp,8
 8046b9c:	f800283a 	ret

08046ba0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8046ba0:	defffd04 	addi	sp,sp,-12
 8046ba4:	dfc00215 	stw	ra,8(sp)
 8046ba8:	df000115 	stw	fp,4(sp)
 8046bac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8046bb0:	00820134 	movhi	r2,2052
 8046bb4:	109e6c04 	addi	r2,r2,31152
 8046bb8:	e0bfff15 	stw	r2,-4(fp)
 8046bbc:	00000606 	br	8046bd8 <_do_ctors+0x38>
        (*ctor) (); 
 8046bc0:	e0bfff17 	ldw	r2,-4(fp)
 8046bc4:	10800017 	ldw	r2,0(r2)
 8046bc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8046bcc:	e0bfff17 	ldw	r2,-4(fp)
 8046bd0:	10bfff04 	addi	r2,r2,-4
 8046bd4:	e0bfff15 	stw	r2,-4(fp)
 8046bd8:	e0ffff17 	ldw	r3,-4(fp)
 8046bdc:	00820134 	movhi	r2,2052
 8046be0:	109e6d04 	addi	r2,r2,31156
 8046be4:	18bff62e 	bgeu	r3,r2,8046bc0 <__alt_data_end+0xfffe77c0>
        (*ctor) (); 
}
 8046be8:	0001883a 	nop
 8046bec:	e037883a 	mov	sp,fp
 8046bf0:	dfc00117 	ldw	ra,4(sp)
 8046bf4:	df000017 	ldw	fp,0(sp)
 8046bf8:	dec00204 	addi	sp,sp,8
 8046bfc:	f800283a 	ret

08046c00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8046c00:	defffd04 	addi	sp,sp,-12
 8046c04:	dfc00215 	stw	ra,8(sp)
 8046c08:	df000115 	stw	fp,4(sp)
 8046c0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8046c10:	00820134 	movhi	r2,2052
 8046c14:	109e6c04 	addi	r2,r2,31152
 8046c18:	e0bfff15 	stw	r2,-4(fp)
 8046c1c:	00000606 	br	8046c38 <_do_dtors+0x38>
        (*dtor) (); 
 8046c20:	e0bfff17 	ldw	r2,-4(fp)
 8046c24:	10800017 	ldw	r2,0(r2)
 8046c28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8046c2c:	e0bfff17 	ldw	r2,-4(fp)
 8046c30:	10bfff04 	addi	r2,r2,-4
 8046c34:	e0bfff15 	stw	r2,-4(fp)
 8046c38:	e0ffff17 	ldw	r3,-4(fp)
 8046c3c:	00820134 	movhi	r2,2052
 8046c40:	109e6d04 	addi	r2,r2,31156
 8046c44:	18bff62e 	bgeu	r3,r2,8046c20 <__alt_data_end+0xfffe7820>
        (*dtor) (); 
}
 8046c48:	0001883a 	nop
 8046c4c:	e037883a 	mov	sp,fp
 8046c50:	dfc00117 	ldw	ra,4(sp)
 8046c54:	df000017 	ldw	fp,0(sp)
 8046c58:	dec00204 	addi	sp,sp,8
 8046c5c:	f800283a 	ret

08046c60 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8046c60:	defffa04 	addi	sp,sp,-24
 8046c64:	dfc00515 	stw	ra,20(sp)
 8046c68:	df000415 	stw	fp,16(sp)
 8046c6c:	df000404 	addi	fp,sp,16
 8046c70:	e13ffe15 	stw	r4,-8(fp)
 8046c74:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8046c78:	e0bfff17 	ldw	r2,-4(fp)
 8046c7c:	10800017 	ldw	r2,0(r2)
 8046c80:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8046c84:	e13ffe17 	ldw	r4,-8(fp)
 8046c88:	80412240 	call	8041224 <strlen>
 8046c8c:	10800044 	addi	r2,r2,1
 8046c90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8046c94:	00000d06 	br	8046ccc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8046c98:	e0bffc17 	ldw	r2,-16(fp)
 8046c9c:	10800217 	ldw	r2,8(r2)
 8046ca0:	e0fffd17 	ldw	r3,-12(fp)
 8046ca4:	180d883a 	mov	r6,r3
 8046ca8:	e17ffe17 	ldw	r5,-8(fp)
 8046cac:	1009883a 	mov	r4,r2
 8046cb0:	804766c0 	call	804766c <memcmp>
 8046cb4:	1000021e 	bne	r2,zero,8046cc0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8046cb8:	e0bffc17 	ldw	r2,-16(fp)
 8046cbc:	00000706 	br	8046cdc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8046cc0:	e0bffc17 	ldw	r2,-16(fp)
 8046cc4:	10800017 	ldw	r2,0(r2)
 8046cc8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8046ccc:	e0fffc17 	ldw	r3,-16(fp)
 8046cd0:	e0bfff17 	ldw	r2,-4(fp)
 8046cd4:	18bff01e 	bne	r3,r2,8046c98 <__alt_data_end+0xfffe7898>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8046cd8:	0005883a 	mov	r2,zero
}
 8046cdc:	e037883a 	mov	sp,fp
 8046ce0:	dfc00117 	ldw	ra,4(sp)
 8046ce4:	df000017 	ldw	fp,0(sp)
 8046ce8:	dec00204 	addi	sp,sp,8
 8046cec:	f800283a 	ret

08046cf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8046cf0:	deffff04 	addi	sp,sp,-4
 8046cf4:	df000015 	stw	fp,0(sp)
 8046cf8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8046cfc:	0001883a 	nop
 8046d00:	e037883a 	mov	sp,fp
 8046d04:	df000017 	ldw	fp,0(sp)
 8046d08:	dec00104 	addi	sp,sp,4
 8046d0c:	f800283a 	ret

08046d10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8046d10:	defff904 	addi	sp,sp,-28
 8046d14:	dfc00615 	stw	ra,24(sp)
 8046d18:	df000515 	stw	fp,20(sp)
 8046d1c:	df000504 	addi	fp,sp,20
 8046d20:	e13ffc15 	stw	r4,-16(fp)
 8046d24:	e17ffd15 	stw	r5,-12(fp)
 8046d28:	e1bffe15 	stw	r6,-8(fp)
 8046d2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8046d30:	e0800217 	ldw	r2,8(fp)
 8046d34:	d8800015 	stw	r2,0(sp)
 8046d38:	e1ffff17 	ldw	r7,-4(fp)
 8046d3c:	e1bffe17 	ldw	r6,-8(fp)
 8046d40:	e17ffd17 	ldw	r5,-12(fp)
 8046d44:	e13ffc17 	ldw	r4,-16(fp)
 8046d48:	8046ec00 	call	8046ec0 <alt_iic_isr_register>
}  
 8046d4c:	e037883a 	mov	sp,fp
 8046d50:	dfc00117 	ldw	ra,4(sp)
 8046d54:	df000017 	ldw	fp,0(sp)
 8046d58:	dec00204 	addi	sp,sp,8
 8046d5c:	f800283a 	ret

08046d60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8046d60:	defff904 	addi	sp,sp,-28
 8046d64:	df000615 	stw	fp,24(sp)
 8046d68:	df000604 	addi	fp,sp,24
 8046d6c:	e13ffe15 	stw	r4,-8(fp)
 8046d70:	e17fff15 	stw	r5,-4(fp)
 8046d74:	e0bfff17 	ldw	r2,-4(fp)
 8046d78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8046d7c:	0005303a 	rdctl	r2,status
 8046d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8046d84:	e0fffb17 	ldw	r3,-20(fp)
 8046d88:	00bfff84 	movi	r2,-2
 8046d8c:	1884703a 	and	r2,r3,r2
 8046d90:	1001703a 	wrctl	status,r2
  
  return context;
 8046d94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8046d98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8046d9c:	00c00044 	movi	r3,1
 8046da0:	e0bffa17 	ldw	r2,-24(fp)
 8046da4:	1884983a 	sll	r2,r3,r2
 8046da8:	1007883a 	mov	r3,r2
 8046dac:	d0a6c717 	ldw	r2,-25828(gp)
 8046db0:	1884b03a 	or	r2,r3,r2
 8046db4:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8046db8:	d0a6c717 	ldw	r2,-25828(gp)
 8046dbc:	100170fa 	wrctl	ienable,r2
 8046dc0:	e0bffc17 	ldw	r2,-16(fp)
 8046dc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8046dc8:	e0bffd17 	ldw	r2,-12(fp)
 8046dcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8046dd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8046dd4:	0001883a 	nop
}
 8046dd8:	e037883a 	mov	sp,fp
 8046ddc:	df000017 	ldw	fp,0(sp)
 8046de0:	dec00104 	addi	sp,sp,4
 8046de4:	f800283a 	ret

08046de8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8046de8:	defff904 	addi	sp,sp,-28
 8046dec:	df000615 	stw	fp,24(sp)
 8046df0:	df000604 	addi	fp,sp,24
 8046df4:	e13ffe15 	stw	r4,-8(fp)
 8046df8:	e17fff15 	stw	r5,-4(fp)
 8046dfc:	e0bfff17 	ldw	r2,-4(fp)
 8046e00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8046e04:	0005303a 	rdctl	r2,status
 8046e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8046e0c:	e0fffb17 	ldw	r3,-20(fp)
 8046e10:	00bfff84 	movi	r2,-2
 8046e14:	1884703a 	and	r2,r3,r2
 8046e18:	1001703a 	wrctl	status,r2
  
  return context;
 8046e1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8046e20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8046e24:	00c00044 	movi	r3,1
 8046e28:	e0bffa17 	ldw	r2,-24(fp)
 8046e2c:	1884983a 	sll	r2,r3,r2
 8046e30:	0084303a 	nor	r2,zero,r2
 8046e34:	1007883a 	mov	r3,r2
 8046e38:	d0a6c717 	ldw	r2,-25828(gp)
 8046e3c:	1884703a 	and	r2,r3,r2
 8046e40:	d0a6c715 	stw	r2,-25828(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8046e44:	d0a6c717 	ldw	r2,-25828(gp)
 8046e48:	100170fa 	wrctl	ienable,r2
 8046e4c:	e0bffc17 	ldw	r2,-16(fp)
 8046e50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8046e54:	e0bffd17 	ldw	r2,-12(fp)
 8046e58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8046e5c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8046e60:	0001883a 	nop
}
 8046e64:	e037883a 	mov	sp,fp
 8046e68:	df000017 	ldw	fp,0(sp)
 8046e6c:	dec00104 	addi	sp,sp,4
 8046e70:	f800283a 	ret

08046e74 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8046e74:	defffc04 	addi	sp,sp,-16
 8046e78:	df000315 	stw	fp,12(sp)
 8046e7c:	df000304 	addi	fp,sp,12
 8046e80:	e13ffe15 	stw	r4,-8(fp)
 8046e84:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8046e88:	000530fa 	rdctl	r2,ienable
 8046e8c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8046e90:	00c00044 	movi	r3,1
 8046e94:	e0bfff17 	ldw	r2,-4(fp)
 8046e98:	1884983a 	sll	r2,r3,r2
 8046e9c:	1007883a 	mov	r3,r2
 8046ea0:	e0bffd17 	ldw	r2,-12(fp)
 8046ea4:	1884703a 	and	r2,r3,r2
 8046ea8:	1004c03a 	cmpne	r2,r2,zero
 8046eac:	10803fcc 	andi	r2,r2,255
}
 8046eb0:	e037883a 	mov	sp,fp
 8046eb4:	df000017 	ldw	fp,0(sp)
 8046eb8:	dec00104 	addi	sp,sp,4
 8046ebc:	f800283a 	ret

08046ec0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8046ec0:	defff504 	addi	sp,sp,-44
 8046ec4:	dfc00a15 	stw	ra,40(sp)
 8046ec8:	df000915 	stw	fp,36(sp)
 8046ecc:	df000904 	addi	fp,sp,36
 8046ed0:	e13ffc15 	stw	r4,-16(fp)
 8046ed4:	e17ffd15 	stw	r5,-12(fp)
 8046ed8:	e1bffe15 	stw	r6,-8(fp)
 8046edc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8046ee0:	00bffa84 	movi	r2,-22
 8046ee4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8046ee8:	e0bffd17 	ldw	r2,-12(fp)
 8046eec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8046ef0:	e0bff817 	ldw	r2,-32(fp)
 8046ef4:	10800808 	cmpgei	r2,r2,32
 8046ef8:	1000271e 	bne	r2,zero,8046f98 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8046efc:	0005303a 	rdctl	r2,status
 8046f00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8046f04:	e0fffb17 	ldw	r3,-20(fp)
 8046f08:	00bfff84 	movi	r2,-2
 8046f0c:	1884703a 	and	r2,r3,r2
 8046f10:	1001703a 	wrctl	status,r2
  
  return context;
 8046f14:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8046f18:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8046f1c:	00820174 	movhi	r2,2053
 8046f20:	10ac2004 	addi	r2,r2,-20352
 8046f24:	e0fff817 	ldw	r3,-32(fp)
 8046f28:	180690fa 	slli	r3,r3,3
 8046f2c:	10c5883a 	add	r2,r2,r3
 8046f30:	e0fffe17 	ldw	r3,-8(fp)
 8046f34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8046f38:	00820174 	movhi	r2,2053
 8046f3c:	10ac2004 	addi	r2,r2,-20352
 8046f40:	e0fff817 	ldw	r3,-32(fp)
 8046f44:	180690fa 	slli	r3,r3,3
 8046f48:	10c5883a 	add	r2,r2,r3
 8046f4c:	10800104 	addi	r2,r2,4
 8046f50:	e0ffff17 	ldw	r3,-4(fp)
 8046f54:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8046f58:	e0bffe17 	ldw	r2,-8(fp)
 8046f5c:	10000526 	beq	r2,zero,8046f74 <alt_iic_isr_register+0xb4>
 8046f60:	e0bff817 	ldw	r2,-32(fp)
 8046f64:	100b883a 	mov	r5,r2
 8046f68:	e13ffc17 	ldw	r4,-16(fp)
 8046f6c:	8046d600 	call	8046d60 <alt_ic_irq_enable>
 8046f70:	00000406 	br	8046f84 <alt_iic_isr_register+0xc4>
 8046f74:	e0bff817 	ldw	r2,-32(fp)
 8046f78:	100b883a 	mov	r5,r2
 8046f7c:	e13ffc17 	ldw	r4,-16(fp)
 8046f80:	8046de80 	call	8046de8 <alt_ic_irq_disable>
 8046f84:	e0bff715 	stw	r2,-36(fp)
 8046f88:	e0bffa17 	ldw	r2,-24(fp)
 8046f8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8046f90:	e0bff917 	ldw	r2,-28(fp)
 8046f94:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8046f98:	e0bff717 	ldw	r2,-36(fp)
}
 8046f9c:	e037883a 	mov	sp,fp
 8046fa0:	dfc00117 	ldw	ra,4(sp)
 8046fa4:	df000017 	ldw	fp,0(sp)
 8046fa8:	dec00204 	addi	sp,sp,8
 8046fac:	f800283a 	ret

08046fb0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8046fb0:	defff804 	addi	sp,sp,-32
 8046fb4:	dfc00715 	stw	ra,28(sp)
 8046fb8:	df000615 	stw	fp,24(sp)
 8046fbc:	dc000515 	stw	r16,20(sp)
 8046fc0:	df000604 	addi	fp,sp,24
 8046fc4:	e13ffb15 	stw	r4,-20(fp)
 8046fc8:	e17ffc15 	stw	r5,-16(fp)
 8046fcc:	e1bffd15 	stw	r6,-12(fp)
 8046fd0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8046fd4:	e1bffe17 	ldw	r6,-8(fp)
 8046fd8:	e17ffd17 	ldw	r5,-12(fp)
 8046fdc:	e13ffc17 	ldw	r4,-16(fp)
 8046fe0:	80472380 	call	8047238 <open>
 8046fe4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8046fe8:	e0bffa17 	ldw	r2,-24(fp)
 8046fec:	10002216 	blt	r2,zero,8047078 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8046ff0:	04020174 	movhi	r16,2053
 8046ff4:	8420ba04 	addi	r16,r16,-32024
 8046ff8:	e0bffa17 	ldw	r2,-24(fp)
 8046ffc:	01400304 	movi	r5,12
 8047000:	1009883a 	mov	r4,r2
 8047004:	804109c0 	call	804109c <__mulsi3>
 8047008:	8085883a 	add	r2,r16,r2
 804700c:	10c00017 	ldw	r3,0(r2)
 8047010:	e0bffb17 	ldw	r2,-20(fp)
 8047014:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8047018:	04020174 	movhi	r16,2053
 804701c:	8420ba04 	addi	r16,r16,-32024
 8047020:	e0bffa17 	ldw	r2,-24(fp)
 8047024:	01400304 	movi	r5,12
 8047028:	1009883a 	mov	r4,r2
 804702c:	804109c0 	call	804109c <__mulsi3>
 8047030:	8085883a 	add	r2,r16,r2
 8047034:	10800104 	addi	r2,r2,4
 8047038:	10c00017 	ldw	r3,0(r2)
 804703c:	e0bffb17 	ldw	r2,-20(fp)
 8047040:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8047044:	04020174 	movhi	r16,2053
 8047048:	8420ba04 	addi	r16,r16,-32024
 804704c:	e0bffa17 	ldw	r2,-24(fp)
 8047050:	01400304 	movi	r5,12
 8047054:	1009883a 	mov	r4,r2
 8047058:	804109c0 	call	804109c <__mulsi3>
 804705c:	8085883a 	add	r2,r16,r2
 8047060:	10800204 	addi	r2,r2,8
 8047064:	10c00017 	ldw	r3,0(r2)
 8047068:	e0bffb17 	ldw	r2,-20(fp)
 804706c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8047070:	e13ffa17 	ldw	r4,-24(fp)
 8047074:	80447840 	call	8044784 <alt_release_fd>
  }
} 
 8047078:	0001883a 	nop
 804707c:	e6ffff04 	addi	sp,fp,-4
 8047080:	dfc00217 	ldw	ra,8(sp)
 8047084:	df000117 	ldw	fp,4(sp)
 8047088:	dc000017 	ldw	r16,0(sp)
 804708c:	dec00304 	addi	sp,sp,12
 8047090:	f800283a 	ret

08047094 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8047094:	defffb04 	addi	sp,sp,-20
 8047098:	dfc00415 	stw	ra,16(sp)
 804709c:	df000315 	stw	fp,12(sp)
 80470a0:	df000304 	addi	fp,sp,12
 80470a4:	e13ffd15 	stw	r4,-12(fp)
 80470a8:	e17ffe15 	stw	r5,-8(fp)
 80470ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80470b0:	01c07fc4 	movi	r7,511
 80470b4:	01800044 	movi	r6,1
 80470b8:	e17ffd17 	ldw	r5,-12(fp)
 80470bc:	01020174 	movhi	r4,2053
 80470c0:	2120bd04 	addi	r4,r4,-32012
 80470c4:	8046fb00 	call	8046fb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80470c8:	01c07fc4 	movi	r7,511
 80470cc:	000d883a 	mov	r6,zero
 80470d0:	e17ffe17 	ldw	r5,-8(fp)
 80470d4:	01020174 	movhi	r4,2053
 80470d8:	2120ba04 	addi	r4,r4,-32024
 80470dc:	8046fb00 	call	8046fb0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80470e0:	01c07fc4 	movi	r7,511
 80470e4:	01800044 	movi	r6,1
 80470e8:	e17fff17 	ldw	r5,-4(fp)
 80470ec:	01020174 	movhi	r4,2053
 80470f0:	2120c004 	addi	r4,r4,-32000
 80470f4:	8046fb00 	call	8046fb0 <alt_open_fd>
}  
 80470f8:	0001883a 	nop
 80470fc:	e037883a 	mov	sp,fp
 8047100:	dfc00117 	ldw	ra,4(sp)
 8047104:	df000017 	ldw	fp,0(sp)
 8047108:	dec00204 	addi	sp,sp,8
 804710c:	f800283a 	ret

08047110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8047110:	defffe04 	addi	sp,sp,-8
 8047114:	dfc00115 	stw	ra,4(sp)
 8047118:	df000015 	stw	fp,0(sp)
 804711c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8047120:	d0a00917 	ldw	r2,-32732(gp)
 8047124:	10000326 	beq	r2,zero,8047134 <alt_get_errno+0x24>
 8047128:	d0a00917 	ldw	r2,-32732(gp)
 804712c:	103ee83a 	callr	r2
 8047130:	00000106 	br	8047138 <alt_get_errno+0x28>
 8047134:	d0a6c104 	addi	r2,gp,-25852
}
 8047138:	e037883a 	mov	sp,fp
 804713c:	dfc00117 	ldw	ra,4(sp)
 8047140:	df000017 	ldw	fp,0(sp)
 8047144:	dec00204 	addi	sp,sp,8
 8047148:	f800283a 	ret

0804714c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 804714c:	defffb04 	addi	sp,sp,-20
 8047150:	dfc00415 	stw	ra,16(sp)
 8047154:	df000315 	stw	fp,12(sp)
 8047158:	dc000215 	stw	r16,8(sp)
 804715c:	df000304 	addi	fp,sp,12
 8047160:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8047164:	e0bffe17 	ldw	r2,-8(fp)
 8047168:	10800217 	ldw	r2,8(r2)
 804716c:	10d00034 	orhi	r3,r2,16384
 8047170:	e0bffe17 	ldw	r2,-8(fp)
 8047174:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8047178:	e03ffd15 	stw	zero,-12(fp)
 804717c:	00002306 	br	804720c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8047180:	04020174 	movhi	r16,2053
 8047184:	8420ba04 	addi	r16,r16,-32024
 8047188:	e0bffd17 	ldw	r2,-12(fp)
 804718c:	01400304 	movi	r5,12
 8047190:	1009883a 	mov	r4,r2
 8047194:	804109c0 	call	804109c <__mulsi3>
 8047198:	8085883a 	add	r2,r16,r2
 804719c:	10c00017 	ldw	r3,0(r2)
 80471a0:	e0bffe17 	ldw	r2,-8(fp)
 80471a4:	10800017 	ldw	r2,0(r2)
 80471a8:	1880151e 	bne	r3,r2,8047200 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80471ac:	04020174 	movhi	r16,2053
 80471b0:	8420ba04 	addi	r16,r16,-32024
 80471b4:	e0bffd17 	ldw	r2,-12(fp)
 80471b8:	01400304 	movi	r5,12
 80471bc:	1009883a 	mov	r4,r2
 80471c0:	804109c0 	call	804109c <__mulsi3>
 80471c4:	8085883a 	add	r2,r16,r2
 80471c8:	10800204 	addi	r2,r2,8
 80471cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80471d0:	10000b0e 	bge	r2,zero,8047200 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80471d4:	01400304 	movi	r5,12
 80471d8:	e13ffd17 	ldw	r4,-12(fp)
 80471dc:	804109c0 	call	804109c <__mulsi3>
 80471e0:	1007883a 	mov	r3,r2
 80471e4:	00820174 	movhi	r2,2053
 80471e8:	10a0ba04 	addi	r2,r2,-32024
 80471ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80471f0:	e0bffe17 	ldw	r2,-8(fp)
 80471f4:	18800226 	beq	r3,r2,8047200 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80471f8:	00bffcc4 	movi	r2,-13
 80471fc:	00000806 	br	8047220 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8047200:	e0bffd17 	ldw	r2,-12(fp)
 8047204:	10800044 	addi	r2,r2,1
 8047208:	e0bffd15 	stw	r2,-12(fp)
 804720c:	d0a00817 	ldw	r2,-32736(gp)
 8047210:	1007883a 	mov	r3,r2
 8047214:	e0bffd17 	ldw	r2,-12(fp)
 8047218:	18bfd92e 	bgeu	r3,r2,8047180 <__alt_data_end+0xfffe7d80>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 804721c:	0005883a 	mov	r2,zero
}
 8047220:	e6ffff04 	addi	sp,fp,-4
 8047224:	dfc00217 	ldw	ra,8(sp)
 8047228:	df000117 	ldw	fp,4(sp)
 804722c:	dc000017 	ldw	r16,0(sp)
 8047230:	dec00304 	addi	sp,sp,12
 8047234:	f800283a 	ret

08047238 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8047238:	defff604 	addi	sp,sp,-40
 804723c:	dfc00915 	stw	ra,36(sp)
 8047240:	df000815 	stw	fp,32(sp)
 8047244:	df000804 	addi	fp,sp,32
 8047248:	e13ffd15 	stw	r4,-12(fp)
 804724c:	e17ffe15 	stw	r5,-8(fp)
 8047250:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8047254:	00bfffc4 	movi	r2,-1
 8047258:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 804725c:	00bffb44 	movi	r2,-19
 8047260:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8047264:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8047268:	d1600604 	addi	r5,gp,-32744
 804726c:	e13ffd17 	ldw	r4,-12(fp)
 8047270:	8046c600 	call	8046c60 <alt_find_dev>
 8047274:	e0bff815 	stw	r2,-32(fp)
 8047278:	e0bff817 	ldw	r2,-32(fp)
 804727c:	1000051e 	bne	r2,zero,8047294 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8047280:	e13ffd17 	ldw	r4,-12(fp)
 8047284:	80473b80 	call	80473b8 <alt_find_file>
 8047288:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 804728c:	00800044 	movi	r2,1
 8047290:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8047294:	e0bff817 	ldw	r2,-32(fp)
 8047298:	10002b26 	beq	r2,zero,8047348 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 804729c:	e13ff817 	ldw	r4,-32(fp)
 80472a0:	80474c00 	call	80474c0 <alt_get_fd>
 80472a4:	e0bff915 	stw	r2,-28(fp)
 80472a8:	e0bff917 	ldw	r2,-28(fp)
 80472ac:	1000030e 	bge	r2,zero,80472bc <open+0x84>
    {
      status = index;
 80472b0:	e0bff917 	ldw	r2,-28(fp)
 80472b4:	e0bffa15 	stw	r2,-24(fp)
 80472b8:	00002506 	br	8047350 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80472bc:	01400304 	movi	r5,12
 80472c0:	e13ff917 	ldw	r4,-28(fp)
 80472c4:	804109c0 	call	804109c <__mulsi3>
 80472c8:	1007883a 	mov	r3,r2
 80472cc:	00820174 	movhi	r2,2053
 80472d0:	10a0ba04 	addi	r2,r2,-32024
 80472d4:	1885883a 	add	r2,r3,r2
 80472d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80472dc:	e0fffe17 	ldw	r3,-8(fp)
 80472e0:	00900034 	movhi	r2,16384
 80472e4:	10bfffc4 	addi	r2,r2,-1
 80472e8:	1886703a 	and	r3,r3,r2
 80472ec:	e0bffc17 	ldw	r2,-16(fp)
 80472f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80472f4:	e0bffb17 	ldw	r2,-20(fp)
 80472f8:	1000051e 	bne	r2,zero,8047310 <open+0xd8>
 80472fc:	e13ffc17 	ldw	r4,-16(fp)
 8047300:	804714c0 	call	804714c <alt_file_locked>
 8047304:	e0bffa15 	stw	r2,-24(fp)
 8047308:	e0bffa17 	ldw	r2,-24(fp)
 804730c:	10001016 	blt	r2,zero,8047350 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8047310:	e0bff817 	ldw	r2,-32(fp)
 8047314:	10800317 	ldw	r2,12(r2)
 8047318:	10000826 	beq	r2,zero,804733c <open+0x104>
 804731c:	e0bff817 	ldw	r2,-32(fp)
 8047320:	10800317 	ldw	r2,12(r2)
 8047324:	e1ffff17 	ldw	r7,-4(fp)
 8047328:	e1bffe17 	ldw	r6,-8(fp)
 804732c:	e17ffd17 	ldw	r5,-12(fp)
 8047330:	e13ffc17 	ldw	r4,-16(fp)
 8047334:	103ee83a 	callr	r2
 8047338:	00000106 	br	8047340 <open+0x108>
 804733c:	0005883a 	mov	r2,zero
 8047340:	e0bffa15 	stw	r2,-24(fp)
 8047344:	00000206 	br	8047350 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8047348:	00bffb44 	movi	r2,-19
 804734c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8047350:	e0bffa17 	ldw	r2,-24(fp)
 8047354:	1000090e 	bge	r2,zero,804737c <open+0x144>
  {
    alt_release_fd (index);  
 8047358:	e13ff917 	ldw	r4,-28(fp)
 804735c:	80447840 	call	8044784 <alt_release_fd>
    ALT_ERRNO = -status;
 8047360:	80471100 	call	8047110 <alt_get_errno>
 8047364:	1007883a 	mov	r3,r2
 8047368:	e0bffa17 	ldw	r2,-24(fp)
 804736c:	0085c83a 	sub	r2,zero,r2
 8047370:	18800015 	stw	r2,0(r3)
    return -1;
 8047374:	00bfffc4 	movi	r2,-1
 8047378:	00000106 	br	8047380 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 804737c:	e0bff917 	ldw	r2,-28(fp)
}
 8047380:	e037883a 	mov	sp,fp
 8047384:	dfc00117 	ldw	ra,4(sp)
 8047388:	df000017 	ldw	fp,0(sp)
 804738c:	dec00204 	addi	sp,sp,8
 8047390:	f800283a 	ret

08047394 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8047394:	deffff04 	addi	sp,sp,-4
 8047398:	df000015 	stw	fp,0(sp)
 804739c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80473a0:	000170fa 	wrctl	ienable,zero
}
 80473a4:	0001883a 	nop
 80473a8:	e037883a 	mov	sp,fp
 80473ac:	df000017 	ldw	fp,0(sp)
 80473b0:	dec00104 	addi	sp,sp,4
 80473b4:	f800283a 	ret

080473b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80473b8:	defffb04 	addi	sp,sp,-20
 80473bc:	dfc00415 	stw	ra,16(sp)
 80473c0:	df000315 	stw	fp,12(sp)
 80473c4:	df000304 	addi	fp,sp,12
 80473c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80473cc:	d0a00417 	ldw	r2,-32752(gp)
 80473d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80473d4:	00003106 	br	804749c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80473d8:	e0bffd17 	ldw	r2,-12(fp)
 80473dc:	10800217 	ldw	r2,8(r2)
 80473e0:	1009883a 	mov	r4,r2
 80473e4:	80412240 	call	8041224 <strlen>
 80473e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80473ec:	e0bffd17 	ldw	r2,-12(fp)
 80473f0:	10c00217 	ldw	r3,8(r2)
 80473f4:	e0bffe17 	ldw	r2,-8(fp)
 80473f8:	10bfffc4 	addi	r2,r2,-1
 80473fc:	1885883a 	add	r2,r3,r2
 8047400:	10800003 	ldbu	r2,0(r2)
 8047404:	10803fcc 	andi	r2,r2,255
 8047408:	1080201c 	xori	r2,r2,128
 804740c:	10bfe004 	addi	r2,r2,-128
 8047410:	10800bd8 	cmpnei	r2,r2,47
 8047414:	1000031e 	bne	r2,zero,8047424 <alt_find_file+0x6c>
    {
      len -= 1;
 8047418:	e0bffe17 	ldw	r2,-8(fp)
 804741c:	10bfffc4 	addi	r2,r2,-1
 8047420:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8047424:	e0bffe17 	ldw	r2,-8(fp)
 8047428:	e0ffff17 	ldw	r3,-4(fp)
 804742c:	1885883a 	add	r2,r3,r2
 8047430:	10800003 	ldbu	r2,0(r2)
 8047434:	10803fcc 	andi	r2,r2,255
 8047438:	1080201c 	xori	r2,r2,128
 804743c:	10bfe004 	addi	r2,r2,-128
 8047440:	10800be0 	cmpeqi	r2,r2,47
 8047444:	1000081e 	bne	r2,zero,8047468 <alt_find_file+0xb0>
 8047448:	e0bffe17 	ldw	r2,-8(fp)
 804744c:	e0ffff17 	ldw	r3,-4(fp)
 8047450:	1885883a 	add	r2,r3,r2
 8047454:	10800003 	ldbu	r2,0(r2)
 8047458:	10803fcc 	andi	r2,r2,255
 804745c:	1080201c 	xori	r2,r2,128
 8047460:	10bfe004 	addi	r2,r2,-128
 8047464:	10000a1e 	bne	r2,zero,8047490 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8047468:	e0bffd17 	ldw	r2,-12(fp)
 804746c:	10800217 	ldw	r2,8(r2)
 8047470:	e0fffe17 	ldw	r3,-8(fp)
 8047474:	180d883a 	mov	r6,r3
 8047478:	e17fff17 	ldw	r5,-4(fp)
 804747c:	1009883a 	mov	r4,r2
 8047480:	804766c0 	call	804766c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8047484:	1000021e 	bne	r2,zero,8047490 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8047488:	e0bffd17 	ldw	r2,-12(fp)
 804748c:	00000706 	br	80474ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8047490:	e0bffd17 	ldw	r2,-12(fp)
 8047494:	10800017 	ldw	r2,0(r2)
 8047498:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 804749c:	e0fffd17 	ldw	r3,-12(fp)
 80474a0:	d0a00404 	addi	r2,gp,-32752
 80474a4:	18bfcc1e 	bne	r3,r2,80473d8 <__alt_data_end+0xfffe7fd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80474a8:	0005883a 	mov	r2,zero
}
 80474ac:	e037883a 	mov	sp,fp
 80474b0:	dfc00117 	ldw	ra,4(sp)
 80474b4:	df000017 	ldw	fp,0(sp)
 80474b8:	dec00204 	addi	sp,sp,8
 80474bc:	f800283a 	ret

080474c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80474c0:	defffa04 	addi	sp,sp,-24
 80474c4:	dfc00515 	stw	ra,20(sp)
 80474c8:	df000415 	stw	fp,16(sp)
 80474cc:	dc000315 	stw	r16,12(sp)
 80474d0:	df000404 	addi	fp,sp,16
 80474d4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80474d8:	00bffa04 	movi	r2,-24
 80474dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80474e0:	e03ffc15 	stw	zero,-16(fp)
 80474e4:	00001d06 	br	804755c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80474e8:	04020174 	movhi	r16,2053
 80474ec:	8420ba04 	addi	r16,r16,-32024
 80474f0:	e0bffc17 	ldw	r2,-16(fp)
 80474f4:	01400304 	movi	r5,12
 80474f8:	1009883a 	mov	r4,r2
 80474fc:	804109c0 	call	804109c <__mulsi3>
 8047500:	8085883a 	add	r2,r16,r2
 8047504:	10800017 	ldw	r2,0(r2)
 8047508:	1000111e 	bne	r2,zero,8047550 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 804750c:	04020174 	movhi	r16,2053
 8047510:	8420ba04 	addi	r16,r16,-32024
 8047514:	e0bffc17 	ldw	r2,-16(fp)
 8047518:	01400304 	movi	r5,12
 804751c:	1009883a 	mov	r4,r2
 8047520:	804109c0 	call	804109c <__mulsi3>
 8047524:	8085883a 	add	r2,r16,r2
 8047528:	e0fffe17 	ldw	r3,-8(fp)
 804752c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8047530:	d0e00817 	ldw	r3,-32736(gp)
 8047534:	e0bffc17 	ldw	r2,-16(fp)
 8047538:	1880020e 	bge	r3,r2,8047544 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 804753c:	e0bffc17 	ldw	r2,-16(fp)
 8047540:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8047544:	e0bffc17 	ldw	r2,-16(fp)
 8047548:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 804754c:	00000606 	br	8047568 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8047550:	e0bffc17 	ldw	r2,-16(fp)
 8047554:	10800044 	addi	r2,r2,1
 8047558:	e0bffc15 	stw	r2,-16(fp)
 804755c:	e0bffc17 	ldw	r2,-16(fp)
 8047560:	10800810 	cmplti	r2,r2,32
 8047564:	103fe01e 	bne	r2,zero,80474e8 <__alt_data_end+0xfffe80e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8047568:	e0bffd17 	ldw	r2,-12(fp)
}
 804756c:	e6ffff04 	addi	sp,fp,-4
 8047570:	dfc00217 	ldw	ra,8(sp)
 8047574:	df000117 	ldw	fp,4(sp)
 8047578:	dc000017 	ldw	r16,0(sp)
 804757c:	dec00304 	addi	sp,sp,12
 8047580:	f800283a 	ret

08047584 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8047584:	defffe04 	addi	sp,sp,-8
 8047588:	df000115 	stw	fp,4(sp)
 804758c:	df000104 	addi	fp,sp,4
 8047590:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8047594:	e0bfff17 	ldw	r2,-4(fp)
 8047598:	10bffe84 	addi	r2,r2,-6
 804759c:	10c00428 	cmpgeui	r3,r2,16
 80475a0:	18001a1e 	bne	r3,zero,804760c <alt_exception_cause_generated_bad_addr+0x88>
 80475a4:	100690ba 	slli	r3,r2,2
 80475a8:	00820134 	movhi	r2,2052
 80475ac:	109d6f04 	addi	r2,r2,30140
 80475b0:	1885883a 	add	r2,r3,r2
 80475b4:	10800017 	ldw	r2,0(r2)
 80475b8:	1000683a 	jmp	r2
 80475bc:	080475fc 	xorhi	zero,at,4567
 80475c0:	080475fc 	xorhi	zero,at,4567
 80475c4:	0804760c 	andi	zero,at,4568
 80475c8:	0804760c 	andi	zero,at,4568
 80475cc:	0804760c 	andi	zero,at,4568
 80475d0:	080475fc 	xorhi	zero,at,4567
 80475d4:	08047604 	addi	zero,at,4568
 80475d8:	0804760c 	andi	zero,at,4568
 80475dc:	080475fc 	xorhi	zero,at,4567
 80475e0:	080475fc 	xorhi	zero,at,4567
 80475e4:	0804760c 	andi	zero,at,4568
 80475e8:	080475fc 	xorhi	zero,at,4567
 80475ec:	08047604 	addi	zero,at,4568
 80475f0:	0804760c 	andi	zero,at,4568
 80475f4:	0804760c 	andi	zero,at,4568
 80475f8:	080475fc 	xorhi	zero,at,4567
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80475fc:	00800044 	movi	r2,1
 8047600:	00000306 	br	8047610 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8047604:	0005883a 	mov	r2,zero
 8047608:	00000106 	br	8047610 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 804760c:	0005883a 	mov	r2,zero
  }
}
 8047610:	e037883a 	mov	sp,fp
 8047614:	df000017 	ldw	fp,0(sp)
 8047618:	dec00104 	addi	sp,sp,4
 804761c:	f800283a 	ret

08047620 <atexit>:
 8047620:	200b883a 	mov	r5,r4
 8047624:	000f883a 	mov	r7,zero
 8047628:	000d883a 	mov	r6,zero
 804762c:	0009883a 	mov	r4,zero
 8047630:	80476e81 	jmpi	80476e8 <__register_exitproc>

08047634 <exit>:
 8047634:	defffe04 	addi	sp,sp,-8
 8047638:	000b883a 	mov	r5,zero
 804763c:	dc000015 	stw	r16,0(sp)
 8047640:	dfc00115 	stw	ra,4(sp)
 8047644:	2021883a 	mov	r16,r4
 8047648:	80478000 	call	8047800 <__call_exitprocs>
 804764c:	00820174 	movhi	r2,2053
 8047650:	10a54704 	addi	r2,r2,-27364
 8047654:	11000017 	ldw	r4,0(r2)
 8047658:	20800f17 	ldw	r2,60(r4)
 804765c:	10000126 	beq	r2,zero,8047664 <exit+0x30>
 8047660:	103ee83a 	callr	r2
 8047664:	8009883a 	mov	r4,r16
 8047668:	80479800 	call	8047980 <_exit>

0804766c <memcmp>:
 804766c:	01c000c4 	movi	r7,3
 8047670:	3980192e 	bgeu	r7,r6,80476d8 <memcmp+0x6c>
 8047674:	2144b03a 	or	r2,r4,r5
 8047678:	11c4703a 	and	r2,r2,r7
 804767c:	10000f26 	beq	r2,zero,80476bc <memcmp+0x50>
 8047680:	20800003 	ldbu	r2,0(r4)
 8047684:	28c00003 	ldbu	r3,0(r5)
 8047688:	10c0151e 	bne	r2,r3,80476e0 <memcmp+0x74>
 804768c:	31bfff84 	addi	r6,r6,-2
 8047690:	01ffffc4 	movi	r7,-1
 8047694:	00000406 	br	80476a8 <memcmp+0x3c>
 8047698:	20800003 	ldbu	r2,0(r4)
 804769c:	28c00003 	ldbu	r3,0(r5)
 80476a0:	31bfffc4 	addi	r6,r6,-1
 80476a4:	10c00e1e 	bne	r2,r3,80476e0 <memcmp+0x74>
 80476a8:	21000044 	addi	r4,r4,1
 80476ac:	29400044 	addi	r5,r5,1
 80476b0:	31fff91e 	bne	r6,r7,8047698 <__alt_data_end+0xfffe8298>
 80476b4:	0005883a 	mov	r2,zero
 80476b8:	f800283a 	ret
 80476bc:	20c00017 	ldw	r3,0(r4)
 80476c0:	28800017 	ldw	r2,0(r5)
 80476c4:	18bfee1e 	bne	r3,r2,8047680 <__alt_data_end+0xfffe8280>
 80476c8:	31bfff04 	addi	r6,r6,-4
 80476cc:	21000104 	addi	r4,r4,4
 80476d0:	29400104 	addi	r5,r5,4
 80476d4:	39bff936 	bltu	r7,r6,80476bc <__alt_data_end+0xfffe82bc>
 80476d8:	303fe91e 	bne	r6,zero,8047680 <__alt_data_end+0xfffe8280>
 80476dc:	003ff506 	br	80476b4 <__alt_data_end+0xfffe82b4>
 80476e0:	10c5c83a 	sub	r2,r2,r3
 80476e4:	f800283a 	ret

080476e8 <__register_exitproc>:
 80476e8:	defffa04 	addi	sp,sp,-24
 80476ec:	dc000315 	stw	r16,12(sp)
 80476f0:	04020174 	movhi	r16,2053
 80476f4:	84254704 	addi	r16,r16,-27364
 80476f8:	80c00017 	ldw	r3,0(r16)
 80476fc:	dc400415 	stw	r17,16(sp)
 8047700:	dfc00515 	stw	ra,20(sp)
 8047704:	18805217 	ldw	r2,328(r3)
 8047708:	2023883a 	mov	r17,r4
 804770c:	10003726 	beq	r2,zero,80477ec <__register_exitproc+0x104>
 8047710:	10c00117 	ldw	r3,4(r2)
 8047714:	010007c4 	movi	r4,31
 8047718:	20c00e16 	blt	r4,r3,8047754 <__register_exitproc+0x6c>
 804771c:	1a000044 	addi	r8,r3,1
 8047720:	8800221e 	bne	r17,zero,80477ac <__register_exitproc+0xc4>
 8047724:	18c00084 	addi	r3,r3,2
 8047728:	18c7883a 	add	r3,r3,r3
 804772c:	18c7883a 	add	r3,r3,r3
 8047730:	12000115 	stw	r8,4(r2)
 8047734:	10c7883a 	add	r3,r2,r3
 8047738:	19400015 	stw	r5,0(r3)
 804773c:	0005883a 	mov	r2,zero
 8047740:	dfc00517 	ldw	ra,20(sp)
 8047744:	dc400417 	ldw	r17,16(sp)
 8047748:	dc000317 	ldw	r16,12(sp)
 804774c:	dec00604 	addi	sp,sp,24
 8047750:	f800283a 	ret
 8047754:	00800034 	movhi	r2,0
 8047758:	10800004 	addi	r2,r2,0
 804775c:	10002626 	beq	r2,zero,80477f8 <__register_exitproc+0x110>
 8047760:	01006404 	movi	r4,400
 8047764:	d9400015 	stw	r5,0(sp)
 8047768:	d9800115 	stw	r6,4(sp)
 804776c:	d9c00215 	stw	r7,8(sp)
 8047770:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8047774:	d9400017 	ldw	r5,0(sp)
 8047778:	d9800117 	ldw	r6,4(sp)
 804777c:	d9c00217 	ldw	r7,8(sp)
 8047780:	10001d26 	beq	r2,zero,80477f8 <__register_exitproc+0x110>
 8047784:	81000017 	ldw	r4,0(r16)
 8047788:	10000115 	stw	zero,4(r2)
 804778c:	02000044 	movi	r8,1
 8047790:	22405217 	ldw	r9,328(r4)
 8047794:	0007883a 	mov	r3,zero
 8047798:	12400015 	stw	r9,0(r2)
 804779c:	20805215 	stw	r2,328(r4)
 80477a0:	10006215 	stw	zero,392(r2)
 80477a4:	10006315 	stw	zero,396(r2)
 80477a8:	883fde26 	beq	r17,zero,8047724 <__alt_data_end+0xfffe8324>
 80477ac:	18c9883a 	add	r4,r3,r3
 80477b0:	2109883a 	add	r4,r4,r4
 80477b4:	1109883a 	add	r4,r2,r4
 80477b8:	21802215 	stw	r6,136(r4)
 80477bc:	01800044 	movi	r6,1
 80477c0:	12406217 	ldw	r9,392(r2)
 80477c4:	30cc983a 	sll	r6,r6,r3
 80477c8:	4992b03a 	or	r9,r9,r6
 80477cc:	12406215 	stw	r9,392(r2)
 80477d0:	21c04215 	stw	r7,264(r4)
 80477d4:	01000084 	movi	r4,2
 80477d8:	893fd21e 	bne	r17,r4,8047724 <__alt_data_end+0xfffe8324>
 80477dc:	11006317 	ldw	r4,396(r2)
 80477e0:	218cb03a 	or	r6,r4,r6
 80477e4:	11806315 	stw	r6,396(r2)
 80477e8:	003fce06 	br	8047724 <__alt_data_end+0xfffe8324>
 80477ec:	18805304 	addi	r2,r3,332
 80477f0:	18805215 	stw	r2,328(r3)
 80477f4:	003fc606 	br	8047710 <__alt_data_end+0xfffe8310>
 80477f8:	00bfffc4 	movi	r2,-1
 80477fc:	003fd006 	br	8047740 <__alt_data_end+0xfffe8340>

08047800 <__call_exitprocs>:
 8047800:	defff504 	addi	sp,sp,-44
 8047804:	df000915 	stw	fp,36(sp)
 8047808:	dd400615 	stw	r21,24(sp)
 804780c:	dc800315 	stw	r18,12(sp)
 8047810:	dfc00a15 	stw	ra,40(sp)
 8047814:	ddc00815 	stw	r23,32(sp)
 8047818:	dd800715 	stw	r22,28(sp)
 804781c:	dd000515 	stw	r20,20(sp)
 8047820:	dcc00415 	stw	r19,16(sp)
 8047824:	dc400215 	stw	r17,8(sp)
 8047828:	dc000115 	stw	r16,4(sp)
 804782c:	d9000015 	stw	r4,0(sp)
 8047830:	2839883a 	mov	fp,r5
 8047834:	04800044 	movi	r18,1
 8047838:	057fffc4 	movi	r21,-1
 804783c:	00820174 	movhi	r2,2053
 8047840:	10a54704 	addi	r2,r2,-27364
 8047844:	12000017 	ldw	r8,0(r2)
 8047848:	45005217 	ldw	r20,328(r8)
 804784c:	44c05204 	addi	r19,r8,328
 8047850:	a0001c26 	beq	r20,zero,80478c4 <__call_exitprocs+0xc4>
 8047854:	a0800117 	ldw	r2,4(r20)
 8047858:	15ffffc4 	addi	r23,r2,-1
 804785c:	b8000d16 	blt	r23,zero,8047894 <__call_exitprocs+0x94>
 8047860:	14000044 	addi	r16,r2,1
 8047864:	8421883a 	add	r16,r16,r16
 8047868:	8421883a 	add	r16,r16,r16
 804786c:	84402004 	addi	r17,r16,128
 8047870:	a463883a 	add	r17,r20,r17
 8047874:	a421883a 	add	r16,r20,r16
 8047878:	e0001e26 	beq	fp,zero,80478f4 <__call_exitprocs+0xf4>
 804787c:	80804017 	ldw	r2,256(r16)
 8047880:	e0801c26 	beq	fp,r2,80478f4 <__call_exitprocs+0xf4>
 8047884:	bdffffc4 	addi	r23,r23,-1
 8047888:	843fff04 	addi	r16,r16,-4
 804788c:	8c7fff04 	addi	r17,r17,-4
 8047890:	bd7ff91e 	bne	r23,r21,8047878 <__alt_data_end+0xfffe8478>
 8047894:	00800034 	movhi	r2,0
 8047898:	10800004 	addi	r2,r2,0
 804789c:	10000926 	beq	r2,zero,80478c4 <__call_exitprocs+0xc4>
 80478a0:	a0800117 	ldw	r2,4(r20)
 80478a4:	1000301e 	bne	r2,zero,8047968 <__call_exitprocs+0x168>
 80478a8:	a0800017 	ldw	r2,0(r20)
 80478ac:	10003226 	beq	r2,zero,8047978 <__call_exitprocs+0x178>
 80478b0:	a009883a 	mov	r4,r20
 80478b4:	98800015 	stw	r2,0(r19)
 80478b8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 80478bc:	9d000017 	ldw	r20,0(r19)
 80478c0:	a03fe41e 	bne	r20,zero,8047854 <__alt_data_end+0xfffe8454>
 80478c4:	dfc00a17 	ldw	ra,40(sp)
 80478c8:	df000917 	ldw	fp,36(sp)
 80478cc:	ddc00817 	ldw	r23,32(sp)
 80478d0:	dd800717 	ldw	r22,28(sp)
 80478d4:	dd400617 	ldw	r21,24(sp)
 80478d8:	dd000517 	ldw	r20,20(sp)
 80478dc:	dcc00417 	ldw	r19,16(sp)
 80478e0:	dc800317 	ldw	r18,12(sp)
 80478e4:	dc400217 	ldw	r17,8(sp)
 80478e8:	dc000117 	ldw	r16,4(sp)
 80478ec:	dec00b04 	addi	sp,sp,44
 80478f0:	f800283a 	ret
 80478f4:	a0800117 	ldw	r2,4(r20)
 80478f8:	80c00017 	ldw	r3,0(r16)
 80478fc:	10bfffc4 	addi	r2,r2,-1
 8047900:	15c01426 	beq	r2,r23,8047954 <__call_exitprocs+0x154>
 8047904:	80000015 	stw	zero,0(r16)
 8047908:	183fde26 	beq	r3,zero,8047884 <__alt_data_end+0xfffe8484>
 804790c:	95c8983a 	sll	r4,r18,r23
 8047910:	a0806217 	ldw	r2,392(r20)
 8047914:	a5800117 	ldw	r22,4(r20)
 8047918:	2084703a 	and	r2,r4,r2
 804791c:	10000b26 	beq	r2,zero,804794c <__call_exitprocs+0x14c>
 8047920:	a0806317 	ldw	r2,396(r20)
 8047924:	2088703a 	and	r4,r4,r2
 8047928:	20000c1e 	bne	r4,zero,804795c <__call_exitprocs+0x15c>
 804792c:	89400017 	ldw	r5,0(r17)
 8047930:	d9000017 	ldw	r4,0(sp)
 8047934:	183ee83a 	callr	r3
 8047938:	a0800117 	ldw	r2,4(r20)
 804793c:	15bfbf1e 	bne	r2,r22,804783c <__alt_data_end+0xfffe843c>
 8047940:	98800017 	ldw	r2,0(r19)
 8047944:	153fcf26 	beq	r2,r20,8047884 <__alt_data_end+0xfffe8484>
 8047948:	003fbc06 	br	804783c <__alt_data_end+0xfffe843c>
 804794c:	183ee83a 	callr	r3
 8047950:	003ff906 	br	8047938 <__alt_data_end+0xfffe8538>
 8047954:	a5c00115 	stw	r23,4(r20)
 8047958:	003feb06 	br	8047908 <__alt_data_end+0xfffe8508>
 804795c:	89000017 	ldw	r4,0(r17)
 8047960:	183ee83a 	callr	r3
 8047964:	003ff406 	br	8047938 <__alt_data_end+0xfffe8538>
 8047968:	a0800017 	ldw	r2,0(r20)
 804796c:	a027883a 	mov	r19,r20
 8047970:	1029883a 	mov	r20,r2
 8047974:	003fb606 	br	8047850 <__alt_data_end+0xfffe8450>
 8047978:	0005883a 	mov	r2,zero
 804797c:	003ffb06 	br	804796c <__alt_data_end+0xfffe856c>

08047980 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8047980:	defffd04 	addi	sp,sp,-12
 8047984:	df000215 	stw	fp,8(sp)
 8047988:	df000204 	addi	fp,sp,8
 804798c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8047990:	0001883a 	nop
 8047994:	e0bfff17 	ldw	r2,-4(fp)
 8047998:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 804799c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80479a0:	10000226 	beq	r2,zero,80479ac <_exit+0x2c>
    ALT_SIM_FAIL();
 80479a4:	002af070 	cmpltui	zero,zero,43969
 80479a8:	00000106 	br	80479b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80479ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80479b0:	003fff06 	br	80479b0 <__alt_data_end+0xfffe85b0>
