
pongers.elf:     file format elf32-littlenios2
pongers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08020230

Program Header:
    LOAD off    0x00001000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x08020020 align 2**12
         filesz 0x00012050 memsz 0x00012050 flags r-x
    LOAD off    0x00013070 vaddr 0x08032070 paddr 0x08033bf4 align 2**12
         filesz 0x00001b84 memsz 0x00001b84 flags rw-
    LOAD off    0x00015778 vaddr 0x08035778 paddr 0x08035778 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08020020  08020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001192c  08020230  08020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000514  08031b5c  08031b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b84  08032070  08033bf4  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  08035778  08035778  00015778  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  00014bf4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080358f0  080358f0  00014bf4  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  00014bf4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e88  00000000  00000000  00014c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002205c  00000000  00000000  00015ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008a2c  00000000  00000000  00037b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b5c5  00000000  00000000  00040550  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002454  00000000  00000000  0004bb18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d5a  00000000  00000000  0004df6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016939  00000000  00000000  00051cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00068600  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001680  00000000  00000000  00068640  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d26a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  0006d26d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d276  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d277  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d278  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d27c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d280  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d284  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d28f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d29a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0006d2a5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0006d2ae  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d27  00000000  00000000  0006d2d4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00081d88  00000000  00000000  00070ffb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
08020230 l    d  .text	00000000 .text
08031b5c l    d  .rodata	00000000 .rodata
08032070 l    d  .rwdata	00000000 .rwdata
08035778 l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
080358f0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pongers_bsp//obj/HAL/src/crt0.o
08020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pongers.c
0802026c l     F .text	00000060 alarm_callback.2998
080357b0 l     O .bss	00000018 alarm.3000
08021054 l     F .text	0000004c clear.3035
08021390 l     F .text	00000158 run_game_tick.3068
08020488 l     F .text	000000c8 cheat_code.3002
08020550 l     F .text	00000294 update_paddle.3007
080207e4 l     F .text	00000038 sign.3019
0802081c l     F .text	00000838 update_ball.3022
080210a0 l     F .text	00000174 draw.3042
08021214 l     F .text	00000088 get_user_input.3049
0802129c l     F .text	0000007c reset_game.3057
08021318 l     F .text	00000078 check_win.3061
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 tramp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08031d3a l     O .rodata	00000010 zeroes.4389
08031d4a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
08023bd0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 findfp.c
08025480 l     F .text	00000008 __fp_unlock
08025494 l     F .text	0000019c __sinit.part.1
08025630 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08032070 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
080324b4 l     O .rwdata	00000020 lc_ctype_charset
08032494 l     O .rwdata	00000020 lc_message_charset
080324d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08031d7c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08031ea0 l     O .rodata	00000010 zeroes.4333
08031eb0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0802de70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0802df84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0802dfb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0802e0a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0802e18c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0802e278 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0802e454 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08033be4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0802e89c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0802e9d8 l     F .text	00000034 alt_dev_reg
08032abc l     O .rwdata	00001060 jtag_uart_0
08033b1c l     O .rwdata	00000048 video_character_buffer_with_dma_0
08033b64 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0802ef60 l     F .text	0000020c altera_avalon_jtag_uart_irq
0802f16c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0802f7a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08030c68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08031158 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080312b8 l     F .text	0000003c alt_get_errno
080312f4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080357ac g     O .bss	00000004 alt_instruction_exception_handler
08027a10 g     F .text	00000074 _mprec_log10
08027afc g     F .text	0000008c __any_on
0802a6d8 g     F .text	00000054 _isatty_r
08031d88 g     O .rodata	00000028 __mprec_tinytens
0802e390 g     F .text	0000007c alt_main
080304b4 g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
080216e4 g     F .text	000000c0 _puts_r
080357f0 g     O .bss	00000100 alt_irq
0802a400 g     F .text	00000060 _lseek_r
08033bf4 g       *ABS*	00000000 __flash_rwdata_start
0802c71c g     F .text	00000088 .hidden __eqdf2
080358f0 g       *ABS*	00000000 __alt_heap_start
0802828c g     F .text	0000005c __sseek
080257e0 g     F .text	00000010 __sinit
0802fa20 g     F .text	000000fc alt_up_char_buffer_string
08025e80 g     F .text	0000007c _setlocale_r
08025638 g     F .text	00000078 __sfmoreglue
0802e430 g     F .text	00000024 __malloc_unlock
0802f954 g     F .text	000000cc alt_up_char_buffer_draw
0802684c g     F .text	0000015c memmove
080257c8 g     F .text	00000018 _cleanup
08026ad0 g     F .text	000000a8 _Balloc
0802fbb4 g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
0802c7a4 g     F .text	000000dc .hidden __gtdf2
0803153c g     F .text	00000024 altera_nios2_gen2_irq_init
0802fb78 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08020000 g     F .entry	0000000c __reset
08020020 g       *ABS*	00000000 __flash_exceptions_start
0802a67c g     F .text	0000005c _fstat_r
08035790 g     O .bss	00000004 errno
08028208 g     F .text	00000008 __seofread
0802859c g     F .text	000013a0 ___svfiprintf_internal_r
08035798 g     O .bss	00000004 alt_argv
0803bbb8 g       *ABS*	00000000 _gp
0802e86c g     F .text	00000030 usleep
0802fd5c g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0803293c g     O .rwdata	00000180 alt_fd_list
08030e08 g     F .text	00000090 alt_find_dev
0802159c g     F .text	00000148 memcpy
0802fb1c g     F .text	0000005c alt_up_char_buffer_clear
08025488 g     F .text	0000000c _cleanup_r
0802db5c g     F .text	000000dc .hidden __floatsidf
0803123c g     F .text	0000007c alt_io_redirect
0802c880 g     F .text	000000f4 .hidden __ltdf2
08031b5c g       *ABS*	00000000 __DTOR_END__
080217a4 g     F .text	00000014 puts
0803172c g     F .text	0000009c alt_exception_cause_generated_bad_addr
080280ec g     F .text	00000074 __fpclassifyd
0802796c g     F .text	000000a4 __ratio
0802fe18 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0802f364 g     F .text	0000021c altera_avalon_jtag_uart_read
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0802b3e4 g     F .text	00000064 .hidden __udivsi3
0802e0e0 g     F .text	000000ac isatty
08031dd8 g     O .rodata	000000c8 __mprec_tens
08030284 g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
08025efc g     F .text	0000000c __locale_charset
0803578c g     O .bss	00000004 __malloc_top_pad
08033bc0 g     O .rwdata	00000004 __mb_cur_max
08025f2c g     F .text	0000000c _localeconv_r
08026f04 g     F .text	0000003c __i2b
08025830 g     F .text	000004c8 __sfvwrite_r
08028160 g     F .text	00000054 _sbrk_r
080307e8 g     F .text	000000c0 helper_plot_pixel
0802a61c g     F .text	00000060 _read_r
08033bdc g     O .rwdata	00000004 alt_max_fd
08029c20 g     F .text	000000f0 _fclose_r
08029f9c g     F .text	00000030 fflush
08035788 g     O .bss	00000004 __malloc_max_sbrked_mem
0802b4a0 g     F .text	000008ac .hidden __adddf3
08027714 g     F .text	0000010c __b2d
0802fe4c g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
0802ad28 g     F .text	000005c4 .hidden __umoddi3
0802e2b4 g     F .text	000000dc lseek
08033bb8 g     O .rwdata	00000004 _global_impure_ptr
08027b88 g     F .text	00000564 _realloc_r
080358f0 g       *ABS*	00000000 __bss_end
08031068 g     F .text	000000f0 alt_iic_isr_register
0802ff88 g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
0802e764 g     F .text	00000108 alt_tick
0802a72c g     F .text	000005fc .hidden __udivdi3
08031db0 g     O .rodata	00000028 __mprec_bigtens
08026ce8 g     F .text	00000104 __s2b
0802dc38 g     F .text	000000a8 .hidden __floatunsidf
08027454 g     F .text	00000060 __mcmp
08025800 g     F .text	00000018 __fp_lock_all
0803101c g     F .text	0000004c alt_ic_irq_enabled
0802e6c8 g     F .text	0000009c alt_alarm_stop
080357a8 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
08032914 g     O .rwdata	00000028 alt_dev_null
08030c48 g     F .text	00000020 alt_dcache_flush_all
08026dec g     F .text	00000068 __hi0bits
08030720 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0802dadc g     F .text	00000080 .hidden __fixdfsi
08033bf4 g       *ABS*	00000000 __ram_rwdata_end
08033bd4 g     O .rwdata	00000008 alt_dev_list
0802e8d8 g     F .text	00000100 write
080308a8 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
08032070 g       *ABS*	00000000 __ram_rodata_end
0802dfec g     F .text	000000b8 fstat
0802c880 g     F .text	000000f4 .hidden __ledf2
080271cc g     F .text	00000140 __pow5mult
08035780 g     O .bss	00000004 __nlocale_changed
0802b448 g     F .text	00000058 .hidden __umodsi3
080358f0 g       *ABS*	00000000 end
0802f898 g     F .text	00000080 alt_up_char_buffer_init
0802eea0 g     F .text	000000c0 altera_avalon_jtag_uart_init
080201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08021510 g     F .text	0000008c .hidden __trampoline_setup
08031b5c g       *ABS*	00000000 __CTOR_LIST__
0803f400 g       *ABS*	00000000 __alt_stack_pointer
0802f81c g     F .text	0000007c alt_avalon_timer_sc_init
0802dce0 g     F .text	00000064 .hidden __clzsi2
0802f580 g     F .text	00000224 altera_avalon_jtag_uart_write
080257f0 g     F .text	00000004 __sfp_lock_acquire
08026768 g     F .text	000000e4 memchr
080217b8 g     F .text	00000058 _sprintf_r
0802a0f0 g     F .text	00000310 _free_r
08025f08 g     F .text	00000010 __locale_mb_cur_max
080319a8 g     F .text	00000180 __call_exitprocs
0803577c g     O .bss	00000004 __mlocale_changed
08033bc4 g     O .rwdata	00000004 __malloc_sbrk_base
08020230 g     F .text	0000003c _start
080357a0 g     O .bss	00000004 _alt_tick_rate
0802730c g     F .text	00000148 __lshift
080357a4 g     O .bss	00000004 _alt_nticks
0802e490 g     F .text	00000104 read
0802ea44 g     F .text	000002f8 alt_sys_init
080283cc g     F .text	000001d0 __ssprint_r
08031890 g     F .text	00000118 __register_exitproc
08026f40 g     F .text	0000028c __multiply
0802f20c g     F .text	00000068 altera_avalon_jtag_uart_close
080214e8 g     F .text	00000028 .hidden __mulsi3
08032070 g       *ABS*	00000000 __ram_rwdata_start
08031b5c g       *ABS*	00000000 __ram_rodata_start
080357c8 g     O .bss	00000028 __malloc_current_mallinfo
08027820 g     F .text	0000014c __d2b
0802ed3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08031668 g     F .text	000000c4 alt_get_fd
08030af0 g     F .text	00000158 alt_busy_sleep
08029af0 g     F .text	00000054 _close_r
08031814 g     F .text	0000007c memcmp
0802edfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080358f0 g       *ABS*	00000000 __alt_stack_base
0802ee4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0802999c g     F .text	00000154 __swsetup_r
0802bd4c g     F .text	000009d0 .hidden __divdf3
080256b0 g     F .text	00000118 __sfp
08027a84 g     F .text	00000078 __copybits
0803250c g     O .rwdata	00000408 __malloc_av_
080257fc g     F .text	00000004 __sinit_lock_release
0802c974 g     F .text	0000086c .hidden __muldf3
080281b4 g     F .text	00000054 __sread
08031560 g     F .text	00000108 alt_find_file
08030ca4 g     F .text	000000a4 alt_dev_llist_insert
0802e40c g     F .text	00000024 __malloc_lock
0802e618 g     F .text	000000b0 sbrk
08021914 g     F .text	000022bc ___svfprintf_internal_r
08029f40 g     F .text	0000005c _fflush_r
08029b44 g     F .text	000000dc _calloc_r
08035778 g       *ABS*	00000000 __bss_start
080269a8 g     F .text	00000128 memset
080202cc g     F .text	000001bc main
0803579c g     O .bss	00000004 alt_envp
08035784 g     O .bss	00000004 __malloc_max_total_mem
0802fdb8 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0802f918 g     F .text	0000003c alt_up_char_buffer_open_dev
0802ed9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080282e8 g     F .text	00000008 __sclose
0803f400 g       *ABS*	00000000 __alt_heap_limit
08029d10 g     F .text	00000014 fclose
08023df8 g     F .text	00001688 _dtoa_r
08025f5c g     F .text	0000080c _malloc_r
08033be0 g     O .rwdata	00000004 alt_errno
08025cf8 g     F .text	000000c4 _fwalk
0802b2ec g     F .text	00000084 .hidden __divsi3
08029fcc g     F .text	00000124 _malloc_trim_r
08031b5c g       *ABS*	00000000 __CTOR_END__
080282f0 g     F .text	000000dc strcmp
08031b5c g       *ABS*	00000000 __flash_rodata_start
08031b5c g       *ABS*	00000000 __DTOR_LIST__
0802c71c g     F .text	00000088 .hidden __nedf2
0802ea0c g     F .text	00000038 alt_irq_init
0802e594 g     F .text	00000084 alt_release_fd
08021810 g     F .text	0000006c sprintf
08031ec0 g     O .rodata	00000100 .hidden __clz_tab
08035778 g     O .bss	00000004 _PathLocale
080317c8 g     F .text	00000014 atexit
0802993c g     F .text	00000060 _write_r
08025f38 g     F .text	00000018 setlocale
08033bbc g     O .rwdata	00000004 _impure_ptr
08035794 g     O .bss	00000004 alt_argc
08029d24 g     F .text	0000021c __sflush_r
08030da8 g     F .text	00000060 _do_dtors
08025f24 g     F .text	00000008 __locale_cjk_lang
08020020 g       .exceptions	00000000 alt_irq_entry
080276b0 g     F .text	00000064 __ulp
08025818 g     F .text	00000018 __fp_unlock_all
08033bcc g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
08025f50 g     F .text	0000000c localeconv
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08030eb8 g     F .text	00000050 alt_ic_isr_register
08033bf4 g       *ABS*	00000000 _edata
080358f0 g       *ABS*	00000000 _end
08020230 g       *ABS*	00000000 __ram_exceptions_end
0802f274 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08030f90 g     F .text	0000008c alt_ic_irq_disable
08028210 g     F .text	0000007c __swrite
08033bc8 g     O .rwdata	00000004 __malloc_trim_threshold
08025f18 g     F .text	0000000c __locale_msgcharset
080317dc g     F .text	00000038 exit
08025dbc g     F .text	000000c4 _fwalk_reent
080274b4 g     F .text	000001fc __mdiff
0802b370 g     F .text	00000074 .hidden __modsi3
0803f400 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
080257f4 g     F .text	00000004 __sfp_lock_release
08031b28 g     F .text	00000034 _exit
0802dd44 g     F .text	0000012c alt_alarm_start
0802a460 g     F .text	000001bc __smakebuf_r
0802187c g     F .text	00000098 strlen
080313e0 g     F .text	0000015c open
0802c7a4 g     F .text	000000dc .hidden __gedf2
08030e98 g     F .text	00000020 alt_icache_flush_all
08033bf0 g     O .rwdata	00000004 alt_priority_mask
08030f08 g     F .text	00000088 alt_ic_irq_enable
0802d1e0 g     F .text	000008fc .hidden __subdf3
08026e54 g     F .text	000000b0 __lo0bits
08033be8 g     O .rwdata	00000008 alt_alarm_list
08030d48 g     F .text	00000060 _do_ctors
0802deac g     F .text	000000d8 close
0802e1f4 g     F .text	00000084 alt_load
080257f8 g     F .text	00000004 __sinit_lock_acquire
08026ba0 g     F .text	00000148 __multadd
08026b78 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020000:	004200b4 	movhi	at,2050
    ori r1, r1, %lo(_start)
 8020004:	08408c14 	ori	at,at,560
    jmp r1
 8020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	008200f4 	movhi	r2,2051
 8020140:	1095fc04 	addi	r2,r2,22512
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	008200f4 	movhi	r2,2051
 8020158:	1095fc04 	addi	r2,r2,22512
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80201e4:	00bfffc4 	movi	r2,-1
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80201f0:	d0a6fd17 	ldw	r2,-25612(gp)
 80201f4:	10000726 	beq	r2,zero,8020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80201f8:	d0a6fd17 	ldw	r2,-25612(gp)
 80201fc:	e0fffd17 	ldw	r3,-12(fp)
 8020200:	e1bffe17 	ldw	r6,-8(fp)
 8020204:	e17fff17 	ldw	r5,-4(fp)
 8020208:	1809883a 	mov	r4,r3
 802020c:	103ee83a 	callr	r2
 8020210:	00000206 	br	802021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020218:	0005883a 	mov	r2,zero
}
 802021c:	e037883a 	mov	sp,fp
 8020220:	dfc00117 	ldw	ra,4(sp)
 8020224:	df000017 	ldw	fp,0(sp)
 8020228:	dec00204 	addi	sp,sp,8
 802022c:	f800283a 	ret

Disassembly of section .text:

08020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8020230:	06c200f4 	movhi	sp,2051
    ori sp, sp, %lo(__alt_stack_pointer)
 8020234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
 8020238:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 802023c:	d6aeee14 	ori	gp,gp,48056
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8020240:	008200f4 	movhi	r2,2051
    ori r2, r2, %lo(__bss_start)
 8020244:	1095de14 	ori	r2,r2,22392

    movhi r3, %hi(__bss_end)
 8020248:	00c200f4 	movhi	r3,2051
    ori r3, r3, %lo(__bss_end)
 802024c:	18d63c14 	ori	r3,r3,22768

    beq r2, r3, 1f
 8020250:	10c00326 	beq	r2,r3,8020260 <_start+0x30>

0:
    stw zero, (r2)
 8020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 802025c:	10fffd36 	bltu	r2,r3,8020254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8020260:	802e1f40 	call	802e1f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8020264:	802e3900 	call	802e390 <alt_main>

08020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8020268:	003fff06 	br	8020268 <__alt_data_end+0xfffe0e68>

0802026c <alarm_callback.2998>:
	char time_str[10];
	sprintf(time_str, "Time: %u", game.time);
	char score_str[20];

	// Alarm setup - executes the callback function periodically (every second)
	alt_u32 alarm_callback(void *context) {
 802026c:	defffc04 	addi	sp,sp,-16
 8020270:	dfc00315 	stw	ra,12(sp)
 8020274:	df000215 	stw	fp,8(sp)
 8020278:	df000204 	addi	fp,sp,8
 802027c:	e13ffe15 	stw	r4,-8(fp)
 8020280:	6005883a 	mov	r2,r12
 8020284:	e33fff15 	stw	r12,-4(fp)
		game.time += 1;
 8020288:	10c02317 	ldw	r3,140(r2)
 802028c:	18c00044 	addi	r3,r3,1
 8020290:	10c02315 	stw	r3,140(r2)
		sprintf(time_str, "Time: %u", game.time);
 8020294:	10c02404 	addi	r3,r2,144
 8020298:	10802317 	ldw	r2,140(r2)
 802029c:	100d883a 	mov	r6,r2
 80202a0:	014200f4 	movhi	r5,2051
 80202a4:	2946d704 	addi	r5,r5,7004
 80202a8:	1809883a 	mov	r4,r3
 80202ac:	80218100 	call	8021810 <sprintf>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80202b0:	d0a6fa17 	ldw	r2,-25624(gp)
		return alt_ticks_per_second();
 80202b4:	0001883a 	nop
	}
 80202b8:	e037883a 	mov	sp,fp
 80202bc:	dfc00117 	ldw	ra,4(sp)
 80202c0:	df000017 	ldw	fp,0(sp)
 80202c4:	dec00204 	addi	sp,sp,8
 80202c8:	f800283a 	ret

080202cc <main>:
#include "sys/alt_alarm.h"
#include "alt_types.h"


int main()
{
 80202cc:	deffa404 	addi	sp,sp,-368
 80202d0:	dfc05b15 	stw	ra,364(sp)
 80202d4:	df005a15 	stw	fp,360(sp)
 80202d8:	df005a04 	addi	fp,sp,360
#include "gameutil.h"
#include "sys/alt_alarm.h"
#include "alt_types.h"


int main()
 80202dc:	e0bfa804 	addi	r2,fp,-352
 80202e0:	10802704 	addi	r2,r2,156
 80202e4:	e0ffa804 	addi	r3,fp,-352
 80202e8:	180d883a 	mov	r6,r3
 80202ec:	014200b4 	movhi	r5,2050
 80202f0:	29409b04 	addi	r5,r5,620
 80202f4:	1009883a 	mov	r4,r2
 80202f8:	80215100 	call	8021510 <__trampoline_setup>
{
	// Have to set up these pointers to open the device
	// Reference : https://faculty-web.msoe.edu/johnsontimoj/EE3921/files3921/nios_pixel_sw.pdf
	alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
 80202fc:	010200f4 	movhi	r4,2051
 8020300:	2106da04 	addi	r4,r4,7016
 8020304:	802fb780 	call	802fb78 <alt_up_pixel_buffer_dma_open_dev>
 8020308:	e0bfa615 	stw	r2,-360(fp)
	// Check for error
	if ( pixel_buf_dma_dev == NULL)
 802030c:	e0bfa617 	ldw	r2,-360(fp)
 8020310:	1000041e 	bne	r2,zero,8020324 <main+0x58>
		printf ("Error: could not open pixel buffer device \n");
 8020314:	010200f4 	movhi	r4,2051
 8020318:	2106e204 	addi	r4,r4,7048
 802031c:	80217a40 	call	80217a4 <puts>
 8020320:	00000306 	br	8020330 <main+0x64>
	else
		printf ("Opened pixel buffer device \n");
 8020324:	010200f4 	movhi	r4,2051
 8020328:	2106ed04 	addi	r4,r4,7092
 802032c:	80217a40 	call	80217a4 <puts>
	alt_up_char_buffer_dev * char_buf_dev;
	char_buf_dev = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
 8020330:	010200f4 	movhi	r4,2051
 8020334:	2106f404 	addi	r4,r4,7120
 8020338:	802f9180 	call	802f918 <alt_up_char_buffer_open_dev>
 802033c:	e0bfa715 	stw	r2,-356(fp)
	if ( char_buf_dev == NULL)
 8020340:	e0bfa717 	ldw	r2,-356(fp)
 8020344:	1000041e 	bne	r2,zero,8020358 <main+0x8c>
		printf ("Error: could not open char buffer device \n");
 8020348:	010200f4 	movhi	r4,2051
 802034c:	2106fe04 	addi	r4,r4,7160
 8020350:	80217a40 	call	80217a4 <puts>
 8020354:	00000306 	br	8020364 <main+0x98>
	else
		printf ("Opened char buffer device \n");
 8020358:	010200f4 	movhi	r4,2051
 802035c:	21070904 	addi	r4,r4,7204
 8020360:	80217a40 	call	80217a4 <puts>

	alt_up_char_buffer_init(char_buf_dev);
 8020364:	e13fa717 	ldw	r4,-356(fp)
 8020368:	802f8980 	call	802f898 <alt_up_char_buffer_init>
	alt_up_char_buffer_init(char_buf_dev);
 802036c:	e13fa717 	ldw	r4,-356(fp)
 8020370:	802f8980 	call	802f898 <alt_up_char_buffer_init>

	// Game objects
	Game game = {SCREEN_WIDTH, SCREEN_HEIGHT, {0,0}, NUM_BALLS, NUM_PADDLES,
 8020374:	008200f4 	movhi	r2,2051
 8020378:	10871904 	addi	r2,r2,7268
 802037c:	e0ffa804 	addi	r3,fp,-352
 8020380:	1009883a 	mov	r4,r2
 8020384:	00802404 	movi	r2,144
 8020388:	100d883a 	mov	r6,r2
 802038c:	200b883a 	mov	r5,r4
 8020390:	1809883a 	mov	r4,r3
 8020394:	802159c0 	call	802159c <memcpy>
			{0,0,0,0,0,0,0,0}, //User input
			0 // Game time in s
	};
	//Display strings
	char time_str[10];
	sprintf(time_str, "Time: %u", game.time);
 8020398:	e0ffcb17 	ldw	r3,-212(fp)
 802039c:	e0bfa804 	addi	r2,fp,-352
 80203a0:	10802404 	addi	r2,r2,144
 80203a4:	180d883a 	mov	r6,r3
 80203a8:	014200f4 	movhi	r5,2051
 80203ac:	2946d704 	addi	r5,r5,7004
 80203b0:	1009883a 	mov	r4,r2
 80203b4:	80218100 	call	8021810 <sprintf>
 80203b8:	d0e6fa17 	ldw	r3,-25624(gp)
		sprintf(time_str, "Time: %u", game.time);
		return alt_ticks_per_second();
	}
	static alt_alarm alarm;
	// Setup alarm to call the callback function every N_TICKS
	if (alt_alarm_start(&alarm, alt_ticks_per_second(), alarm_callback, NULL) < 0){
 80203bc:	e0bfa804 	addi	r2,fp,-352
 80203c0:	10802704 	addi	r2,r2,156
 80203c4:	000f883a 	mov	r7,zero
 80203c8:	100d883a 	mov	r6,r2
 80203cc:	180b883a 	mov	r5,r3
 80203d0:	010200f4 	movhi	r4,2051
 80203d4:	2115ec04 	addi	r4,r4,22448
 80203d8:	802dd440 	call	802dd44 <alt_alarm_start>
 80203dc:	1000030e 	bge	r2,zero,80203ec <main+0x120>
		printf ("No System Clock Available\n");
 80203e0:	010200f4 	movhi	r4,2051
 80203e4:	21071004 	addi	r4,r4,7232
 80203e8:	80217a40 	call	80217a4 <puts>
		draw(pixel_buf_dma_dev, BALL_COLOUR, buffer, balls, NUM_BALLS);
		draw(pixel_buf_dma_dev, PADDLE_COLOUR, buffer, paddles, NUM_PADDLES);
	}
	// ****************
	// Clear screen
	clear(pixel_buf_dma_dev, char_buf_dev,0); // Current screen
 80203ec:	e0bfa804 	addi	r2,fp,-352
 80203f0:	1019883a 	mov	r12,r2
 80203f4:	000d883a 	mov	r6,zero
 80203f8:	e17fa717 	ldw	r5,-356(fp)
 80203fc:	e13fa617 	ldw	r4,-360(fp)
 8020400:	80210540 	call	8021054 <clear.3035>
	//clear(pixel_buf_dma_dev, 0, char_buf_dev); // Char buffer
	while(1) {
		run_game_tick(pixel_buf_dma_dev, char_buf_dev, 0, &game);
 8020404:	e0bfa804 	addi	r2,fp,-352
 8020408:	e0ffa804 	addi	r3,fp,-352
 802040c:	1819883a 	mov	r12,r3
 8020410:	100f883a 	mov	r7,r2
 8020414:	000d883a 	mov	r6,zero
 8020418:	e17fa717 	ldw	r5,-356(fp)
 802041c:	e13fa617 	ldw	r4,-360(fp)
 8020420:	80213900 	call	8021390 <run_game_tick.3068>
		sprintf(score_str, "%u - %u", game.scores[0], game.scores[1]);
 8020424:	e0ffaa17 	ldw	r3,-344(fp)
 8020428:	e13fab17 	ldw	r4,-340(fp)
 802042c:	e0bffa84 	addi	r2,fp,-22
 8020430:	200f883a 	mov	r7,r4
 8020434:	180d883a 	mov	r6,r3
 8020438:	014200f4 	movhi	r5,2051
 802043c:	29471704 	addi	r5,r5,7260
 8020440:	1009883a 	mov	r4,r2
 8020444:	80218100 	call	8021810 <sprintf>
		alt_up_char_buffer_string(char_buf_dev, score_str, 37, 2);
 8020448:	e0bffa84 	addi	r2,fp,-22
 802044c:	01c00084 	movi	r7,2
 8020450:	01800944 	movi	r6,37
 8020454:	100b883a 	mov	r5,r2
 8020458:	e13fa717 	ldw	r4,-356(fp)
 802045c:	802fa200 	call	802fa20 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, time_str, 65, 2);
 8020460:	e0bfa804 	addi	r2,fp,-352
 8020464:	10802404 	addi	r2,r2,144
 8020468:	01c00084 	movi	r7,2
 802046c:	01801044 	movi	r6,65
 8020470:	100b883a 	mov	r5,r2
 8020474:	e13fa717 	ldw	r4,-356(fp)
 8020478:	802fa200 	call	802fa20 <alt_up_char_buffer_string>
		usleep(10000);
 802047c:	0109c404 	movi	r4,10000
 8020480:	802e86c0 	call	802e86c <usleep>
	}
 8020484:	003fdf06 	br	8020404 <__alt_data_end+0xfffe1004>

08020488 <cheat_code.3002>:
		printf ("No System Clock Available\n");
	}

	// The makefile is not working as intended so the linker is unable to compile the dependencies.
	// As a result, we have to manually include the functions here ********
	void cheat_code(Game* game) {
 8020488:	defffb04 	addi	sp,sp,-20
 802048c:	df000415 	stw	fp,16(sp)
 8020490:	df000404 	addi	fp,sp,16
 8020494:	e13ffe15 	stw	r4,-8(fp)
 8020498:	e33fff15 	stw	r12,-4(fp)
		int* user_input = game->user_input;
 802049c:	e0bffe17 	ldw	r2,-8(fp)
 80204a0:	10801b04 	addi	r2,r2,108
 80204a4:	e0bffc15 	stw	r2,-16(fp)
		Rectangle* paddles = game ->paddles;
 80204a8:	e0bffe17 	ldw	r2,-8(fp)
 80204ac:	10800d04 	addi	r2,r2,52
 80204b0:	e0bffd15 	stw	r2,-12(fp)
		if(user_input[3]) {
 80204b4:	e0bffc17 	ldw	r2,-16(fp)
 80204b8:	10800304 	addi	r2,r2,12
 80204bc:	10800017 	ldw	r2,0(r2)
 80204c0:	10000826 	beq	r2,zero,80204e4 <cheat_code.3002+0x5c>
			paddles[0].height=SCREEN_HEIGHT-1;
 80204c4:	e0bffd17 	ldw	r2,-12(fp)
 80204c8:	00c03bc4 	movi	r3,239
 80204cc:	10c00515 	stw	r3,20(r2)
			paddles[0].y=0;
 80204d0:	e0bffd17 	ldw	r2,-12(fp)
 80204d4:	10000115 	stw	zero,4(r2)
			paddles[0].yspeed=0;
 80204d8:	e0bffd17 	ldw	r2,-12(fp)
 80204dc:	10000315 	stw	zero,12(r2)
 80204e0:	00000306 	br	80204f0 <cheat_code.3002+0x68>
		} else { paddles[0].height=PADDLE_HEIGHT-1;}
 80204e4:	e0bffd17 	ldw	r2,-12(fp)
 80204e8:	00c00c44 	movi	r3,49
 80204ec:	10c00515 	stw	r3,20(r2)
		if(user_input[4]) {
 80204f0:	e0bffc17 	ldw	r2,-16(fp)
 80204f4:	10800404 	addi	r2,r2,16
 80204f8:	10800017 	ldw	r2,0(r2)
 80204fc:	10000b26 	beq	r2,zero,802052c <cheat_code.3002+0xa4>
			paddles[1].height=SCREEN_HEIGHT-1;
 8020500:	e0bffd17 	ldw	r2,-12(fp)
 8020504:	10800704 	addi	r2,r2,28
 8020508:	00c03bc4 	movi	r3,239
 802050c:	10c00515 	stw	r3,20(r2)
			paddles[1].y=0;
 8020510:	e0bffd17 	ldw	r2,-12(fp)
 8020514:	10800704 	addi	r2,r2,28
 8020518:	10000115 	stw	zero,4(r2)
			paddles[1].yspeed=0;
 802051c:	e0bffd17 	ldw	r2,-12(fp)
 8020520:	10800704 	addi	r2,r2,28
 8020524:	10000315 	stw	zero,12(r2)
		} else {paddles[1].height=PADDLE_HEIGHT-1;}
	}
 8020528:	00000406 	br	802053c <cheat_code.3002+0xb4>
		} else { paddles[0].height=PADDLE_HEIGHT-1;}
		if(user_input[4]) {
			paddles[1].height=SCREEN_HEIGHT-1;
			paddles[1].y=0;
			paddles[1].yspeed=0;
		} else {paddles[1].height=PADDLE_HEIGHT-1;}
 802052c:	e0bffd17 	ldw	r2,-12(fp)
 8020530:	10800704 	addi	r2,r2,28
 8020534:	00c00c44 	movi	r3,49
 8020538:	10c00515 	stw	r3,20(r2)
	}
 802053c:	0001883a 	nop
 8020540:	e037883a 	mov	sp,fp
 8020544:	df000017 	ldw	fp,0(sp)
 8020548:	dec00104 	addi	sp,sp,4
 802054c:	f800283a 	ret

08020550 <update_paddle.3007>:
	// Updates paddle positions
	void update_paddle(Game* game) {
 8020550:	defff404 	addi	sp,sp,-48
 8020554:	dfc00b15 	stw	ra,44(sp)
 8020558:	df000a15 	stw	fp,40(sp)
 802055c:	dc400915 	stw	r17,36(sp)
 8020560:	dc000815 	stw	r16,32(sp)
 8020564:	df000a04 	addi	fp,sp,40
 8020568:	e13ffc15 	stw	r4,-16(fp)
 802056c:	e33ffd15 	stw	r12,-12(fp)
		int* user_input = (game -> user_input);
 8020570:	e0bffc17 	ldw	r2,-16(fp)
 8020574:	10801b04 	addi	r2,r2,108
 8020578:	e0bff715 	stw	r2,-36(fp)
		int len = (game->paddles_len);
 802057c:	e0bffc17 	ldw	r2,-16(fp)
 8020580:	10800517 	ldw	r2,20(r2)
 8020584:	e0bff815 	stw	r2,-32(fp)
		Rectangle* paddle = (game -> paddles);
 8020588:	e0bffc17 	ldw	r2,-16(fp)
 802058c:	10800d04 	addi	r2,r2,52
 8020590:	e0bff915 	stw	r2,-28(fp)
		// Adjust speed according to user input
		int SW_0 = user_input[0];
 8020594:	e0bff717 	ldw	r2,-36(fp)
 8020598:	10800017 	ldw	r2,0(r2)
 802059c:	e0bffa15 	stw	r2,-24(fp)
		int SW_1 = user_input[1];
 80205a0:	e0bff717 	ldw	r2,-36(fp)
 80205a4:	10800117 	ldw	r2,4(r2)
 80205a8:	e0bffb15 	stw	r2,-20(fp)
		if(SW_0) // SW_0 is on (left paddle)
 80205ac:	e0bffa17 	ldw	r2,-24(fp)
 80205b0:	10000426 	beq	r2,zero,80205c4 <update_paddle.3007+0x74>
			paddle[0].yspeed = -PADDLE_SPEED;
 80205b4:	e0bff917 	ldw	r2,-28(fp)
 80205b8:	00ffff84 	movi	r3,-2
 80205bc:	10c00315 	stw	r3,12(r2)
 80205c0:	00000306 	br	80205d0 <update_paddle.3007+0x80>
		else
			paddle[0].yspeed = PADDLE_SPEED;
 80205c4:	e0bff917 	ldw	r2,-28(fp)
 80205c8:	00c00084 	movi	r3,2
 80205cc:	10c00315 	stw	r3,12(r2)
		if(SW_1) // SW_1 is on (right paddle)
 80205d0:	e0bffb17 	ldw	r2,-20(fp)
 80205d4:	10000526 	beq	r2,zero,80205ec <update_paddle.3007+0x9c>
			paddle[1].yspeed = -PADDLE_SPEED;
 80205d8:	e0bff917 	ldw	r2,-28(fp)
 80205dc:	10800704 	addi	r2,r2,28
 80205e0:	00ffff84 	movi	r3,-2
 80205e4:	10c00315 	stw	r3,12(r2)
 80205e8:	00000406 	br	80205fc <update_paddle.3007+0xac>
		else
			paddle[1].yspeed = PADDLE_SPEED;
 80205ec:	e0bff917 	ldw	r2,-28(fp)
 80205f0:	10800704 	addi	r2,r2,28
 80205f4:	00c00084 	movi	r3,2
 80205f8:	10c00315 	stw	r3,12(r2)
		// Adjust paddle positions
		for(int i = 0; i< len; i++) {
 80205fc:	e03ff615 	stw	zero,-40(fp)
 8020600:	00006d06 	br	80207b8 <update_paddle.3007+0x268>
			// Update position
			paddle[i].y += paddle[i].yspeed;
 8020604:	e0bff617 	ldw	r2,-40(fp)
 8020608:	01400704 	movi	r5,28
 802060c:	1009883a 	mov	r4,r2
 8020610:	80214e80 	call	80214e8 <__mulsi3>
 8020614:	1007883a 	mov	r3,r2
 8020618:	e0bff917 	ldw	r2,-28(fp)
 802061c:	10e1883a 	add	r16,r2,r3
 8020620:	e0bff617 	ldw	r2,-40(fp)
 8020624:	01400704 	movi	r5,28
 8020628:	1009883a 	mov	r4,r2
 802062c:	80214e80 	call	80214e8 <__mulsi3>
 8020630:	1007883a 	mov	r3,r2
 8020634:	e0bff917 	ldw	r2,-28(fp)
 8020638:	10c5883a 	add	r2,r2,r3
 802063c:	14400117 	ldw	r17,4(r2)
 8020640:	e0bff617 	ldw	r2,-40(fp)
 8020644:	01400704 	movi	r5,28
 8020648:	1009883a 	mov	r4,r2
 802064c:	80214e80 	call	80214e8 <__mulsi3>
 8020650:	1007883a 	mov	r3,r2
 8020654:	e0bff917 	ldw	r2,-28(fp)
 8020658:	10c5883a 	add	r2,r2,r3
 802065c:	10800317 	ldw	r2,12(r2)
 8020660:	8885883a 	add	r2,r17,r2
 8020664:	80800115 	stw	r2,4(r16)
			paddle[0].x = 0;
 8020668:	e0bff917 	ldw	r2,-28(fp)
 802066c:	10000015 	stw	zero,0(r2)
			paddle[1].x = SCREEN_WIDTH - paddle[1].width;
 8020670:	e0bff917 	ldw	r2,-28(fp)
 8020674:	10800704 	addi	r2,r2,28
 8020678:	e0fff917 	ldw	r3,-28(fp)
 802067c:	18c00704 	addi	r3,r3,28
 8020680:	18c00417 	ldw	r3,16(r3)
 8020684:	01005004 	movi	r4,320
 8020688:	20c7c83a 	sub	r3,r4,r3
 802068c:	10c00015 	stw	r3,0(r2)
			// Check for collisions
			if (paddle[i].y + paddle[i].height >= SCREEN_HEIGHT) {
 8020690:	e0bff617 	ldw	r2,-40(fp)
 8020694:	01400704 	movi	r5,28
 8020698:	1009883a 	mov	r4,r2
 802069c:	80214e80 	call	80214e8 <__mulsi3>
 80206a0:	1007883a 	mov	r3,r2
 80206a4:	e0bff917 	ldw	r2,-28(fp)
 80206a8:	10c5883a 	add	r2,r2,r3
 80206ac:	14000117 	ldw	r16,4(r2)
 80206b0:	e0bff617 	ldw	r2,-40(fp)
 80206b4:	01400704 	movi	r5,28
 80206b8:	1009883a 	mov	r4,r2
 80206bc:	80214e80 	call	80214e8 <__mulsi3>
 80206c0:	1007883a 	mov	r3,r2
 80206c4:	e0bff917 	ldw	r2,-28(fp)
 80206c8:	10c5883a 	add	r2,r2,r3
 80206cc:	10800517 	ldw	r2,20(r2)
 80206d0:	8085883a 	add	r2,r16,r2
 80206d4:	10803c10 	cmplti	r2,r2,240
 80206d8:	10001b1e 	bne	r2,zero,8020748 <update_paddle.3007+0x1f8>
				paddle[i].y = SCREEN_HEIGHT - paddle[i].height;
 80206dc:	e0bff617 	ldw	r2,-40(fp)
 80206e0:	01400704 	movi	r5,28
 80206e4:	1009883a 	mov	r4,r2
 80206e8:	80214e80 	call	80214e8 <__mulsi3>
 80206ec:	1007883a 	mov	r3,r2
 80206f0:	e0bff917 	ldw	r2,-28(fp)
 80206f4:	10e1883a 	add	r16,r2,r3
 80206f8:	e0bff617 	ldw	r2,-40(fp)
 80206fc:	01400704 	movi	r5,28
 8020700:	1009883a 	mov	r4,r2
 8020704:	80214e80 	call	80214e8 <__mulsi3>
 8020708:	1007883a 	mov	r3,r2
 802070c:	e0bff917 	ldw	r2,-28(fp)
 8020710:	10c5883a 	add	r2,r2,r3
 8020714:	10800517 	ldw	r2,20(r2)
 8020718:	00c03c04 	movi	r3,240
 802071c:	1885c83a 	sub	r2,r3,r2
 8020720:	80800115 	stw	r2,4(r16)
				paddle[i].yspeed = 0;
 8020724:	e0bff617 	ldw	r2,-40(fp)
 8020728:	01400704 	movi	r5,28
 802072c:	1009883a 	mov	r4,r2
 8020730:	80214e80 	call	80214e8 <__mulsi3>
 8020734:	1007883a 	mov	r3,r2
 8020738:	e0bff917 	ldw	r2,-28(fp)
 802073c:	10c5883a 	add	r2,r2,r3
 8020740:	10000315 	stw	zero,12(r2)
 8020744:	00001906 	br	80207ac <update_paddle.3007+0x25c>
			}
			else if (paddle[i].y <= 0) {
 8020748:	e0bff617 	ldw	r2,-40(fp)
 802074c:	01400704 	movi	r5,28
 8020750:	1009883a 	mov	r4,r2
 8020754:	80214e80 	call	80214e8 <__mulsi3>
 8020758:	1007883a 	mov	r3,r2
 802075c:	e0bff917 	ldw	r2,-28(fp)
 8020760:	10c5883a 	add	r2,r2,r3
 8020764:	10800117 	ldw	r2,4(r2)
 8020768:	00801016 	blt	zero,r2,80207ac <update_paddle.3007+0x25c>
				paddle[i].y = 0;
 802076c:	e0bff617 	ldw	r2,-40(fp)
 8020770:	01400704 	movi	r5,28
 8020774:	1009883a 	mov	r4,r2
 8020778:	80214e80 	call	80214e8 <__mulsi3>
 802077c:	1007883a 	mov	r3,r2
 8020780:	e0bff917 	ldw	r2,-28(fp)
 8020784:	10c5883a 	add	r2,r2,r3
 8020788:	10000115 	stw	zero,4(r2)
				paddle[i].yspeed = 0;
 802078c:	e0bff617 	ldw	r2,-40(fp)
 8020790:	01400704 	movi	r5,28
 8020794:	1009883a 	mov	r4,r2
 8020798:	80214e80 	call	80214e8 <__mulsi3>
 802079c:	1007883a 	mov	r3,r2
 80207a0:	e0bff917 	ldw	r2,-28(fp)
 80207a4:	10c5883a 	add	r2,r2,r3
 80207a8:	10000315 	stw	zero,12(r2)
		if(SW_1) // SW_1 is on (right paddle)
			paddle[1].yspeed = -PADDLE_SPEED;
		else
			paddle[1].yspeed = PADDLE_SPEED;
		// Adjust paddle positions
		for(int i = 0; i< len; i++) {
 80207ac:	e0bff617 	ldw	r2,-40(fp)
 80207b0:	10800044 	addi	r2,r2,1
 80207b4:	e0bff615 	stw	r2,-40(fp)
 80207b8:	e0fff617 	ldw	r3,-40(fp)
 80207bc:	e0bff817 	ldw	r2,-32(fp)
 80207c0:	18bf9016 	blt	r3,r2,8020604 <__alt_data_end+0xfffe1204>
			else if (paddle[i].y <= 0) {
				paddle[i].y = 0;
				paddle[i].yspeed = 0;
			}
		}
	}
 80207c4:	0001883a 	nop
 80207c8:	e6fffe04 	addi	sp,fp,-8
 80207cc:	dfc00317 	ldw	ra,12(sp)
 80207d0:	df000217 	ldw	fp,8(sp)
 80207d4:	dc400117 	ldw	r17,4(sp)
 80207d8:	dc000017 	ldw	r16,0(sp)
 80207dc:	dec00404 	addi	sp,sp,16
 80207e0:	f800283a 	ret

080207e4 <sign.3019>:
	// Updates the position of each Rectangle object
	// "bounces" each object upon collision with screen top/bottom edges
	// or paddle objects
	int sign(int n) {
 80207e4:	defffd04 	addi	sp,sp,-12
 80207e8:	df000215 	stw	fp,8(sp)
 80207ec:	df000204 	addi	fp,sp,8
 80207f0:	e13ffe15 	stw	r4,-8(fp)
 80207f4:	e33fff15 	stw	r12,-4(fp)
		if(n<0)
 80207f8:	e0bffe17 	ldw	r2,-8(fp)
 80207fc:	1000020e 	bge	r2,zero,8020808 <sign.3019+0x24>
			return -1;
 8020800:	00bfffc4 	movi	r2,-1
 8020804:	00000106 	br	802080c <sign.3019+0x28>
		return 1;
 8020808:	00800044 	movi	r2,1
	}
 802080c:	e037883a 	mov	sp,fp
 8020810:	df000017 	ldw	fp,0(sp)
 8020814:	dec00104 	addi	sp,sp,4
 8020818:	f800283a 	ret

0802081c <update_ball.3022>:
	void update_ball(Game* game) {
 802081c:	defff404 	addi	sp,sp,-48
 8020820:	dfc00b15 	stw	ra,44(sp)
 8020824:	df000a15 	stw	fp,40(sp)
 8020828:	dc800915 	stw	r18,36(sp)
 802082c:	dc400815 	stw	r17,32(sp)
 8020830:	dc000715 	stw	r16,28(sp)
 8020834:	df000a04 	addi	fp,sp,40
 8020838:	e13ffb15 	stw	r4,-20(fp)
 802083c:	6025883a 	mov	r18,r12
 8020840:	e33ffc15 	stw	r12,-16(fp)
		int rect_len = (game -> balls_len);
 8020844:	e0bffb17 	ldw	r2,-20(fp)
 8020848:	10800417 	ldw	r2,16(r2)
 802084c:	e0bff715 	stw	r2,-36(fp)
		Rectangle* rect = (game -> balls);
 8020850:	e0bffb17 	ldw	r2,-20(fp)
 8020854:	10800604 	addi	r2,r2,24
 8020858:	e0bff815 	stw	r2,-32(fp)
		Rectangle* paddles = (game -> paddles);
 802085c:	e0bffb17 	ldw	r2,-20(fp)
 8020860:	10800d04 	addi	r2,r2,52
 8020864:	e0bff915 	stw	r2,-28(fp)
		int* scores = (game -> scores);
 8020868:	e0bffb17 	ldw	r2,-20(fp)
 802086c:	10800204 	addi	r2,r2,8
 8020870:	e0bffa15 	stw	r2,-24(fp)
		for(int i = 0; i< rect_len; i++) {
 8020874:	e03ff615 	stw	zero,-40(fp)
 8020878:	0001ea06 	br	8021024 <update_ball.3022+0x808>
			// Update position
			rect[i].x += rect[i].xspeed;
 802087c:	e0bff617 	ldw	r2,-40(fp)
 8020880:	01400704 	movi	r5,28
 8020884:	1009883a 	mov	r4,r2
 8020888:	80214e80 	call	80214e8 <__mulsi3>
 802088c:	1007883a 	mov	r3,r2
 8020890:	e0bff817 	ldw	r2,-32(fp)
 8020894:	10e1883a 	add	r16,r2,r3
 8020898:	e0bff617 	ldw	r2,-40(fp)
 802089c:	01400704 	movi	r5,28
 80208a0:	1009883a 	mov	r4,r2
 80208a4:	80214e80 	call	80214e8 <__mulsi3>
 80208a8:	1007883a 	mov	r3,r2
 80208ac:	e0bff817 	ldw	r2,-32(fp)
 80208b0:	10c5883a 	add	r2,r2,r3
 80208b4:	14400017 	ldw	r17,0(r2)
 80208b8:	e0bff617 	ldw	r2,-40(fp)
 80208bc:	01400704 	movi	r5,28
 80208c0:	1009883a 	mov	r4,r2
 80208c4:	80214e80 	call	80214e8 <__mulsi3>
 80208c8:	1007883a 	mov	r3,r2
 80208cc:	e0bff817 	ldw	r2,-32(fp)
 80208d0:	10c5883a 	add	r2,r2,r3
 80208d4:	10800217 	ldw	r2,8(r2)
 80208d8:	8885883a 	add	r2,r17,r2
 80208dc:	80800015 	stw	r2,0(r16)
			rect[i].y += rect[i].yspeed;
 80208e0:	e0bff617 	ldw	r2,-40(fp)
 80208e4:	01400704 	movi	r5,28
 80208e8:	1009883a 	mov	r4,r2
 80208ec:	80214e80 	call	80214e8 <__mulsi3>
 80208f0:	1007883a 	mov	r3,r2
 80208f4:	e0bff817 	ldw	r2,-32(fp)
 80208f8:	10e1883a 	add	r16,r2,r3
 80208fc:	e0bff617 	ldw	r2,-40(fp)
 8020900:	01400704 	movi	r5,28
 8020904:	1009883a 	mov	r4,r2
 8020908:	80214e80 	call	80214e8 <__mulsi3>
 802090c:	1007883a 	mov	r3,r2
 8020910:	e0bff817 	ldw	r2,-32(fp)
 8020914:	10c5883a 	add	r2,r2,r3
 8020918:	14400117 	ldw	r17,4(r2)
 802091c:	e0bff617 	ldw	r2,-40(fp)
 8020920:	01400704 	movi	r5,28
 8020924:	1009883a 	mov	r4,r2
 8020928:	80214e80 	call	80214e8 <__mulsi3>
 802092c:	1007883a 	mov	r3,r2
 8020930:	e0bff817 	ldw	r2,-32(fp)
 8020934:	10c5883a 	add	r2,r2,r3
 8020938:	10800317 	ldw	r2,12(r2)
 802093c:	8885883a 	add	r2,r17,r2
 8020940:	80800115 	stw	r2,4(r16)
			// Check for collisions
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
 8020944:	e0bff617 	ldw	r2,-40(fp)
 8020948:	01400704 	movi	r5,28
 802094c:	1009883a 	mov	r4,r2
 8020950:	80214e80 	call	80214e8 <__mulsi3>
 8020954:	1007883a 	mov	r3,r2
 8020958:	e0bff817 	ldw	r2,-32(fp)
 802095c:	10c5883a 	add	r2,r2,r3
 8020960:	14000017 	ldw	r16,0(r2)
 8020964:	e0bff617 	ldw	r2,-40(fp)
 8020968:	01400704 	movi	r5,28
 802096c:	1009883a 	mov	r4,r2
 8020970:	80214e80 	call	80214e8 <__mulsi3>
 8020974:	1007883a 	mov	r3,r2
 8020978:	e0bff817 	ldw	r2,-32(fp)
 802097c:	10c5883a 	add	r2,r2,r3
 8020980:	10800417 	ldw	r2,16(r2)
 8020984:	8085883a 	add	r2,r16,r2
 8020988:	10805008 	cmpgei	r2,r2,320
 802098c:	1000151e 	bne	r2,zero,80209e4 <update_ball.3022+0x1c8>
 8020990:	e0bff617 	ldw	r2,-40(fp)
 8020994:	01400704 	movi	r5,28
 8020998:	1009883a 	mov	r4,r2
 802099c:	80214e80 	call	80214e8 <__mulsi3>
 80209a0:	1007883a 	mov	r3,r2
 80209a4:	e0bff817 	ldw	r2,-32(fp)
 80209a8:	10c5883a 	add	r2,r2,r3
 80209ac:	14000017 	ldw	r16,0(r2)
 80209b0:	e0bff617 	ldw	r2,-40(fp)
 80209b4:	01400704 	movi	r5,28
 80209b8:	1009883a 	mov	r4,r2
 80209bc:	80214e80 	call	80214e8 <__mulsi3>
 80209c0:	1007883a 	mov	r3,r2
 80209c4:	e0bff817 	ldw	r2,-32(fp)
 80209c8:	10c5883a 	add	r2,r2,r3
 80209cc:	10800417 	ldw	r2,16(r2)
 80209d0:	8087883a 	add	r3,r16,r2
 80209d4:	e0bff917 	ldw	r2,-28(fp)
 80209d8:	10800704 	addi	r2,r2,28
 80209dc:	10800017 	ldw	r2,0(r2)
 80209e0:	18809516 	blt	r3,r2,8020c38 <update_ball.3022+0x41c>
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 80209e4:	e0bff617 	ldw	r2,-40(fp)
 80209e8:	01400704 	movi	r5,28
 80209ec:	1009883a 	mov	r4,r2
 80209f0:	80214e80 	call	80214e8 <__mulsi3>
 80209f4:	1007883a 	mov	r3,r2
 80209f8:	e0bff817 	ldw	r2,-32(fp)
 80209fc:	10c5883a 	add	r2,r2,r3
 8020a00:	14000117 	ldw	r16,4(r2)
 8020a04:	e0bff617 	ldw	r2,-40(fp)
 8020a08:	01400704 	movi	r5,28
 8020a0c:	1009883a 	mov	r4,r2
 8020a10:	80214e80 	call	80214e8 <__mulsi3>
 8020a14:	1007883a 	mov	r3,r2
 8020a18:	e0bff817 	ldw	r2,-32(fp)
 8020a1c:	10c5883a 	add	r2,r2,r3
 8020a20:	10800517 	ldw	r2,20(r2)
 8020a24:	8087883a 	add	r3,r16,r2
 8020a28:	e0bff917 	ldw	r2,-28(fp)
 8020a2c:	10800704 	addi	r2,r2,28
 8020a30:	10800117 	ldw	r2,4(r2)
 8020a34:	18805e16 	blt	r3,r2,8020bb0 <update_ball.3022+0x394>
 8020a38:	e0bff617 	ldw	r2,-40(fp)
 8020a3c:	01400704 	movi	r5,28
 8020a40:	1009883a 	mov	r4,r2
 8020a44:	80214e80 	call	80214e8 <__mulsi3>
 8020a48:	1007883a 	mov	r3,r2
 8020a4c:	e0bff817 	ldw	r2,-32(fp)
 8020a50:	10c5883a 	add	r2,r2,r3
 8020a54:	10800117 	ldw	r2,4(r2)
 8020a58:	e0fff917 	ldw	r3,-28(fp)
 8020a5c:	18c00704 	addi	r3,r3,28
 8020a60:	19000117 	ldw	r4,4(r3)
 8020a64:	e0fff917 	ldw	r3,-28(fp)
 8020a68:	18c00704 	addi	r3,r3,28
 8020a6c:	18c00517 	ldw	r3,20(r3)
 8020a70:	20c7883a 	add	r3,r4,r3
 8020a74:	18804e16 	blt	r3,r2,8020bb0 <update_ball.3022+0x394>
					rect[i].x = paddles[1].x - rect[i].width;
 8020a78:	e0bff617 	ldw	r2,-40(fp)
 8020a7c:	01400704 	movi	r5,28
 8020a80:	1009883a 	mov	r4,r2
 8020a84:	80214e80 	call	80214e8 <__mulsi3>
 8020a88:	1007883a 	mov	r3,r2
 8020a8c:	e0bff817 	ldw	r2,-32(fp)
 8020a90:	10e1883a 	add	r16,r2,r3
 8020a94:	e0bff917 	ldw	r2,-28(fp)
 8020a98:	10800704 	addi	r2,r2,28
 8020a9c:	14400017 	ldw	r17,0(r2)
 8020aa0:	e0bff617 	ldw	r2,-40(fp)
 8020aa4:	01400704 	movi	r5,28
 8020aa8:	1009883a 	mov	r4,r2
 8020aac:	80214e80 	call	80214e8 <__mulsi3>
 8020ab0:	1007883a 	mov	r3,r2
 8020ab4:	e0bff817 	ldw	r2,-32(fp)
 8020ab8:	10c5883a 	add	r2,r2,r3
 8020abc:	10800417 	ldw	r2,16(r2)
 8020ac0:	8885c83a 	sub	r2,r17,r2
 8020ac4:	80800015 	stw	r2,0(r16)
					rect[i].xspeed*=-1; // Bounce
 8020ac8:	e0bff617 	ldw	r2,-40(fp)
 8020acc:	01400704 	movi	r5,28
 8020ad0:	1009883a 	mov	r4,r2
 8020ad4:	80214e80 	call	80214e8 <__mulsi3>
 8020ad8:	1007883a 	mov	r3,r2
 8020adc:	e0bff817 	ldw	r2,-32(fp)
 8020ae0:	10e1883a 	add	r16,r2,r3
 8020ae4:	e0bff617 	ldw	r2,-40(fp)
 8020ae8:	01400704 	movi	r5,28
 8020aec:	1009883a 	mov	r4,r2
 8020af0:	80214e80 	call	80214e8 <__mulsi3>
 8020af4:	1007883a 	mov	r3,r2
 8020af8:	e0bff817 	ldw	r2,-32(fp)
 8020afc:	10c5883a 	add	r2,r2,r3
 8020b00:	10800217 	ldw	r2,8(r2)
 8020b04:	0085c83a 	sub	r2,zero,r2
 8020b08:	80800215 	stw	r2,8(r16)
					if(sign(rect[i].yspeed)!=sign(paddles[1].yspeed)&& paddles[1].yspeed!=0) // Ball bounces in direction of paddle movement
 8020b0c:	e0bff617 	ldw	r2,-40(fp)
 8020b10:	01400704 	movi	r5,28
 8020b14:	1009883a 	mov	r4,r2
 8020b18:	80214e80 	call	80214e8 <__mulsi3>
 8020b1c:	1007883a 	mov	r3,r2
 8020b20:	e0bff817 	ldw	r2,-32(fp)
 8020b24:	10c5883a 	add	r2,r2,r3
 8020b28:	10800317 	ldw	r2,12(r2)
 8020b2c:	9019883a 	mov	r12,r18
 8020b30:	1009883a 	mov	r4,r2
 8020b34:	80207e40 	call	80207e4 <sign.3019>
 8020b38:	1021883a 	mov	r16,r2
 8020b3c:	e0bff917 	ldw	r2,-28(fp)
 8020b40:	10800704 	addi	r2,r2,28
 8020b44:	10800317 	ldw	r2,12(r2)
 8020b48:	9019883a 	mov	r12,r18
 8020b4c:	1009883a 	mov	r4,r2
 8020b50:	80207e40 	call	80207e4 <sign.3019>
 8020b54:	80803626 	beq	r16,r2,8020c30 <update_ball.3022+0x414>
 8020b58:	e0bff917 	ldw	r2,-28(fp)
 8020b5c:	10800704 	addi	r2,r2,28
 8020b60:	10800317 	ldw	r2,12(r2)
 8020b64:	10003226 	beq	r2,zero,8020c30 <update_ball.3022+0x414>
						rect[i].yspeed*=-1;
 8020b68:	e0bff617 	ldw	r2,-40(fp)
 8020b6c:	01400704 	movi	r5,28
 8020b70:	1009883a 	mov	r4,r2
 8020b74:	80214e80 	call	80214e8 <__mulsi3>
 8020b78:	1007883a 	mov	r3,r2
 8020b7c:	e0bff817 	ldw	r2,-32(fp)
 8020b80:	10e1883a 	add	r16,r2,r3
 8020b84:	e0bff617 	ldw	r2,-40(fp)
 8020b88:	01400704 	movi	r5,28
 8020b8c:	1009883a 	mov	r4,r2
 8020b90:	80214e80 	call	80214e8 <__mulsi3>
 8020b94:	1007883a 	mov	r3,r2
 8020b98:	e0bff817 	ldw	r2,-32(fp)
 8020b9c:	10c5883a 	add	r2,r2,r3
 8020ba0:	10800317 	ldw	r2,12(r2)
 8020ba4:	0085c83a 	sub	r2,zero,r2
 8020ba8:	80800315 	stw	r2,12(r16)
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
					rect[i].x = paddles[1].x - rect[i].width;
					rect[i].xspeed*=-1; // Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[1].yspeed)&& paddles[1].yspeed!=0) // Ball bounces in direction of paddle movement
 8020bac:	00002006 	br	8020c30 <update_ball.3022+0x414>
						rect[i].yspeed*=-1;
				}
				else { // Goal - player 1 scored
					// Reset ball position
					rect[i].x = BALL_XDEFAULT;
 8020bb0:	e0bff617 	ldw	r2,-40(fp)
 8020bb4:	01400704 	movi	r5,28
 8020bb8:	1009883a 	mov	r4,r2
 8020bbc:	80214e80 	call	80214e8 <__mulsi3>
 8020bc0:	1007883a 	mov	r3,r2
 8020bc4:	e0bff817 	ldw	r2,-32(fp)
 8020bc8:	10c5883a 	add	r2,r2,r3
 8020bcc:	00c02804 	movi	r3,160
 8020bd0:	10c00015 	stw	r3,0(r2)
					rect[i].xspeed*=-1;
 8020bd4:	e0bff617 	ldw	r2,-40(fp)
 8020bd8:	01400704 	movi	r5,28
 8020bdc:	1009883a 	mov	r4,r2
 8020be0:	80214e80 	call	80214e8 <__mulsi3>
 8020be4:	1007883a 	mov	r3,r2
 8020be8:	e0bff817 	ldw	r2,-32(fp)
 8020bec:	10e1883a 	add	r16,r2,r3
 8020bf0:	e0bff617 	ldw	r2,-40(fp)
 8020bf4:	01400704 	movi	r5,28
 8020bf8:	1009883a 	mov	r4,r2
 8020bfc:	80214e80 	call	80214e8 <__mulsi3>
 8020c00:	1007883a 	mov	r3,r2
 8020c04:	e0bff817 	ldw	r2,-32(fp)
 8020c08:	10c5883a 	add	r2,r2,r3
 8020c0c:	10800217 	ldw	r2,8(r2)
 8020c10:	0085c83a 	sub	r2,zero,r2
 8020c14:	80800215 	stw	r2,8(r16)
					// Add 1 to left player's score
					scores[0] += 1;
 8020c18:	e0bffa17 	ldw	r2,-24(fp)
 8020c1c:	10800017 	ldw	r2,0(r2)
 8020c20:	10c00044 	addi	r3,r2,1
 8020c24:	e0bffa17 	ldw	r2,-24(fp)
 8020c28:	10c00015 	stw	r3,0(r2)
			rect[i].x += rect[i].xspeed;
			rect[i].y += rect[i].yspeed;
			// Check for collisions
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8020c2c:	0000fa06 	br	8021018 <update_ball.3022+0x7fc>
					rect[i].x = paddles[1].x - rect[i].width;
					rect[i].xspeed*=-1; // Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[1].yspeed)&& paddles[1].yspeed!=0) // Ball bounces in direction of paddle movement
 8020c30:	0001883a 	nop
			rect[i].x += rect[i].xspeed;
			rect[i].y += rect[i].yspeed;
			// Check for collisions
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8020c34:	0000f806 	br	8021018 <update_ball.3022+0x7fc>
					rect[i].xspeed*=-1;
					// Add 1 to left player's score
					scores[0] += 1;
				}
			}
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
 8020c38:	e0bff617 	ldw	r2,-40(fp)
 8020c3c:	01400704 	movi	r5,28
 8020c40:	1009883a 	mov	r4,r2
 8020c44:	80214e80 	call	80214e8 <__mulsi3>
 8020c48:	1007883a 	mov	r3,r2
 8020c4c:	e0bff817 	ldw	r2,-32(fp)
 8020c50:	10c5883a 	add	r2,r2,r3
 8020c54:	10800017 	ldw	r2,0(r2)
 8020c58:	00800b0e 	bge	zero,r2,8020c88 <update_ball.3022+0x46c>
 8020c5c:	e0bff617 	ldw	r2,-40(fp)
 8020c60:	01400704 	movi	r5,28
 8020c64:	1009883a 	mov	r4,r2
 8020c68:	80214e80 	call	80214e8 <__mulsi3>
 8020c6c:	1007883a 	mov	r3,r2
 8020c70:	e0bff817 	ldw	r2,-32(fp)
 8020c74:	10c5883a 	add	r2,r2,r3
 8020c78:	10800017 	ldw	r2,0(r2)
 8020c7c:	e0fff917 	ldw	r3,-28(fp)
 8020c80:	18c00417 	ldw	r3,16(r3)
 8020c84:	18808b16 	blt	r3,r2,8020eb4 <update_ball.3022+0x698>
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8020c88:	e0bff617 	ldw	r2,-40(fp)
 8020c8c:	01400704 	movi	r5,28
 8020c90:	1009883a 	mov	r4,r2
 8020c94:	80214e80 	call	80214e8 <__mulsi3>
 8020c98:	1007883a 	mov	r3,r2
 8020c9c:	e0bff817 	ldw	r2,-32(fp)
 8020ca0:	10c5883a 	add	r2,r2,r3
 8020ca4:	14000117 	ldw	r16,4(r2)
 8020ca8:	e0bff617 	ldw	r2,-40(fp)
 8020cac:	01400704 	movi	r5,28
 8020cb0:	1009883a 	mov	r4,r2
 8020cb4:	80214e80 	call	80214e8 <__mulsi3>
 8020cb8:	1007883a 	mov	r3,r2
 8020cbc:	e0bff817 	ldw	r2,-32(fp)
 8020cc0:	10c5883a 	add	r2,r2,r3
 8020cc4:	10800517 	ldw	r2,20(r2)
 8020cc8:	8087883a 	add	r3,r16,r2
 8020ccc:	e0bff917 	ldw	r2,-28(fp)
 8020cd0:	10800117 	ldw	r2,4(r2)
 8020cd4:	18805316 	blt	r3,r2,8020e24 <update_ball.3022+0x608>
 8020cd8:	e0bff617 	ldw	r2,-40(fp)
 8020cdc:	01400704 	movi	r5,28
 8020ce0:	1009883a 	mov	r4,r2
 8020ce4:	80214e80 	call	80214e8 <__mulsi3>
 8020ce8:	1007883a 	mov	r3,r2
 8020cec:	e0bff817 	ldw	r2,-32(fp)
 8020cf0:	10c5883a 	add	r2,r2,r3
 8020cf4:	10800117 	ldw	r2,4(r2)
 8020cf8:	e0fff917 	ldw	r3,-28(fp)
 8020cfc:	19000117 	ldw	r4,4(r3)
 8020d00:	e0fff917 	ldw	r3,-28(fp)
 8020d04:	18c00517 	ldw	r3,20(r3)
 8020d08:	20c7883a 	add	r3,r4,r3
 8020d0c:	18804516 	blt	r3,r2,8020e24 <update_ball.3022+0x608>
					rect[i].x = paddles[0].x + paddles[0].width;
 8020d10:	e0bff617 	ldw	r2,-40(fp)
 8020d14:	01400704 	movi	r5,28
 8020d18:	1009883a 	mov	r4,r2
 8020d1c:	80214e80 	call	80214e8 <__mulsi3>
 8020d20:	1007883a 	mov	r3,r2
 8020d24:	e0bff817 	ldw	r2,-32(fp)
 8020d28:	10c5883a 	add	r2,r2,r3
 8020d2c:	e0fff917 	ldw	r3,-28(fp)
 8020d30:	19000017 	ldw	r4,0(r3)
 8020d34:	e0fff917 	ldw	r3,-28(fp)
 8020d38:	18c00417 	ldw	r3,16(r3)
 8020d3c:	20c7883a 	add	r3,r4,r3
 8020d40:	10c00015 	stw	r3,0(r2)
					rect[i].xspeed*=-1; //Bounce
 8020d44:	e0bff617 	ldw	r2,-40(fp)
 8020d48:	01400704 	movi	r5,28
 8020d4c:	1009883a 	mov	r4,r2
 8020d50:	80214e80 	call	80214e8 <__mulsi3>
 8020d54:	1007883a 	mov	r3,r2
 8020d58:	e0bff817 	ldw	r2,-32(fp)
 8020d5c:	10e1883a 	add	r16,r2,r3
 8020d60:	e0bff617 	ldw	r2,-40(fp)
 8020d64:	01400704 	movi	r5,28
 8020d68:	1009883a 	mov	r4,r2
 8020d6c:	80214e80 	call	80214e8 <__mulsi3>
 8020d70:	1007883a 	mov	r3,r2
 8020d74:	e0bff817 	ldw	r2,-32(fp)
 8020d78:	10c5883a 	add	r2,r2,r3
 8020d7c:	10800217 	ldw	r2,8(r2)
 8020d80:	0085c83a 	sub	r2,zero,r2
 8020d84:	80800215 	stw	r2,8(r16)
					if(sign(rect[i].yspeed)!=sign(paddles[0].yspeed) && paddles[0].yspeed!=0) // Ball bounces in direction of paddle movement
 8020d88:	e0bff617 	ldw	r2,-40(fp)
 8020d8c:	01400704 	movi	r5,28
 8020d90:	1009883a 	mov	r4,r2
 8020d94:	80214e80 	call	80214e8 <__mulsi3>
 8020d98:	1007883a 	mov	r3,r2
 8020d9c:	e0bff817 	ldw	r2,-32(fp)
 8020da0:	10c5883a 	add	r2,r2,r3
 8020da4:	10800317 	ldw	r2,12(r2)
 8020da8:	9019883a 	mov	r12,r18
 8020dac:	1009883a 	mov	r4,r2
 8020db0:	80207e40 	call	80207e4 <sign.3019>
 8020db4:	1021883a 	mov	r16,r2
 8020db8:	e0bff917 	ldw	r2,-28(fp)
 8020dbc:	10800317 	ldw	r2,12(r2)
 8020dc0:	9019883a 	mov	r12,r18
 8020dc4:	1009883a 	mov	r4,r2
 8020dc8:	80207e40 	call	80207e4 <sign.3019>
 8020dcc:	80803726 	beq	r16,r2,8020eac <update_ball.3022+0x690>
 8020dd0:	e0bff917 	ldw	r2,-28(fp)
 8020dd4:	10800317 	ldw	r2,12(r2)
 8020dd8:	10003426 	beq	r2,zero,8020eac <update_ball.3022+0x690>
						rect[i].yspeed*=-1;
 8020ddc:	e0bff617 	ldw	r2,-40(fp)
 8020de0:	01400704 	movi	r5,28
 8020de4:	1009883a 	mov	r4,r2
 8020de8:	80214e80 	call	80214e8 <__mulsi3>
 8020dec:	1007883a 	mov	r3,r2
 8020df0:	e0bff817 	ldw	r2,-32(fp)
 8020df4:	10e1883a 	add	r16,r2,r3
 8020df8:	e0bff617 	ldw	r2,-40(fp)
 8020dfc:	01400704 	movi	r5,28
 8020e00:	1009883a 	mov	r4,r2
 8020e04:	80214e80 	call	80214e8 <__mulsi3>
 8020e08:	1007883a 	mov	r3,r2
 8020e0c:	e0bff817 	ldw	r2,-32(fp)
 8020e10:	10c5883a 	add	r2,r2,r3
 8020e14:	10800317 	ldw	r2,12(r2)
 8020e18:	0085c83a 	sub	r2,zero,r2
 8020e1c:	80800315 	stw	r2,12(r16)
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
					rect[i].x = paddles[0].x + paddles[0].width;
					rect[i].xspeed*=-1; //Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[0].yspeed) && paddles[0].yspeed!=0) // Ball bounces in direction of paddle movement
 8020e20:	00002206 	br	8020eac <update_ball.3022+0x690>
						rect[i].yspeed*=-1;
				}
				else { // Goal - player 2 scored
					// Reset ball position
					rect[i].x = BALL_XDEFAULT;
 8020e24:	e0bff617 	ldw	r2,-40(fp)
 8020e28:	01400704 	movi	r5,28
 8020e2c:	1009883a 	mov	r4,r2
 8020e30:	80214e80 	call	80214e8 <__mulsi3>
 8020e34:	1007883a 	mov	r3,r2
 8020e38:	e0bff817 	ldw	r2,-32(fp)
 8020e3c:	10c5883a 	add	r2,r2,r3
 8020e40:	00c02804 	movi	r3,160
 8020e44:	10c00015 	stw	r3,0(r2)
					rect[i].xspeed*=-1;
 8020e48:	e0bff617 	ldw	r2,-40(fp)
 8020e4c:	01400704 	movi	r5,28
 8020e50:	1009883a 	mov	r4,r2
 8020e54:	80214e80 	call	80214e8 <__mulsi3>
 8020e58:	1007883a 	mov	r3,r2
 8020e5c:	e0bff817 	ldw	r2,-32(fp)
 8020e60:	10e1883a 	add	r16,r2,r3
 8020e64:	e0bff617 	ldw	r2,-40(fp)
 8020e68:	01400704 	movi	r5,28
 8020e6c:	1009883a 	mov	r4,r2
 8020e70:	80214e80 	call	80214e8 <__mulsi3>
 8020e74:	1007883a 	mov	r3,r2
 8020e78:	e0bff817 	ldw	r2,-32(fp)
 8020e7c:	10c5883a 	add	r2,r2,r3
 8020e80:	10800217 	ldw	r2,8(r2)
 8020e84:	0085c83a 	sub	r2,zero,r2
 8020e88:	80800215 	stw	r2,8(r16)
					// Add 1 to right player's score
					scores[1] += 1;
 8020e8c:	e0bffa17 	ldw	r2,-24(fp)
 8020e90:	10800104 	addi	r2,r2,4
 8020e94:	e0fffa17 	ldw	r3,-24(fp)
 8020e98:	18c00104 	addi	r3,r3,4
 8020e9c:	18c00017 	ldw	r3,0(r3)
 8020ea0:	18c00044 	addi	r3,r3,1
 8020ea4:	10c00015 	stw	r3,0(r2)
					scores[0] += 1;
				}
			}
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8020ea8:	00005b06 	br	8021018 <update_ball.3022+0x7fc>
					rect[i].x = paddles[0].x + paddles[0].width;
					rect[i].xspeed*=-1; //Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[0].yspeed) && paddles[0].yspeed!=0) // Ball bounces in direction of paddle movement
 8020eac:	0001883a 	nop
					scores[0] += 1;
				}
			}
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8020eb0:	00005906 	br	8021018 <update_ball.3022+0x7fc>
					rect[i].xspeed*=-1;
					// Add 1 to right player's score
					scores[1] += 1;
				}
			}
			else if (rect[i].y + rect[i].height >= SCREEN_HEIGHT) {
 8020eb4:	e0bff617 	ldw	r2,-40(fp)
 8020eb8:	01400704 	movi	r5,28
 8020ebc:	1009883a 	mov	r4,r2
 8020ec0:	80214e80 	call	80214e8 <__mulsi3>
 8020ec4:	1007883a 	mov	r3,r2
 8020ec8:	e0bff817 	ldw	r2,-32(fp)
 8020ecc:	10c5883a 	add	r2,r2,r3
 8020ed0:	14000117 	ldw	r16,4(r2)
 8020ed4:	e0bff617 	ldw	r2,-40(fp)
 8020ed8:	01400704 	movi	r5,28
 8020edc:	1009883a 	mov	r4,r2
 8020ee0:	80214e80 	call	80214e8 <__mulsi3>
 8020ee4:	1007883a 	mov	r3,r2
 8020ee8:	e0bff817 	ldw	r2,-32(fp)
 8020eec:	10c5883a 	add	r2,r2,r3
 8020ef0:	10800517 	ldw	r2,20(r2)
 8020ef4:	8085883a 	add	r2,r16,r2
 8020ef8:	10803c10 	cmplti	r2,r2,240
 8020efc:	1000241e 	bne	r2,zero,8020f90 <update_ball.3022+0x774>
				rect[i].y = SCREEN_HEIGHT - rect[i].height;
 8020f00:	e0bff617 	ldw	r2,-40(fp)
 8020f04:	01400704 	movi	r5,28
 8020f08:	1009883a 	mov	r4,r2
 8020f0c:	80214e80 	call	80214e8 <__mulsi3>
 8020f10:	1007883a 	mov	r3,r2
 8020f14:	e0bff817 	ldw	r2,-32(fp)
 8020f18:	10e1883a 	add	r16,r2,r3
 8020f1c:	e0bff617 	ldw	r2,-40(fp)
 8020f20:	01400704 	movi	r5,28
 8020f24:	1009883a 	mov	r4,r2
 8020f28:	80214e80 	call	80214e8 <__mulsi3>
 8020f2c:	1007883a 	mov	r3,r2
 8020f30:	e0bff817 	ldw	r2,-32(fp)
 8020f34:	10c5883a 	add	r2,r2,r3
 8020f38:	10800517 	ldw	r2,20(r2)
 8020f3c:	00c03c04 	movi	r3,240
 8020f40:	1885c83a 	sub	r2,r3,r2
 8020f44:	80800115 	stw	r2,4(r16)
				rect[i].yspeed *= -1;
 8020f48:	e0bff617 	ldw	r2,-40(fp)
 8020f4c:	01400704 	movi	r5,28
 8020f50:	1009883a 	mov	r4,r2
 8020f54:	80214e80 	call	80214e8 <__mulsi3>
 8020f58:	1007883a 	mov	r3,r2
 8020f5c:	e0bff817 	ldw	r2,-32(fp)
 8020f60:	10e1883a 	add	r16,r2,r3
 8020f64:	e0bff617 	ldw	r2,-40(fp)
 8020f68:	01400704 	movi	r5,28
 8020f6c:	1009883a 	mov	r4,r2
 8020f70:	80214e80 	call	80214e8 <__mulsi3>
 8020f74:	1007883a 	mov	r3,r2
 8020f78:	e0bff817 	ldw	r2,-32(fp)
 8020f7c:	10c5883a 	add	r2,r2,r3
 8020f80:	10800317 	ldw	r2,12(r2)
 8020f84:	0085c83a 	sub	r2,zero,r2
 8020f88:	80800315 	stw	r2,12(r16)
 8020f8c:	00002206 	br	8021018 <update_ball.3022+0x7fc>
			}
			else if (rect[i].y <= 0) {
 8020f90:	e0bff617 	ldw	r2,-40(fp)
 8020f94:	01400704 	movi	r5,28
 8020f98:	1009883a 	mov	r4,r2
 8020f9c:	80214e80 	call	80214e8 <__mulsi3>
 8020fa0:	1007883a 	mov	r3,r2
 8020fa4:	e0bff817 	ldw	r2,-32(fp)
 8020fa8:	10c5883a 	add	r2,r2,r3
 8020fac:	10800117 	ldw	r2,4(r2)
 8020fb0:	00801916 	blt	zero,r2,8021018 <update_ball.3022+0x7fc>
				rect[i].y = 0;
 8020fb4:	e0bff617 	ldw	r2,-40(fp)
 8020fb8:	01400704 	movi	r5,28
 8020fbc:	1009883a 	mov	r4,r2
 8020fc0:	80214e80 	call	80214e8 <__mulsi3>
 8020fc4:	1007883a 	mov	r3,r2
 8020fc8:	e0bff817 	ldw	r2,-32(fp)
 8020fcc:	10c5883a 	add	r2,r2,r3
 8020fd0:	10000115 	stw	zero,4(r2)
				rect[i].yspeed *= -1;
 8020fd4:	e0bff617 	ldw	r2,-40(fp)
 8020fd8:	01400704 	movi	r5,28
 8020fdc:	1009883a 	mov	r4,r2
 8020fe0:	80214e80 	call	80214e8 <__mulsi3>
 8020fe4:	1007883a 	mov	r3,r2
 8020fe8:	e0bff817 	ldw	r2,-32(fp)
 8020fec:	10e1883a 	add	r16,r2,r3
 8020ff0:	e0bff617 	ldw	r2,-40(fp)
 8020ff4:	01400704 	movi	r5,28
 8020ff8:	1009883a 	mov	r4,r2
 8020ffc:	80214e80 	call	80214e8 <__mulsi3>
 8021000:	1007883a 	mov	r3,r2
 8021004:	e0bff817 	ldw	r2,-32(fp)
 8021008:	10c5883a 	add	r2,r2,r3
 802100c:	10800317 	ldw	r2,12(r2)
 8021010:	0085c83a 	sub	r2,zero,r2
 8021014:	80800315 	stw	r2,12(r16)
	void update_ball(Game* game) {
		int rect_len = (game -> balls_len);
		Rectangle* rect = (game -> balls);
		Rectangle* paddles = (game -> paddles);
		int* scores = (game -> scores);
		for(int i = 0; i< rect_len; i++) {
 8021018:	e0bff617 	ldw	r2,-40(fp)
 802101c:	10800044 	addi	r2,r2,1
 8021020:	e0bff615 	stw	r2,-40(fp)
 8021024:	e0fff617 	ldw	r3,-40(fp)
 8021028:	e0bff717 	ldw	r2,-36(fp)
 802102c:	18be1316 	blt	r3,r2,802087c <__alt_data_end+0xfffe147c>
			else if (rect[i].y <= 0) {
				rect[i].y = 0;
				rect[i].yspeed *= -1;
			}
		}
	}
 8021030:	0001883a 	nop
 8021034:	e6fffd04 	addi	sp,fp,-12
 8021038:	dfc00417 	ldw	ra,16(sp)
 802103c:	df000317 	ldw	fp,12(sp)
 8021040:	dc800217 	ldw	r18,8(sp)
 8021044:	dc400117 	ldw	r17,4(sp)
 8021048:	dc000017 	ldw	r16,0(sp)
 802104c:	dec00504 	addi	sp,sp,20
 8021050:	f800283a 	ret

08021054 <clear.3035>:
	void clear(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, alt_up_char_buffer_dev * char_buf_dev,int buffer) {
 8021054:	defffa04 	addi	sp,sp,-24
 8021058:	dfc00515 	stw	ra,20(sp)
 802105c:	df000415 	stw	fp,16(sp)
 8021060:	df000404 	addi	fp,sp,16
 8021064:	e13ffc15 	stw	r4,-16(fp)
 8021068:	e17ffd15 	stw	r5,-12(fp)
 802106c:	e1bffe15 	stw	r6,-8(fp)
 8021070:	e33fff15 	stw	r12,-4(fp)
		// Clear the screen
		alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
 8021074:	e17ffe17 	ldw	r5,-8(fp)
 8021078:	e13ffc17 	ldw	r4,-16(fp)
 802107c:	802fe4c0 	call	802fe4c <alt_up_pixel_buffer_dma_clear_screen>
		alt_up_char_buffer_clear(char_buf_dev);
 8021080:	e13ffd17 	ldw	r4,-12(fp)
 8021084:	802fb1c0 	call	802fb1c <alt_up_char_buffer_clear>
	}
 8021088:	0001883a 	nop
 802108c:	e037883a 	mov	sp,fp
 8021090:	dfc00117 	ldw	ra,4(sp)
 8021094:	df000017 	ldw	fp,0(sp)
 8021098:	dec00204 	addi	sp,sp,8
 802109c:	f800283a 	ret

080210a0 <draw.3042>:
	// Renders game components on the screen
	void draw(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer, Rectangle rect[], int len) {
 80210a0:	defff104 	addi	sp,sp,-60
 80210a4:	dfc00e15 	stw	ra,56(sp)
 80210a8:	df000d15 	stw	fp,52(sp)
 80210ac:	dcc00c15 	stw	r19,48(sp)
 80210b0:	dc800b15 	stw	r18,44(sp)
 80210b4:	dc400a15 	stw	r17,40(sp)
 80210b8:	dc000915 	stw	r16,36(sp)
 80210bc:	df000d04 	addi	fp,sp,52
 80210c0:	e13ff715 	stw	r4,-36(fp)
 80210c4:	e17ff815 	stw	r5,-32(fp)
 80210c8:	e1bff915 	stw	r6,-28(fp)
 80210cc:	e1fffa15 	stw	r7,-24(fp)
 80210d0:	e33ffb15 	stw	r12,-20(fp)
		// Draw each rectangle
		for(int i = 0; i<len; i++) {
 80210d4:	e03ff615 	stw	zero,-40(fp)
 80210d8:	00004106 	br	80211e0 <draw.3042+0x140>
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80210dc:	e0bff617 	ldw	r2,-40(fp)
 80210e0:	01400704 	movi	r5,28
 80210e4:	1009883a 	mov	r4,r2
 80210e8:	80214e80 	call	80214e8 <__mulsi3>
 80210ec:	1007883a 	mov	r3,r2
 80210f0:	e0bffa17 	ldw	r2,-24(fp)
 80210f4:	10c5883a 	add	r2,r2,r3
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 80210f8:	14400017 	ldw	r17,0(r2)
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80210fc:	e0bff617 	ldw	r2,-40(fp)
 8021100:	01400704 	movi	r5,28
 8021104:	1009883a 	mov	r4,r2
 8021108:	80214e80 	call	80214e8 <__mulsi3>
 802110c:	1007883a 	mov	r3,r2
 8021110:	e0bffa17 	ldw	r2,-24(fp)
 8021114:	10c5883a 	add	r2,r2,r3
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8021118:	14800117 	ldw	r18,4(r2)
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 802111c:	e0bff617 	ldw	r2,-40(fp)
 8021120:	01400704 	movi	r5,28
 8021124:	1009883a 	mov	r4,r2
 8021128:	80214e80 	call	80214e8 <__mulsi3>
 802112c:	1007883a 	mov	r3,r2
 8021130:	e0bffa17 	ldw	r2,-24(fp)
 8021134:	10c5883a 	add	r2,r2,r3
 8021138:	14000017 	ldw	r16,0(r2)
 802113c:	e0bff617 	ldw	r2,-40(fp)
 8021140:	01400704 	movi	r5,28
 8021144:	1009883a 	mov	r4,r2
 8021148:	80214e80 	call	80214e8 <__mulsi3>
 802114c:	1007883a 	mov	r3,r2
 8021150:	e0bffa17 	ldw	r2,-24(fp)
 8021154:	10c5883a 	add	r2,r2,r3
 8021158:	10800417 	ldw	r2,16(r2)
 802115c:	8085883a 	add	r2,r16,r2
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8021160:	14ffffc4 	addi	r19,r2,-1
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
					rect[i].y + rect[i].height - 1,
 8021164:	e0bff617 	ldw	r2,-40(fp)
 8021168:	01400704 	movi	r5,28
 802116c:	1009883a 	mov	r4,r2
 8021170:	80214e80 	call	80214e8 <__mulsi3>
 8021174:	1007883a 	mov	r3,r2
 8021178:	e0bffa17 	ldw	r2,-24(fp)
 802117c:	10c5883a 	add	r2,r2,r3
 8021180:	14000117 	ldw	r16,4(r2)
 8021184:	e0bff617 	ldw	r2,-40(fp)
 8021188:	01400704 	movi	r5,28
 802118c:	1009883a 	mov	r4,r2
 8021190:	80214e80 	call	80214e8 <__mulsi3>
 8021194:	1007883a 	mov	r3,r2
 8021198:	e0bffa17 	ldw	r2,-24(fp)
 802119c:	10c5883a 	add	r2,r2,r3
 80211a0:	10800517 	ldw	r2,20(r2)
 80211a4:	8085883a 	add	r2,r16,r2
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 80211a8:	10bfffc4 	addi	r2,r2,-1
 80211ac:	e0fff917 	ldw	r3,-28(fp)
 80211b0:	d8c00215 	stw	r3,8(sp)
 80211b4:	e0fff817 	ldw	r3,-32(fp)
 80211b8:	d8c00115 	stw	r3,4(sp)
 80211bc:	d8800015 	stw	r2,0(sp)
 80211c0:	980f883a 	mov	r7,r19
 80211c4:	900d883a 	mov	r6,r18
 80211c8:	880b883a 	mov	r5,r17
 80211cc:	e13ff717 	ldw	r4,-36(fp)
 80211d0:	802ff880 	call	802ff88 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_char_buffer_clear(char_buf_dev);
	}
	// Renders game components on the screen
	void draw(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer, Rectangle rect[], int len) {
		// Draw each rectangle
		for(int i = 0; i<len; i++) {
 80211d4:	e0bff617 	ldw	r2,-40(fp)
 80211d8:	10800044 	addi	r2,r2,1
 80211dc:	e0bff615 	stw	r2,-40(fp)
 80211e0:	e0fff617 	ldw	r3,-40(fp)
 80211e4:	e0800217 	ldw	r2,8(fp)
 80211e8:	18bfbc16 	blt	r3,r2,80210dc <__alt_data_end+0xfffe1cdc>
			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
					rect[i].y + rect[i].height - 1,
					colour, buffer);
		}
	}
 80211ec:	0001883a 	nop
 80211f0:	e6fffc04 	addi	sp,fp,-16
 80211f4:	dfc00517 	ldw	ra,20(sp)
 80211f8:	df000417 	ldw	fp,16(sp)
 80211fc:	dcc00317 	ldw	r19,12(sp)
 8021200:	dc800217 	ldw	r18,8(sp)
 8021204:	dc400117 	ldw	r17,4(sp)
 8021208:	dc000017 	ldw	r16,0(sp)
 802120c:	dec00604 	addi	sp,sp,24
 8021210:	f800283a 	ret

08021214 <get_user_input.3049>:
	void get_user_input(int* user_input) {
 8021214:	defffb04 	addi	sp,sp,-20
 8021218:	df000415 	stw	fp,16(sp)
 802121c:	df000404 	addi	fp,sp,16
 8021220:	e13ffe15 	stw	r4,-8(fp)
 8021224:	e33fff15 	stw	r12,-4(fp)
		int SW = IORD(SW_BASE, 0);
 8021228:	00820134 	movhi	r2,2052
 802122c:	108c1404 	addi	r2,r2,12368
 8021230:	10800037 	ldwio	r2,0(r2)
 8021234:	e0bffd15 	stw	r2,-12(fp)
		for(int i = 0; i<8; i++) {
 8021238:	e03ffc15 	stw	zero,-16(fp)
 802123c:	00000f06 	br	802127c <get_user_input.3049+0x68>
			user_input[i] = (0b1 << i) & SW;
 8021240:	e0bffc17 	ldw	r2,-16(fp)
 8021244:	1085883a 	add	r2,r2,r2
 8021248:	1085883a 	add	r2,r2,r2
 802124c:	1007883a 	mov	r3,r2
 8021250:	e0bffe17 	ldw	r2,-8(fp)
 8021254:	10c5883a 	add	r2,r2,r3
 8021258:	01000044 	movi	r4,1
 802125c:	e0fffc17 	ldw	r3,-16(fp)
 8021260:	20c8983a 	sll	r4,r4,r3
 8021264:	e0fffd17 	ldw	r3,-12(fp)
 8021268:	20c6703a 	and	r3,r4,r3
 802126c:	10c00015 	stw	r3,0(r2)
					colour, buffer);
		}
	}
	void get_user_input(int* user_input) {
		int SW = IORD(SW_BASE, 0);
		for(int i = 0; i<8; i++) {
 8021270:	e0bffc17 	ldw	r2,-16(fp)
 8021274:	10800044 	addi	r2,r2,1
 8021278:	e0bffc15 	stw	r2,-16(fp)
 802127c:	e0bffc17 	ldw	r2,-16(fp)
 8021280:	10800210 	cmplti	r2,r2,8
 8021284:	103fee1e 	bne	r2,zero,8021240 <__alt_data_end+0xfffe1e40>
			user_input[i] = (0b1 << i) & SW;
		}
	}
 8021288:	0001883a 	nop
 802128c:	e037883a 	mov	sp,fp
 8021290:	df000017 	ldw	fp,0(sp)
 8021294:	dec00104 	addi	sp,sp,4
 8021298:	f800283a 	ret

0802129c <reset_game.3057>:
	void reset_game(Game* game) {
 802129c:	defffb04 	addi	sp,sp,-20
 80212a0:	dfc00415 	stw	ra,16(sp)
 80212a4:	df000315 	stw	fp,12(sp)
 80212a8:	df000304 	addi	fp,sp,12
 80212ac:	e13ffe15 	stw	r4,-8(fp)
 80212b0:	6007883a 	mov	r3,r12
 80212b4:	e33fff15 	stw	r12,-4(fp)
		// Reset score
		int* scores = game -> scores;
 80212b8:	e0bffe17 	ldw	r2,-8(fp)
 80212bc:	10800204 	addi	r2,r2,8
 80212c0:	e0bffd15 	stw	r2,-12(fp)
		scores[0] = 0;
 80212c4:	e0bffd17 	ldw	r2,-12(fp)
 80212c8:	10000015 	stw	zero,0(r2)
		scores[1] = 0;
 80212cc:	e0bffd17 	ldw	r2,-12(fp)
 80212d0:	10800104 	addi	r2,r2,4
 80212d4:	10000015 	stw	zero,0(r2)
		// Reset game time
		game -> time = 0;
 80212d8:	e0bffe17 	ldw	r2,-8(fp)
 80212dc:	10002315 	stw	zero,140(r2)
		sprintf(time_str, "Time: %u", game->time);
 80212e0:	18c02404 	addi	r3,r3,144
 80212e4:	e0bffe17 	ldw	r2,-8(fp)
 80212e8:	10802317 	ldw	r2,140(r2)
 80212ec:	100d883a 	mov	r6,r2
 80212f0:	014200f4 	movhi	r5,2051
 80212f4:	2946d704 	addi	r5,r5,7004
 80212f8:	1809883a 	mov	r4,r3
 80212fc:	80218100 	call	8021810 <sprintf>
	}
 8021300:	0001883a 	nop
 8021304:	e037883a 	mov	sp,fp
 8021308:	dfc00117 	ldw	ra,4(sp)
 802130c:	df000017 	ldw	fp,0(sp)
 8021310:	dec00204 	addi	sp,sp,8
 8021314:	f800283a 	ret

08021318 <check_win.3061>:
	int check_win(Game* game) {
 8021318:	defffb04 	addi	sp,sp,-20
 802131c:	dfc00415 	stw	ra,16(sp)
 8021320:	df000315 	stw	fp,12(sp)
 8021324:	df000304 	addi	fp,sp,12
 8021328:	e13ffe15 	stw	r4,-8(fp)
 802132c:	6007883a 	mov	r3,r12
 8021330:	e33fff15 	stw	r12,-4(fp)
		int* scores = game->scores;
 8021334:	e0bffe17 	ldw	r2,-8(fp)
 8021338:	10800204 	addi	r2,r2,8
 802133c:	e0bffd15 	stw	r2,-12(fp)
		if(scores[0]>=MAX_SCORE || scores[1]>=MAX_SCORE){
 8021340:	e0bffd17 	ldw	r2,-12(fp)
 8021344:	10800017 	ldw	r2,0(r2)
 8021348:	10801148 	cmpgei	r2,r2,69
 802134c:	1000051e 	bne	r2,zero,8021364 <check_win.3061+0x4c>
 8021350:	e0bffd17 	ldw	r2,-12(fp)
 8021354:	10800104 	addi	r2,r2,4
 8021358:	10800017 	ldw	r2,0(r2)
 802135c:	10801150 	cmplti	r2,r2,69
 8021360:	1000051e 	bne	r2,zero,8021378 <check_win.3061+0x60>
			reset_game(game);
 8021364:	1819883a 	mov	r12,r3
 8021368:	e13ffe17 	ldw	r4,-8(fp)
 802136c:	802129c0 	call	802129c <reset_game.3057>
			return 1;
 8021370:	00800044 	movi	r2,1
 8021374:	00000106 	br	802137c <check_win.3061+0x64>
		}
		return 0;
 8021378:	0005883a 	mov	r2,zero

	}
 802137c:	e037883a 	mov	sp,fp
 8021380:	dfc00117 	ldw	ra,4(sp)
 8021384:	df000017 	ldw	fp,0(sp)
 8021388:	dec00204 	addi	sp,sp,8
 802138c:	f800283a 	ret

08021390 <run_game_tick.3068>:
	void run_game_tick(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, alt_up_char_buffer_dev * char_buf_dev, int buffer, Game* game) {
 8021390:	defff404 	addi	sp,sp,-48
 8021394:	dfc00b15 	stw	ra,44(sp)
 8021398:	df000a15 	stw	fp,40(sp)
 802139c:	dc000915 	stw	r16,36(sp)
 80213a0:	df000a04 	addi	fp,sp,40
 80213a4:	e13ffa15 	stw	r4,-24(fp)
 80213a8:	e17ffb15 	stw	r5,-20(fp)
 80213ac:	e1bffc15 	stw	r6,-16(fp)
 80213b0:	e1fffd15 	stw	r7,-12(fp)
 80213b4:	6021883a 	mov	r16,r12
 80213b8:	e33ffe15 	stw	r12,-8(fp)
		// Check for winner
		if(check_win(game)) {
 80213bc:	8019883a 	mov	r12,r16
 80213c0:	e13ffd17 	ldw	r4,-12(fp)
 80213c4:	80213180 	call	8021318 <check_win.3061>
 80213c8:	10000526 	beq	r2,zero,80213e0 <run_game_tick.3068+0x50>
			clear(pixel_buf_dma_dev, char_buf_dev,0);
 80213cc:	8019883a 	mov	r12,r16
 80213d0:	000d883a 	mov	r6,zero
 80213d4:	e17ffb17 	ldw	r5,-20(fp)
 80213d8:	e13ffa17 	ldw	r4,-24(fp)
 80213dc:	80210540 	call	8021054 <clear.3035>
		}
		int* user_input = (game -> user_input);
 80213e0:	e0bffd17 	ldw	r2,-12(fp)
 80213e4:	10801b04 	addi	r2,r2,108
 80213e8:	e0bff715 	stw	r2,-36(fp)
		Rectangle* balls = (game -> balls);
 80213ec:	e0bffd17 	ldw	r2,-12(fp)
 80213f0:	10800604 	addi	r2,r2,24
 80213f4:	e0bff815 	stw	r2,-32(fp)
		Rectangle* paddles = (game -> paddles);
 80213f8:	e0bffd17 	ldw	r2,-12(fp)
 80213fc:	10800d04 	addi	r2,r2,52
 8021400:	e0bff915 	stw	r2,-28(fp)
		// Wait for screen refresh
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dma_dev);
 8021404:	e13ffa17 	ldw	r4,-24(fp)
 8021408:	802fdb80 	call	802fdb8 <alt_up_pixel_buffer_dma_swap_buffers>
		while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dma_dev));
 802140c:	0001883a 	nop
 8021410:	e13ffa17 	ldw	r4,-24(fp)
 8021414:	802fe180 	call	802fe18 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 8021418:	103ffd1e 	bne	r2,zero,8021410 <__alt_data_end+0xfffe2010>

		get_user_input(user_input);
 802141c:	8019883a 	mov	r12,r16
 8021420:	e13ff717 	ldw	r4,-36(fp)
 8021424:	80212140 	call	8021214 <get_user_input.3049>
		// Cleanup - erase old objects
		draw(pixel_buf_dma_dev, BACKGROUND_COLOUR,buffer, balls, NUM_BALLS);
 8021428:	00800044 	movi	r2,1
 802142c:	d8800015 	stw	r2,0(sp)
 8021430:	8019883a 	mov	r12,r16
 8021434:	e1fff817 	ldw	r7,-32(fp)
 8021438:	e1bffc17 	ldw	r6,-16(fp)
 802143c:	000b883a 	mov	r5,zero
 8021440:	e13ffa17 	ldw	r4,-24(fp)
 8021444:	80210a00 	call	80210a0 <draw.3042>
		draw(pixel_buf_dma_dev, BACKGROUND_COLOUR, buffer, paddles, NUM_PADDLES);
 8021448:	00800084 	movi	r2,2
 802144c:	d8800015 	stw	r2,0(sp)
 8021450:	8019883a 	mov	r12,r16
 8021454:	e1fff917 	ldw	r7,-28(fp)
 8021458:	e1bffc17 	ldw	r6,-16(fp)
 802145c:	000b883a 	mov	r5,zero
 8021460:	e13ffa17 	ldw	r4,-24(fp)
 8021464:	80210a00 	call	80210a0 <draw.3042>
		// Game logic
		cheat_code(game); // Checks for cheat code input
 8021468:	8019883a 	mov	r12,r16
 802146c:	e13ffd17 	ldw	r4,-12(fp)
 8021470:	80204880 	call	8020488 <cheat_code.3002>
		update_ball(game);
 8021474:	8019883a 	mov	r12,r16
 8021478:	e13ffd17 	ldw	r4,-12(fp)
 802147c:	802081c0 	call	802081c <update_ball.3022>
		update_paddle(game);
 8021480:	8019883a 	mov	r12,r16
 8021484:	e13ffd17 	ldw	r4,-12(fp)
 8021488:	80205500 	call	8020550 <update_paddle.3007>
		// Render the screen
		draw(pixel_buf_dma_dev, BALL_COLOUR, buffer, balls, NUM_BALLS);
 802148c:	00800044 	movi	r2,1
 8021490:	d8800015 	stw	r2,0(sp)
 8021494:	8019883a 	mov	r12,r16
 8021498:	e1fff817 	ldw	r7,-32(fp)
 802149c:	e1bffc17 	ldw	r6,-16(fp)
 80214a0:	017fffd4 	movui	r5,65535
 80214a4:	e13ffa17 	ldw	r4,-24(fp)
 80214a8:	80210a00 	call	80210a0 <draw.3042>
		draw(pixel_buf_dma_dev, PADDLE_COLOUR, buffer, paddles, NUM_PADDLES);
 80214ac:	00800084 	movi	r2,2
 80214b0:	d8800015 	stw	r2,0(sp)
 80214b4:	8019883a 	mov	r12,r16
 80214b8:	e1fff917 	ldw	r7,-28(fp)
 80214bc:	e1bffc17 	ldw	r6,-16(fp)
 80214c0:	017fffd4 	movui	r5,65535
 80214c4:	e13ffa17 	ldw	r4,-24(fp)
 80214c8:	80210a00 	call	80210a0 <draw.3042>
	}
 80214cc:	0001883a 	nop
 80214d0:	e6ffff04 	addi	sp,fp,-4
 80214d4:	dfc00217 	ldw	ra,8(sp)
 80214d8:	df000117 	ldw	fp,4(sp)
 80214dc:	dc000017 	ldw	r16,0(sp)
 80214e0:	dec00304 	addi	sp,sp,12
 80214e4:	f800283a 	ret

080214e8 <__mulsi3>:
 80214e8:	0005883a 	mov	r2,zero
 80214ec:	20000726 	beq	r4,zero,802150c <__mulsi3+0x24>
 80214f0:	20c0004c 	andi	r3,r4,1
 80214f4:	2008d07a 	srli	r4,r4,1
 80214f8:	18000126 	beq	r3,zero,8021500 <__mulsi3+0x18>
 80214fc:	1145883a 	add	r2,r2,r5
 8021500:	294b883a 	add	r5,r5,r5
 8021504:	203ffa1e 	bne	r4,zero,80214f0 <__alt_data_end+0xfffe20f0>
 8021508:	f800283a 	ret
 802150c:	f800283a 	ret

08021510 <__trampoline_setup>:
 8021510:	300ed43a 	srli	r7,r6,16
 8021514:	2806d43a 	srli	r3,r5,16
 8021518:	31bfffcc 	andi	r6,r6,65535
 802151c:	380e91ba 	slli	r7,r7,6
 8021520:	0080c034 	movhi	r2,768
 8021524:	10800d04 	addi	r2,r2,52
 8021528:	300c91ba 	slli	r6,r6,6
 802152c:	388eb03a 	or	r7,r7,r2
 8021530:	0098c034 	movhi	r2,25344
 8021534:	10800504 	addi	r2,r2,20
 8021538:	180691ba 	slli	r3,r3,6
 802153c:	308cb03a 	or	r6,r6,r2
 8021540:	297fffcc 	andi	r5,r5,65535
 8021544:	00802034 	movhi	r2,128
 8021548:	10800d04 	addi	r2,r2,52
 802154c:	280a91ba 	slli	r5,r5,6
 8021550:	1886b03a 	or	r3,r3,r2
 8021554:	00842034 	movhi	r2,4224
 8021558:	10800504 	addi	r2,r2,20
 802155c:	20c00215 	stw	r3,8(r4)
 8021560:	00c40034 	movhi	r3,4096
 8021564:	288ab03a 	or	r5,r5,r2
 8021568:	18da0e84 	addi	r3,r3,26682
 802156c:	20c00415 	stw	r3,16(r4)
 8021570:	2005883a 	mov	r2,r4
 8021574:	21c00015 	stw	r7,0(r4)
 8021578:	21800115 	stw	r6,4(r4)
 802157c:	21400315 	stw	r5,12(r4)
 8021580:	20c00504 	addi	r3,r4,20
 8021584:	1000003b 	flushd	0(r2)
 8021588:	1000603a 	flushi	r2
 802158c:	10800104 	addi	r2,r2,4
 8021590:	10fffc1e 	bne	r2,r3,8021584 <__alt_data_end+0xfffe2184>
 8021594:	0000203a 	flushp
 8021598:	f800283a 	ret

0802159c <memcpy>:
 802159c:	defffd04 	addi	sp,sp,-12
 80215a0:	dfc00215 	stw	ra,8(sp)
 80215a4:	dc400115 	stw	r17,4(sp)
 80215a8:	dc000015 	stw	r16,0(sp)
 80215ac:	00c003c4 	movi	r3,15
 80215b0:	2005883a 	mov	r2,r4
 80215b4:	1980452e 	bgeu	r3,r6,80216cc <memcpy+0x130>
 80215b8:	2906b03a 	or	r3,r5,r4
 80215bc:	18c000cc 	andi	r3,r3,3
 80215c0:	1800441e 	bne	r3,zero,80216d4 <memcpy+0x138>
 80215c4:	347ffc04 	addi	r17,r6,-16
 80215c8:	8822d13a 	srli	r17,r17,4
 80215cc:	28c00104 	addi	r3,r5,4
 80215d0:	23400104 	addi	r13,r4,4
 80215d4:	8820913a 	slli	r16,r17,4
 80215d8:	2b000204 	addi	r12,r5,8
 80215dc:	22c00204 	addi	r11,r4,8
 80215e0:	84000504 	addi	r16,r16,20
 80215e4:	2a800304 	addi	r10,r5,12
 80215e8:	22400304 	addi	r9,r4,12
 80215ec:	2c21883a 	add	r16,r5,r16
 80215f0:	2811883a 	mov	r8,r5
 80215f4:	200f883a 	mov	r7,r4
 80215f8:	41000017 	ldw	r4,0(r8)
 80215fc:	1fc00017 	ldw	ra,0(r3)
 8021600:	63c00017 	ldw	r15,0(r12)
 8021604:	39000015 	stw	r4,0(r7)
 8021608:	53800017 	ldw	r14,0(r10)
 802160c:	6fc00015 	stw	ra,0(r13)
 8021610:	5bc00015 	stw	r15,0(r11)
 8021614:	4b800015 	stw	r14,0(r9)
 8021618:	18c00404 	addi	r3,r3,16
 802161c:	39c00404 	addi	r7,r7,16
 8021620:	42000404 	addi	r8,r8,16
 8021624:	6b400404 	addi	r13,r13,16
 8021628:	63000404 	addi	r12,r12,16
 802162c:	5ac00404 	addi	r11,r11,16
 8021630:	52800404 	addi	r10,r10,16
 8021634:	4a400404 	addi	r9,r9,16
 8021638:	1c3fef1e 	bne	r3,r16,80215f8 <__alt_data_end+0xfffe21f8>
 802163c:	89c00044 	addi	r7,r17,1
 8021640:	380e913a 	slli	r7,r7,4
 8021644:	310003cc 	andi	r4,r6,15
 8021648:	02c000c4 	movi	r11,3
 802164c:	11c7883a 	add	r3,r2,r7
 8021650:	29cb883a 	add	r5,r5,r7
 8021654:	5900212e 	bgeu	r11,r4,80216dc <memcpy+0x140>
 8021658:	1813883a 	mov	r9,r3
 802165c:	2811883a 	mov	r8,r5
 8021660:	200f883a 	mov	r7,r4
 8021664:	42800017 	ldw	r10,0(r8)
 8021668:	4a400104 	addi	r9,r9,4
 802166c:	39ffff04 	addi	r7,r7,-4
 8021670:	4abfff15 	stw	r10,-4(r9)
 8021674:	42000104 	addi	r8,r8,4
 8021678:	59fffa36 	bltu	r11,r7,8021664 <__alt_data_end+0xfffe2264>
 802167c:	213fff04 	addi	r4,r4,-4
 8021680:	2008d0ba 	srli	r4,r4,2
 8021684:	318000cc 	andi	r6,r6,3
 8021688:	21000044 	addi	r4,r4,1
 802168c:	2109883a 	add	r4,r4,r4
 8021690:	2109883a 	add	r4,r4,r4
 8021694:	1907883a 	add	r3,r3,r4
 8021698:	290b883a 	add	r5,r5,r4
 802169c:	30000626 	beq	r6,zero,80216b8 <memcpy+0x11c>
 80216a0:	198d883a 	add	r6,r3,r6
 80216a4:	29c00003 	ldbu	r7,0(r5)
 80216a8:	18c00044 	addi	r3,r3,1
 80216ac:	29400044 	addi	r5,r5,1
 80216b0:	19ffffc5 	stb	r7,-1(r3)
 80216b4:	19bffb1e 	bne	r3,r6,80216a4 <__alt_data_end+0xfffe22a4>
 80216b8:	dfc00217 	ldw	ra,8(sp)
 80216bc:	dc400117 	ldw	r17,4(sp)
 80216c0:	dc000017 	ldw	r16,0(sp)
 80216c4:	dec00304 	addi	sp,sp,12
 80216c8:	f800283a 	ret
 80216cc:	2007883a 	mov	r3,r4
 80216d0:	003ff206 	br	802169c <__alt_data_end+0xfffe229c>
 80216d4:	2007883a 	mov	r3,r4
 80216d8:	003ff106 	br	80216a0 <__alt_data_end+0xfffe22a0>
 80216dc:	200d883a 	mov	r6,r4
 80216e0:	003fee06 	br	802169c <__alt_data_end+0xfffe229c>

080216e4 <_puts_r>:
 80216e4:	defff604 	addi	sp,sp,-40
 80216e8:	dc000715 	stw	r16,28(sp)
 80216ec:	2021883a 	mov	r16,r4
 80216f0:	2809883a 	mov	r4,r5
 80216f4:	dc400815 	stw	r17,32(sp)
 80216f8:	dfc00915 	stw	ra,36(sp)
 80216fc:	2823883a 	mov	r17,r5
 8021700:	802187c0 	call	802187c <strlen>
 8021704:	10c00044 	addi	r3,r2,1
 8021708:	d8800115 	stw	r2,4(sp)
 802170c:	008200f4 	movhi	r2,2051
 8021710:	10873d04 	addi	r2,r2,7412
 8021714:	d8800215 	stw	r2,8(sp)
 8021718:	00800044 	movi	r2,1
 802171c:	d8800315 	stw	r2,12(sp)
 8021720:	00800084 	movi	r2,2
 8021724:	dc400015 	stw	r17,0(sp)
 8021728:	d8c00615 	stw	r3,24(sp)
 802172c:	dec00415 	stw	sp,16(sp)
 8021730:	d8800515 	stw	r2,20(sp)
 8021734:	80000226 	beq	r16,zero,8021740 <_puts_r+0x5c>
 8021738:	80800e17 	ldw	r2,56(r16)
 802173c:	10001426 	beq	r2,zero,8021790 <_puts_r+0xac>
 8021740:	81400217 	ldw	r5,8(r16)
 8021744:	2880030b 	ldhu	r2,12(r5)
 8021748:	10c8000c 	andi	r3,r2,8192
 802174c:	1800061e 	bne	r3,zero,8021768 <_puts_r+0x84>
 8021750:	29001917 	ldw	r4,100(r5)
 8021754:	00f7ffc4 	movi	r3,-8193
 8021758:	10880014 	ori	r2,r2,8192
 802175c:	20c6703a 	and	r3,r4,r3
 8021760:	2880030d 	sth	r2,12(r5)
 8021764:	28c01915 	stw	r3,100(r5)
 8021768:	d9800404 	addi	r6,sp,16
 802176c:	8009883a 	mov	r4,r16
 8021770:	80258300 	call	8025830 <__sfvwrite_r>
 8021774:	1000091e 	bne	r2,zero,802179c <_puts_r+0xb8>
 8021778:	00800284 	movi	r2,10
 802177c:	dfc00917 	ldw	ra,36(sp)
 8021780:	dc400817 	ldw	r17,32(sp)
 8021784:	dc000717 	ldw	r16,28(sp)
 8021788:	dec00a04 	addi	sp,sp,40
 802178c:	f800283a 	ret
 8021790:	8009883a 	mov	r4,r16
 8021794:	80257e00 	call	80257e0 <__sinit>
 8021798:	003fe906 	br	8021740 <__alt_data_end+0xfffe2340>
 802179c:	00bfffc4 	movi	r2,-1
 80217a0:	003ff606 	br	802177c <__alt_data_end+0xfffe237c>

080217a4 <puts>:
 80217a4:	008200f4 	movhi	r2,2051
 80217a8:	108eef04 	addi	r2,r2,15292
 80217ac:	200b883a 	mov	r5,r4
 80217b0:	11000017 	ldw	r4,0(r2)
 80217b4:	80216e41 	jmpi	80216e4 <_puts_r>

080217b8 <_sprintf_r>:
 80217b8:	deffe404 	addi	sp,sp,-112
 80217bc:	2807883a 	mov	r3,r5
 80217c0:	dfc01a15 	stw	ra,104(sp)
 80217c4:	d9c01b15 	stw	r7,108(sp)
 80217c8:	00a00034 	movhi	r2,32768
 80217cc:	10bfffc4 	addi	r2,r2,-1
 80217d0:	02008204 	movi	r8,520
 80217d4:	d8800215 	stw	r2,8(sp)
 80217d8:	d8800515 	stw	r2,20(sp)
 80217dc:	d9c01b04 	addi	r7,sp,108
 80217e0:	d80b883a 	mov	r5,sp
 80217e4:	00bfffc4 	movi	r2,-1
 80217e8:	d8c00015 	stw	r3,0(sp)
 80217ec:	d8c00415 	stw	r3,16(sp)
 80217f0:	da00030d 	sth	r8,12(sp)
 80217f4:	d880038d 	sth	r2,14(sp)
 80217f8:	80219140 	call	8021914 <___svfprintf_internal_r>
 80217fc:	d8c00017 	ldw	r3,0(sp)
 8021800:	18000005 	stb	zero,0(r3)
 8021804:	dfc01a17 	ldw	ra,104(sp)
 8021808:	dec01c04 	addi	sp,sp,112
 802180c:	f800283a 	ret

08021810 <sprintf>:
 8021810:	deffe304 	addi	sp,sp,-116
 8021814:	2007883a 	mov	r3,r4
 8021818:	dfc01a15 	stw	ra,104(sp)
 802181c:	d9801b15 	stw	r6,108(sp)
 8021820:	d9c01c15 	stw	r7,112(sp)
 8021824:	010200f4 	movhi	r4,2051
 8021828:	210eef04 	addi	r4,r4,15292
 802182c:	21000017 	ldw	r4,0(r4)
 8021830:	00a00034 	movhi	r2,32768
 8021834:	10bfffc4 	addi	r2,r2,-1
 8021838:	280d883a 	mov	r6,r5
 802183c:	02008204 	movi	r8,520
 8021840:	d8800215 	stw	r2,8(sp)
 8021844:	d8800515 	stw	r2,20(sp)
 8021848:	d9c01b04 	addi	r7,sp,108
 802184c:	d80b883a 	mov	r5,sp
 8021850:	00bfffc4 	movi	r2,-1
 8021854:	d8c00015 	stw	r3,0(sp)
 8021858:	d8c00415 	stw	r3,16(sp)
 802185c:	da00030d 	sth	r8,12(sp)
 8021860:	d880038d 	sth	r2,14(sp)
 8021864:	80219140 	call	8021914 <___svfprintf_internal_r>
 8021868:	d8c00017 	ldw	r3,0(sp)
 802186c:	18000005 	stb	zero,0(r3)
 8021870:	dfc01a17 	ldw	ra,104(sp)
 8021874:	dec01d04 	addi	sp,sp,116
 8021878:	f800283a 	ret

0802187c <strlen>:
 802187c:	208000cc 	andi	r2,r4,3
 8021880:	10002026 	beq	r2,zero,8021904 <strlen+0x88>
 8021884:	20800007 	ldb	r2,0(r4)
 8021888:	10002026 	beq	r2,zero,802190c <strlen+0x90>
 802188c:	2005883a 	mov	r2,r4
 8021890:	00000206 	br	802189c <strlen+0x20>
 8021894:	10c00007 	ldb	r3,0(r2)
 8021898:	18001826 	beq	r3,zero,80218fc <strlen+0x80>
 802189c:	10800044 	addi	r2,r2,1
 80218a0:	10c000cc 	andi	r3,r2,3
 80218a4:	183ffb1e 	bne	r3,zero,8021894 <__alt_data_end+0xfffe2494>
 80218a8:	10c00017 	ldw	r3,0(r2)
 80218ac:	01ffbff4 	movhi	r7,65279
 80218b0:	39ffbfc4 	addi	r7,r7,-257
 80218b4:	00ca303a 	nor	r5,zero,r3
 80218b8:	01a02074 	movhi	r6,32897
 80218bc:	19c7883a 	add	r3,r3,r7
 80218c0:	31a02004 	addi	r6,r6,-32640
 80218c4:	1946703a 	and	r3,r3,r5
 80218c8:	1986703a 	and	r3,r3,r6
 80218cc:	1800091e 	bne	r3,zero,80218f4 <strlen+0x78>
 80218d0:	10800104 	addi	r2,r2,4
 80218d4:	10c00017 	ldw	r3,0(r2)
 80218d8:	19cb883a 	add	r5,r3,r7
 80218dc:	00c6303a 	nor	r3,zero,r3
 80218e0:	28c6703a 	and	r3,r5,r3
 80218e4:	1986703a 	and	r3,r3,r6
 80218e8:	183ff926 	beq	r3,zero,80218d0 <__alt_data_end+0xfffe24d0>
 80218ec:	00000106 	br	80218f4 <strlen+0x78>
 80218f0:	10800044 	addi	r2,r2,1
 80218f4:	10c00007 	ldb	r3,0(r2)
 80218f8:	183ffd1e 	bne	r3,zero,80218f0 <__alt_data_end+0xfffe24f0>
 80218fc:	1105c83a 	sub	r2,r2,r4
 8021900:	f800283a 	ret
 8021904:	2005883a 	mov	r2,r4
 8021908:	003fe706 	br	80218a8 <__alt_data_end+0xfffe24a8>
 802190c:	0005883a 	mov	r2,zero
 8021910:	f800283a 	ret

08021914 <___svfprintf_internal_r>:
 8021914:	deffb704 	addi	sp,sp,-292
 8021918:	dfc04815 	stw	ra,288(sp)
 802191c:	ddc04615 	stw	r23,280(sp)
 8021920:	d9402d15 	stw	r5,180(sp)
 8021924:	d9003915 	stw	r4,228(sp)
 8021928:	302f883a 	mov	r23,r6
 802192c:	d9c02e15 	stw	r7,184(sp)
 8021930:	df004715 	stw	fp,284(sp)
 8021934:	dd804515 	stw	r22,276(sp)
 8021938:	dd404415 	stw	r21,272(sp)
 802193c:	dd004315 	stw	r20,268(sp)
 8021940:	dcc04215 	stw	r19,264(sp)
 8021944:	dc804115 	stw	r18,260(sp)
 8021948:	dc404015 	stw	r17,256(sp)
 802194c:	dc003f15 	stw	r16,252(sp)
 8021950:	8025f2c0 	call	8025f2c <_localeconv_r>
 8021954:	10800017 	ldw	r2,0(r2)
 8021958:	1009883a 	mov	r4,r2
 802195c:	d8803415 	stw	r2,208(sp)
 8021960:	802187c0 	call	802187c <strlen>
 8021964:	d8c02d17 	ldw	r3,180(sp)
 8021968:	d8803815 	stw	r2,224(sp)
 802196c:	1880030b 	ldhu	r2,12(r3)
 8021970:	1080200c 	andi	r2,r2,128
 8021974:	10000226 	beq	r2,zero,8021980 <___svfprintf_internal_r+0x6c>
 8021978:	18800417 	ldw	r2,16(r3)
 802197c:	1006b126 	beq	r2,zero,8023444 <___svfprintf_internal_r+0x1b30>
 8021980:	dcc03917 	ldw	r19,228(sp)
 8021984:	d8c00404 	addi	r3,sp,16
 8021988:	054200f4 	movhi	r21,2051
 802198c:	d9001e04 	addi	r4,sp,120
 8021990:	ad474e84 	addi	r21,r21,7482
 8021994:	d8c01e15 	stw	r3,120(sp)
 8021998:	d8002015 	stw	zero,128(sp)
 802199c:	d8001f15 	stw	zero,124(sp)
 80219a0:	d8003315 	stw	zero,204(sp)
 80219a4:	d8003615 	stw	zero,216(sp)
 80219a8:	d8003715 	stw	zero,220(sp)
 80219ac:	1811883a 	mov	r8,r3
 80219b0:	d8003a15 	stw	zero,232(sp)
 80219b4:	d8003b15 	stw	zero,236(sp)
 80219b8:	d8002f15 	stw	zero,188(sp)
 80219bc:	d9002815 	stw	r4,160(sp)
 80219c0:	b8800007 	ldb	r2,0(r23)
 80219c4:	10027726 	beq	r2,zero,80223a4 <___svfprintf_internal_r+0xa90>
 80219c8:	00c00944 	movi	r3,37
 80219cc:	b823883a 	mov	r17,r23
 80219d0:	10c0021e 	bne	r2,r3,80219dc <___svfprintf_internal_r+0xc8>
 80219d4:	00001406 	br	8021a28 <___svfprintf_internal_r+0x114>
 80219d8:	10c00326 	beq	r2,r3,80219e8 <___svfprintf_internal_r+0xd4>
 80219dc:	8c400044 	addi	r17,r17,1
 80219e0:	88800007 	ldb	r2,0(r17)
 80219e4:	103ffc1e 	bne	r2,zero,80219d8 <__alt_data_end+0xfffe25d8>
 80219e8:	8de1c83a 	sub	r16,r17,r23
 80219ec:	80000e26 	beq	r16,zero,8021a28 <___svfprintf_internal_r+0x114>
 80219f0:	d8c02017 	ldw	r3,128(sp)
 80219f4:	d8801f17 	ldw	r2,124(sp)
 80219f8:	45c00015 	stw	r23,0(r8)
 80219fc:	1c07883a 	add	r3,r3,r16
 8021a00:	10800044 	addi	r2,r2,1
 8021a04:	d8c02015 	stw	r3,128(sp)
 8021a08:	44000115 	stw	r16,4(r8)
 8021a0c:	d8801f15 	stw	r2,124(sp)
 8021a10:	00c001c4 	movi	r3,7
 8021a14:	18809916 	blt	r3,r2,8021c7c <___svfprintf_internal_r+0x368>
 8021a18:	42000204 	addi	r8,r8,8
 8021a1c:	d9402f17 	ldw	r5,188(sp)
 8021a20:	2c0b883a 	add	r5,r5,r16
 8021a24:	d9402f15 	stw	r5,188(sp)
 8021a28:	88800007 	ldb	r2,0(r17)
 8021a2c:	10009a26 	beq	r2,zero,8021c98 <___svfprintf_internal_r+0x384>
 8021a30:	8dc00044 	addi	r23,r17,1
 8021a34:	8c400047 	ldb	r17,1(r17)
 8021a38:	0021883a 	mov	r16,zero
 8021a3c:	00bfffc4 	movi	r2,-1
 8021a40:	0025883a 	mov	r18,zero
 8021a44:	dc002905 	stb	r16,164(sp)
 8021a48:	d8002785 	stb	zero,158(sp)
 8021a4c:	d8002b05 	stb	zero,172(sp)
 8021a50:	d8802a15 	stw	r2,168(sp)
 8021a54:	d8003115 	stw	zero,196(sp)
 8021a58:	05001604 	movi	r20,88
 8021a5c:	05800244 	movi	r22,9
 8021a60:	4039883a 	mov	fp,r8
 8021a64:	9021883a 	mov	r16,r18
 8021a68:	bdc00044 	addi	r23,r23,1
 8021a6c:	88bff804 	addi	r2,r17,-32
 8021a70:	a0831e36 	bltu	r20,r2,80226ec <___svfprintf_internal_r+0xdd8>
 8021a74:	100490ba 	slli	r2,r2,2
 8021a78:	00c200b4 	movhi	r3,2050
 8021a7c:	18c6a304 	addi	r3,r3,6796
 8021a80:	10c5883a 	add	r2,r2,r3
 8021a84:	10800017 	ldw	r2,0(r2)
 8021a88:	1000683a 	jmp	r2
 8021a8c:	08022634 	orhi	zero,at,2200
 8021a90:	080226ec 	andhi	zero,at,2203
 8021a94:	080226ec 	andhi	zero,at,2203
 8021a98:	08022628 	cmpgeui	zero,at,2200
 8021a9c:	080226ec 	andhi	zero,at,2203
 8021aa0:	080226ec 	andhi	zero,at,2203
 8021aa4:	080226ec 	andhi	zero,at,2203
 8021aa8:	080226ec 	andhi	zero,at,2203
 8021aac:	080226ec 	andhi	zero,at,2203
 8021ab0:	080226ec 	andhi	zero,at,2203
 8021ab4:	08021cf4 	orhi	zero,at,2163
 8021ab8:	08022538 	rdprs	zero,at,2196
 8021abc:	080226ec 	andhi	zero,at,2203
 8021ac0:	08021c00 	call	8021c0 <__alt_mem_new_sdram_controller_0-0x37fde40>
 8021ac4:	08021d18 	cmpnei	zero,at,2164
 8021ac8:	080226ec 	andhi	zero,at,2203
 8021acc:	08021da4 	muli	zero,at,2166
 8021ad0:	08021d68 	cmpgeui	zero,at,2165
 8021ad4:	08021d68 	cmpgeui	zero,at,2165
 8021ad8:	08021d68 	cmpgeui	zero,at,2165
 8021adc:	08021d68 	cmpgeui	zero,at,2165
 8021ae0:	08021d68 	cmpgeui	zero,at,2165
 8021ae4:	08021d68 	cmpgeui	zero,at,2165
 8021ae8:	08021d68 	cmpgeui	zero,at,2165
 8021aec:	08021d68 	cmpgeui	zero,at,2165
 8021af0:	08021d68 	cmpgeui	zero,at,2165
 8021af4:	080226ec 	andhi	zero,at,2203
 8021af8:	080226ec 	andhi	zero,at,2203
 8021afc:	080226ec 	andhi	zero,at,2203
 8021b00:	080226ec 	andhi	zero,at,2203
 8021b04:	080226ec 	andhi	zero,at,2203
 8021b08:	080226ec 	andhi	zero,at,2203
 8021b0c:	080226ec 	andhi	zero,at,2203
 8021b10:	080226ec 	andhi	zero,at,2203
 8021b14:	080226ec 	andhi	zero,at,2203
 8021b18:	080226ec 	andhi	zero,at,2203
 8021b1c:	08021e68 	cmpgeui	zero,at,2169
 8021b20:	08021db0 	cmpltui	zero,at,2166
 8021b24:	080226ec 	andhi	zero,at,2203
 8021b28:	08021db0 	cmpltui	zero,at,2166
 8021b2c:	080226ec 	andhi	zero,at,2203
 8021b30:	080226ec 	andhi	zero,at,2203
 8021b34:	080226ec 	andhi	zero,at,2203
 8021b38:	080226ec 	andhi	zero,at,2203
 8021b3c:	08021e5c 	xori	zero,at,2169
 8021b40:	080226ec 	andhi	zero,at,2203
 8021b44:	080226ec 	andhi	zero,at,2203
 8021b48:	08021f30 	cmpltui	zero,at,2172
 8021b4c:	080226ec 	andhi	zero,at,2203
 8021b50:	080226ec 	andhi	zero,at,2203
 8021b54:	080226ec 	andhi	zero,at,2203
 8021b58:	080226ec 	andhi	zero,at,2203
 8021b5c:	080226ec 	andhi	zero,at,2203
 8021b60:	080223ac 	andhi	zero,at,2190
 8021b64:	080226ec 	andhi	zero,at,2203
 8021b68:	080226ec 	andhi	zero,at,2203
 8021b6c:	08022418 	cmpnei	zero,at,2192
 8021b70:	080226ec 	andhi	zero,at,2203
 8021b74:	080226ec 	andhi	zero,at,2203
 8021b78:	080226ec 	andhi	zero,at,2203
 8021b7c:	080226ec 	andhi	zero,at,2203
 8021b80:	080226ec 	andhi	zero,at,2203
 8021b84:	080226ec 	andhi	zero,at,2203
 8021b88:	080226ec 	andhi	zero,at,2203
 8021b8c:	080226ec 	andhi	zero,at,2203
 8021b90:	080226ec 	andhi	zero,at,2203
 8021b94:	080226ec 	andhi	zero,at,2203
 8021b98:	080224d4 	ori	zero,at,2195
 8021b9c:	08022654 	ori	zero,at,2201
 8021ba0:	08021db0 	cmpltui	zero,at,2166
 8021ba4:	08021db0 	cmpltui	zero,at,2166
 8021ba8:	08021db0 	cmpltui	zero,at,2166
 8021bac:	080226c8 	cmpgei	zero,at,2203
 8021bb0:	08022654 	ori	zero,at,2201
 8021bb4:	080226ec 	andhi	zero,at,2203
 8021bb8:	080226ec 	andhi	zero,at,2203
 8021bbc:	08022674 	orhi	zero,at,2201
 8021bc0:	080226ec 	andhi	zero,at,2203
 8021bc4:	08022688 	cmpgei	zero,at,2202
 8021bc8:	08022518 	cmpnei	zero,at,2196
 8021bcc:	08021c0c 	andi	zero,at,2160
 8021bd0:	08022550 	cmplti	zero,at,2197
 8021bd4:	080226ec 	andhi	zero,at,2203
 8021bd8:	0802255c 	xori	zero,at,2197
 8021bdc:	080226ec 	andhi	zero,at,2203
 8021be0:	080225c0 	call	80225c <__alt_mem_new_sdram_controller_0-0x37fdda4>
 8021be4:	080226ec 	andhi	zero,at,2203
 8021be8:	080226ec 	andhi	zero,at,2203
 8021bec:	080225e0 	cmpeqi	zero,at,2199
 8021bf0:	d8c03117 	ldw	r3,196(sp)
 8021bf4:	d8802e15 	stw	r2,184(sp)
 8021bf8:	00c7c83a 	sub	r3,zero,r3
 8021bfc:	d8c03115 	stw	r3,196(sp)
 8021c00:	84000114 	ori	r16,r16,4
 8021c04:	bc400007 	ldb	r17,0(r23)
 8021c08:	003f9706 	br	8021a68 <__alt_data_end+0xfffe2668>
 8021c0c:	00800c04 	movi	r2,48
 8021c10:	d8802705 	stb	r2,156(sp)
 8021c14:	00801e04 	movi	r2,120
 8021c18:	d8802745 	stb	r2,157(sp)
 8021c1c:	d9002a17 	ldw	r4,168(sp)
 8021c20:	d8802e17 	ldw	r2,184(sp)
 8021c24:	d8002785 	stb	zero,158(sp)
 8021c28:	e011883a 	mov	r8,fp
 8021c2c:	10c00104 	addi	r3,r2,4
 8021c30:	15000017 	ldw	r20,0(r2)
 8021c34:	002d883a 	mov	r22,zero
 8021c38:	80800094 	ori	r2,r16,2
 8021c3c:	2002b616 	blt	r4,zero,8022718 <___svfprintf_internal_r+0xe04>
 8021c40:	00bfdfc4 	movi	r2,-129
 8021c44:	80a4703a 	and	r18,r16,r2
 8021c48:	d8c02e15 	stw	r3,184(sp)
 8021c4c:	94800094 	ori	r18,r18,2
 8021c50:	a002a01e 	bne	r20,zero,80226d4 <___svfprintf_internal_r+0xdc0>
 8021c54:	014200f4 	movhi	r5,2051
 8021c58:	29474704 	addi	r5,r5,7452
 8021c5c:	d9403a15 	stw	r5,232(sp)
 8021c60:	04401e04 	movi	r17,120
 8021c64:	d8c02a17 	ldw	r3,168(sp)
 8021c68:	0039883a 	mov	fp,zero
 8021c6c:	1801e626 	beq	r3,zero,8022408 <___svfprintf_internal_r+0xaf4>
 8021c70:	0029883a 	mov	r20,zero
 8021c74:	002d883a 	mov	r22,zero
 8021c78:	00020506 	br	8022490 <___svfprintf_internal_r+0xb7c>
 8021c7c:	d9402d17 	ldw	r5,180(sp)
 8021c80:	d9801e04 	addi	r6,sp,120
 8021c84:	9809883a 	mov	r4,r19
 8021c88:	80283cc0 	call	80283cc <__ssprint_r>
 8021c8c:	1000081e 	bne	r2,zero,8021cb0 <___svfprintf_internal_r+0x39c>
 8021c90:	da000404 	addi	r8,sp,16
 8021c94:	003f6106 	br	8021a1c <__alt_data_end+0xfffe261c>
 8021c98:	d8802017 	ldw	r2,128(sp)
 8021c9c:	10000426 	beq	r2,zero,8021cb0 <___svfprintf_internal_r+0x39c>
 8021ca0:	d9402d17 	ldw	r5,180(sp)
 8021ca4:	d9003917 	ldw	r4,228(sp)
 8021ca8:	d9801e04 	addi	r6,sp,120
 8021cac:	80283cc0 	call	80283cc <__ssprint_r>
 8021cb0:	d8802d17 	ldw	r2,180(sp)
 8021cb4:	10c0030b 	ldhu	r3,12(r2)
 8021cb8:	d8802f17 	ldw	r2,188(sp)
 8021cbc:	18c0100c 	andi	r3,r3,64
 8021cc0:	1806251e 	bne	r3,zero,8023558 <___svfprintf_internal_r+0x1c44>
 8021cc4:	dfc04817 	ldw	ra,288(sp)
 8021cc8:	df004717 	ldw	fp,284(sp)
 8021ccc:	ddc04617 	ldw	r23,280(sp)
 8021cd0:	dd804517 	ldw	r22,276(sp)
 8021cd4:	dd404417 	ldw	r21,272(sp)
 8021cd8:	dd004317 	ldw	r20,268(sp)
 8021cdc:	dcc04217 	ldw	r19,264(sp)
 8021ce0:	dc804117 	ldw	r18,260(sp)
 8021ce4:	dc404017 	ldw	r17,256(sp)
 8021ce8:	dc003f17 	ldw	r16,252(sp)
 8021cec:	dec04904 	addi	sp,sp,292
 8021cf0:	f800283a 	ret
 8021cf4:	d9002e17 	ldw	r4,184(sp)
 8021cf8:	d9402e17 	ldw	r5,184(sp)
 8021cfc:	21000017 	ldw	r4,0(r4)
 8021d00:	28800104 	addi	r2,r5,4
 8021d04:	d9003115 	stw	r4,196(sp)
 8021d08:	203fb916 	blt	r4,zero,8021bf0 <__alt_data_end+0xfffe27f0>
 8021d0c:	d8802e15 	stw	r2,184(sp)
 8021d10:	bc400007 	ldb	r17,0(r23)
 8021d14:	003f5406 	br	8021a68 <__alt_data_end+0xfffe2668>
 8021d18:	bc400007 	ldb	r17,0(r23)
 8021d1c:	01000a84 	movi	r4,42
 8021d20:	b8c00044 	addi	r3,r23,1
 8021d24:	89076926 	beq	r17,r4,8023acc <___svfprintf_internal_r+0x21b8>
 8021d28:	8cbff404 	addi	r18,r17,-48
 8021d2c:	b486b936 	bltu	r22,r18,8023814 <___svfprintf_internal_r+0x1f00>
 8021d30:	0009883a 	mov	r4,zero
 8021d34:	1823883a 	mov	r17,r3
 8021d38:	01400284 	movi	r5,10
 8021d3c:	80214e80 	call	80214e8 <__mulsi3>
 8021d40:	88c00007 	ldb	r3,0(r17)
 8021d44:	1489883a 	add	r4,r2,r18
 8021d48:	8dc00044 	addi	r23,r17,1
 8021d4c:	1cbff404 	addi	r18,r3,-48
 8021d50:	b823883a 	mov	r17,r23
 8021d54:	b4bff82e 	bgeu	r22,r18,8021d38 <__alt_data_end+0xfffe2938>
 8021d58:	1823883a 	mov	r17,r3
 8021d5c:	20060416 	blt	r4,zero,8023570 <___svfprintf_internal_r+0x1c5c>
 8021d60:	d9002a15 	stw	r4,168(sp)
 8021d64:	003f4106 	br	8021a6c <__alt_data_end+0xfffe266c>
 8021d68:	8cbff404 	addi	r18,r17,-48
 8021d6c:	d8003115 	stw	zero,196(sp)
 8021d70:	0009883a 	mov	r4,zero
 8021d74:	b823883a 	mov	r17,r23
 8021d78:	01400284 	movi	r5,10
 8021d7c:	80214e80 	call	80214e8 <__mulsi3>
 8021d80:	88c00007 	ldb	r3,0(r17)
 8021d84:	9089883a 	add	r4,r18,r2
 8021d88:	bdc00044 	addi	r23,r23,1
 8021d8c:	1cbff404 	addi	r18,r3,-48
 8021d90:	b823883a 	mov	r17,r23
 8021d94:	b4bff82e 	bgeu	r22,r18,8021d78 <__alt_data_end+0xfffe2978>
 8021d98:	1823883a 	mov	r17,r3
 8021d9c:	d9003115 	stw	r4,196(sp)
 8021da0:	003f3206 	br	8021a6c <__alt_data_end+0xfffe266c>
 8021da4:	84002014 	ori	r16,r16,128
 8021da8:	bc400007 	ldb	r17,0(r23)
 8021dac:	003f2e06 	br	8021a68 <__alt_data_end+0xfffe2668>
 8021db0:	8025883a 	mov	r18,r16
 8021db4:	dc002903 	ldbu	r16,164(sp)
 8021db8:	e011883a 	mov	r8,fp
 8021dbc:	84003fcc 	andi	r16,r16,255
 8021dc0:	8007721e 	bne	r16,zero,8023b8c <___svfprintf_internal_r+0x2278>
 8021dc4:	9080020c 	andi	r2,r18,8
 8021dc8:	1004a526 	beq	r2,zero,8023060 <___svfprintf_internal_r+0x174c>
 8021dcc:	d9002e17 	ldw	r4,184(sp)
 8021dd0:	d9402e17 	ldw	r5,184(sp)
 8021dd4:	d8802e17 	ldw	r2,184(sp)
 8021dd8:	21000017 	ldw	r4,0(r4)
 8021ddc:	29400117 	ldw	r5,4(r5)
 8021de0:	10800204 	addi	r2,r2,8
 8021de4:	d9003615 	stw	r4,216(sp)
 8021de8:	d9403715 	stw	r5,220(sp)
 8021dec:	d8802e15 	stw	r2,184(sp)
 8021df0:	d9003617 	ldw	r4,216(sp)
 8021df4:	d9403717 	ldw	r5,220(sp)
 8021df8:	da003e15 	stw	r8,248(sp)
 8021dfc:	04000044 	movi	r16,1
 8021e00:	80280ec0 	call	80280ec <__fpclassifyd>
 8021e04:	da003e17 	ldw	r8,248(sp)
 8021e08:	1404731e 	bne	r2,r16,8022fd8 <___svfprintf_internal_r+0x16c4>
 8021e0c:	d9003617 	ldw	r4,216(sp)
 8021e10:	d9403717 	ldw	r5,220(sp)
 8021e14:	000d883a 	mov	r6,zero
 8021e18:	000f883a 	mov	r7,zero
 8021e1c:	802c8800 	call	802c880 <__ledf2>
 8021e20:	da003e17 	ldw	r8,248(sp)
 8021e24:	10061b16 	blt	r2,zero,8023694 <___svfprintf_internal_r+0x1d80>
 8021e28:	df002783 	ldbu	fp,158(sp)
 8021e2c:	008011c4 	movi	r2,71
 8021e30:	1445810e 	bge	r2,r17,8023438 <___svfprintf_internal_r+0x1b24>
 8021e34:	040200f4 	movhi	r16,2051
 8021e38:	84073f04 	addi	r16,r16,7420
 8021e3c:	00c000c4 	movi	r3,3
 8021e40:	00bfdfc4 	movi	r2,-129
 8021e44:	d8c02915 	stw	r3,164(sp)
 8021e48:	90a4703a 	and	r18,r18,r2
 8021e4c:	d8c02b15 	stw	r3,172(sp)
 8021e50:	d8002a15 	stw	zero,168(sp)
 8021e54:	d8003215 	stw	zero,200(sp)
 8021e58:	00006c06 	br	802200c <___svfprintf_internal_r+0x6f8>
 8021e5c:	84000214 	ori	r16,r16,8
 8021e60:	bc400007 	ldb	r17,0(r23)
 8021e64:	003f0006 	br	8021a68 <__alt_data_end+0xfffe2668>
 8021e68:	8025883a 	mov	r18,r16
 8021e6c:	dc002903 	ldbu	r16,164(sp)
 8021e70:	e011883a 	mov	r8,fp
 8021e74:	84003fcc 	andi	r16,r16,255
 8021e78:	80073f1e 	bne	r16,zero,8023b78 <___svfprintf_internal_r+0x2264>
 8021e7c:	94800414 	ori	r18,r18,16
 8021e80:	9080080c 	andi	r2,r18,32
 8021e84:	1003bb26 	beq	r2,zero,8022d74 <___svfprintf_internal_r+0x1460>
 8021e88:	d9002e17 	ldw	r4,184(sp)
 8021e8c:	20800117 	ldw	r2,4(r4)
 8021e90:	25000017 	ldw	r20,0(r4)
 8021e94:	21000204 	addi	r4,r4,8
 8021e98:	d9002e15 	stw	r4,184(sp)
 8021e9c:	102d883a 	mov	r22,r2
 8021ea0:	1003bd16 	blt	r2,zero,8022d98 <___svfprintf_internal_r+0x1484>
 8021ea4:	d9002a17 	ldw	r4,168(sp)
 8021ea8:	df002783 	ldbu	fp,158(sp)
 8021eac:	2003d016 	blt	r4,zero,8022df0 <___svfprintf_internal_r+0x14dc>
 8021eb0:	00ffdfc4 	movi	r3,-129
 8021eb4:	a584b03a 	or	r2,r20,r22
 8021eb8:	90e4703a 	and	r18,r18,r3
 8021ebc:	10015026 	beq	r2,zero,8022400 <___svfprintf_internal_r+0xaec>
 8021ec0:	b0037026 	beq	r22,zero,8022c84 <___svfprintf_internal_r+0x1370>
 8021ec4:	dc402915 	stw	r17,164(sp)
 8021ec8:	dc001e04 	addi	r16,sp,120
 8021ecc:	b023883a 	mov	r17,r22
 8021ed0:	402d883a 	mov	r22,r8
 8021ed4:	a009883a 	mov	r4,r20
 8021ed8:	880b883a 	mov	r5,r17
 8021edc:	01800284 	movi	r6,10
 8021ee0:	000f883a 	mov	r7,zero
 8021ee4:	802ad280 	call	802ad28 <__umoddi3>
 8021ee8:	10800c04 	addi	r2,r2,48
 8021eec:	843fffc4 	addi	r16,r16,-1
 8021ef0:	a009883a 	mov	r4,r20
 8021ef4:	880b883a 	mov	r5,r17
 8021ef8:	80800005 	stb	r2,0(r16)
 8021efc:	01800284 	movi	r6,10
 8021f00:	000f883a 	mov	r7,zero
 8021f04:	802a72c0 	call	802a72c <__udivdi3>
 8021f08:	1029883a 	mov	r20,r2
 8021f0c:	10c4b03a 	or	r2,r2,r3
 8021f10:	1823883a 	mov	r17,r3
 8021f14:	103fef1e 	bne	r2,zero,8021ed4 <__alt_data_end+0xfffe2ad4>
 8021f18:	d8c02817 	ldw	r3,160(sp)
 8021f1c:	dc402917 	ldw	r17,164(sp)
 8021f20:	b011883a 	mov	r8,r22
 8021f24:	1c07c83a 	sub	r3,r3,r16
 8021f28:	d8c02b15 	stw	r3,172(sp)
 8021f2c:	00003106 	br	8021ff4 <___svfprintf_internal_r+0x6e0>
 8021f30:	8025883a 	mov	r18,r16
 8021f34:	dc002903 	ldbu	r16,164(sp)
 8021f38:	e011883a 	mov	r8,fp
 8021f3c:	84003fcc 	andi	r16,r16,255
 8021f40:	80070a1e 	bne	r16,zero,8023b6c <___svfprintf_internal_r+0x2258>
 8021f44:	94800414 	ori	r18,r18,16
 8021f48:	9080080c 	andi	r2,r18,32
 8021f4c:	1002f626 	beq	r2,zero,8022b28 <___svfprintf_internal_r+0x1214>
 8021f50:	d9002e17 	ldw	r4,184(sp)
 8021f54:	d9402a17 	ldw	r5,168(sp)
 8021f58:	d8002785 	stb	zero,158(sp)
 8021f5c:	20800204 	addi	r2,r4,8
 8021f60:	25000017 	ldw	r20,0(r4)
 8021f64:	25800117 	ldw	r22,4(r4)
 8021f68:	28043716 	blt	r5,zero,8023048 <___svfprintf_internal_r+0x1734>
 8021f6c:	013fdfc4 	movi	r4,-129
 8021f70:	a586b03a 	or	r3,r20,r22
 8021f74:	d8802e15 	stw	r2,184(sp)
 8021f78:	9124703a 	and	r18,r18,r4
 8021f7c:	1802f71e 	bne	r3,zero,8022b5c <___svfprintf_internal_r+0x1248>
 8021f80:	d9402a17 	ldw	r5,168(sp)
 8021f84:	0039883a 	mov	fp,zero
 8021f88:	2806df26 	beq	r5,zero,8023b08 <___svfprintf_internal_r+0x21f4>
 8021f8c:	0029883a 	mov	r20,zero
 8021f90:	002d883a 	mov	r22,zero
 8021f94:	dc001e04 	addi	r16,sp,120
 8021f98:	a006d0fa 	srli	r3,r20,3
 8021f9c:	b008977a 	slli	r4,r22,29
 8021fa0:	b02cd0fa 	srli	r22,r22,3
 8021fa4:	a50001cc 	andi	r20,r20,7
 8021fa8:	a0800c04 	addi	r2,r20,48
 8021fac:	843fffc4 	addi	r16,r16,-1
 8021fb0:	20e8b03a 	or	r20,r4,r3
 8021fb4:	80800005 	stb	r2,0(r16)
 8021fb8:	a586b03a 	or	r3,r20,r22
 8021fbc:	183ff61e 	bne	r3,zero,8021f98 <__alt_data_end+0xfffe2b98>
 8021fc0:	90c0004c 	andi	r3,r18,1
 8021fc4:	18013f26 	beq	r3,zero,80224c4 <___svfprintf_internal_r+0xbb0>
 8021fc8:	10803fcc 	andi	r2,r2,255
 8021fcc:	1080201c 	xori	r2,r2,128
 8021fd0:	10bfe004 	addi	r2,r2,-128
 8021fd4:	00c00c04 	movi	r3,48
 8021fd8:	10c13a26 	beq	r2,r3,80224c4 <___svfprintf_internal_r+0xbb0>
 8021fdc:	80ffffc5 	stb	r3,-1(r16)
 8021fe0:	d8c02817 	ldw	r3,160(sp)
 8021fe4:	80bfffc4 	addi	r2,r16,-1
 8021fe8:	1021883a 	mov	r16,r2
 8021fec:	1887c83a 	sub	r3,r3,r2
 8021ff0:	d8c02b15 	stw	r3,172(sp)
 8021ff4:	d8802b17 	ldw	r2,172(sp)
 8021ff8:	d9002a17 	ldw	r4,168(sp)
 8021ffc:	1100010e 	bge	r2,r4,8022004 <___svfprintf_internal_r+0x6f0>
 8022000:	2005883a 	mov	r2,r4
 8022004:	d8802915 	stw	r2,164(sp)
 8022008:	d8003215 	stw	zero,200(sp)
 802200c:	e7003fcc 	andi	fp,fp,255
 8022010:	e700201c 	xori	fp,fp,128
 8022014:	e73fe004 	addi	fp,fp,-128
 8022018:	e0000326 	beq	fp,zero,8022028 <___svfprintf_internal_r+0x714>
 802201c:	d8c02917 	ldw	r3,164(sp)
 8022020:	18c00044 	addi	r3,r3,1
 8022024:	d8c02915 	stw	r3,164(sp)
 8022028:	90c0008c 	andi	r3,r18,2
 802202c:	d8c02c15 	stw	r3,176(sp)
 8022030:	18000326 	beq	r3,zero,8022040 <___svfprintf_internal_r+0x72c>
 8022034:	d8c02917 	ldw	r3,164(sp)
 8022038:	18c00084 	addi	r3,r3,2
 802203c:	d8c02915 	stw	r3,164(sp)
 8022040:	90c0210c 	andi	r3,r18,132
 8022044:	d8c03015 	stw	r3,192(sp)
 8022048:	1801c31e 	bne	r3,zero,8022758 <___svfprintf_internal_r+0xe44>
 802204c:	d9003117 	ldw	r4,196(sp)
 8022050:	d8c02917 	ldw	r3,164(sp)
 8022054:	20e9c83a 	sub	r20,r4,r3
 8022058:	0501bf0e 	bge	zero,r20,8022758 <___svfprintf_internal_r+0xe44>
 802205c:	02400404 	movi	r9,16
 8022060:	d8c02017 	ldw	r3,128(sp)
 8022064:	d8801f17 	ldw	r2,124(sp)
 8022068:	4d053d0e 	bge	r9,r20,8023560 <___svfprintf_internal_r+0x1c4c>
 802206c:	014200f4 	movhi	r5,2051
 8022070:	29475284 	addi	r5,r5,7498
 8022074:	dc403c15 	stw	r17,240(sp)
 8022078:	d9403515 	stw	r5,212(sp)
 802207c:	a023883a 	mov	r17,r20
 8022080:	482d883a 	mov	r22,r9
 8022084:	9029883a 	mov	r20,r18
 8022088:	070001c4 	movi	fp,7
 802208c:	8025883a 	mov	r18,r16
 8022090:	dc002d17 	ldw	r16,180(sp)
 8022094:	00000306 	br	80220a4 <___svfprintf_internal_r+0x790>
 8022098:	8c7ffc04 	addi	r17,r17,-16
 802209c:	42000204 	addi	r8,r8,8
 80220a0:	b440130e 	bge	r22,r17,80220f0 <___svfprintf_internal_r+0x7dc>
 80220a4:	010200f4 	movhi	r4,2051
 80220a8:	18c00404 	addi	r3,r3,16
 80220ac:	10800044 	addi	r2,r2,1
 80220b0:	21075284 	addi	r4,r4,7498
 80220b4:	41000015 	stw	r4,0(r8)
 80220b8:	45800115 	stw	r22,4(r8)
 80220bc:	d8c02015 	stw	r3,128(sp)
 80220c0:	d8801f15 	stw	r2,124(sp)
 80220c4:	e0bff40e 	bge	fp,r2,8022098 <__alt_data_end+0xfffe2c98>
 80220c8:	d9801e04 	addi	r6,sp,120
 80220cc:	800b883a 	mov	r5,r16
 80220d0:	9809883a 	mov	r4,r19
 80220d4:	80283cc0 	call	80283cc <__ssprint_r>
 80220d8:	103ef51e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 80220dc:	8c7ffc04 	addi	r17,r17,-16
 80220e0:	d8c02017 	ldw	r3,128(sp)
 80220e4:	d8801f17 	ldw	r2,124(sp)
 80220e8:	da000404 	addi	r8,sp,16
 80220ec:	b47fed16 	blt	r22,r17,80220a4 <__alt_data_end+0xfffe2ca4>
 80220f0:	9021883a 	mov	r16,r18
 80220f4:	a025883a 	mov	r18,r20
 80220f8:	8829883a 	mov	r20,r17
 80220fc:	dc403c17 	ldw	r17,240(sp)
 8022100:	d9403517 	ldw	r5,212(sp)
 8022104:	a0c7883a 	add	r3,r20,r3
 8022108:	10800044 	addi	r2,r2,1
 802210c:	41400015 	stw	r5,0(r8)
 8022110:	45000115 	stw	r20,4(r8)
 8022114:	d8c02015 	stw	r3,128(sp)
 8022118:	d8801f15 	stw	r2,124(sp)
 802211c:	010001c4 	movi	r4,7
 8022120:	2082c116 	blt	r4,r2,8022c28 <___svfprintf_internal_r+0x1314>
 8022124:	df002787 	ldb	fp,158(sp)
 8022128:	42000204 	addi	r8,r8,8
 802212c:	e0000c26 	beq	fp,zero,8022160 <___svfprintf_internal_r+0x84c>
 8022130:	d8801f17 	ldw	r2,124(sp)
 8022134:	d9002784 	addi	r4,sp,158
 8022138:	18c00044 	addi	r3,r3,1
 802213c:	10800044 	addi	r2,r2,1
 8022140:	41000015 	stw	r4,0(r8)
 8022144:	01000044 	movi	r4,1
 8022148:	41000115 	stw	r4,4(r8)
 802214c:	d8c02015 	stw	r3,128(sp)
 8022150:	d8801f15 	stw	r2,124(sp)
 8022154:	010001c4 	movi	r4,7
 8022158:	20825a16 	blt	r4,r2,8022ac4 <___svfprintf_internal_r+0x11b0>
 802215c:	42000204 	addi	r8,r8,8
 8022160:	d8802c17 	ldw	r2,176(sp)
 8022164:	10000c26 	beq	r2,zero,8022198 <___svfprintf_internal_r+0x884>
 8022168:	d8801f17 	ldw	r2,124(sp)
 802216c:	d9002704 	addi	r4,sp,156
 8022170:	18c00084 	addi	r3,r3,2
 8022174:	10800044 	addi	r2,r2,1
 8022178:	41000015 	stw	r4,0(r8)
 802217c:	01000084 	movi	r4,2
 8022180:	41000115 	stw	r4,4(r8)
 8022184:	d8c02015 	stw	r3,128(sp)
 8022188:	d8801f15 	stw	r2,124(sp)
 802218c:	010001c4 	movi	r4,7
 8022190:	20825416 	blt	r4,r2,8022ae4 <___svfprintf_internal_r+0x11d0>
 8022194:	42000204 	addi	r8,r8,8
 8022198:	d9003017 	ldw	r4,192(sp)
 802219c:	00802004 	movi	r2,128
 80221a0:	2081b926 	beq	r4,r2,8022888 <___svfprintf_internal_r+0xf74>
 80221a4:	d9402a17 	ldw	r5,168(sp)
 80221a8:	d8802b17 	ldw	r2,172(sp)
 80221ac:	28adc83a 	sub	r22,r5,r2
 80221b0:	05802f0e 	bge	zero,r22,8022270 <___svfprintf_internal_r+0x95c>
 80221b4:	07000404 	movi	fp,16
 80221b8:	d8801f17 	ldw	r2,124(sp)
 80221bc:	e583e20e 	bge	fp,r22,8023148 <___svfprintf_internal_r+0x1834>
 80221c0:	014200f4 	movhi	r5,2051
 80221c4:	29474e84 	addi	r5,r5,7482
 80221c8:	dc402a15 	stw	r17,168(sp)
 80221cc:	d9402c15 	stw	r5,176(sp)
 80221d0:	b023883a 	mov	r17,r22
 80221d4:	050001c4 	movi	r20,7
 80221d8:	902d883a 	mov	r22,r18
 80221dc:	8025883a 	mov	r18,r16
 80221e0:	dc002d17 	ldw	r16,180(sp)
 80221e4:	00000306 	br	80221f4 <___svfprintf_internal_r+0x8e0>
 80221e8:	8c7ffc04 	addi	r17,r17,-16
 80221ec:	42000204 	addi	r8,r8,8
 80221f0:	e440110e 	bge	fp,r17,8022238 <___svfprintf_internal_r+0x924>
 80221f4:	18c00404 	addi	r3,r3,16
 80221f8:	10800044 	addi	r2,r2,1
 80221fc:	45400015 	stw	r21,0(r8)
 8022200:	47000115 	stw	fp,4(r8)
 8022204:	d8c02015 	stw	r3,128(sp)
 8022208:	d8801f15 	stw	r2,124(sp)
 802220c:	a0bff60e 	bge	r20,r2,80221e8 <__alt_data_end+0xfffe2de8>
 8022210:	d9801e04 	addi	r6,sp,120
 8022214:	800b883a 	mov	r5,r16
 8022218:	9809883a 	mov	r4,r19
 802221c:	80283cc0 	call	80283cc <__ssprint_r>
 8022220:	103ea31e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022224:	8c7ffc04 	addi	r17,r17,-16
 8022228:	d8c02017 	ldw	r3,128(sp)
 802222c:	d8801f17 	ldw	r2,124(sp)
 8022230:	da000404 	addi	r8,sp,16
 8022234:	e47fef16 	blt	fp,r17,80221f4 <__alt_data_end+0xfffe2df4>
 8022238:	9021883a 	mov	r16,r18
 802223c:	b025883a 	mov	r18,r22
 8022240:	882d883a 	mov	r22,r17
 8022244:	dc402a17 	ldw	r17,168(sp)
 8022248:	d9002c17 	ldw	r4,176(sp)
 802224c:	1d87883a 	add	r3,r3,r22
 8022250:	10800044 	addi	r2,r2,1
 8022254:	41000015 	stw	r4,0(r8)
 8022258:	45800115 	stw	r22,4(r8)
 802225c:	d8c02015 	stw	r3,128(sp)
 8022260:	d8801f15 	stw	r2,124(sp)
 8022264:	010001c4 	movi	r4,7
 8022268:	20820e16 	blt	r4,r2,8022aa4 <___svfprintf_internal_r+0x1190>
 802226c:	42000204 	addi	r8,r8,8
 8022270:	9080400c 	andi	r2,r18,256
 8022274:	10013a1e 	bne	r2,zero,8022760 <___svfprintf_internal_r+0xe4c>
 8022278:	d9402b17 	ldw	r5,172(sp)
 802227c:	d8801f17 	ldw	r2,124(sp)
 8022280:	44000015 	stw	r16,0(r8)
 8022284:	1947883a 	add	r3,r3,r5
 8022288:	10800044 	addi	r2,r2,1
 802228c:	41400115 	stw	r5,4(r8)
 8022290:	d8c02015 	stw	r3,128(sp)
 8022294:	d8801f15 	stw	r2,124(sp)
 8022298:	010001c4 	movi	r4,7
 802229c:	2081f316 	blt	r4,r2,8022a6c <___svfprintf_internal_r+0x1158>
 80222a0:	42000204 	addi	r8,r8,8
 80222a4:	9480010c 	andi	r18,r18,4
 80222a8:	90003226 	beq	r18,zero,8022374 <___svfprintf_internal_r+0xa60>
 80222ac:	d9403117 	ldw	r5,196(sp)
 80222b0:	d8802917 	ldw	r2,164(sp)
 80222b4:	28a1c83a 	sub	r16,r5,r2
 80222b8:	04002e0e 	bge	zero,r16,8022374 <___svfprintf_internal_r+0xa60>
 80222bc:	04400404 	movi	r17,16
 80222c0:	d8801f17 	ldw	r2,124(sp)
 80222c4:	8c04db0e 	bge	r17,r16,8023634 <___svfprintf_internal_r+0x1d20>
 80222c8:	014200f4 	movhi	r5,2051
 80222cc:	29475284 	addi	r5,r5,7498
 80222d0:	d9403515 	stw	r5,212(sp)
 80222d4:	048001c4 	movi	r18,7
 80222d8:	dd002d17 	ldw	r20,180(sp)
 80222dc:	00000306 	br	80222ec <___svfprintf_internal_r+0x9d8>
 80222e0:	843ffc04 	addi	r16,r16,-16
 80222e4:	42000204 	addi	r8,r8,8
 80222e8:	8c00130e 	bge	r17,r16,8022338 <___svfprintf_internal_r+0xa24>
 80222ec:	010200f4 	movhi	r4,2051
 80222f0:	18c00404 	addi	r3,r3,16
 80222f4:	10800044 	addi	r2,r2,1
 80222f8:	21075284 	addi	r4,r4,7498
 80222fc:	41000015 	stw	r4,0(r8)
 8022300:	44400115 	stw	r17,4(r8)
 8022304:	d8c02015 	stw	r3,128(sp)
 8022308:	d8801f15 	stw	r2,124(sp)
 802230c:	90bff40e 	bge	r18,r2,80222e0 <__alt_data_end+0xfffe2ee0>
 8022310:	d9801e04 	addi	r6,sp,120
 8022314:	a00b883a 	mov	r5,r20
 8022318:	9809883a 	mov	r4,r19
 802231c:	80283cc0 	call	80283cc <__ssprint_r>
 8022320:	103e631e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022324:	843ffc04 	addi	r16,r16,-16
 8022328:	d8c02017 	ldw	r3,128(sp)
 802232c:	d8801f17 	ldw	r2,124(sp)
 8022330:	da000404 	addi	r8,sp,16
 8022334:	8c3fed16 	blt	r17,r16,80222ec <__alt_data_end+0xfffe2eec>
 8022338:	d9403517 	ldw	r5,212(sp)
 802233c:	1c07883a 	add	r3,r3,r16
 8022340:	10800044 	addi	r2,r2,1
 8022344:	41400015 	stw	r5,0(r8)
 8022348:	44000115 	stw	r16,4(r8)
 802234c:	d8c02015 	stw	r3,128(sp)
 8022350:	d8801f15 	stw	r2,124(sp)
 8022354:	010001c4 	movi	r4,7
 8022358:	2080060e 	bge	r4,r2,8022374 <___svfprintf_internal_r+0xa60>
 802235c:	d9402d17 	ldw	r5,180(sp)
 8022360:	d9801e04 	addi	r6,sp,120
 8022364:	9809883a 	mov	r4,r19
 8022368:	80283cc0 	call	80283cc <__ssprint_r>
 802236c:	103e501e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022370:	d8c02017 	ldw	r3,128(sp)
 8022374:	d8803117 	ldw	r2,196(sp)
 8022378:	d9002917 	ldw	r4,164(sp)
 802237c:	1100010e 	bge	r2,r4,8022384 <___svfprintf_internal_r+0xa70>
 8022380:	2005883a 	mov	r2,r4
 8022384:	d9402f17 	ldw	r5,188(sp)
 8022388:	288b883a 	add	r5,r5,r2
 802238c:	d9402f15 	stw	r5,188(sp)
 8022390:	1801be1e 	bne	r3,zero,8022a8c <___svfprintf_internal_r+0x1178>
 8022394:	b8800007 	ldb	r2,0(r23)
 8022398:	d8001f15 	stw	zero,124(sp)
 802239c:	da000404 	addi	r8,sp,16
 80223a0:	103d891e 	bne	r2,zero,80219c8 <__alt_data_end+0xfffe25c8>
 80223a4:	b823883a 	mov	r17,r23
 80223a8:	003d9f06 	br	8021a28 <__alt_data_end+0xfffe2628>
 80223ac:	8025883a 	mov	r18,r16
 80223b0:	dc002903 	ldbu	r16,164(sp)
 80223b4:	e011883a 	mov	r8,fp
 80223b8:	84003fcc 	andi	r16,r16,255
 80223bc:	8005e61e 	bne	r16,zero,8023b58 <___svfprintf_internal_r+0x2244>
 80223c0:	94800414 	ori	r18,r18,16
 80223c4:	9080080c 	andi	r2,r18,32
 80223c8:	10022026 	beq	r2,zero,8022c4c <___svfprintf_internal_r+0x1338>
 80223cc:	d9002e17 	ldw	r4,184(sp)
 80223d0:	d9402a17 	ldw	r5,168(sp)
 80223d4:	d8002785 	stb	zero,158(sp)
 80223d8:	20c00204 	addi	r3,r4,8
 80223dc:	25000017 	ldw	r20,0(r4)
 80223e0:	25800117 	ldw	r22,4(r4)
 80223e4:	2803ad16 	blt	r5,zero,802329c <___svfprintf_internal_r+0x1988>
 80223e8:	013fdfc4 	movi	r4,-129
 80223ec:	a584b03a 	or	r2,r20,r22
 80223f0:	d8c02e15 	stw	r3,184(sp)
 80223f4:	9124703a 	and	r18,r18,r4
 80223f8:	0039883a 	mov	fp,zero
 80223fc:	103eb01e 	bne	r2,zero,8021ec0 <__alt_data_end+0xfffe2ac0>
 8022400:	d8802a17 	ldw	r2,168(sp)
 8022404:	1002e71e 	bne	r2,zero,8022fa4 <___svfprintf_internal_r+0x1690>
 8022408:	d8002a15 	stw	zero,168(sp)
 802240c:	d8002b15 	stw	zero,172(sp)
 8022410:	dc001e04 	addi	r16,sp,120
 8022414:	003ef706 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 8022418:	8025883a 	mov	r18,r16
 802241c:	dc002903 	ldbu	r16,164(sp)
 8022420:	e011883a 	mov	r8,fp
 8022424:	84003fcc 	andi	r16,r16,255
 8022428:	8005c81e 	bne	r16,zero,8023b4c <___svfprintf_internal_r+0x2238>
 802242c:	010200f4 	movhi	r4,2051
 8022430:	21074204 	addi	r4,r4,7432
 8022434:	d9003a15 	stw	r4,232(sp)
 8022438:	9080080c 	andi	r2,r18,32
 802243c:	10007226 	beq	r2,zero,8022608 <___svfprintf_internal_r+0xcf4>
 8022440:	d9402e17 	ldw	r5,184(sp)
 8022444:	2d000017 	ldw	r20,0(r5)
 8022448:	2d800117 	ldw	r22,4(r5)
 802244c:	29400204 	addi	r5,r5,8
 8022450:	d9402e15 	stw	r5,184(sp)
 8022454:	9080004c 	andi	r2,r18,1
 8022458:	1001aa26 	beq	r2,zero,8022b04 <___svfprintf_internal_r+0x11f0>
 802245c:	a584b03a 	or	r2,r20,r22
 8022460:	10032526 	beq	r2,zero,80230f8 <___svfprintf_internal_r+0x17e4>
 8022464:	d8c02a17 	ldw	r3,168(sp)
 8022468:	00800c04 	movi	r2,48
 802246c:	d8802705 	stb	r2,156(sp)
 8022470:	dc402745 	stb	r17,157(sp)
 8022474:	d8002785 	stb	zero,158(sp)
 8022478:	90800094 	ori	r2,r18,2
 802247c:	1804a316 	blt	r3,zero,802370c <___svfprintf_internal_r+0x1df8>
 8022480:	00bfdfc4 	movi	r2,-129
 8022484:	90a4703a 	and	r18,r18,r2
 8022488:	94800094 	ori	r18,r18,2
 802248c:	0039883a 	mov	fp,zero
 8022490:	d9003a17 	ldw	r4,232(sp)
 8022494:	dc001e04 	addi	r16,sp,120
 8022498:	a08003cc 	andi	r2,r20,15
 802249c:	b006973a 	slli	r3,r22,28
 80224a0:	2085883a 	add	r2,r4,r2
 80224a4:	a028d13a 	srli	r20,r20,4
 80224a8:	10800003 	ldbu	r2,0(r2)
 80224ac:	b02cd13a 	srli	r22,r22,4
 80224b0:	843fffc4 	addi	r16,r16,-1
 80224b4:	1d28b03a 	or	r20,r3,r20
 80224b8:	80800005 	stb	r2,0(r16)
 80224bc:	a584b03a 	or	r2,r20,r22
 80224c0:	103ff51e 	bne	r2,zero,8022498 <__alt_data_end+0xfffe3098>
 80224c4:	d8c02817 	ldw	r3,160(sp)
 80224c8:	1c07c83a 	sub	r3,r3,r16
 80224cc:	d8c02b15 	stw	r3,172(sp)
 80224d0:	003ec806 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 80224d4:	d8c02e17 	ldw	r3,184(sp)
 80224d8:	d9002e17 	ldw	r4,184(sp)
 80224dc:	8025883a 	mov	r18,r16
 80224e0:	18800017 	ldw	r2,0(r3)
 80224e4:	21000104 	addi	r4,r4,4
 80224e8:	00c00044 	movi	r3,1
 80224ec:	e011883a 	mov	r8,fp
 80224f0:	d8c02915 	stw	r3,164(sp)
 80224f4:	d8002785 	stb	zero,158(sp)
 80224f8:	d8801405 	stb	r2,80(sp)
 80224fc:	d9002e15 	stw	r4,184(sp)
 8022500:	d8c02b15 	stw	r3,172(sp)
 8022504:	d8002a15 	stw	zero,168(sp)
 8022508:	d8003215 	stw	zero,200(sp)
 802250c:	dc001404 	addi	r16,sp,80
 8022510:	0039883a 	mov	fp,zero
 8022514:	003ec406 	br	8022028 <__alt_data_end+0xfffe2c28>
 8022518:	8025883a 	mov	r18,r16
 802251c:	dc002903 	ldbu	r16,164(sp)
 8022520:	e011883a 	mov	r8,fp
 8022524:	84003fcc 	andi	r16,r16,255
 8022528:	803e8726 	beq	r16,zero,8021f48 <__alt_data_end+0xfffe2b48>
 802252c:	d8c02b03 	ldbu	r3,172(sp)
 8022530:	d8c02785 	stb	r3,158(sp)
 8022534:	003e8406 	br	8021f48 <__alt_data_end+0xfffe2b48>
 8022538:	00c00044 	movi	r3,1
 802253c:	d8c02905 	stb	r3,164(sp)
 8022540:	00c00ac4 	movi	r3,43
 8022544:	d8c02b05 	stb	r3,172(sp)
 8022548:	bc400007 	ldb	r17,0(r23)
 802254c:	003d4606 	br	8021a68 <__alt_data_end+0xfffe2668>
 8022550:	84000814 	ori	r16,r16,32
 8022554:	bc400007 	ldb	r17,0(r23)
 8022558:	003d4306 	br	8021a68 <__alt_data_end+0xfffe2668>
 802255c:	d8802e17 	ldw	r2,184(sp)
 8022560:	8025883a 	mov	r18,r16
 8022564:	d8002785 	stb	zero,158(sp)
 8022568:	14000017 	ldw	r16,0(r2)
 802256c:	e011883a 	mov	r8,fp
 8022570:	15000104 	addi	r20,r2,4
 8022574:	80042126 	beq	r16,zero,80235fc <___svfprintf_internal_r+0x1ce8>
 8022578:	d8c02a17 	ldw	r3,168(sp)
 802257c:	1803ee16 	blt	r3,zero,8023538 <___svfprintf_internal_r+0x1c24>
 8022580:	180d883a 	mov	r6,r3
 8022584:	000b883a 	mov	r5,zero
 8022588:	8009883a 	mov	r4,r16
 802258c:	df003e15 	stw	fp,248(sp)
 8022590:	80267680 	call	8026768 <memchr>
 8022594:	da003e17 	ldw	r8,248(sp)
 8022598:	10046a26 	beq	r2,zero,8023744 <___svfprintf_internal_r+0x1e30>
 802259c:	1405c83a 	sub	r2,r2,r16
 80225a0:	d8802b15 	stw	r2,172(sp)
 80225a4:	1003ea16 	blt	r2,zero,8023550 <___svfprintf_internal_r+0x1c3c>
 80225a8:	df002783 	ldbu	fp,158(sp)
 80225ac:	d8802915 	stw	r2,164(sp)
 80225b0:	dd002e15 	stw	r20,184(sp)
 80225b4:	d8002a15 	stw	zero,168(sp)
 80225b8:	d8003215 	stw	zero,200(sp)
 80225bc:	003e9306 	br	802200c <__alt_data_end+0xfffe2c0c>
 80225c0:	8025883a 	mov	r18,r16
 80225c4:	dc002903 	ldbu	r16,164(sp)
 80225c8:	e011883a 	mov	r8,fp
 80225cc:	84003fcc 	andi	r16,r16,255
 80225d0:	803f7c26 	beq	r16,zero,80223c4 <__alt_data_end+0xfffe2fc4>
 80225d4:	d8c02b03 	ldbu	r3,172(sp)
 80225d8:	d8c02785 	stb	r3,158(sp)
 80225dc:	003f7906 	br	80223c4 <__alt_data_end+0xfffe2fc4>
 80225e0:	8025883a 	mov	r18,r16
 80225e4:	dc002903 	ldbu	r16,164(sp)
 80225e8:	e011883a 	mov	r8,fp
 80225ec:	84003fcc 	andi	r16,r16,255
 80225f0:	8005741e 	bne	r16,zero,8023bc4 <___svfprintf_internal_r+0x22b0>
 80225f4:	010200f4 	movhi	r4,2051
 80225f8:	21074704 	addi	r4,r4,7452
 80225fc:	d9003a15 	stw	r4,232(sp)
 8022600:	9080080c 	andi	r2,r18,32
 8022604:	103f8e1e 	bne	r2,zero,8022440 <__alt_data_end+0xfffe3040>
 8022608:	9080040c 	andi	r2,r18,16
 802260c:	1002a726 	beq	r2,zero,80230ac <___svfprintf_internal_r+0x1798>
 8022610:	d8802e17 	ldw	r2,184(sp)
 8022614:	002d883a 	mov	r22,zero
 8022618:	15000017 	ldw	r20,0(r2)
 802261c:	10800104 	addi	r2,r2,4
 8022620:	d8802e15 	stw	r2,184(sp)
 8022624:	003f8b06 	br	8022454 <__alt_data_end+0xfffe3054>
 8022628:	84000054 	ori	r16,r16,1
 802262c:	bc400007 	ldb	r17,0(r23)
 8022630:	003d0d06 	br	8021a68 <__alt_data_end+0xfffe2668>
 8022634:	d8802b07 	ldb	r2,172(sp)
 8022638:	1002a41e 	bne	r2,zero,80230cc <___svfprintf_internal_r+0x17b8>
 802263c:	00c00044 	movi	r3,1
 8022640:	d8c02905 	stb	r3,164(sp)
 8022644:	00c00804 	movi	r3,32
 8022648:	d8c02b05 	stb	r3,172(sp)
 802264c:	bc400007 	ldb	r17,0(r23)
 8022650:	003d0506 	br	8021a68 <__alt_data_end+0xfffe2668>
 8022654:	8025883a 	mov	r18,r16
 8022658:	dc002903 	ldbu	r16,164(sp)
 802265c:	e011883a 	mov	r8,fp
 8022660:	84003fcc 	andi	r16,r16,255
 8022664:	803e0626 	beq	r16,zero,8021e80 <__alt_data_end+0xfffe2a80>
 8022668:	d8c02b03 	ldbu	r3,172(sp)
 802266c:	d8c02785 	stb	r3,158(sp)
 8022670:	003e0306 	br	8021e80 <__alt_data_end+0xfffe2a80>
 8022674:	bc400007 	ldb	r17,0(r23)
 8022678:	00801b04 	movi	r2,108
 802267c:	88830a26 	beq	r17,r2,80232a8 <___svfprintf_internal_r+0x1994>
 8022680:	84000414 	ori	r16,r16,16
 8022684:	003cf806 	br	8021a68 <__alt_data_end+0xfffe2668>
 8022688:	8025883a 	mov	r18,r16
 802268c:	dc002903 	ldbu	r16,164(sp)
 8022690:	e011883a 	mov	r8,fp
 8022694:	84003fcc 	andi	r16,r16,255
 8022698:	8005471e 	bne	r16,zero,8023bb8 <___svfprintf_internal_r+0x22a4>
 802269c:	9080080c 	andi	r2,r18,32
 80226a0:	10028c26 	beq	r2,zero,80230d4 <___svfprintf_internal_r+0x17c0>
 80226a4:	d9002e17 	ldw	r4,184(sp)
 80226a8:	d9402f17 	ldw	r5,188(sp)
 80226ac:	20800017 	ldw	r2,0(r4)
 80226b0:	2807d7fa 	srai	r3,r5,31
 80226b4:	21000104 	addi	r4,r4,4
 80226b8:	d9002e15 	stw	r4,184(sp)
 80226bc:	11400015 	stw	r5,0(r2)
 80226c0:	10c00115 	stw	r3,4(r2)
 80226c4:	003cbe06 	br	80219c0 <__alt_data_end+0xfffe25c0>
 80226c8:	84001014 	ori	r16,r16,64
 80226cc:	bc400007 	ldb	r17,0(r23)
 80226d0:	003ce506 	br	8021a68 <__alt_data_end+0xfffe2668>
 80226d4:	010200f4 	movhi	r4,2051
 80226d8:	21074704 	addi	r4,r4,7452
 80226dc:	0039883a 	mov	fp,zero
 80226e0:	d9003a15 	stw	r4,232(sp)
 80226e4:	04401e04 	movi	r17,120
 80226e8:	003f6906 	br	8022490 <__alt_data_end+0xfffe3090>
 80226ec:	8025883a 	mov	r18,r16
 80226f0:	dc002903 	ldbu	r16,164(sp)
 80226f4:	e011883a 	mov	r8,fp
 80226f8:	84003fcc 	andi	r16,r16,255
 80226fc:	8005261e 	bne	r16,zero,8023b98 <___svfprintf_internal_r+0x2284>
 8022700:	883d6526 	beq	r17,zero,8021c98 <__alt_data_end+0xfffe2898>
 8022704:	00c00044 	movi	r3,1
 8022708:	d8c02915 	stw	r3,164(sp)
 802270c:	dc401405 	stb	r17,80(sp)
 8022710:	d8002785 	stb	zero,158(sp)
 8022714:	003f7a06 	br	8022500 <__alt_data_end+0xfffe3100>
 8022718:	010200f4 	movhi	r4,2051
 802271c:	21074704 	addi	r4,r4,7452
 8022720:	d9003a15 	stw	r4,232(sp)
 8022724:	d8c02e15 	stw	r3,184(sp)
 8022728:	1025883a 	mov	r18,r2
 802272c:	04401e04 	movi	r17,120
 8022730:	a584b03a 	or	r2,r20,r22
 8022734:	1000fa1e 	bne	r2,zero,8022b20 <___svfprintf_internal_r+0x120c>
 8022738:	0039883a 	mov	fp,zero
 802273c:	00800084 	movi	r2,2
 8022740:	10803fcc 	andi	r2,r2,255
 8022744:	00c00044 	movi	r3,1
 8022748:	10c21626 	beq	r2,r3,8022fa4 <___svfprintf_internal_r+0x1690>
 802274c:	00c00084 	movi	r3,2
 8022750:	10fe0e1e 	bne	r2,r3,8021f8c <__alt_data_end+0xfffe2b8c>
 8022754:	003d4606 	br	8021c70 <__alt_data_end+0xfffe2870>
 8022758:	d8c02017 	ldw	r3,128(sp)
 802275c:	003e7306 	br	802212c <__alt_data_end+0xfffe2d2c>
 8022760:	00801944 	movi	r2,101
 8022764:	14407c0e 	bge	r2,r17,8022958 <___svfprintf_internal_r+0x1044>
 8022768:	d9003617 	ldw	r4,216(sp)
 802276c:	d9403717 	ldw	r5,220(sp)
 8022770:	000d883a 	mov	r6,zero
 8022774:	000f883a 	mov	r7,zero
 8022778:	d8c03d15 	stw	r3,244(sp)
 802277c:	da003e15 	stw	r8,248(sp)
 8022780:	802c71c0 	call	802c71c <__eqdf2>
 8022784:	d8c03d17 	ldw	r3,244(sp)
 8022788:	da003e17 	ldw	r8,248(sp)
 802278c:	1000f51e 	bne	r2,zero,8022b64 <___svfprintf_internal_r+0x1250>
 8022790:	d8801f17 	ldw	r2,124(sp)
 8022794:	010200f4 	movhi	r4,2051
 8022798:	21074e04 	addi	r4,r4,7480
 802279c:	18c00044 	addi	r3,r3,1
 80227a0:	10800044 	addi	r2,r2,1
 80227a4:	41000015 	stw	r4,0(r8)
 80227a8:	01000044 	movi	r4,1
 80227ac:	41000115 	stw	r4,4(r8)
 80227b0:	d8c02015 	stw	r3,128(sp)
 80227b4:	d8801f15 	stw	r2,124(sp)
 80227b8:	010001c4 	movi	r4,7
 80227bc:	20826616 	blt	r4,r2,8023158 <___svfprintf_internal_r+0x1844>
 80227c0:	42000204 	addi	r8,r8,8
 80227c4:	d8802617 	ldw	r2,152(sp)
 80227c8:	d9403317 	ldw	r5,204(sp)
 80227cc:	11400216 	blt	r2,r5,80227d8 <___svfprintf_internal_r+0xec4>
 80227d0:	9080004c 	andi	r2,r18,1
 80227d4:	103eb326 	beq	r2,zero,80222a4 <__alt_data_end+0xfffe2ea4>
 80227d8:	d8803817 	ldw	r2,224(sp)
 80227dc:	d9003417 	ldw	r4,208(sp)
 80227e0:	d9403817 	ldw	r5,224(sp)
 80227e4:	1887883a 	add	r3,r3,r2
 80227e8:	d8801f17 	ldw	r2,124(sp)
 80227ec:	41000015 	stw	r4,0(r8)
 80227f0:	41400115 	stw	r5,4(r8)
 80227f4:	10800044 	addi	r2,r2,1
 80227f8:	d8c02015 	stw	r3,128(sp)
 80227fc:	d8801f15 	stw	r2,124(sp)
 8022800:	010001c4 	movi	r4,7
 8022804:	2082af16 	blt	r4,r2,80232c4 <___svfprintf_internal_r+0x19b0>
 8022808:	42000204 	addi	r8,r8,8
 802280c:	d8803317 	ldw	r2,204(sp)
 8022810:	143fffc4 	addi	r16,r2,-1
 8022814:	043ea30e 	bge	zero,r16,80222a4 <__alt_data_end+0xfffe2ea4>
 8022818:	04400404 	movi	r17,16
 802281c:	d8801f17 	ldw	r2,124(sp)
 8022820:	8c00860e 	bge	r17,r16,8022a3c <___svfprintf_internal_r+0x1128>
 8022824:	014200f4 	movhi	r5,2051
 8022828:	29474e84 	addi	r5,r5,7482
 802282c:	d9402c15 	stw	r5,176(sp)
 8022830:	058001c4 	movi	r22,7
 8022834:	dd002d17 	ldw	r20,180(sp)
 8022838:	00000306 	br	8022848 <___svfprintf_internal_r+0xf34>
 802283c:	42000204 	addi	r8,r8,8
 8022840:	843ffc04 	addi	r16,r16,-16
 8022844:	8c00800e 	bge	r17,r16,8022a48 <___svfprintf_internal_r+0x1134>
 8022848:	18c00404 	addi	r3,r3,16
 802284c:	10800044 	addi	r2,r2,1
 8022850:	45400015 	stw	r21,0(r8)
 8022854:	44400115 	stw	r17,4(r8)
 8022858:	d8c02015 	stw	r3,128(sp)
 802285c:	d8801f15 	stw	r2,124(sp)
 8022860:	b0bff60e 	bge	r22,r2,802283c <__alt_data_end+0xfffe343c>
 8022864:	d9801e04 	addi	r6,sp,120
 8022868:	a00b883a 	mov	r5,r20
 802286c:	9809883a 	mov	r4,r19
 8022870:	80283cc0 	call	80283cc <__ssprint_r>
 8022874:	103d0e1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022878:	d8c02017 	ldw	r3,128(sp)
 802287c:	d8801f17 	ldw	r2,124(sp)
 8022880:	da000404 	addi	r8,sp,16
 8022884:	003fee06 	br	8022840 <__alt_data_end+0xfffe3440>
 8022888:	d9403117 	ldw	r5,196(sp)
 802288c:	d8802917 	ldw	r2,164(sp)
 8022890:	28adc83a 	sub	r22,r5,r2
 8022894:	05be430e 	bge	zero,r22,80221a4 <__alt_data_end+0xfffe2da4>
 8022898:	07000404 	movi	fp,16
 802289c:	d8801f17 	ldw	r2,124(sp)
 80228a0:	e583a20e 	bge	fp,r22,802372c <___svfprintf_internal_r+0x1e18>
 80228a4:	014200f4 	movhi	r5,2051
 80228a8:	29474e84 	addi	r5,r5,7482
 80228ac:	dc403015 	stw	r17,192(sp)
 80228b0:	d9402c15 	stw	r5,176(sp)
 80228b4:	b023883a 	mov	r17,r22
 80228b8:	050001c4 	movi	r20,7
 80228bc:	902d883a 	mov	r22,r18
 80228c0:	8025883a 	mov	r18,r16
 80228c4:	dc002d17 	ldw	r16,180(sp)
 80228c8:	00000306 	br	80228d8 <___svfprintf_internal_r+0xfc4>
 80228cc:	8c7ffc04 	addi	r17,r17,-16
 80228d0:	42000204 	addi	r8,r8,8
 80228d4:	e440110e 	bge	fp,r17,802291c <___svfprintf_internal_r+0x1008>
 80228d8:	18c00404 	addi	r3,r3,16
 80228dc:	10800044 	addi	r2,r2,1
 80228e0:	45400015 	stw	r21,0(r8)
 80228e4:	47000115 	stw	fp,4(r8)
 80228e8:	d8c02015 	stw	r3,128(sp)
 80228ec:	d8801f15 	stw	r2,124(sp)
 80228f0:	a0bff60e 	bge	r20,r2,80228cc <__alt_data_end+0xfffe34cc>
 80228f4:	d9801e04 	addi	r6,sp,120
 80228f8:	800b883a 	mov	r5,r16
 80228fc:	9809883a 	mov	r4,r19
 8022900:	80283cc0 	call	80283cc <__ssprint_r>
 8022904:	103cea1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022908:	8c7ffc04 	addi	r17,r17,-16
 802290c:	d8c02017 	ldw	r3,128(sp)
 8022910:	d8801f17 	ldw	r2,124(sp)
 8022914:	da000404 	addi	r8,sp,16
 8022918:	e47fef16 	blt	fp,r17,80228d8 <__alt_data_end+0xfffe34d8>
 802291c:	9021883a 	mov	r16,r18
 8022920:	b025883a 	mov	r18,r22
 8022924:	882d883a 	mov	r22,r17
 8022928:	dc403017 	ldw	r17,192(sp)
 802292c:	d9002c17 	ldw	r4,176(sp)
 8022930:	1d87883a 	add	r3,r3,r22
 8022934:	10800044 	addi	r2,r2,1
 8022938:	41000015 	stw	r4,0(r8)
 802293c:	45800115 	stw	r22,4(r8)
 8022940:	d8c02015 	stw	r3,128(sp)
 8022944:	d8801f15 	stw	r2,124(sp)
 8022948:	010001c4 	movi	r4,7
 802294c:	20819a16 	blt	r4,r2,8022fb8 <___svfprintf_internal_r+0x16a4>
 8022950:	42000204 	addi	r8,r8,8
 8022954:	003e1306 	br	80221a4 <__alt_data_end+0xfffe2da4>
 8022958:	d9403317 	ldw	r5,204(sp)
 802295c:	00800044 	movi	r2,1
 8022960:	18c00044 	addi	r3,r3,1
 8022964:	1141710e 	bge	r2,r5,8022f2c <___svfprintf_internal_r+0x1618>
 8022968:	dc401f17 	ldw	r17,124(sp)
 802296c:	00800044 	movi	r2,1
 8022970:	40800115 	stw	r2,4(r8)
 8022974:	8c400044 	addi	r17,r17,1
 8022978:	44000015 	stw	r16,0(r8)
 802297c:	d8c02015 	stw	r3,128(sp)
 8022980:	dc401f15 	stw	r17,124(sp)
 8022984:	008001c4 	movi	r2,7
 8022988:	14417416 	blt	r2,r17,8022f5c <___svfprintf_internal_r+0x1648>
 802298c:	42000204 	addi	r8,r8,8
 8022990:	d8803817 	ldw	r2,224(sp)
 8022994:	d9003417 	ldw	r4,208(sp)
 8022998:	8c400044 	addi	r17,r17,1
 802299c:	10c7883a 	add	r3,r2,r3
 80229a0:	40800115 	stw	r2,4(r8)
 80229a4:	41000015 	stw	r4,0(r8)
 80229a8:	d8c02015 	stw	r3,128(sp)
 80229ac:	dc401f15 	stw	r17,124(sp)
 80229b0:	008001c4 	movi	r2,7
 80229b4:	14417216 	blt	r2,r17,8022f80 <___svfprintf_internal_r+0x166c>
 80229b8:	45800204 	addi	r22,r8,8
 80229bc:	d9003617 	ldw	r4,216(sp)
 80229c0:	d9403717 	ldw	r5,220(sp)
 80229c4:	000d883a 	mov	r6,zero
 80229c8:	000f883a 	mov	r7,zero
 80229cc:	d8c03d15 	stw	r3,244(sp)
 80229d0:	802c71c0 	call	802c71c <__eqdf2>
 80229d4:	d8c03d17 	ldw	r3,244(sp)
 80229d8:	1000b326 	beq	r2,zero,8022ca8 <___svfprintf_internal_r+0x1394>
 80229dc:	d9403317 	ldw	r5,204(sp)
 80229e0:	84000044 	addi	r16,r16,1
 80229e4:	8c400044 	addi	r17,r17,1
 80229e8:	28bfffc4 	addi	r2,r5,-1
 80229ec:	1887883a 	add	r3,r3,r2
 80229f0:	b0800115 	stw	r2,4(r22)
 80229f4:	b4000015 	stw	r16,0(r22)
 80229f8:	d8c02015 	stw	r3,128(sp)
 80229fc:	dc401f15 	stw	r17,124(sp)
 8022a00:	008001c4 	movi	r2,7
 8022a04:	1440d216 	blt	r2,r17,8022d50 <___svfprintf_internal_r+0x143c>
 8022a08:	b5800204 	addi	r22,r22,8
 8022a0c:	d9003b17 	ldw	r4,236(sp)
 8022a10:	df0022c4 	addi	fp,sp,139
 8022a14:	8c400044 	addi	r17,r17,1
 8022a18:	20c7883a 	add	r3,r4,r3
 8022a1c:	b7000015 	stw	fp,0(r22)
 8022a20:	b1000115 	stw	r4,4(r22)
 8022a24:	d8c02015 	stw	r3,128(sp)
 8022a28:	dc401f15 	stw	r17,124(sp)
 8022a2c:	008001c4 	movi	r2,7
 8022a30:	14400e16 	blt	r2,r17,8022a6c <___svfprintf_internal_r+0x1158>
 8022a34:	b2000204 	addi	r8,r22,8
 8022a38:	003e1a06 	br	80222a4 <__alt_data_end+0xfffe2ea4>
 8022a3c:	010200f4 	movhi	r4,2051
 8022a40:	21074e84 	addi	r4,r4,7482
 8022a44:	d9002c15 	stw	r4,176(sp)
 8022a48:	d9002c17 	ldw	r4,176(sp)
 8022a4c:	1c07883a 	add	r3,r3,r16
 8022a50:	44000115 	stw	r16,4(r8)
 8022a54:	41000015 	stw	r4,0(r8)
 8022a58:	10800044 	addi	r2,r2,1
 8022a5c:	d8c02015 	stw	r3,128(sp)
 8022a60:	d8801f15 	stw	r2,124(sp)
 8022a64:	010001c4 	movi	r4,7
 8022a68:	20be0d0e 	bge	r4,r2,80222a0 <__alt_data_end+0xfffe2ea0>
 8022a6c:	d9402d17 	ldw	r5,180(sp)
 8022a70:	d9801e04 	addi	r6,sp,120
 8022a74:	9809883a 	mov	r4,r19
 8022a78:	80283cc0 	call	80283cc <__ssprint_r>
 8022a7c:	103c8c1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022a80:	d8c02017 	ldw	r3,128(sp)
 8022a84:	da000404 	addi	r8,sp,16
 8022a88:	003e0606 	br	80222a4 <__alt_data_end+0xfffe2ea4>
 8022a8c:	d9402d17 	ldw	r5,180(sp)
 8022a90:	d9801e04 	addi	r6,sp,120
 8022a94:	9809883a 	mov	r4,r19
 8022a98:	80283cc0 	call	80283cc <__ssprint_r>
 8022a9c:	103e3d26 	beq	r2,zero,8022394 <__alt_data_end+0xfffe2f94>
 8022aa0:	003c8306 	br	8021cb0 <__alt_data_end+0xfffe28b0>
 8022aa4:	d9402d17 	ldw	r5,180(sp)
 8022aa8:	d9801e04 	addi	r6,sp,120
 8022aac:	9809883a 	mov	r4,r19
 8022ab0:	80283cc0 	call	80283cc <__ssprint_r>
 8022ab4:	103c7e1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022ab8:	d8c02017 	ldw	r3,128(sp)
 8022abc:	da000404 	addi	r8,sp,16
 8022ac0:	003deb06 	br	8022270 <__alt_data_end+0xfffe2e70>
 8022ac4:	d9402d17 	ldw	r5,180(sp)
 8022ac8:	d9801e04 	addi	r6,sp,120
 8022acc:	9809883a 	mov	r4,r19
 8022ad0:	80283cc0 	call	80283cc <__ssprint_r>
 8022ad4:	103c761e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022ad8:	d8c02017 	ldw	r3,128(sp)
 8022adc:	da000404 	addi	r8,sp,16
 8022ae0:	003d9f06 	br	8022160 <__alt_data_end+0xfffe2d60>
 8022ae4:	d9402d17 	ldw	r5,180(sp)
 8022ae8:	d9801e04 	addi	r6,sp,120
 8022aec:	9809883a 	mov	r4,r19
 8022af0:	80283cc0 	call	80283cc <__ssprint_r>
 8022af4:	103c6e1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022af8:	d8c02017 	ldw	r3,128(sp)
 8022afc:	da000404 	addi	r8,sp,16
 8022b00:	003da506 	br	8022198 <__alt_data_end+0xfffe2d98>
 8022b04:	d9402a17 	ldw	r5,168(sp)
 8022b08:	d8002785 	stb	zero,158(sp)
 8022b0c:	283f0816 	blt	r5,zero,8022730 <__alt_data_end+0xfffe3330>
 8022b10:	00ffdfc4 	movi	r3,-129
 8022b14:	a584b03a 	or	r2,r20,r22
 8022b18:	90e4703a 	and	r18,r18,r3
 8022b1c:	103c5126 	beq	r2,zero,8021c64 <__alt_data_end+0xfffe2864>
 8022b20:	0039883a 	mov	fp,zero
 8022b24:	003e5a06 	br	8022490 <__alt_data_end+0xfffe3090>
 8022b28:	9080040c 	andi	r2,r18,16
 8022b2c:	10013d26 	beq	r2,zero,8023024 <___svfprintf_internal_r+0x1710>
 8022b30:	d8c02e17 	ldw	r3,184(sp)
 8022b34:	d9002a17 	ldw	r4,168(sp)
 8022b38:	d8002785 	stb	zero,158(sp)
 8022b3c:	18800104 	addi	r2,r3,4
 8022b40:	1d000017 	ldw	r20,0(r3)
 8022b44:	002d883a 	mov	r22,zero
 8022b48:	20013f16 	blt	r4,zero,8023048 <___svfprintf_internal_r+0x1734>
 8022b4c:	00ffdfc4 	movi	r3,-129
 8022b50:	d8802e15 	stw	r2,184(sp)
 8022b54:	90e4703a 	and	r18,r18,r3
 8022b58:	a03d0926 	beq	r20,zero,8021f80 <__alt_data_end+0xfffe2b80>
 8022b5c:	0039883a 	mov	fp,zero
 8022b60:	003d0c06 	br	8021f94 <__alt_data_end+0xfffe2b94>
 8022b64:	dc402617 	ldw	r17,152(sp)
 8022b68:	0441830e 	bge	zero,r17,8023178 <___svfprintf_internal_r+0x1864>
 8022b6c:	dc403217 	ldw	r17,200(sp)
 8022b70:	d8803317 	ldw	r2,204(sp)
 8022b74:	1440010e 	bge	r2,r17,8022b7c <___svfprintf_internal_r+0x1268>
 8022b78:	1023883a 	mov	r17,r2
 8022b7c:	04400a0e 	bge	zero,r17,8022ba8 <___svfprintf_internal_r+0x1294>
 8022b80:	d8801f17 	ldw	r2,124(sp)
 8022b84:	1c47883a 	add	r3,r3,r17
 8022b88:	44000015 	stw	r16,0(r8)
 8022b8c:	10800044 	addi	r2,r2,1
 8022b90:	44400115 	stw	r17,4(r8)
 8022b94:	d8c02015 	stw	r3,128(sp)
 8022b98:	d8801f15 	stw	r2,124(sp)
 8022b9c:	010001c4 	movi	r4,7
 8022ba0:	20827516 	blt	r4,r2,8023578 <___svfprintf_internal_r+0x1c64>
 8022ba4:	42000204 	addi	r8,r8,8
 8022ba8:	88027b16 	blt	r17,zero,8023598 <___svfprintf_internal_r+0x1c84>
 8022bac:	d9003217 	ldw	r4,200(sp)
 8022bb0:	2463c83a 	sub	r17,r4,r17
 8022bb4:	0440990e 	bge	zero,r17,8022e1c <___svfprintf_internal_r+0x1508>
 8022bb8:	05800404 	movi	r22,16
 8022bbc:	d8801f17 	ldw	r2,124(sp)
 8022bc0:	b441530e 	bge	r22,r17,8023110 <___svfprintf_internal_r+0x17fc>
 8022bc4:	010200f4 	movhi	r4,2051
 8022bc8:	21074e84 	addi	r4,r4,7482
 8022bcc:	d9002c15 	stw	r4,176(sp)
 8022bd0:	070001c4 	movi	fp,7
 8022bd4:	dd002d17 	ldw	r20,180(sp)
 8022bd8:	00000306 	br	8022be8 <___svfprintf_internal_r+0x12d4>
 8022bdc:	42000204 	addi	r8,r8,8
 8022be0:	8c7ffc04 	addi	r17,r17,-16
 8022be4:	b4414d0e 	bge	r22,r17,802311c <___svfprintf_internal_r+0x1808>
 8022be8:	18c00404 	addi	r3,r3,16
 8022bec:	10800044 	addi	r2,r2,1
 8022bf0:	45400015 	stw	r21,0(r8)
 8022bf4:	45800115 	stw	r22,4(r8)
 8022bf8:	d8c02015 	stw	r3,128(sp)
 8022bfc:	d8801f15 	stw	r2,124(sp)
 8022c00:	e0bff60e 	bge	fp,r2,8022bdc <__alt_data_end+0xfffe37dc>
 8022c04:	d9801e04 	addi	r6,sp,120
 8022c08:	a00b883a 	mov	r5,r20
 8022c0c:	9809883a 	mov	r4,r19
 8022c10:	80283cc0 	call	80283cc <__ssprint_r>
 8022c14:	103c261e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022c18:	d8c02017 	ldw	r3,128(sp)
 8022c1c:	d8801f17 	ldw	r2,124(sp)
 8022c20:	da000404 	addi	r8,sp,16
 8022c24:	003fee06 	br	8022be0 <__alt_data_end+0xfffe37e0>
 8022c28:	d9402d17 	ldw	r5,180(sp)
 8022c2c:	d9801e04 	addi	r6,sp,120
 8022c30:	9809883a 	mov	r4,r19
 8022c34:	80283cc0 	call	80283cc <__ssprint_r>
 8022c38:	103c1d1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022c3c:	d8c02017 	ldw	r3,128(sp)
 8022c40:	df002787 	ldb	fp,158(sp)
 8022c44:	da000404 	addi	r8,sp,16
 8022c48:	003d3806 	br	802212c <__alt_data_end+0xfffe2d2c>
 8022c4c:	9080040c 	andi	r2,r18,16
 8022c50:	10005c26 	beq	r2,zero,8022dc4 <___svfprintf_internal_r+0x14b0>
 8022c54:	d8c02e17 	ldw	r3,184(sp)
 8022c58:	d9002a17 	ldw	r4,168(sp)
 8022c5c:	d8002785 	stb	zero,158(sp)
 8022c60:	18800104 	addi	r2,r3,4
 8022c64:	1d000017 	ldw	r20,0(r3)
 8022c68:	002d883a 	mov	r22,zero
 8022c6c:	20005e16 	blt	r4,zero,8022de8 <___svfprintf_internal_r+0x14d4>
 8022c70:	00ffdfc4 	movi	r3,-129
 8022c74:	d8802e15 	stw	r2,184(sp)
 8022c78:	90e4703a 	and	r18,r18,r3
 8022c7c:	0039883a 	mov	fp,zero
 8022c80:	a03ddf26 	beq	r20,zero,8022400 <__alt_data_end+0xfffe3000>
 8022c84:	00800244 	movi	r2,9
 8022c88:	153c8e36 	bltu	r2,r20,8021ec4 <__alt_data_end+0xfffe2ac4>
 8022c8c:	a5000c04 	addi	r20,r20,48
 8022c90:	dc001dc4 	addi	r16,sp,119
 8022c94:	dd001dc5 	stb	r20,119(sp)
 8022c98:	d8c02817 	ldw	r3,160(sp)
 8022c9c:	1c07c83a 	sub	r3,r3,r16
 8022ca0:	d8c02b15 	stw	r3,172(sp)
 8022ca4:	003cd306 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 8022ca8:	d8803317 	ldw	r2,204(sp)
 8022cac:	143fffc4 	addi	r16,r2,-1
 8022cb0:	043f560e 	bge	zero,r16,8022a0c <__alt_data_end+0xfffe360c>
 8022cb4:	07000404 	movi	fp,16
 8022cb8:	e403530e 	bge	fp,r16,8023a08 <___svfprintf_internal_r+0x20f4>
 8022cbc:	014200f4 	movhi	r5,2051
 8022cc0:	29474e84 	addi	r5,r5,7482
 8022cc4:	d9402c15 	stw	r5,176(sp)
 8022cc8:	01c001c4 	movi	r7,7
 8022ccc:	dd002d17 	ldw	r20,180(sp)
 8022cd0:	00000306 	br	8022ce0 <___svfprintf_internal_r+0x13cc>
 8022cd4:	843ffc04 	addi	r16,r16,-16
 8022cd8:	b5800204 	addi	r22,r22,8
 8022cdc:	e400130e 	bge	fp,r16,8022d2c <___svfprintf_internal_r+0x1418>
 8022ce0:	18c00404 	addi	r3,r3,16
 8022ce4:	8c400044 	addi	r17,r17,1
 8022ce8:	b5400015 	stw	r21,0(r22)
 8022cec:	b7000115 	stw	fp,4(r22)
 8022cf0:	d8c02015 	stw	r3,128(sp)
 8022cf4:	dc401f15 	stw	r17,124(sp)
 8022cf8:	3c7ff60e 	bge	r7,r17,8022cd4 <__alt_data_end+0xfffe38d4>
 8022cfc:	d9801e04 	addi	r6,sp,120
 8022d00:	a00b883a 	mov	r5,r20
 8022d04:	9809883a 	mov	r4,r19
 8022d08:	d9c03d15 	stw	r7,244(sp)
 8022d0c:	80283cc0 	call	80283cc <__ssprint_r>
 8022d10:	d9c03d17 	ldw	r7,244(sp)
 8022d14:	103be61e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022d18:	843ffc04 	addi	r16,r16,-16
 8022d1c:	d8c02017 	ldw	r3,128(sp)
 8022d20:	dc401f17 	ldw	r17,124(sp)
 8022d24:	dd800404 	addi	r22,sp,16
 8022d28:	e43fed16 	blt	fp,r16,8022ce0 <__alt_data_end+0xfffe38e0>
 8022d2c:	d8802c17 	ldw	r2,176(sp)
 8022d30:	1c07883a 	add	r3,r3,r16
 8022d34:	8c400044 	addi	r17,r17,1
 8022d38:	b0800015 	stw	r2,0(r22)
 8022d3c:	b4000115 	stw	r16,4(r22)
 8022d40:	d8c02015 	stw	r3,128(sp)
 8022d44:	dc401f15 	stw	r17,124(sp)
 8022d48:	008001c4 	movi	r2,7
 8022d4c:	147f2e0e 	bge	r2,r17,8022a08 <__alt_data_end+0xfffe3608>
 8022d50:	d9402d17 	ldw	r5,180(sp)
 8022d54:	d9801e04 	addi	r6,sp,120
 8022d58:	9809883a 	mov	r4,r19
 8022d5c:	80283cc0 	call	80283cc <__ssprint_r>
 8022d60:	103bd31e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022d64:	d8c02017 	ldw	r3,128(sp)
 8022d68:	dc401f17 	ldw	r17,124(sp)
 8022d6c:	dd800404 	addi	r22,sp,16
 8022d70:	003f2606 	br	8022a0c <__alt_data_end+0xfffe360c>
 8022d74:	9080040c 	andi	r2,r18,16
 8022d78:	1000c326 	beq	r2,zero,8023088 <___svfprintf_internal_r+0x1774>
 8022d7c:	d9402e17 	ldw	r5,184(sp)
 8022d80:	2d000017 	ldw	r20,0(r5)
 8022d84:	29400104 	addi	r5,r5,4
 8022d88:	d9402e15 	stw	r5,184(sp)
 8022d8c:	a02dd7fa 	srai	r22,r20,31
 8022d90:	b005883a 	mov	r2,r22
 8022d94:	103c430e 	bge	r2,zero,8021ea4 <__alt_data_end+0xfffe2aa4>
 8022d98:	d9402a17 	ldw	r5,168(sp)
 8022d9c:	0529c83a 	sub	r20,zero,r20
 8022da0:	07000b44 	movi	fp,45
 8022da4:	a004c03a 	cmpne	r2,r20,zero
 8022da8:	05adc83a 	sub	r22,zero,r22
 8022dac:	df002785 	stb	fp,158(sp)
 8022db0:	b0adc83a 	sub	r22,r22,r2
 8022db4:	28022e16 	blt	r5,zero,8023670 <___svfprintf_internal_r+0x1d5c>
 8022db8:	00bfdfc4 	movi	r2,-129
 8022dbc:	90a4703a 	and	r18,r18,r2
 8022dc0:	003c3f06 	br	8021ec0 <__alt_data_end+0xfffe2ac0>
 8022dc4:	9080100c 	andi	r2,r18,64
 8022dc8:	d8002785 	stb	zero,158(sp)
 8022dcc:	10012526 	beq	r2,zero,8023264 <___svfprintf_internal_r+0x1950>
 8022dd0:	d9402e17 	ldw	r5,184(sp)
 8022dd4:	d8c02a17 	ldw	r3,168(sp)
 8022dd8:	002d883a 	mov	r22,zero
 8022ddc:	28800104 	addi	r2,r5,4
 8022de0:	2d00000b 	ldhu	r20,0(r5)
 8022de4:	183fa20e 	bge	r3,zero,8022c70 <__alt_data_end+0xfffe3870>
 8022de8:	d8802e15 	stw	r2,184(sp)
 8022dec:	0039883a 	mov	fp,zero
 8022df0:	a584b03a 	or	r2,r20,r22
 8022df4:	103c321e 	bne	r2,zero,8021ec0 <__alt_data_end+0xfffe2ac0>
 8022df8:	00800044 	movi	r2,1
 8022dfc:	003e5006 	br	8022740 <__alt_data_end+0xfffe3340>
 8022e00:	d9402d17 	ldw	r5,180(sp)
 8022e04:	d9801e04 	addi	r6,sp,120
 8022e08:	9809883a 	mov	r4,r19
 8022e0c:	80283cc0 	call	80283cc <__ssprint_r>
 8022e10:	103ba71e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022e14:	d8c02017 	ldw	r3,128(sp)
 8022e18:	da000404 	addi	r8,sp,16
 8022e1c:	d9003217 	ldw	r4,200(sp)
 8022e20:	d8802617 	ldw	r2,152(sp)
 8022e24:	d9403317 	ldw	r5,204(sp)
 8022e28:	8123883a 	add	r17,r16,r4
 8022e2c:	11400216 	blt	r2,r5,8022e38 <___svfprintf_internal_r+0x1524>
 8022e30:	9100004c 	andi	r4,r18,1
 8022e34:	20000d26 	beq	r4,zero,8022e6c <___svfprintf_internal_r+0x1558>
 8022e38:	d9003817 	ldw	r4,224(sp)
 8022e3c:	d9403417 	ldw	r5,208(sp)
 8022e40:	1907883a 	add	r3,r3,r4
 8022e44:	d9001f17 	ldw	r4,124(sp)
 8022e48:	41400015 	stw	r5,0(r8)
 8022e4c:	d9403817 	ldw	r5,224(sp)
 8022e50:	21000044 	addi	r4,r4,1
 8022e54:	d8c02015 	stw	r3,128(sp)
 8022e58:	41400115 	stw	r5,4(r8)
 8022e5c:	d9001f15 	stw	r4,124(sp)
 8022e60:	014001c4 	movi	r5,7
 8022e64:	2901dc16 	blt	r5,r4,80235d8 <___svfprintf_internal_r+0x1cc4>
 8022e68:	42000204 	addi	r8,r8,8
 8022e6c:	d9003317 	ldw	r4,204(sp)
 8022e70:	8121883a 	add	r16,r16,r4
 8022e74:	2085c83a 	sub	r2,r4,r2
 8022e78:	8461c83a 	sub	r16,r16,r17
 8022e7c:	1400010e 	bge	r2,r16,8022e84 <___svfprintf_internal_r+0x1570>
 8022e80:	1021883a 	mov	r16,r2
 8022e84:	04000a0e 	bge	zero,r16,8022eb0 <___svfprintf_internal_r+0x159c>
 8022e88:	d9001f17 	ldw	r4,124(sp)
 8022e8c:	1c07883a 	add	r3,r3,r16
 8022e90:	44400015 	stw	r17,0(r8)
 8022e94:	21000044 	addi	r4,r4,1
 8022e98:	44000115 	stw	r16,4(r8)
 8022e9c:	d8c02015 	stw	r3,128(sp)
 8022ea0:	d9001f15 	stw	r4,124(sp)
 8022ea4:	014001c4 	movi	r5,7
 8022ea8:	2901e616 	blt	r5,r4,8023644 <___svfprintf_internal_r+0x1d30>
 8022eac:	42000204 	addi	r8,r8,8
 8022eb0:	8001f616 	blt	r16,zero,802368c <___svfprintf_internal_r+0x1d78>
 8022eb4:	1421c83a 	sub	r16,r2,r16
 8022eb8:	043cfa0e 	bge	zero,r16,80222a4 <__alt_data_end+0xfffe2ea4>
 8022ebc:	04400404 	movi	r17,16
 8022ec0:	d8801f17 	ldw	r2,124(sp)
 8022ec4:	8c3edd0e 	bge	r17,r16,8022a3c <__alt_data_end+0xfffe363c>
 8022ec8:	014200f4 	movhi	r5,2051
 8022ecc:	29474e84 	addi	r5,r5,7482
 8022ed0:	d9402c15 	stw	r5,176(sp)
 8022ed4:	058001c4 	movi	r22,7
 8022ed8:	dd002d17 	ldw	r20,180(sp)
 8022edc:	00000306 	br	8022eec <___svfprintf_internal_r+0x15d8>
 8022ee0:	42000204 	addi	r8,r8,8
 8022ee4:	843ffc04 	addi	r16,r16,-16
 8022ee8:	8c3ed70e 	bge	r17,r16,8022a48 <__alt_data_end+0xfffe3648>
 8022eec:	18c00404 	addi	r3,r3,16
 8022ef0:	10800044 	addi	r2,r2,1
 8022ef4:	45400015 	stw	r21,0(r8)
 8022ef8:	44400115 	stw	r17,4(r8)
 8022efc:	d8c02015 	stw	r3,128(sp)
 8022f00:	d8801f15 	stw	r2,124(sp)
 8022f04:	b0bff60e 	bge	r22,r2,8022ee0 <__alt_data_end+0xfffe3ae0>
 8022f08:	d9801e04 	addi	r6,sp,120
 8022f0c:	a00b883a 	mov	r5,r20
 8022f10:	9809883a 	mov	r4,r19
 8022f14:	80283cc0 	call	80283cc <__ssprint_r>
 8022f18:	103b651e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022f1c:	d8c02017 	ldw	r3,128(sp)
 8022f20:	d8801f17 	ldw	r2,124(sp)
 8022f24:	da000404 	addi	r8,sp,16
 8022f28:	003fee06 	br	8022ee4 <__alt_data_end+0xfffe3ae4>
 8022f2c:	9088703a 	and	r4,r18,r2
 8022f30:	203e8d1e 	bne	r4,zero,8022968 <__alt_data_end+0xfffe3568>
 8022f34:	dc401f17 	ldw	r17,124(sp)
 8022f38:	40800115 	stw	r2,4(r8)
 8022f3c:	44000015 	stw	r16,0(r8)
 8022f40:	8c400044 	addi	r17,r17,1
 8022f44:	d8c02015 	stw	r3,128(sp)
 8022f48:	dc401f15 	stw	r17,124(sp)
 8022f4c:	008001c4 	movi	r2,7
 8022f50:	147f7f16 	blt	r2,r17,8022d50 <__alt_data_end+0xfffe3950>
 8022f54:	45800204 	addi	r22,r8,8
 8022f58:	003eac06 	br	8022a0c <__alt_data_end+0xfffe360c>
 8022f5c:	d9402d17 	ldw	r5,180(sp)
 8022f60:	d9801e04 	addi	r6,sp,120
 8022f64:	9809883a 	mov	r4,r19
 8022f68:	80283cc0 	call	80283cc <__ssprint_r>
 8022f6c:	103b501e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022f70:	d8c02017 	ldw	r3,128(sp)
 8022f74:	dc401f17 	ldw	r17,124(sp)
 8022f78:	da000404 	addi	r8,sp,16
 8022f7c:	003e8406 	br	8022990 <__alt_data_end+0xfffe3590>
 8022f80:	d9402d17 	ldw	r5,180(sp)
 8022f84:	d9801e04 	addi	r6,sp,120
 8022f88:	9809883a 	mov	r4,r19
 8022f8c:	80283cc0 	call	80283cc <__ssprint_r>
 8022f90:	103b471e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022f94:	d8c02017 	ldw	r3,128(sp)
 8022f98:	dc401f17 	ldw	r17,124(sp)
 8022f9c:	dd800404 	addi	r22,sp,16
 8022fa0:	003e8606 	br	80229bc <__alt_data_end+0xfffe35bc>
 8022fa4:	0029883a 	mov	r20,zero
 8022fa8:	a5000c04 	addi	r20,r20,48
 8022fac:	dc001dc4 	addi	r16,sp,119
 8022fb0:	dd001dc5 	stb	r20,119(sp)
 8022fb4:	003f3806 	br	8022c98 <__alt_data_end+0xfffe3898>
 8022fb8:	d9402d17 	ldw	r5,180(sp)
 8022fbc:	d9801e04 	addi	r6,sp,120
 8022fc0:	9809883a 	mov	r4,r19
 8022fc4:	80283cc0 	call	80283cc <__ssprint_r>
 8022fc8:	103b391e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8022fcc:	d8c02017 	ldw	r3,128(sp)
 8022fd0:	da000404 	addi	r8,sp,16
 8022fd4:	003c7306 	br	80221a4 <__alt_data_end+0xfffe2da4>
 8022fd8:	d9003617 	ldw	r4,216(sp)
 8022fdc:	d9403717 	ldw	r5,220(sp)
 8022fe0:	da003e15 	stw	r8,248(sp)
 8022fe4:	80280ec0 	call	80280ec <__fpclassifyd>
 8022fe8:	da003e17 	ldw	r8,248(sp)
 8022fec:	1000bd1e 	bne	r2,zero,80232e4 <___svfprintf_internal_r+0x19d0>
 8022ff0:	008011c4 	movi	r2,71
 8022ff4:	14411e0e 	bge	r2,r17,8023470 <___svfprintf_internal_r+0x1b5c>
 8022ff8:	040200f4 	movhi	r16,2051
 8022ffc:	84074104 	addi	r16,r16,7428
 8023000:	00c000c4 	movi	r3,3
 8023004:	00bfdfc4 	movi	r2,-129
 8023008:	d8c02915 	stw	r3,164(sp)
 802300c:	90a4703a 	and	r18,r18,r2
 8023010:	df002783 	ldbu	fp,158(sp)
 8023014:	d8c02b15 	stw	r3,172(sp)
 8023018:	d8002a15 	stw	zero,168(sp)
 802301c:	d8003215 	stw	zero,200(sp)
 8023020:	003bfa06 	br	802200c <__alt_data_end+0xfffe2c0c>
 8023024:	9080100c 	andi	r2,r18,64
 8023028:	d8002785 	stb	zero,158(sp)
 802302c:	10009426 	beq	r2,zero,8023280 <___svfprintf_internal_r+0x196c>
 8023030:	d9402e17 	ldw	r5,184(sp)
 8023034:	d8c02a17 	ldw	r3,168(sp)
 8023038:	002d883a 	mov	r22,zero
 802303c:	28800104 	addi	r2,r5,4
 8023040:	2d00000b 	ldhu	r20,0(r5)
 8023044:	183ec10e 	bge	r3,zero,8022b4c <__alt_data_end+0xfffe374c>
 8023048:	a586b03a 	or	r3,r20,r22
 802304c:	d8802e15 	stw	r2,184(sp)
 8023050:	183ec21e 	bne	r3,zero,8022b5c <__alt_data_end+0xfffe375c>
 8023054:	0039883a 	mov	fp,zero
 8023058:	0005883a 	mov	r2,zero
 802305c:	003db806 	br	8022740 <__alt_data_end+0xfffe3340>
 8023060:	d8c02e17 	ldw	r3,184(sp)
 8023064:	d9002e17 	ldw	r4,184(sp)
 8023068:	d9402e17 	ldw	r5,184(sp)
 802306c:	18c00017 	ldw	r3,0(r3)
 8023070:	21000117 	ldw	r4,4(r4)
 8023074:	29400204 	addi	r5,r5,8
 8023078:	d8c03615 	stw	r3,216(sp)
 802307c:	d9003715 	stw	r4,220(sp)
 8023080:	d9402e15 	stw	r5,184(sp)
 8023084:	003b5a06 	br	8021df0 <__alt_data_end+0xfffe29f0>
 8023088:	9080100c 	andi	r2,r18,64
 802308c:	10010726 	beq	r2,zero,80234ac <___svfprintf_internal_r+0x1b98>
 8023090:	d8802e17 	ldw	r2,184(sp)
 8023094:	1500000f 	ldh	r20,0(r2)
 8023098:	10800104 	addi	r2,r2,4
 802309c:	d8802e15 	stw	r2,184(sp)
 80230a0:	a02dd7fa 	srai	r22,r20,31
 80230a4:	b005883a 	mov	r2,r22
 80230a8:	003b7d06 	br	8021ea0 <__alt_data_end+0xfffe2aa0>
 80230ac:	9080100c 	andi	r2,r18,64
 80230b0:	10010526 	beq	r2,zero,80234c8 <___svfprintf_internal_r+0x1bb4>
 80230b4:	d8c02e17 	ldw	r3,184(sp)
 80230b8:	002d883a 	mov	r22,zero
 80230bc:	1d00000b 	ldhu	r20,0(r3)
 80230c0:	18c00104 	addi	r3,r3,4
 80230c4:	d8c02e15 	stw	r3,184(sp)
 80230c8:	003ce206 	br	8022454 <__alt_data_end+0xfffe3054>
 80230cc:	bc400007 	ldb	r17,0(r23)
 80230d0:	003a6506 	br	8021a68 <__alt_data_end+0xfffe2668>
 80230d4:	9080040c 	andi	r2,r18,16
 80230d8:	10010126 	beq	r2,zero,80234e0 <___svfprintf_internal_r+0x1bcc>
 80230dc:	d8c02e17 	ldw	r3,184(sp)
 80230e0:	d9002f17 	ldw	r4,188(sp)
 80230e4:	18800017 	ldw	r2,0(r3)
 80230e8:	18c00104 	addi	r3,r3,4
 80230ec:	d8c02e15 	stw	r3,184(sp)
 80230f0:	11000015 	stw	r4,0(r2)
 80230f4:	003a3206 	br	80219c0 <__alt_data_end+0xfffe25c0>
 80230f8:	d9002a17 	ldw	r4,168(sp)
 80230fc:	d8002785 	stb	zero,158(sp)
 8023100:	203d8d16 	blt	r4,zero,8022738 <__alt_data_end+0xfffe3338>
 8023104:	00bfdfc4 	movi	r2,-129
 8023108:	90a4703a 	and	r18,r18,r2
 802310c:	003ad506 	br	8021c64 <__alt_data_end+0xfffe2864>
 8023110:	014200f4 	movhi	r5,2051
 8023114:	29474e84 	addi	r5,r5,7482
 8023118:	d9402c15 	stw	r5,176(sp)
 802311c:	d9402c17 	ldw	r5,176(sp)
 8023120:	1c47883a 	add	r3,r3,r17
 8023124:	10800044 	addi	r2,r2,1
 8023128:	41400015 	stw	r5,0(r8)
 802312c:	44400115 	stw	r17,4(r8)
 8023130:	d8c02015 	stw	r3,128(sp)
 8023134:	d8801f15 	stw	r2,124(sp)
 8023138:	010001c4 	movi	r4,7
 802313c:	20bf3016 	blt	r4,r2,8022e00 <__alt_data_end+0xfffe3a00>
 8023140:	42000204 	addi	r8,r8,8
 8023144:	003f3506 	br	8022e1c <__alt_data_end+0xfffe3a1c>
 8023148:	010200f4 	movhi	r4,2051
 802314c:	21074e84 	addi	r4,r4,7482
 8023150:	d9002c15 	stw	r4,176(sp)
 8023154:	003c3c06 	br	8022248 <__alt_data_end+0xfffe2e48>
 8023158:	d9402d17 	ldw	r5,180(sp)
 802315c:	d9801e04 	addi	r6,sp,120
 8023160:	9809883a 	mov	r4,r19
 8023164:	80283cc0 	call	80283cc <__ssprint_r>
 8023168:	103ad11e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 802316c:	d8c02017 	ldw	r3,128(sp)
 8023170:	da000404 	addi	r8,sp,16
 8023174:	003d9306 	br	80227c4 <__alt_data_end+0xfffe33c4>
 8023178:	d8801f17 	ldw	r2,124(sp)
 802317c:	014200f4 	movhi	r5,2051
 8023180:	01000044 	movi	r4,1
 8023184:	18c00044 	addi	r3,r3,1
 8023188:	10800044 	addi	r2,r2,1
 802318c:	29474e04 	addi	r5,r5,7480
 8023190:	41000115 	stw	r4,4(r8)
 8023194:	41400015 	stw	r5,0(r8)
 8023198:	d8c02015 	stw	r3,128(sp)
 802319c:	d8801f15 	stw	r2,124(sp)
 80231a0:	010001c4 	movi	r4,7
 80231a4:	2080b516 	blt	r4,r2,802347c <___svfprintf_internal_r+0x1b68>
 80231a8:	42000204 	addi	r8,r8,8
 80231ac:	8800041e 	bne	r17,zero,80231c0 <___svfprintf_internal_r+0x18ac>
 80231b0:	d8803317 	ldw	r2,204(sp)
 80231b4:	1000021e 	bne	r2,zero,80231c0 <___svfprintf_internal_r+0x18ac>
 80231b8:	9080004c 	andi	r2,r18,1
 80231bc:	103c3926 	beq	r2,zero,80222a4 <__alt_data_end+0xfffe2ea4>
 80231c0:	d9003817 	ldw	r4,224(sp)
 80231c4:	d8801f17 	ldw	r2,124(sp)
 80231c8:	d9403417 	ldw	r5,208(sp)
 80231cc:	20c7883a 	add	r3,r4,r3
 80231d0:	10800044 	addi	r2,r2,1
 80231d4:	41000115 	stw	r4,4(r8)
 80231d8:	41400015 	stw	r5,0(r8)
 80231dc:	d8c02015 	stw	r3,128(sp)
 80231e0:	d8801f15 	stw	r2,124(sp)
 80231e4:	010001c4 	movi	r4,7
 80231e8:	20818016 	blt	r4,r2,80237ec <___svfprintf_internal_r+0x1ed8>
 80231ec:	42000204 	addi	r8,r8,8
 80231f0:	0463c83a 	sub	r17,zero,r17
 80231f4:	0440cb0e 	bge	zero,r17,8023524 <___svfprintf_internal_r+0x1c10>
 80231f8:	05800404 	movi	r22,16
 80231fc:	b440e80e 	bge	r22,r17,80235a0 <___svfprintf_internal_r+0x1c8c>
 8023200:	014200f4 	movhi	r5,2051
 8023204:	29474e84 	addi	r5,r5,7482
 8023208:	d9402c15 	stw	r5,176(sp)
 802320c:	070001c4 	movi	fp,7
 8023210:	dd002d17 	ldw	r20,180(sp)
 8023214:	00000306 	br	8023224 <___svfprintf_internal_r+0x1910>
 8023218:	42000204 	addi	r8,r8,8
 802321c:	8c7ffc04 	addi	r17,r17,-16
 8023220:	b440e20e 	bge	r22,r17,80235ac <___svfprintf_internal_r+0x1c98>
 8023224:	18c00404 	addi	r3,r3,16
 8023228:	10800044 	addi	r2,r2,1
 802322c:	45400015 	stw	r21,0(r8)
 8023230:	45800115 	stw	r22,4(r8)
 8023234:	d8c02015 	stw	r3,128(sp)
 8023238:	d8801f15 	stw	r2,124(sp)
 802323c:	e0bff60e 	bge	fp,r2,8023218 <__alt_data_end+0xfffe3e18>
 8023240:	d9801e04 	addi	r6,sp,120
 8023244:	a00b883a 	mov	r5,r20
 8023248:	9809883a 	mov	r4,r19
 802324c:	80283cc0 	call	80283cc <__ssprint_r>
 8023250:	103a971e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8023254:	d8c02017 	ldw	r3,128(sp)
 8023258:	d8801f17 	ldw	r2,124(sp)
 802325c:	da000404 	addi	r8,sp,16
 8023260:	003fee06 	br	802321c <__alt_data_end+0xfffe3e1c>
 8023264:	d9002e17 	ldw	r4,184(sp)
 8023268:	d9402a17 	ldw	r5,168(sp)
 802326c:	002d883a 	mov	r22,zero
 8023270:	20800104 	addi	r2,r4,4
 8023274:	25000017 	ldw	r20,0(r4)
 8023278:	283e7d0e 	bge	r5,zero,8022c70 <__alt_data_end+0xfffe3870>
 802327c:	003eda06 	br	8022de8 <__alt_data_end+0xfffe39e8>
 8023280:	d9002e17 	ldw	r4,184(sp)
 8023284:	d9402a17 	ldw	r5,168(sp)
 8023288:	002d883a 	mov	r22,zero
 802328c:	20800104 	addi	r2,r4,4
 8023290:	25000017 	ldw	r20,0(r4)
 8023294:	283e2d0e 	bge	r5,zero,8022b4c <__alt_data_end+0xfffe374c>
 8023298:	003f6b06 	br	8023048 <__alt_data_end+0xfffe3c48>
 802329c:	d8c02e15 	stw	r3,184(sp)
 80232a0:	0039883a 	mov	fp,zero
 80232a4:	003ed206 	br	8022df0 <__alt_data_end+0xfffe39f0>
 80232a8:	bc400043 	ldbu	r17,1(r23)
 80232ac:	84000814 	ori	r16,r16,32
 80232b0:	bdc00044 	addi	r23,r23,1
 80232b4:	8c403fcc 	andi	r17,r17,255
 80232b8:	8c40201c 	xori	r17,r17,128
 80232bc:	8c7fe004 	addi	r17,r17,-128
 80232c0:	0039e906 	br	8021a68 <__alt_data_end+0xfffe2668>
 80232c4:	d9402d17 	ldw	r5,180(sp)
 80232c8:	d9801e04 	addi	r6,sp,120
 80232cc:	9809883a 	mov	r4,r19
 80232d0:	80283cc0 	call	80283cc <__ssprint_r>
 80232d4:	103a761e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 80232d8:	d8c02017 	ldw	r3,128(sp)
 80232dc:	da000404 	addi	r8,sp,16
 80232e0:	003d4a06 	br	802280c <__alt_data_end+0xfffe340c>
 80232e4:	d9002a17 	ldw	r4,168(sp)
 80232e8:	05bff7c4 	movi	r22,-33
 80232ec:	00bfffc4 	movi	r2,-1
 80232f0:	8dac703a 	and	r22,r17,r22
 80232f4:	20806a26 	beq	r4,r2,80234a0 <___svfprintf_internal_r+0x1b8c>
 80232f8:	008011c4 	movi	r2,71
 80232fc:	b0813726 	beq	r22,r2,80237dc <___svfprintf_internal_r+0x1ec8>
 8023300:	d9003717 	ldw	r4,220(sp)
 8023304:	90c04014 	ori	r3,r18,256
 8023308:	d8c02c15 	stw	r3,176(sp)
 802330c:	20015d16 	blt	r4,zero,8023884 <___svfprintf_internal_r+0x1f70>
 8023310:	dd003717 	ldw	r20,220(sp)
 8023314:	d8002905 	stb	zero,164(sp)
 8023318:	00801984 	movi	r2,102
 802331c:	88814026 	beq	r17,r2,8023820 <___svfprintf_internal_r+0x1f0c>
 8023320:	00801184 	movi	r2,70
 8023324:	88817126 	beq	r17,r2,80238ec <___svfprintf_internal_r+0x1fd8>
 8023328:	00801144 	movi	r2,69
 802332c:	b0816226 	beq	r22,r2,80238b8 <___svfprintf_internal_r+0x1fa4>
 8023330:	d8c02a17 	ldw	r3,168(sp)
 8023334:	d8802104 	addi	r2,sp,132
 8023338:	d8800315 	stw	r2,12(sp)
 802333c:	d9403617 	ldw	r5,216(sp)
 8023340:	d8802504 	addi	r2,sp,148
 8023344:	d8800215 	stw	r2,8(sp)
 8023348:	d8802604 	addi	r2,sp,152
 802334c:	d8c00015 	stw	r3,0(sp)
 8023350:	d8800115 	stw	r2,4(sp)
 8023354:	01c00084 	movi	r7,2
 8023358:	a00d883a 	mov	r6,r20
 802335c:	9809883a 	mov	r4,r19
 8023360:	d8c03d15 	stw	r3,244(sp)
 8023364:	da003e15 	stw	r8,248(sp)
 8023368:	8023df80 	call	8023df8 <_dtoa_r>
 802336c:	1021883a 	mov	r16,r2
 8023370:	008019c4 	movi	r2,103
 8023374:	d8c03d17 	ldw	r3,244(sp)
 8023378:	da003e17 	ldw	r8,248(sp)
 802337c:	8880e726 	beq	r17,r2,802371c <___svfprintf_internal_r+0x1e08>
 8023380:	008011c4 	movi	r2,71
 8023384:	8880d426 	beq	r17,r2,80236d8 <___svfprintf_internal_r+0x1dc4>
 8023388:	80f9883a 	add	fp,r16,r3
 802338c:	d9003617 	ldw	r4,216(sp)
 8023390:	000d883a 	mov	r6,zero
 8023394:	000f883a 	mov	r7,zero
 8023398:	a00b883a 	mov	r5,r20
 802339c:	da003e15 	stw	r8,248(sp)
 80233a0:	802c71c0 	call	802c71c <__eqdf2>
 80233a4:	da003e17 	ldw	r8,248(sp)
 80233a8:	1000e426 	beq	r2,zero,802373c <___svfprintf_internal_r+0x1e28>
 80233ac:	d8802117 	ldw	r2,132(sp)
 80233b0:	1700062e 	bgeu	r2,fp,80233cc <___svfprintf_internal_r+0x1ab8>
 80233b4:	01000c04 	movi	r4,48
 80233b8:	10c00044 	addi	r3,r2,1
 80233bc:	d8c02115 	stw	r3,132(sp)
 80233c0:	11000005 	stb	r4,0(r2)
 80233c4:	d8802117 	ldw	r2,132(sp)
 80233c8:	173ffb36 	bltu	r2,fp,80233b8 <__alt_data_end+0xfffe3fb8>
 80233cc:	1405c83a 	sub	r2,r2,r16
 80233d0:	d8803315 	stw	r2,204(sp)
 80233d4:	008011c4 	movi	r2,71
 80233d8:	b080c526 	beq	r22,r2,80236f0 <___svfprintf_internal_r+0x1ddc>
 80233dc:	00801944 	movi	r2,101
 80233e0:	1441d80e 	bge	r2,r17,8023b44 <___svfprintf_internal_r+0x2230>
 80233e4:	d8c02617 	ldw	r3,152(sp)
 80233e8:	00801984 	movi	r2,102
 80233ec:	d8c03215 	stw	r3,200(sp)
 80233f0:	88813426 	beq	r17,r2,80238c4 <___svfprintf_internal_r+0x1fb0>
 80233f4:	d8c03217 	ldw	r3,200(sp)
 80233f8:	d9003317 	ldw	r4,204(sp)
 80233fc:	19012516 	blt	r3,r4,8023894 <___svfprintf_internal_r+0x1f80>
 8023400:	9480004c 	andi	r18,r18,1
 8023404:	9001841e 	bne	r18,zero,8023a18 <___svfprintf_internal_r+0x2104>
 8023408:	1805883a 	mov	r2,r3
 802340c:	1801cb16 	blt	r3,zero,8023b3c <___svfprintf_internal_r+0x2228>
 8023410:	d8c03217 	ldw	r3,200(sp)
 8023414:	044019c4 	movi	r17,103
 8023418:	d8c02b15 	stw	r3,172(sp)
 802341c:	df002907 	ldb	fp,164(sp)
 8023420:	e000a61e 	bne	fp,zero,80236bc <___svfprintf_internal_r+0x1da8>
 8023424:	df002783 	ldbu	fp,158(sp)
 8023428:	d8802915 	stw	r2,164(sp)
 802342c:	dc802c17 	ldw	r18,176(sp)
 8023430:	d8002a15 	stw	zero,168(sp)
 8023434:	003af506 	br	802200c <__alt_data_end+0xfffe2c0c>
 8023438:	040200f4 	movhi	r16,2051
 802343c:	84073e04 	addi	r16,r16,7416
 8023440:	003a7e06 	br	8021e3c <__alt_data_end+0xfffe2a3c>
 8023444:	d9003917 	ldw	r4,228(sp)
 8023448:	04001004 	movi	r16,64
 802344c:	800b883a 	mov	r5,r16
 8023450:	8025f5c0 	call	8025f5c <_malloc_r>
 8023454:	d9002d17 	ldw	r4,180(sp)
 8023458:	20800015 	stw	r2,0(r4)
 802345c:	20800415 	stw	r2,16(r4)
 8023460:	1001d026 	beq	r2,zero,8023ba4 <___svfprintf_internal_r+0x2290>
 8023464:	d8802d17 	ldw	r2,180(sp)
 8023468:	14000515 	stw	r16,20(r2)
 802346c:	00394406 	br	8021980 <__alt_data_end+0xfffe2580>
 8023470:	040200f4 	movhi	r16,2051
 8023474:	84074004 	addi	r16,r16,7424
 8023478:	003ee106 	br	8023000 <__alt_data_end+0xfffe3c00>
 802347c:	d9402d17 	ldw	r5,180(sp)
 8023480:	d9801e04 	addi	r6,sp,120
 8023484:	9809883a 	mov	r4,r19
 8023488:	80283cc0 	call	80283cc <__ssprint_r>
 802348c:	103a081e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8023490:	dc402617 	ldw	r17,152(sp)
 8023494:	d8c02017 	ldw	r3,128(sp)
 8023498:	da000404 	addi	r8,sp,16
 802349c:	003f4306 	br	80231ac <__alt_data_end+0xfffe3dac>
 80234a0:	01400184 	movi	r5,6
 80234a4:	d9402a15 	stw	r5,168(sp)
 80234a8:	003f9506 	br	8023300 <__alt_data_end+0xfffe3f00>
 80234ac:	d8c02e17 	ldw	r3,184(sp)
 80234b0:	1d000017 	ldw	r20,0(r3)
 80234b4:	18c00104 	addi	r3,r3,4
 80234b8:	d8c02e15 	stw	r3,184(sp)
 80234bc:	a02dd7fa 	srai	r22,r20,31
 80234c0:	b005883a 	mov	r2,r22
 80234c4:	003a7606 	br	8021ea0 <__alt_data_end+0xfffe2aa0>
 80234c8:	d9002e17 	ldw	r4,184(sp)
 80234cc:	002d883a 	mov	r22,zero
 80234d0:	25000017 	ldw	r20,0(r4)
 80234d4:	21000104 	addi	r4,r4,4
 80234d8:	d9002e15 	stw	r4,184(sp)
 80234dc:	003bdd06 	br	8022454 <__alt_data_end+0xfffe3054>
 80234e0:	9480100c 	andi	r18,r18,64
 80234e4:	90006e26 	beq	r18,zero,80236a0 <___svfprintf_internal_r+0x1d8c>
 80234e8:	d9402e17 	ldw	r5,184(sp)
 80234ec:	d8c02f17 	ldw	r3,188(sp)
 80234f0:	28800017 	ldw	r2,0(r5)
 80234f4:	29400104 	addi	r5,r5,4
 80234f8:	d9402e15 	stw	r5,184(sp)
 80234fc:	10c0000d 	sth	r3,0(r2)
 8023500:	00392f06 	br	80219c0 <__alt_data_end+0xfffe25c0>
 8023504:	d9402d17 	ldw	r5,180(sp)
 8023508:	d9801e04 	addi	r6,sp,120
 802350c:	9809883a 	mov	r4,r19
 8023510:	80283cc0 	call	80283cc <__ssprint_r>
 8023514:	1039e61e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8023518:	d8c02017 	ldw	r3,128(sp)
 802351c:	d8801f17 	ldw	r2,124(sp)
 8023520:	da000404 	addi	r8,sp,16
 8023524:	d9403317 	ldw	r5,204(sp)
 8023528:	10800044 	addi	r2,r2,1
 802352c:	44000015 	stw	r16,0(r8)
 8023530:	28c7883a 	add	r3,r5,r3
 8023534:	003b5506 	br	802228c <__alt_data_end+0xfffe2e8c>
 8023538:	8009883a 	mov	r4,r16
 802353c:	df003e15 	stw	fp,248(sp)
 8023540:	802187c0 	call	802187c <strlen>
 8023544:	d8802b15 	stw	r2,172(sp)
 8023548:	da003e17 	ldw	r8,248(sp)
 802354c:	103c160e 	bge	r2,zero,80225a8 <__alt_data_end+0xfffe31a8>
 8023550:	0005883a 	mov	r2,zero
 8023554:	003c1406 	br	80225a8 <__alt_data_end+0xfffe31a8>
 8023558:	00bfffc4 	movi	r2,-1
 802355c:	0039d906 	br	8021cc4 <__alt_data_end+0xfffe28c4>
 8023560:	010200f4 	movhi	r4,2051
 8023564:	21075284 	addi	r4,r4,7498
 8023568:	d9003515 	stw	r4,212(sp)
 802356c:	003ae406 	br	8022100 <__alt_data_end+0xfffe2d00>
 8023570:	013fffc4 	movi	r4,-1
 8023574:	0039fa06 	br	8021d60 <__alt_data_end+0xfffe2960>
 8023578:	d9402d17 	ldw	r5,180(sp)
 802357c:	d9801e04 	addi	r6,sp,120
 8023580:	9809883a 	mov	r4,r19
 8023584:	80283cc0 	call	80283cc <__ssprint_r>
 8023588:	1039c91e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 802358c:	d8c02017 	ldw	r3,128(sp)
 8023590:	da000404 	addi	r8,sp,16
 8023594:	003d8406 	br	8022ba8 <__alt_data_end+0xfffe37a8>
 8023598:	0023883a 	mov	r17,zero
 802359c:	003d8306 	br	8022bac <__alt_data_end+0xfffe37ac>
 80235a0:	010200f4 	movhi	r4,2051
 80235a4:	21074e84 	addi	r4,r4,7482
 80235a8:	d9002c15 	stw	r4,176(sp)
 80235ac:	d9002c17 	ldw	r4,176(sp)
 80235b0:	1c47883a 	add	r3,r3,r17
 80235b4:	10800044 	addi	r2,r2,1
 80235b8:	41000015 	stw	r4,0(r8)
 80235bc:	44400115 	stw	r17,4(r8)
 80235c0:	d8c02015 	stw	r3,128(sp)
 80235c4:	d8801f15 	stw	r2,124(sp)
 80235c8:	010001c4 	movi	r4,7
 80235cc:	20bfcd16 	blt	r4,r2,8023504 <__alt_data_end+0xfffe4104>
 80235d0:	42000204 	addi	r8,r8,8
 80235d4:	003fd306 	br	8023524 <__alt_data_end+0xfffe4124>
 80235d8:	d9402d17 	ldw	r5,180(sp)
 80235dc:	d9801e04 	addi	r6,sp,120
 80235e0:	9809883a 	mov	r4,r19
 80235e4:	80283cc0 	call	80283cc <__ssprint_r>
 80235e8:	1039b11e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 80235ec:	d8802617 	ldw	r2,152(sp)
 80235f0:	d8c02017 	ldw	r3,128(sp)
 80235f4:	da000404 	addi	r8,sp,16
 80235f8:	003e1c06 	br	8022e6c <__alt_data_end+0xfffe3a6c>
 80235fc:	d8802a17 	ldw	r2,168(sp)
 8023600:	00c00184 	movi	r3,6
 8023604:	1880012e 	bgeu	r3,r2,802360c <___svfprintf_internal_r+0x1cf8>
 8023608:	1805883a 	mov	r2,r3
 802360c:	d8802b15 	stw	r2,172(sp)
 8023610:	1000f316 	blt	r2,zero,80239e0 <___svfprintf_internal_r+0x20cc>
 8023614:	040200f4 	movhi	r16,2051
 8023618:	d8802915 	stw	r2,164(sp)
 802361c:	dd002e15 	stw	r20,184(sp)
 8023620:	d8002a15 	stw	zero,168(sp)
 8023624:	d8003215 	stw	zero,200(sp)
 8023628:	84074c04 	addi	r16,r16,7472
 802362c:	0039883a 	mov	fp,zero
 8023630:	003a7d06 	br	8022028 <__alt_data_end+0xfffe2c28>
 8023634:	010200f4 	movhi	r4,2051
 8023638:	21075284 	addi	r4,r4,7498
 802363c:	d9003515 	stw	r4,212(sp)
 8023640:	003b3d06 	br	8022338 <__alt_data_end+0xfffe2f38>
 8023644:	d9402d17 	ldw	r5,180(sp)
 8023648:	d9801e04 	addi	r6,sp,120
 802364c:	9809883a 	mov	r4,r19
 8023650:	80283cc0 	call	80283cc <__ssprint_r>
 8023654:	1039961e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8023658:	d8802617 	ldw	r2,152(sp)
 802365c:	d9403317 	ldw	r5,204(sp)
 8023660:	d8c02017 	ldw	r3,128(sp)
 8023664:	da000404 	addi	r8,sp,16
 8023668:	2885c83a 	sub	r2,r5,r2
 802366c:	003e1006 	br	8022eb0 <__alt_data_end+0xfffe3ab0>
 8023670:	00800044 	movi	r2,1
 8023674:	10803fcc 	andi	r2,r2,255
 8023678:	00c00044 	movi	r3,1
 802367c:	10fa1026 	beq	r2,r3,8021ec0 <__alt_data_end+0xfffe2ac0>
 8023680:	00c00084 	movi	r3,2
 8023684:	10fb8226 	beq	r2,r3,8022490 <__alt_data_end+0xfffe3090>
 8023688:	003a4206 	br	8021f94 <__alt_data_end+0xfffe2b94>
 802368c:	0021883a 	mov	r16,zero
 8023690:	003e0806 	br	8022eb4 <__alt_data_end+0xfffe3ab4>
 8023694:	07000b44 	movi	fp,45
 8023698:	df002785 	stb	fp,158(sp)
 802369c:	0039e306 	br	8021e2c <__alt_data_end+0xfffe2a2c>
 80236a0:	d9002e17 	ldw	r4,184(sp)
 80236a4:	d9402f17 	ldw	r5,188(sp)
 80236a8:	20800017 	ldw	r2,0(r4)
 80236ac:	21000104 	addi	r4,r4,4
 80236b0:	d9002e15 	stw	r4,184(sp)
 80236b4:	11400015 	stw	r5,0(r2)
 80236b8:	0038c106 	br	80219c0 <__alt_data_end+0xfffe25c0>
 80236bc:	00c00b44 	movi	r3,45
 80236c0:	d8c02785 	stb	r3,158(sp)
 80236c4:	d8802915 	stw	r2,164(sp)
 80236c8:	dc802c17 	ldw	r18,176(sp)
 80236cc:	d8002a15 	stw	zero,168(sp)
 80236d0:	07000b44 	movi	fp,45
 80236d4:	003a5106 	br	802201c <__alt_data_end+0xfffe2c1c>
 80236d8:	9080004c 	andi	r2,r18,1
 80236dc:	1000941e 	bne	r2,zero,8023930 <___svfprintf_internal_r+0x201c>
 80236e0:	d8802117 	ldw	r2,132(sp)
 80236e4:	1405c83a 	sub	r2,r2,r16
 80236e8:	d8803315 	stw	r2,204(sp)
 80236ec:	b441151e 	bne	r22,r17,8023b44 <___svfprintf_internal_r+0x2230>
 80236f0:	dd802617 	ldw	r22,152(sp)
 80236f4:	00bfff44 	movi	r2,-3
 80236f8:	b0801a16 	blt	r22,r2,8023764 <___svfprintf_internal_r+0x1e50>
 80236fc:	d9402a17 	ldw	r5,168(sp)
 8023700:	2d801816 	blt	r5,r22,8023764 <___svfprintf_internal_r+0x1e50>
 8023704:	dd803215 	stw	r22,200(sp)
 8023708:	003f3a06 	br	80233f4 <__alt_data_end+0xfffe3ff4>
 802370c:	1025883a 	mov	r18,r2
 8023710:	0039883a 	mov	fp,zero
 8023714:	00800084 	movi	r2,2
 8023718:	003fd606 	br	8023674 <__alt_data_end+0xfffe4274>
 802371c:	9080004c 	andi	r2,r18,1
 8023720:	103f191e 	bne	r2,zero,8023388 <__alt_data_end+0xfffe3f88>
 8023724:	d8802117 	ldw	r2,132(sp)
 8023728:	003f2806 	br	80233cc <__alt_data_end+0xfffe3fcc>
 802372c:	010200f4 	movhi	r4,2051
 8023730:	21074e84 	addi	r4,r4,7482
 8023734:	d9002c15 	stw	r4,176(sp)
 8023738:	003c7c06 	br	802292c <__alt_data_end+0xfffe352c>
 802373c:	e005883a 	mov	r2,fp
 8023740:	003f2206 	br	80233cc <__alt_data_end+0xfffe3fcc>
 8023744:	d9002a17 	ldw	r4,168(sp)
 8023748:	df002783 	ldbu	fp,158(sp)
 802374c:	dd002e15 	stw	r20,184(sp)
 8023750:	d9002915 	stw	r4,164(sp)
 8023754:	d9002b15 	stw	r4,172(sp)
 8023758:	d8002a15 	stw	zero,168(sp)
 802375c:	d8003215 	stw	zero,200(sp)
 8023760:	003a2a06 	br	802200c <__alt_data_end+0xfffe2c0c>
 8023764:	8c7fff84 	addi	r17,r17,-2
 8023768:	b5bfffc4 	addi	r22,r22,-1
 802376c:	dd802615 	stw	r22,152(sp)
 8023770:	dc4022c5 	stb	r17,139(sp)
 8023774:	b000c316 	blt	r22,zero,8023a84 <___svfprintf_internal_r+0x2170>
 8023778:	00800ac4 	movi	r2,43
 802377c:	d8802305 	stb	r2,140(sp)
 8023780:	00800244 	movi	r2,9
 8023784:	15806e16 	blt	r2,r22,8023940 <___svfprintf_internal_r+0x202c>
 8023788:	00800c04 	movi	r2,48
 802378c:	b5800c04 	addi	r22,r22,48
 8023790:	d8802345 	stb	r2,141(sp)
 8023794:	dd802385 	stb	r22,142(sp)
 8023798:	d88023c4 	addi	r2,sp,143
 802379c:	df0022c4 	addi	fp,sp,139
 80237a0:	d8c03317 	ldw	r3,204(sp)
 80237a4:	1739c83a 	sub	fp,r2,fp
 80237a8:	d9003317 	ldw	r4,204(sp)
 80237ac:	e0c7883a 	add	r3,fp,r3
 80237b0:	df003b15 	stw	fp,236(sp)
 80237b4:	d8c02b15 	stw	r3,172(sp)
 80237b8:	00800044 	movi	r2,1
 80237bc:	1100b70e 	bge	r2,r4,8023a9c <___svfprintf_internal_r+0x2188>
 80237c0:	d8c02b17 	ldw	r3,172(sp)
 80237c4:	18c00044 	addi	r3,r3,1
 80237c8:	d8c02b15 	stw	r3,172(sp)
 80237cc:	1805883a 	mov	r2,r3
 80237d0:	1800b016 	blt	r3,zero,8023a94 <___svfprintf_internal_r+0x2180>
 80237d4:	d8003215 	stw	zero,200(sp)
 80237d8:	003f1006 	br	802341c <__alt_data_end+0xfffe401c>
 80237dc:	d8802a17 	ldw	r2,168(sp)
 80237e0:	103ec71e 	bne	r2,zero,8023300 <__alt_data_end+0xfffe3f00>
 80237e4:	dc002a15 	stw	r16,168(sp)
 80237e8:	003ec506 	br	8023300 <__alt_data_end+0xfffe3f00>
 80237ec:	d9402d17 	ldw	r5,180(sp)
 80237f0:	d9801e04 	addi	r6,sp,120
 80237f4:	9809883a 	mov	r4,r19
 80237f8:	80283cc0 	call	80283cc <__ssprint_r>
 80237fc:	10392c1e 	bne	r2,zero,8021cb0 <__alt_data_end+0xfffe28b0>
 8023800:	dc402617 	ldw	r17,152(sp)
 8023804:	d8c02017 	ldw	r3,128(sp)
 8023808:	d8801f17 	ldw	r2,124(sp)
 802380c:	da000404 	addi	r8,sp,16
 8023810:	003e7706 	br	80231f0 <__alt_data_end+0xfffe3df0>
 8023814:	182f883a 	mov	r23,r3
 8023818:	d8002a15 	stw	zero,168(sp)
 802381c:	00389306 	br	8021a6c <__alt_data_end+0xfffe266c>
 8023820:	d8c02a17 	ldw	r3,168(sp)
 8023824:	d8802104 	addi	r2,sp,132
 8023828:	d8800315 	stw	r2,12(sp)
 802382c:	d9403617 	ldw	r5,216(sp)
 8023830:	d8802504 	addi	r2,sp,148
 8023834:	d8800215 	stw	r2,8(sp)
 8023838:	d8802604 	addi	r2,sp,152
 802383c:	d8c00015 	stw	r3,0(sp)
 8023840:	9809883a 	mov	r4,r19
 8023844:	d8800115 	stw	r2,4(sp)
 8023848:	01c000c4 	movi	r7,3
 802384c:	a00d883a 	mov	r6,r20
 8023850:	da003e15 	stw	r8,248(sp)
 8023854:	8023df80 	call	8023df8 <_dtoa_r>
 8023858:	d9002a17 	ldw	r4,168(sp)
 802385c:	da003e17 	ldw	r8,248(sp)
 8023860:	1021883a 	mov	r16,r2
 8023864:	1139883a 	add	fp,r2,r4
 8023868:	2007883a 	mov	r3,r4
 802386c:	81000007 	ldb	r4,0(r16)
 8023870:	00800c04 	movi	r2,48
 8023874:	20806f26 	beq	r4,r2,8023a34 <___svfprintf_internal_r+0x2120>
 8023878:	d8c02617 	ldw	r3,152(sp)
 802387c:	e0f9883a 	add	fp,fp,r3
 8023880:	003ec206 	br	802338c <__alt_data_end+0xfffe3f8c>
 8023884:	00c00b44 	movi	r3,45
 8023888:	2520003c 	xorhi	r20,r4,32768
 802388c:	d8c02905 	stb	r3,164(sp)
 8023890:	003ea106 	br	8023318 <__alt_data_end+0xfffe3f18>
 8023894:	d8c03217 	ldw	r3,200(sp)
 8023898:	00c0890e 	bge	zero,r3,8023ac0 <___svfprintf_internal_r+0x21ac>
 802389c:	00800044 	movi	r2,1
 80238a0:	d9003317 	ldw	r4,204(sp)
 80238a4:	1105883a 	add	r2,r2,r4
 80238a8:	d8802b15 	stw	r2,172(sp)
 80238ac:	10005f16 	blt	r2,zero,8023a2c <___svfprintf_internal_r+0x2118>
 80238b0:	044019c4 	movi	r17,103
 80238b4:	003ed906 	br	802341c <__alt_data_end+0xfffe401c>
 80238b8:	d9002a17 	ldw	r4,168(sp)
 80238bc:	20c00044 	addi	r3,r4,1
 80238c0:	003e9c06 	br	8023334 <__alt_data_end+0xfffe3f34>
 80238c4:	d9002a17 	ldw	r4,168(sp)
 80238c8:	00c0680e 	bge	zero,r3,8023a6c <___svfprintf_internal_r+0x2158>
 80238cc:	2000461e 	bne	r4,zero,80239e8 <___svfprintf_internal_r+0x20d4>
 80238d0:	9480004c 	andi	r18,r18,1
 80238d4:	9000441e 	bne	r18,zero,80239e8 <___svfprintf_internal_r+0x20d4>
 80238d8:	1805883a 	mov	r2,r3
 80238dc:	1800a116 	blt	r3,zero,8023b64 <___svfprintf_internal_r+0x2250>
 80238e0:	d8c03217 	ldw	r3,200(sp)
 80238e4:	d8c02b15 	stw	r3,172(sp)
 80238e8:	003ecc06 	br	802341c <__alt_data_end+0xfffe401c>
 80238ec:	d9402a17 	ldw	r5,168(sp)
 80238f0:	d8802104 	addi	r2,sp,132
 80238f4:	d8800315 	stw	r2,12(sp)
 80238f8:	d9400015 	stw	r5,0(sp)
 80238fc:	d8802504 	addi	r2,sp,148
 8023900:	d9403617 	ldw	r5,216(sp)
 8023904:	d8800215 	stw	r2,8(sp)
 8023908:	d8802604 	addi	r2,sp,152
 802390c:	d8800115 	stw	r2,4(sp)
 8023910:	01c000c4 	movi	r7,3
 8023914:	a00d883a 	mov	r6,r20
 8023918:	9809883a 	mov	r4,r19
 802391c:	da003e15 	stw	r8,248(sp)
 8023920:	8023df80 	call	8023df8 <_dtoa_r>
 8023924:	d8c02a17 	ldw	r3,168(sp)
 8023928:	da003e17 	ldw	r8,248(sp)
 802392c:	1021883a 	mov	r16,r2
 8023930:	00801184 	movi	r2,70
 8023934:	80f9883a 	add	fp,r16,r3
 8023938:	88bfcc26 	beq	r17,r2,802386c <__alt_data_end+0xfffe446c>
 802393c:	003e9306 	br	802338c <__alt_data_end+0xfffe3f8c>
 8023940:	df0022c4 	addi	fp,sp,139
 8023944:	dc002a15 	stw	r16,168(sp)
 8023948:	9829883a 	mov	r20,r19
 802394c:	e021883a 	mov	r16,fp
 8023950:	4027883a 	mov	r19,r8
 8023954:	b009883a 	mov	r4,r22
 8023958:	01400284 	movi	r5,10
 802395c:	802b3700 	call	802b370 <__modsi3>
 8023960:	10800c04 	addi	r2,r2,48
 8023964:	843fffc4 	addi	r16,r16,-1
 8023968:	b009883a 	mov	r4,r22
 802396c:	01400284 	movi	r5,10
 8023970:	80800005 	stb	r2,0(r16)
 8023974:	802b2ec0 	call	802b2ec <__divsi3>
 8023978:	102d883a 	mov	r22,r2
 802397c:	00800244 	movi	r2,9
 8023980:	15bff416 	blt	r2,r22,8023954 <__alt_data_end+0xfffe4554>
 8023984:	9811883a 	mov	r8,r19
 8023988:	b0800c04 	addi	r2,r22,48
 802398c:	a027883a 	mov	r19,r20
 8023990:	8029883a 	mov	r20,r16
 8023994:	a17fffc4 	addi	r5,r20,-1
 8023998:	a0bfffc5 	stb	r2,-1(r20)
 802399c:	dc002a17 	ldw	r16,168(sp)
 80239a0:	2f00782e 	bgeu	r5,fp,8023b84 <___svfprintf_internal_r+0x2270>
 80239a4:	d9c02384 	addi	r7,sp,142
 80239a8:	3d0fc83a 	sub	r7,r7,r20
 80239ac:	d9002344 	addi	r4,sp,141
 80239b0:	e1cf883a 	add	r7,fp,r7
 80239b4:	00000106 	br	80239bc <___svfprintf_internal_r+0x20a8>
 80239b8:	28800003 	ldbu	r2,0(r5)
 80239bc:	20800005 	stb	r2,0(r4)
 80239c0:	21000044 	addi	r4,r4,1
 80239c4:	29400044 	addi	r5,r5,1
 80239c8:	21fffb1e 	bne	r4,r7,80239b8 <__alt_data_end+0xfffe45b8>
 80239cc:	d8802304 	addi	r2,sp,140
 80239d0:	1505c83a 	sub	r2,r2,r20
 80239d4:	d8c02344 	addi	r3,sp,141
 80239d8:	1885883a 	add	r2,r3,r2
 80239dc:	003f7006 	br	80237a0 <__alt_data_end+0xfffe43a0>
 80239e0:	0005883a 	mov	r2,zero
 80239e4:	003f0b06 	br	8023614 <__alt_data_end+0xfffe4214>
 80239e8:	d9002a17 	ldw	r4,168(sp)
 80239ec:	d8c03217 	ldw	r3,200(sp)
 80239f0:	20800044 	addi	r2,r4,1
 80239f4:	1885883a 	add	r2,r3,r2
 80239f8:	d8802b15 	stw	r2,172(sp)
 80239fc:	103e870e 	bge	r2,zero,802341c <__alt_data_end+0xfffe401c>
 8023a00:	0005883a 	mov	r2,zero
 8023a04:	003e8506 	br	802341c <__alt_data_end+0xfffe401c>
 8023a08:	010200f4 	movhi	r4,2051
 8023a0c:	21074e84 	addi	r4,r4,7482
 8023a10:	d9002c15 	stw	r4,176(sp)
 8023a14:	003cc506 	br	8022d2c <__alt_data_end+0xfffe392c>
 8023a18:	d8c03217 	ldw	r3,200(sp)
 8023a1c:	18c00044 	addi	r3,r3,1
 8023a20:	d8c02b15 	stw	r3,172(sp)
 8023a24:	1805883a 	mov	r2,r3
 8023a28:	183fa10e 	bge	r3,zero,80238b0 <__alt_data_end+0xfffe44b0>
 8023a2c:	0005883a 	mov	r2,zero
 8023a30:	003f9f06 	br	80238b0 <__alt_data_end+0xfffe44b0>
 8023a34:	d9003617 	ldw	r4,216(sp)
 8023a38:	000d883a 	mov	r6,zero
 8023a3c:	000f883a 	mov	r7,zero
 8023a40:	a00b883a 	mov	r5,r20
 8023a44:	d8c03d15 	stw	r3,244(sp)
 8023a48:	da003e15 	stw	r8,248(sp)
 8023a4c:	802c71c0 	call	802c71c <__eqdf2>
 8023a50:	d8c03d17 	ldw	r3,244(sp)
 8023a54:	da003e17 	ldw	r8,248(sp)
 8023a58:	103f8726 	beq	r2,zero,8023878 <__alt_data_end+0xfffe4478>
 8023a5c:	00800044 	movi	r2,1
 8023a60:	10c7c83a 	sub	r3,r2,r3
 8023a64:	d8c02615 	stw	r3,152(sp)
 8023a68:	003f8406 	br	802387c <__alt_data_end+0xfffe447c>
 8023a6c:	20000e1e 	bne	r4,zero,8023aa8 <___svfprintf_internal_r+0x2194>
 8023a70:	9480004c 	andi	r18,r18,1
 8023a74:	90000c1e 	bne	r18,zero,8023aa8 <___svfprintf_internal_r+0x2194>
 8023a78:	00800044 	movi	r2,1
 8023a7c:	d8802b15 	stw	r2,172(sp)
 8023a80:	003e6606 	br	802341c <__alt_data_end+0xfffe401c>
 8023a84:	00800b44 	movi	r2,45
 8023a88:	05adc83a 	sub	r22,zero,r22
 8023a8c:	d8802305 	stb	r2,140(sp)
 8023a90:	003f3b06 	br	8023780 <__alt_data_end+0xfffe4380>
 8023a94:	0005883a 	mov	r2,zero
 8023a98:	003f4e06 	br	80237d4 <__alt_data_end+0xfffe43d4>
 8023a9c:	90a4703a 	and	r18,r18,r2
 8023aa0:	903f4a26 	beq	r18,zero,80237cc <__alt_data_end+0xfffe43cc>
 8023aa4:	003f4606 	br	80237c0 <__alt_data_end+0xfffe43c0>
 8023aa8:	d8c02a17 	ldw	r3,168(sp)
 8023aac:	18c00084 	addi	r3,r3,2
 8023ab0:	d8c02b15 	stw	r3,172(sp)
 8023ab4:	1805883a 	mov	r2,r3
 8023ab8:	183e580e 	bge	r3,zero,802341c <__alt_data_end+0xfffe401c>
 8023abc:	003fd006 	br	8023a00 <__alt_data_end+0xfffe4600>
 8023ac0:	00800084 	movi	r2,2
 8023ac4:	10c5c83a 	sub	r2,r2,r3
 8023ac8:	003f7506 	br	80238a0 <__alt_data_end+0xfffe44a0>
 8023acc:	d9402e17 	ldw	r5,184(sp)
 8023ad0:	d9002e17 	ldw	r4,184(sp)
 8023ad4:	bc400043 	ldbu	r17,1(r23)
 8023ad8:	29400017 	ldw	r5,0(r5)
 8023adc:	20800104 	addi	r2,r4,4
 8023ae0:	d8802e15 	stw	r2,184(sp)
 8023ae4:	d9402a15 	stw	r5,168(sp)
 8023ae8:	182f883a 	mov	r23,r3
 8023aec:	283df10e 	bge	r5,zero,80232b4 <__alt_data_end+0xfffe3eb4>
 8023af0:	8c403fcc 	andi	r17,r17,255
 8023af4:	017fffc4 	movi	r5,-1
 8023af8:	8c40201c 	xori	r17,r17,128
 8023afc:	d9402a15 	stw	r5,168(sp)
 8023b00:	8c7fe004 	addi	r17,r17,-128
 8023b04:	0037d806 	br	8021a68 <__alt_data_end+0xfffe2668>
 8023b08:	9080004c 	andi	r2,r18,1
 8023b0c:	0039883a 	mov	fp,zero
 8023b10:	10000726 	beq	r2,zero,8023b30 <___svfprintf_internal_r+0x221c>
 8023b14:	d8c02817 	ldw	r3,160(sp)
 8023b18:	dc001dc4 	addi	r16,sp,119
 8023b1c:	00800c04 	movi	r2,48
 8023b20:	1c07c83a 	sub	r3,r3,r16
 8023b24:	d8801dc5 	stb	r2,119(sp)
 8023b28:	d8c02b15 	stw	r3,172(sp)
 8023b2c:	00393106 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 8023b30:	d8002b15 	stw	zero,172(sp)
 8023b34:	dc001e04 	addi	r16,sp,120
 8023b38:	00392e06 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 8023b3c:	0005883a 	mov	r2,zero
 8023b40:	003e3306 	br	8023410 <__alt_data_end+0xfffe4010>
 8023b44:	dd802617 	ldw	r22,152(sp)
 8023b48:	003f0706 	br	8023768 <__alt_data_end+0xfffe4368>
 8023b4c:	d8c02b03 	ldbu	r3,172(sp)
 8023b50:	d8c02785 	stb	r3,158(sp)
 8023b54:	003a3506 	br	802242c <__alt_data_end+0xfffe302c>
 8023b58:	d8c02b03 	ldbu	r3,172(sp)
 8023b5c:	d8c02785 	stb	r3,158(sp)
 8023b60:	003a1706 	br	80223c0 <__alt_data_end+0xfffe2fc0>
 8023b64:	0005883a 	mov	r2,zero
 8023b68:	003f5d06 	br	80238e0 <__alt_data_end+0xfffe44e0>
 8023b6c:	d8c02b03 	ldbu	r3,172(sp)
 8023b70:	d8c02785 	stb	r3,158(sp)
 8023b74:	0038f306 	br	8021f44 <__alt_data_end+0xfffe2b44>
 8023b78:	d8c02b03 	ldbu	r3,172(sp)
 8023b7c:	d8c02785 	stb	r3,158(sp)
 8023b80:	0038be06 	br	8021e7c <__alt_data_end+0xfffe2a7c>
 8023b84:	d8802344 	addi	r2,sp,141
 8023b88:	003f0506 	br	80237a0 <__alt_data_end+0xfffe43a0>
 8023b8c:	d8c02b03 	ldbu	r3,172(sp)
 8023b90:	d8c02785 	stb	r3,158(sp)
 8023b94:	00388b06 	br	8021dc4 <__alt_data_end+0xfffe29c4>
 8023b98:	d8c02b03 	ldbu	r3,172(sp)
 8023b9c:	d8c02785 	stb	r3,158(sp)
 8023ba0:	003ad706 	br	8022700 <__alt_data_end+0xfffe3300>
 8023ba4:	d9403917 	ldw	r5,228(sp)
 8023ba8:	00800304 	movi	r2,12
 8023bac:	28800015 	stw	r2,0(r5)
 8023bb0:	00bfffc4 	movi	r2,-1
 8023bb4:	00384306 	br	8021cc4 <__alt_data_end+0xfffe28c4>
 8023bb8:	d8c02b03 	ldbu	r3,172(sp)
 8023bbc:	d8c02785 	stb	r3,158(sp)
 8023bc0:	003ab606 	br	802269c <__alt_data_end+0xfffe329c>
 8023bc4:	d8c02b03 	ldbu	r3,172(sp)
 8023bc8:	d8c02785 	stb	r3,158(sp)
 8023bcc:	003a8906 	br	80225f4 <__alt_data_end+0xfffe31f4>

08023bd0 <quorem>:
 8023bd0:	defff204 	addi	sp,sp,-56
 8023bd4:	ddc00b15 	stw	r23,44(sp)
 8023bd8:	20800417 	ldw	r2,16(r4)
 8023bdc:	2dc00417 	ldw	r23,16(r5)
 8023be0:	dfc00d15 	stw	ra,52(sp)
 8023be4:	df000c15 	stw	fp,48(sp)
 8023be8:	dd800a15 	stw	r22,40(sp)
 8023bec:	dd400915 	stw	r21,36(sp)
 8023bf0:	dd000815 	stw	r20,32(sp)
 8023bf4:	dcc00715 	stw	r19,28(sp)
 8023bf8:	dc800615 	stw	r18,24(sp)
 8023bfc:	dc400515 	stw	r17,20(sp)
 8023c00:	dc000415 	stw	r16,16(sp)
 8023c04:	15c07a16 	blt	r2,r23,8023df0 <quorem+0x220>
 8023c08:	bdffffc4 	addi	r23,r23,-1
 8023c0c:	bde9883a 	add	r20,r23,r23
 8023c10:	28c00504 	addi	r3,r5,20
 8023c14:	a529883a 	add	r20,r20,r20
 8023c18:	1d39883a 	add	fp,r3,r20
 8023c1c:	24c00504 	addi	r19,r4,20
 8023c20:	d9400215 	stw	r5,8(sp)
 8023c24:	9d29883a 	add	r20,r19,r20
 8023c28:	e1400017 	ldw	r5,0(fp)
 8023c2c:	d9000015 	stw	r4,0(sp)
 8023c30:	a1000017 	ldw	r4,0(r20)
 8023c34:	29400044 	addi	r5,r5,1
 8023c38:	d8c00115 	stw	r3,4(sp)
 8023c3c:	dd000315 	stw	r20,12(sp)
 8023c40:	802b3e40 	call	802b3e4 <__udivsi3>
 8023c44:	1025883a 	mov	r18,r2
 8023c48:	10003026 	beq	r2,zero,8023d0c <quorem+0x13c>
 8023c4c:	dc400117 	ldw	r17,4(sp)
 8023c50:	9829883a 	mov	r20,r19
 8023c54:	002d883a 	mov	r22,zero
 8023c58:	0021883a 	mov	r16,zero
 8023c5c:	8d400017 	ldw	r21,0(r17)
 8023c60:	900b883a 	mov	r5,r18
 8023c64:	8c400104 	addi	r17,r17,4
 8023c68:	a93fffcc 	andi	r4,r21,65535
 8023c6c:	80214e80 	call	80214e8 <__mulsi3>
 8023c70:	a808d43a 	srli	r4,r21,16
 8023c74:	900b883a 	mov	r5,r18
 8023c78:	15ad883a 	add	r22,r2,r22
 8023c7c:	80214e80 	call	80214e8 <__mulsi3>
 8023c80:	a1000017 	ldw	r4,0(r20)
 8023c84:	b00cd43a 	srli	r6,r22,16
 8023c88:	b0ffffcc 	andi	r3,r22,65535
 8023c8c:	217fffcc 	andi	r5,r4,65535
 8023c90:	2c21883a 	add	r16,r5,r16
 8023c94:	80c7c83a 	sub	r3,r16,r3
 8023c98:	2008d43a 	srli	r4,r4,16
 8023c9c:	1185883a 	add	r2,r2,r6
 8023ca0:	1821d43a 	srai	r16,r3,16
 8023ca4:	117fffcc 	andi	r5,r2,65535
 8023ca8:	2149c83a 	sub	r4,r4,r5
 8023cac:	2421883a 	add	r16,r4,r16
 8023cb0:	8008943a 	slli	r4,r16,16
 8023cb4:	18ffffcc 	andi	r3,r3,65535
 8023cb8:	102cd43a 	srli	r22,r2,16
 8023cbc:	20c8b03a 	or	r4,r4,r3
 8023cc0:	a1000015 	stw	r4,0(r20)
 8023cc4:	8021d43a 	srai	r16,r16,16
 8023cc8:	a5000104 	addi	r20,r20,4
 8023ccc:	e47fe32e 	bgeu	fp,r17,8023c5c <__alt_data_end+0xfffe485c>
 8023cd0:	d8c00317 	ldw	r3,12(sp)
 8023cd4:	18800017 	ldw	r2,0(r3)
 8023cd8:	10000c1e 	bne	r2,zero,8023d0c <quorem+0x13c>
 8023cdc:	18bfff04 	addi	r2,r3,-4
 8023ce0:	9880082e 	bgeu	r19,r2,8023d04 <quorem+0x134>
 8023ce4:	18ffff17 	ldw	r3,-4(r3)
 8023ce8:	18000326 	beq	r3,zero,8023cf8 <quorem+0x128>
 8023cec:	00000506 	br	8023d04 <quorem+0x134>
 8023cf0:	10c00017 	ldw	r3,0(r2)
 8023cf4:	1800031e 	bne	r3,zero,8023d04 <quorem+0x134>
 8023cf8:	10bfff04 	addi	r2,r2,-4
 8023cfc:	bdffffc4 	addi	r23,r23,-1
 8023d00:	98bffb36 	bltu	r19,r2,8023cf0 <__alt_data_end+0xfffe48f0>
 8023d04:	d8c00017 	ldw	r3,0(sp)
 8023d08:	1dc00415 	stw	r23,16(r3)
 8023d0c:	d9400217 	ldw	r5,8(sp)
 8023d10:	d9000017 	ldw	r4,0(sp)
 8023d14:	80274540 	call	8027454 <__mcmp>
 8023d18:	10002816 	blt	r2,zero,8023dbc <quorem+0x1ec>
 8023d1c:	dc400117 	ldw	r17,4(sp)
 8023d20:	94800044 	addi	r18,r18,1
 8023d24:	980d883a 	mov	r6,r19
 8023d28:	0007883a 	mov	r3,zero
 8023d2c:	31000017 	ldw	r4,0(r6)
 8023d30:	89400017 	ldw	r5,0(r17)
 8023d34:	31800104 	addi	r6,r6,4
 8023d38:	20bfffcc 	andi	r2,r4,65535
 8023d3c:	10c7883a 	add	r3,r2,r3
 8023d40:	28bfffcc 	andi	r2,r5,65535
 8023d44:	1885c83a 	sub	r2,r3,r2
 8023d48:	280ad43a 	srli	r5,r5,16
 8023d4c:	2008d43a 	srli	r4,r4,16
 8023d50:	1007d43a 	srai	r3,r2,16
 8023d54:	10bfffcc 	andi	r2,r2,65535
 8023d58:	2149c83a 	sub	r4,r4,r5
 8023d5c:	20c9883a 	add	r4,r4,r3
 8023d60:	200a943a 	slli	r5,r4,16
 8023d64:	8c400104 	addi	r17,r17,4
 8023d68:	2007d43a 	srai	r3,r4,16
 8023d6c:	2884b03a 	or	r2,r5,r2
 8023d70:	30bfff15 	stw	r2,-4(r6)
 8023d74:	e47fed2e 	bgeu	fp,r17,8023d2c <__alt_data_end+0xfffe492c>
 8023d78:	bdc5883a 	add	r2,r23,r23
 8023d7c:	1085883a 	add	r2,r2,r2
 8023d80:	9887883a 	add	r3,r19,r2
 8023d84:	18800017 	ldw	r2,0(r3)
 8023d88:	10000c1e 	bne	r2,zero,8023dbc <quorem+0x1ec>
 8023d8c:	18bfff04 	addi	r2,r3,-4
 8023d90:	9880082e 	bgeu	r19,r2,8023db4 <quorem+0x1e4>
 8023d94:	18ffff17 	ldw	r3,-4(r3)
 8023d98:	18000326 	beq	r3,zero,8023da8 <quorem+0x1d8>
 8023d9c:	00000506 	br	8023db4 <quorem+0x1e4>
 8023da0:	10c00017 	ldw	r3,0(r2)
 8023da4:	1800031e 	bne	r3,zero,8023db4 <quorem+0x1e4>
 8023da8:	10bfff04 	addi	r2,r2,-4
 8023dac:	bdffffc4 	addi	r23,r23,-1
 8023db0:	98bffb36 	bltu	r19,r2,8023da0 <__alt_data_end+0xfffe49a0>
 8023db4:	d8c00017 	ldw	r3,0(sp)
 8023db8:	1dc00415 	stw	r23,16(r3)
 8023dbc:	9005883a 	mov	r2,r18
 8023dc0:	dfc00d17 	ldw	ra,52(sp)
 8023dc4:	df000c17 	ldw	fp,48(sp)
 8023dc8:	ddc00b17 	ldw	r23,44(sp)
 8023dcc:	dd800a17 	ldw	r22,40(sp)
 8023dd0:	dd400917 	ldw	r21,36(sp)
 8023dd4:	dd000817 	ldw	r20,32(sp)
 8023dd8:	dcc00717 	ldw	r19,28(sp)
 8023ddc:	dc800617 	ldw	r18,24(sp)
 8023de0:	dc400517 	ldw	r17,20(sp)
 8023de4:	dc000417 	ldw	r16,16(sp)
 8023de8:	dec00e04 	addi	sp,sp,56
 8023dec:	f800283a 	ret
 8023df0:	0005883a 	mov	r2,zero
 8023df4:	003ff206 	br	8023dc0 <__alt_data_end+0xfffe49c0>

08023df8 <_dtoa_r>:
 8023df8:	20801017 	ldw	r2,64(r4)
 8023dfc:	deffde04 	addi	sp,sp,-136
 8023e00:	df002015 	stw	fp,128(sp)
 8023e04:	dcc01b15 	stw	r19,108(sp)
 8023e08:	dc801a15 	stw	r18,104(sp)
 8023e0c:	dc401915 	stw	r17,100(sp)
 8023e10:	dc001815 	stw	r16,96(sp)
 8023e14:	dfc02115 	stw	ra,132(sp)
 8023e18:	ddc01f15 	stw	r23,124(sp)
 8023e1c:	dd801e15 	stw	r22,120(sp)
 8023e20:	dd401d15 	stw	r21,116(sp)
 8023e24:	dd001c15 	stw	r20,112(sp)
 8023e28:	d9c00315 	stw	r7,12(sp)
 8023e2c:	2039883a 	mov	fp,r4
 8023e30:	3023883a 	mov	r17,r6
 8023e34:	2825883a 	mov	r18,r5
 8023e38:	dc002417 	ldw	r16,144(sp)
 8023e3c:	3027883a 	mov	r19,r6
 8023e40:	10000826 	beq	r2,zero,8023e64 <_dtoa_r+0x6c>
 8023e44:	21801117 	ldw	r6,68(r4)
 8023e48:	00c00044 	movi	r3,1
 8023e4c:	100b883a 	mov	r5,r2
 8023e50:	1986983a 	sll	r3,r3,r6
 8023e54:	11800115 	stw	r6,4(r2)
 8023e58:	10c00215 	stw	r3,8(r2)
 8023e5c:	8026b780 	call	8026b78 <_Bfree>
 8023e60:	e0001015 	stw	zero,64(fp)
 8023e64:	88002e16 	blt	r17,zero,8023f20 <_dtoa_r+0x128>
 8023e68:	80000015 	stw	zero,0(r16)
 8023e6c:	889ffc2c 	andhi	r2,r17,32752
 8023e70:	00dffc34 	movhi	r3,32752
 8023e74:	10c01c26 	beq	r2,r3,8023ee8 <_dtoa_r+0xf0>
 8023e78:	000d883a 	mov	r6,zero
 8023e7c:	000f883a 	mov	r7,zero
 8023e80:	9009883a 	mov	r4,r18
 8023e84:	980b883a 	mov	r5,r19
 8023e88:	802c71c0 	call	802c71c <__eqdf2>
 8023e8c:	10002b1e 	bne	r2,zero,8023f3c <_dtoa_r+0x144>
 8023e90:	d9c02317 	ldw	r7,140(sp)
 8023e94:	00800044 	movi	r2,1
 8023e98:	38800015 	stw	r2,0(r7)
 8023e9c:	d8802517 	ldw	r2,148(sp)
 8023ea0:	10019e26 	beq	r2,zero,802451c <_dtoa_r+0x724>
 8023ea4:	d8c02517 	ldw	r3,148(sp)
 8023ea8:	008200f4 	movhi	r2,2051
 8023eac:	10874e44 	addi	r2,r2,7481
 8023eb0:	18800015 	stw	r2,0(r3)
 8023eb4:	10bfffc4 	addi	r2,r2,-1
 8023eb8:	dfc02117 	ldw	ra,132(sp)
 8023ebc:	df002017 	ldw	fp,128(sp)
 8023ec0:	ddc01f17 	ldw	r23,124(sp)
 8023ec4:	dd801e17 	ldw	r22,120(sp)
 8023ec8:	dd401d17 	ldw	r21,116(sp)
 8023ecc:	dd001c17 	ldw	r20,112(sp)
 8023ed0:	dcc01b17 	ldw	r19,108(sp)
 8023ed4:	dc801a17 	ldw	r18,104(sp)
 8023ed8:	dc401917 	ldw	r17,100(sp)
 8023edc:	dc001817 	ldw	r16,96(sp)
 8023ee0:	dec02204 	addi	sp,sp,136
 8023ee4:	f800283a 	ret
 8023ee8:	d8c02317 	ldw	r3,140(sp)
 8023eec:	0089c3c4 	movi	r2,9999
 8023ef0:	18800015 	stw	r2,0(r3)
 8023ef4:	90017726 	beq	r18,zero,80244d4 <_dtoa_r+0x6dc>
 8023ef8:	008200f4 	movhi	r2,2051
 8023efc:	10875a04 	addi	r2,r2,7528
 8023f00:	d9002517 	ldw	r4,148(sp)
 8023f04:	203fec26 	beq	r4,zero,8023eb8 <__alt_data_end+0xfffe4ab8>
 8023f08:	10c000c7 	ldb	r3,3(r2)
 8023f0c:	1801781e 	bne	r3,zero,80244f0 <_dtoa_r+0x6f8>
 8023f10:	10c000c4 	addi	r3,r2,3
 8023f14:	d9802517 	ldw	r6,148(sp)
 8023f18:	30c00015 	stw	r3,0(r6)
 8023f1c:	003fe606 	br	8023eb8 <__alt_data_end+0xfffe4ab8>
 8023f20:	04e00034 	movhi	r19,32768
 8023f24:	9cffffc4 	addi	r19,r19,-1
 8023f28:	00800044 	movi	r2,1
 8023f2c:	8ce6703a 	and	r19,r17,r19
 8023f30:	80800015 	stw	r2,0(r16)
 8023f34:	9823883a 	mov	r17,r19
 8023f38:	003fcc06 	br	8023e6c <__alt_data_end+0xfffe4a6c>
 8023f3c:	d8800204 	addi	r2,sp,8
 8023f40:	d8800015 	stw	r2,0(sp)
 8023f44:	d9c00104 	addi	r7,sp,4
 8023f48:	900b883a 	mov	r5,r18
 8023f4c:	980d883a 	mov	r6,r19
 8023f50:	e009883a 	mov	r4,fp
 8023f54:	8820d53a 	srli	r16,r17,20
 8023f58:	80278200 	call	8027820 <__d2b>
 8023f5c:	d8800915 	stw	r2,36(sp)
 8023f60:	8001651e 	bne	r16,zero,80244f8 <_dtoa_r+0x700>
 8023f64:	dd800217 	ldw	r22,8(sp)
 8023f68:	dc000117 	ldw	r16,4(sp)
 8023f6c:	00800804 	movi	r2,32
 8023f70:	b421883a 	add	r16,r22,r16
 8023f74:	80c10c84 	addi	r3,r16,1074
 8023f78:	10c2d10e 	bge	r2,r3,8024ac0 <_dtoa_r+0xcc8>
 8023f7c:	00801004 	movi	r2,64
 8023f80:	81010484 	addi	r4,r16,1042
 8023f84:	10c7c83a 	sub	r3,r2,r3
 8023f88:	9108d83a 	srl	r4,r18,r4
 8023f8c:	88e2983a 	sll	r17,r17,r3
 8023f90:	2448b03a 	or	r4,r4,r17
 8023f94:	802dc380 	call	802dc38 <__floatunsidf>
 8023f98:	017f8434 	movhi	r5,65040
 8023f9c:	01800044 	movi	r6,1
 8023fa0:	1009883a 	mov	r4,r2
 8023fa4:	194b883a 	add	r5,r3,r5
 8023fa8:	843fffc4 	addi	r16,r16,-1
 8023fac:	d9801115 	stw	r6,68(sp)
 8023fb0:	000d883a 	mov	r6,zero
 8023fb4:	01cffe34 	movhi	r7,16376
 8023fb8:	802d1e00 	call	802d1e0 <__subdf3>
 8023fbc:	0198dbf4 	movhi	r6,25455
 8023fc0:	01cff4f4 	movhi	r7,16339
 8023fc4:	3190d844 	addi	r6,r6,17249
 8023fc8:	39e1e9c4 	addi	r7,r7,-30809
 8023fcc:	1009883a 	mov	r4,r2
 8023fd0:	180b883a 	mov	r5,r3
 8023fd4:	802c9740 	call	802c974 <__muldf3>
 8023fd8:	01a2d874 	movhi	r6,35681
 8023fdc:	01cff1f4 	movhi	r7,16327
 8023fe0:	31b22cc4 	addi	r6,r6,-14157
 8023fe4:	39e28a04 	addi	r7,r7,-30168
 8023fe8:	180b883a 	mov	r5,r3
 8023fec:	1009883a 	mov	r4,r2
 8023ff0:	802b4a00 	call	802b4a0 <__adddf3>
 8023ff4:	8009883a 	mov	r4,r16
 8023ff8:	1029883a 	mov	r20,r2
 8023ffc:	1823883a 	mov	r17,r3
 8024000:	802db5c0 	call	802db5c <__floatsidf>
 8024004:	019427f4 	movhi	r6,20639
 8024008:	01cff4f4 	movhi	r7,16339
 802400c:	319e7ec4 	addi	r6,r6,31227
 8024010:	39d104c4 	addi	r7,r7,17427
 8024014:	1009883a 	mov	r4,r2
 8024018:	180b883a 	mov	r5,r3
 802401c:	802c9740 	call	802c974 <__muldf3>
 8024020:	100d883a 	mov	r6,r2
 8024024:	180f883a 	mov	r7,r3
 8024028:	a009883a 	mov	r4,r20
 802402c:	880b883a 	mov	r5,r17
 8024030:	802b4a00 	call	802b4a0 <__adddf3>
 8024034:	1009883a 	mov	r4,r2
 8024038:	180b883a 	mov	r5,r3
 802403c:	1029883a 	mov	r20,r2
 8024040:	1823883a 	mov	r17,r3
 8024044:	802dadc0 	call	802dadc <__fixdfsi>
 8024048:	000d883a 	mov	r6,zero
 802404c:	000f883a 	mov	r7,zero
 8024050:	a009883a 	mov	r4,r20
 8024054:	880b883a 	mov	r5,r17
 8024058:	d8800515 	stw	r2,20(sp)
 802405c:	802c8800 	call	802c880 <__ledf2>
 8024060:	10028716 	blt	r2,zero,8024a80 <_dtoa_r+0xc88>
 8024064:	d8c00517 	ldw	r3,20(sp)
 8024068:	00800584 	movi	r2,22
 802406c:	10c27536 	bltu	r2,r3,8024a44 <_dtoa_r+0xc4c>
 8024070:	180490fa 	slli	r2,r3,3
 8024074:	00c200f4 	movhi	r3,2051
 8024078:	18c77604 	addi	r3,r3,7640
 802407c:	1885883a 	add	r2,r3,r2
 8024080:	11000017 	ldw	r4,0(r2)
 8024084:	11400117 	ldw	r5,4(r2)
 8024088:	900d883a 	mov	r6,r18
 802408c:	980f883a 	mov	r7,r19
 8024090:	802c7a40 	call	802c7a4 <__gedf2>
 8024094:	00828d0e 	bge	zero,r2,8024acc <_dtoa_r+0xcd4>
 8024098:	d9000517 	ldw	r4,20(sp)
 802409c:	d8000e15 	stw	zero,56(sp)
 80240a0:	213fffc4 	addi	r4,r4,-1
 80240a4:	d9000515 	stw	r4,20(sp)
 80240a8:	b42dc83a 	sub	r22,r22,r16
 80240ac:	b5bfffc4 	addi	r22,r22,-1
 80240b0:	b0026f16 	blt	r22,zero,8024a70 <_dtoa_r+0xc78>
 80240b4:	d8000815 	stw	zero,32(sp)
 80240b8:	d9c00517 	ldw	r7,20(sp)
 80240bc:	38026416 	blt	r7,zero,8024a50 <_dtoa_r+0xc58>
 80240c0:	b1ed883a 	add	r22,r22,r7
 80240c4:	d9c00d15 	stw	r7,52(sp)
 80240c8:	d8000a15 	stw	zero,40(sp)
 80240cc:	d9800317 	ldw	r6,12(sp)
 80240d0:	00800244 	movi	r2,9
 80240d4:	11811436 	bltu	r2,r6,8024528 <_dtoa_r+0x730>
 80240d8:	00800144 	movi	r2,5
 80240dc:	1184e10e 	bge	r2,r6,8025464 <_dtoa_r+0x166c>
 80240e0:	31bfff04 	addi	r6,r6,-4
 80240e4:	d9800315 	stw	r6,12(sp)
 80240e8:	0023883a 	mov	r17,zero
 80240ec:	d9800317 	ldw	r6,12(sp)
 80240f0:	008000c4 	movi	r2,3
 80240f4:	30836726 	beq	r6,r2,8024e94 <_dtoa_r+0x109c>
 80240f8:	1183410e 	bge	r2,r6,8024e00 <_dtoa_r+0x1008>
 80240fc:	d9c00317 	ldw	r7,12(sp)
 8024100:	00800104 	movi	r2,4
 8024104:	38827c26 	beq	r7,r2,8024af8 <_dtoa_r+0xd00>
 8024108:	00800144 	movi	r2,5
 802410c:	3884c41e 	bne	r7,r2,8025420 <_dtoa_r+0x1628>
 8024110:	00800044 	movi	r2,1
 8024114:	d8800b15 	stw	r2,44(sp)
 8024118:	d8c00517 	ldw	r3,20(sp)
 802411c:	d9002217 	ldw	r4,136(sp)
 8024120:	1907883a 	add	r3,r3,r4
 8024124:	19800044 	addi	r6,r3,1
 8024128:	d8c00c15 	stw	r3,48(sp)
 802412c:	d9800615 	stw	r6,24(sp)
 8024130:	0183a40e 	bge	zero,r6,8024fc4 <_dtoa_r+0x11cc>
 8024134:	d9800617 	ldw	r6,24(sp)
 8024138:	3021883a 	mov	r16,r6
 802413c:	e0001115 	stw	zero,68(fp)
 8024140:	008005c4 	movi	r2,23
 8024144:	1184c92e 	bgeu	r2,r6,802546c <_dtoa_r+0x1674>
 8024148:	00c00044 	movi	r3,1
 802414c:	00800104 	movi	r2,4
 8024150:	1085883a 	add	r2,r2,r2
 8024154:	11000504 	addi	r4,r2,20
 8024158:	180b883a 	mov	r5,r3
 802415c:	18c00044 	addi	r3,r3,1
 8024160:	313ffb2e 	bgeu	r6,r4,8024150 <__alt_data_end+0xfffe4d50>
 8024164:	e1401115 	stw	r5,68(fp)
 8024168:	e009883a 	mov	r4,fp
 802416c:	8026ad00 	call	8026ad0 <_Balloc>
 8024170:	d8800715 	stw	r2,28(sp)
 8024174:	e0801015 	stw	r2,64(fp)
 8024178:	00800384 	movi	r2,14
 802417c:	1400f736 	bltu	r2,r16,802455c <_dtoa_r+0x764>
 8024180:	8800f626 	beq	r17,zero,802455c <_dtoa_r+0x764>
 8024184:	d9c00517 	ldw	r7,20(sp)
 8024188:	01c39a0e 	bge	zero,r7,8024ff4 <_dtoa_r+0x11fc>
 802418c:	388003cc 	andi	r2,r7,15
 8024190:	100490fa 	slli	r2,r2,3
 8024194:	382bd13a 	srai	r21,r7,4
 8024198:	00c200f4 	movhi	r3,2051
 802419c:	18c77604 	addi	r3,r3,7640
 80241a0:	1885883a 	add	r2,r3,r2
 80241a4:	a8c0040c 	andi	r3,r21,16
 80241a8:	12400017 	ldw	r9,0(r2)
 80241ac:	12000117 	ldw	r8,4(r2)
 80241b0:	18037926 	beq	r3,zero,8024f98 <_dtoa_r+0x11a0>
 80241b4:	008200f4 	movhi	r2,2051
 80241b8:	10876c04 	addi	r2,r2,7600
 80241bc:	11800817 	ldw	r6,32(r2)
 80241c0:	11c00917 	ldw	r7,36(r2)
 80241c4:	9009883a 	mov	r4,r18
 80241c8:	980b883a 	mov	r5,r19
 80241cc:	da001715 	stw	r8,92(sp)
 80241d0:	da401615 	stw	r9,88(sp)
 80241d4:	802bd4c0 	call	802bd4c <__divdf3>
 80241d8:	da001717 	ldw	r8,92(sp)
 80241dc:	da401617 	ldw	r9,88(sp)
 80241e0:	ad4003cc 	andi	r21,r21,15
 80241e4:	040000c4 	movi	r16,3
 80241e8:	1023883a 	mov	r17,r2
 80241ec:	1829883a 	mov	r20,r3
 80241f0:	a8001126 	beq	r21,zero,8024238 <_dtoa_r+0x440>
 80241f4:	05c200f4 	movhi	r23,2051
 80241f8:	bdc76c04 	addi	r23,r23,7600
 80241fc:	4805883a 	mov	r2,r9
 8024200:	4007883a 	mov	r3,r8
 8024204:	a980004c 	andi	r6,r21,1
 8024208:	1009883a 	mov	r4,r2
 802420c:	a82bd07a 	srai	r21,r21,1
 8024210:	180b883a 	mov	r5,r3
 8024214:	30000426 	beq	r6,zero,8024228 <_dtoa_r+0x430>
 8024218:	b9800017 	ldw	r6,0(r23)
 802421c:	b9c00117 	ldw	r7,4(r23)
 8024220:	84000044 	addi	r16,r16,1
 8024224:	802c9740 	call	802c974 <__muldf3>
 8024228:	bdc00204 	addi	r23,r23,8
 802422c:	a83ff51e 	bne	r21,zero,8024204 <__alt_data_end+0xfffe4e04>
 8024230:	1013883a 	mov	r9,r2
 8024234:	1811883a 	mov	r8,r3
 8024238:	480d883a 	mov	r6,r9
 802423c:	400f883a 	mov	r7,r8
 8024240:	8809883a 	mov	r4,r17
 8024244:	a00b883a 	mov	r5,r20
 8024248:	802bd4c0 	call	802bd4c <__divdf3>
 802424c:	d8800f15 	stw	r2,60(sp)
 8024250:	d8c01015 	stw	r3,64(sp)
 8024254:	d8c00e17 	ldw	r3,56(sp)
 8024258:	18000626 	beq	r3,zero,8024274 <_dtoa_r+0x47c>
 802425c:	d9000f17 	ldw	r4,60(sp)
 8024260:	d9401017 	ldw	r5,64(sp)
 8024264:	000d883a 	mov	r6,zero
 8024268:	01cffc34 	movhi	r7,16368
 802426c:	802c8800 	call	802c880 <__ledf2>
 8024270:	10040b16 	blt	r2,zero,80252a0 <_dtoa_r+0x14a8>
 8024274:	8009883a 	mov	r4,r16
 8024278:	802db5c0 	call	802db5c <__floatsidf>
 802427c:	d9800f17 	ldw	r6,60(sp)
 8024280:	d9c01017 	ldw	r7,64(sp)
 8024284:	1009883a 	mov	r4,r2
 8024288:	180b883a 	mov	r5,r3
 802428c:	802c9740 	call	802c974 <__muldf3>
 8024290:	000d883a 	mov	r6,zero
 8024294:	01d00734 	movhi	r7,16412
 8024298:	1009883a 	mov	r4,r2
 802429c:	180b883a 	mov	r5,r3
 80242a0:	802b4a00 	call	802b4a0 <__adddf3>
 80242a4:	1021883a 	mov	r16,r2
 80242a8:	d8800617 	ldw	r2,24(sp)
 80242ac:	047f3034 	movhi	r17,64704
 80242b0:	1c63883a 	add	r17,r3,r17
 80242b4:	10031826 	beq	r2,zero,8024f18 <_dtoa_r+0x1120>
 80242b8:	d8c00517 	ldw	r3,20(sp)
 80242bc:	db000617 	ldw	r12,24(sp)
 80242c0:	d8c01315 	stw	r3,76(sp)
 80242c4:	d9000b17 	ldw	r4,44(sp)
 80242c8:	20038f26 	beq	r4,zero,8025108 <_dtoa_r+0x1310>
 80242cc:	60bfffc4 	addi	r2,r12,-1
 80242d0:	100490fa 	slli	r2,r2,3
 80242d4:	00c200f4 	movhi	r3,2051
 80242d8:	18c77604 	addi	r3,r3,7640
 80242dc:	1885883a 	add	r2,r3,r2
 80242e0:	11800017 	ldw	r6,0(r2)
 80242e4:	11c00117 	ldw	r7,4(r2)
 80242e8:	d8800717 	ldw	r2,28(sp)
 80242ec:	0009883a 	mov	r4,zero
 80242f0:	014ff834 	movhi	r5,16352
 80242f4:	db001615 	stw	r12,88(sp)
 80242f8:	15c00044 	addi	r23,r2,1
 80242fc:	802bd4c0 	call	802bd4c <__divdf3>
 8024300:	800d883a 	mov	r6,r16
 8024304:	880f883a 	mov	r7,r17
 8024308:	1009883a 	mov	r4,r2
 802430c:	180b883a 	mov	r5,r3
 8024310:	802d1e00 	call	802d1e0 <__subdf3>
 8024314:	d9401017 	ldw	r5,64(sp)
 8024318:	d9000f17 	ldw	r4,60(sp)
 802431c:	102b883a 	mov	r21,r2
 8024320:	d8c01215 	stw	r3,72(sp)
 8024324:	802dadc0 	call	802dadc <__fixdfsi>
 8024328:	1009883a 	mov	r4,r2
 802432c:	1029883a 	mov	r20,r2
 8024330:	802db5c0 	call	802db5c <__floatsidf>
 8024334:	d9000f17 	ldw	r4,60(sp)
 8024338:	d9401017 	ldw	r5,64(sp)
 802433c:	100d883a 	mov	r6,r2
 8024340:	180f883a 	mov	r7,r3
 8024344:	802d1e00 	call	802d1e0 <__subdf3>
 8024348:	1823883a 	mov	r17,r3
 802434c:	d8c00717 	ldw	r3,28(sp)
 8024350:	d9401217 	ldw	r5,72(sp)
 8024354:	a2000c04 	addi	r8,r20,48
 8024358:	1021883a 	mov	r16,r2
 802435c:	1a000005 	stb	r8,0(r3)
 8024360:	800d883a 	mov	r6,r16
 8024364:	880f883a 	mov	r7,r17
 8024368:	a809883a 	mov	r4,r21
 802436c:	4029883a 	mov	r20,r8
 8024370:	802c7a40 	call	802c7a4 <__gedf2>
 8024374:	00841d16 	blt	zero,r2,80253ec <_dtoa_r+0x15f4>
 8024378:	800d883a 	mov	r6,r16
 802437c:	880f883a 	mov	r7,r17
 8024380:	0009883a 	mov	r4,zero
 8024384:	014ffc34 	movhi	r5,16368
 8024388:	802d1e00 	call	802d1e0 <__subdf3>
 802438c:	d9401217 	ldw	r5,72(sp)
 8024390:	100d883a 	mov	r6,r2
 8024394:	180f883a 	mov	r7,r3
 8024398:	a809883a 	mov	r4,r21
 802439c:	802c7a40 	call	802c7a4 <__gedf2>
 80243a0:	db001617 	ldw	r12,88(sp)
 80243a4:	00840e16 	blt	zero,r2,80253e0 <_dtoa_r+0x15e8>
 80243a8:	00800044 	movi	r2,1
 80243ac:	13006b0e 	bge	r2,r12,802455c <_dtoa_r+0x764>
 80243b0:	d9000717 	ldw	r4,28(sp)
 80243b4:	dd800f15 	stw	r22,60(sp)
 80243b8:	dcc01015 	stw	r19,64(sp)
 80243bc:	2319883a 	add	r12,r4,r12
 80243c0:	dcc01217 	ldw	r19,72(sp)
 80243c4:	602d883a 	mov	r22,r12
 80243c8:	dc801215 	stw	r18,72(sp)
 80243cc:	b825883a 	mov	r18,r23
 80243d0:	00000906 	br	80243f8 <_dtoa_r+0x600>
 80243d4:	802d1e00 	call	802d1e0 <__subdf3>
 80243d8:	a80d883a 	mov	r6,r21
 80243dc:	980f883a 	mov	r7,r19
 80243e0:	1009883a 	mov	r4,r2
 80243e4:	180b883a 	mov	r5,r3
 80243e8:	802c8800 	call	802c880 <__ledf2>
 80243ec:	1003e816 	blt	r2,zero,8025390 <_dtoa_r+0x1598>
 80243f0:	b825883a 	mov	r18,r23
 80243f4:	bd83e926 	beq	r23,r22,802539c <_dtoa_r+0x15a4>
 80243f8:	a809883a 	mov	r4,r21
 80243fc:	980b883a 	mov	r5,r19
 8024400:	000d883a 	mov	r6,zero
 8024404:	01d00934 	movhi	r7,16420
 8024408:	802c9740 	call	802c974 <__muldf3>
 802440c:	000d883a 	mov	r6,zero
 8024410:	01d00934 	movhi	r7,16420
 8024414:	8009883a 	mov	r4,r16
 8024418:	880b883a 	mov	r5,r17
 802441c:	102b883a 	mov	r21,r2
 8024420:	1827883a 	mov	r19,r3
 8024424:	802c9740 	call	802c974 <__muldf3>
 8024428:	180b883a 	mov	r5,r3
 802442c:	1009883a 	mov	r4,r2
 8024430:	1821883a 	mov	r16,r3
 8024434:	1023883a 	mov	r17,r2
 8024438:	802dadc0 	call	802dadc <__fixdfsi>
 802443c:	1009883a 	mov	r4,r2
 8024440:	1029883a 	mov	r20,r2
 8024444:	802db5c0 	call	802db5c <__floatsidf>
 8024448:	8809883a 	mov	r4,r17
 802444c:	800b883a 	mov	r5,r16
 8024450:	100d883a 	mov	r6,r2
 8024454:	180f883a 	mov	r7,r3
 8024458:	802d1e00 	call	802d1e0 <__subdf3>
 802445c:	a5000c04 	addi	r20,r20,48
 8024460:	a80d883a 	mov	r6,r21
 8024464:	980f883a 	mov	r7,r19
 8024468:	1009883a 	mov	r4,r2
 802446c:	180b883a 	mov	r5,r3
 8024470:	95000005 	stb	r20,0(r18)
 8024474:	1021883a 	mov	r16,r2
 8024478:	1823883a 	mov	r17,r3
 802447c:	802c8800 	call	802c880 <__ledf2>
 8024480:	bdc00044 	addi	r23,r23,1
 8024484:	800d883a 	mov	r6,r16
 8024488:	880f883a 	mov	r7,r17
 802448c:	0009883a 	mov	r4,zero
 8024490:	014ffc34 	movhi	r5,16368
 8024494:	103fcf0e 	bge	r2,zero,80243d4 <__alt_data_end+0xfffe4fd4>
 8024498:	d8c01317 	ldw	r3,76(sp)
 802449c:	d8c00515 	stw	r3,20(sp)
 80244a0:	d9400917 	ldw	r5,36(sp)
 80244a4:	e009883a 	mov	r4,fp
 80244a8:	8026b780 	call	8026b78 <_Bfree>
 80244ac:	d9000517 	ldw	r4,20(sp)
 80244b0:	d9802317 	ldw	r6,140(sp)
 80244b4:	d9c02517 	ldw	r7,148(sp)
 80244b8:	b8000005 	stb	zero,0(r23)
 80244bc:	20800044 	addi	r2,r4,1
 80244c0:	30800015 	stw	r2,0(r6)
 80244c4:	3802aa26 	beq	r7,zero,8024f70 <_dtoa_r+0x1178>
 80244c8:	3dc00015 	stw	r23,0(r7)
 80244cc:	d8800717 	ldw	r2,28(sp)
 80244d0:	003e7906 	br	8023eb8 <__alt_data_end+0xfffe4ab8>
 80244d4:	00800434 	movhi	r2,16
 80244d8:	10bfffc4 	addi	r2,r2,-1
 80244dc:	88a2703a 	and	r17,r17,r2
 80244e0:	883e851e 	bne	r17,zero,8023ef8 <__alt_data_end+0xfffe4af8>
 80244e4:	008200f4 	movhi	r2,2051
 80244e8:	10875704 	addi	r2,r2,7516
 80244ec:	003e8406 	br	8023f00 <__alt_data_end+0xfffe4b00>
 80244f0:	10c00204 	addi	r3,r2,8
 80244f4:	003e8706 	br	8023f14 <__alt_data_end+0xfffe4b14>
 80244f8:	01400434 	movhi	r5,16
 80244fc:	297fffc4 	addi	r5,r5,-1
 8024500:	994a703a 	and	r5,r19,r5
 8024504:	9009883a 	mov	r4,r18
 8024508:	843f0044 	addi	r16,r16,-1023
 802450c:	294ffc34 	orhi	r5,r5,16368
 8024510:	dd800217 	ldw	r22,8(sp)
 8024514:	d8001115 	stw	zero,68(sp)
 8024518:	003ea506 	br	8023fb0 <__alt_data_end+0xfffe4bb0>
 802451c:	008200f4 	movhi	r2,2051
 8024520:	10874e04 	addi	r2,r2,7480
 8024524:	003e6406 	br	8023eb8 <__alt_data_end+0xfffe4ab8>
 8024528:	e0001115 	stw	zero,68(fp)
 802452c:	000b883a 	mov	r5,zero
 8024530:	e009883a 	mov	r4,fp
 8024534:	8026ad00 	call	8026ad0 <_Balloc>
 8024538:	01bfffc4 	movi	r6,-1
 802453c:	01c00044 	movi	r7,1
 8024540:	d8800715 	stw	r2,28(sp)
 8024544:	d9800c15 	stw	r6,48(sp)
 8024548:	e0801015 	stw	r2,64(fp)
 802454c:	d8000315 	stw	zero,12(sp)
 8024550:	d9c00b15 	stw	r7,44(sp)
 8024554:	d9800615 	stw	r6,24(sp)
 8024558:	d8002215 	stw	zero,136(sp)
 802455c:	d8800117 	ldw	r2,4(sp)
 8024560:	10008916 	blt	r2,zero,8024788 <_dtoa_r+0x990>
 8024564:	d9000517 	ldw	r4,20(sp)
 8024568:	00c00384 	movi	r3,14
 802456c:	19008616 	blt	r3,r4,8024788 <_dtoa_r+0x990>
 8024570:	200490fa 	slli	r2,r4,3
 8024574:	00c200f4 	movhi	r3,2051
 8024578:	d9802217 	ldw	r6,136(sp)
 802457c:	18c77604 	addi	r3,r3,7640
 8024580:	1885883a 	add	r2,r3,r2
 8024584:	14000017 	ldw	r16,0(r2)
 8024588:	14400117 	ldw	r17,4(r2)
 802458c:	30016316 	blt	r6,zero,8024b1c <_dtoa_r+0xd24>
 8024590:	800d883a 	mov	r6,r16
 8024594:	880f883a 	mov	r7,r17
 8024598:	9009883a 	mov	r4,r18
 802459c:	980b883a 	mov	r5,r19
 80245a0:	802bd4c0 	call	802bd4c <__divdf3>
 80245a4:	180b883a 	mov	r5,r3
 80245a8:	1009883a 	mov	r4,r2
 80245ac:	802dadc0 	call	802dadc <__fixdfsi>
 80245b0:	1009883a 	mov	r4,r2
 80245b4:	102b883a 	mov	r21,r2
 80245b8:	802db5c0 	call	802db5c <__floatsidf>
 80245bc:	800d883a 	mov	r6,r16
 80245c0:	880f883a 	mov	r7,r17
 80245c4:	1009883a 	mov	r4,r2
 80245c8:	180b883a 	mov	r5,r3
 80245cc:	802c9740 	call	802c974 <__muldf3>
 80245d0:	100d883a 	mov	r6,r2
 80245d4:	180f883a 	mov	r7,r3
 80245d8:	9009883a 	mov	r4,r18
 80245dc:	980b883a 	mov	r5,r19
 80245e0:	802d1e00 	call	802d1e0 <__subdf3>
 80245e4:	d9c00717 	ldw	r7,28(sp)
 80245e8:	1009883a 	mov	r4,r2
 80245ec:	a8800c04 	addi	r2,r21,48
 80245f0:	38800005 	stb	r2,0(r7)
 80245f4:	3dc00044 	addi	r23,r7,1
 80245f8:	d9c00617 	ldw	r7,24(sp)
 80245fc:	01800044 	movi	r6,1
 8024600:	180b883a 	mov	r5,r3
 8024604:	2005883a 	mov	r2,r4
 8024608:	39803826 	beq	r7,r6,80246ec <_dtoa_r+0x8f4>
 802460c:	000d883a 	mov	r6,zero
 8024610:	01d00934 	movhi	r7,16420
 8024614:	802c9740 	call	802c974 <__muldf3>
 8024618:	000d883a 	mov	r6,zero
 802461c:	000f883a 	mov	r7,zero
 8024620:	1009883a 	mov	r4,r2
 8024624:	180b883a 	mov	r5,r3
 8024628:	1025883a 	mov	r18,r2
 802462c:	1827883a 	mov	r19,r3
 8024630:	802c71c0 	call	802c71c <__eqdf2>
 8024634:	103f9a26 	beq	r2,zero,80244a0 <__alt_data_end+0xfffe50a0>
 8024638:	d9c00617 	ldw	r7,24(sp)
 802463c:	d8c00717 	ldw	r3,28(sp)
 8024640:	b829883a 	mov	r20,r23
 8024644:	38bfffc4 	addi	r2,r7,-1
 8024648:	18ad883a 	add	r22,r3,r2
 802464c:	00000a06 	br	8024678 <_dtoa_r+0x880>
 8024650:	802c9740 	call	802c974 <__muldf3>
 8024654:	000d883a 	mov	r6,zero
 8024658:	000f883a 	mov	r7,zero
 802465c:	1009883a 	mov	r4,r2
 8024660:	180b883a 	mov	r5,r3
 8024664:	1025883a 	mov	r18,r2
 8024668:	1827883a 	mov	r19,r3
 802466c:	b829883a 	mov	r20,r23
 8024670:	802c71c0 	call	802c71c <__eqdf2>
 8024674:	103f8a26 	beq	r2,zero,80244a0 <__alt_data_end+0xfffe50a0>
 8024678:	800d883a 	mov	r6,r16
 802467c:	880f883a 	mov	r7,r17
 8024680:	9009883a 	mov	r4,r18
 8024684:	980b883a 	mov	r5,r19
 8024688:	802bd4c0 	call	802bd4c <__divdf3>
 802468c:	180b883a 	mov	r5,r3
 8024690:	1009883a 	mov	r4,r2
 8024694:	802dadc0 	call	802dadc <__fixdfsi>
 8024698:	1009883a 	mov	r4,r2
 802469c:	102b883a 	mov	r21,r2
 80246a0:	802db5c0 	call	802db5c <__floatsidf>
 80246a4:	800d883a 	mov	r6,r16
 80246a8:	880f883a 	mov	r7,r17
 80246ac:	1009883a 	mov	r4,r2
 80246b0:	180b883a 	mov	r5,r3
 80246b4:	802c9740 	call	802c974 <__muldf3>
 80246b8:	100d883a 	mov	r6,r2
 80246bc:	180f883a 	mov	r7,r3
 80246c0:	9009883a 	mov	r4,r18
 80246c4:	980b883a 	mov	r5,r19
 80246c8:	802d1e00 	call	802d1e0 <__subdf3>
 80246cc:	aa000c04 	addi	r8,r21,48
 80246d0:	a2000005 	stb	r8,0(r20)
 80246d4:	000d883a 	mov	r6,zero
 80246d8:	01d00934 	movhi	r7,16420
 80246dc:	1009883a 	mov	r4,r2
 80246e0:	180b883a 	mov	r5,r3
 80246e4:	a5c00044 	addi	r23,r20,1
 80246e8:	b53fd91e 	bne	r22,r20,8024650 <__alt_data_end+0xfffe5250>
 80246ec:	100d883a 	mov	r6,r2
 80246f0:	180f883a 	mov	r7,r3
 80246f4:	1009883a 	mov	r4,r2
 80246f8:	180b883a 	mov	r5,r3
 80246fc:	802b4a00 	call	802b4a0 <__adddf3>
 8024700:	100d883a 	mov	r6,r2
 8024704:	180f883a 	mov	r7,r3
 8024708:	8009883a 	mov	r4,r16
 802470c:	880b883a 	mov	r5,r17
 8024710:	1027883a 	mov	r19,r2
 8024714:	1825883a 	mov	r18,r3
 8024718:	802c8800 	call	802c880 <__ledf2>
 802471c:	10000816 	blt	r2,zero,8024740 <_dtoa_r+0x948>
 8024720:	980d883a 	mov	r6,r19
 8024724:	900f883a 	mov	r7,r18
 8024728:	8009883a 	mov	r4,r16
 802472c:	880b883a 	mov	r5,r17
 8024730:	802c71c0 	call	802c71c <__eqdf2>
 8024734:	103f5a1e 	bne	r2,zero,80244a0 <__alt_data_end+0xfffe50a0>
 8024738:	ad40004c 	andi	r21,r21,1
 802473c:	a83f5826 	beq	r21,zero,80244a0 <__alt_data_end+0xfffe50a0>
 8024740:	bd3fffc3 	ldbu	r20,-1(r23)
 8024744:	b8bfffc4 	addi	r2,r23,-1
 8024748:	1007883a 	mov	r3,r2
 802474c:	01400e44 	movi	r5,57
 8024750:	d9800717 	ldw	r6,28(sp)
 8024754:	00000506 	br	802476c <_dtoa_r+0x974>
 8024758:	18ffffc4 	addi	r3,r3,-1
 802475c:	11824726 	beq	r2,r6,802507c <_dtoa_r+0x1284>
 8024760:	1d000003 	ldbu	r20,0(r3)
 8024764:	102f883a 	mov	r23,r2
 8024768:	10bfffc4 	addi	r2,r2,-1
 802476c:	a1003fcc 	andi	r4,r20,255
 8024770:	2100201c 	xori	r4,r4,128
 8024774:	213fe004 	addi	r4,r4,-128
 8024778:	217ff726 	beq	r4,r5,8024758 <__alt_data_end+0xfffe5358>
 802477c:	a2000044 	addi	r8,r20,1
 8024780:	12000005 	stb	r8,0(r2)
 8024784:	003f4606 	br	80244a0 <__alt_data_end+0xfffe50a0>
 8024788:	d9000b17 	ldw	r4,44(sp)
 802478c:	2000c826 	beq	r4,zero,8024ab0 <_dtoa_r+0xcb8>
 8024790:	d9800317 	ldw	r6,12(sp)
 8024794:	00c00044 	movi	r3,1
 8024798:	1980f90e 	bge	r3,r6,8024b80 <_dtoa_r+0xd88>
 802479c:	d8800617 	ldw	r2,24(sp)
 80247a0:	d8c00a17 	ldw	r3,40(sp)
 80247a4:	157fffc4 	addi	r21,r2,-1
 80247a8:	1d41f316 	blt	r3,r21,8024f78 <_dtoa_r+0x1180>
 80247ac:	1d6bc83a 	sub	r21,r3,r21
 80247b0:	d9c00617 	ldw	r7,24(sp)
 80247b4:	3802aa16 	blt	r7,zero,8025260 <_dtoa_r+0x1468>
 80247b8:	dd000817 	ldw	r20,32(sp)
 80247bc:	d8800617 	ldw	r2,24(sp)
 80247c0:	d8c00817 	ldw	r3,32(sp)
 80247c4:	01400044 	movi	r5,1
 80247c8:	e009883a 	mov	r4,fp
 80247cc:	1887883a 	add	r3,r3,r2
 80247d0:	d8c00815 	stw	r3,32(sp)
 80247d4:	b0ad883a 	add	r22,r22,r2
 80247d8:	8026f040 	call	8026f04 <__i2b>
 80247dc:	1023883a 	mov	r17,r2
 80247e0:	a0000826 	beq	r20,zero,8024804 <_dtoa_r+0xa0c>
 80247e4:	0580070e 	bge	zero,r22,8024804 <_dtoa_r+0xa0c>
 80247e8:	a005883a 	mov	r2,r20
 80247ec:	b500b916 	blt	r22,r20,8024ad4 <_dtoa_r+0xcdc>
 80247f0:	d9000817 	ldw	r4,32(sp)
 80247f4:	a0a9c83a 	sub	r20,r20,r2
 80247f8:	b0adc83a 	sub	r22,r22,r2
 80247fc:	2089c83a 	sub	r4,r4,r2
 8024800:	d9000815 	stw	r4,32(sp)
 8024804:	d9800a17 	ldw	r6,40(sp)
 8024808:	0181810e 	bge	zero,r6,8024e10 <_dtoa_r+0x1018>
 802480c:	d9c00b17 	ldw	r7,44(sp)
 8024810:	3800b326 	beq	r7,zero,8024ae0 <_dtoa_r+0xce8>
 8024814:	a800b226 	beq	r21,zero,8024ae0 <_dtoa_r+0xce8>
 8024818:	880b883a 	mov	r5,r17
 802481c:	a80d883a 	mov	r6,r21
 8024820:	e009883a 	mov	r4,fp
 8024824:	80271cc0 	call	80271cc <__pow5mult>
 8024828:	d9800917 	ldw	r6,36(sp)
 802482c:	100b883a 	mov	r5,r2
 8024830:	e009883a 	mov	r4,fp
 8024834:	1023883a 	mov	r17,r2
 8024838:	8026f400 	call	8026f40 <__multiply>
 802483c:	1021883a 	mov	r16,r2
 8024840:	d8800a17 	ldw	r2,40(sp)
 8024844:	d9400917 	ldw	r5,36(sp)
 8024848:	e009883a 	mov	r4,fp
 802484c:	1545c83a 	sub	r2,r2,r21
 8024850:	d8800a15 	stw	r2,40(sp)
 8024854:	8026b780 	call	8026b78 <_Bfree>
 8024858:	d8c00a17 	ldw	r3,40(sp)
 802485c:	18009f1e 	bne	r3,zero,8024adc <_dtoa_r+0xce4>
 8024860:	05c00044 	movi	r23,1
 8024864:	e009883a 	mov	r4,fp
 8024868:	b80b883a 	mov	r5,r23
 802486c:	8026f040 	call	8026f04 <__i2b>
 8024870:	d9000d17 	ldw	r4,52(sp)
 8024874:	102b883a 	mov	r21,r2
 8024878:	2000ce26 	beq	r4,zero,8024bb4 <_dtoa_r+0xdbc>
 802487c:	200d883a 	mov	r6,r4
 8024880:	100b883a 	mov	r5,r2
 8024884:	e009883a 	mov	r4,fp
 8024888:	80271cc0 	call	80271cc <__pow5mult>
 802488c:	d9800317 	ldw	r6,12(sp)
 8024890:	102b883a 	mov	r21,r2
 8024894:	b981810e 	bge	r23,r6,8024e9c <_dtoa_r+0x10a4>
 8024898:	0027883a 	mov	r19,zero
 802489c:	a8800417 	ldw	r2,16(r21)
 80248a0:	05c00804 	movi	r23,32
 80248a4:	10800104 	addi	r2,r2,4
 80248a8:	1085883a 	add	r2,r2,r2
 80248ac:	1085883a 	add	r2,r2,r2
 80248b0:	a885883a 	add	r2,r21,r2
 80248b4:	11000017 	ldw	r4,0(r2)
 80248b8:	8026dec0 	call	8026dec <__hi0bits>
 80248bc:	b885c83a 	sub	r2,r23,r2
 80248c0:	1585883a 	add	r2,r2,r22
 80248c4:	108007cc 	andi	r2,r2,31
 80248c8:	1000b326 	beq	r2,zero,8024b98 <_dtoa_r+0xda0>
 80248cc:	00c00804 	movi	r3,32
 80248d0:	1887c83a 	sub	r3,r3,r2
 80248d4:	01000104 	movi	r4,4
 80248d8:	20c2cd0e 	bge	r4,r3,8025410 <_dtoa_r+0x1618>
 80248dc:	00c00704 	movi	r3,28
 80248e0:	1885c83a 	sub	r2,r3,r2
 80248e4:	d8c00817 	ldw	r3,32(sp)
 80248e8:	a0a9883a 	add	r20,r20,r2
 80248ec:	b0ad883a 	add	r22,r22,r2
 80248f0:	1887883a 	add	r3,r3,r2
 80248f4:	d8c00815 	stw	r3,32(sp)
 80248f8:	d9800817 	ldw	r6,32(sp)
 80248fc:	0180040e 	bge	zero,r6,8024910 <_dtoa_r+0xb18>
 8024900:	800b883a 	mov	r5,r16
 8024904:	e009883a 	mov	r4,fp
 8024908:	802730c0 	call	802730c <__lshift>
 802490c:	1021883a 	mov	r16,r2
 8024910:	0580050e 	bge	zero,r22,8024928 <_dtoa_r+0xb30>
 8024914:	a80b883a 	mov	r5,r21
 8024918:	b00d883a 	mov	r6,r22
 802491c:	e009883a 	mov	r4,fp
 8024920:	802730c0 	call	802730c <__lshift>
 8024924:	102b883a 	mov	r21,r2
 8024928:	d9c00e17 	ldw	r7,56(sp)
 802492c:	3801211e 	bne	r7,zero,8024db4 <_dtoa_r+0xfbc>
 8024930:	d9800617 	ldw	r6,24(sp)
 8024934:	0181380e 	bge	zero,r6,8024e18 <_dtoa_r+0x1020>
 8024938:	d8c00b17 	ldw	r3,44(sp)
 802493c:	1800ab1e 	bne	r3,zero,8024bec <_dtoa_r+0xdf4>
 8024940:	dc800717 	ldw	r18,28(sp)
 8024944:	dcc00617 	ldw	r19,24(sp)
 8024948:	9029883a 	mov	r20,r18
 802494c:	00000206 	br	8024958 <_dtoa_r+0xb60>
 8024950:	8026ba00 	call	8026ba0 <__multadd>
 8024954:	1021883a 	mov	r16,r2
 8024958:	a80b883a 	mov	r5,r21
 802495c:	8009883a 	mov	r4,r16
 8024960:	8023bd00 	call	8023bd0 <quorem>
 8024964:	10800c04 	addi	r2,r2,48
 8024968:	90800005 	stb	r2,0(r18)
 802496c:	94800044 	addi	r18,r18,1
 8024970:	9507c83a 	sub	r3,r18,r20
 8024974:	000f883a 	mov	r7,zero
 8024978:	01800284 	movi	r6,10
 802497c:	800b883a 	mov	r5,r16
 8024980:	e009883a 	mov	r4,fp
 8024984:	1cfff216 	blt	r3,r19,8024950 <__alt_data_end+0xfffe5550>
 8024988:	1011883a 	mov	r8,r2
 802498c:	d8800617 	ldw	r2,24(sp)
 8024990:	0082370e 	bge	zero,r2,8025270 <_dtoa_r+0x1478>
 8024994:	d9000717 	ldw	r4,28(sp)
 8024998:	0025883a 	mov	r18,zero
 802499c:	20af883a 	add	r23,r4,r2
 80249a0:	01800044 	movi	r6,1
 80249a4:	800b883a 	mov	r5,r16
 80249a8:	e009883a 	mov	r4,fp
 80249ac:	da001715 	stw	r8,92(sp)
 80249b0:	802730c0 	call	802730c <__lshift>
 80249b4:	a80b883a 	mov	r5,r21
 80249b8:	1009883a 	mov	r4,r2
 80249bc:	d8800915 	stw	r2,36(sp)
 80249c0:	80274540 	call	8027454 <__mcmp>
 80249c4:	da001717 	ldw	r8,92(sp)
 80249c8:	0081800e 	bge	zero,r2,8024fcc <_dtoa_r+0x11d4>
 80249cc:	b93fffc3 	ldbu	r4,-1(r23)
 80249d0:	b8bfffc4 	addi	r2,r23,-1
 80249d4:	1007883a 	mov	r3,r2
 80249d8:	01800e44 	movi	r6,57
 80249dc:	d9c00717 	ldw	r7,28(sp)
 80249e0:	00000506 	br	80249f8 <_dtoa_r+0xc00>
 80249e4:	18ffffc4 	addi	r3,r3,-1
 80249e8:	11c12326 	beq	r2,r7,8024e78 <_dtoa_r+0x1080>
 80249ec:	19000003 	ldbu	r4,0(r3)
 80249f0:	102f883a 	mov	r23,r2
 80249f4:	10bfffc4 	addi	r2,r2,-1
 80249f8:	21403fcc 	andi	r5,r4,255
 80249fc:	2940201c 	xori	r5,r5,128
 8024a00:	297fe004 	addi	r5,r5,-128
 8024a04:	29bff726 	beq	r5,r6,80249e4 <__alt_data_end+0xfffe55e4>
 8024a08:	21000044 	addi	r4,r4,1
 8024a0c:	11000005 	stb	r4,0(r2)
 8024a10:	a80b883a 	mov	r5,r21
 8024a14:	e009883a 	mov	r4,fp
 8024a18:	8026b780 	call	8026b78 <_Bfree>
 8024a1c:	883ea026 	beq	r17,zero,80244a0 <__alt_data_end+0xfffe50a0>
 8024a20:	90000426 	beq	r18,zero,8024a34 <_dtoa_r+0xc3c>
 8024a24:	94400326 	beq	r18,r17,8024a34 <_dtoa_r+0xc3c>
 8024a28:	900b883a 	mov	r5,r18
 8024a2c:	e009883a 	mov	r4,fp
 8024a30:	8026b780 	call	8026b78 <_Bfree>
 8024a34:	880b883a 	mov	r5,r17
 8024a38:	e009883a 	mov	r4,fp
 8024a3c:	8026b780 	call	8026b78 <_Bfree>
 8024a40:	003e9706 	br	80244a0 <__alt_data_end+0xfffe50a0>
 8024a44:	01800044 	movi	r6,1
 8024a48:	d9800e15 	stw	r6,56(sp)
 8024a4c:	003d9606 	br	80240a8 <__alt_data_end+0xfffe4ca8>
 8024a50:	d8800817 	ldw	r2,32(sp)
 8024a54:	d8c00517 	ldw	r3,20(sp)
 8024a58:	d8000d15 	stw	zero,52(sp)
 8024a5c:	10c5c83a 	sub	r2,r2,r3
 8024a60:	00c9c83a 	sub	r4,zero,r3
 8024a64:	d8800815 	stw	r2,32(sp)
 8024a68:	d9000a15 	stw	r4,40(sp)
 8024a6c:	003d9706 	br	80240cc <__alt_data_end+0xfffe4ccc>
 8024a70:	05adc83a 	sub	r22,zero,r22
 8024a74:	dd800815 	stw	r22,32(sp)
 8024a78:	002d883a 	mov	r22,zero
 8024a7c:	003d8e06 	br	80240b8 <__alt_data_end+0xfffe4cb8>
 8024a80:	d9000517 	ldw	r4,20(sp)
 8024a84:	802db5c0 	call	802db5c <__floatsidf>
 8024a88:	100d883a 	mov	r6,r2
 8024a8c:	180f883a 	mov	r7,r3
 8024a90:	a009883a 	mov	r4,r20
 8024a94:	880b883a 	mov	r5,r17
 8024a98:	802c71c0 	call	802c71c <__eqdf2>
 8024a9c:	103d7126 	beq	r2,zero,8024064 <__alt_data_end+0xfffe4c64>
 8024aa0:	d9c00517 	ldw	r7,20(sp)
 8024aa4:	39ffffc4 	addi	r7,r7,-1
 8024aa8:	d9c00515 	stw	r7,20(sp)
 8024aac:	003d6d06 	br	8024064 <__alt_data_end+0xfffe4c64>
 8024ab0:	dd400a17 	ldw	r21,40(sp)
 8024ab4:	dd000817 	ldw	r20,32(sp)
 8024ab8:	0023883a 	mov	r17,zero
 8024abc:	003f4806 	br	80247e0 <__alt_data_end+0xfffe53e0>
 8024ac0:	10e3c83a 	sub	r17,r2,r3
 8024ac4:	9448983a 	sll	r4,r18,r17
 8024ac8:	003d3206 	br	8023f94 <__alt_data_end+0xfffe4b94>
 8024acc:	d8000e15 	stw	zero,56(sp)
 8024ad0:	003d7506 	br	80240a8 <__alt_data_end+0xfffe4ca8>
 8024ad4:	b005883a 	mov	r2,r22
 8024ad8:	003f4506 	br	80247f0 <__alt_data_end+0xfffe53f0>
 8024adc:	dc000915 	stw	r16,36(sp)
 8024ae0:	d9800a17 	ldw	r6,40(sp)
 8024ae4:	d9400917 	ldw	r5,36(sp)
 8024ae8:	e009883a 	mov	r4,fp
 8024aec:	80271cc0 	call	80271cc <__pow5mult>
 8024af0:	1021883a 	mov	r16,r2
 8024af4:	003f5a06 	br	8024860 <__alt_data_end+0xfffe5460>
 8024af8:	01c00044 	movi	r7,1
 8024afc:	d9c00b15 	stw	r7,44(sp)
 8024b00:	d8802217 	ldw	r2,136(sp)
 8024b04:	0081280e 	bge	zero,r2,8024fa8 <_dtoa_r+0x11b0>
 8024b08:	100d883a 	mov	r6,r2
 8024b0c:	1021883a 	mov	r16,r2
 8024b10:	d8800c15 	stw	r2,48(sp)
 8024b14:	d8800615 	stw	r2,24(sp)
 8024b18:	003d8806 	br	802413c <__alt_data_end+0xfffe4d3c>
 8024b1c:	d8800617 	ldw	r2,24(sp)
 8024b20:	00be9b16 	blt	zero,r2,8024590 <__alt_data_end+0xfffe5190>
 8024b24:	10010f1e 	bne	r2,zero,8024f64 <_dtoa_r+0x116c>
 8024b28:	880b883a 	mov	r5,r17
 8024b2c:	000d883a 	mov	r6,zero
 8024b30:	01d00534 	movhi	r7,16404
 8024b34:	8009883a 	mov	r4,r16
 8024b38:	802c9740 	call	802c974 <__muldf3>
 8024b3c:	900d883a 	mov	r6,r18
 8024b40:	980f883a 	mov	r7,r19
 8024b44:	1009883a 	mov	r4,r2
 8024b48:	180b883a 	mov	r5,r3
 8024b4c:	802c7a40 	call	802c7a4 <__gedf2>
 8024b50:	002b883a 	mov	r21,zero
 8024b54:	0023883a 	mov	r17,zero
 8024b58:	1000bf16 	blt	r2,zero,8024e58 <_dtoa_r+0x1060>
 8024b5c:	d9802217 	ldw	r6,136(sp)
 8024b60:	ddc00717 	ldw	r23,28(sp)
 8024b64:	018c303a 	nor	r6,zero,r6
 8024b68:	d9800515 	stw	r6,20(sp)
 8024b6c:	a80b883a 	mov	r5,r21
 8024b70:	e009883a 	mov	r4,fp
 8024b74:	8026b780 	call	8026b78 <_Bfree>
 8024b78:	883e4926 	beq	r17,zero,80244a0 <__alt_data_end+0xfffe50a0>
 8024b7c:	003fad06 	br	8024a34 <__alt_data_end+0xfffe5634>
 8024b80:	d9c01117 	ldw	r7,68(sp)
 8024b84:	3801bc26 	beq	r7,zero,8025278 <_dtoa_r+0x1480>
 8024b88:	10810cc4 	addi	r2,r2,1075
 8024b8c:	dd400a17 	ldw	r21,40(sp)
 8024b90:	dd000817 	ldw	r20,32(sp)
 8024b94:	003f0a06 	br	80247c0 <__alt_data_end+0xfffe53c0>
 8024b98:	00800704 	movi	r2,28
 8024b9c:	d9000817 	ldw	r4,32(sp)
 8024ba0:	a0a9883a 	add	r20,r20,r2
 8024ba4:	b0ad883a 	add	r22,r22,r2
 8024ba8:	2089883a 	add	r4,r4,r2
 8024bac:	d9000815 	stw	r4,32(sp)
 8024bb0:	003f5106 	br	80248f8 <__alt_data_end+0xfffe54f8>
 8024bb4:	d8c00317 	ldw	r3,12(sp)
 8024bb8:	b8c1fc0e 	bge	r23,r3,80253ac <_dtoa_r+0x15b4>
 8024bbc:	0027883a 	mov	r19,zero
 8024bc0:	b805883a 	mov	r2,r23
 8024bc4:	003f3e06 	br	80248c0 <__alt_data_end+0xfffe54c0>
 8024bc8:	880b883a 	mov	r5,r17
 8024bcc:	e009883a 	mov	r4,fp
 8024bd0:	000f883a 	mov	r7,zero
 8024bd4:	01800284 	movi	r6,10
 8024bd8:	8026ba00 	call	8026ba0 <__multadd>
 8024bdc:	d9000c17 	ldw	r4,48(sp)
 8024be0:	1023883a 	mov	r17,r2
 8024be4:	0102040e 	bge	zero,r4,80253f8 <_dtoa_r+0x1600>
 8024be8:	d9000615 	stw	r4,24(sp)
 8024bec:	0500050e 	bge	zero,r20,8024c04 <_dtoa_r+0xe0c>
 8024bf0:	880b883a 	mov	r5,r17
 8024bf4:	a00d883a 	mov	r6,r20
 8024bf8:	e009883a 	mov	r4,fp
 8024bfc:	802730c0 	call	802730c <__lshift>
 8024c00:	1023883a 	mov	r17,r2
 8024c04:	9801241e 	bne	r19,zero,8025098 <_dtoa_r+0x12a0>
 8024c08:	8829883a 	mov	r20,r17
 8024c0c:	d9000617 	ldw	r4,24(sp)
 8024c10:	dcc00717 	ldw	r19,28(sp)
 8024c14:	9480004c 	andi	r18,r18,1
 8024c18:	20bfffc4 	addi	r2,r4,-1
 8024c1c:	9885883a 	add	r2,r19,r2
 8024c20:	d8800415 	stw	r2,16(sp)
 8024c24:	dc800615 	stw	r18,24(sp)
 8024c28:	a80b883a 	mov	r5,r21
 8024c2c:	8009883a 	mov	r4,r16
 8024c30:	8023bd00 	call	8023bd0 <quorem>
 8024c34:	880b883a 	mov	r5,r17
 8024c38:	8009883a 	mov	r4,r16
 8024c3c:	102f883a 	mov	r23,r2
 8024c40:	80274540 	call	8027454 <__mcmp>
 8024c44:	a80b883a 	mov	r5,r21
 8024c48:	a00d883a 	mov	r6,r20
 8024c4c:	e009883a 	mov	r4,fp
 8024c50:	102d883a 	mov	r22,r2
 8024c54:	80274b40 	call	80274b4 <__mdiff>
 8024c58:	1007883a 	mov	r3,r2
 8024c5c:	10800317 	ldw	r2,12(r2)
 8024c60:	bc800c04 	addi	r18,r23,48
 8024c64:	180b883a 	mov	r5,r3
 8024c68:	10004e1e 	bne	r2,zero,8024da4 <_dtoa_r+0xfac>
 8024c6c:	8009883a 	mov	r4,r16
 8024c70:	d8c01615 	stw	r3,88(sp)
 8024c74:	80274540 	call	8027454 <__mcmp>
 8024c78:	d8c01617 	ldw	r3,88(sp)
 8024c7c:	e009883a 	mov	r4,fp
 8024c80:	d8801615 	stw	r2,88(sp)
 8024c84:	180b883a 	mov	r5,r3
 8024c88:	8026b780 	call	8026b78 <_Bfree>
 8024c8c:	d8801617 	ldw	r2,88(sp)
 8024c90:	1000041e 	bne	r2,zero,8024ca4 <_dtoa_r+0xeac>
 8024c94:	d9800317 	ldw	r6,12(sp)
 8024c98:	3000021e 	bne	r6,zero,8024ca4 <_dtoa_r+0xeac>
 8024c9c:	d8c00617 	ldw	r3,24(sp)
 8024ca0:	18003726 	beq	r3,zero,8024d80 <_dtoa_r+0xf88>
 8024ca4:	b0002016 	blt	r22,zero,8024d28 <_dtoa_r+0xf30>
 8024ca8:	b000041e 	bne	r22,zero,8024cbc <_dtoa_r+0xec4>
 8024cac:	d9000317 	ldw	r4,12(sp)
 8024cb0:	2000021e 	bne	r4,zero,8024cbc <_dtoa_r+0xec4>
 8024cb4:	d8c00617 	ldw	r3,24(sp)
 8024cb8:	18001b26 	beq	r3,zero,8024d28 <_dtoa_r+0xf30>
 8024cbc:	00810716 	blt	zero,r2,80250dc <_dtoa_r+0x12e4>
 8024cc0:	d8c00417 	ldw	r3,16(sp)
 8024cc4:	9d800044 	addi	r22,r19,1
 8024cc8:	9c800005 	stb	r18,0(r19)
 8024ccc:	b02f883a 	mov	r23,r22
 8024cd0:	98c10626 	beq	r19,r3,80250ec <_dtoa_r+0x12f4>
 8024cd4:	800b883a 	mov	r5,r16
 8024cd8:	000f883a 	mov	r7,zero
 8024cdc:	01800284 	movi	r6,10
 8024ce0:	e009883a 	mov	r4,fp
 8024ce4:	8026ba00 	call	8026ba0 <__multadd>
 8024ce8:	1021883a 	mov	r16,r2
 8024cec:	000f883a 	mov	r7,zero
 8024cf0:	01800284 	movi	r6,10
 8024cf4:	880b883a 	mov	r5,r17
 8024cf8:	e009883a 	mov	r4,fp
 8024cfc:	8d002526 	beq	r17,r20,8024d94 <_dtoa_r+0xf9c>
 8024d00:	8026ba00 	call	8026ba0 <__multadd>
 8024d04:	a00b883a 	mov	r5,r20
 8024d08:	000f883a 	mov	r7,zero
 8024d0c:	01800284 	movi	r6,10
 8024d10:	e009883a 	mov	r4,fp
 8024d14:	1023883a 	mov	r17,r2
 8024d18:	8026ba00 	call	8026ba0 <__multadd>
 8024d1c:	1029883a 	mov	r20,r2
 8024d20:	b027883a 	mov	r19,r22
 8024d24:	003fc006 	br	8024c28 <__alt_data_end+0xfffe5828>
 8024d28:	9011883a 	mov	r8,r18
 8024d2c:	00800e0e 	bge	zero,r2,8024d68 <_dtoa_r+0xf70>
 8024d30:	800b883a 	mov	r5,r16
 8024d34:	01800044 	movi	r6,1
 8024d38:	e009883a 	mov	r4,fp
 8024d3c:	da001715 	stw	r8,92(sp)
 8024d40:	802730c0 	call	802730c <__lshift>
 8024d44:	a80b883a 	mov	r5,r21
 8024d48:	1009883a 	mov	r4,r2
 8024d4c:	1021883a 	mov	r16,r2
 8024d50:	80274540 	call	8027454 <__mcmp>
 8024d54:	da001717 	ldw	r8,92(sp)
 8024d58:	0081960e 	bge	zero,r2,80253b4 <_dtoa_r+0x15bc>
 8024d5c:	00800e44 	movi	r2,57
 8024d60:	40817026 	beq	r8,r2,8025324 <_dtoa_r+0x152c>
 8024d64:	ba000c44 	addi	r8,r23,49
 8024d68:	8825883a 	mov	r18,r17
 8024d6c:	9dc00044 	addi	r23,r19,1
 8024d70:	9a000005 	stb	r8,0(r19)
 8024d74:	a023883a 	mov	r17,r20
 8024d78:	dc000915 	stw	r16,36(sp)
 8024d7c:	003f2406 	br	8024a10 <__alt_data_end+0xfffe5610>
 8024d80:	00800e44 	movi	r2,57
 8024d84:	9011883a 	mov	r8,r18
 8024d88:	90816626 	beq	r18,r2,8025324 <_dtoa_r+0x152c>
 8024d8c:	05bff516 	blt	zero,r22,8024d64 <__alt_data_end+0xfffe5964>
 8024d90:	003ff506 	br	8024d68 <__alt_data_end+0xfffe5968>
 8024d94:	8026ba00 	call	8026ba0 <__multadd>
 8024d98:	1023883a 	mov	r17,r2
 8024d9c:	1029883a 	mov	r20,r2
 8024da0:	003fdf06 	br	8024d20 <__alt_data_end+0xfffe5920>
 8024da4:	e009883a 	mov	r4,fp
 8024da8:	8026b780 	call	8026b78 <_Bfree>
 8024dac:	00800044 	movi	r2,1
 8024db0:	003fbc06 	br	8024ca4 <__alt_data_end+0xfffe58a4>
 8024db4:	a80b883a 	mov	r5,r21
 8024db8:	8009883a 	mov	r4,r16
 8024dbc:	80274540 	call	8027454 <__mcmp>
 8024dc0:	103edb0e 	bge	r2,zero,8024930 <__alt_data_end+0xfffe5530>
 8024dc4:	800b883a 	mov	r5,r16
 8024dc8:	000f883a 	mov	r7,zero
 8024dcc:	01800284 	movi	r6,10
 8024dd0:	e009883a 	mov	r4,fp
 8024dd4:	8026ba00 	call	8026ba0 <__multadd>
 8024dd8:	1021883a 	mov	r16,r2
 8024ddc:	d8800517 	ldw	r2,20(sp)
 8024de0:	d8c00b17 	ldw	r3,44(sp)
 8024de4:	10bfffc4 	addi	r2,r2,-1
 8024de8:	d8800515 	stw	r2,20(sp)
 8024dec:	183f761e 	bne	r3,zero,8024bc8 <__alt_data_end+0xfffe57c8>
 8024df0:	d9000c17 	ldw	r4,48(sp)
 8024df4:	0101730e 	bge	zero,r4,80253c4 <_dtoa_r+0x15cc>
 8024df8:	d9000615 	stw	r4,24(sp)
 8024dfc:	003ed006 	br	8024940 <__alt_data_end+0xfffe5540>
 8024e00:	00800084 	movi	r2,2
 8024e04:	3081861e 	bne	r6,r2,8025420 <_dtoa_r+0x1628>
 8024e08:	d8000b15 	stw	zero,44(sp)
 8024e0c:	003f3c06 	br	8024b00 <__alt_data_end+0xfffe5700>
 8024e10:	dc000917 	ldw	r16,36(sp)
 8024e14:	003e9206 	br	8024860 <__alt_data_end+0xfffe5460>
 8024e18:	d9c00317 	ldw	r7,12(sp)
 8024e1c:	00800084 	movi	r2,2
 8024e20:	11fec50e 	bge	r2,r7,8024938 <__alt_data_end+0xfffe5538>
 8024e24:	d9000617 	ldw	r4,24(sp)
 8024e28:	20013c1e 	bne	r4,zero,802531c <_dtoa_r+0x1524>
 8024e2c:	a80b883a 	mov	r5,r21
 8024e30:	000f883a 	mov	r7,zero
 8024e34:	01800144 	movi	r6,5
 8024e38:	e009883a 	mov	r4,fp
 8024e3c:	8026ba00 	call	8026ba0 <__multadd>
 8024e40:	100b883a 	mov	r5,r2
 8024e44:	8009883a 	mov	r4,r16
 8024e48:	102b883a 	mov	r21,r2
 8024e4c:	80274540 	call	8027454 <__mcmp>
 8024e50:	dc000915 	stw	r16,36(sp)
 8024e54:	00bf410e 	bge	zero,r2,8024b5c <__alt_data_end+0xfffe575c>
 8024e58:	d9c00717 	ldw	r7,28(sp)
 8024e5c:	00800c44 	movi	r2,49
 8024e60:	38800005 	stb	r2,0(r7)
 8024e64:	d8800517 	ldw	r2,20(sp)
 8024e68:	3dc00044 	addi	r23,r7,1
 8024e6c:	10800044 	addi	r2,r2,1
 8024e70:	d8800515 	stw	r2,20(sp)
 8024e74:	003f3d06 	br	8024b6c <__alt_data_end+0xfffe576c>
 8024e78:	d9800517 	ldw	r6,20(sp)
 8024e7c:	d9c00717 	ldw	r7,28(sp)
 8024e80:	00800c44 	movi	r2,49
 8024e84:	31800044 	addi	r6,r6,1
 8024e88:	d9800515 	stw	r6,20(sp)
 8024e8c:	38800005 	stb	r2,0(r7)
 8024e90:	003edf06 	br	8024a10 <__alt_data_end+0xfffe5610>
 8024e94:	d8000b15 	stw	zero,44(sp)
 8024e98:	003c9f06 	br	8024118 <__alt_data_end+0xfffe4d18>
 8024e9c:	903e7e1e 	bne	r18,zero,8024898 <__alt_data_end+0xfffe5498>
 8024ea0:	00800434 	movhi	r2,16
 8024ea4:	10bfffc4 	addi	r2,r2,-1
 8024ea8:	9884703a 	and	r2,r19,r2
 8024eac:	1000ea1e 	bne	r2,zero,8025258 <_dtoa_r+0x1460>
 8024eb0:	9cdffc2c 	andhi	r19,r19,32752
 8024eb4:	9800e826 	beq	r19,zero,8025258 <_dtoa_r+0x1460>
 8024eb8:	d9c00817 	ldw	r7,32(sp)
 8024ebc:	b5800044 	addi	r22,r22,1
 8024ec0:	04c00044 	movi	r19,1
 8024ec4:	39c00044 	addi	r7,r7,1
 8024ec8:	d9c00815 	stw	r7,32(sp)
 8024ecc:	d8800d17 	ldw	r2,52(sp)
 8024ed0:	103e721e 	bne	r2,zero,802489c <__alt_data_end+0xfffe549c>
 8024ed4:	00800044 	movi	r2,1
 8024ed8:	003e7906 	br	80248c0 <__alt_data_end+0xfffe54c0>
 8024edc:	8009883a 	mov	r4,r16
 8024ee0:	802db5c0 	call	802db5c <__floatsidf>
 8024ee4:	d9800f17 	ldw	r6,60(sp)
 8024ee8:	d9c01017 	ldw	r7,64(sp)
 8024eec:	1009883a 	mov	r4,r2
 8024ef0:	180b883a 	mov	r5,r3
 8024ef4:	802c9740 	call	802c974 <__muldf3>
 8024ef8:	000d883a 	mov	r6,zero
 8024efc:	01d00734 	movhi	r7,16412
 8024f00:	1009883a 	mov	r4,r2
 8024f04:	180b883a 	mov	r5,r3
 8024f08:	802b4a00 	call	802b4a0 <__adddf3>
 8024f0c:	047f3034 	movhi	r17,64704
 8024f10:	1021883a 	mov	r16,r2
 8024f14:	1c63883a 	add	r17,r3,r17
 8024f18:	d9000f17 	ldw	r4,60(sp)
 8024f1c:	d9401017 	ldw	r5,64(sp)
 8024f20:	000d883a 	mov	r6,zero
 8024f24:	01d00534 	movhi	r7,16404
 8024f28:	802d1e00 	call	802d1e0 <__subdf3>
 8024f2c:	800d883a 	mov	r6,r16
 8024f30:	880f883a 	mov	r7,r17
 8024f34:	1009883a 	mov	r4,r2
 8024f38:	180b883a 	mov	r5,r3
 8024f3c:	102b883a 	mov	r21,r2
 8024f40:	1829883a 	mov	r20,r3
 8024f44:	802c7a40 	call	802c7a4 <__gedf2>
 8024f48:	00806c16 	blt	zero,r2,80250fc <_dtoa_r+0x1304>
 8024f4c:	89e0003c 	xorhi	r7,r17,32768
 8024f50:	800d883a 	mov	r6,r16
 8024f54:	a809883a 	mov	r4,r21
 8024f58:	a00b883a 	mov	r5,r20
 8024f5c:	802c8800 	call	802c880 <__ledf2>
 8024f60:	103d7e0e 	bge	r2,zero,802455c <__alt_data_end+0xfffe515c>
 8024f64:	002b883a 	mov	r21,zero
 8024f68:	0023883a 	mov	r17,zero
 8024f6c:	003efb06 	br	8024b5c <__alt_data_end+0xfffe575c>
 8024f70:	d8800717 	ldw	r2,28(sp)
 8024f74:	003bd006 	br	8023eb8 <__alt_data_end+0xfffe4ab8>
 8024f78:	d9000a17 	ldw	r4,40(sp)
 8024f7c:	d9800d17 	ldw	r6,52(sp)
 8024f80:	dd400a15 	stw	r21,40(sp)
 8024f84:	a905c83a 	sub	r2,r21,r4
 8024f88:	308d883a 	add	r6,r6,r2
 8024f8c:	d9800d15 	stw	r6,52(sp)
 8024f90:	002b883a 	mov	r21,zero
 8024f94:	003e0606 	br	80247b0 <__alt_data_end+0xfffe53b0>
 8024f98:	9023883a 	mov	r17,r18
 8024f9c:	9829883a 	mov	r20,r19
 8024fa0:	04000084 	movi	r16,2
 8024fa4:	003c9206 	br	80241f0 <__alt_data_end+0xfffe4df0>
 8024fa8:	04000044 	movi	r16,1
 8024fac:	dc000c15 	stw	r16,48(sp)
 8024fb0:	dc000615 	stw	r16,24(sp)
 8024fb4:	dc002215 	stw	r16,136(sp)
 8024fb8:	e0001115 	stw	zero,68(fp)
 8024fbc:	000b883a 	mov	r5,zero
 8024fc0:	003c6906 	br	8024168 <__alt_data_end+0xfffe4d68>
 8024fc4:	3021883a 	mov	r16,r6
 8024fc8:	003ffb06 	br	8024fb8 <__alt_data_end+0xfffe5bb8>
 8024fcc:	1000021e 	bne	r2,zero,8024fd8 <_dtoa_r+0x11e0>
 8024fd0:	4200004c 	andi	r8,r8,1
 8024fd4:	403e7d1e 	bne	r8,zero,80249cc <__alt_data_end+0xfffe55cc>
 8024fd8:	01000c04 	movi	r4,48
 8024fdc:	00000106 	br	8024fe4 <_dtoa_r+0x11ec>
 8024fe0:	102f883a 	mov	r23,r2
 8024fe4:	b8bfffc4 	addi	r2,r23,-1
 8024fe8:	10c00007 	ldb	r3,0(r2)
 8024fec:	193ffc26 	beq	r3,r4,8024fe0 <__alt_data_end+0xfffe5be0>
 8024ff0:	003e8706 	br	8024a10 <__alt_data_end+0xfffe5610>
 8024ff4:	d8800517 	ldw	r2,20(sp)
 8024ff8:	00a3c83a 	sub	r17,zero,r2
 8024ffc:	8800a426 	beq	r17,zero,8025290 <_dtoa_r+0x1498>
 8025000:	888003cc 	andi	r2,r17,15
 8025004:	100490fa 	slli	r2,r2,3
 8025008:	00c200f4 	movhi	r3,2051
 802500c:	18c77604 	addi	r3,r3,7640
 8025010:	1885883a 	add	r2,r3,r2
 8025014:	11800017 	ldw	r6,0(r2)
 8025018:	11c00117 	ldw	r7,4(r2)
 802501c:	9009883a 	mov	r4,r18
 8025020:	980b883a 	mov	r5,r19
 8025024:	8823d13a 	srai	r17,r17,4
 8025028:	802c9740 	call	802c974 <__muldf3>
 802502c:	d8800f15 	stw	r2,60(sp)
 8025030:	d8c01015 	stw	r3,64(sp)
 8025034:	8800e826 	beq	r17,zero,80253d8 <_dtoa_r+0x15e0>
 8025038:	050200f4 	movhi	r20,2051
 802503c:	a5076c04 	addi	r20,r20,7600
 8025040:	04000084 	movi	r16,2
 8025044:	8980004c 	andi	r6,r17,1
 8025048:	1009883a 	mov	r4,r2
 802504c:	8823d07a 	srai	r17,r17,1
 8025050:	180b883a 	mov	r5,r3
 8025054:	30000426 	beq	r6,zero,8025068 <_dtoa_r+0x1270>
 8025058:	a1800017 	ldw	r6,0(r20)
 802505c:	a1c00117 	ldw	r7,4(r20)
 8025060:	84000044 	addi	r16,r16,1
 8025064:	802c9740 	call	802c974 <__muldf3>
 8025068:	a5000204 	addi	r20,r20,8
 802506c:	883ff51e 	bne	r17,zero,8025044 <__alt_data_end+0xfffe5c44>
 8025070:	d8800f15 	stw	r2,60(sp)
 8025074:	d8c01015 	stw	r3,64(sp)
 8025078:	003c7606 	br	8024254 <__alt_data_end+0xfffe4e54>
 802507c:	00c00c04 	movi	r3,48
 8025080:	10c00005 	stb	r3,0(r2)
 8025084:	d8c00517 	ldw	r3,20(sp)
 8025088:	bd3fffc3 	ldbu	r20,-1(r23)
 802508c:	18c00044 	addi	r3,r3,1
 8025090:	d8c00515 	stw	r3,20(sp)
 8025094:	003db906 	br	802477c <__alt_data_end+0xfffe537c>
 8025098:	89400117 	ldw	r5,4(r17)
 802509c:	e009883a 	mov	r4,fp
 80250a0:	8026ad00 	call	8026ad0 <_Balloc>
 80250a4:	89800417 	ldw	r6,16(r17)
 80250a8:	89400304 	addi	r5,r17,12
 80250ac:	11000304 	addi	r4,r2,12
 80250b0:	31800084 	addi	r6,r6,2
 80250b4:	318d883a 	add	r6,r6,r6
 80250b8:	318d883a 	add	r6,r6,r6
 80250bc:	1027883a 	mov	r19,r2
 80250c0:	802159c0 	call	802159c <memcpy>
 80250c4:	01800044 	movi	r6,1
 80250c8:	980b883a 	mov	r5,r19
 80250cc:	e009883a 	mov	r4,fp
 80250d0:	802730c0 	call	802730c <__lshift>
 80250d4:	1029883a 	mov	r20,r2
 80250d8:	003ecc06 	br	8024c0c <__alt_data_end+0xfffe580c>
 80250dc:	00800e44 	movi	r2,57
 80250e0:	90809026 	beq	r18,r2,8025324 <_dtoa_r+0x152c>
 80250e4:	92000044 	addi	r8,r18,1
 80250e8:	003f1f06 	br	8024d68 <__alt_data_end+0xfffe5968>
 80250ec:	9011883a 	mov	r8,r18
 80250f0:	8825883a 	mov	r18,r17
 80250f4:	a023883a 	mov	r17,r20
 80250f8:	003e2906 	br	80249a0 <__alt_data_end+0xfffe55a0>
 80250fc:	002b883a 	mov	r21,zero
 8025100:	0023883a 	mov	r17,zero
 8025104:	003f5406 	br	8024e58 <__alt_data_end+0xfffe5a58>
 8025108:	61bfffc4 	addi	r6,r12,-1
 802510c:	300490fa 	slli	r2,r6,3
 8025110:	00c200f4 	movhi	r3,2051
 8025114:	18c77604 	addi	r3,r3,7640
 8025118:	1885883a 	add	r2,r3,r2
 802511c:	11000017 	ldw	r4,0(r2)
 8025120:	11400117 	ldw	r5,4(r2)
 8025124:	d8800717 	ldw	r2,28(sp)
 8025128:	880f883a 	mov	r7,r17
 802512c:	d9801215 	stw	r6,72(sp)
 8025130:	800d883a 	mov	r6,r16
 8025134:	db001615 	stw	r12,88(sp)
 8025138:	15c00044 	addi	r23,r2,1
 802513c:	802c9740 	call	802c974 <__muldf3>
 8025140:	d9401017 	ldw	r5,64(sp)
 8025144:	d9000f17 	ldw	r4,60(sp)
 8025148:	d8c01515 	stw	r3,84(sp)
 802514c:	d8801415 	stw	r2,80(sp)
 8025150:	802dadc0 	call	802dadc <__fixdfsi>
 8025154:	1009883a 	mov	r4,r2
 8025158:	1021883a 	mov	r16,r2
 802515c:	802db5c0 	call	802db5c <__floatsidf>
 8025160:	d9000f17 	ldw	r4,60(sp)
 8025164:	d9401017 	ldw	r5,64(sp)
 8025168:	100d883a 	mov	r6,r2
 802516c:	180f883a 	mov	r7,r3
 8025170:	802d1e00 	call	802d1e0 <__subdf3>
 8025174:	1829883a 	mov	r20,r3
 8025178:	d8c00717 	ldw	r3,28(sp)
 802517c:	84000c04 	addi	r16,r16,48
 8025180:	1023883a 	mov	r17,r2
 8025184:	1c000005 	stb	r16,0(r3)
 8025188:	db001617 	ldw	r12,88(sp)
 802518c:	00800044 	movi	r2,1
 8025190:	60802226 	beq	r12,r2,802521c <_dtoa_r+0x1424>
 8025194:	d9c00717 	ldw	r7,28(sp)
 8025198:	8805883a 	mov	r2,r17
 802519c:	b82b883a 	mov	r21,r23
 80251a0:	3b19883a 	add	r12,r7,r12
 80251a4:	6023883a 	mov	r17,r12
 80251a8:	a007883a 	mov	r3,r20
 80251ac:	dc800f15 	stw	r18,60(sp)
 80251b0:	000d883a 	mov	r6,zero
 80251b4:	01d00934 	movhi	r7,16420
 80251b8:	1009883a 	mov	r4,r2
 80251bc:	180b883a 	mov	r5,r3
 80251c0:	802c9740 	call	802c974 <__muldf3>
 80251c4:	180b883a 	mov	r5,r3
 80251c8:	1009883a 	mov	r4,r2
 80251cc:	1829883a 	mov	r20,r3
 80251d0:	1025883a 	mov	r18,r2
 80251d4:	802dadc0 	call	802dadc <__fixdfsi>
 80251d8:	1009883a 	mov	r4,r2
 80251dc:	1021883a 	mov	r16,r2
 80251e0:	802db5c0 	call	802db5c <__floatsidf>
 80251e4:	100d883a 	mov	r6,r2
 80251e8:	180f883a 	mov	r7,r3
 80251ec:	9009883a 	mov	r4,r18
 80251f0:	a00b883a 	mov	r5,r20
 80251f4:	84000c04 	addi	r16,r16,48
 80251f8:	802d1e00 	call	802d1e0 <__subdf3>
 80251fc:	ad400044 	addi	r21,r21,1
 8025200:	ac3fffc5 	stb	r16,-1(r21)
 8025204:	ac7fea1e 	bne	r21,r17,80251b0 <__alt_data_end+0xfffe5db0>
 8025208:	1023883a 	mov	r17,r2
 802520c:	d8801217 	ldw	r2,72(sp)
 8025210:	dc800f17 	ldw	r18,60(sp)
 8025214:	1829883a 	mov	r20,r3
 8025218:	b8af883a 	add	r23,r23,r2
 802521c:	d9001417 	ldw	r4,80(sp)
 8025220:	d9401517 	ldw	r5,84(sp)
 8025224:	000d883a 	mov	r6,zero
 8025228:	01cff834 	movhi	r7,16352
 802522c:	802b4a00 	call	802b4a0 <__adddf3>
 8025230:	880d883a 	mov	r6,r17
 8025234:	a00f883a 	mov	r7,r20
 8025238:	1009883a 	mov	r4,r2
 802523c:	180b883a 	mov	r5,r3
 8025240:	802c8800 	call	802c880 <__ledf2>
 8025244:	10003e0e 	bge	r2,zero,8025340 <_dtoa_r+0x1548>
 8025248:	d9001317 	ldw	r4,76(sp)
 802524c:	bd3fffc3 	ldbu	r20,-1(r23)
 8025250:	d9000515 	stw	r4,20(sp)
 8025254:	003d3b06 	br	8024744 <__alt_data_end+0xfffe5344>
 8025258:	0027883a 	mov	r19,zero
 802525c:	003f1b06 	br	8024ecc <__alt_data_end+0xfffe5acc>
 8025260:	d8800817 	ldw	r2,32(sp)
 8025264:	11e9c83a 	sub	r20,r2,r7
 8025268:	0005883a 	mov	r2,zero
 802526c:	003d5406 	br	80247c0 <__alt_data_end+0xfffe53c0>
 8025270:	00800044 	movi	r2,1
 8025274:	003dc706 	br	8024994 <__alt_data_end+0xfffe5594>
 8025278:	d8c00217 	ldw	r3,8(sp)
 802527c:	00800d84 	movi	r2,54
 8025280:	dd400a17 	ldw	r21,40(sp)
 8025284:	10c5c83a 	sub	r2,r2,r3
 8025288:	dd000817 	ldw	r20,32(sp)
 802528c:	003d4c06 	br	80247c0 <__alt_data_end+0xfffe53c0>
 8025290:	dc800f15 	stw	r18,60(sp)
 8025294:	dcc01015 	stw	r19,64(sp)
 8025298:	04000084 	movi	r16,2
 802529c:	003bed06 	br	8024254 <__alt_data_end+0xfffe4e54>
 80252a0:	d9000617 	ldw	r4,24(sp)
 80252a4:	203f0d26 	beq	r4,zero,8024edc <__alt_data_end+0xfffe5adc>
 80252a8:	d9800c17 	ldw	r6,48(sp)
 80252ac:	01bcab0e 	bge	zero,r6,802455c <__alt_data_end+0xfffe515c>
 80252b0:	d9401017 	ldw	r5,64(sp)
 80252b4:	d9000f17 	ldw	r4,60(sp)
 80252b8:	000d883a 	mov	r6,zero
 80252bc:	01d00934 	movhi	r7,16420
 80252c0:	802c9740 	call	802c974 <__muldf3>
 80252c4:	81000044 	addi	r4,r16,1
 80252c8:	d8800f15 	stw	r2,60(sp)
 80252cc:	d8c01015 	stw	r3,64(sp)
 80252d0:	802db5c0 	call	802db5c <__floatsidf>
 80252d4:	d9800f17 	ldw	r6,60(sp)
 80252d8:	d9c01017 	ldw	r7,64(sp)
 80252dc:	1009883a 	mov	r4,r2
 80252e0:	180b883a 	mov	r5,r3
 80252e4:	802c9740 	call	802c974 <__muldf3>
 80252e8:	01d00734 	movhi	r7,16412
 80252ec:	000d883a 	mov	r6,zero
 80252f0:	1009883a 	mov	r4,r2
 80252f4:	180b883a 	mov	r5,r3
 80252f8:	802b4a00 	call	802b4a0 <__adddf3>
 80252fc:	d9c00517 	ldw	r7,20(sp)
 8025300:	047f3034 	movhi	r17,64704
 8025304:	1021883a 	mov	r16,r2
 8025308:	39ffffc4 	addi	r7,r7,-1
 802530c:	d9c01315 	stw	r7,76(sp)
 8025310:	1c63883a 	add	r17,r3,r17
 8025314:	db000c17 	ldw	r12,48(sp)
 8025318:	003bea06 	br	80242c4 <__alt_data_end+0xfffe4ec4>
 802531c:	dc000915 	stw	r16,36(sp)
 8025320:	003e0e06 	br	8024b5c <__alt_data_end+0xfffe575c>
 8025324:	01000e44 	movi	r4,57
 8025328:	8825883a 	mov	r18,r17
 802532c:	9dc00044 	addi	r23,r19,1
 8025330:	99000005 	stb	r4,0(r19)
 8025334:	a023883a 	mov	r17,r20
 8025338:	dc000915 	stw	r16,36(sp)
 802533c:	003da406 	br	80249d0 <__alt_data_end+0xfffe55d0>
 8025340:	d9801417 	ldw	r6,80(sp)
 8025344:	d9c01517 	ldw	r7,84(sp)
 8025348:	0009883a 	mov	r4,zero
 802534c:	014ff834 	movhi	r5,16352
 8025350:	802d1e00 	call	802d1e0 <__subdf3>
 8025354:	880d883a 	mov	r6,r17
 8025358:	a00f883a 	mov	r7,r20
 802535c:	1009883a 	mov	r4,r2
 8025360:	180b883a 	mov	r5,r3
 8025364:	802c7a40 	call	802c7a4 <__gedf2>
 8025368:	00bc7c0e 	bge	zero,r2,802455c <__alt_data_end+0xfffe515c>
 802536c:	01000c04 	movi	r4,48
 8025370:	00000106 	br	8025378 <_dtoa_r+0x1580>
 8025374:	102f883a 	mov	r23,r2
 8025378:	b8bfffc4 	addi	r2,r23,-1
 802537c:	10c00007 	ldb	r3,0(r2)
 8025380:	193ffc26 	beq	r3,r4,8025374 <__alt_data_end+0xfffe5f74>
 8025384:	d9801317 	ldw	r6,76(sp)
 8025388:	d9800515 	stw	r6,20(sp)
 802538c:	003c4406 	br	80244a0 <__alt_data_end+0xfffe50a0>
 8025390:	d9801317 	ldw	r6,76(sp)
 8025394:	d9800515 	stw	r6,20(sp)
 8025398:	003cea06 	br	8024744 <__alt_data_end+0xfffe5344>
 802539c:	dd800f17 	ldw	r22,60(sp)
 80253a0:	dcc01017 	ldw	r19,64(sp)
 80253a4:	dc801217 	ldw	r18,72(sp)
 80253a8:	003c6c06 	br	802455c <__alt_data_end+0xfffe515c>
 80253ac:	903e031e 	bne	r18,zero,8024bbc <__alt_data_end+0xfffe57bc>
 80253b0:	003ebb06 	br	8024ea0 <__alt_data_end+0xfffe5aa0>
 80253b4:	103e6c1e 	bne	r2,zero,8024d68 <__alt_data_end+0xfffe5968>
 80253b8:	4080004c 	andi	r2,r8,1
 80253bc:	103e6a26 	beq	r2,zero,8024d68 <__alt_data_end+0xfffe5968>
 80253c0:	003e6606 	br	8024d5c <__alt_data_end+0xfffe595c>
 80253c4:	d8c00317 	ldw	r3,12(sp)
 80253c8:	00800084 	movi	r2,2
 80253cc:	10c02916 	blt	r2,r3,8025474 <_dtoa_r+0x167c>
 80253d0:	d9000c17 	ldw	r4,48(sp)
 80253d4:	003e8806 	br	8024df8 <__alt_data_end+0xfffe59f8>
 80253d8:	04000084 	movi	r16,2
 80253dc:	003b9d06 	br	8024254 <__alt_data_end+0xfffe4e54>
 80253e0:	d9001317 	ldw	r4,76(sp)
 80253e4:	d9000515 	stw	r4,20(sp)
 80253e8:	003cd606 	br	8024744 <__alt_data_end+0xfffe5344>
 80253ec:	d8801317 	ldw	r2,76(sp)
 80253f0:	d8800515 	stw	r2,20(sp)
 80253f4:	003c2a06 	br	80244a0 <__alt_data_end+0xfffe50a0>
 80253f8:	d9800317 	ldw	r6,12(sp)
 80253fc:	00800084 	movi	r2,2
 8025400:	11801516 	blt	r2,r6,8025458 <_dtoa_r+0x1660>
 8025404:	d9c00c17 	ldw	r7,48(sp)
 8025408:	d9c00615 	stw	r7,24(sp)
 802540c:	003df706 	br	8024bec <__alt_data_end+0xfffe57ec>
 8025410:	193d3926 	beq	r3,r4,80248f8 <__alt_data_end+0xfffe54f8>
 8025414:	00c00f04 	movi	r3,60
 8025418:	1885c83a 	sub	r2,r3,r2
 802541c:	003ddf06 	br	8024b9c <__alt_data_end+0xfffe579c>
 8025420:	e009883a 	mov	r4,fp
 8025424:	e0001115 	stw	zero,68(fp)
 8025428:	000b883a 	mov	r5,zero
 802542c:	8026ad00 	call	8026ad0 <_Balloc>
 8025430:	d8800715 	stw	r2,28(sp)
 8025434:	d8c00717 	ldw	r3,28(sp)
 8025438:	00bfffc4 	movi	r2,-1
 802543c:	01000044 	movi	r4,1
 8025440:	d8800c15 	stw	r2,48(sp)
 8025444:	e0c01015 	stw	r3,64(fp)
 8025448:	d9000b15 	stw	r4,44(sp)
 802544c:	d8800615 	stw	r2,24(sp)
 8025450:	d8002215 	stw	zero,136(sp)
 8025454:	003c4106 	br	802455c <__alt_data_end+0xfffe515c>
 8025458:	d8c00c17 	ldw	r3,48(sp)
 802545c:	d8c00615 	stw	r3,24(sp)
 8025460:	003e7006 	br	8024e24 <__alt_data_end+0xfffe5a24>
 8025464:	04400044 	movi	r17,1
 8025468:	003b2006 	br	80240ec <__alt_data_end+0xfffe4cec>
 802546c:	000b883a 	mov	r5,zero
 8025470:	003b3d06 	br	8024168 <__alt_data_end+0xfffe4d68>
 8025474:	d8800c17 	ldw	r2,48(sp)
 8025478:	d8800615 	stw	r2,24(sp)
 802547c:	003e6906 	br	8024e24 <__alt_data_end+0xfffe5a24>

08025480 <__fp_unlock>:
 8025480:	0005883a 	mov	r2,zero
 8025484:	f800283a 	ret

08025488 <_cleanup_r>:
 8025488:	014200f4 	movhi	r5,2051
 802548c:	29670804 	addi	r5,r5,-25568
 8025490:	8025dbc1 	jmpi	8025dbc <_fwalk_reent>

08025494 <__sinit.part.1>:
 8025494:	defff704 	addi	sp,sp,-36
 8025498:	00c200b4 	movhi	r3,2050
 802549c:	dfc00815 	stw	ra,32(sp)
 80254a0:	ddc00715 	stw	r23,28(sp)
 80254a4:	dd800615 	stw	r22,24(sp)
 80254a8:	dd400515 	stw	r21,20(sp)
 80254ac:	dd000415 	stw	r20,16(sp)
 80254b0:	dcc00315 	stw	r19,12(sp)
 80254b4:	dc800215 	stw	r18,8(sp)
 80254b8:	dc400115 	stw	r17,4(sp)
 80254bc:	dc000015 	stw	r16,0(sp)
 80254c0:	18d52204 	addi	r3,r3,21640
 80254c4:	24000117 	ldw	r16,4(r4)
 80254c8:	20c00f15 	stw	r3,60(r4)
 80254cc:	2080bb04 	addi	r2,r4,748
 80254d0:	00c000c4 	movi	r3,3
 80254d4:	20c0b915 	stw	r3,740(r4)
 80254d8:	2080ba15 	stw	r2,744(r4)
 80254dc:	2000b815 	stw	zero,736(r4)
 80254e0:	05c00204 	movi	r23,8
 80254e4:	00800104 	movi	r2,4
 80254e8:	2025883a 	mov	r18,r4
 80254ec:	b80d883a 	mov	r6,r23
 80254f0:	81001704 	addi	r4,r16,92
 80254f4:	000b883a 	mov	r5,zero
 80254f8:	80000015 	stw	zero,0(r16)
 80254fc:	80000115 	stw	zero,4(r16)
 8025500:	80000215 	stw	zero,8(r16)
 8025504:	8080030d 	sth	r2,12(r16)
 8025508:	80001915 	stw	zero,100(r16)
 802550c:	8000038d 	sth	zero,14(r16)
 8025510:	80000415 	stw	zero,16(r16)
 8025514:	80000515 	stw	zero,20(r16)
 8025518:	80000615 	stw	zero,24(r16)
 802551c:	80269a80 	call	80269a8 <memset>
 8025520:	058200f4 	movhi	r22,2051
 8025524:	94400217 	ldw	r17,8(r18)
 8025528:	054200f4 	movhi	r21,2051
 802552c:	050200f4 	movhi	r20,2051
 8025530:	04c200f4 	movhi	r19,2051
 8025534:	b5a06d04 	addi	r22,r22,-32332
 8025538:	ad608404 	addi	r21,r21,-32240
 802553c:	a520a304 	addi	r20,r20,-32116
 8025540:	9ce0ba04 	addi	r19,r19,-32024
 8025544:	85800815 	stw	r22,32(r16)
 8025548:	85400915 	stw	r21,36(r16)
 802554c:	85000a15 	stw	r20,40(r16)
 8025550:	84c00b15 	stw	r19,44(r16)
 8025554:	84000715 	stw	r16,28(r16)
 8025558:	00800284 	movi	r2,10
 802555c:	8880030d 	sth	r2,12(r17)
 8025560:	00800044 	movi	r2,1
 8025564:	b80d883a 	mov	r6,r23
 8025568:	89001704 	addi	r4,r17,92
 802556c:	000b883a 	mov	r5,zero
 8025570:	88000015 	stw	zero,0(r17)
 8025574:	88000115 	stw	zero,4(r17)
 8025578:	88000215 	stw	zero,8(r17)
 802557c:	88001915 	stw	zero,100(r17)
 8025580:	8880038d 	sth	r2,14(r17)
 8025584:	88000415 	stw	zero,16(r17)
 8025588:	88000515 	stw	zero,20(r17)
 802558c:	88000615 	stw	zero,24(r17)
 8025590:	80269a80 	call	80269a8 <memset>
 8025594:	94000317 	ldw	r16,12(r18)
 8025598:	00800484 	movi	r2,18
 802559c:	8c400715 	stw	r17,28(r17)
 80255a0:	8d800815 	stw	r22,32(r17)
 80255a4:	8d400915 	stw	r21,36(r17)
 80255a8:	8d000a15 	stw	r20,40(r17)
 80255ac:	8cc00b15 	stw	r19,44(r17)
 80255b0:	8080030d 	sth	r2,12(r16)
 80255b4:	00800084 	movi	r2,2
 80255b8:	80000015 	stw	zero,0(r16)
 80255bc:	80000115 	stw	zero,4(r16)
 80255c0:	80000215 	stw	zero,8(r16)
 80255c4:	80001915 	stw	zero,100(r16)
 80255c8:	8080038d 	sth	r2,14(r16)
 80255cc:	80000415 	stw	zero,16(r16)
 80255d0:	80000515 	stw	zero,20(r16)
 80255d4:	80000615 	stw	zero,24(r16)
 80255d8:	b80d883a 	mov	r6,r23
 80255dc:	000b883a 	mov	r5,zero
 80255e0:	81001704 	addi	r4,r16,92
 80255e4:	80269a80 	call	80269a8 <memset>
 80255e8:	00800044 	movi	r2,1
 80255ec:	84000715 	stw	r16,28(r16)
 80255f0:	85800815 	stw	r22,32(r16)
 80255f4:	85400915 	stw	r21,36(r16)
 80255f8:	85000a15 	stw	r20,40(r16)
 80255fc:	84c00b15 	stw	r19,44(r16)
 8025600:	90800e15 	stw	r2,56(r18)
 8025604:	dfc00817 	ldw	ra,32(sp)
 8025608:	ddc00717 	ldw	r23,28(sp)
 802560c:	dd800617 	ldw	r22,24(sp)
 8025610:	dd400517 	ldw	r21,20(sp)
 8025614:	dd000417 	ldw	r20,16(sp)
 8025618:	dcc00317 	ldw	r19,12(sp)
 802561c:	dc800217 	ldw	r18,8(sp)
 8025620:	dc400117 	ldw	r17,4(sp)
 8025624:	dc000017 	ldw	r16,0(sp)
 8025628:	dec00904 	addi	sp,sp,36
 802562c:	f800283a 	ret

08025630 <__fp_lock>:
 8025630:	0005883a 	mov	r2,zero
 8025634:	f800283a 	ret

08025638 <__sfmoreglue>:
 8025638:	defffc04 	addi	sp,sp,-16
 802563c:	dc800215 	stw	r18,8(sp)
 8025640:	2825883a 	mov	r18,r5
 8025644:	dc000015 	stw	r16,0(sp)
 8025648:	01401a04 	movi	r5,104
 802564c:	2021883a 	mov	r16,r4
 8025650:	913fffc4 	addi	r4,r18,-1
 8025654:	dfc00315 	stw	ra,12(sp)
 8025658:	dc400115 	stw	r17,4(sp)
 802565c:	80214e80 	call	80214e8 <__mulsi3>
 8025660:	8009883a 	mov	r4,r16
 8025664:	11401d04 	addi	r5,r2,116
 8025668:	1023883a 	mov	r17,r2
 802566c:	8025f5c0 	call	8025f5c <_malloc_r>
 8025670:	1021883a 	mov	r16,r2
 8025674:	10000726 	beq	r2,zero,8025694 <__sfmoreglue+0x5c>
 8025678:	11000304 	addi	r4,r2,12
 802567c:	10000015 	stw	zero,0(r2)
 8025680:	14800115 	stw	r18,4(r2)
 8025684:	11000215 	stw	r4,8(r2)
 8025688:	89801a04 	addi	r6,r17,104
 802568c:	000b883a 	mov	r5,zero
 8025690:	80269a80 	call	80269a8 <memset>
 8025694:	8005883a 	mov	r2,r16
 8025698:	dfc00317 	ldw	ra,12(sp)
 802569c:	dc800217 	ldw	r18,8(sp)
 80256a0:	dc400117 	ldw	r17,4(sp)
 80256a4:	dc000017 	ldw	r16,0(sp)
 80256a8:	dec00404 	addi	sp,sp,16
 80256ac:	f800283a 	ret

080256b0 <__sfp>:
 80256b0:	defffb04 	addi	sp,sp,-20
 80256b4:	dc000015 	stw	r16,0(sp)
 80256b8:	040200f4 	movhi	r16,2051
 80256bc:	840eee04 	addi	r16,r16,15288
 80256c0:	dcc00315 	stw	r19,12(sp)
 80256c4:	2027883a 	mov	r19,r4
 80256c8:	81000017 	ldw	r4,0(r16)
 80256cc:	dfc00415 	stw	ra,16(sp)
 80256d0:	dc800215 	stw	r18,8(sp)
 80256d4:	20800e17 	ldw	r2,56(r4)
 80256d8:	dc400115 	stw	r17,4(sp)
 80256dc:	1000021e 	bne	r2,zero,80256e8 <__sfp+0x38>
 80256e0:	80254940 	call	8025494 <__sinit.part.1>
 80256e4:	81000017 	ldw	r4,0(r16)
 80256e8:	2480b804 	addi	r18,r4,736
 80256ec:	047fffc4 	movi	r17,-1
 80256f0:	91000117 	ldw	r4,4(r18)
 80256f4:	94000217 	ldw	r16,8(r18)
 80256f8:	213fffc4 	addi	r4,r4,-1
 80256fc:	20000a16 	blt	r4,zero,8025728 <__sfp+0x78>
 8025700:	8080030f 	ldh	r2,12(r16)
 8025704:	10000c26 	beq	r2,zero,8025738 <__sfp+0x88>
 8025708:	80c01d04 	addi	r3,r16,116
 802570c:	00000206 	br	8025718 <__sfp+0x68>
 8025710:	18bfe60f 	ldh	r2,-104(r3)
 8025714:	10000826 	beq	r2,zero,8025738 <__sfp+0x88>
 8025718:	213fffc4 	addi	r4,r4,-1
 802571c:	1c3ffd04 	addi	r16,r3,-12
 8025720:	18c01a04 	addi	r3,r3,104
 8025724:	247ffa1e 	bne	r4,r17,8025710 <__alt_data_end+0xfffe6310>
 8025728:	90800017 	ldw	r2,0(r18)
 802572c:	10001d26 	beq	r2,zero,80257a4 <__sfp+0xf4>
 8025730:	1025883a 	mov	r18,r2
 8025734:	003fee06 	br	80256f0 <__alt_data_end+0xfffe62f0>
 8025738:	00bfffc4 	movi	r2,-1
 802573c:	8080038d 	sth	r2,14(r16)
 8025740:	00800044 	movi	r2,1
 8025744:	8080030d 	sth	r2,12(r16)
 8025748:	80001915 	stw	zero,100(r16)
 802574c:	80000015 	stw	zero,0(r16)
 8025750:	80000215 	stw	zero,8(r16)
 8025754:	80000115 	stw	zero,4(r16)
 8025758:	80000415 	stw	zero,16(r16)
 802575c:	80000515 	stw	zero,20(r16)
 8025760:	80000615 	stw	zero,24(r16)
 8025764:	01800204 	movi	r6,8
 8025768:	000b883a 	mov	r5,zero
 802576c:	81001704 	addi	r4,r16,92
 8025770:	80269a80 	call	80269a8 <memset>
 8025774:	8005883a 	mov	r2,r16
 8025778:	80000c15 	stw	zero,48(r16)
 802577c:	80000d15 	stw	zero,52(r16)
 8025780:	80001115 	stw	zero,68(r16)
 8025784:	80001215 	stw	zero,72(r16)
 8025788:	dfc00417 	ldw	ra,16(sp)
 802578c:	dcc00317 	ldw	r19,12(sp)
 8025790:	dc800217 	ldw	r18,8(sp)
 8025794:	dc400117 	ldw	r17,4(sp)
 8025798:	dc000017 	ldw	r16,0(sp)
 802579c:	dec00504 	addi	sp,sp,20
 80257a0:	f800283a 	ret
 80257a4:	01400104 	movi	r5,4
 80257a8:	9809883a 	mov	r4,r19
 80257ac:	80256380 	call	8025638 <__sfmoreglue>
 80257b0:	90800015 	stw	r2,0(r18)
 80257b4:	103fde1e 	bne	r2,zero,8025730 <__alt_data_end+0xfffe6330>
 80257b8:	00800304 	movi	r2,12
 80257bc:	98800015 	stw	r2,0(r19)
 80257c0:	0005883a 	mov	r2,zero
 80257c4:	003ff006 	br	8025788 <__alt_data_end+0xfffe6388>

080257c8 <_cleanup>:
 80257c8:	008200f4 	movhi	r2,2051
 80257cc:	108eee04 	addi	r2,r2,15288
 80257d0:	11000017 	ldw	r4,0(r2)
 80257d4:	014200f4 	movhi	r5,2051
 80257d8:	29670804 	addi	r5,r5,-25568
 80257dc:	8025dbc1 	jmpi	8025dbc <_fwalk_reent>

080257e0 <__sinit>:
 80257e0:	20800e17 	ldw	r2,56(r4)
 80257e4:	10000126 	beq	r2,zero,80257ec <__sinit+0xc>
 80257e8:	f800283a 	ret
 80257ec:	80254941 	jmpi	8025494 <__sinit.part.1>

080257f0 <__sfp_lock_acquire>:
 80257f0:	f800283a 	ret

080257f4 <__sfp_lock_release>:
 80257f4:	f800283a 	ret

080257f8 <__sinit_lock_acquire>:
 80257f8:	f800283a 	ret

080257fc <__sinit_lock_release>:
 80257fc:	f800283a 	ret

08025800 <__fp_lock_all>:
 8025800:	008200f4 	movhi	r2,2051
 8025804:	108eef04 	addi	r2,r2,15292
 8025808:	11000017 	ldw	r4,0(r2)
 802580c:	014200b4 	movhi	r5,2050
 8025810:	29558c04 	addi	r5,r5,22064
 8025814:	8025cf81 	jmpi	8025cf8 <_fwalk>

08025818 <__fp_unlock_all>:
 8025818:	008200f4 	movhi	r2,2051
 802581c:	108eef04 	addi	r2,r2,15292
 8025820:	11000017 	ldw	r4,0(r2)
 8025824:	014200b4 	movhi	r5,2050
 8025828:	29552004 	addi	r5,r5,21632
 802582c:	8025cf81 	jmpi	8025cf8 <_fwalk>

08025830 <__sfvwrite_r>:
 8025830:	30800217 	ldw	r2,8(r6)
 8025834:	10006726 	beq	r2,zero,80259d4 <__sfvwrite_r+0x1a4>
 8025838:	28c0030b 	ldhu	r3,12(r5)
 802583c:	defff404 	addi	sp,sp,-48
 8025840:	dd400715 	stw	r21,28(sp)
 8025844:	dd000615 	stw	r20,24(sp)
 8025848:	dc000215 	stw	r16,8(sp)
 802584c:	dfc00b15 	stw	ra,44(sp)
 8025850:	df000a15 	stw	fp,40(sp)
 8025854:	ddc00915 	stw	r23,36(sp)
 8025858:	dd800815 	stw	r22,32(sp)
 802585c:	dcc00515 	stw	r19,20(sp)
 8025860:	dc800415 	stw	r18,16(sp)
 8025864:	dc400315 	stw	r17,12(sp)
 8025868:	1880020c 	andi	r2,r3,8
 802586c:	2821883a 	mov	r16,r5
 8025870:	202b883a 	mov	r21,r4
 8025874:	3029883a 	mov	r20,r6
 8025878:	10002726 	beq	r2,zero,8025918 <__sfvwrite_r+0xe8>
 802587c:	28800417 	ldw	r2,16(r5)
 8025880:	10002526 	beq	r2,zero,8025918 <__sfvwrite_r+0xe8>
 8025884:	1880008c 	andi	r2,r3,2
 8025888:	a4400017 	ldw	r17,0(r20)
 802588c:	10002a26 	beq	r2,zero,8025938 <__sfvwrite_r+0x108>
 8025890:	05a00034 	movhi	r22,32768
 8025894:	0027883a 	mov	r19,zero
 8025898:	0025883a 	mov	r18,zero
 802589c:	b5bf0004 	addi	r22,r22,-1024
 80258a0:	980d883a 	mov	r6,r19
 80258a4:	a809883a 	mov	r4,r21
 80258a8:	90004626 	beq	r18,zero,80259c4 <__sfvwrite_r+0x194>
 80258ac:	900f883a 	mov	r7,r18
 80258b0:	b480022e 	bgeu	r22,r18,80258bc <__sfvwrite_r+0x8c>
 80258b4:	01e00034 	movhi	r7,32768
 80258b8:	39ff0004 	addi	r7,r7,-1024
 80258bc:	80800917 	ldw	r2,36(r16)
 80258c0:	81400717 	ldw	r5,28(r16)
 80258c4:	103ee83a 	callr	r2
 80258c8:	00805a0e 	bge	zero,r2,8025a34 <__sfvwrite_r+0x204>
 80258cc:	a0c00217 	ldw	r3,8(r20)
 80258d0:	98a7883a 	add	r19,r19,r2
 80258d4:	90a5c83a 	sub	r18,r18,r2
 80258d8:	1885c83a 	sub	r2,r3,r2
 80258dc:	a0800215 	stw	r2,8(r20)
 80258e0:	103fef1e 	bne	r2,zero,80258a0 <__alt_data_end+0xfffe64a0>
 80258e4:	0005883a 	mov	r2,zero
 80258e8:	dfc00b17 	ldw	ra,44(sp)
 80258ec:	df000a17 	ldw	fp,40(sp)
 80258f0:	ddc00917 	ldw	r23,36(sp)
 80258f4:	dd800817 	ldw	r22,32(sp)
 80258f8:	dd400717 	ldw	r21,28(sp)
 80258fc:	dd000617 	ldw	r20,24(sp)
 8025900:	dcc00517 	ldw	r19,20(sp)
 8025904:	dc800417 	ldw	r18,16(sp)
 8025908:	dc400317 	ldw	r17,12(sp)
 802590c:	dc000217 	ldw	r16,8(sp)
 8025910:	dec00c04 	addi	sp,sp,48
 8025914:	f800283a 	ret
 8025918:	800b883a 	mov	r5,r16
 802591c:	a809883a 	mov	r4,r21
 8025920:	802999c0 	call	802999c <__swsetup_r>
 8025924:	1000ee1e 	bne	r2,zero,8025ce0 <__sfvwrite_r+0x4b0>
 8025928:	80c0030b 	ldhu	r3,12(r16)
 802592c:	a4400017 	ldw	r17,0(r20)
 8025930:	1880008c 	andi	r2,r3,2
 8025934:	103fd61e 	bne	r2,zero,8025890 <__alt_data_end+0xfffe6490>
 8025938:	1880004c 	andi	r2,r3,1
 802593c:	1000421e 	bne	r2,zero,8025a48 <__sfvwrite_r+0x218>
 8025940:	0039883a 	mov	fp,zero
 8025944:	0025883a 	mov	r18,zero
 8025948:	90001a26 	beq	r18,zero,80259b4 <__sfvwrite_r+0x184>
 802594c:	1880800c 	andi	r2,r3,512
 8025950:	84c00217 	ldw	r19,8(r16)
 8025954:	10002126 	beq	r2,zero,80259dc <__sfvwrite_r+0x1ac>
 8025958:	982f883a 	mov	r23,r19
 802595c:	94c09636 	bltu	r18,r19,8025bb8 <__sfvwrite_r+0x388>
 8025960:	1881200c 	andi	r2,r3,1152
 8025964:	1000a11e 	bne	r2,zero,8025bec <__sfvwrite_r+0x3bc>
 8025968:	81000017 	ldw	r4,0(r16)
 802596c:	b80d883a 	mov	r6,r23
 8025970:	e00b883a 	mov	r5,fp
 8025974:	802684c0 	call	802684c <memmove>
 8025978:	80c00217 	ldw	r3,8(r16)
 802597c:	81000017 	ldw	r4,0(r16)
 8025980:	9005883a 	mov	r2,r18
 8025984:	1ce7c83a 	sub	r19,r3,r19
 8025988:	25cf883a 	add	r7,r4,r23
 802598c:	84c00215 	stw	r19,8(r16)
 8025990:	81c00015 	stw	r7,0(r16)
 8025994:	a0c00217 	ldw	r3,8(r20)
 8025998:	e0b9883a 	add	fp,fp,r2
 802599c:	90a5c83a 	sub	r18,r18,r2
 80259a0:	18a7c83a 	sub	r19,r3,r2
 80259a4:	a4c00215 	stw	r19,8(r20)
 80259a8:	983fce26 	beq	r19,zero,80258e4 <__alt_data_end+0xfffe64e4>
 80259ac:	80c0030b 	ldhu	r3,12(r16)
 80259b0:	903fe61e 	bne	r18,zero,802594c <__alt_data_end+0xfffe654c>
 80259b4:	8f000017 	ldw	fp,0(r17)
 80259b8:	8c800117 	ldw	r18,4(r17)
 80259bc:	8c400204 	addi	r17,r17,8
 80259c0:	003fe106 	br	8025948 <__alt_data_end+0xfffe6548>
 80259c4:	8cc00017 	ldw	r19,0(r17)
 80259c8:	8c800117 	ldw	r18,4(r17)
 80259cc:	8c400204 	addi	r17,r17,8
 80259d0:	003fb306 	br	80258a0 <__alt_data_end+0xfffe64a0>
 80259d4:	0005883a 	mov	r2,zero
 80259d8:	f800283a 	ret
 80259dc:	81000017 	ldw	r4,0(r16)
 80259e0:	80800417 	ldw	r2,16(r16)
 80259e4:	11005a36 	bltu	r2,r4,8025b50 <__sfvwrite_r+0x320>
 80259e8:	85c00517 	ldw	r23,20(r16)
 80259ec:	95c05836 	bltu	r18,r23,8025b50 <__sfvwrite_r+0x320>
 80259f0:	00a00034 	movhi	r2,32768
 80259f4:	10bfffc4 	addi	r2,r2,-1
 80259f8:	9009883a 	mov	r4,r18
 80259fc:	1480012e 	bgeu	r2,r18,8025a04 <__sfvwrite_r+0x1d4>
 8025a00:	1009883a 	mov	r4,r2
 8025a04:	b80b883a 	mov	r5,r23
 8025a08:	802b2ec0 	call	802b2ec <__divsi3>
 8025a0c:	b80b883a 	mov	r5,r23
 8025a10:	1009883a 	mov	r4,r2
 8025a14:	80214e80 	call	80214e8 <__mulsi3>
 8025a18:	81400717 	ldw	r5,28(r16)
 8025a1c:	80c00917 	ldw	r3,36(r16)
 8025a20:	100f883a 	mov	r7,r2
 8025a24:	e00d883a 	mov	r6,fp
 8025a28:	a809883a 	mov	r4,r21
 8025a2c:	183ee83a 	callr	r3
 8025a30:	00bfd816 	blt	zero,r2,8025994 <__alt_data_end+0xfffe6594>
 8025a34:	8080030b 	ldhu	r2,12(r16)
 8025a38:	10801014 	ori	r2,r2,64
 8025a3c:	8080030d 	sth	r2,12(r16)
 8025a40:	00bfffc4 	movi	r2,-1
 8025a44:	003fa806 	br	80258e8 <__alt_data_end+0xfffe64e8>
 8025a48:	0027883a 	mov	r19,zero
 8025a4c:	0011883a 	mov	r8,zero
 8025a50:	0039883a 	mov	fp,zero
 8025a54:	0025883a 	mov	r18,zero
 8025a58:	90001f26 	beq	r18,zero,8025ad8 <__sfvwrite_r+0x2a8>
 8025a5c:	40005a26 	beq	r8,zero,8025bc8 <__sfvwrite_r+0x398>
 8025a60:	982d883a 	mov	r22,r19
 8025a64:	94c0012e 	bgeu	r18,r19,8025a6c <__sfvwrite_r+0x23c>
 8025a68:	902d883a 	mov	r22,r18
 8025a6c:	81000017 	ldw	r4,0(r16)
 8025a70:	80800417 	ldw	r2,16(r16)
 8025a74:	b02f883a 	mov	r23,r22
 8025a78:	81c00517 	ldw	r7,20(r16)
 8025a7c:	1100032e 	bgeu	r2,r4,8025a8c <__sfvwrite_r+0x25c>
 8025a80:	80c00217 	ldw	r3,8(r16)
 8025a84:	38c7883a 	add	r3,r7,r3
 8025a88:	1d801816 	blt	r3,r22,8025aec <__sfvwrite_r+0x2bc>
 8025a8c:	b1c03e16 	blt	r22,r7,8025b88 <__sfvwrite_r+0x358>
 8025a90:	80800917 	ldw	r2,36(r16)
 8025a94:	81400717 	ldw	r5,28(r16)
 8025a98:	e00d883a 	mov	r6,fp
 8025a9c:	da000115 	stw	r8,4(sp)
 8025aa0:	a809883a 	mov	r4,r21
 8025aa4:	103ee83a 	callr	r2
 8025aa8:	102f883a 	mov	r23,r2
 8025aac:	da000117 	ldw	r8,4(sp)
 8025ab0:	00bfe00e 	bge	zero,r2,8025a34 <__alt_data_end+0xfffe6634>
 8025ab4:	9de7c83a 	sub	r19,r19,r23
 8025ab8:	98001f26 	beq	r19,zero,8025b38 <__sfvwrite_r+0x308>
 8025abc:	a0800217 	ldw	r2,8(r20)
 8025ac0:	e5f9883a 	add	fp,fp,r23
 8025ac4:	95e5c83a 	sub	r18,r18,r23
 8025ac8:	15efc83a 	sub	r23,r2,r23
 8025acc:	a5c00215 	stw	r23,8(r20)
 8025ad0:	b83f8426 	beq	r23,zero,80258e4 <__alt_data_end+0xfffe64e4>
 8025ad4:	903fe11e 	bne	r18,zero,8025a5c <__alt_data_end+0xfffe665c>
 8025ad8:	8f000017 	ldw	fp,0(r17)
 8025adc:	8c800117 	ldw	r18,4(r17)
 8025ae0:	0011883a 	mov	r8,zero
 8025ae4:	8c400204 	addi	r17,r17,8
 8025ae8:	003fdb06 	br	8025a58 <__alt_data_end+0xfffe6658>
 8025aec:	180d883a 	mov	r6,r3
 8025af0:	e00b883a 	mov	r5,fp
 8025af4:	da000115 	stw	r8,4(sp)
 8025af8:	d8c00015 	stw	r3,0(sp)
 8025afc:	802684c0 	call	802684c <memmove>
 8025b00:	d8c00017 	ldw	r3,0(sp)
 8025b04:	80800017 	ldw	r2,0(r16)
 8025b08:	800b883a 	mov	r5,r16
 8025b0c:	a809883a 	mov	r4,r21
 8025b10:	10c5883a 	add	r2,r2,r3
 8025b14:	80800015 	stw	r2,0(r16)
 8025b18:	d8c00015 	stw	r3,0(sp)
 8025b1c:	8029f400 	call	8029f40 <_fflush_r>
 8025b20:	d8c00017 	ldw	r3,0(sp)
 8025b24:	da000117 	ldw	r8,4(sp)
 8025b28:	103fc21e 	bne	r2,zero,8025a34 <__alt_data_end+0xfffe6634>
 8025b2c:	182f883a 	mov	r23,r3
 8025b30:	9de7c83a 	sub	r19,r19,r23
 8025b34:	983fe11e 	bne	r19,zero,8025abc <__alt_data_end+0xfffe66bc>
 8025b38:	800b883a 	mov	r5,r16
 8025b3c:	a809883a 	mov	r4,r21
 8025b40:	8029f400 	call	8029f40 <_fflush_r>
 8025b44:	103fbb1e 	bne	r2,zero,8025a34 <__alt_data_end+0xfffe6634>
 8025b48:	0011883a 	mov	r8,zero
 8025b4c:	003fdb06 	br	8025abc <__alt_data_end+0xfffe66bc>
 8025b50:	94c0012e 	bgeu	r18,r19,8025b58 <__sfvwrite_r+0x328>
 8025b54:	9027883a 	mov	r19,r18
 8025b58:	980d883a 	mov	r6,r19
 8025b5c:	e00b883a 	mov	r5,fp
 8025b60:	802684c0 	call	802684c <memmove>
 8025b64:	80800217 	ldw	r2,8(r16)
 8025b68:	80c00017 	ldw	r3,0(r16)
 8025b6c:	14c5c83a 	sub	r2,r2,r19
 8025b70:	1cc7883a 	add	r3,r3,r19
 8025b74:	80800215 	stw	r2,8(r16)
 8025b78:	80c00015 	stw	r3,0(r16)
 8025b7c:	10004326 	beq	r2,zero,8025c8c <__sfvwrite_r+0x45c>
 8025b80:	9805883a 	mov	r2,r19
 8025b84:	003f8306 	br	8025994 <__alt_data_end+0xfffe6594>
 8025b88:	b00d883a 	mov	r6,r22
 8025b8c:	e00b883a 	mov	r5,fp
 8025b90:	da000115 	stw	r8,4(sp)
 8025b94:	802684c0 	call	802684c <memmove>
 8025b98:	80800217 	ldw	r2,8(r16)
 8025b9c:	80c00017 	ldw	r3,0(r16)
 8025ba0:	da000117 	ldw	r8,4(sp)
 8025ba4:	1585c83a 	sub	r2,r2,r22
 8025ba8:	1dad883a 	add	r22,r3,r22
 8025bac:	80800215 	stw	r2,8(r16)
 8025bb0:	85800015 	stw	r22,0(r16)
 8025bb4:	003fbf06 	br	8025ab4 <__alt_data_end+0xfffe66b4>
 8025bb8:	81000017 	ldw	r4,0(r16)
 8025bbc:	9027883a 	mov	r19,r18
 8025bc0:	902f883a 	mov	r23,r18
 8025bc4:	003f6906 	br	802596c <__alt_data_end+0xfffe656c>
 8025bc8:	900d883a 	mov	r6,r18
 8025bcc:	01400284 	movi	r5,10
 8025bd0:	e009883a 	mov	r4,fp
 8025bd4:	80267680 	call	8026768 <memchr>
 8025bd8:	10003e26 	beq	r2,zero,8025cd4 <__sfvwrite_r+0x4a4>
 8025bdc:	10800044 	addi	r2,r2,1
 8025be0:	1727c83a 	sub	r19,r2,fp
 8025be4:	02000044 	movi	r8,1
 8025be8:	003f9d06 	br	8025a60 <__alt_data_end+0xfffe6660>
 8025bec:	80800517 	ldw	r2,20(r16)
 8025bf0:	81400417 	ldw	r5,16(r16)
 8025bf4:	81c00017 	ldw	r7,0(r16)
 8025bf8:	10a7883a 	add	r19,r2,r2
 8025bfc:	9885883a 	add	r2,r19,r2
 8025c00:	1026d7fa 	srli	r19,r2,31
 8025c04:	396dc83a 	sub	r22,r7,r5
 8025c08:	b1000044 	addi	r4,r22,1
 8025c0c:	9885883a 	add	r2,r19,r2
 8025c10:	1027d07a 	srai	r19,r2,1
 8025c14:	2485883a 	add	r2,r4,r18
 8025c18:	980d883a 	mov	r6,r19
 8025c1c:	9880022e 	bgeu	r19,r2,8025c28 <__sfvwrite_r+0x3f8>
 8025c20:	1027883a 	mov	r19,r2
 8025c24:	100d883a 	mov	r6,r2
 8025c28:	18c1000c 	andi	r3,r3,1024
 8025c2c:	18001c26 	beq	r3,zero,8025ca0 <__sfvwrite_r+0x470>
 8025c30:	300b883a 	mov	r5,r6
 8025c34:	a809883a 	mov	r4,r21
 8025c38:	8025f5c0 	call	8025f5c <_malloc_r>
 8025c3c:	102f883a 	mov	r23,r2
 8025c40:	10002926 	beq	r2,zero,8025ce8 <__sfvwrite_r+0x4b8>
 8025c44:	81400417 	ldw	r5,16(r16)
 8025c48:	b00d883a 	mov	r6,r22
 8025c4c:	1009883a 	mov	r4,r2
 8025c50:	802159c0 	call	802159c <memcpy>
 8025c54:	8080030b 	ldhu	r2,12(r16)
 8025c58:	00fedfc4 	movi	r3,-1153
 8025c5c:	10c4703a 	and	r2,r2,r3
 8025c60:	10802014 	ori	r2,r2,128
 8025c64:	8080030d 	sth	r2,12(r16)
 8025c68:	bd89883a 	add	r4,r23,r22
 8025c6c:	9d8fc83a 	sub	r7,r19,r22
 8025c70:	85c00415 	stw	r23,16(r16)
 8025c74:	84c00515 	stw	r19,20(r16)
 8025c78:	81000015 	stw	r4,0(r16)
 8025c7c:	9027883a 	mov	r19,r18
 8025c80:	81c00215 	stw	r7,8(r16)
 8025c84:	902f883a 	mov	r23,r18
 8025c88:	003f3806 	br	802596c <__alt_data_end+0xfffe656c>
 8025c8c:	800b883a 	mov	r5,r16
 8025c90:	a809883a 	mov	r4,r21
 8025c94:	8029f400 	call	8029f40 <_fflush_r>
 8025c98:	103fb926 	beq	r2,zero,8025b80 <__alt_data_end+0xfffe6780>
 8025c9c:	003f6506 	br	8025a34 <__alt_data_end+0xfffe6634>
 8025ca0:	a809883a 	mov	r4,r21
 8025ca4:	8027b880 	call	8027b88 <_realloc_r>
 8025ca8:	102f883a 	mov	r23,r2
 8025cac:	103fee1e 	bne	r2,zero,8025c68 <__alt_data_end+0xfffe6868>
 8025cb0:	81400417 	ldw	r5,16(r16)
 8025cb4:	a809883a 	mov	r4,r21
 8025cb8:	802a0f00 	call	802a0f0 <_free_r>
 8025cbc:	8080030b 	ldhu	r2,12(r16)
 8025cc0:	00ffdfc4 	movi	r3,-129
 8025cc4:	1884703a 	and	r2,r3,r2
 8025cc8:	00c00304 	movi	r3,12
 8025ccc:	a8c00015 	stw	r3,0(r21)
 8025cd0:	003f5906 	br	8025a38 <__alt_data_end+0xfffe6638>
 8025cd4:	94c00044 	addi	r19,r18,1
 8025cd8:	02000044 	movi	r8,1
 8025cdc:	003f6006 	br	8025a60 <__alt_data_end+0xfffe6660>
 8025ce0:	00bfffc4 	movi	r2,-1
 8025ce4:	003f0006 	br	80258e8 <__alt_data_end+0xfffe64e8>
 8025ce8:	00800304 	movi	r2,12
 8025cec:	a8800015 	stw	r2,0(r21)
 8025cf0:	8080030b 	ldhu	r2,12(r16)
 8025cf4:	003f5006 	br	8025a38 <__alt_data_end+0xfffe6638>

08025cf8 <_fwalk>:
 8025cf8:	defff704 	addi	sp,sp,-36
 8025cfc:	dd000415 	stw	r20,16(sp)
 8025d00:	dfc00815 	stw	ra,32(sp)
 8025d04:	ddc00715 	stw	r23,28(sp)
 8025d08:	dd800615 	stw	r22,24(sp)
 8025d0c:	dd400515 	stw	r21,20(sp)
 8025d10:	dcc00315 	stw	r19,12(sp)
 8025d14:	dc800215 	stw	r18,8(sp)
 8025d18:	dc400115 	stw	r17,4(sp)
 8025d1c:	dc000015 	stw	r16,0(sp)
 8025d20:	2500b804 	addi	r20,r4,736
 8025d24:	a0002326 	beq	r20,zero,8025db4 <_fwalk+0xbc>
 8025d28:	282b883a 	mov	r21,r5
 8025d2c:	002f883a 	mov	r23,zero
 8025d30:	05800044 	movi	r22,1
 8025d34:	04ffffc4 	movi	r19,-1
 8025d38:	a4400117 	ldw	r17,4(r20)
 8025d3c:	a4800217 	ldw	r18,8(r20)
 8025d40:	8c7fffc4 	addi	r17,r17,-1
 8025d44:	88000d16 	blt	r17,zero,8025d7c <_fwalk+0x84>
 8025d48:	94000304 	addi	r16,r18,12
 8025d4c:	94800384 	addi	r18,r18,14
 8025d50:	8080000b 	ldhu	r2,0(r16)
 8025d54:	8c7fffc4 	addi	r17,r17,-1
 8025d58:	813ffd04 	addi	r4,r16,-12
 8025d5c:	b080042e 	bgeu	r22,r2,8025d70 <_fwalk+0x78>
 8025d60:	9080000f 	ldh	r2,0(r18)
 8025d64:	14c00226 	beq	r2,r19,8025d70 <_fwalk+0x78>
 8025d68:	a83ee83a 	callr	r21
 8025d6c:	b8aeb03a 	or	r23,r23,r2
 8025d70:	84001a04 	addi	r16,r16,104
 8025d74:	94801a04 	addi	r18,r18,104
 8025d78:	8cfff51e 	bne	r17,r19,8025d50 <__alt_data_end+0xfffe6950>
 8025d7c:	a5000017 	ldw	r20,0(r20)
 8025d80:	a03fed1e 	bne	r20,zero,8025d38 <__alt_data_end+0xfffe6938>
 8025d84:	b805883a 	mov	r2,r23
 8025d88:	dfc00817 	ldw	ra,32(sp)
 8025d8c:	ddc00717 	ldw	r23,28(sp)
 8025d90:	dd800617 	ldw	r22,24(sp)
 8025d94:	dd400517 	ldw	r21,20(sp)
 8025d98:	dd000417 	ldw	r20,16(sp)
 8025d9c:	dcc00317 	ldw	r19,12(sp)
 8025da0:	dc800217 	ldw	r18,8(sp)
 8025da4:	dc400117 	ldw	r17,4(sp)
 8025da8:	dc000017 	ldw	r16,0(sp)
 8025dac:	dec00904 	addi	sp,sp,36
 8025db0:	f800283a 	ret
 8025db4:	002f883a 	mov	r23,zero
 8025db8:	003ff206 	br	8025d84 <__alt_data_end+0xfffe6984>

08025dbc <_fwalk_reent>:
 8025dbc:	defff704 	addi	sp,sp,-36
 8025dc0:	dd000415 	stw	r20,16(sp)
 8025dc4:	dfc00815 	stw	ra,32(sp)
 8025dc8:	ddc00715 	stw	r23,28(sp)
 8025dcc:	dd800615 	stw	r22,24(sp)
 8025dd0:	dd400515 	stw	r21,20(sp)
 8025dd4:	dcc00315 	stw	r19,12(sp)
 8025dd8:	dc800215 	stw	r18,8(sp)
 8025ddc:	dc400115 	stw	r17,4(sp)
 8025de0:	dc000015 	stw	r16,0(sp)
 8025de4:	2500b804 	addi	r20,r4,736
 8025de8:	a0002326 	beq	r20,zero,8025e78 <_fwalk_reent+0xbc>
 8025dec:	282b883a 	mov	r21,r5
 8025df0:	2027883a 	mov	r19,r4
 8025df4:	002f883a 	mov	r23,zero
 8025df8:	05800044 	movi	r22,1
 8025dfc:	04bfffc4 	movi	r18,-1
 8025e00:	a4400117 	ldw	r17,4(r20)
 8025e04:	a4000217 	ldw	r16,8(r20)
 8025e08:	8c7fffc4 	addi	r17,r17,-1
 8025e0c:	88000c16 	blt	r17,zero,8025e40 <_fwalk_reent+0x84>
 8025e10:	84000304 	addi	r16,r16,12
 8025e14:	8080000b 	ldhu	r2,0(r16)
 8025e18:	8c7fffc4 	addi	r17,r17,-1
 8025e1c:	817ffd04 	addi	r5,r16,-12
 8025e20:	b080052e 	bgeu	r22,r2,8025e38 <_fwalk_reent+0x7c>
 8025e24:	8080008f 	ldh	r2,2(r16)
 8025e28:	9809883a 	mov	r4,r19
 8025e2c:	14800226 	beq	r2,r18,8025e38 <_fwalk_reent+0x7c>
 8025e30:	a83ee83a 	callr	r21
 8025e34:	b8aeb03a 	or	r23,r23,r2
 8025e38:	84001a04 	addi	r16,r16,104
 8025e3c:	8cbff51e 	bne	r17,r18,8025e14 <__alt_data_end+0xfffe6a14>
 8025e40:	a5000017 	ldw	r20,0(r20)
 8025e44:	a03fee1e 	bne	r20,zero,8025e00 <__alt_data_end+0xfffe6a00>
 8025e48:	b805883a 	mov	r2,r23
 8025e4c:	dfc00817 	ldw	ra,32(sp)
 8025e50:	ddc00717 	ldw	r23,28(sp)
 8025e54:	dd800617 	ldw	r22,24(sp)
 8025e58:	dd400517 	ldw	r21,20(sp)
 8025e5c:	dd000417 	ldw	r20,16(sp)
 8025e60:	dcc00317 	ldw	r19,12(sp)
 8025e64:	dc800217 	ldw	r18,8(sp)
 8025e68:	dc400117 	ldw	r17,4(sp)
 8025e6c:	dc000017 	ldw	r16,0(sp)
 8025e70:	dec00904 	addi	sp,sp,36
 8025e74:	f800283a 	ret
 8025e78:	002f883a 	mov	r23,zero
 8025e7c:	003ff206 	br	8025e48 <__alt_data_end+0xfffe6a48>

08025e80 <_setlocale_r>:
 8025e80:	30001b26 	beq	r6,zero,8025ef0 <_setlocale_r+0x70>
 8025e84:	014200f4 	movhi	r5,2051
 8025e88:	defffe04 	addi	sp,sp,-8
 8025e8c:	29475c04 	addi	r5,r5,7536
 8025e90:	3009883a 	mov	r4,r6
 8025e94:	dc000015 	stw	r16,0(sp)
 8025e98:	dfc00115 	stw	ra,4(sp)
 8025e9c:	3021883a 	mov	r16,r6
 8025ea0:	80282f00 	call	80282f0 <strcmp>
 8025ea4:	1000061e 	bne	r2,zero,8025ec0 <_setlocale_r+0x40>
 8025ea8:	008200f4 	movhi	r2,2051
 8025eac:	10875b04 	addi	r2,r2,7532
 8025eb0:	dfc00117 	ldw	ra,4(sp)
 8025eb4:	dc000017 	ldw	r16,0(sp)
 8025eb8:	dec00204 	addi	sp,sp,8
 8025ebc:	f800283a 	ret
 8025ec0:	014200f4 	movhi	r5,2051
 8025ec4:	29475b04 	addi	r5,r5,7532
 8025ec8:	8009883a 	mov	r4,r16
 8025ecc:	80282f00 	call	80282f0 <strcmp>
 8025ed0:	103ff526 	beq	r2,zero,8025ea8 <__alt_data_end+0xfffe6aa8>
 8025ed4:	014200f4 	movhi	r5,2051
 8025ed8:	29474604 	addi	r5,r5,7448
 8025edc:	8009883a 	mov	r4,r16
 8025ee0:	80282f00 	call	80282f0 <strcmp>
 8025ee4:	103ff026 	beq	r2,zero,8025ea8 <__alt_data_end+0xfffe6aa8>
 8025ee8:	0005883a 	mov	r2,zero
 8025eec:	003ff006 	br	8025eb0 <__alt_data_end+0xfffe6ab0>
 8025ef0:	008200f4 	movhi	r2,2051
 8025ef4:	10875b04 	addi	r2,r2,7532
 8025ef8:	f800283a 	ret

08025efc <__locale_charset>:
 8025efc:	008200f4 	movhi	r2,2051
 8025f00:	10892d04 	addi	r2,r2,9396
 8025f04:	f800283a 	ret

08025f08 <__locale_mb_cur_max>:
 8025f08:	008200f4 	movhi	r2,2051
 8025f0c:	108ef004 	addi	r2,r2,15296
 8025f10:	10800017 	ldw	r2,0(r2)
 8025f14:	f800283a 	ret

08025f18 <__locale_msgcharset>:
 8025f18:	008200f4 	movhi	r2,2051
 8025f1c:	10892504 	addi	r2,r2,9364
 8025f20:	f800283a 	ret

08025f24 <__locale_cjk_lang>:
 8025f24:	0005883a 	mov	r2,zero
 8025f28:	f800283a 	ret

08025f2c <_localeconv_r>:
 8025f2c:	008200f4 	movhi	r2,2051
 8025f30:	10893504 	addi	r2,r2,9428
 8025f34:	f800283a 	ret

08025f38 <setlocale>:
 8025f38:	008200f4 	movhi	r2,2051
 8025f3c:	108eef04 	addi	r2,r2,15292
 8025f40:	280d883a 	mov	r6,r5
 8025f44:	200b883a 	mov	r5,r4
 8025f48:	11000017 	ldw	r4,0(r2)
 8025f4c:	8025e801 	jmpi	8025e80 <_setlocale_r>

08025f50 <localeconv>:
 8025f50:	008200f4 	movhi	r2,2051
 8025f54:	10893504 	addi	r2,r2,9428
 8025f58:	f800283a 	ret

08025f5c <_malloc_r>:
 8025f5c:	defff504 	addi	sp,sp,-44
 8025f60:	dc800315 	stw	r18,12(sp)
 8025f64:	dfc00a15 	stw	ra,40(sp)
 8025f68:	df000915 	stw	fp,36(sp)
 8025f6c:	ddc00815 	stw	r23,32(sp)
 8025f70:	dd800715 	stw	r22,28(sp)
 8025f74:	dd400615 	stw	r21,24(sp)
 8025f78:	dd000515 	stw	r20,20(sp)
 8025f7c:	dcc00415 	stw	r19,16(sp)
 8025f80:	dc400215 	stw	r17,8(sp)
 8025f84:	dc000115 	stw	r16,4(sp)
 8025f88:	288002c4 	addi	r2,r5,11
 8025f8c:	00c00584 	movi	r3,22
 8025f90:	2025883a 	mov	r18,r4
 8025f94:	18807f2e 	bgeu	r3,r2,8026194 <_malloc_r+0x238>
 8025f98:	047ffe04 	movi	r17,-8
 8025f9c:	1462703a 	and	r17,r2,r17
 8025fa0:	8800a316 	blt	r17,zero,8026230 <_malloc_r+0x2d4>
 8025fa4:	8940a236 	bltu	r17,r5,8026230 <_malloc_r+0x2d4>
 8025fa8:	802e40c0 	call	802e40c <__malloc_lock>
 8025fac:	00807dc4 	movi	r2,503
 8025fb0:	1441e92e 	bgeu	r2,r17,8026758 <_malloc_r+0x7fc>
 8025fb4:	8804d27a 	srli	r2,r17,9
 8025fb8:	1000a126 	beq	r2,zero,8026240 <_malloc_r+0x2e4>
 8025fbc:	00c00104 	movi	r3,4
 8025fc0:	18811e36 	bltu	r3,r2,802643c <_malloc_r+0x4e0>
 8025fc4:	8804d1ba 	srli	r2,r17,6
 8025fc8:	12000e44 	addi	r8,r2,57
 8025fcc:	11c00e04 	addi	r7,r2,56
 8025fd0:	4209883a 	add	r4,r8,r8
 8025fd4:	04c200f4 	movhi	r19,2051
 8025fd8:	2109883a 	add	r4,r4,r4
 8025fdc:	9cc94304 	addi	r19,r19,9484
 8025fe0:	2109883a 	add	r4,r4,r4
 8025fe4:	9909883a 	add	r4,r19,r4
 8025fe8:	24000117 	ldw	r16,4(r4)
 8025fec:	213ffe04 	addi	r4,r4,-8
 8025ff0:	24009726 	beq	r4,r16,8026250 <_malloc_r+0x2f4>
 8025ff4:	80800117 	ldw	r2,4(r16)
 8025ff8:	01bfff04 	movi	r6,-4
 8025ffc:	014003c4 	movi	r5,15
 8026000:	1184703a 	and	r2,r2,r6
 8026004:	1447c83a 	sub	r3,r2,r17
 8026008:	28c00716 	blt	r5,r3,8026028 <_malloc_r+0xcc>
 802600c:	1800920e 	bge	r3,zero,8026258 <_malloc_r+0x2fc>
 8026010:	84000317 	ldw	r16,12(r16)
 8026014:	24008e26 	beq	r4,r16,8026250 <_malloc_r+0x2f4>
 8026018:	80800117 	ldw	r2,4(r16)
 802601c:	1184703a 	and	r2,r2,r6
 8026020:	1447c83a 	sub	r3,r2,r17
 8026024:	28fff90e 	bge	r5,r3,802600c <__alt_data_end+0xfffe6c0c>
 8026028:	3809883a 	mov	r4,r7
 802602c:	018200f4 	movhi	r6,2051
 8026030:	9c000417 	ldw	r16,16(r19)
 8026034:	31894304 	addi	r6,r6,9484
 8026038:	32000204 	addi	r8,r6,8
 802603c:	82013426 	beq	r16,r8,8026510 <_malloc_r+0x5b4>
 8026040:	80c00117 	ldw	r3,4(r16)
 8026044:	00bfff04 	movi	r2,-4
 8026048:	188e703a 	and	r7,r3,r2
 802604c:	3c45c83a 	sub	r2,r7,r17
 8026050:	00c003c4 	movi	r3,15
 8026054:	18811f16 	blt	r3,r2,80264d4 <_malloc_r+0x578>
 8026058:	32000515 	stw	r8,20(r6)
 802605c:	32000415 	stw	r8,16(r6)
 8026060:	10007f0e 	bge	r2,zero,8026260 <_malloc_r+0x304>
 8026064:	00807fc4 	movi	r2,511
 8026068:	11c0fd36 	bltu	r2,r7,8026460 <_malloc_r+0x504>
 802606c:	3806d0fa 	srli	r3,r7,3
 8026070:	01c00044 	movi	r7,1
 8026074:	30800117 	ldw	r2,4(r6)
 8026078:	19400044 	addi	r5,r3,1
 802607c:	294b883a 	add	r5,r5,r5
 8026080:	1807d0ba 	srai	r3,r3,2
 8026084:	294b883a 	add	r5,r5,r5
 8026088:	294b883a 	add	r5,r5,r5
 802608c:	298b883a 	add	r5,r5,r6
 8026090:	38c6983a 	sll	r3,r7,r3
 8026094:	29c00017 	ldw	r7,0(r5)
 8026098:	2a7ffe04 	addi	r9,r5,-8
 802609c:	1886b03a 	or	r3,r3,r2
 80260a0:	82400315 	stw	r9,12(r16)
 80260a4:	81c00215 	stw	r7,8(r16)
 80260a8:	30c00115 	stw	r3,4(r6)
 80260ac:	2c000015 	stw	r16,0(r5)
 80260b0:	3c000315 	stw	r16,12(r7)
 80260b4:	2005d0ba 	srai	r2,r4,2
 80260b8:	01400044 	movi	r5,1
 80260bc:	288a983a 	sll	r5,r5,r2
 80260c0:	19406f36 	bltu	r3,r5,8026280 <_malloc_r+0x324>
 80260c4:	28c4703a 	and	r2,r5,r3
 80260c8:	10000a1e 	bne	r2,zero,80260f4 <_malloc_r+0x198>
 80260cc:	00bfff04 	movi	r2,-4
 80260d0:	294b883a 	add	r5,r5,r5
 80260d4:	2088703a 	and	r4,r4,r2
 80260d8:	28c4703a 	and	r2,r5,r3
 80260dc:	21000104 	addi	r4,r4,4
 80260e0:	1000041e 	bne	r2,zero,80260f4 <_malloc_r+0x198>
 80260e4:	294b883a 	add	r5,r5,r5
 80260e8:	28c4703a 	and	r2,r5,r3
 80260ec:	21000104 	addi	r4,r4,4
 80260f0:	103ffc26 	beq	r2,zero,80260e4 <__alt_data_end+0xfffe6ce4>
 80260f4:	02bfff04 	movi	r10,-4
 80260f8:	024003c4 	movi	r9,15
 80260fc:	21800044 	addi	r6,r4,1
 8026100:	318d883a 	add	r6,r6,r6
 8026104:	318d883a 	add	r6,r6,r6
 8026108:	318d883a 	add	r6,r6,r6
 802610c:	998d883a 	add	r6,r19,r6
 8026110:	333ffe04 	addi	r12,r6,-8
 8026114:	2017883a 	mov	r11,r4
 8026118:	31800104 	addi	r6,r6,4
 802611c:	34000017 	ldw	r16,0(r6)
 8026120:	31fffd04 	addi	r7,r6,-12
 8026124:	81c0041e 	bne	r16,r7,8026138 <_malloc_r+0x1dc>
 8026128:	0000fb06 	br	8026518 <_malloc_r+0x5bc>
 802612c:	1801030e 	bge	r3,zero,802653c <_malloc_r+0x5e0>
 8026130:	84000317 	ldw	r16,12(r16)
 8026134:	81c0f826 	beq	r16,r7,8026518 <_malloc_r+0x5bc>
 8026138:	80800117 	ldw	r2,4(r16)
 802613c:	1284703a 	and	r2,r2,r10
 8026140:	1447c83a 	sub	r3,r2,r17
 8026144:	48fff90e 	bge	r9,r3,802612c <__alt_data_end+0xfffe6d2c>
 8026148:	80800317 	ldw	r2,12(r16)
 802614c:	81000217 	ldw	r4,8(r16)
 8026150:	89400054 	ori	r5,r17,1
 8026154:	81400115 	stw	r5,4(r16)
 8026158:	20800315 	stw	r2,12(r4)
 802615c:	11000215 	stw	r4,8(r2)
 8026160:	8463883a 	add	r17,r16,r17
 8026164:	9c400515 	stw	r17,20(r19)
 8026168:	9c400415 	stw	r17,16(r19)
 802616c:	18800054 	ori	r2,r3,1
 8026170:	88800115 	stw	r2,4(r17)
 8026174:	8a000315 	stw	r8,12(r17)
 8026178:	8a000215 	stw	r8,8(r17)
 802617c:	88e3883a 	add	r17,r17,r3
 8026180:	88c00015 	stw	r3,0(r17)
 8026184:	9009883a 	mov	r4,r18
 8026188:	802e4300 	call	802e430 <__malloc_unlock>
 802618c:	80800204 	addi	r2,r16,8
 8026190:	00001b06 	br	8026200 <_malloc_r+0x2a4>
 8026194:	04400404 	movi	r17,16
 8026198:	89402536 	bltu	r17,r5,8026230 <_malloc_r+0x2d4>
 802619c:	802e40c0 	call	802e40c <__malloc_lock>
 80261a0:	00800184 	movi	r2,6
 80261a4:	01000084 	movi	r4,2
 80261a8:	04c200f4 	movhi	r19,2051
 80261ac:	1085883a 	add	r2,r2,r2
 80261b0:	9cc94304 	addi	r19,r19,9484
 80261b4:	1085883a 	add	r2,r2,r2
 80261b8:	9885883a 	add	r2,r19,r2
 80261bc:	14000117 	ldw	r16,4(r2)
 80261c0:	10fffe04 	addi	r3,r2,-8
 80261c4:	80c0d926 	beq	r16,r3,802652c <_malloc_r+0x5d0>
 80261c8:	80c00117 	ldw	r3,4(r16)
 80261cc:	81000317 	ldw	r4,12(r16)
 80261d0:	00bfff04 	movi	r2,-4
 80261d4:	1884703a 	and	r2,r3,r2
 80261d8:	81400217 	ldw	r5,8(r16)
 80261dc:	8085883a 	add	r2,r16,r2
 80261e0:	10c00117 	ldw	r3,4(r2)
 80261e4:	29000315 	stw	r4,12(r5)
 80261e8:	21400215 	stw	r5,8(r4)
 80261ec:	18c00054 	ori	r3,r3,1
 80261f0:	10c00115 	stw	r3,4(r2)
 80261f4:	9009883a 	mov	r4,r18
 80261f8:	802e4300 	call	802e430 <__malloc_unlock>
 80261fc:	80800204 	addi	r2,r16,8
 8026200:	dfc00a17 	ldw	ra,40(sp)
 8026204:	df000917 	ldw	fp,36(sp)
 8026208:	ddc00817 	ldw	r23,32(sp)
 802620c:	dd800717 	ldw	r22,28(sp)
 8026210:	dd400617 	ldw	r21,24(sp)
 8026214:	dd000517 	ldw	r20,20(sp)
 8026218:	dcc00417 	ldw	r19,16(sp)
 802621c:	dc800317 	ldw	r18,12(sp)
 8026220:	dc400217 	ldw	r17,8(sp)
 8026224:	dc000117 	ldw	r16,4(sp)
 8026228:	dec00b04 	addi	sp,sp,44
 802622c:	f800283a 	ret
 8026230:	00800304 	movi	r2,12
 8026234:	90800015 	stw	r2,0(r18)
 8026238:	0005883a 	mov	r2,zero
 802623c:	003ff006 	br	8026200 <__alt_data_end+0xfffe6e00>
 8026240:	01002004 	movi	r4,128
 8026244:	02001004 	movi	r8,64
 8026248:	01c00fc4 	movi	r7,63
 802624c:	003f6106 	br	8025fd4 <__alt_data_end+0xfffe6bd4>
 8026250:	4009883a 	mov	r4,r8
 8026254:	003f7506 	br	802602c <__alt_data_end+0xfffe6c2c>
 8026258:	81000317 	ldw	r4,12(r16)
 802625c:	003fde06 	br	80261d8 <__alt_data_end+0xfffe6dd8>
 8026260:	81c5883a 	add	r2,r16,r7
 8026264:	11400117 	ldw	r5,4(r2)
 8026268:	9009883a 	mov	r4,r18
 802626c:	29400054 	ori	r5,r5,1
 8026270:	11400115 	stw	r5,4(r2)
 8026274:	802e4300 	call	802e430 <__malloc_unlock>
 8026278:	80800204 	addi	r2,r16,8
 802627c:	003fe006 	br	8026200 <__alt_data_end+0xfffe6e00>
 8026280:	9c000217 	ldw	r16,8(r19)
 8026284:	00bfff04 	movi	r2,-4
 8026288:	85800117 	ldw	r22,4(r16)
 802628c:	b0ac703a 	and	r22,r22,r2
 8026290:	b4400336 	bltu	r22,r17,80262a0 <_malloc_r+0x344>
 8026294:	b445c83a 	sub	r2,r22,r17
 8026298:	00c003c4 	movi	r3,15
 802629c:	18805d16 	blt	r3,r2,8026414 <_malloc_r+0x4b8>
 80262a0:	05c200f4 	movhi	r23,2051
 80262a4:	008200f4 	movhi	r2,2051
 80262a8:	1095e304 	addi	r2,r2,22412
 80262ac:	bdcef104 	addi	r23,r23,15300
 80262b0:	15400017 	ldw	r21,0(r2)
 80262b4:	b8c00017 	ldw	r3,0(r23)
 80262b8:	00bfffc4 	movi	r2,-1
 80262bc:	858d883a 	add	r6,r16,r22
 80262c0:	8d6b883a 	add	r21,r17,r21
 80262c4:	1880ea26 	beq	r3,r2,8026670 <_malloc_r+0x714>
 80262c8:	ad4403c4 	addi	r21,r21,4111
 80262cc:	00bc0004 	movi	r2,-4096
 80262d0:	a8aa703a 	and	r21,r21,r2
 80262d4:	a80b883a 	mov	r5,r21
 80262d8:	9009883a 	mov	r4,r18
 80262dc:	d9800015 	stw	r6,0(sp)
 80262e0:	80281600 	call	8028160 <_sbrk_r>
 80262e4:	1029883a 	mov	r20,r2
 80262e8:	00bfffc4 	movi	r2,-1
 80262ec:	d9800017 	ldw	r6,0(sp)
 80262f0:	a080e826 	beq	r20,r2,8026694 <_malloc_r+0x738>
 80262f4:	a180a636 	bltu	r20,r6,8026590 <_malloc_r+0x634>
 80262f8:	070200f4 	movhi	fp,2051
 80262fc:	e715f204 	addi	fp,fp,22472
 8026300:	e0800017 	ldw	r2,0(fp)
 8026304:	a887883a 	add	r3,r21,r2
 8026308:	e0c00015 	stw	r3,0(fp)
 802630c:	3500e626 	beq	r6,r20,80266a8 <_malloc_r+0x74c>
 8026310:	b9000017 	ldw	r4,0(r23)
 8026314:	00bfffc4 	movi	r2,-1
 8026318:	2080ee26 	beq	r4,r2,80266d4 <_malloc_r+0x778>
 802631c:	a185c83a 	sub	r2,r20,r6
 8026320:	10c5883a 	add	r2,r2,r3
 8026324:	e0800015 	stw	r2,0(fp)
 8026328:	a0c001cc 	andi	r3,r20,7
 802632c:	1800bc26 	beq	r3,zero,8026620 <_malloc_r+0x6c4>
 8026330:	a0e9c83a 	sub	r20,r20,r3
 8026334:	00840204 	movi	r2,4104
 8026338:	a5000204 	addi	r20,r20,8
 802633c:	10c7c83a 	sub	r3,r2,r3
 8026340:	a545883a 	add	r2,r20,r21
 8026344:	1083ffcc 	andi	r2,r2,4095
 8026348:	18abc83a 	sub	r21,r3,r2
 802634c:	a80b883a 	mov	r5,r21
 8026350:	9009883a 	mov	r4,r18
 8026354:	80281600 	call	8028160 <_sbrk_r>
 8026358:	00ffffc4 	movi	r3,-1
 802635c:	10c0e126 	beq	r2,r3,80266e4 <_malloc_r+0x788>
 8026360:	1505c83a 	sub	r2,r2,r20
 8026364:	1545883a 	add	r2,r2,r21
 8026368:	10800054 	ori	r2,r2,1
 802636c:	e0c00017 	ldw	r3,0(fp)
 8026370:	9d000215 	stw	r20,8(r19)
 8026374:	a0800115 	stw	r2,4(r20)
 8026378:	a8c7883a 	add	r3,r21,r3
 802637c:	e0c00015 	stw	r3,0(fp)
 8026380:	84c00e26 	beq	r16,r19,80263bc <_malloc_r+0x460>
 8026384:	018003c4 	movi	r6,15
 8026388:	3580a72e 	bgeu	r6,r22,8026628 <_malloc_r+0x6cc>
 802638c:	81400117 	ldw	r5,4(r16)
 8026390:	013ffe04 	movi	r4,-8
 8026394:	b0bffd04 	addi	r2,r22,-12
 8026398:	1104703a 	and	r2,r2,r4
 802639c:	2900004c 	andi	r4,r5,1
 80263a0:	2088b03a 	or	r4,r4,r2
 80263a4:	81000115 	stw	r4,4(r16)
 80263a8:	01400144 	movi	r5,5
 80263ac:	8089883a 	add	r4,r16,r2
 80263b0:	21400115 	stw	r5,4(r4)
 80263b4:	21400215 	stw	r5,8(r4)
 80263b8:	3080cd36 	bltu	r6,r2,80266f0 <_malloc_r+0x794>
 80263bc:	008200f4 	movhi	r2,2051
 80263c0:	1095e204 	addi	r2,r2,22408
 80263c4:	11000017 	ldw	r4,0(r2)
 80263c8:	20c0012e 	bgeu	r4,r3,80263d0 <_malloc_r+0x474>
 80263cc:	10c00015 	stw	r3,0(r2)
 80263d0:	008200f4 	movhi	r2,2051
 80263d4:	1095e104 	addi	r2,r2,22404
 80263d8:	11000017 	ldw	r4,0(r2)
 80263dc:	9c000217 	ldw	r16,8(r19)
 80263e0:	20c0012e 	bgeu	r4,r3,80263e8 <_malloc_r+0x48c>
 80263e4:	10c00015 	stw	r3,0(r2)
 80263e8:	80c00117 	ldw	r3,4(r16)
 80263ec:	00bfff04 	movi	r2,-4
 80263f0:	1886703a 	and	r3,r3,r2
 80263f4:	1c45c83a 	sub	r2,r3,r17
 80263f8:	1c400236 	bltu	r3,r17,8026404 <_malloc_r+0x4a8>
 80263fc:	00c003c4 	movi	r3,15
 8026400:	18800416 	blt	r3,r2,8026414 <_malloc_r+0x4b8>
 8026404:	9009883a 	mov	r4,r18
 8026408:	802e4300 	call	802e430 <__malloc_unlock>
 802640c:	0005883a 	mov	r2,zero
 8026410:	003f7b06 	br	8026200 <__alt_data_end+0xfffe6e00>
 8026414:	88c00054 	ori	r3,r17,1
 8026418:	80c00115 	stw	r3,4(r16)
 802641c:	8463883a 	add	r17,r16,r17
 8026420:	10800054 	ori	r2,r2,1
 8026424:	9c400215 	stw	r17,8(r19)
 8026428:	88800115 	stw	r2,4(r17)
 802642c:	9009883a 	mov	r4,r18
 8026430:	802e4300 	call	802e430 <__malloc_unlock>
 8026434:	80800204 	addi	r2,r16,8
 8026438:	003f7106 	br	8026200 <__alt_data_end+0xfffe6e00>
 802643c:	00c00504 	movi	r3,20
 8026440:	18804a2e 	bgeu	r3,r2,802656c <_malloc_r+0x610>
 8026444:	00c01504 	movi	r3,84
 8026448:	18806e36 	bltu	r3,r2,8026604 <_malloc_r+0x6a8>
 802644c:	8804d33a 	srli	r2,r17,12
 8026450:	12001bc4 	addi	r8,r2,111
 8026454:	11c01b84 	addi	r7,r2,110
 8026458:	4209883a 	add	r4,r8,r8
 802645c:	003edd06 	br	8025fd4 <__alt_data_end+0xfffe6bd4>
 8026460:	3804d27a 	srli	r2,r7,9
 8026464:	00c00104 	movi	r3,4
 8026468:	1880442e 	bgeu	r3,r2,802657c <_malloc_r+0x620>
 802646c:	00c00504 	movi	r3,20
 8026470:	18808136 	bltu	r3,r2,8026678 <_malloc_r+0x71c>
 8026474:	11401704 	addi	r5,r2,92
 8026478:	10c016c4 	addi	r3,r2,91
 802647c:	294b883a 	add	r5,r5,r5
 8026480:	294b883a 	add	r5,r5,r5
 8026484:	294b883a 	add	r5,r5,r5
 8026488:	994b883a 	add	r5,r19,r5
 802648c:	28800017 	ldw	r2,0(r5)
 8026490:	018200f4 	movhi	r6,2051
 8026494:	297ffe04 	addi	r5,r5,-8
 8026498:	31894304 	addi	r6,r6,9484
 802649c:	28806526 	beq	r5,r2,8026634 <_malloc_r+0x6d8>
 80264a0:	01bfff04 	movi	r6,-4
 80264a4:	10c00117 	ldw	r3,4(r2)
 80264a8:	1986703a 	and	r3,r3,r6
 80264ac:	38c0022e 	bgeu	r7,r3,80264b8 <_malloc_r+0x55c>
 80264b0:	10800217 	ldw	r2,8(r2)
 80264b4:	28bffb1e 	bne	r5,r2,80264a4 <__alt_data_end+0xfffe70a4>
 80264b8:	11400317 	ldw	r5,12(r2)
 80264bc:	98c00117 	ldw	r3,4(r19)
 80264c0:	81400315 	stw	r5,12(r16)
 80264c4:	80800215 	stw	r2,8(r16)
 80264c8:	2c000215 	stw	r16,8(r5)
 80264cc:	14000315 	stw	r16,12(r2)
 80264d0:	003ef806 	br	80260b4 <__alt_data_end+0xfffe6cb4>
 80264d4:	88c00054 	ori	r3,r17,1
 80264d8:	80c00115 	stw	r3,4(r16)
 80264dc:	8463883a 	add	r17,r16,r17
 80264e0:	34400515 	stw	r17,20(r6)
 80264e4:	34400415 	stw	r17,16(r6)
 80264e8:	10c00054 	ori	r3,r2,1
 80264ec:	8a000315 	stw	r8,12(r17)
 80264f0:	8a000215 	stw	r8,8(r17)
 80264f4:	88c00115 	stw	r3,4(r17)
 80264f8:	88a3883a 	add	r17,r17,r2
 80264fc:	88800015 	stw	r2,0(r17)
 8026500:	9009883a 	mov	r4,r18
 8026504:	802e4300 	call	802e430 <__malloc_unlock>
 8026508:	80800204 	addi	r2,r16,8
 802650c:	003f3c06 	br	8026200 <__alt_data_end+0xfffe6e00>
 8026510:	30c00117 	ldw	r3,4(r6)
 8026514:	003ee706 	br	80260b4 <__alt_data_end+0xfffe6cb4>
 8026518:	5ac00044 	addi	r11,r11,1
 802651c:	588000cc 	andi	r2,r11,3
 8026520:	31800204 	addi	r6,r6,8
 8026524:	103efd1e 	bne	r2,zero,802611c <__alt_data_end+0xfffe6d1c>
 8026528:	00002406 	br	80265bc <_malloc_r+0x660>
 802652c:	14000317 	ldw	r16,12(r2)
 8026530:	143f251e 	bne	r2,r16,80261c8 <__alt_data_end+0xfffe6dc8>
 8026534:	21000084 	addi	r4,r4,2
 8026538:	003ebc06 	br	802602c <__alt_data_end+0xfffe6c2c>
 802653c:	8085883a 	add	r2,r16,r2
 8026540:	10c00117 	ldw	r3,4(r2)
 8026544:	81000317 	ldw	r4,12(r16)
 8026548:	81400217 	ldw	r5,8(r16)
 802654c:	18c00054 	ori	r3,r3,1
 8026550:	10c00115 	stw	r3,4(r2)
 8026554:	29000315 	stw	r4,12(r5)
 8026558:	21400215 	stw	r5,8(r4)
 802655c:	9009883a 	mov	r4,r18
 8026560:	802e4300 	call	802e430 <__malloc_unlock>
 8026564:	80800204 	addi	r2,r16,8
 8026568:	003f2506 	br	8026200 <__alt_data_end+0xfffe6e00>
 802656c:	12001704 	addi	r8,r2,92
 8026570:	11c016c4 	addi	r7,r2,91
 8026574:	4209883a 	add	r4,r8,r8
 8026578:	003e9606 	br	8025fd4 <__alt_data_end+0xfffe6bd4>
 802657c:	3804d1ba 	srli	r2,r7,6
 8026580:	11400e44 	addi	r5,r2,57
 8026584:	10c00e04 	addi	r3,r2,56
 8026588:	294b883a 	add	r5,r5,r5
 802658c:	003fbc06 	br	8026480 <__alt_data_end+0xfffe7080>
 8026590:	84ff5926 	beq	r16,r19,80262f8 <__alt_data_end+0xfffe6ef8>
 8026594:	008200f4 	movhi	r2,2051
 8026598:	10894304 	addi	r2,r2,9484
 802659c:	14000217 	ldw	r16,8(r2)
 80265a0:	00bfff04 	movi	r2,-4
 80265a4:	80c00117 	ldw	r3,4(r16)
 80265a8:	1886703a 	and	r3,r3,r2
 80265ac:	003f9106 	br	80263f4 <__alt_data_end+0xfffe6ff4>
 80265b0:	60800217 	ldw	r2,8(r12)
 80265b4:	213fffc4 	addi	r4,r4,-1
 80265b8:	1300651e 	bne	r2,r12,8026750 <_malloc_r+0x7f4>
 80265bc:	208000cc 	andi	r2,r4,3
 80265c0:	633ffe04 	addi	r12,r12,-8
 80265c4:	103ffa1e 	bne	r2,zero,80265b0 <__alt_data_end+0xfffe71b0>
 80265c8:	98800117 	ldw	r2,4(r19)
 80265cc:	0146303a 	nor	r3,zero,r5
 80265d0:	1884703a 	and	r2,r3,r2
 80265d4:	98800115 	stw	r2,4(r19)
 80265d8:	294b883a 	add	r5,r5,r5
 80265dc:	117f2836 	bltu	r2,r5,8026280 <__alt_data_end+0xfffe6e80>
 80265e0:	283f2726 	beq	r5,zero,8026280 <__alt_data_end+0xfffe6e80>
 80265e4:	2886703a 	and	r3,r5,r2
 80265e8:	5809883a 	mov	r4,r11
 80265ec:	183ec31e 	bne	r3,zero,80260fc <__alt_data_end+0xfffe6cfc>
 80265f0:	294b883a 	add	r5,r5,r5
 80265f4:	2886703a 	and	r3,r5,r2
 80265f8:	21000104 	addi	r4,r4,4
 80265fc:	183ffc26 	beq	r3,zero,80265f0 <__alt_data_end+0xfffe71f0>
 8026600:	003ebe06 	br	80260fc <__alt_data_end+0xfffe6cfc>
 8026604:	00c05504 	movi	r3,340
 8026608:	18801236 	bltu	r3,r2,8026654 <_malloc_r+0x6f8>
 802660c:	8804d3fa 	srli	r2,r17,15
 8026610:	12001e04 	addi	r8,r2,120
 8026614:	11c01dc4 	addi	r7,r2,119
 8026618:	4209883a 	add	r4,r8,r8
 802661c:	003e6d06 	br	8025fd4 <__alt_data_end+0xfffe6bd4>
 8026620:	00c40004 	movi	r3,4096
 8026624:	003f4606 	br	8026340 <__alt_data_end+0xfffe6f40>
 8026628:	00800044 	movi	r2,1
 802662c:	a0800115 	stw	r2,4(r20)
 8026630:	003f7406 	br	8026404 <__alt_data_end+0xfffe7004>
 8026634:	1805d0ba 	srai	r2,r3,2
 8026638:	01c00044 	movi	r7,1
 802663c:	30c00117 	ldw	r3,4(r6)
 8026640:	388e983a 	sll	r7,r7,r2
 8026644:	2805883a 	mov	r2,r5
 8026648:	38c6b03a 	or	r3,r7,r3
 802664c:	30c00115 	stw	r3,4(r6)
 8026650:	003f9b06 	br	80264c0 <__alt_data_end+0xfffe70c0>
 8026654:	00c15504 	movi	r3,1364
 8026658:	18801a36 	bltu	r3,r2,80266c4 <_malloc_r+0x768>
 802665c:	8804d4ba 	srli	r2,r17,18
 8026660:	12001f44 	addi	r8,r2,125
 8026664:	11c01f04 	addi	r7,r2,124
 8026668:	4209883a 	add	r4,r8,r8
 802666c:	003e5906 	br	8025fd4 <__alt_data_end+0xfffe6bd4>
 8026670:	ad400404 	addi	r21,r21,16
 8026674:	003f1706 	br	80262d4 <__alt_data_end+0xfffe6ed4>
 8026678:	00c01504 	movi	r3,84
 802667c:	18802336 	bltu	r3,r2,802670c <_malloc_r+0x7b0>
 8026680:	3804d33a 	srli	r2,r7,12
 8026684:	11401bc4 	addi	r5,r2,111
 8026688:	10c01b84 	addi	r3,r2,110
 802668c:	294b883a 	add	r5,r5,r5
 8026690:	003f7b06 	br	8026480 <__alt_data_end+0xfffe7080>
 8026694:	9c000217 	ldw	r16,8(r19)
 8026698:	00bfff04 	movi	r2,-4
 802669c:	80c00117 	ldw	r3,4(r16)
 80266a0:	1886703a 	and	r3,r3,r2
 80266a4:	003f5306 	br	80263f4 <__alt_data_end+0xfffe6ff4>
 80266a8:	3083ffcc 	andi	r2,r6,4095
 80266ac:	103f181e 	bne	r2,zero,8026310 <__alt_data_end+0xfffe6f10>
 80266b0:	99000217 	ldw	r4,8(r19)
 80266b4:	b545883a 	add	r2,r22,r21
 80266b8:	10800054 	ori	r2,r2,1
 80266bc:	20800115 	stw	r2,4(r4)
 80266c0:	003f3e06 	br	80263bc <__alt_data_end+0xfffe6fbc>
 80266c4:	01003f84 	movi	r4,254
 80266c8:	02001fc4 	movi	r8,127
 80266cc:	01c01f84 	movi	r7,126
 80266d0:	003e4006 	br	8025fd4 <__alt_data_end+0xfffe6bd4>
 80266d4:	008200f4 	movhi	r2,2051
 80266d8:	108ef104 	addi	r2,r2,15300
 80266dc:	15000015 	stw	r20,0(r2)
 80266e0:	003f1106 	br	8026328 <__alt_data_end+0xfffe6f28>
 80266e4:	00800044 	movi	r2,1
 80266e8:	002b883a 	mov	r21,zero
 80266ec:	003f1f06 	br	802636c <__alt_data_end+0xfffe6f6c>
 80266f0:	81400204 	addi	r5,r16,8
 80266f4:	9009883a 	mov	r4,r18
 80266f8:	802a0f00 	call	802a0f0 <_free_r>
 80266fc:	008200f4 	movhi	r2,2051
 8026700:	1095f204 	addi	r2,r2,22472
 8026704:	10c00017 	ldw	r3,0(r2)
 8026708:	003f2c06 	br	80263bc <__alt_data_end+0xfffe6fbc>
 802670c:	00c05504 	movi	r3,340
 8026710:	18800536 	bltu	r3,r2,8026728 <_malloc_r+0x7cc>
 8026714:	3804d3fa 	srli	r2,r7,15
 8026718:	11401e04 	addi	r5,r2,120
 802671c:	10c01dc4 	addi	r3,r2,119
 8026720:	294b883a 	add	r5,r5,r5
 8026724:	003f5606 	br	8026480 <__alt_data_end+0xfffe7080>
 8026728:	00c15504 	movi	r3,1364
 802672c:	18800536 	bltu	r3,r2,8026744 <_malloc_r+0x7e8>
 8026730:	3804d4ba 	srli	r2,r7,18
 8026734:	11401f44 	addi	r5,r2,125
 8026738:	10c01f04 	addi	r3,r2,124
 802673c:	294b883a 	add	r5,r5,r5
 8026740:	003f4f06 	br	8026480 <__alt_data_end+0xfffe7080>
 8026744:	01403f84 	movi	r5,254
 8026748:	00c01f84 	movi	r3,126
 802674c:	003f4c06 	br	8026480 <__alt_data_end+0xfffe7080>
 8026750:	98800117 	ldw	r2,4(r19)
 8026754:	003fa006 	br	80265d8 <__alt_data_end+0xfffe71d8>
 8026758:	8808d0fa 	srli	r4,r17,3
 802675c:	20800044 	addi	r2,r4,1
 8026760:	1085883a 	add	r2,r2,r2
 8026764:	003e9006 	br	80261a8 <__alt_data_end+0xfffe6da8>

08026768 <memchr>:
 8026768:	208000cc 	andi	r2,r4,3
 802676c:	280f883a 	mov	r7,r5
 8026770:	10003426 	beq	r2,zero,8026844 <memchr+0xdc>
 8026774:	30bfffc4 	addi	r2,r6,-1
 8026778:	30001a26 	beq	r6,zero,80267e4 <memchr+0x7c>
 802677c:	20c00003 	ldbu	r3,0(r4)
 8026780:	29803fcc 	andi	r6,r5,255
 8026784:	30c0051e 	bne	r6,r3,802679c <memchr+0x34>
 8026788:	00001806 	br	80267ec <memchr+0x84>
 802678c:	10001526 	beq	r2,zero,80267e4 <memchr+0x7c>
 8026790:	20c00003 	ldbu	r3,0(r4)
 8026794:	10bfffc4 	addi	r2,r2,-1
 8026798:	30c01426 	beq	r6,r3,80267ec <memchr+0x84>
 802679c:	21000044 	addi	r4,r4,1
 80267a0:	20c000cc 	andi	r3,r4,3
 80267a4:	183ff91e 	bne	r3,zero,802678c <__alt_data_end+0xfffe738c>
 80267a8:	020000c4 	movi	r8,3
 80267ac:	40801136 	bltu	r8,r2,80267f4 <memchr+0x8c>
 80267b0:	10000c26 	beq	r2,zero,80267e4 <memchr+0x7c>
 80267b4:	20c00003 	ldbu	r3,0(r4)
 80267b8:	29403fcc 	andi	r5,r5,255
 80267bc:	28c00b26 	beq	r5,r3,80267ec <memchr+0x84>
 80267c0:	20c00044 	addi	r3,r4,1
 80267c4:	39803fcc 	andi	r6,r7,255
 80267c8:	2089883a 	add	r4,r4,r2
 80267cc:	00000306 	br	80267dc <memchr+0x74>
 80267d0:	18c00044 	addi	r3,r3,1
 80267d4:	197fffc3 	ldbu	r5,-1(r3)
 80267d8:	31400526 	beq	r6,r5,80267f0 <memchr+0x88>
 80267dc:	1805883a 	mov	r2,r3
 80267e0:	20fffb1e 	bne	r4,r3,80267d0 <__alt_data_end+0xfffe73d0>
 80267e4:	0005883a 	mov	r2,zero
 80267e8:	f800283a 	ret
 80267ec:	2005883a 	mov	r2,r4
 80267f0:	f800283a 	ret
 80267f4:	28c03fcc 	andi	r3,r5,255
 80267f8:	1812923a 	slli	r9,r3,8
 80267fc:	02ffbff4 	movhi	r11,65279
 8026800:	02a02074 	movhi	r10,32897
 8026804:	48d2b03a 	or	r9,r9,r3
 8026808:	4806943a 	slli	r3,r9,16
 802680c:	5affbfc4 	addi	r11,r11,-257
 8026810:	52a02004 	addi	r10,r10,-32640
 8026814:	48d2b03a 	or	r9,r9,r3
 8026818:	20c00017 	ldw	r3,0(r4)
 802681c:	48c6f03a 	xor	r3,r9,r3
 8026820:	1acd883a 	add	r6,r3,r11
 8026824:	00c6303a 	nor	r3,zero,r3
 8026828:	30c6703a 	and	r3,r6,r3
 802682c:	1a86703a 	and	r3,r3,r10
 8026830:	183fe01e 	bne	r3,zero,80267b4 <__alt_data_end+0xfffe73b4>
 8026834:	10bfff04 	addi	r2,r2,-4
 8026838:	21000104 	addi	r4,r4,4
 802683c:	40bff636 	bltu	r8,r2,8026818 <__alt_data_end+0xfffe7418>
 8026840:	003fdb06 	br	80267b0 <__alt_data_end+0xfffe73b0>
 8026844:	3005883a 	mov	r2,r6
 8026848:	003fd706 	br	80267a8 <__alt_data_end+0xfffe73a8>

0802684c <memmove>:
 802684c:	2005883a 	mov	r2,r4
 8026850:	29000b2e 	bgeu	r5,r4,8026880 <memmove+0x34>
 8026854:	298f883a 	add	r7,r5,r6
 8026858:	21c0092e 	bgeu	r4,r7,8026880 <memmove+0x34>
 802685c:	2187883a 	add	r3,r4,r6
 8026860:	198bc83a 	sub	r5,r3,r6
 8026864:	30004826 	beq	r6,zero,8026988 <memmove+0x13c>
 8026868:	39ffffc4 	addi	r7,r7,-1
 802686c:	39000003 	ldbu	r4,0(r7)
 8026870:	18ffffc4 	addi	r3,r3,-1
 8026874:	19000005 	stb	r4,0(r3)
 8026878:	28fffb1e 	bne	r5,r3,8026868 <__alt_data_end+0xfffe7468>
 802687c:	f800283a 	ret
 8026880:	00c003c4 	movi	r3,15
 8026884:	1980412e 	bgeu	r3,r6,802698c <memmove+0x140>
 8026888:	2886b03a 	or	r3,r5,r2
 802688c:	18c000cc 	andi	r3,r3,3
 8026890:	1800401e 	bne	r3,zero,8026994 <memmove+0x148>
 8026894:	33fffc04 	addi	r15,r6,-16
 8026898:	781ed13a 	srli	r15,r15,4
 802689c:	28c00104 	addi	r3,r5,4
 80268a0:	13400104 	addi	r13,r2,4
 80268a4:	781c913a 	slli	r14,r15,4
 80268a8:	2b000204 	addi	r12,r5,8
 80268ac:	12c00204 	addi	r11,r2,8
 80268b0:	73800504 	addi	r14,r14,20
 80268b4:	2a800304 	addi	r10,r5,12
 80268b8:	12400304 	addi	r9,r2,12
 80268bc:	2b9d883a 	add	r14,r5,r14
 80268c0:	2811883a 	mov	r8,r5
 80268c4:	100f883a 	mov	r7,r2
 80268c8:	41000017 	ldw	r4,0(r8)
 80268cc:	39c00404 	addi	r7,r7,16
 80268d0:	18c00404 	addi	r3,r3,16
 80268d4:	393ffc15 	stw	r4,-16(r7)
 80268d8:	193ffc17 	ldw	r4,-16(r3)
 80268dc:	6b400404 	addi	r13,r13,16
 80268e0:	5ac00404 	addi	r11,r11,16
 80268e4:	693ffc15 	stw	r4,-16(r13)
 80268e8:	61000017 	ldw	r4,0(r12)
 80268ec:	4a400404 	addi	r9,r9,16
 80268f0:	42000404 	addi	r8,r8,16
 80268f4:	593ffc15 	stw	r4,-16(r11)
 80268f8:	51000017 	ldw	r4,0(r10)
 80268fc:	63000404 	addi	r12,r12,16
 8026900:	52800404 	addi	r10,r10,16
 8026904:	493ffc15 	stw	r4,-16(r9)
 8026908:	1bbfef1e 	bne	r3,r14,80268c8 <__alt_data_end+0xfffe74c8>
 802690c:	79000044 	addi	r4,r15,1
 8026910:	2008913a 	slli	r4,r4,4
 8026914:	328003cc 	andi	r10,r6,15
 8026918:	02c000c4 	movi	r11,3
 802691c:	1107883a 	add	r3,r2,r4
 8026920:	290b883a 	add	r5,r5,r4
 8026924:	5a801e2e 	bgeu	r11,r10,80269a0 <memmove+0x154>
 8026928:	1813883a 	mov	r9,r3
 802692c:	2811883a 	mov	r8,r5
 8026930:	500f883a 	mov	r7,r10
 8026934:	41000017 	ldw	r4,0(r8)
 8026938:	4a400104 	addi	r9,r9,4
 802693c:	39ffff04 	addi	r7,r7,-4
 8026940:	493fff15 	stw	r4,-4(r9)
 8026944:	42000104 	addi	r8,r8,4
 8026948:	59fffa36 	bltu	r11,r7,8026934 <__alt_data_end+0xfffe7534>
 802694c:	513fff04 	addi	r4,r10,-4
 8026950:	2008d0ba 	srli	r4,r4,2
 8026954:	318000cc 	andi	r6,r6,3
 8026958:	21000044 	addi	r4,r4,1
 802695c:	2109883a 	add	r4,r4,r4
 8026960:	2109883a 	add	r4,r4,r4
 8026964:	1907883a 	add	r3,r3,r4
 8026968:	290b883a 	add	r5,r5,r4
 802696c:	30000b26 	beq	r6,zero,802699c <memmove+0x150>
 8026970:	198d883a 	add	r6,r3,r6
 8026974:	29c00003 	ldbu	r7,0(r5)
 8026978:	18c00044 	addi	r3,r3,1
 802697c:	29400044 	addi	r5,r5,1
 8026980:	19ffffc5 	stb	r7,-1(r3)
 8026984:	19bffb1e 	bne	r3,r6,8026974 <__alt_data_end+0xfffe7574>
 8026988:	f800283a 	ret
 802698c:	1007883a 	mov	r3,r2
 8026990:	003ff606 	br	802696c <__alt_data_end+0xfffe756c>
 8026994:	1007883a 	mov	r3,r2
 8026998:	003ff506 	br	8026970 <__alt_data_end+0xfffe7570>
 802699c:	f800283a 	ret
 80269a0:	500d883a 	mov	r6,r10
 80269a4:	003ff106 	br	802696c <__alt_data_end+0xfffe756c>

080269a8 <memset>:
 80269a8:	20c000cc 	andi	r3,r4,3
 80269ac:	2005883a 	mov	r2,r4
 80269b0:	18004426 	beq	r3,zero,8026ac4 <memset+0x11c>
 80269b4:	31ffffc4 	addi	r7,r6,-1
 80269b8:	30004026 	beq	r6,zero,8026abc <memset+0x114>
 80269bc:	2813883a 	mov	r9,r5
 80269c0:	200d883a 	mov	r6,r4
 80269c4:	2007883a 	mov	r3,r4
 80269c8:	00000406 	br	80269dc <memset+0x34>
 80269cc:	3a3fffc4 	addi	r8,r7,-1
 80269d0:	31800044 	addi	r6,r6,1
 80269d4:	38003926 	beq	r7,zero,8026abc <memset+0x114>
 80269d8:	400f883a 	mov	r7,r8
 80269dc:	18c00044 	addi	r3,r3,1
 80269e0:	32400005 	stb	r9,0(r6)
 80269e4:	1a0000cc 	andi	r8,r3,3
 80269e8:	403ff81e 	bne	r8,zero,80269cc <__alt_data_end+0xfffe75cc>
 80269ec:	010000c4 	movi	r4,3
 80269f0:	21c02d2e 	bgeu	r4,r7,8026aa8 <memset+0x100>
 80269f4:	29003fcc 	andi	r4,r5,255
 80269f8:	200c923a 	slli	r6,r4,8
 80269fc:	3108b03a 	or	r4,r6,r4
 8026a00:	200c943a 	slli	r6,r4,16
 8026a04:	218cb03a 	or	r6,r4,r6
 8026a08:	010003c4 	movi	r4,15
 8026a0c:	21c0182e 	bgeu	r4,r7,8026a70 <memset+0xc8>
 8026a10:	3b3ffc04 	addi	r12,r7,-16
 8026a14:	6018d13a 	srli	r12,r12,4
 8026a18:	1a000104 	addi	r8,r3,4
 8026a1c:	1ac00204 	addi	r11,r3,8
 8026a20:	6008913a 	slli	r4,r12,4
 8026a24:	1a800304 	addi	r10,r3,12
 8026a28:	1813883a 	mov	r9,r3
 8026a2c:	21000504 	addi	r4,r4,20
 8026a30:	1909883a 	add	r4,r3,r4
 8026a34:	49800015 	stw	r6,0(r9)
 8026a38:	41800015 	stw	r6,0(r8)
 8026a3c:	59800015 	stw	r6,0(r11)
 8026a40:	51800015 	stw	r6,0(r10)
 8026a44:	42000404 	addi	r8,r8,16
 8026a48:	4a400404 	addi	r9,r9,16
 8026a4c:	5ac00404 	addi	r11,r11,16
 8026a50:	52800404 	addi	r10,r10,16
 8026a54:	413ff71e 	bne	r8,r4,8026a34 <__alt_data_end+0xfffe7634>
 8026a58:	63000044 	addi	r12,r12,1
 8026a5c:	6018913a 	slli	r12,r12,4
 8026a60:	39c003cc 	andi	r7,r7,15
 8026a64:	010000c4 	movi	r4,3
 8026a68:	1b07883a 	add	r3,r3,r12
 8026a6c:	21c00e2e 	bgeu	r4,r7,8026aa8 <memset+0x100>
 8026a70:	1813883a 	mov	r9,r3
 8026a74:	3811883a 	mov	r8,r7
 8026a78:	010000c4 	movi	r4,3
 8026a7c:	49800015 	stw	r6,0(r9)
 8026a80:	423fff04 	addi	r8,r8,-4
 8026a84:	4a400104 	addi	r9,r9,4
 8026a88:	223ffc36 	bltu	r4,r8,8026a7c <__alt_data_end+0xfffe767c>
 8026a8c:	393fff04 	addi	r4,r7,-4
 8026a90:	2008d0ba 	srli	r4,r4,2
 8026a94:	39c000cc 	andi	r7,r7,3
 8026a98:	21000044 	addi	r4,r4,1
 8026a9c:	2109883a 	add	r4,r4,r4
 8026aa0:	2109883a 	add	r4,r4,r4
 8026aa4:	1907883a 	add	r3,r3,r4
 8026aa8:	38000526 	beq	r7,zero,8026ac0 <memset+0x118>
 8026aac:	19cf883a 	add	r7,r3,r7
 8026ab0:	19400005 	stb	r5,0(r3)
 8026ab4:	18c00044 	addi	r3,r3,1
 8026ab8:	38fffd1e 	bne	r7,r3,8026ab0 <__alt_data_end+0xfffe76b0>
 8026abc:	f800283a 	ret
 8026ac0:	f800283a 	ret
 8026ac4:	2007883a 	mov	r3,r4
 8026ac8:	300f883a 	mov	r7,r6
 8026acc:	003fc706 	br	80269ec <__alt_data_end+0xfffe75ec>

08026ad0 <_Balloc>:
 8026ad0:	20801317 	ldw	r2,76(r4)
 8026ad4:	defffc04 	addi	sp,sp,-16
 8026ad8:	dc400115 	stw	r17,4(sp)
 8026adc:	dc000015 	stw	r16,0(sp)
 8026ae0:	dfc00315 	stw	ra,12(sp)
 8026ae4:	dc800215 	stw	r18,8(sp)
 8026ae8:	2023883a 	mov	r17,r4
 8026aec:	2821883a 	mov	r16,r5
 8026af0:	10000f26 	beq	r2,zero,8026b30 <_Balloc+0x60>
 8026af4:	8407883a 	add	r3,r16,r16
 8026af8:	18c7883a 	add	r3,r3,r3
 8026afc:	10c7883a 	add	r3,r2,r3
 8026b00:	18800017 	ldw	r2,0(r3)
 8026b04:	10001126 	beq	r2,zero,8026b4c <_Balloc+0x7c>
 8026b08:	11000017 	ldw	r4,0(r2)
 8026b0c:	19000015 	stw	r4,0(r3)
 8026b10:	10000415 	stw	zero,16(r2)
 8026b14:	10000315 	stw	zero,12(r2)
 8026b18:	dfc00317 	ldw	ra,12(sp)
 8026b1c:	dc800217 	ldw	r18,8(sp)
 8026b20:	dc400117 	ldw	r17,4(sp)
 8026b24:	dc000017 	ldw	r16,0(sp)
 8026b28:	dec00404 	addi	sp,sp,16
 8026b2c:	f800283a 	ret
 8026b30:	01800844 	movi	r6,33
 8026b34:	01400104 	movi	r5,4
 8026b38:	8029b440 	call	8029b44 <_calloc_r>
 8026b3c:	88801315 	stw	r2,76(r17)
 8026b40:	103fec1e 	bne	r2,zero,8026af4 <__alt_data_end+0xfffe76f4>
 8026b44:	0005883a 	mov	r2,zero
 8026b48:	003ff306 	br	8026b18 <__alt_data_end+0xfffe7718>
 8026b4c:	01400044 	movi	r5,1
 8026b50:	2c24983a 	sll	r18,r5,r16
 8026b54:	8809883a 	mov	r4,r17
 8026b58:	91800144 	addi	r6,r18,5
 8026b5c:	318d883a 	add	r6,r6,r6
 8026b60:	318d883a 	add	r6,r6,r6
 8026b64:	8029b440 	call	8029b44 <_calloc_r>
 8026b68:	103ff626 	beq	r2,zero,8026b44 <__alt_data_end+0xfffe7744>
 8026b6c:	14000115 	stw	r16,4(r2)
 8026b70:	14800215 	stw	r18,8(r2)
 8026b74:	003fe606 	br	8026b10 <__alt_data_end+0xfffe7710>

08026b78 <_Bfree>:
 8026b78:	28000826 	beq	r5,zero,8026b9c <_Bfree+0x24>
 8026b7c:	28c00117 	ldw	r3,4(r5)
 8026b80:	20801317 	ldw	r2,76(r4)
 8026b84:	18c7883a 	add	r3,r3,r3
 8026b88:	18c7883a 	add	r3,r3,r3
 8026b8c:	10c5883a 	add	r2,r2,r3
 8026b90:	10c00017 	ldw	r3,0(r2)
 8026b94:	28c00015 	stw	r3,0(r5)
 8026b98:	11400015 	stw	r5,0(r2)
 8026b9c:	f800283a 	ret

08026ba0 <__multadd>:
 8026ba0:	defff704 	addi	sp,sp,-36
 8026ba4:	dc800215 	stw	r18,8(sp)
 8026ba8:	2c800417 	ldw	r18,16(r5)
 8026bac:	dd800615 	stw	r22,24(sp)
 8026bb0:	dd400515 	stw	r21,20(sp)
 8026bb4:	dd000415 	stw	r20,16(sp)
 8026bb8:	dcc00315 	stw	r19,12(sp)
 8026bbc:	dc400115 	stw	r17,4(sp)
 8026bc0:	dc000015 	stw	r16,0(sp)
 8026bc4:	dfc00815 	stw	ra,32(sp)
 8026bc8:	ddc00715 	stw	r23,28(sp)
 8026bcc:	2827883a 	mov	r19,r5
 8026bd0:	2029883a 	mov	r20,r4
 8026bd4:	3023883a 	mov	r17,r6
 8026bd8:	3821883a 	mov	r16,r7
 8026bdc:	2d400504 	addi	r21,r5,20
 8026be0:	002d883a 	mov	r22,zero
 8026be4:	adc00017 	ldw	r23,0(r21)
 8026be8:	880b883a 	mov	r5,r17
 8026bec:	ad400104 	addi	r21,r21,4
 8026bf0:	b93fffcc 	andi	r4,r23,65535
 8026bf4:	80214e80 	call	80214e8 <__mulsi3>
 8026bf8:	b808d43a 	srli	r4,r23,16
 8026bfc:	880b883a 	mov	r5,r17
 8026c00:	1421883a 	add	r16,r2,r16
 8026c04:	80214e80 	call	80214e8 <__mulsi3>
 8026c08:	800ed43a 	srli	r7,r16,16
 8026c0c:	80ffffcc 	andi	r3,r16,65535
 8026c10:	b5800044 	addi	r22,r22,1
 8026c14:	11c5883a 	add	r2,r2,r7
 8026c18:	100e943a 	slli	r7,r2,16
 8026c1c:	1020d43a 	srli	r16,r2,16
 8026c20:	38c7883a 	add	r3,r7,r3
 8026c24:	a8ffff15 	stw	r3,-4(r21)
 8026c28:	b4bfee16 	blt	r22,r18,8026be4 <__alt_data_end+0xfffe77e4>
 8026c2c:	80000926 	beq	r16,zero,8026c54 <__multadd+0xb4>
 8026c30:	98800217 	ldw	r2,8(r19)
 8026c34:	9080130e 	bge	r18,r2,8026c84 <__multadd+0xe4>
 8026c38:	90800144 	addi	r2,r18,5
 8026c3c:	1085883a 	add	r2,r2,r2
 8026c40:	1085883a 	add	r2,r2,r2
 8026c44:	9885883a 	add	r2,r19,r2
 8026c48:	14000015 	stw	r16,0(r2)
 8026c4c:	94800044 	addi	r18,r18,1
 8026c50:	9c800415 	stw	r18,16(r19)
 8026c54:	9805883a 	mov	r2,r19
 8026c58:	dfc00817 	ldw	ra,32(sp)
 8026c5c:	ddc00717 	ldw	r23,28(sp)
 8026c60:	dd800617 	ldw	r22,24(sp)
 8026c64:	dd400517 	ldw	r21,20(sp)
 8026c68:	dd000417 	ldw	r20,16(sp)
 8026c6c:	dcc00317 	ldw	r19,12(sp)
 8026c70:	dc800217 	ldw	r18,8(sp)
 8026c74:	dc400117 	ldw	r17,4(sp)
 8026c78:	dc000017 	ldw	r16,0(sp)
 8026c7c:	dec00904 	addi	sp,sp,36
 8026c80:	f800283a 	ret
 8026c84:	99400117 	ldw	r5,4(r19)
 8026c88:	a009883a 	mov	r4,r20
 8026c8c:	29400044 	addi	r5,r5,1
 8026c90:	8026ad00 	call	8026ad0 <_Balloc>
 8026c94:	99800417 	ldw	r6,16(r19)
 8026c98:	99400304 	addi	r5,r19,12
 8026c9c:	11000304 	addi	r4,r2,12
 8026ca0:	31800084 	addi	r6,r6,2
 8026ca4:	318d883a 	add	r6,r6,r6
 8026ca8:	318d883a 	add	r6,r6,r6
 8026cac:	1023883a 	mov	r17,r2
 8026cb0:	802159c0 	call	802159c <memcpy>
 8026cb4:	98000a26 	beq	r19,zero,8026ce0 <__multadd+0x140>
 8026cb8:	98c00117 	ldw	r3,4(r19)
 8026cbc:	a0801317 	ldw	r2,76(r20)
 8026cc0:	18c7883a 	add	r3,r3,r3
 8026cc4:	18c7883a 	add	r3,r3,r3
 8026cc8:	10c5883a 	add	r2,r2,r3
 8026ccc:	10c00017 	ldw	r3,0(r2)
 8026cd0:	98c00015 	stw	r3,0(r19)
 8026cd4:	14c00015 	stw	r19,0(r2)
 8026cd8:	8827883a 	mov	r19,r17
 8026cdc:	003fd606 	br	8026c38 <__alt_data_end+0xfffe7838>
 8026ce0:	8827883a 	mov	r19,r17
 8026ce4:	003fd406 	br	8026c38 <__alt_data_end+0xfffe7838>

08026ce8 <__s2b>:
 8026ce8:	defff904 	addi	sp,sp,-28
 8026cec:	dc400115 	stw	r17,4(sp)
 8026cf0:	dc000015 	stw	r16,0(sp)
 8026cf4:	2023883a 	mov	r17,r4
 8026cf8:	2821883a 	mov	r16,r5
 8026cfc:	39000204 	addi	r4,r7,8
 8026d00:	01400244 	movi	r5,9
 8026d04:	dcc00315 	stw	r19,12(sp)
 8026d08:	dc800215 	stw	r18,8(sp)
 8026d0c:	dfc00615 	stw	ra,24(sp)
 8026d10:	dd400515 	stw	r21,20(sp)
 8026d14:	dd000415 	stw	r20,16(sp)
 8026d18:	3825883a 	mov	r18,r7
 8026d1c:	3027883a 	mov	r19,r6
 8026d20:	802b2ec0 	call	802b2ec <__divsi3>
 8026d24:	00c00044 	movi	r3,1
 8026d28:	000b883a 	mov	r5,zero
 8026d2c:	1880030e 	bge	r3,r2,8026d3c <__s2b+0x54>
 8026d30:	18c7883a 	add	r3,r3,r3
 8026d34:	29400044 	addi	r5,r5,1
 8026d38:	18bffd16 	blt	r3,r2,8026d30 <__alt_data_end+0xfffe7930>
 8026d3c:	8809883a 	mov	r4,r17
 8026d40:	8026ad00 	call	8026ad0 <_Balloc>
 8026d44:	d8c00717 	ldw	r3,28(sp)
 8026d48:	10c00515 	stw	r3,20(r2)
 8026d4c:	00c00044 	movi	r3,1
 8026d50:	10c00415 	stw	r3,16(r2)
 8026d54:	00c00244 	movi	r3,9
 8026d58:	1cc0210e 	bge	r3,r19,8026de0 <__s2b+0xf8>
 8026d5c:	80eb883a 	add	r21,r16,r3
 8026d60:	a829883a 	mov	r20,r21
 8026d64:	84e1883a 	add	r16,r16,r19
 8026d68:	a1c00007 	ldb	r7,0(r20)
 8026d6c:	01800284 	movi	r6,10
 8026d70:	a5000044 	addi	r20,r20,1
 8026d74:	100b883a 	mov	r5,r2
 8026d78:	39fff404 	addi	r7,r7,-48
 8026d7c:	8809883a 	mov	r4,r17
 8026d80:	8026ba00 	call	8026ba0 <__multadd>
 8026d84:	a43ff81e 	bne	r20,r16,8026d68 <__alt_data_end+0xfffe7968>
 8026d88:	ace1883a 	add	r16,r21,r19
 8026d8c:	843ffe04 	addi	r16,r16,-8
 8026d90:	9c800a0e 	bge	r19,r18,8026dbc <__s2b+0xd4>
 8026d94:	94e5c83a 	sub	r18,r18,r19
 8026d98:	84a5883a 	add	r18,r16,r18
 8026d9c:	81c00007 	ldb	r7,0(r16)
 8026da0:	01800284 	movi	r6,10
 8026da4:	84000044 	addi	r16,r16,1
 8026da8:	100b883a 	mov	r5,r2
 8026dac:	39fff404 	addi	r7,r7,-48
 8026db0:	8809883a 	mov	r4,r17
 8026db4:	8026ba00 	call	8026ba0 <__multadd>
 8026db8:	84bff81e 	bne	r16,r18,8026d9c <__alt_data_end+0xfffe799c>
 8026dbc:	dfc00617 	ldw	ra,24(sp)
 8026dc0:	dd400517 	ldw	r21,20(sp)
 8026dc4:	dd000417 	ldw	r20,16(sp)
 8026dc8:	dcc00317 	ldw	r19,12(sp)
 8026dcc:	dc800217 	ldw	r18,8(sp)
 8026dd0:	dc400117 	ldw	r17,4(sp)
 8026dd4:	dc000017 	ldw	r16,0(sp)
 8026dd8:	dec00704 	addi	sp,sp,28
 8026ddc:	f800283a 	ret
 8026de0:	84000284 	addi	r16,r16,10
 8026de4:	1827883a 	mov	r19,r3
 8026de8:	003fe906 	br	8026d90 <__alt_data_end+0xfffe7990>

08026dec <__hi0bits>:
 8026dec:	20bfffec 	andhi	r2,r4,65535
 8026df0:	1000141e 	bne	r2,zero,8026e44 <__hi0bits+0x58>
 8026df4:	2008943a 	slli	r4,r4,16
 8026df8:	00800404 	movi	r2,16
 8026dfc:	20ffc02c 	andhi	r3,r4,65280
 8026e00:	1800021e 	bne	r3,zero,8026e0c <__hi0bits+0x20>
 8026e04:	2008923a 	slli	r4,r4,8
 8026e08:	10800204 	addi	r2,r2,8
 8026e0c:	20fc002c 	andhi	r3,r4,61440
 8026e10:	1800021e 	bne	r3,zero,8026e1c <__hi0bits+0x30>
 8026e14:	2008913a 	slli	r4,r4,4
 8026e18:	10800104 	addi	r2,r2,4
 8026e1c:	20f0002c 	andhi	r3,r4,49152
 8026e20:	1800031e 	bne	r3,zero,8026e30 <__hi0bits+0x44>
 8026e24:	2109883a 	add	r4,r4,r4
 8026e28:	10800084 	addi	r2,r2,2
 8026e2c:	2109883a 	add	r4,r4,r4
 8026e30:	20000316 	blt	r4,zero,8026e40 <__hi0bits+0x54>
 8026e34:	2110002c 	andhi	r4,r4,16384
 8026e38:	2000041e 	bne	r4,zero,8026e4c <__hi0bits+0x60>
 8026e3c:	00800804 	movi	r2,32
 8026e40:	f800283a 	ret
 8026e44:	0005883a 	mov	r2,zero
 8026e48:	003fec06 	br	8026dfc <__alt_data_end+0xfffe79fc>
 8026e4c:	10800044 	addi	r2,r2,1
 8026e50:	f800283a 	ret

08026e54 <__lo0bits>:
 8026e54:	20c00017 	ldw	r3,0(r4)
 8026e58:	188001cc 	andi	r2,r3,7
 8026e5c:	10000826 	beq	r2,zero,8026e80 <__lo0bits+0x2c>
 8026e60:	1880004c 	andi	r2,r3,1
 8026e64:	1000211e 	bne	r2,zero,8026eec <__lo0bits+0x98>
 8026e68:	1880008c 	andi	r2,r3,2
 8026e6c:	1000211e 	bne	r2,zero,8026ef4 <__lo0bits+0xa0>
 8026e70:	1806d0ba 	srli	r3,r3,2
 8026e74:	00800084 	movi	r2,2
 8026e78:	20c00015 	stw	r3,0(r4)
 8026e7c:	f800283a 	ret
 8026e80:	18bfffcc 	andi	r2,r3,65535
 8026e84:	10001326 	beq	r2,zero,8026ed4 <__lo0bits+0x80>
 8026e88:	0005883a 	mov	r2,zero
 8026e8c:	19403fcc 	andi	r5,r3,255
 8026e90:	2800021e 	bne	r5,zero,8026e9c <__lo0bits+0x48>
 8026e94:	1806d23a 	srli	r3,r3,8
 8026e98:	10800204 	addi	r2,r2,8
 8026e9c:	194003cc 	andi	r5,r3,15
 8026ea0:	2800021e 	bne	r5,zero,8026eac <__lo0bits+0x58>
 8026ea4:	1806d13a 	srli	r3,r3,4
 8026ea8:	10800104 	addi	r2,r2,4
 8026eac:	194000cc 	andi	r5,r3,3
 8026eb0:	2800021e 	bne	r5,zero,8026ebc <__lo0bits+0x68>
 8026eb4:	1806d0ba 	srli	r3,r3,2
 8026eb8:	10800084 	addi	r2,r2,2
 8026ebc:	1940004c 	andi	r5,r3,1
 8026ec0:	2800081e 	bne	r5,zero,8026ee4 <__lo0bits+0x90>
 8026ec4:	1806d07a 	srli	r3,r3,1
 8026ec8:	1800051e 	bne	r3,zero,8026ee0 <__lo0bits+0x8c>
 8026ecc:	00800804 	movi	r2,32
 8026ed0:	f800283a 	ret
 8026ed4:	1806d43a 	srli	r3,r3,16
 8026ed8:	00800404 	movi	r2,16
 8026edc:	003feb06 	br	8026e8c <__alt_data_end+0xfffe7a8c>
 8026ee0:	10800044 	addi	r2,r2,1
 8026ee4:	20c00015 	stw	r3,0(r4)
 8026ee8:	f800283a 	ret
 8026eec:	0005883a 	mov	r2,zero
 8026ef0:	f800283a 	ret
 8026ef4:	1806d07a 	srli	r3,r3,1
 8026ef8:	00800044 	movi	r2,1
 8026efc:	20c00015 	stw	r3,0(r4)
 8026f00:	f800283a 	ret

08026f04 <__i2b>:
 8026f04:	defffd04 	addi	sp,sp,-12
 8026f08:	dc000015 	stw	r16,0(sp)
 8026f0c:	04000044 	movi	r16,1
 8026f10:	dc400115 	stw	r17,4(sp)
 8026f14:	2823883a 	mov	r17,r5
 8026f18:	800b883a 	mov	r5,r16
 8026f1c:	dfc00215 	stw	ra,8(sp)
 8026f20:	8026ad00 	call	8026ad0 <_Balloc>
 8026f24:	14400515 	stw	r17,20(r2)
 8026f28:	14000415 	stw	r16,16(r2)
 8026f2c:	dfc00217 	ldw	ra,8(sp)
 8026f30:	dc400117 	ldw	r17,4(sp)
 8026f34:	dc000017 	ldw	r16,0(sp)
 8026f38:	dec00304 	addi	sp,sp,12
 8026f3c:	f800283a 	ret

08026f40 <__multiply>:
 8026f40:	deffef04 	addi	sp,sp,-68
 8026f44:	dc400815 	stw	r17,32(sp)
 8026f48:	dc000715 	stw	r16,28(sp)
 8026f4c:	34400417 	ldw	r17,16(r6)
 8026f50:	2c000417 	ldw	r16,16(r5)
 8026f54:	dd800d15 	stw	r22,52(sp)
 8026f58:	dc800915 	stw	r18,36(sp)
 8026f5c:	dfc01015 	stw	ra,64(sp)
 8026f60:	df000f15 	stw	fp,60(sp)
 8026f64:	ddc00e15 	stw	r23,56(sp)
 8026f68:	dd400c15 	stw	r21,48(sp)
 8026f6c:	dd000b15 	stw	r20,44(sp)
 8026f70:	dcc00a15 	stw	r19,40(sp)
 8026f74:	2825883a 	mov	r18,r5
 8026f78:	302d883a 	mov	r22,r6
 8026f7c:	8440050e 	bge	r16,r17,8026f94 <__multiply+0x54>
 8026f80:	8007883a 	mov	r3,r16
 8026f84:	3025883a 	mov	r18,r6
 8026f88:	8821883a 	mov	r16,r17
 8026f8c:	282d883a 	mov	r22,r5
 8026f90:	1823883a 	mov	r17,r3
 8026f94:	90800217 	ldw	r2,8(r18)
 8026f98:	8447883a 	add	r3,r16,r17
 8026f9c:	d8c00215 	stw	r3,8(sp)
 8026fa0:	91400117 	ldw	r5,4(r18)
 8026fa4:	10c0010e 	bge	r2,r3,8026fac <__multiply+0x6c>
 8026fa8:	29400044 	addi	r5,r5,1
 8026fac:	8026ad00 	call	8026ad0 <_Balloc>
 8026fb0:	d8c00217 	ldw	r3,8(sp)
 8026fb4:	d8800615 	stw	r2,24(sp)
 8026fb8:	18eb883a 	add	r21,r3,r3
 8026fbc:	ad6b883a 	add	r21,r21,r21
 8026fc0:	10c00504 	addi	r3,r2,20
 8026fc4:	1d6b883a 	add	r21,r3,r21
 8026fc8:	d8c00115 	stw	r3,4(sp)
 8026fcc:	dd400315 	stw	r21,12(sp)
 8026fd0:	1805883a 	mov	r2,r3
 8026fd4:	1d40042e 	bgeu	r3,r21,8026fe8 <__multiply+0xa8>
 8026fd8:	d8c00317 	ldw	r3,12(sp)
 8026fdc:	10000015 	stw	zero,0(r2)
 8026fe0:	10800104 	addi	r2,r2,4
 8026fe4:	10fffc36 	bltu	r2,r3,8026fd8 <__alt_data_end+0xfffe7bd8>
 8026fe8:	8c63883a 	add	r17,r17,r17
 8026fec:	b5800504 	addi	r22,r22,20
 8026ff0:	8c63883a 	add	r17,r17,r17
 8026ff4:	94800504 	addi	r18,r18,20
 8026ff8:	8421883a 	add	r16,r16,r16
 8026ffc:	b463883a 	add	r17,r22,r17
 8027000:	8421883a 	add	r16,r16,r16
 8027004:	dd800015 	stw	r22,0(sp)
 8027008:	dc800415 	stw	r18,16(sp)
 802700c:	dc400515 	stw	r17,20(sp)
 8027010:	9429883a 	add	r20,r18,r16
 8027014:	b4404f2e 	bgeu	r22,r17,8027154 <__multiply+0x214>
 8027018:	d8c00017 	ldw	r3,0(sp)
 802701c:	1c800017 	ldw	r18,0(r3)
 8027020:	947fffcc 	andi	r17,r18,65535
 8027024:	88001e26 	beq	r17,zero,80270a0 <__multiply+0x160>
 8027028:	dd800117 	ldw	r22,4(sp)
 802702c:	dd400417 	ldw	r21,16(sp)
 8027030:	0027883a 	mov	r19,zero
 8027034:	ac800017 	ldw	r18,0(r21)
 8027038:	b4000017 	ldw	r16,0(r22)
 802703c:	880b883a 	mov	r5,r17
 8027040:	913fffcc 	andi	r4,r18,65535
 8027044:	80214e80 	call	80214e8 <__mulsi3>
 8027048:	9008d43a 	srli	r4,r18,16
 802704c:	84bfffcc 	andi	r18,r16,65535
 8027050:	1485883a 	add	r2,r2,r18
 8027054:	14e5883a 	add	r18,r2,r19
 8027058:	8020d43a 	srli	r16,r16,16
 802705c:	9026d43a 	srli	r19,r18,16
 8027060:	880b883a 	mov	r5,r17
 8027064:	80214e80 	call	80214e8 <__mulsi3>
 8027068:	1405883a 	add	r2,r2,r16
 802706c:	14e1883a 	add	r16,r2,r19
 8027070:	90ffffcc 	andi	r3,r18,65535
 8027074:	8024943a 	slli	r18,r16,16
 8027078:	ad400104 	addi	r21,r21,4
 802707c:	b005883a 	mov	r2,r22
 8027080:	90c6b03a 	or	r3,r18,r3
 8027084:	b0c00015 	stw	r3,0(r22)
 8027088:	8026d43a 	srli	r19,r16,16
 802708c:	b5800104 	addi	r22,r22,4
 8027090:	ad3fe836 	bltu	r21,r20,8027034 <__alt_data_end+0xfffe7c34>
 8027094:	d8c00017 	ldw	r3,0(sp)
 8027098:	14c00115 	stw	r19,4(r2)
 802709c:	1c800017 	ldw	r18,0(r3)
 80270a0:	9024d43a 	srli	r18,r18,16
 80270a4:	90002226 	beq	r18,zero,8027130 <__multiply+0x1f0>
 80270a8:	d8c00117 	ldw	r3,4(sp)
 80270ac:	dd800417 	ldw	r22,16(sp)
 80270b0:	002f883a 	mov	r23,zero
 80270b4:	1f000017 	ldw	fp,0(r3)
 80270b8:	1823883a 	mov	r17,r3
 80270bc:	182b883a 	mov	r21,r3
 80270c0:	e021883a 	mov	r16,fp
 80270c4:	00000106 	br	80270cc <__multiply+0x18c>
 80270c8:	982b883a 	mov	r21,r19
 80270cc:	b100000b 	ldhu	r4,0(r22)
 80270d0:	8020d43a 	srli	r16,r16,16
 80270d4:	900b883a 	mov	r5,r18
 80270d8:	80214e80 	call	80214e8 <__mulsi3>
 80270dc:	1405883a 	add	r2,r2,r16
 80270e0:	15ef883a 	add	r23,r2,r23
 80270e4:	b804943a 	slli	r2,r23,16
 80270e8:	e0ffffcc 	andi	r3,fp,65535
 80270ec:	8c400104 	addi	r17,r17,4
 80270f0:	10c6b03a 	or	r3,r2,r3
 80270f4:	88ffff15 	stw	r3,-4(r17)
 80270f8:	b5800104 	addi	r22,r22,4
 80270fc:	b13fff17 	ldw	r4,-4(r22)
 8027100:	acc00104 	addi	r19,r21,4
 8027104:	900b883a 	mov	r5,r18
 8027108:	2008d43a 	srli	r4,r4,16
 802710c:	9c000017 	ldw	r16,0(r19)
 8027110:	80214e80 	call	80214e8 <__mulsi3>
 8027114:	b806d43a 	srli	r3,r23,16
 8027118:	813fffcc 	andi	r4,r16,65535
 802711c:	1105883a 	add	r2,r2,r4
 8027120:	10f9883a 	add	fp,r2,r3
 8027124:	e02ed43a 	srli	r23,fp,16
 8027128:	b53fe736 	bltu	r22,r20,80270c8 <__alt_data_end+0xfffe7cc8>
 802712c:	af000115 	stw	fp,4(r21)
 8027130:	d8c00017 	ldw	r3,0(sp)
 8027134:	d9000517 	ldw	r4,20(sp)
 8027138:	18c00104 	addi	r3,r3,4
 802713c:	d8c00015 	stw	r3,0(sp)
 8027140:	d8c00117 	ldw	r3,4(sp)
 8027144:	18c00104 	addi	r3,r3,4
 8027148:	d8c00115 	stw	r3,4(sp)
 802714c:	d8c00017 	ldw	r3,0(sp)
 8027150:	193fb136 	bltu	r3,r4,8027018 <__alt_data_end+0xfffe7c18>
 8027154:	d8c00217 	ldw	r3,8(sp)
 8027158:	00c00c0e 	bge	zero,r3,802718c <__multiply+0x24c>
 802715c:	d8c00317 	ldw	r3,12(sp)
 8027160:	18bfff17 	ldw	r2,-4(r3)
 8027164:	1d7fff04 	addi	r21,r3,-4
 8027168:	10000326 	beq	r2,zero,8027178 <__multiply+0x238>
 802716c:	00000706 	br	802718c <__multiply+0x24c>
 8027170:	a8800017 	ldw	r2,0(r21)
 8027174:	1000051e 	bne	r2,zero,802718c <__multiply+0x24c>
 8027178:	d8c00217 	ldw	r3,8(sp)
 802717c:	ad7fff04 	addi	r21,r21,-4
 8027180:	18ffffc4 	addi	r3,r3,-1
 8027184:	d8c00215 	stw	r3,8(sp)
 8027188:	183ff91e 	bne	r3,zero,8027170 <__alt_data_end+0xfffe7d70>
 802718c:	d8c00617 	ldw	r3,24(sp)
 8027190:	d9000217 	ldw	r4,8(sp)
 8027194:	1805883a 	mov	r2,r3
 8027198:	19000415 	stw	r4,16(r3)
 802719c:	dfc01017 	ldw	ra,64(sp)
 80271a0:	df000f17 	ldw	fp,60(sp)
 80271a4:	ddc00e17 	ldw	r23,56(sp)
 80271a8:	dd800d17 	ldw	r22,52(sp)
 80271ac:	dd400c17 	ldw	r21,48(sp)
 80271b0:	dd000b17 	ldw	r20,44(sp)
 80271b4:	dcc00a17 	ldw	r19,40(sp)
 80271b8:	dc800917 	ldw	r18,36(sp)
 80271bc:	dc400817 	ldw	r17,32(sp)
 80271c0:	dc000717 	ldw	r16,28(sp)
 80271c4:	dec01104 	addi	sp,sp,68
 80271c8:	f800283a 	ret

080271cc <__pow5mult>:
 80271cc:	defffa04 	addi	sp,sp,-24
 80271d0:	dcc00315 	stw	r19,12(sp)
 80271d4:	dc000015 	stw	r16,0(sp)
 80271d8:	dfc00515 	stw	ra,20(sp)
 80271dc:	dd000415 	stw	r20,16(sp)
 80271e0:	dc800215 	stw	r18,8(sp)
 80271e4:	dc400115 	stw	r17,4(sp)
 80271e8:	308000cc 	andi	r2,r6,3
 80271ec:	3021883a 	mov	r16,r6
 80271f0:	2027883a 	mov	r19,r4
 80271f4:	10002f1e 	bne	r2,zero,80272b4 <__pow5mult+0xe8>
 80271f8:	2825883a 	mov	r18,r5
 80271fc:	8021d0ba 	srai	r16,r16,2
 8027200:	80001a26 	beq	r16,zero,802726c <__pow5mult+0xa0>
 8027204:	9c401217 	ldw	r17,72(r19)
 8027208:	8800061e 	bne	r17,zero,8027224 <__pow5mult+0x58>
 802720c:	00003406 	br	80272e0 <__pow5mult+0x114>
 8027210:	8021d07a 	srai	r16,r16,1
 8027214:	80001526 	beq	r16,zero,802726c <__pow5mult+0xa0>
 8027218:	88800017 	ldw	r2,0(r17)
 802721c:	10001c26 	beq	r2,zero,8027290 <__pow5mult+0xc4>
 8027220:	1023883a 	mov	r17,r2
 8027224:	8080004c 	andi	r2,r16,1
 8027228:	103ff926 	beq	r2,zero,8027210 <__alt_data_end+0xfffe7e10>
 802722c:	880d883a 	mov	r6,r17
 8027230:	900b883a 	mov	r5,r18
 8027234:	9809883a 	mov	r4,r19
 8027238:	8026f400 	call	8026f40 <__multiply>
 802723c:	90001b26 	beq	r18,zero,80272ac <__pow5mult+0xe0>
 8027240:	91000117 	ldw	r4,4(r18)
 8027244:	98c01317 	ldw	r3,76(r19)
 8027248:	8021d07a 	srai	r16,r16,1
 802724c:	2109883a 	add	r4,r4,r4
 8027250:	2109883a 	add	r4,r4,r4
 8027254:	1907883a 	add	r3,r3,r4
 8027258:	19000017 	ldw	r4,0(r3)
 802725c:	91000015 	stw	r4,0(r18)
 8027260:	1c800015 	stw	r18,0(r3)
 8027264:	1025883a 	mov	r18,r2
 8027268:	803feb1e 	bne	r16,zero,8027218 <__alt_data_end+0xfffe7e18>
 802726c:	9005883a 	mov	r2,r18
 8027270:	dfc00517 	ldw	ra,20(sp)
 8027274:	dd000417 	ldw	r20,16(sp)
 8027278:	dcc00317 	ldw	r19,12(sp)
 802727c:	dc800217 	ldw	r18,8(sp)
 8027280:	dc400117 	ldw	r17,4(sp)
 8027284:	dc000017 	ldw	r16,0(sp)
 8027288:	dec00604 	addi	sp,sp,24
 802728c:	f800283a 	ret
 8027290:	880d883a 	mov	r6,r17
 8027294:	880b883a 	mov	r5,r17
 8027298:	9809883a 	mov	r4,r19
 802729c:	8026f400 	call	8026f40 <__multiply>
 80272a0:	88800015 	stw	r2,0(r17)
 80272a4:	10000015 	stw	zero,0(r2)
 80272a8:	003fdd06 	br	8027220 <__alt_data_end+0xfffe7e20>
 80272ac:	1025883a 	mov	r18,r2
 80272b0:	003fd706 	br	8027210 <__alt_data_end+0xfffe7e10>
 80272b4:	10bfffc4 	addi	r2,r2,-1
 80272b8:	1085883a 	add	r2,r2,r2
 80272bc:	00c200f4 	movhi	r3,2051
 80272c0:	18c75f04 	addi	r3,r3,7548
 80272c4:	1085883a 	add	r2,r2,r2
 80272c8:	1885883a 	add	r2,r3,r2
 80272cc:	11800017 	ldw	r6,0(r2)
 80272d0:	000f883a 	mov	r7,zero
 80272d4:	8026ba00 	call	8026ba0 <__multadd>
 80272d8:	1025883a 	mov	r18,r2
 80272dc:	003fc706 	br	80271fc <__alt_data_end+0xfffe7dfc>
 80272e0:	05000044 	movi	r20,1
 80272e4:	a00b883a 	mov	r5,r20
 80272e8:	9809883a 	mov	r4,r19
 80272ec:	8026ad00 	call	8026ad0 <_Balloc>
 80272f0:	1023883a 	mov	r17,r2
 80272f4:	00809c44 	movi	r2,625
 80272f8:	88800515 	stw	r2,20(r17)
 80272fc:	8d000415 	stw	r20,16(r17)
 8027300:	9c401215 	stw	r17,72(r19)
 8027304:	88000015 	stw	zero,0(r17)
 8027308:	003fc606 	br	8027224 <__alt_data_end+0xfffe7e24>

0802730c <__lshift>:
 802730c:	defff904 	addi	sp,sp,-28
 8027310:	dd400515 	stw	r21,20(sp)
 8027314:	dcc00315 	stw	r19,12(sp)
 8027318:	302bd17a 	srai	r21,r6,5
 802731c:	2cc00417 	ldw	r19,16(r5)
 8027320:	28800217 	ldw	r2,8(r5)
 8027324:	dd000415 	stw	r20,16(sp)
 8027328:	ace7883a 	add	r19,r21,r19
 802732c:	dc800215 	stw	r18,8(sp)
 8027330:	dc400115 	stw	r17,4(sp)
 8027334:	dc000015 	stw	r16,0(sp)
 8027338:	dfc00615 	stw	ra,24(sp)
 802733c:	9c000044 	addi	r16,r19,1
 8027340:	2823883a 	mov	r17,r5
 8027344:	3029883a 	mov	r20,r6
 8027348:	2025883a 	mov	r18,r4
 802734c:	29400117 	ldw	r5,4(r5)
 8027350:	1400030e 	bge	r2,r16,8027360 <__lshift+0x54>
 8027354:	1085883a 	add	r2,r2,r2
 8027358:	29400044 	addi	r5,r5,1
 802735c:	143ffd16 	blt	r2,r16,8027354 <__alt_data_end+0xfffe7f54>
 8027360:	9009883a 	mov	r4,r18
 8027364:	8026ad00 	call	8026ad0 <_Balloc>
 8027368:	10c00504 	addi	r3,r2,20
 802736c:	0540070e 	bge	zero,r21,802738c <__lshift+0x80>
 8027370:	ad6b883a 	add	r21,r21,r21
 8027374:	ad6b883a 	add	r21,r21,r21
 8027378:	1809883a 	mov	r4,r3
 802737c:	1d47883a 	add	r3,r3,r21
 8027380:	20000015 	stw	zero,0(r4)
 8027384:	21000104 	addi	r4,r4,4
 8027388:	193ffd1e 	bne	r3,r4,8027380 <__alt_data_end+0xfffe7f80>
 802738c:	8a000417 	ldw	r8,16(r17)
 8027390:	89000504 	addi	r4,r17,20
 8027394:	a18007cc 	andi	r6,r20,31
 8027398:	4211883a 	add	r8,r8,r8
 802739c:	4211883a 	add	r8,r8,r8
 80273a0:	2211883a 	add	r8,r4,r8
 80273a4:	30002326 	beq	r6,zero,8027434 <__lshift+0x128>
 80273a8:	02400804 	movi	r9,32
 80273ac:	4993c83a 	sub	r9,r9,r6
 80273b0:	000b883a 	mov	r5,zero
 80273b4:	21c00017 	ldw	r7,0(r4)
 80273b8:	1815883a 	mov	r10,r3
 80273bc:	18c00104 	addi	r3,r3,4
 80273c0:	398e983a 	sll	r7,r7,r6
 80273c4:	21000104 	addi	r4,r4,4
 80273c8:	394ab03a 	or	r5,r7,r5
 80273cc:	197fff15 	stw	r5,-4(r3)
 80273d0:	217fff17 	ldw	r5,-4(r4)
 80273d4:	2a4ad83a 	srl	r5,r5,r9
 80273d8:	223ff636 	bltu	r4,r8,80273b4 <__alt_data_end+0xfffe7fb4>
 80273dc:	51400115 	stw	r5,4(r10)
 80273e0:	28001a1e 	bne	r5,zero,802744c <__lshift+0x140>
 80273e4:	843fffc4 	addi	r16,r16,-1
 80273e8:	14000415 	stw	r16,16(r2)
 80273ec:	88000826 	beq	r17,zero,8027410 <__lshift+0x104>
 80273f0:	89000117 	ldw	r4,4(r17)
 80273f4:	90c01317 	ldw	r3,76(r18)
 80273f8:	2109883a 	add	r4,r4,r4
 80273fc:	2109883a 	add	r4,r4,r4
 8027400:	1907883a 	add	r3,r3,r4
 8027404:	19000017 	ldw	r4,0(r3)
 8027408:	89000015 	stw	r4,0(r17)
 802740c:	1c400015 	stw	r17,0(r3)
 8027410:	dfc00617 	ldw	ra,24(sp)
 8027414:	dd400517 	ldw	r21,20(sp)
 8027418:	dd000417 	ldw	r20,16(sp)
 802741c:	dcc00317 	ldw	r19,12(sp)
 8027420:	dc800217 	ldw	r18,8(sp)
 8027424:	dc400117 	ldw	r17,4(sp)
 8027428:	dc000017 	ldw	r16,0(sp)
 802742c:	dec00704 	addi	sp,sp,28
 8027430:	f800283a 	ret
 8027434:	21400017 	ldw	r5,0(r4)
 8027438:	18c00104 	addi	r3,r3,4
 802743c:	21000104 	addi	r4,r4,4
 8027440:	197fff15 	stw	r5,-4(r3)
 8027444:	223ffb36 	bltu	r4,r8,8027434 <__alt_data_end+0xfffe8034>
 8027448:	003fe606 	br	80273e4 <__alt_data_end+0xfffe7fe4>
 802744c:	9c000084 	addi	r16,r19,2
 8027450:	003fe406 	br	80273e4 <__alt_data_end+0xfffe7fe4>

08027454 <__mcmp>:
 8027454:	20800417 	ldw	r2,16(r4)
 8027458:	28c00417 	ldw	r3,16(r5)
 802745c:	10c5c83a 	sub	r2,r2,r3
 8027460:	1000111e 	bne	r2,zero,80274a8 <__mcmp+0x54>
 8027464:	18c7883a 	add	r3,r3,r3
 8027468:	18c7883a 	add	r3,r3,r3
 802746c:	21000504 	addi	r4,r4,20
 8027470:	29400504 	addi	r5,r5,20
 8027474:	20c5883a 	add	r2,r4,r3
 8027478:	28cb883a 	add	r5,r5,r3
 802747c:	00000106 	br	8027484 <__mcmp+0x30>
 8027480:	20800a2e 	bgeu	r4,r2,80274ac <__mcmp+0x58>
 8027484:	10bfff04 	addi	r2,r2,-4
 8027488:	297fff04 	addi	r5,r5,-4
 802748c:	11800017 	ldw	r6,0(r2)
 8027490:	28c00017 	ldw	r3,0(r5)
 8027494:	30fffa26 	beq	r6,r3,8027480 <__alt_data_end+0xfffe8080>
 8027498:	30c00236 	bltu	r6,r3,80274a4 <__mcmp+0x50>
 802749c:	00800044 	movi	r2,1
 80274a0:	f800283a 	ret
 80274a4:	00bfffc4 	movi	r2,-1
 80274a8:	f800283a 	ret
 80274ac:	0005883a 	mov	r2,zero
 80274b0:	f800283a 	ret

080274b4 <__mdiff>:
 80274b4:	28c00417 	ldw	r3,16(r5)
 80274b8:	30800417 	ldw	r2,16(r6)
 80274bc:	defffa04 	addi	sp,sp,-24
 80274c0:	dcc00315 	stw	r19,12(sp)
 80274c4:	dc800215 	stw	r18,8(sp)
 80274c8:	dfc00515 	stw	ra,20(sp)
 80274cc:	dd000415 	stw	r20,16(sp)
 80274d0:	dc400115 	stw	r17,4(sp)
 80274d4:	dc000015 	stw	r16,0(sp)
 80274d8:	1887c83a 	sub	r3,r3,r2
 80274dc:	2825883a 	mov	r18,r5
 80274e0:	3027883a 	mov	r19,r6
 80274e4:	1800141e 	bne	r3,zero,8027538 <__mdiff+0x84>
 80274e8:	1085883a 	add	r2,r2,r2
 80274ec:	1085883a 	add	r2,r2,r2
 80274f0:	2a000504 	addi	r8,r5,20
 80274f4:	34000504 	addi	r16,r6,20
 80274f8:	4087883a 	add	r3,r8,r2
 80274fc:	8085883a 	add	r2,r16,r2
 8027500:	00000106 	br	8027508 <__mdiff+0x54>
 8027504:	40c0592e 	bgeu	r8,r3,802766c <__mdiff+0x1b8>
 8027508:	18ffff04 	addi	r3,r3,-4
 802750c:	10bfff04 	addi	r2,r2,-4
 8027510:	19c00017 	ldw	r7,0(r3)
 8027514:	11400017 	ldw	r5,0(r2)
 8027518:	397ffa26 	beq	r7,r5,8027504 <__alt_data_end+0xfffe8104>
 802751c:	3940592e 	bgeu	r7,r5,8027684 <__mdiff+0x1d0>
 8027520:	9005883a 	mov	r2,r18
 8027524:	4023883a 	mov	r17,r8
 8027528:	9825883a 	mov	r18,r19
 802752c:	05000044 	movi	r20,1
 8027530:	1027883a 	mov	r19,r2
 8027534:	00000406 	br	8027548 <__mdiff+0x94>
 8027538:	18005616 	blt	r3,zero,8027694 <__mdiff+0x1e0>
 802753c:	34400504 	addi	r17,r6,20
 8027540:	2c000504 	addi	r16,r5,20
 8027544:	0029883a 	mov	r20,zero
 8027548:	91400117 	ldw	r5,4(r18)
 802754c:	8026ad00 	call	8026ad0 <_Balloc>
 8027550:	92400417 	ldw	r9,16(r18)
 8027554:	9b000417 	ldw	r12,16(r19)
 8027558:	12c00504 	addi	r11,r2,20
 802755c:	4a51883a 	add	r8,r9,r9
 8027560:	6319883a 	add	r12,r12,r12
 8027564:	4211883a 	add	r8,r8,r8
 8027568:	6319883a 	add	r12,r12,r12
 802756c:	15000315 	stw	r20,12(r2)
 8027570:	8211883a 	add	r8,r16,r8
 8027574:	8b19883a 	add	r12,r17,r12
 8027578:	0007883a 	mov	r3,zero
 802757c:	81400017 	ldw	r5,0(r16)
 8027580:	89c00017 	ldw	r7,0(r17)
 8027584:	59800104 	addi	r6,r11,4
 8027588:	293fffcc 	andi	r4,r5,65535
 802758c:	20c7883a 	add	r3,r4,r3
 8027590:	393fffcc 	andi	r4,r7,65535
 8027594:	1909c83a 	sub	r4,r3,r4
 8027598:	280ad43a 	srli	r5,r5,16
 802759c:	380ed43a 	srli	r7,r7,16
 80275a0:	2007d43a 	srai	r3,r4,16
 80275a4:	213fffcc 	andi	r4,r4,65535
 80275a8:	29cbc83a 	sub	r5,r5,r7
 80275ac:	28c7883a 	add	r3,r5,r3
 80275b0:	180a943a 	slli	r5,r3,16
 80275b4:	8c400104 	addi	r17,r17,4
 80275b8:	84000104 	addi	r16,r16,4
 80275bc:	2908b03a 	or	r4,r5,r4
 80275c0:	59000015 	stw	r4,0(r11)
 80275c4:	1807d43a 	srai	r3,r3,16
 80275c8:	3015883a 	mov	r10,r6
 80275cc:	3017883a 	mov	r11,r6
 80275d0:	8b3fea36 	bltu	r17,r12,802757c <__alt_data_end+0xfffe817c>
 80275d4:	8200162e 	bgeu	r16,r8,8027630 <__mdiff+0x17c>
 80275d8:	8017883a 	mov	r11,r16
 80275dc:	59400017 	ldw	r5,0(r11)
 80275e0:	31800104 	addi	r6,r6,4
 80275e4:	5ac00104 	addi	r11,r11,4
 80275e8:	293fffcc 	andi	r4,r5,65535
 80275ec:	20c7883a 	add	r3,r4,r3
 80275f0:	280ed43a 	srli	r7,r5,16
 80275f4:	180bd43a 	srai	r5,r3,16
 80275f8:	193fffcc 	andi	r4,r3,65535
 80275fc:	3947883a 	add	r3,r7,r5
 8027600:	180a943a 	slli	r5,r3,16
 8027604:	1807d43a 	srai	r3,r3,16
 8027608:	2908b03a 	or	r4,r5,r4
 802760c:	313fff15 	stw	r4,-4(r6)
 8027610:	5a3ff236 	bltu	r11,r8,80275dc <__alt_data_end+0xfffe81dc>
 8027614:	0406303a 	nor	r3,zero,r16
 8027618:	1a07883a 	add	r3,r3,r8
 802761c:	1806d0ba 	srli	r3,r3,2
 8027620:	18c00044 	addi	r3,r3,1
 8027624:	18c7883a 	add	r3,r3,r3
 8027628:	18c7883a 	add	r3,r3,r3
 802762c:	50d5883a 	add	r10,r10,r3
 8027630:	50ffff04 	addi	r3,r10,-4
 8027634:	2000041e 	bne	r4,zero,8027648 <__mdiff+0x194>
 8027638:	18ffff04 	addi	r3,r3,-4
 802763c:	19000017 	ldw	r4,0(r3)
 8027640:	4a7fffc4 	addi	r9,r9,-1
 8027644:	203ffc26 	beq	r4,zero,8027638 <__alt_data_end+0xfffe8238>
 8027648:	12400415 	stw	r9,16(r2)
 802764c:	dfc00517 	ldw	ra,20(sp)
 8027650:	dd000417 	ldw	r20,16(sp)
 8027654:	dcc00317 	ldw	r19,12(sp)
 8027658:	dc800217 	ldw	r18,8(sp)
 802765c:	dc400117 	ldw	r17,4(sp)
 8027660:	dc000017 	ldw	r16,0(sp)
 8027664:	dec00604 	addi	sp,sp,24
 8027668:	f800283a 	ret
 802766c:	000b883a 	mov	r5,zero
 8027670:	8026ad00 	call	8026ad0 <_Balloc>
 8027674:	00c00044 	movi	r3,1
 8027678:	10c00415 	stw	r3,16(r2)
 802767c:	10000515 	stw	zero,20(r2)
 8027680:	003ff206 	br	802764c <__alt_data_end+0xfffe824c>
 8027684:	8023883a 	mov	r17,r16
 8027688:	0029883a 	mov	r20,zero
 802768c:	4021883a 	mov	r16,r8
 8027690:	003fad06 	br	8027548 <__alt_data_end+0xfffe8148>
 8027694:	9005883a 	mov	r2,r18
 8027698:	94400504 	addi	r17,r18,20
 802769c:	9c000504 	addi	r16,r19,20
 80276a0:	9825883a 	mov	r18,r19
 80276a4:	05000044 	movi	r20,1
 80276a8:	1027883a 	mov	r19,r2
 80276ac:	003fa606 	br	8027548 <__alt_data_end+0xfffe8148>

080276b0 <__ulp>:
 80276b0:	295ffc2c 	andhi	r5,r5,32752
 80276b4:	00bf3034 	movhi	r2,64704
 80276b8:	2887883a 	add	r3,r5,r2
 80276bc:	00c0020e 	bge	zero,r3,80276c8 <__ulp+0x18>
 80276c0:	0005883a 	mov	r2,zero
 80276c4:	f800283a 	ret
 80276c8:	00c7c83a 	sub	r3,zero,r3
 80276cc:	1807d53a 	srai	r3,r3,20
 80276d0:	008004c4 	movi	r2,19
 80276d4:	10c00b0e 	bge	r2,r3,8027704 <__ulp+0x54>
 80276d8:	18bffb04 	addi	r2,r3,-20
 80276dc:	01000784 	movi	r4,30
 80276e0:	0007883a 	mov	r3,zero
 80276e4:	20800516 	blt	r4,r2,80276fc <__ulp+0x4c>
 80276e8:	010007c4 	movi	r4,31
 80276ec:	2089c83a 	sub	r4,r4,r2
 80276f0:	00800044 	movi	r2,1
 80276f4:	1104983a 	sll	r2,r2,r4
 80276f8:	f800283a 	ret
 80276fc:	00800044 	movi	r2,1
 8027700:	f800283a 	ret
 8027704:	01400234 	movhi	r5,8
 8027708:	28c7d83a 	sra	r3,r5,r3
 802770c:	0005883a 	mov	r2,zero
 8027710:	f800283a 	ret

08027714 <__b2d>:
 8027714:	defffa04 	addi	sp,sp,-24
 8027718:	dc000015 	stw	r16,0(sp)
 802771c:	24000417 	ldw	r16,16(r4)
 8027720:	dc400115 	stw	r17,4(sp)
 8027724:	24400504 	addi	r17,r4,20
 8027728:	8421883a 	add	r16,r16,r16
 802772c:	8421883a 	add	r16,r16,r16
 8027730:	8c21883a 	add	r16,r17,r16
 8027734:	dc800215 	stw	r18,8(sp)
 8027738:	84bfff17 	ldw	r18,-4(r16)
 802773c:	dd000415 	stw	r20,16(sp)
 8027740:	dcc00315 	stw	r19,12(sp)
 8027744:	9009883a 	mov	r4,r18
 8027748:	2829883a 	mov	r20,r5
 802774c:	dfc00515 	stw	ra,20(sp)
 8027750:	8026dec0 	call	8026dec <__hi0bits>
 8027754:	00c00804 	movi	r3,32
 8027758:	1889c83a 	sub	r4,r3,r2
 802775c:	a1000015 	stw	r4,0(r20)
 8027760:	01000284 	movi	r4,10
 8027764:	84ffff04 	addi	r19,r16,-4
 8027768:	20801216 	blt	r4,r2,80277b4 <__b2d+0xa0>
 802776c:	018002c4 	movi	r6,11
 8027770:	308dc83a 	sub	r6,r6,r2
 8027774:	9186d83a 	srl	r3,r18,r6
 8027778:	18cffc34 	orhi	r3,r3,16368
 802777c:	8cc0212e 	bgeu	r17,r19,8027804 <__b2d+0xf0>
 8027780:	813ffe17 	ldw	r4,-8(r16)
 8027784:	218cd83a 	srl	r6,r4,r6
 8027788:	10800544 	addi	r2,r2,21
 802778c:	9084983a 	sll	r2,r18,r2
 8027790:	1184b03a 	or	r2,r2,r6
 8027794:	dfc00517 	ldw	ra,20(sp)
 8027798:	dd000417 	ldw	r20,16(sp)
 802779c:	dcc00317 	ldw	r19,12(sp)
 80277a0:	dc800217 	ldw	r18,8(sp)
 80277a4:	dc400117 	ldw	r17,4(sp)
 80277a8:	dc000017 	ldw	r16,0(sp)
 80277ac:	dec00604 	addi	sp,sp,24
 80277b0:	f800283a 	ret
 80277b4:	8cc00f2e 	bgeu	r17,r19,80277f4 <__b2d+0xe0>
 80277b8:	117ffd44 	addi	r5,r2,-11
 80277bc:	80bffe17 	ldw	r2,-8(r16)
 80277c0:	28000e26 	beq	r5,zero,80277fc <__b2d+0xe8>
 80277c4:	1949c83a 	sub	r4,r3,r5
 80277c8:	9164983a 	sll	r18,r18,r5
 80277cc:	1106d83a 	srl	r3,r2,r4
 80277d0:	81bffe04 	addi	r6,r16,-8
 80277d4:	948ffc34 	orhi	r18,r18,16368
 80277d8:	90c6b03a 	or	r3,r18,r3
 80277dc:	89800e2e 	bgeu	r17,r6,8027818 <__b2d+0x104>
 80277e0:	81bffd17 	ldw	r6,-12(r16)
 80277e4:	1144983a 	sll	r2,r2,r5
 80277e8:	310ad83a 	srl	r5,r6,r4
 80277ec:	2884b03a 	or	r2,r5,r2
 80277f0:	003fe806 	br	8027794 <__alt_data_end+0xfffe8394>
 80277f4:	10bffd44 	addi	r2,r2,-11
 80277f8:	1000041e 	bne	r2,zero,802780c <__b2d+0xf8>
 80277fc:	90cffc34 	orhi	r3,r18,16368
 8027800:	003fe406 	br	8027794 <__alt_data_end+0xfffe8394>
 8027804:	000d883a 	mov	r6,zero
 8027808:	003fdf06 	br	8027788 <__alt_data_end+0xfffe8388>
 802780c:	90a4983a 	sll	r18,r18,r2
 8027810:	0005883a 	mov	r2,zero
 8027814:	003ff906 	br	80277fc <__alt_data_end+0xfffe83fc>
 8027818:	1144983a 	sll	r2,r2,r5
 802781c:	003fdd06 	br	8027794 <__alt_data_end+0xfffe8394>

08027820 <__d2b>:
 8027820:	defff804 	addi	sp,sp,-32
 8027824:	dc000215 	stw	r16,8(sp)
 8027828:	3021883a 	mov	r16,r6
 802782c:	dc400315 	stw	r17,12(sp)
 8027830:	8022907a 	slli	r17,r16,1
 8027834:	dd000615 	stw	r20,24(sp)
 8027838:	2829883a 	mov	r20,r5
 802783c:	01400044 	movi	r5,1
 8027840:	dcc00515 	stw	r19,20(sp)
 8027844:	dc800415 	stw	r18,16(sp)
 8027848:	dfc00715 	stw	ra,28(sp)
 802784c:	3825883a 	mov	r18,r7
 8027850:	8822d57a 	srli	r17,r17,21
 8027854:	8026ad00 	call	8026ad0 <_Balloc>
 8027858:	1027883a 	mov	r19,r2
 802785c:	00800434 	movhi	r2,16
 8027860:	10bfffc4 	addi	r2,r2,-1
 8027864:	808c703a 	and	r6,r16,r2
 8027868:	88000126 	beq	r17,zero,8027870 <__d2b+0x50>
 802786c:	31800434 	orhi	r6,r6,16
 8027870:	d9800015 	stw	r6,0(sp)
 8027874:	a0002426 	beq	r20,zero,8027908 <__d2b+0xe8>
 8027878:	d9000104 	addi	r4,sp,4
 802787c:	dd000115 	stw	r20,4(sp)
 8027880:	8026e540 	call	8026e54 <__lo0bits>
 8027884:	d8c00017 	ldw	r3,0(sp)
 8027888:	10002f1e 	bne	r2,zero,8027948 <__d2b+0x128>
 802788c:	d9000117 	ldw	r4,4(sp)
 8027890:	99000515 	stw	r4,20(r19)
 8027894:	1821003a 	cmpeq	r16,r3,zero
 8027898:	01000084 	movi	r4,2
 802789c:	2421c83a 	sub	r16,r4,r16
 80278a0:	98c00615 	stw	r3,24(r19)
 80278a4:	9c000415 	stw	r16,16(r19)
 80278a8:	88001f1e 	bne	r17,zero,8027928 <__d2b+0x108>
 80278ac:	10bef384 	addi	r2,r2,-1074
 80278b0:	90800015 	stw	r2,0(r18)
 80278b4:	00900034 	movhi	r2,16384
 80278b8:	10bfffc4 	addi	r2,r2,-1
 80278bc:	8085883a 	add	r2,r16,r2
 80278c0:	1085883a 	add	r2,r2,r2
 80278c4:	1085883a 	add	r2,r2,r2
 80278c8:	9885883a 	add	r2,r19,r2
 80278cc:	11000517 	ldw	r4,20(r2)
 80278d0:	8020917a 	slli	r16,r16,5
 80278d4:	8026dec0 	call	8026dec <__hi0bits>
 80278d8:	d8c00817 	ldw	r3,32(sp)
 80278dc:	8085c83a 	sub	r2,r16,r2
 80278e0:	18800015 	stw	r2,0(r3)
 80278e4:	9805883a 	mov	r2,r19
 80278e8:	dfc00717 	ldw	ra,28(sp)
 80278ec:	dd000617 	ldw	r20,24(sp)
 80278f0:	dcc00517 	ldw	r19,20(sp)
 80278f4:	dc800417 	ldw	r18,16(sp)
 80278f8:	dc400317 	ldw	r17,12(sp)
 80278fc:	dc000217 	ldw	r16,8(sp)
 8027900:	dec00804 	addi	sp,sp,32
 8027904:	f800283a 	ret
 8027908:	d809883a 	mov	r4,sp
 802790c:	8026e540 	call	8026e54 <__lo0bits>
 8027910:	d8c00017 	ldw	r3,0(sp)
 8027914:	04000044 	movi	r16,1
 8027918:	9c000415 	stw	r16,16(r19)
 802791c:	98c00515 	stw	r3,20(r19)
 8027920:	10800804 	addi	r2,r2,32
 8027924:	883fe126 	beq	r17,zero,80278ac <__alt_data_end+0xfffe84ac>
 8027928:	00c00d44 	movi	r3,53
 802792c:	8c7ef344 	addi	r17,r17,-1075
 8027930:	88a3883a 	add	r17,r17,r2
 8027934:	1885c83a 	sub	r2,r3,r2
 8027938:	d8c00817 	ldw	r3,32(sp)
 802793c:	94400015 	stw	r17,0(r18)
 8027940:	18800015 	stw	r2,0(r3)
 8027944:	003fe706 	br	80278e4 <__alt_data_end+0xfffe84e4>
 8027948:	01000804 	movi	r4,32
 802794c:	2089c83a 	sub	r4,r4,r2
 8027950:	1908983a 	sll	r4,r3,r4
 8027954:	d9400117 	ldw	r5,4(sp)
 8027958:	1886d83a 	srl	r3,r3,r2
 802795c:	2148b03a 	or	r4,r4,r5
 8027960:	99000515 	stw	r4,20(r19)
 8027964:	d8c00015 	stw	r3,0(sp)
 8027968:	003fca06 	br	8027894 <__alt_data_end+0xfffe8494>

0802796c <__ratio>:
 802796c:	defff904 	addi	sp,sp,-28
 8027970:	dc400315 	stw	r17,12(sp)
 8027974:	2823883a 	mov	r17,r5
 8027978:	d9400104 	addi	r5,sp,4
 802797c:	dfc00615 	stw	ra,24(sp)
 8027980:	dcc00515 	stw	r19,20(sp)
 8027984:	dc800415 	stw	r18,16(sp)
 8027988:	2027883a 	mov	r19,r4
 802798c:	dc000215 	stw	r16,8(sp)
 8027990:	80277140 	call	8027714 <__b2d>
 8027994:	d80b883a 	mov	r5,sp
 8027998:	8809883a 	mov	r4,r17
 802799c:	1025883a 	mov	r18,r2
 80279a0:	1821883a 	mov	r16,r3
 80279a4:	80277140 	call	8027714 <__b2d>
 80279a8:	8a000417 	ldw	r8,16(r17)
 80279ac:	99000417 	ldw	r4,16(r19)
 80279b0:	d9400117 	ldw	r5,4(sp)
 80279b4:	2209c83a 	sub	r4,r4,r8
 80279b8:	2010917a 	slli	r8,r4,5
 80279bc:	d9000017 	ldw	r4,0(sp)
 80279c0:	2909c83a 	sub	r4,r5,r4
 80279c4:	4109883a 	add	r4,r8,r4
 80279c8:	01000e0e 	bge	zero,r4,8027a04 <__ratio+0x98>
 80279cc:	2008953a 	slli	r4,r4,20
 80279d0:	2421883a 	add	r16,r4,r16
 80279d4:	100d883a 	mov	r6,r2
 80279d8:	180f883a 	mov	r7,r3
 80279dc:	9009883a 	mov	r4,r18
 80279e0:	800b883a 	mov	r5,r16
 80279e4:	802bd4c0 	call	802bd4c <__divdf3>
 80279e8:	dfc00617 	ldw	ra,24(sp)
 80279ec:	dcc00517 	ldw	r19,20(sp)
 80279f0:	dc800417 	ldw	r18,16(sp)
 80279f4:	dc400317 	ldw	r17,12(sp)
 80279f8:	dc000217 	ldw	r16,8(sp)
 80279fc:	dec00704 	addi	sp,sp,28
 8027a00:	f800283a 	ret
 8027a04:	2008953a 	slli	r4,r4,20
 8027a08:	1907c83a 	sub	r3,r3,r4
 8027a0c:	003ff106 	br	80279d4 <__alt_data_end+0xfffe85d4>

08027a10 <_mprec_log10>:
 8027a10:	defffe04 	addi	sp,sp,-8
 8027a14:	dc000015 	stw	r16,0(sp)
 8027a18:	dfc00115 	stw	ra,4(sp)
 8027a1c:	008005c4 	movi	r2,23
 8027a20:	2021883a 	mov	r16,r4
 8027a24:	11000d0e 	bge	r2,r4,8027a5c <_mprec_log10+0x4c>
 8027a28:	0005883a 	mov	r2,zero
 8027a2c:	00cffc34 	movhi	r3,16368
 8027a30:	843fffc4 	addi	r16,r16,-1
 8027a34:	000d883a 	mov	r6,zero
 8027a38:	01d00934 	movhi	r7,16420
 8027a3c:	1009883a 	mov	r4,r2
 8027a40:	180b883a 	mov	r5,r3
 8027a44:	802c9740 	call	802c974 <__muldf3>
 8027a48:	803ff91e 	bne	r16,zero,8027a30 <__alt_data_end+0xfffe8630>
 8027a4c:	dfc00117 	ldw	ra,4(sp)
 8027a50:	dc000017 	ldw	r16,0(sp)
 8027a54:	dec00204 	addi	sp,sp,8
 8027a58:	f800283a 	ret
 8027a5c:	202090fa 	slli	r16,r4,3
 8027a60:	008200f4 	movhi	r2,2051
 8027a64:	10877604 	addi	r2,r2,7640
 8027a68:	1421883a 	add	r16,r2,r16
 8027a6c:	80800017 	ldw	r2,0(r16)
 8027a70:	80c00117 	ldw	r3,4(r16)
 8027a74:	dfc00117 	ldw	ra,4(sp)
 8027a78:	dc000017 	ldw	r16,0(sp)
 8027a7c:	dec00204 	addi	sp,sp,8
 8027a80:	f800283a 	ret

08027a84 <__copybits>:
 8027a84:	297fffc4 	addi	r5,r5,-1
 8027a88:	280fd17a 	srai	r7,r5,5
 8027a8c:	30c00417 	ldw	r3,16(r6)
 8027a90:	30800504 	addi	r2,r6,20
 8027a94:	39c00044 	addi	r7,r7,1
 8027a98:	18c7883a 	add	r3,r3,r3
 8027a9c:	39cf883a 	add	r7,r7,r7
 8027aa0:	18c7883a 	add	r3,r3,r3
 8027aa4:	39cf883a 	add	r7,r7,r7
 8027aa8:	10c7883a 	add	r3,r2,r3
 8027aac:	21cf883a 	add	r7,r4,r7
 8027ab0:	10c00d2e 	bgeu	r2,r3,8027ae8 <__copybits+0x64>
 8027ab4:	200b883a 	mov	r5,r4
 8027ab8:	12000017 	ldw	r8,0(r2)
 8027abc:	29400104 	addi	r5,r5,4
 8027ac0:	10800104 	addi	r2,r2,4
 8027ac4:	2a3fff15 	stw	r8,-4(r5)
 8027ac8:	10fffb36 	bltu	r2,r3,8027ab8 <__alt_data_end+0xfffe86b8>
 8027acc:	1985c83a 	sub	r2,r3,r6
 8027ad0:	10bffac4 	addi	r2,r2,-21
 8027ad4:	1004d0ba 	srli	r2,r2,2
 8027ad8:	10800044 	addi	r2,r2,1
 8027adc:	1085883a 	add	r2,r2,r2
 8027ae0:	1085883a 	add	r2,r2,r2
 8027ae4:	2089883a 	add	r4,r4,r2
 8027ae8:	21c0032e 	bgeu	r4,r7,8027af8 <__copybits+0x74>
 8027aec:	20000015 	stw	zero,0(r4)
 8027af0:	21000104 	addi	r4,r4,4
 8027af4:	21fffd36 	bltu	r4,r7,8027aec <__alt_data_end+0xfffe86ec>
 8027af8:	f800283a 	ret

08027afc <__any_on>:
 8027afc:	20c00417 	ldw	r3,16(r4)
 8027b00:	2805d17a 	srai	r2,r5,5
 8027b04:	21000504 	addi	r4,r4,20
 8027b08:	18800d0e 	bge	r3,r2,8027b40 <__any_on+0x44>
 8027b0c:	18c7883a 	add	r3,r3,r3
 8027b10:	18c7883a 	add	r3,r3,r3
 8027b14:	20c7883a 	add	r3,r4,r3
 8027b18:	20c0192e 	bgeu	r4,r3,8027b80 <__any_on+0x84>
 8027b1c:	18bfff17 	ldw	r2,-4(r3)
 8027b20:	18ffff04 	addi	r3,r3,-4
 8027b24:	1000041e 	bne	r2,zero,8027b38 <__any_on+0x3c>
 8027b28:	20c0142e 	bgeu	r4,r3,8027b7c <__any_on+0x80>
 8027b2c:	18ffff04 	addi	r3,r3,-4
 8027b30:	19400017 	ldw	r5,0(r3)
 8027b34:	283ffc26 	beq	r5,zero,8027b28 <__alt_data_end+0xfffe8728>
 8027b38:	00800044 	movi	r2,1
 8027b3c:	f800283a 	ret
 8027b40:	10c00a0e 	bge	r2,r3,8027b6c <__any_on+0x70>
 8027b44:	1085883a 	add	r2,r2,r2
 8027b48:	1085883a 	add	r2,r2,r2
 8027b4c:	294007cc 	andi	r5,r5,31
 8027b50:	2087883a 	add	r3,r4,r2
 8027b54:	283ff026 	beq	r5,zero,8027b18 <__alt_data_end+0xfffe8718>
 8027b58:	19800017 	ldw	r6,0(r3)
 8027b5c:	3144d83a 	srl	r2,r6,r5
 8027b60:	114a983a 	sll	r5,r2,r5
 8027b64:	317ff41e 	bne	r6,r5,8027b38 <__alt_data_end+0xfffe8738>
 8027b68:	003feb06 	br	8027b18 <__alt_data_end+0xfffe8718>
 8027b6c:	1085883a 	add	r2,r2,r2
 8027b70:	1085883a 	add	r2,r2,r2
 8027b74:	2087883a 	add	r3,r4,r2
 8027b78:	003fe706 	br	8027b18 <__alt_data_end+0xfffe8718>
 8027b7c:	f800283a 	ret
 8027b80:	0005883a 	mov	r2,zero
 8027b84:	f800283a 	ret

08027b88 <_realloc_r>:
 8027b88:	defff604 	addi	sp,sp,-40
 8027b8c:	dc800215 	stw	r18,8(sp)
 8027b90:	dfc00915 	stw	ra,36(sp)
 8027b94:	df000815 	stw	fp,32(sp)
 8027b98:	ddc00715 	stw	r23,28(sp)
 8027b9c:	dd800615 	stw	r22,24(sp)
 8027ba0:	dd400515 	stw	r21,20(sp)
 8027ba4:	dd000415 	stw	r20,16(sp)
 8027ba8:	dcc00315 	stw	r19,12(sp)
 8027bac:	dc400115 	stw	r17,4(sp)
 8027bb0:	dc000015 	stw	r16,0(sp)
 8027bb4:	3025883a 	mov	r18,r6
 8027bb8:	2800b726 	beq	r5,zero,8027e98 <_realloc_r+0x310>
 8027bbc:	282b883a 	mov	r21,r5
 8027bc0:	2029883a 	mov	r20,r4
 8027bc4:	802e40c0 	call	802e40c <__malloc_lock>
 8027bc8:	a8bfff17 	ldw	r2,-4(r21)
 8027bcc:	043fff04 	movi	r16,-4
 8027bd0:	90c002c4 	addi	r3,r18,11
 8027bd4:	01000584 	movi	r4,22
 8027bd8:	acfffe04 	addi	r19,r21,-8
 8027bdc:	1420703a 	and	r16,r2,r16
 8027be0:	20c0332e 	bgeu	r4,r3,8027cb0 <_realloc_r+0x128>
 8027be4:	047ffe04 	movi	r17,-8
 8027be8:	1c62703a 	and	r17,r3,r17
 8027bec:	8807883a 	mov	r3,r17
 8027bf0:	88005816 	blt	r17,zero,8027d54 <_realloc_r+0x1cc>
 8027bf4:	8c805736 	bltu	r17,r18,8027d54 <_realloc_r+0x1cc>
 8027bf8:	80c0300e 	bge	r16,r3,8027cbc <_realloc_r+0x134>
 8027bfc:	070200f4 	movhi	fp,2051
 8027c00:	e7094304 	addi	fp,fp,9484
 8027c04:	e1c00217 	ldw	r7,8(fp)
 8027c08:	9c09883a 	add	r4,r19,r16
 8027c0c:	22000117 	ldw	r8,4(r4)
 8027c10:	21c06326 	beq	r4,r7,8027da0 <_realloc_r+0x218>
 8027c14:	017fff84 	movi	r5,-2
 8027c18:	414a703a 	and	r5,r8,r5
 8027c1c:	214b883a 	add	r5,r4,r5
 8027c20:	29800117 	ldw	r6,4(r5)
 8027c24:	3180004c 	andi	r6,r6,1
 8027c28:	30003f26 	beq	r6,zero,8027d28 <_realloc_r+0x1a0>
 8027c2c:	1080004c 	andi	r2,r2,1
 8027c30:	10008326 	beq	r2,zero,8027e40 <_realloc_r+0x2b8>
 8027c34:	900b883a 	mov	r5,r18
 8027c38:	a009883a 	mov	r4,r20
 8027c3c:	8025f5c0 	call	8025f5c <_malloc_r>
 8027c40:	1025883a 	mov	r18,r2
 8027c44:	10011e26 	beq	r2,zero,80280c0 <_realloc_r+0x538>
 8027c48:	a93fff17 	ldw	r4,-4(r21)
 8027c4c:	10fffe04 	addi	r3,r2,-8
 8027c50:	00bfff84 	movi	r2,-2
 8027c54:	2084703a 	and	r2,r4,r2
 8027c58:	9885883a 	add	r2,r19,r2
 8027c5c:	1880ee26 	beq	r3,r2,8028018 <_realloc_r+0x490>
 8027c60:	81bfff04 	addi	r6,r16,-4
 8027c64:	00800904 	movi	r2,36
 8027c68:	1180b836 	bltu	r2,r6,8027f4c <_realloc_r+0x3c4>
 8027c6c:	00c004c4 	movi	r3,19
 8027c70:	19809636 	bltu	r3,r6,8027ecc <_realloc_r+0x344>
 8027c74:	9005883a 	mov	r2,r18
 8027c78:	a807883a 	mov	r3,r21
 8027c7c:	19000017 	ldw	r4,0(r3)
 8027c80:	11000015 	stw	r4,0(r2)
 8027c84:	19000117 	ldw	r4,4(r3)
 8027c88:	11000115 	stw	r4,4(r2)
 8027c8c:	18c00217 	ldw	r3,8(r3)
 8027c90:	10c00215 	stw	r3,8(r2)
 8027c94:	a80b883a 	mov	r5,r21
 8027c98:	a009883a 	mov	r4,r20
 8027c9c:	802a0f00 	call	802a0f0 <_free_r>
 8027ca0:	a009883a 	mov	r4,r20
 8027ca4:	802e4300 	call	802e430 <__malloc_unlock>
 8027ca8:	9005883a 	mov	r2,r18
 8027cac:	00001206 	br	8027cf8 <_realloc_r+0x170>
 8027cb0:	00c00404 	movi	r3,16
 8027cb4:	1823883a 	mov	r17,r3
 8027cb8:	003fce06 	br	8027bf4 <__alt_data_end+0xfffe87f4>
 8027cbc:	a825883a 	mov	r18,r21
 8027cc0:	8445c83a 	sub	r2,r16,r17
 8027cc4:	00c003c4 	movi	r3,15
 8027cc8:	18802636 	bltu	r3,r2,8027d64 <_realloc_r+0x1dc>
 8027ccc:	99800117 	ldw	r6,4(r19)
 8027cd0:	9c07883a 	add	r3,r19,r16
 8027cd4:	3180004c 	andi	r6,r6,1
 8027cd8:	3420b03a 	or	r16,r6,r16
 8027cdc:	9c000115 	stw	r16,4(r19)
 8027ce0:	18800117 	ldw	r2,4(r3)
 8027ce4:	10800054 	ori	r2,r2,1
 8027ce8:	18800115 	stw	r2,4(r3)
 8027cec:	a009883a 	mov	r4,r20
 8027cf0:	802e4300 	call	802e430 <__malloc_unlock>
 8027cf4:	9005883a 	mov	r2,r18
 8027cf8:	dfc00917 	ldw	ra,36(sp)
 8027cfc:	df000817 	ldw	fp,32(sp)
 8027d00:	ddc00717 	ldw	r23,28(sp)
 8027d04:	dd800617 	ldw	r22,24(sp)
 8027d08:	dd400517 	ldw	r21,20(sp)
 8027d0c:	dd000417 	ldw	r20,16(sp)
 8027d10:	dcc00317 	ldw	r19,12(sp)
 8027d14:	dc800217 	ldw	r18,8(sp)
 8027d18:	dc400117 	ldw	r17,4(sp)
 8027d1c:	dc000017 	ldw	r16,0(sp)
 8027d20:	dec00a04 	addi	sp,sp,40
 8027d24:	f800283a 	ret
 8027d28:	017fff04 	movi	r5,-4
 8027d2c:	414a703a 	and	r5,r8,r5
 8027d30:	814d883a 	add	r6,r16,r5
 8027d34:	30c01f16 	blt	r6,r3,8027db4 <_realloc_r+0x22c>
 8027d38:	20800317 	ldw	r2,12(r4)
 8027d3c:	20c00217 	ldw	r3,8(r4)
 8027d40:	a825883a 	mov	r18,r21
 8027d44:	3021883a 	mov	r16,r6
 8027d48:	18800315 	stw	r2,12(r3)
 8027d4c:	10c00215 	stw	r3,8(r2)
 8027d50:	003fdb06 	br	8027cc0 <__alt_data_end+0xfffe88c0>
 8027d54:	00800304 	movi	r2,12
 8027d58:	a0800015 	stw	r2,0(r20)
 8027d5c:	0005883a 	mov	r2,zero
 8027d60:	003fe506 	br	8027cf8 <__alt_data_end+0xfffe88f8>
 8027d64:	98c00117 	ldw	r3,4(r19)
 8027d68:	9c4b883a 	add	r5,r19,r17
 8027d6c:	11000054 	ori	r4,r2,1
 8027d70:	18c0004c 	andi	r3,r3,1
 8027d74:	1c62b03a 	or	r17,r3,r17
 8027d78:	9c400115 	stw	r17,4(r19)
 8027d7c:	29000115 	stw	r4,4(r5)
 8027d80:	2885883a 	add	r2,r5,r2
 8027d84:	10c00117 	ldw	r3,4(r2)
 8027d88:	29400204 	addi	r5,r5,8
 8027d8c:	a009883a 	mov	r4,r20
 8027d90:	18c00054 	ori	r3,r3,1
 8027d94:	10c00115 	stw	r3,4(r2)
 8027d98:	802a0f00 	call	802a0f0 <_free_r>
 8027d9c:	003fd306 	br	8027cec <__alt_data_end+0xfffe88ec>
 8027da0:	017fff04 	movi	r5,-4
 8027da4:	414a703a 	and	r5,r8,r5
 8027da8:	89800404 	addi	r6,r17,16
 8027dac:	8151883a 	add	r8,r16,r5
 8027db0:	4180590e 	bge	r8,r6,8027f18 <_realloc_r+0x390>
 8027db4:	1080004c 	andi	r2,r2,1
 8027db8:	103f9e1e 	bne	r2,zero,8027c34 <__alt_data_end+0xfffe8834>
 8027dbc:	adbffe17 	ldw	r22,-8(r21)
 8027dc0:	00bfff04 	movi	r2,-4
 8027dc4:	9dadc83a 	sub	r22,r19,r22
 8027dc8:	b1800117 	ldw	r6,4(r22)
 8027dcc:	3084703a 	and	r2,r6,r2
 8027dd0:	20002026 	beq	r4,zero,8027e54 <_realloc_r+0x2cc>
 8027dd4:	80af883a 	add	r23,r16,r2
 8027dd8:	b96f883a 	add	r23,r23,r5
 8027ddc:	21c05f26 	beq	r4,r7,8027f5c <_realloc_r+0x3d4>
 8027de0:	b8c01c16 	blt	r23,r3,8027e54 <_realloc_r+0x2cc>
 8027de4:	20800317 	ldw	r2,12(r4)
 8027de8:	20c00217 	ldw	r3,8(r4)
 8027dec:	81bfff04 	addi	r6,r16,-4
 8027df0:	01000904 	movi	r4,36
 8027df4:	18800315 	stw	r2,12(r3)
 8027df8:	10c00215 	stw	r3,8(r2)
 8027dfc:	b0c00217 	ldw	r3,8(r22)
 8027e00:	b0800317 	ldw	r2,12(r22)
 8027e04:	b4800204 	addi	r18,r22,8
 8027e08:	18800315 	stw	r2,12(r3)
 8027e0c:	10c00215 	stw	r3,8(r2)
 8027e10:	21801b36 	bltu	r4,r6,8027e80 <_realloc_r+0x2f8>
 8027e14:	008004c4 	movi	r2,19
 8027e18:	1180352e 	bgeu	r2,r6,8027ef0 <_realloc_r+0x368>
 8027e1c:	a8800017 	ldw	r2,0(r21)
 8027e20:	b0800215 	stw	r2,8(r22)
 8027e24:	a8800117 	ldw	r2,4(r21)
 8027e28:	b0800315 	stw	r2,12(r22)
 8027e2c:	008006c4 	movi	r2,27
 8027e30:	11807f36 	bltu	r2,r6,8028030 <_realloc_r+0x4a8>
 8027e34:	b0800404 	addi	r2,r22,16
 8027e38:	ad400204 	addi	r21,r21,8
 8027e3c:	00002d06 	br	8027ef4 <_realloc_r+0x36c>
 8027e40:	adbffe17 	ldw	r22,-8(r21)
 8027e44:	00bfff04 	movi	r2,-4
 8027e48:	9dadc83a 	sub	r22,r19,r22
 8027e4c:	b1000117 	ldw	r4,4(r22)
 8027e50:	2084703a 	and	r2,r4,r2
 8027e54:	b03f7726 	beq	r22,zero,8027c34 <__alt_data_end+0xfffe8834>
 8027e58:	80af883a 	add	r23,r16,r2
 8027e5c:	b8ff7516 	blt	r23,r3,8027c34 <__alt_data_end+0xfffe8834>
 8027e60:	b0800317 	ldw	r2,12(r22)
 8027e64:	b0c00217 	ldw	r3,8(r22)
 8027e68:	81bfff04 	addi	r6,r16,-4
 8027e6c:	01000904 	movi	r4,36
 8027e70:	18800315 	stw	r2,12(r3)
 8027e74:	10c00215 	stw	r3,8(r2)
 8027e78:	b4800204 	addi	r18,r22,8
 8027e7c:	21bfe52e 	bgeu	r4,r6,8027e14 <__alt_data_end+0xfffe8a14>
 8027e80:	a80b883a 	mov	r5,r21
 8027e84:	9009883a 	mov	r4,r18
 8027e88:	802684c0 	call	802684c <memmove>
 8027e8c:	b821883a 	mov	r16,r23
 8027e90:	b027883a 	mov	r19,r22
 8027e94:	003f8a06 	br	8027cc0 <__alt_data_end+0xfffe88c0>
 8027e98:	300b883a 	mov	r5,r6
 8027e9c:	dfc00917 	ldw	ra,36(sp)
 8027ea0:	df000817 	ldw	fp,32(sp)
 8027ea4:	ddc00717 	ldw	r23,28(sp)
 8027ea8:	dd800617 	ldw	r22,24(sp)
 8027eac:	dd400517 	ldw	r21,20(sp)
 8027eb0:	dd000417 	ldw	r20,16(sp)
 8027eb4:	dcc00317 	ldw	r19,12(sp)
 8027eb8:	dc800217 	ldw	r18,8(sp)
 8027ebc:	dc400117 	ldw	r17,4(sp)
 8027ec0:	dc000017 	ldw	r16,0(sp)
 8027ec4:	dec00a04 	addi	sp,sp,40
 8027ec8:	8025f5c1 	jmpi	8025f5c <_malloc_r>
 8027ecc:	a8c00017 	ldw	r3,0(r21)
 8027ed0:	90c00015 	stw	r3,0(r18)
 8027ed4:	a8c00117 	ldw	r3,4(r21)
 8027ed8:	90c00115 	stw	r3,4(r18)
 8027edc:	00c006c4 	movi	r3,27
 8027ee0:	19804536 	bltu	r3,r6,8027ff8 <_realloc_r+0x470>
 8027ee4:	90800204 	addi	r2,r18,8
 8027ee8:	a8c00204 	addi	r3,r21,8
 8027eec:	003f6306 	br	8027c7c <__alt_data_end+0xfffe887c>
 8027ef0:	9005883a 	mov	r2,r18
 8027ef4:	a8c00017 	ldw	r3,0(r21)
 8027ef8:	b821883a 	mov	r16,r23
 8027efc:	b027883a 	mov	r19,r22
 8027f00:	10c00015 	stw	r3,0(r2)
 8027f04:	a8c00117 	ldw	r3,4(r21)
 8027f08:	10c00115 	stw	r3,4(r2)
 8027f0c:	a8c00217 	ldw	r3,8(r21)
 8027f10:	10c00215 	stw	r3,8(r2)
 8027f14:	003f6a06 	br	8027cc0 <__alt_data_end+0xfffe88c0>
 8027f18:	9c67883a 	add	r19,r19,r17
 8027f1c:	4445c83a 	sub	r2,r8,r17
 8027f20:	e4c00215 	stw	r19,8(fp)
 8027f24:	10800054 	ori	r2,r2,1
 8027f28:	98800115 	stw	r2,4(r19)
 8027f2c:	a8bfff17 	ldw	r2,-4(r21)
 8027f30:	a009883a 	mov	r4,r20
 8027f34:	1080004c 	andi	r2,r2,1
 8027f38:	1462b03a 	or	r17,r2,r17
 8027f3c:	ac7fff15 	stw	r17,-4(r21)
 8027f40:	802e4300 	call	802e430 <__malloc_unlock>
 8027f44:	a805883a 	mov	r2,r21
 8027f48:	003f6b06 	br	8027cf8 <__alt_data_end+0xfffe88f8>
 8027f4c:	a80b883a 	mov	r5,r21
 8027f50:	9009883a 	mov	r4,r18
 8027f54:	802684c0 	call	802684c <memmove>
 8027f58:	003f4e06 	br	8027c94 <__alt_data_end+0xfffe8894>
 8027f5c:	89000404 	addi	r4,r17,16
 8027f60:	b93fbc16 	blt	r23,r4,8027e54 <__alt_data_end+0xfffe8a54>
 8027f64:	b0800317 	ldw	r2,12(r22)
 8027f68:	b0c00217 	ldw	r3,8(r22)
 8027f6c:	81bfff04 	addi	r6,r16,-4
 8027f70:	01000904 	movi	r4,36
 8027f74:	18800315 	stw	r2,12(r3)
 8027f78:	10c00215 	stw	r3,8(r2)
 8027f7c:	b4800204 	addi	r18,r22,8
 8027f80:	21804336 	bltu	r4,r6,8028090 <_realloc_r+0x508>
 8027f84:	008004c4 	movi	r2,19
 8027f88:	11803f2e 	bgeu	r2,r6,8028088 <_realloc_r+0x500>
 8027f8c:	a8800017 	ldw	r2,0(r21)
 8027f90:	b0800215 	stw	r2,8(r22)
 8027f94:	a8800117 	ldw	r2,4(r21)
 8027f98:	b0800315 	stw	r2,12(r22)
 8027f9c:	008006c4 	movi	r2,27
 8027fa0:	11803f36 	bltu	r2,r6,80280a0 <_realloc_r+0x518>
 8027fa4:	b0800404 	addi	r2,r22,16
 8027fa8:	ad400204 	addi	r21,r21,8
 8027fac:	a8c00017 	ldw	r3,0(r21)
 8027fb0:	10c00015 	stw	r3,0(r2)
 8027fb4:	a8c00117 	ldw	r3,4(r21)
 8027fb8:	10c00115 	stw	r3,4(r2)
 8027fbc:	a8c00217 	ldw	r3,8(r21)
 8027fc0:	10c00215 	stw	r3,8(r2)
 8027fc4:	b447883a 	add	r3,r22,r17
 8027fc8:	bc45c83a 	sub	r2,r23,r17
 8027fcc:	e0c00215 	stw	r3,8(fp)
 8027fd0:	10800054 	ori	r2,r2,1
 8027fd4:	18800115 	stw	r2,4(r3)
 8027fd8:	b0800117 	ldw	r2,4(r22)
 8027fdc:	a009883a 	mov	r4,r20
 8027fe0:	1080004c 	andi	r2,r2,1
 8027fe4:	1462b03a 	or	r17,r2,r17
 8027fe8:	b4400115 	stw	r17,4(r22)
 8027fec:	802e4300 	call	802e430 <__malloc_unlock>
 8027ff0:	9005883a 	mov	r2,r18
 8027ff4:	003f4006 	br	8027cf8 <__alt_data_end+0xfffe88f8>
 8027ff8:	a8c00217 	ldw	r3,8(r21)
 8027ffc:	90c00215 	stw	r3,8(r18)
 8028000:	a8c00317 	ldw	r3,12(r21)
 8028004:	90c00315 	stw	r3,12(r18)
 8028008:	30801126 	beq	r6,r2,8028050 <_realloc_r+0x4c8>
 802800c:	90800404 	addi	r2,r18,16
 8028010:	a8c00404 	addi	r3,r21,16
 8028014:	003f1906 	br	8027c7c <__alt_data_end+0xfffe887c>
 8028018:	90ffff17 	ldw	r3,-4(r18)
 802801c:	00bfff04 	movi	r2,-4
 8028020:	a825883a 	mov	r18,r21
 8028024:	1884703a 	and	r2,r3,r2
 8028028:	80a1883a 	add	r16,r16,r2
 802802c:	003f2406 	br	8027cc0 <__alt_data_end+0xfffe88c0>
 8028030:	a8800217 	ldw	r2,8(r21)
 8028034:	b0800415 	stw	r2,16(r22)
 8028038:	a8800317 	ldw	r2,12(r21)
 802803c:	b0800515 	stw	r2,20(r22)
 8028040:	31000a26 	beq	r6,r4,802806c <_realloc_r+0x4e4>
 8028044:	b0800604 	addi	r2,r22,24
 8028048:	ad400404 	addi	r21,r21,16
 802804c:	003fa906 	br	8027ef4 <__alt_data_end+0xfffe8af4>
 8028050:	a9000417 	ldw	r4,16(r21)
 8028054:	90800604 	addi	r2,r18,24
 8028058:	a8c00604 	addi	r3,r21,24
 802805c:	91000415 	stw	r4,16(r18)
 8028060:	a9000517 	ldw	r4,20(r21)
 8028064:	91000515 	stw	r4,20(r18)
 8028068:	003f0406 	br	8027c7c <__alt_data_end+0xfffe887c>
 802806c:	a8c00417 	ldw	r3,16(r21)
 8028070:	ad400604 	addi	r21,r21,24
 8028074:	b0800804 	addi	r2,r22,32
 8028078:	b0c00615 	stw	r3,24(r22)
 802807c:	a8ffff17 	ldw	r3,-4(r21)
 8028080:	b0c00715 	stw	r3,28(r22)
 8028084:	003f9b06 	br	8027ef4 <__alt_data_end+0xfffe8af4>
 8028088:	9005883a 	mov	r2,r18
 802808c:	003fc706 	br	8027fac <__alt_data_end+0xfffe8bac>
 8028090:	a80b883a 	mov	r5,r21
 8028094:	9009883a 	mov	r4,r18
 8028098:	802684c0 	call	802684c <memmove>
 802809c:	003fc906 	br	8027fc4 <__alt_data_end+0xfffe8bc4>
 80280a0:	a8800217 	ldw	r2,8(r21)
 80280a4:	b0800415 	stw	r2,16(r22)
 80280a8:	a8800317 	ldw	r2,12(r21)
 80280ac:	b0800515 	stw	r2,20(r22)
 80280b0:	31000726 	beq	r6,r4,80280d0 <_realloc_r+0x548>
 80280b4:	b0800604 	addi	r2,r22,24
 80280b8:	ad400404 	addi	r21,r21,16
 80280bc:	003fbb06 	br	8027fac <__alt_data_end+0xfffe8bac>
 80280c0:	a009883a 	mov	r4,r20
 80280c4:	802e4300 	call	802e430 <__malloc_unlock>
 80280c8:	0005883a 	mov	r2,zero
 80280cc:	003f0a06 	br	8027cf8 <__alt_data_end+0xfffe88f8>
 80280d0:	a8c00417 	ldw	r3,16(r21)
 80280d4:	ad400604 	addi	r21,r21,24
 80280d8:	b0800804 	addi	r2,r22,32
 80280dc:	b0c00615 	stw	r3,24(r22)
 80280e0:	a8ffff17 	ldw	r3,-4(r21)
 80280e4:	b0c00715 	stw	r3,28(r22)
 80280e8:	003fb006 	br	8027fac <__alt_data_end+0xfffe8bac>

080280ec <__fpclassifyd>:
 80280ec:	00a00034 	movhi	r2,32768
 80280f0:	10bfffc4 	addi	r2,r2,-1
 80280f4:	2884703a 	and	r2,r5,r2
 80280f8:	10000726 	beq	r2,zero,8028118 <__fpclassifyd+0x2c>
 80280fc:	00fffc34 	movhi	r3,65520
 8028100:	019ff834 	movhi	r6,32736
 8028104:	28c7883a 	add	r3,r5,r3
 8028108:	31bfffc4 	addi	r6,r6,-1
 802810c:	30c00536 	bltu	r6,r3,8028124 <__fpclassifyd+0x38>
 8028110:	00800104 	movi	r2,4
 8028114:	f800283a 	ret
 8028118:	2000021e 	bne	r4,zero,8028124 <__fpclassifyd+0x38>
 802811c:	00800084 	movi	r2,2
 8028120:	f800283a 	ret
 8028124:	00dffc34 	movhi	r3,32752
 8028128:	019ff834 	movhi	r6,32736
 802812c:	28cb883a 	add	r5,r5,r3
 8028130:	31bfffc4 	addi	r6,r6,-1
 8028134:	317ff62e 	bgeu	r6,r5,8028110 <__alt_data_end+0xfffe8d10>
 8028138:	01400434 	movhi	r5,16
 802813c:	297fffc4 	addi	r5,r5,-1
 8028140:	28800236 	bltu	r5,r2,802814c <__fpclassifyd+0x60>
 8028144:	008000c4 	movi	r2,3
 8028148:	f800283a 	ret
 802814c:	10c00226 	beq	r2,r3,8028158 <__fpclassifyd+0x6c>
 8028150:	0005883a 	mov	r2,zero
 8028154:	f800283a 	ret
 8028158:	2005003a 	cmpeq	r2,r4,zero
 802815c:	f800283a 	ret

08028160 <_sbrk_r>:
 8028160:	defffd04 	addi	sp,sp,-12
 8028164:	dc000015 	stw	r16,0(sp)
 8028168:	040200f4 	movhi	r16,2051
 802816c:	dc400115 	stw	r17,4(sp)
 8028170:	8415e404 	addi	r16,r16,22416
 8028174:	2023883a 	mov	r17,r4
 8028178:	2809883a 	mov	r4,r5
 802817c:	dfc00215 	stw	ra,8(sp)
 8028180:	80000015 	stw	zero,0(r16)
 8028184:	802e6180 	call	802e618 <sbrk>
 8028188:	00ffffc4 	movi	r3,-1
 802818c:	10c00526 	beq	r2,r3,80281a4 <_sbrk_r+0x44>
 8028190:	dfc00217 	ldw	ra,8(sp)
 8028194:	dc400117 	ldw	r17,4(sp)
 8028198:	dc000017 	ldw	r16,0(sp)
 802819c:	dec00304 	addi	sp,sp,12
 80281a0:	f800283a 	ret
 80281a4:	80c00017 	ldw	r3,0(r16)
 80281a8:	183ff926 	beq	r3,zero,8028190 <__alt_data_end+0xfffe8d90>
 80281ac:	88c00015 	stw	r3,0(r17)
 80281b0:	003ff706 	br	8028190 <__alt_data_end+0xfffe8d90>

080281b4 <__sread>:
 80281b4:	defffe04 	addi	sp,sp,-8
 80281b8:	dc000015 	stw	r16,0(sp)
 80281bc:	2821883a 	mov	r16,r5
 80281c0:	2940038f 	ldh	r5,14(r5)
 80281c4:	dfc00115 	stw	ra,4(sp)
 80281c8:	802a61c0 	call	802a61c <_read_r>
 80281cc:	10000716 	blt	r2,zero,80281ec <__sread+0x38>
 80281d0:	80c01417 	ldw	r3,80(r16)
 80281d4:	1887883a 	add	r3,r3,r2
 80281d8:	80c01415 	stw	r3,80(r16)
 80281dc:	dfc00117 	ldw	ra,4(sp)
 80281e0:	dc000017 	ldw	r16,0(sp)
 80281e4:	dec00204 	addi	sp,sp,8
 80281e8:	f800283a 	ret
 80281ec:	80c0030b 	ldhu	r3,12(r16)
 80281f0:	18fbffcc 	andi	r3,r3,61439
 80281f4:	80c0030d 	sth	r3,12(r16)
 80281f8:	dfc00117 	ldw	ra,4(sp)
 80281fc:	dc000017 	ldw	r16,0(sp)
 8028200:	dec00204 	addi	sp,sp,8
 8028204:	f800283a 	ret

08028208 <__seofread>:
 8028208:	0005883a 	mov	r2,zero
 802820c:	f800283a 	ret

08028210 <__swrite>:
 8028210:	2880030b 	ldhu	r2,12(r5)
 8028214:	defffb04 	addi	sp,sp,-20
 8028218:	dcc00315 	stw	r19,12(sp)
 802821c:	dc800215 	stw	r18,8(sp)
 8028220:	dc400115 	stw	r17,4(sp)
 8028224:	dc000015 	stw	r16,0(sp)
 8028228:	dfc00415 	stw	ra,16(sp)
 802822c:	10c0400c 	andi	r3,r2,256
 8028230:	2821883a 	mov	r16,r5
 8028234:	2023883a 	mov	r17,r4
 8028238:	3025883a 	mov	r18,r6
 802823c:	3827883a 	mov	r19,r7
 8028240:	18000526 	beq	r3,zero,8028258 <__swrite+0x48>
 8028244:	2940038f 	ldh	r5,14(r5)
 8028248:	01c00084 	movi	r7,2
 802824c:	000d883a 	mov	r6,zero
 8028250:	802a4000 	call	802a400 <_lseek_r>
 8028254:	8080030b 	ldhu	r2,12(r16)
 8028258:	8140038f 	ldh	r5,14(r16)
 802825c:	10bbffcc 	andi	r2,r2,61439
 8028260:	980f883a 	mov	r7,r19
 8028264:	900d883a 	mov	r6,r18
 8028268:	8809883a 	mov	r4,r17
 802826c:	8080030d 	sth	r2,12(r16)
 8028270:	dfc00417 	ldw	ra,16(sp)
 8028274:	dcc00317 	ldw	r19,12(sp)
 8028278:	dc800217 	ldw	r18,8(sp)
 802827c:	dc400117 	ldw	r17,4(sp)
 8028280:	dc000017 	ldw	r16,0(sp)
 8028284:	dec00504 	addi	sp,sp,20
 8028288:	802993c1 	jmpi	802993c <_write_r>

0802828c <__sseek>:
 802828c:	defffe04 	addi	sp,sp,-8
 8028290:	dc000015 	stw	r16,0(sp)
 8028294:	2821883a 	mov	r16,r5
 8028298:	2940038f 	ldh	r5,14(r5)
 802829c:	dfc00115 	stw	ra,4(sp)
 80282a0:	802a4000 	call	802a400 <_lseek_r>
 80282a4:	00ffffc4 	movi	r3,-1
 80282a8:	10c00826 	beq	r2,r3,80282cc <__sseek+0x40>
 80282ac:	80c0030b 	ldhu	r3,12(r16)
 80282b0:	80801415 	stw	r2,80(r16)
 80282b4:	18c40014 	ori	r3,r3,4096
 80282b8:	80c0030d 	sth	r3,12(r16)
 80282bc:	dfc00117 	ldw	ra,4(sp)
 80282c0:	dc000017 	ldw	r16,0(sp)
 80282c4:	dec00204 	addi	sp,sp,8
 80282c8:	f800283a 	ret
 80282cc:	80c0030b 	ldhu	r3,12(r16)
 80282d0:	18fbffcc 	andi	r3,r3,61439
 80282d4:	80c0030d 	sth	r3,12(r16)
 80282d8:	dfc00117 	ldw	ra,4(sp)
 80282dc:	dc000017 	ldw	r16,0(sp)
 80282e0:	dec00204 	addi	sp,sp,8
 80282e4:	f800283a 	ret

080282e8 <__sclose>:
 80282e8:	2940038f 	ldh	r5,14(r5)
 80282ec:	8029af01 	jmpi	8029af0 <_close_r>

080282f0 <strcmp>:
 80282f0:	2144b03a 	or	r2,r4,r5
 80282f4:	108000cc 	andi	r2,r2,3
 80282f8:	1000171e 	bne	r2,zero,8028358 <strcmp+0x68>
 80282fc:	20800017 	ldw	r2,0(r4)
 8028300:	28c00017 	ldw	r3,0(r5)
 8028304:	10c0141e 	bne	r2,r3,8028358 <strcmp+0x68>
 8028308:	027fbff4 	movhi	r9,65279
 802830c:	4a7fbfc4 	addi	r9,r9,-257
 8028310:	0086303a 	nor	r3,zero,r2
 8028314:	02202074 	movhi	r8,32897
 8028318:	1245883a 	add	r2,r2,r9
 802831c:	42202004 	addi	r8,r8,-32640
 8028320:	10c4703a 	and	r2,r2,r3
 8028324:	1204703a 	and	r2,r2,r8
 8028328:	10000226 	beq	r2,zero,8028334 <strcmp+0x44>
 802832c:	00002306 	br	80283bc <strcmp+0xcc>
 8028330:	1000221e 	bne	r2,zero,80283bc <strcmp+0xcc>
 8028334:	21000104 	addi	r4,r4,4
 8028338:	20c00017 	ldw	r3,0(r4)
 802833c:	29400104 	addi	r5,r5,4
 8028340:	29800017 	ldw	r6,0(r5)
 8028344:	1a4f883a 	add	r7,r3,r9
 8028348:	00c4303a 	nor	r2,zero,r3
 802834c:	3884703a 	and	r2,r7,r2
 8028350:	1204703a 	and	r2,r2,r8
 8028354:	19bff626 	beq	r3,r6,8028330 <__alt_data_end+0xfffe8f30>
 8028358:	20800003 	ldbu	r2,0(r4)
 802835c:	10c03fcc 	andi	r3,r2,255
 8028360:	18c0201c 	xori	r3,r3,128
 8028364:	18ffe004 	addi	r3,r3,-128
 8028368:	18000c26 	beq	r3,zero,802839c <strcmp+0xac>
 802836c:	29800007 	ldb	r6,0(r5)
 8028370:	19800326 	beq	r3,r6,8028380 <strcmp+0x90>
 8028374:	00001306 	br	80283c4 <strcmp+0xd4>
 8028378:	29800007 	ldb	r6,0(r5)
 802837c:	11800b1e 	bne	r2,r6,80283ac <strcmp+0xbc>
 8028380:	21000044 	addi	r4,r4,1
 8028384:	20c00003 	ldbu	r3,0(r4)
 8028388:	29400044 	addi	r5,r5,1
 802838c:	18803fcc 	andi	r2,r3,255
 8028390:	1080201c 	xori	r2,r2,128
 8028394:	10bfe004 	addi	r2,r2,-128
 8028398:	103ff71e 	bne	r2,zero,8028378 <__alt_data_end+0xfffe8f78>
 802839c:	0007883a 	mov	r3,zero
 80283a0:	28800003 	ldbu	r2,0(r5)
 80283a4:	1885c83a 	sub	r2,r3,r2
 80283a8:	f800283a 	ret
 80283ac:	28800003 	ldbu	r2,0(r5)
 80283b0:	18c03fcc 	andi	r3,r3,255
 80283b4:	1885c83a 	sub	r2,r3,r2
 80283b8:	f800283a 	ret
 80283bc:	0005883a 	mov	r2,zero
 80283c0:	f800283a 	ret
 80283c4:	10c03fcc 	andi	r3,r2,255
 80283c8:	003ff506 	br	80283a0 <__alt_data_end+0xfffe8fa0>

080283cc <__ssprint_r>:
 80283cc:	30800217 	ldw	r2,8(r6)
 80283d0:	defff604 	addi	sp,sp,-40
 80283d4:	dc800215 	stw	r18,8(sp)
 80283d8:	dfc00915 	stw	ra,36(sp)
 80283dc:	df000815 	stw	fp,32(sp)
 80283e0:	ddc00715 	stw	r23,28(sp)
 80283e4:	dd800615 	stw	r22,24(sp)
 80283e8:	dd400515 	stw	r21,20(sp)
 80283ec:	dd000415 	stw	r20,16(sp)
 80283f0:	dcc00315 	stw	r19,12(sp)
 80283f4:	dc400115 	stw	r17,4(sp)
 80283f8:	dc000015 	stw	r16,0(sp)
 80283fc:	3025883a 	mov	r18,r6
 8028400:	10005826 	beq	r2,zero,8028564 <__ssprint_r+0x198>
 8028404:	2027883a 	mov	r19,r4
 8028408:	35c00017 	ldw	r23,0(r6)
 802840c:	29000017 	ldw	r4,0(r5)
 8028410:	28800217 	ldw	r2,8(r5)
 8028414:	2823883a 	mov	r17,r5
 8028418:	0039883a 	mov	fp,zero
 802841c:	0021883a 	mov	r16,zero
 8028420:	80003926 	beq	r16,zero,8028508 <__ssprint_r+0x13c>
 8028424:	102b883a 	mov	r21,r2
 8028428:	102d883a 	mov	r22,r2
 802842c:	80803a36 	bltu	r16,r2,8028518 <__ssprint_r+0x14c>
 8028430:	88c0030b 	ldhu	r3,12(r17)
 8028434:	1881200c 	andi	r2,r3,1152
 8028438:	10002626 	beq	r2,zero,80284d4 <__ssprint_r+0x108>
 802843c:	88800517 	ldw	r2,20(r17)
 8028440:	89400417 	ldw	r5,16(r17)
 8028444:	81800044 	addi	r6,r16,1
 8028448:	108f883a 	add	r7,r2,r2
 802844c:	3885883a 	add	r2,r7,r2
 8028450:	100ed7fa 	srli	r7,r2,31
 8028454:	216dc83a 	sub	r22,r4,r5
 8028458:	3589883a 	add	r4,r6,r22
 802845c:	3885883a 	add	r2,r7,r2
 8028460:	102bd07a 	srai	r21,r2,1
 8028464:	a80d883a 	mov	r6,r21
 8028468:	a900022e 	bgeu	r21,r4,8028474 <__ssprint_r+0xa8>
 802846c:	202b883a 	mov	r21,r4
 8028470:	200d883a 	mov	r6,r4
 8028474:	18c1000c 	andi	r3,r3,1024
 8028478:	18002a26 	beq	r3,zero,8028524 <__ssprint_r+0x158>
 802847c:	300b883a 	mov	r5,r6
 8028480:	9809883a 	mov	r4,r19
 8028484:	8025f5c0 	call	8025f5c <_malloc_r>
 8028488:	1029883a 	mov	r20,r2
 802848c:	10002c26 	beq	r2,zero,8028540 <__ssprint_r+0x174>
 8028490:	89400417 	ldw	r5,16(r17)
 8028494:	b00d883a 	mov	r6,r22
 8028498:	1009883a 	mov	r4,r2
 802849c:	802159c0 	call	802159c <memcpy>
 80284a0:	8880030b 	ldhu	r2,12(r17)
 80284a4:	00fedfc4 	movi	r3,-1153
 80284a8:	10c4703a 	and	r2,r2,r3
 80284ac:	10802014 	ori	r2,r2,128
 80284b0:	8880030d 	sth	r2,12(r17)
 80284b4:	a589883a 	add	r4,r20,r22
 80284b8:	adadc83a 	sub	r22,r21,r22
 80284bc:	8d400515 	stw	r21,20(r17)
 80284c0:	8d800215 	stw	r22,8(r17)
 80284c4:	8d000415 	stw	r20,16(r17)
 80284c8:	89000015 	stw	r4,0(r17)
 80284cc:	802b883a 	mov	r21,r16
 80284d0:	802d883a 	mov	r22,r16
 80284d4:	b00d883a 	mov	r6,r22
 80284d8:	e00b883a 	mov	r5,fp
 80284dc:	802684c0 	call	802684c <memmove>
 80284e0:	88800217 	ldw	r2,8(r17)
 80284e4:	89000017 	ldw	r4,0(r17)
 80284e8:	90c00217 	ldw	r3,8(r18)
 80284ec:	1545c83a 	sub	r2,r2,r21
 80284f0:	2589883a 	add	r4,r4,r22
 80284f4:	88800215 	stw	r2,8(r17)
 80284f8:	89000015 	stw	r4,0(r17)
 80284fc:	1c21c83a 	sub	r16,r3,r16
 8028500:	94000215 	stw	r16,8(r18)
 8028504:	80001726 	beq	r16,zero,8028564 <__ssprint_r+0x198>
 8028508:	bf000017 	ldw	fp,0(r23)
 802850c:	bc000117 	ldw	r16,4(r23)
 8028510:	bdc00204 	addi	r23,r23,8
 8028514:	003fc206 	br	8028420 <__alt_data_end+0xfffe9020>
 8028518:	802b883a 	mov	r21,r16
 802851c:	802d883a 	mov	r22,r16
 8028520:	003fec06 	br	80284d4 <__alt_data_end+0xfffe90d4>
 8028524:	9809883a 	mov	r4,r19
 8028528:	8027b880 	call	8027b88 <_realloc_r>
 802852c:	1029883a 	mov	r20,r2
 8028530:	103fe01e 	bne	r2,zero,80284b4 <__alt_data_end+0xfffe90b4>
 8028534:	89400417 	ldw	r5,16(r17)
 8028538:	9809883a 	mov	r4,r19
 802853c:	802a0f00 	call	802a0f0 <_free_r>
 8028540:	88c0030b 	ldhu	r3,12(r17)
 8028544:	00800304 	movi	r2,12
 8028548:	98800015 	stw	r2,0(r19)
 802854c:	18c01014 	ori	r3,r3,64
 8028550:	88c0030d 	sth	r3,12(r17)
 8028554:	00bfffc4 	movi	r2,-1
 8028558:	90000215 	stw	zero,8(r18)
 802855c:	90000115 	stw	zero,4(r18)
 8028560:	00000206 	br	802856c <__ssprint_r+0x1a0>
 8028564:	90000115 	stw	zero,4(r18)
 8028568:	0005883a 	mov	r2,zero
 802856c:	dfc00917 	ldw	ra,36(sp)
 8028570:	df000817 	ldw	fp,32(sp)
 8028574:	ddc00717 	ldw	r23,28(sp)
 8028578:	dd800617 	ldw	r22,24(sp)
 802857c:	dd400517 	ldw	r21,20(sp)
 8028580:	dd000417 	ldw	r20,16(sp)
 8028584:	dcc00317 	ldw	r19,12(sp)
 8028588:	dc800217 	ldw	r18,8(sp)
 802858c:	dc400117 	ldw	r17,4(sp)
 8028590:	dc000017 	ldw	r16,0(sp)
 8028594:	dec00a04 	addi	sp,sp,40
 8028598:	f800283a 	ret

0802859c <___svfiprintf_internal_r>:
 802859c:	2880030b 	ldhu	r2,12(r5)
 80285a0:	deffc804 	addi	sp,sp,-224
 80285a4:	dcc03115 	stw	r19,196(sp)
 80285a8:	dfc03715 	stw	ra,220(sp)
 80285ac:	df003615 	stw	fp,216(sp)
 80285b0:	ddc03515 	stw	r23,212(sp)
 80285b4:	dd803415 	stw	r22,208(sp)
 80285b8:	dd403315 	stw	r21,204(sp)
 80285bc:	dd003215 	stw	r20,200(sp)
 80285c0:	dc803015 	stw	r18,192(sp)
 80285c4:	dc402f15 	stw	r17,188(sp)
 80285c8:	dc002e15 	stw	r16,184(sp)
 80285cc:	d9402315 	stw	r5,140(sp)
 80285d0:	d9002715 	stw	r4,156(sp)
 80285d4:	1080200c 	andi	r2,r2,128
 80285d8:	d9c02415 	stw	r7,144(sp)
 80285dc:	3027883a 	mov	r19,r6
 80285e0:	10000226 	beq	r2,zero,80285ec <___svfiprintf_internal_r+0x50>
 80285e4:	28800417 	ldw	r2,16(r5)
 80285e8:	10046d26 	beq	r2,zero,80297a0 <___svfiprintf_internal_r+0x1204>
 80285ec:	d8801a04 	addi	r2,sp,104
 80285f0:	d8c019c4 	addi	r3,sp,103
 80285f4:	058200f4 	movhi	r22,2051
 80285f8:	10c9c83a 	sub	r4,r2,r3
 80285fc:	b587a804 	addi	r22,r22,7840
 8028600:	d8801e15 	stw	r2,120(sp)
 8028604:	d8c01f15 	stw	r3,124(sp)
 8028608:	dec01a15 	stw	sp,104(sp)
 802860c:	d8001c15 	stw	zero,112(sp)
 8028610:	d8001b15 	stw	zero,108(sp)
 8028614:	d811883a 	mov	r8,sp
 8028618:	d8002915 	stw	zero,164(sp)
 802861c:	d8002615 	stw	zero,152(sp)
 8028620:	d9002c15 	stw	r4,176(sp)
 8028624:	98800007 	ldb	r2,0(r19)
 8028628:	10031426 	beq	r2,zero,802927c <___svfiprintf_internal_r+0xce0>
 802862c:	00c00944 	movi	r3,37
 8028630:	9825883a 	mov	r18,r19
 8028634:	10c0021e 	bne	r2,r3,8028640 <___svfiprintf_internal_r+0xa4>
 8028638:	00001406 	br	802868c <___svfiprintf_internal_r+0xf0>
 802863c:	10c00326 	beq	r2,r3,802864c <___svfiprintf_internal_r+0xb0>
 8028640:	94800044 	addi	r18,r18,1
 8028644:	90800007 	ldb	r2,0(r18)
 8028648:	103ffc1e 	bne	r2,zero,802863c <__alt_data_end+0xfffe923c>
 802864c:	94e1c83a 	sub	r16,r18,r19
 8028650:	80000e26 	beq	r16,zero,802868c <___svfiprintf_internal_r+0xf0>
 8028654:	d8c01c17 	ldw	r3,112(sp)
 8028658:	d8801b17 	ldw	r2,108(sp)
 802865c:	44c00015 	stw	r19,0(r8)
 8028660:	1c07883a 	add	r3,r3,r16
 8028664:	10800044 	addi	r2,r2,1
 8028668:	d8c01c15 	stw	r3,112(sp)
 802866c:	44000115 	stw	r16,4(r8)
 8028670:	d8801b15 	stw	r2,108(sp)
 8028674:	00c001c4 	movi	r3,7
 8028678:	18835c16 	blt	r3,r2,80293ec <___svfiprintf_internal_r+0xe50>
 802867c:	42000204 	addi	r8,r8,8
 8028680:	d9402617 	ldw	r5,152(sp)
 8028684:	2c0b883a 	add	r5,r5,r16
 8028688:	d9402615 	stw	r5,152(sp)
 802868c:	90800007 	ldb	r2,0(r18)
 8028690:	1002fc26 	beq	r2,zero,8029284 <___svfiprintf_internal_r+0xce8>
 8028694:	0023883a 	mov	r17,zero
 8028698:	00bfffc4 	movi	r2,-1
 802869c:	0021883a 	mov	r16,zero
 80286a0:	94c00044 	addi	r19,r18,1
 80286a4:	90c00047 	ldb	r3,1(r18)
 80286a8:	dc402105 	stb	r17,132(sp)
 80286ac:	d8001d85 	stb	zero,118(sp)
 80286b0:	002b883a 	mov	r21,zero
 80286b4:	d8802015 	stw	r2,128(sp)
 80286b8:	d8002515 	stw	zero,148(sp)
 80286bc:	04801604 	movi	r18,88
 80286c0:	05000244 	movi	r20,9
 80286c4:	402f883a 	mov	r23,r8
 80286c8:	8023883a 	mov	r17,r16
 80286cc:	9cc00044 	addi	r19,r19,1
 80286d0:	18bff804 	addi	r2,r3,-32
 80286d4:	9081fb36 	bltu	r18,r2,8028ec4 <___svfiprintf_internal_r+0x928>
 80286d8:	100490ba 	slli	r2,r2,2
 80286dc:	010200f4 	movhi	r4,2051
 80286e0:	2121bc04 	addi	r4,r4,-30992
 80286e4:	1105883a 	add	r2,r2,r4
 80286e8:	10800017 	ldw	r2,0(r2)
 80286ec:	1000683a 	jmp	r2
 80286f0:	080288f0 	cmpltui	zero,at,2595
 80286f4:	08028ec4 	addi	zero,at,2619
 80286f8:	08028ec4 	addi	zero,at,2619
 80286fc:	080288e4 	muli	zero,at,2595
 8028700:	08028ec4 	addi	zero,at,2619
 8028704:	08028ec4 	addi	zero,at,2619
 8028708:	08028ec4 	addi	zero,at,2619
 802870c:	08028ec4 	addi	zero,at,2619
 8028710:	08028ec4 	addi	zero,at,2619
 8028714:	08028ec4 	addi	zero,at,2619
 8028718:	08028854 	ori	zero,at,2593
 802871c:	08028a50 	cmplti	zero,at,2601
 8028720:	08028ec4 	addi	zero,at,2619
 8028724:	0802887c 	xorhi	zero,at,2593
 8028728:	08028f00 	call	8028f0 <__alt_mem_new_sdram_controller_0-0x37fd710>
 802872c:	08028ec4 	addi	zero,at,2619
 8028730:	08028ef4 	orhi	zero,at,2619
 8028734:	08028e88 	cmpgei	zero,at,2618
 8028738:	08028e88 	cmpgei	zero,at,2618
 802873c:	08028e88 	cmpgei	zero,at,2618
 8028740:	08028e88 	cmpgei	zero,at,2618
 8028744:	08028e88 	cmpgei	zero,at,2618
 8028748:	08028e88 	cmpgei	zero,at,2618
 802874c:	08028e88 	cmpgei	zero,at,2618
 8028750:	08028e88 	cmpgei	zero,at,2618
 8028754:	08028e88 	cmpgei	zero,at,2618
 8028758:	08028ec4 	addi	zero,at,2619
 802875c:	08028ec4 	addi	zero,at,2619
 8028760:	08028ec4 	addi	zero,at,2619
 8028764:	08028ec4 	addi	zero,at,2619
 8028768:	08028ec4 	addi	zero,at,2619
 802876c:	08028ec4 	addi	zero,at,2619
 8028770:	08028ec4 	addi	zero,at,2619
 8028774:	08028ec4 	addi	zero,at,2619
 8028778:	08028ec4 	addi	zero,at,2619
 802877c:	08028ec4 	addi	zero,at,2619
 8028780:	08028e0c 	andi	zero,at,2616
 8028784:	08028ec4 	addi	zero,at,2619
 8028788:	08028ec4 	addi	zero,at,2619
 802878c:	08028ec4 	addi	zero,at,2619
 8028790:	08028ec4 	addi	zero,at,2619
 8028794:	08028ec4 	addi	zero,at,2619
 8028798:	08028ec4 	addi	zero,at,2619
 802879c:	08028ec4 	addi	zero,at,2619
 80287a0:	08028ec4 	addi	zero,at,2619
 80287a4:	08028ec4 	addi	zero,at,2619
 80287a8:	08028ec4 	addi	zero,at,2619
 80287ac:	08028fbc 	xorhi	zero,at,2622
 80287b0:	08028ec4 	addi	zero,at,2619
 80287b4:	08028ec4 	addi	zero,at,2619
 80287b8:	08028ec4 	addi	zero,at,2619
 80287bc:	08028ec4 	addi	zero,at,2619
 80287c0:	08028ec4 	addi	zero,at,2619
 80287c4:	08028f48 	cmpgei	zero,at,2621
 80287c8:	08028ec4 	addi	zero,at,2619
 80287cc:	08028ec4 	addi	zero,at,2619
 80287d0:	08028c48 	cmpgei	zero,at,2609
 80287d4:	08028ec4 	addi	zero,at,2619
 80287d8:	08028ec4 	addi	zero,at,2619
 80287dc:	08028ec4 	addi	zero,at,2619
 80287e0:	08028ec4 	addi	zero,at,2619
 80287e4:	08028ec4 	addi	zero,at,2619
 80287e8:	08028ec4 	addi	zero,at,2619
 80287ec:	08028ec4 	addi	zero,at,2619
 80287f0:	08028ec4 	addi	zero,at,2619
 80287f4:	08028ec4 	addi	zero,at,2619
 80287f8:	08028ec4 	addi	zero,at,2619
 80287fc:	08028b14 	ori	zero,at,2604
 8028800:	08028cf8 	rdprs	zero,at,2611
 8028804:	08028ec4 	addi	zero,at,2619
 8028808:	08028ec4 	addi	zero,at,2619
 802880c:	08028ec4 	addi	zero,at,2619
 8028810:	08028cec 	andhi	zero,at,2611
 8028814:	08028cf8 	rdprs	zero,at,2611
 8028818:	08028ec4 	addi	zero,at,2619
 802881c:	08028ec4 	addi	zero,at,2619
 8028820:	08028cd8 	cmpnei	zero,at,2611
 8028824:	08028ec4 	addi	zero,at,2619
 8028828:	08028c98 	cmpnei	zero,at,2610
 802882c:	08028a64 	muli	zero,at,2601
 8028830:	08028888 	cmpgei	zero,at,2594
 8028834:	08028e00 	call	8028e0 <__alt_mem_new_sdram_controller_0-0x37fd720>
 8028838:	08028ec4 	addi	zero,at,2619
 802883c:	08028dac 	andhi	zero,at,2614
 8028840:	08028ec4 	addi	zero,at,2619
 8028844:	080289c8 	cmpgei	zero,at,2599
 8028848:	08028ec4 	addi	zero,at,2619
 802884c:	08028ec4 	addi	zero,at,2619
 8028850:	08028914 	ori	zero,at,2596
 8028854:	d9002417 	ldw	r4,144(sp)
 8028858:	d9402417 	ldw	r5,144(sp)
 802885c:	21000017 	ldw	r4,0(r4)
 8028860:	28800104 	addi	r2,r5,4
 8028864:	d9002515 	stw	r4,148(sp)
 8028868:	20032b0e 	bge	r4,zero,8029518 <___svfiprintf_internal_r+0xf7c>
 802886c:	d8c02517 	ldw	r3,148(sp)
 8028870:	d8802415 	stw	r2,144(sp)
 8028874:	00c7c83a 	sub	r3,zero,r3
 8028878:	d8c02515 	stw	r3,148(sp)
 802887c:	8c400114 	ori	r17,r17,4
 8028880:	98c00007 	ldb	r3,0(r19)
 8028884:	003f9106 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028888:	00800c04 	movi	r2,48
 802888c:	d9402417 	ldw	r5,144(sp)
 8028890:	d9002017 	ldw	r4,128(sp)
 8028894:	d8801d05 	stb	r2,116(sp)
 8028898:	00801e04 	movi	r2,120
 802889c:	d8801d45 	stb	r2,117(sp)
 80288a0:	d8001d85 	stb	zero,118(sp)
 80288a4:	b811883a 	mov	r8,r23
 80288a8:	28c00104 	addi	r3,r5,4
 80288ac:	2c800017 	ldw	r18,0(r5)
 80288b0:	0029883a 	mov	r20,zero
 80288b4:	88800094 	ori	r2,r17,2
 80288b8:	20036316 	blt	r4,zero,8029648 <___svfiprintf_internal_r+0x10ac>
 80288bc:	00bfdfc4 	movi	r2,-129
 80288c0:	88a0703a 	and	r16,r17,r2
 80288c4:	d8c02415 	stw	r3,144(sp)
 80288c8:	84000094 	ori	r16,r16,2
 80288cc:	90031c26 	beq	r18,zero,8029540 <___svfiprintf_internal_r+0xfa4>
 80288d0:	014200f4 	movhi	r5,2051
 80288d4:	29474704 	addi	r5,r5,7452
 80288d8:	002b883a 	mov	r21,zero
 80288dc:	d9402915 	stw	r5,164(sp)
 80288e0:	00002906 	br	8028988 <___svfiprintf_internal_r+0x3ec>
 80288e4:	8c400054 	ori	r17,r17,1
 80288e8:	98c00007 	ldb	r3,0(r19)
 80288ec:	003f7706 	br	80286cc <__alt_data_end+0xfffe92cc>
 80288f0:	a8803fcc 	andi	r2,r21,255
 80288f4:	1080201c 	xori	r2,r2,128
 80288f8:	10bfe004 	addi	r2,r2,-128
 80288fc:	10032a1e 	bne	r2,zero,80295a8 <___svfiprintf_internal_r+0x100c>
 8028900:	00c00044 	movi	r3,1
 8028904:	d8c02105 	stb	r3,132(sp)
 8028908:	05400804 	movi	r21,32
 802890c:	98c00007 	ldb	r3,0(r19)
 8028910:	003f6e06 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028914:	8821883a 	mov	r16,r17
 8028918:	dc402103 	ldbu	r17,132(sp)
 802891c:	b811883a 	mov	r8,r23
 8028920:	8c403fcc 	andi	r17,r17,255
 8028924:	8803f01e 	bne	r17,zero,80298e8 <___svfiprintf_internal_r+0x134c>
 8028928:	008200f4 	movhi	r2,2051
 802892c:	10874704 	addi	r2,r2,7452
 8028930:	d8802915 	stw	r2,164(sp)
 8028934:	8080080c 	andi	r2,r16,32
 8028938:	1000cd26 	beq	r2,zero,8028c70 <___svfiprintf_internal_r+0x6d4>
 802893c:	d9002417 	ldw	r4,144(sp)
 8028940:	24800017 	ldw	r18,0(r4)
 8028944:	25000117 	ldw	r20,4(r4)
 8028948:	21000204 	addi	r4,r4,8
 802894c:	d9002415 	stw	r4,144(sp)
 8028950:	8080004c 	andi	r2,r16,1
 8028954:	1002c726 	beq	r2,zero,8029474 <___svfiprintf_internal_r+0xed8>
 8028958:	9504b03a 	or	r2,r18,r20
 802895c:	1003061e 	bne	r2,zero,8029578 <___svfiprintf_internal_r+0xfdc>
 8028960:	d9002017 	ldw	r4,128(sp)
 8028964:	d8001d85 	stb	zero,118(sp)
 8028968:	20033e16 	blt	r4,zero,8029664 <___svfiprintf_internal_r+0x10c8>
 802896c:	00bfdfc4 	movi	r2,-129
 8028970:	80a0703a 	and	r16,r16,r2
 8028974:	d9402017 	ldw	r5,128(sp)
 8028978:	002b883a 	mov	r21,zero
 802897c:	28002826 	beq	r5,zero,8028a20 <___svfiprintf_internal_r+0x484>
 8028980:	0025883a 	mov	r18,zero
 8028984:	0029883a 	mov	r20,zero
 8028988:	d9002917 	ldw	r4,164(sp)
 802898c:	dc401a04 	addi	r17,sp,104
 8028990:	908003cc 	andi	r2,r18,15
 8028994:	a006973a 	slli	r3,r20,28
 8028998:	2085883a 	add	r2,r4,r2
 802899c:	9024d13a 	srli	r18,r18,4
 80289a0:	10800003 	ldbu	r2,0(r2)
 80289a4:	a028d13a 	srli	r20,r20,4
 80289a8:	8c7fffc4 	addi	r17,r17,-1
 80289ac:	1ca4b03a 	or	r18,r3,r18
 80289b0:	88800005 	stb	r2,0(r17)
 80289b4:	9504b03a 	or	r2,r18,r20
 80289b8:	103ff51e 	bne	r2,zero,8028990 <__alt_data_end+0xfffe9590>
 80289bc:	d8801e17 	ldw	r2,120(sp)
 80289c0:	1469c83a 	sub	r20,r2,r17
 80289c4:	00001906 	br	8028a2c <___svfiprintf_internal_r+0x490>
 80289c8:	8821883a 	mov	r16,r17
 80289cc:	dc402103 	ldbu	r17,132(sp)
 80289d0:	b811883a 	mov	r8,r23
 80289d4:	8c403fcc 	andi	r17,r17,255
 80289d8:	8803d01e 	bne	r17,zero,802991c <___svfiprintf_internal_r+0x1380>
 80289dc:	8080080c 	andi	r2,r16,32
 80289e0:	10016126 	beq	r2,zero,8028f68 <___svfiprintf_internal_r+0x9cc>
 80289e4:	d9002417 	ldw	r4,144(sp)
 80289e8:	d9402017 	ldw	r5,128(sp)
 80289ec:	d8001d85 	stb	zero,118(sp)
 80289f0:	20c00204 	addi	r3,r4,8
 80289f4:	24800017 	ldw	r18,0(r4)
 80289f8:	25000117 	ldw	r20,4(r4)
 80289fc:	28030f16 	blt	r5,zero,802963c <___svfiprintf_internal_r+0x10a0>
 8028a00:	013fdfc4 	movi	r4,-129
 8028a04:	9504b03a 	or	r2,r18,r20
 8028a08:	d8c02415 	stw	r3,144(sp)
 8028a0c:	8120703a 	and	r16,r16,r4
 8028a10:	002b883a 	mov	r21,zero
 8028a14:	1000cd1e 	bne	r2,zero,8028d4c <___svfiprintf_internal_r+0x7b0>
 8028a18:	d8c02017 	ldw	r3,128(sp)
 8028a1c:	1803141e 	bne	r3,zero,8029670 <___svfiprintf_internal_r+0x10d4>
 8028a20:	d8002015 	stw	zero,128(sp)
 8028a24:	0029883a 	mov	r20,zero
 8028a28:	dc401a04 	addi	r17,sp,104
 8028a2c:	dc802017 	ldw	r18,128(sp)
 8028a30:	9500010e 	bge	r18,r20,8028a38 <___svfiprintf_internal_r+0x49c>
 8028a34:	a025883a 	mov	r18,r20
 8028a38:	ad403fcc 	andi	r21,r21,255
 8028a3c:	ad40201c 	xori	r21,r21,128
 8028a40:	ad7fe004 	addi	r21,r21,-128
 8028a44:	a8003f26 	beq	r21,zero,8028b44 <___svfiprintf_internal_r+0x5a8>
 8028a48:	94800044 	addi	r18,r18,1
 8028a4c:	00003d06 	br	8028b44 <___svfiprintf_internal_r+0x5a8>
 8028a50:	00c00044 	movi	r3,1
 8028a54:	d8c02105 	stb	r3,132(sp)
 8028a58:	05400ac4 	movi	r21,43
 8028a5c:	98c00007 	ldb	r3,0(r19)
 8028a60:	003f1a06 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028a64:	8821883a 	mov	r16,r17
 8028a68:	dc402103 	ldbu	r17,132(sp)
 8028a6c:	b811883a 	mov	r8,r23
 8028a70:	8c403fcc 	andi	r17,r17,255
 8028a74:	8803a71e 	bne	r17,zero,8029914 <___svfiprintf_internal_r+0x1378>
 8028a78:	8080080c 	andi	r2,r16,32
 8028a7c:	10015726 	beq	r2,zero,8028fdc <___svfiprintf_internal_r+0xa40>
 8028a80:	d8c02417 	ldw	r3,144(sp)
 8028a84:	d9002017 	ldw	r4,128(sp)
 8028a88:	d8001d85 	stb	zero,118(sp)
 8028a8c:	18800204 	addi	r2,r3,8
 8028a90:	1c800017 	ldw	r18,0(r3)
 8028a94:	1d000117 	ldw	r20,4(r3)
 8028a98:	2002db16 	blt	r4,zero,8029608 <___svfiprintf_internal_r+0x106c>
 8028a9c:	013fdfc4 	movi	r4,-129
 8028aa0:	9506b03a 	or	r3,r18,r20
 8028aa4:	d8802415 	stw	r2,144(sp)
 8028aa8:	8120703a 	and	r16,r16,r4
 8028aac:	18015826 	beq	r3,zero,8029010 <___svfiprintf_internal_r+0xa74>
 8028ab0:	002b883a 	mov	r21,zero
 8028ab4:	dc401a04 	addi	r17,sp,104
 8028ab8:	9006d0fa 	srli	r3,r18,3
 8028abc:	a008977a 	slli	r4,r20,29
 8028ac0:	a028d0fa 	srli	r20,r20,3
 8028ac4:	948001cc 	andi	r18,r18,7
 8028ac8:	90800c04 	addi	r2,r18,48
 8028acc:	8c7fffc4 	addi	r17,r17,-1
 8028ad0:	20e4b03a 	or	r18,r4,r3
 8028ad4:	88800005 	stb	r2,0(r17)
 8028ad8:	9506b03a 	or	r3,r18,r20
 8028adc:	183ff61e 	bne	r3,zero,8028ab8 <__alt_data_end+0xfffe96b8>
 8028ae0:	80c0004c 	andi	r3,r16,1
 8028ae4:	18028926 	beq	r3,zero,802950c <___svfiprintf_internal_r+0xf70>
 8028ae8:	10803fcc 	andi	r2,r2,255
 8028aec:	1080201c 	xori	r2,r2,128
 8028af0:	10bfe004 	addi	r2,r2,-128
 8028af4:	00c00c04 	movi	r3,48
 8028af8:	10ffb026 	beq	r2,r3,80289bc <__alt_data_end+0xfffe95bc>
 8028afc:	88ffffc5 	stb	r3,-1(r17)
 8028b00:	d8c01e17 	ldw	r3,120(sp)
 8028b04:	88bfffc4 	addi	r2,r17,-1
 8028b08:	1023883a 	mov	r17,r2
 8028b0c:	18a9c83a 	sub	r20,r3,r2
 8028b10:	003fc606 	br	8028a2c <__alt_data_end+0xfffe962c>
 8028b14:	d8c02417 	ldw	r3,144(sp)
 8028b18:	04800044 	movi	r18,1
 8028b1c:	8821883a 	mov	r16,r17
 8028b20:	18800017 	ldw	r2,0(r3)
 8028b24:	18c00104 	addi	r3,r3,4
 8028b28:	b811883a 	mov	r8,r23
 8028b2c:	d8001d85 	stb	zero,118(sp)
 8028b30:	d8801005 	stb	r2,64(sp)
 8028b34:	d8c02415 	stw	r3,144(sp)
 8028b38:	9029883a 	mov	r20,r18
 8028b3c:	dc401004 	addi	r17,sp,64
 8028b40:	d8002015 	stw	zero,128(sp)
 8028b44:	80c0008c 	andi	r3,r16,2
 8028b48:	d8c02115 	stw	r3,132(sp)
 8028b4c:	18000126 	beq	r3,zero,8028b54 <___svfiprintf_internal_r+0x5b8>
 8028b50:	94800084 	addi	r18,r18,2
 8028b54:	80c0210c 	andi	r3,r16,132
 8028b58:	d8c02215 	stw	r3,136(sp)
 8028b5c:	1801321e 	bne	r3,zero,8029028 <___svfiprintf_internal_r+0xa8c>
 8028b60:	d9002517 	ldw	r4,148(sp)
 8028b64:	24b9c83a 	sub	fp,r4,r18
 8028b68:	07012f0e 	bge	zero,fp,8029028 <___svfiprintf_internal_r+0xa8c>
 8028b6c:	02400404 	movi	r9,16
 8028b70:	d8c01c17 	ldw	r3,112(sp)
 8028b74:	d8801b17 	ldw	r2,108(sp)
 8028b78:	4f03250e 	bge	r9,fp,8029810 <___svfiprintf_internal_r+0x1274>
 8028b7c:	010200f4 	movhi	r4,2051
 8028b80:	2107ac04 	addi	r4,r4,7856
 8028b84:	dc002a15 	stw	r16,168(sp)
 8028b88:	dc402b15 	stw	r17,172(sp)
 8028b8c:	d9002815 	stw	r4,160(sp)
 8028b90:	e023883a 	mov	r17,fp
 8028b94:	482f883a 	mov	r23,r9
 8028b98:	9839883a 	mov	fp,r19
 8028b9c:	054001c4 	movi	r21,7
 8028ba0:	9027883a 	mov	r19,r18
 8028ba4:	dc002717 	ldw	r16,156(sp)
 8028ba8:	dc802317 	ldw	r18,140(sp)
 8028bac:	00000306 	br	8028bbc <___svfiprintf_internal_r+0x620>
 8028bb0:	8c7ffc04 	addi	r17,r17,-16
 8028bb4:	42000204 	addi	r8,r8,8
 8028bb8:	bc40130e 	bge	r23,r17,8028c08 <___svfiprintf_internal_r+0x66c>
 8028bbc:	014200f4 	movhi	r5,2051
 8028bc0:	18c00404 	addi	r3,r3,16
 8028bc4:	10800044 	addi	r2,r2,1
 8028bc8:	2947ac04 	addi	r5,r5,7856
 8028bcc:	41400015 	stw	r5,0(r8)
 8028bd0:	45c00115 	stw	r23,4(r8)
 8028bd4:	d8c01c15 	stw	r3,112(sp)
 8028bd8:	d8801b15 	stw	r2,108(sp)
 8028bdc:	a8bff40e 	bge	r21,r2,8028bb0 <__alt_data_end+0xfffe97b0>
 8028be0:	d9801a04 	addi	r6,sp,104
 8028be4:	900b883a 	mov	r5,r18
 8028be8:	8009883a 	mov	r4,r16
 8028bec:	80283cc0 	call	80283cc <__ssprint_r>
 8028bf0:	1001aa1e 	bne	r2,zero,802929c <___svfiprintf_internal_r+0xd00>
 8028bf4:	8c7ffc04 	addi	r17,r17,-16
 8028bf8:	d8c01c17 	ldw	r3,112(sp)
 8028bfc:	d8801b17 	ldw	r2,108(sp)
 8028c00:	d811883a 	mov	r8,sp
 8028c04:	bc7fed16 	blt	r23,r17,8028bbc <__alt_data_end+0xfffe97bc>
 8028c08:	9825883a 	mov	r18,r19
 8028c0c:	dc002a17 	ldw	r16,168(sp)
 8028c10:	e027883a 	mov	r19,fp
 8028c14:	8839883a 	mov	fp,r17
 8028c18:	dc402b17 	ldw	r17,172(sp)
 8028c1c:	d9002817 	ldw	r4,160(sp)
 8028c20:	e0c7883a 	add	r3,fp,r3
 8028c24:	10800044 	addi	r2,r2,1
 8028c28:	41000015 	stw	r4,0(r8)
 8028c2c:	47000115 	stw	fp,4(r8)
 8028c30:	d8c01c15 	stw	r3,112(sp)
 8028c34:	d8801b15 	stw	r2,108(sp)
 8028c38:	010001c4 	movi	r4,7
 8028c3c:	20821616 	blt	r4,r2,8029498 <___svfiprintf_internal_r+0xefc>
 8028c40:	42000204 	addi	r8,r8,8
 8028c44:	0000fa06 	br	8029030 <___svfiprintf_internal_r+0xa94>
 8028c48:	8821883a 	mov	r16,r17
 8028c4c:	dc402103 	ldbu	r17,132(sp)
 8028c50:	b811883a 	mov	r8,r23
 8028c54:	8c403fcc 	andi	r17,r17,255
 8028c58:	8803361e 	bne	r17,zero,8029934 <___svfiprintf_internal_r+0x1398>
 8028c5c:	014200f4 	movhi	r5,2051
 8028c60:	29474204 	addi	r5,r5,7432
 8028c64:	d9402915 	stw	r5,164(sp)
 8028c68:	8080080c 	andi	r2,r16,32
 8028c6c:	103f331e 	bne	r2,zero,802893c <__alt_data_end+0xfffe953c>
 8028c70:	8080040c 	andi	r2,r16,16
 8028c74:	1002551e 	bne	r2,zero,80295cc <___svfiprintf_internal_r+0x1030>
 8028c78:	8080100c 	andi	r2,r16,64
 8028c7c:	1002a626 	beq	r2,zero,8029718 <___svfiprintf_internal_r+0x117c>
 8028c80:	d8802417 	ldw	r2,144(sp)
 8028c84:	0029883a 	mov	r20,zero
 8028c88:	1480000b 	ldhu	r18,0(r2)
 8028c8c:	10800104 	addi	r2,r2,4
 8028c90:	d8802415 	stw	r2,144(sp)
 8028c94:	003f2e06 	br	8028950 <__alt_data_end+0xfffe9550>
 8028c98:	8821883a 	mov	r16,r17
 8028c9c:	dc402103 	ldbu	r17,132(sp)
 8028ca0:	b811883a 	mov	r8,r23
 8028ca4:	8c403fcc 	andi	r17,r17,255
 8028ca8:	88030b1e 	bne	r17,zero,80298d8 <___svfiprintf_internal_r+0x133c>
 8028cac:	8080080c 	andi	r2,r16,32
 8028cb0:	1002271e 	bne	r2,zero,8029550 <___svfiprintf_internal_r+0xfb4>
 8028cb4:	8080040c 	andi	r2,r16,16
 8028cb8:	10028e26 	beq	r2,zero,80296f4 <___svfiprintf_internal_r+0x1158>
 8028cbc:	d8c02417 	ldw	r3,144(sp)
 8028cc0:	d9002617 	ldw	r4,152(sp)
 8028cc4:	18800017 	ldw	r2,0(r3)
 8028cc8:	18c00104 	addi	r3,r3,4
 8028ccc:	d8c02415 	stw	r3,144(sp)
 8028cd0:	11000015 	stw	r4,0(r2)
 8028cd4:	003e5306 	br	8028624 <__alt_data_end+0xfffe9224>
 8028cd8:	98c00007 	ldb	r3,0(r19)
 8028cdc:	01401b04 	movi	r5,108
 8028ce0:	19424f26 	beq	r3,r5,8029620 <___svfiprintf_internal_r+0x1084>
 8028ce4:	8c400414 	ori	r17,r17,16
 8028ce8:	003e7806 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028cec:	8c401014 	ori	r17,r17,64
 8028cf0:	98c00007 	ldb	r3,0(r19)
 8028cf4:	003e7506 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028cf8:	8821883a 	mov	r16,r17
 8028cfc:	dc402103 	ldbu	r17,132(sp)
 8028d00:	b811883a 	mov	r8,r23
 8028d04:	8c403fcc 	andi	r17,r17,255
 8028d08:	8802fe1e 	bne	r17,zero,8029904 <___svfiprintf_internal_r+0x1368>
 8028d0c:	8080080c 	andi	r2,r16,32
 8028d10:	10004626 	beq	r2,zero,8028e2c <___svfiprintf_internal_r+0x890>
 8028d14:	d9002417 	ldw	r4,144(sp)
 8028d18:	20800117 	ldw	r2,4(r4)
 8028d1c:	24800017 	ldw	r18,0(r4)
 8028d20:	21000204 	addi	r4,r4,8
 8028d24:	d9002415 	stw	r4,144(sp)
 8028d28:	1029883a 	mov	r20,r2
 8028d2c:	10004a16 	blt	r2,zero,8028e58 <___svfiprintf_internal_r+0x8bc>
 8028d30:	d9002017 	ldw	r4,128(sp)
 8028d34:	dd401d83 	ldbu	r21,118(sp)
 8028d38:	2001eb16 	blt	r4,zero,80294e8 <___svfiprintf_internal_r+0xf4c>
 8028d3c:	00ffdfc4 	movi	r3,-129
 8028d40:	9504b03a 	or	r2,r18,r20
 8028d44:	80e0703a 	and	r16,r16,r3
 8028d48:	103f3326 	beq	r2,zero,8028a18 <__alt_data_end+0xfffe9618>
 8028d4c:	a0009426 	beq	r20,zero,8028fa0 <___svfiprintf_internal_r+0xa04>
 8028d50:	dc401a04 	addi	r17,sp,104
 8028d54:	402f883a 	mov	r23,r8
 8028d58:	9009883a 	mov	r4,r18
 8028d5c:	a00b883a 	mov	r5,r20
 8028d60:	01800284 	movi	r6,10
 8028d64:	000f883a 	mov	r7,zero
 8028d68:	802ad280 	call	802ad28 <__umoddi3>
 8028d6c:	10800c04 	addi	r2,r2,48
 8028d70:	8c7fffc4 	addi	r17,r17,-1
 8028d74:	9009883a 	mov	r4,r18
 8028d78:	a00b883a 	mov	r5,r20
 8028d7c:	88800005 	stb	r2,0(r17)
 8028d80:	01800284 	movi	r6,10
 8028d84:	000f883a 	mov	r7,zero
 8028d88:	802a72c0 	call	802a72c <__udivdi3>
 8028d8c:	1025883a 	mov	r18,r2
 8028d90:	10c4b03a 	or	r2,r2,r3
 8028d94:	1829883a 	mov	r20,r3
 8028d98:	103fef1e 	bne	r2,zero,8028d58 <__alt_data_end+0xfffe9958>
 8028d9c:	d9001e17 	ldw	r4,120(sp)
 8028da0:	b811883a 	mov	r8,r23
 8028da4:	2469c83a 	sub	r20,r4,r17
 8028da8:	003f2006 	br	8028a2c <__alt_data_end+0xfffe962c>
 8028dac:	d8802417 	ldw	r2,144(sp)
 8028db0:	8821883a 	mov	r16,r17
 8028db4:	d8001d85 	stb	zero,118(sp)
 8028db8:	14400017 	ldw	r17,0(r2)
 8028dbc:	b811883a 	mov	r8,r23
 8028dc0:	15c00104 	addi	r23,r2,4
 8028dc4:	88026c26 	beq	r17,zero,8029778 <___svfiprintf_internal_r+0x11dc>
 8028dc8:	d8c02017 	ldw	r3,128(sp)
 8028dcc:	18025f16 	blt	r3,zero,802974c <___svfiprintf_internal_r+0x11b0>
 8028dd0:	180d883a 	mov	r6,r3
 8028dd4:	000b883a 	mov	r5,zero
 8028dd8:	8809883a 	mov	r4,r17
 8028ddc:	da002d15 	stw	r8,180(sp)
 8028de0:	80267680 	call	8026768 <memchr>
 8028de4:	da002d17 	ldw	r8,180(sp)
 8028de8:	1002a526 	beq	r2,zero,8029880 <___svfiprintf_internal_r+0x12e4>
 8028dec:	1469c83a 	sub	r20,r2,r17
 8028df0:	dd401d83 	ldbu	r21,118(sp)
 8028df4:	ddc02415 	stw	r23,144(sp)
 8028df8:	d8002015 	stw	zero,128(sp)
 8028dfc:	003f0b06 	br	8028a2c <__alt_data_end+0xfffe962c>
 8028e00:	8c400814 	ori	r17,r17,32
 8028e04:	98c00007 	ldb	r3,0(r19)
 8028e08:	003e3006 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028e0c:	8821883a 	mov	r16,r17
 8028e10:	dc402103 	ldbu	r17,132(sp)
 8028e14:	b811883a 	mov	r8,r23
 8028e18:	8c403fcc 	andi	r17,r17,255
 8028e1c:	8802b01e 	bne	r17,zero,80298e0 <___svfiprintf_internal_r+0x1344>
 8028e20:	84000414 	ori	r16,r16,16
 8028e24:	8080080c 	andi	r2,r16,32
 8028e28:	103fba1e 	bne	r2,zero,8028d14 <__alt_data_end+0xfffe9914>
 8028e2c:	8080040c 	andi	r2,r16,16
 8028e30:	1001df1e 	bne	r2,zero,80295b0 <___svfiprintf_internal_r+0x1014>
 8028e34:	8080100c 	andi	r2,r16,64
 8028e38:	10023d26 	beq	r2,zero,8029730 <___svfiprintf_internal_r+0x1194>
 8028e3c:	d8802417 	ldw	r2,144(sp)
 8028e40:	1480000f 	ldh	r18,0(r2)
 8028e44:	10800104 	addi	r2,r2,4
 8028e48:	d8802415 	stw	r2,144(sp)
 8028e4c:	9029d7fa 	srai	r20,r18,31
 8028e50:	a005883a 	mov	r2,r20
 8028e54:	103fb60e 	bge	r2,zero,8028d30 <__alt_data_end+0xfffe9930>
 8028e58:	d9402017 	ldw	r5,128(sp)
 8028e5c:	04a5c83a 	sub	r18,zero,r18
 8028e60:	05400b44 	movi	r21,45
 8028e64:	9004c03a 	cmpne	r2,r18,zero
 8028e68:	0529c83a 	sub	r20,zero,r20
 8028e6c:	dd401d85 	stb	r21,118(sp)
 8028e70:	a0a9c83a 	sub	r20,r20,r2
 8028e74:	28026c16 	blt	r5,zero,8029828 <___svfiprintf_internal_r+0x128c>
 8028e78:	00bfdfc4 	movi	r2,-129
 8028e7c:	80a0703a 	and	r16,r16,r2
 8028e80:	a03fb31e 	bne	r20,zero,8028d50 <__alt_data_end+0xfffe9950>
 8028e84:	00004606 	br	8028fa0 <___svfiprintf_internal_r+0xa04>
 8028e88:	9839883a 	mov	fp,r19
 8028e8c:	d8002515 	stw	zero,148(sp)
 8028e90:	1c3ff404 	addi	r16,r3,-48
 8028e94:	0009883a 	mov	r4,zero
 8028e98:	01400284 	movi	r5,10
 8028e9c:	80214e80 	call	80214e8 <__mulsi3>
 8028ea0:	e0c00007 	ldb	r3,0(fp)
 8028ea4:	8089883a 	add	r4,r16,r2
 8028ea8:	9cc00044 	addi	r19,r19,1
 8028eac:	1c3ff404 	addi	r16,r3,-48
 8028eb0:	9839883a 	mov	fp,r19
 8028eb4:	a43ff82e 	bgeu	r20,r16,8028e98 <__alt_data_end+0xfffe9a98>
 8028eb8:	d9002515 	stw	r4,148(sp)
 8028ebc:	18bff804 	addi	r2,r3,-32
 8028ec0:	90be052e 	bgeu	r18,r2,80286d8 <__alt_data_end+0xfffe92d8>
 8028ec4:	8821883a 	mov	r16,r17
 8028ec8:	dc402103 	ldbu	r17,132(sp)
 8028ecc:	b811883a 	mov	r8,r23
 8028ed0:	8c403fcc 	andi	r17,r17,255
 8028ed4:	88028d1e 	bne	r17,zero,802990c <___svfiprintf_internal_r+0x1370>
 8028ed8:	1800ea26 	beq	r3,zero,8029284 <___svfiprintf_internal_r+0xce8>
 8028edc:	04800044 	movi	r18,1
 8028ee0:	d8c01005 	stb	r3,64(sp)
 8028ee4:	d8001d85 	stb	zero,118(sp)
 8028ee8:	9029883a 	mov	r20,r18
 8028eec:	dc401004 	addi	r17,sp,64
 8028ef0:	003f1306 	br	8028b40 <__alt_data_end+0xfffe9740>
 8028ef4:	8c402014 	ori	r17,r17,128
 8028ef8:	98c00007 	ldb	r3,0(r19)
 8028efc:	003df306 	br	80286cc <__alt_data_end+0xfffe92cc>
 8028f00:	98c00007 	ldb	r3,0(r19)
 8028f04:	01000a84 	movi	r4,42
 8028f08:	9f000044 	addi	fp,r19,1
 8028f0c:	19026326 	beq	r3,r4,802989c <___svfiprintf_internal_r+0x1300>
 8028f10:	1c3ff404 	addi	r16,r3,-48
 8028f14:	0009883a 	mov	r4,zero
 8028f18:	a4025636 	bltu	r20,r16,8029874 <___svfiprintf_internal_r+0x12d8>
 8028f1c:	01400284 	movi	r5,10
 8028f20:	80214e80 	call	80214e8 <__mulsi3>
 8028f24:	e0c00007 	ldb	r3,0(fp)
 8028f28:	1409883a 	add	r4,r2,r16
 8028f2c:	e4c00044 	addi	r19,fp,1
 8028f30:	1c3ff404 	addi	r16,r3,-48
 8028f34:	9839883a 	mov	fp,r19
 8028f38:	a43ff82e 	bgeu	r20,r16,8028f1c <__alt_data_end+0xfffe9b1c>
 8028f3c:	20020c16 	blt	r4,zero,8029770 <___svfiprintf_internal_r+0x11d4>
 8028f40:	d9002015 	stw	r4,128(sp)
 8028f44:	003de206 	br	80286d0 <__alt_data_end+0xfffe92d0>
 8028f48:	8821883a 	mov	r16,r17
 8028f4c:	dc402103 	ldbu	r17,132(sp)
 8028f50:	b811883a 	mov	r8,r23
 8028f54:	8c403fcc 	andi	r17,r17,255
 8028f58:	8802721e 	bne	r17,zero,8029924 <___svfiprintf_internal_r+0x1388>
 8028f5c:	84000414 	ori	r16,r16,16
 8028f60:	8080080c 	andi	r2,r16,32
 8028f64:	103e9f1e 	bne	r2,zero,80289e4 <__alt_data_end+0xfffe95e4>
 8028f68:	8080040c 	andi	r2,r16,16
 8028f6c:	10015326 	beq	r2,zero,80294bc <___svfiprintf_internal_r+0xf20>
 8028f70:	d8c02417 	ldw	r3,144(sp)
 8028f74:	d9002017 	ldw	r4,128(sp)
 8028f78:	d8001d85 	stb	zero,118(sp)
 8028f7c:	18800104 	addi	r2,r3,4
 8028f80:	1c800017 	ldw	r18,0(r3)
 8028f84:	0029883a 	mov	r20,zero
 8028f88:	20015516 	blt	r4,zero,80294e0 <___svfiprintf_internal_r+0xf44>
 8028f8c:	00ffdfc4 	movi	r3,-129
 8028f90:	d8802415 	stw	r2,144(sp)
 8028f94:	80e0703a 	and	r16,r16,r3
 8028f98:	002b883a 	mov	r21,zero
 8028f9c:	903e9e26 	beq	r18,zero,8028a18 <__alt_data_end+0xfffe9618>
 8028fa0:	00800244 	movi	r2,9
 8028fa4:	14bf6a36 	bltu	r2,r18,8028d50 <__alt_data_end+0xfffe9950>
 8028fa8:	94800c04 	addi	r18,r18,48
 8028fac:	dc8019c5 	stb	r18,103(sp)
 8028fb0:	dd002c17 	ldw	r20,176(sp)
 8028fb4:	dc4019c4 	addi	r17,sp,103
 8028fb8:	003e9c06 	br	8028a2c <__alt_data_end+0xfffe962c>
 8028fbc:	8821883a 	mov	r16,r17
 8028fc0:	dc402103 	ldbu	r17,132(sp)
 8028fc4:	b811883a 	mov	r8,r23
 8028fc8:	8c403fcc 	andi	r17,r17,255
 8028fcc:	8802571e 	bne	r17,zero,802992c <___svfiprintf_internal_r+0x1390>
 8028fd0:	84000414 	ori	r16,r16,16
 8028fd4:	8080080c 	andi	r2,r16,32
 8028fd8:	103ea91e 	bne	r2,zero,8028a80 <__alt_data_end+0xfffe9680>
 8028fdc:	8080040c 	andi	r2,r16,16
 8028fe0:	10018026 	beq	r2,zero,80295e4 <___svfiprintf_internal_r+0x1048>
 8028fe4:	d9402417 	ldw	r5,144(sp)
 8028fe8:	d8c02017 	ldw	r3,128(sp)
 8028fec:	d8001d85 	stb	zero,118(sp)
 8028ff0:	28800104 	addi	r2,r5,4
 8028ff4:	2c800017 	ldw	r18,0(r5)
 8028ff8:	0029883a 	mov	r20,zero
 8028ffc:	18018216 	blt	r3,zero,8029608 <___svfiprintf_internal_r+0x106c>
 8029000:	00ffdfc4 	movi	r3,-129
 8029004:	d8802415 	stw	r2,144(sp)
 8029008:	80e0703a 	and	r16,r16,r3
 802900c:	903ea81e 	bne	r18,zero,8028ab0 <__alt_data_end+0xfffe96b0>
 8029010:	d8802017 	ldw	r2,128(sp)
 8029014:	002b883a 	mov	r21,zero
 8029018:	1001f226 	beq	r2,zero,80297e4 <___svfiprintf_internal_r+0x1248>
 802901c:	0025883a 	mov	r18,zero
 8029020:	0029883a 	mov	r20,zero
 8029024:	003ea306 	br	8028ab4 <__alt_data_end+0xfffe96b4>
 8029028:	d8c01c17 	ldw	r3,112(sp)
 802902c:	d8801b17 	ldw	r2,108(sp)
 8029030:	d9001d87 	ldb	r4,118(sp)
 8029034:	20000b26 	beq	r4,zero,8029064 <___svfiprintf_internal_r+0xac8>
 8029038:	d9001d84 	addi	r4,sp,118
 802903c:	18c00044 	addi	r3,r3,1
 8029040:	10800044 	addi	r2,r2,1
 8029044:	41000015 	stw	r4,0(r8)
 8029048:	01000044 	movi	r4,1
 802904c:	41000115 	stw	r4,4(r8)
 8029050:	d8c01c15 	stw	r3,112(sp)
 8029054:	d8801b15 	stw	r2,108(sp)
 8029058:	010001c4 	movi	r4,7
 802905c:	2080f316 	blt	r4,r2,802942c <___svfiprintf_internal_r+0xe90>
 8029060:	42000204 	addi	r8,r8,8
 8029064:	d9402117 	ldw	r5,132(sp)
 8029068:	28000b26 	beq	r5,zero,8029098 <___svfiprintf_internal_r+0xafc>
 802906c:	d9001d04 	addi	r4,sp,116
 8029070:	18c00084 	addi	r3,r3,2
 8029074:	10800044 	addi	r2,r2,1
 8029078:	41000015 	stw	r4,0(r8)
 802907c:	01000084 	movi	r4,2
 8029080:	41000115 	stw	r4,4(r8)
 8029084:	d8c01c15 	stw	r3,112(sp)
 8029088:	d8801b15 	stw	r2,108(sp)
 802908c:	010001c4 	movi	r4,7
 8029090:	2080ef16 	blt	r4,r2,8029450 <___svfiprintf_internal_r+0xeb4>
 8029094:	42000204 	addi	r8,r8,8
 8029098:	d9402217 	ldw	r5,136(sp)
 802909c:	01002004 	movi	r4,128
 80290a0:	29008f26 	beq	r5,r4,80292e0 <___svfiprintf_internal_r+0xd44>
 80290a4:	d9002017 	ldw	r4,128(sp)
 80290a8:	252fc83a 	sub	r23,r4,r20
 80290ac:	05c0310e 	bge	zero,r23,8029174 <___svfiprintf_internal_r+0xbd8>
 80290b0:	07000404 	movi	fp,16
 80290b4:	e5c17d0e 	bge	fp,r23,80296ac <___svfiprintf_internal_r+0x1110>
 80290b8:	010200f4 	movhi	r4,2051
 80290bc:	2107a804 	addi	r4,r4,7840
 80290c0:	dc002015 	stw	r16,128(sp)
 80290c4:	dc402215 	stw	r17,136(sp)
 80290c8:	d9002115 	stw	r4,132(sp)
 80290cc:	b823883a 	mov	r17,r23
 80290d0:	054001c4 	movi	r21,7
 80290d4:	982f883a 	mov	r23,r19
 80290d8:	dc002717 	ldw	r16,156(sp)
 80290dc:	9027883a 	mov	r19,r18
 80290e0:	dc802317 	ldw	r18,140(sp)
 80290e4:	00000306 	br	80290f4 <___svfiprintf_internal_r+0xb58>
 80290e8:	8c7ffc04 	addi	r17,r17,-16
 80290ec:	42000204 	addi	r8,r8,8
 80290f0:	e440110e 	bge	fp,r17,8029138 <___svfiprintf_internal_r+0xb9c>
 80290f4:	18c00404 	addi	r3,r3,16
 80290f8:	10800044 	addi	r2,r2,1
 80290fc:	45800015 	stw	r22,0(r8)
 8029100:	47000115 	stw	fp,4(r8)
 8029104:	d8c01c15 	stw	r3,112(sp)
 8029108:	d8801b15 	stw	r2,108(sp)
 802910c:	a8bff60e 	bge	r21,r2,80290e8 <__alt_data_end+0xfffe9ce8>
 8029110:	d9801a04 	addi	r6,sp,104
 8029114:	900b883a 	mov	r5,r18
 8029118:	8009883a 	mov	r4,r16
 802911c:	80283cc0 	call	80283cc <__ssprint_r>
 8029120:	10005e1e 	bne	r2,zero,802929c <___svfiprintf_internal_r+0xd00>
 8029124:	8c7ffc04 	addi	r17,r17,-16
 8029128:	d8c01c17 	ldw	r3,112(sp)
 802912c:	d8801b17 	ldw	r2,108(sp)
 8029130:	d811883a 	mov	r8,sp
 8029134:	e47fef16 	blt	fp,r17,80290f4 <__alt_data_end+0xfffe9cf4>
 8029138:	9825883a 	mov	r18,r19
 802913c:	dc002017 	ldw	r16,128(sp)
 8029140:	b827883a 	mov	r19,r23
 8029144:	882f883a 	mov	r23,r17
 8029148:	dc402217 	ldw	r17,136(sp)
 802914c:	d9402117 	ldw	r5,132(sp)
 8029150:	1dc7883a 	add	r3,r3,r23
 8029154:	10800044 	addi	r2,r2,1
 8029158:	41400015 	stw	r5,0(r8)
 802915c:	45c00115 	stw	r23,4(r8)
 8029160:	d8c01c15 	stw	r3,112(sp)
 8029164:	d8801b15 	stw	r2,108(sp)
 8029168:	010001c4 	movi	r4,7
 802916c:	2080a616 	blt	r4,r2,8029408 <___svfiprintf_internal_r+0xe6c>
 8029170:	42000204 	addi	r8,r8,8
 8029174:	a0c7883a 	add	r3,r20,r3
 8029178:	10800044 	addi	r2,r2,1
 802917c:	44400015 	stw	r17,0(r8)
 8029180:	45000115 	stw	r20,4(r8)
 8029184:	d8c01c15 	stw	r3,112(sp)
 8029188:	d8801b15 	stw	r2,108(sp)
 802918c:	010001c4 	movi	r4,7
 8029190:	20808816 	blt	r4,r2,80293b4 <___svfiprintf_internal_r+0xe18>
 8029194:	42000204 	addi	r8,r8,8
 8029198:	8400010c 	andi	r16,r16,4
 802919c:	80002c26 	beq	r16,zero,8029250 <___svfiprintf_internal_r+0xcb4>
 80291a0:	d8802517 	ldw	r2,148(sp)
 80291a4:	14a1c83a 	sub	r16,r2,r18
 80291a8:	0400290e 	bge	zero,r16,8029250 <___svfiprintf_internal_r+0xcb4>
 80291ac:	04400404 	movi	r17,16
 80291b0:	d8801b17 	ldw	r2,108(sp)
 80291b4:	8c01a70e 	bge	r17,r16,8029854 <___svfiprintf_internal_r+0x12b8>
 80291b8:	014200f4 	movhi	r5,2051
 80291bc:	2947ac04 	addi	r5,r5,7856
 80291c0:	d9402815 	stw	r5,160(sp)
 80291c4:	050001c4 	movi	r20,7
 80291c8:	dd402717 	ldw	r21,156(sp)
 80291cc:	ddc02317 	ldw	r23,140(sp)
 80291d0:	00000306 	br	80291e0 <___svfiprintf_internal_r+0xc44>
 80291d4:	843ffc04 	addi	r16,r16,-16
 80291d8:	42000204 	addi	r8,r8,8
 80291dc:	8c00130e 	bge	r17,r16,802922c <___svfiprintf_internal_r+0xc90>
 80291e0:	010200f4 	movhi	r4,2051
 80291e4:	18c00404 	addi	r3,r3,16
 80291e8:	10800044 	addi	r2,r2,1
 80291ec:	2107ac04 	addi	r4,r4,7856
 80291f0:	41000015 	stw	r4,0(r8)
 80291f4:	44400115 	stw	r17,4(r8)
 80291f8:	d8c01c15 	stw	r3,112(sp)
 80291fc:	d8801b15 	stw	r2,108(sp)
 8029200:	a0bff40e 	bge	r20,r2,80291d4 <__alt_data_end+0xfffe9dd4>
 8029204:	d9801a04 	addi	r6,sp,104
 8029208:	b80b883a 	mov	r5,r23
 802920c:	a809883a 	mov	r4,r21
 8029210:	80283cc0 	call	80283cc <__ssprint_r>
 8029214:	1000211e 	bne	r2,zero,802929c <___svfiprintf_internal_r+0xd00>
 8029218:	843ffc04 	addi	r16,r16,-16
 802921c:	d8c01c17 	ldw	r3,112(sp)
 8029220:	d8801b17 	ldw	r2,108(sp)
 8029224:	d811883a 	mov	r8,sp
 8029228:	8c3fed16 	blt	r17,r16,80291e0 <__alt_data_end+0xfffe9de0>
 802922c:	d9402817 	ldw	r5,160(sp)
 8029230:	1c07883a 	add	r3,r3,r16
 8029234:	10800044 	addi	r2,r2,1
 8029238:	41400015 	stw	r5,0(r8)
 802923c:	44000115 	stw	r16,4(r8)
 8029240:	d8c01c15 	stw	r3,112(sp)
 8029244:	d8801b15 	stw	r2,108(sp)
 8029248:	010001c4 	movi	r4,7
 802924c:	2080b516 	blt	r4,r2,8029524 <___svfiprintf_internal_r+0xf88>
 8029250:	d8802517 	ldw	r2,148(sp)
 8029254:	1480010e 	bge	r2,r18,802925c <___svfiprintf_internal_r+0xcc0>
 8029258:	9005883a 	mov	r2,r18
 802925c:	d9002617 	ldw	r4,152(sp)
 8029260:	2089883a 	add	r4,r4,r2
 8029264:	d9002615 	stw	r4,152(sp)
 8029268:	18005a1e 	bne	r3,zero,80293d4 <___svfiprintf_internal_r+0xe38>
 802926c:	98800007 	ldb	r2,0(r19)
 8029270:	d8001b15 	stw	zero,108(sp)
 8029274:	d811883a 	mov	r8,sp
 8029278:	103cec1e 	bne	r2,zero,802862c <__alt_data_end+0xfffe922c>
 802927c:	9825883a 	mov	r18,r19
 8029280:	003d0206 	br	802868c <__alt_data_end+0xfffe928c>
 8029284:	d8801c17 	ldw	r2,112(sp)
 8029288:	10000426 	beq	r2,zero,802929c <___svfiprintf_internal_r+0xd00>
 802928c:	d9402317 	ldw	r5,140(sp)
 8029290:	d9002717 	ldw	r4,156(sp)
 8029294:	d9801a04 	addi	r6,sp,104
 8029298:	80283cc0 	call	80283cc <__ssprint_r>
 802929c:	d9402317 	ldw	r5,140(sp)
 80292a0:	d8802617 	ldw	r2,152(sp)
 80292a4:	28c0030b 	ldhu	r3,12(r5)
 80292a8:	18c0100c 	andi	r3,r3,64
 80292ac:	18015c1e 	bne	r3,zero,8029820 <___svfiprintf_internal_r+0x1284>
 80292b0:	dfc03717 	ldw	ra,220(sp)
 80292b4:	df003617 	ldw	fp,216(sp)
 80292b8:	ddc03517 	ldw	r23,212(sp)
 80292bc:	dd803417 	ldw	r22,208(sp)
 80292c0:	dd403317 	ldw	r21,204(sp)
 80292c4:	dd003217 	ldw	r20,200(sp)
 80292c8:	dcc03117 	ldw	r19,196(sp)
 80292cc:	dc803017 	ldw	r18,192(sp)
 80292d0:	dc402f17 	ldw	r17,188(sp)
 80292d4:	dc002e17 	ldw	r16,184(sp)
 80292d8:	dec03804 	addi	sp,sp,224
 80292dc:	f800283a 	ret
 80292e0:	d9002517 	ldw	r4,148(sp)
 80292e4:	24afc83a 	sub	r23,r4,r18
 80292e8:	05ff6e0e 	bge	zero,r23,80290a4 <__alt_data_end+0xfffe9ca4>
 80292ec:	07000404 	movi	fp,16
 80292f0:	e5c15c0e 	bge	fp,r23,8029864 <___svfiprintf_internal_r+0x12c8>
 80292f4:	010200f4 	movhi	r4,2051
 80292f8:	2107a804 	addi	r4,r4,7840
 80292fc:	dc002215 	stw	r16,136(sp)
 8029300:	dc402815 	stw	r17,160(sp)
 8029304:	d9002115 	stw	r4,132(sp)
 8029308:	b823883a 	mov	r17,r23
 802930c:	054001c4 	movi	r21,7
 8029310:	982f883a 	mov	r23,r19
 8029314:	dc002717 	ldw	r16,156(sp)
 8029318:	9027883a 	mov	r19,r18
 802931c:	dc802317 	ldw	r18,140(sp)
 8029320:	00000306 	br	8029330 <___svfiprintf_internal_r+0xd94>
 8029324:	8c7ffc04 	addi	r17,r17,-16
 8029328:	42000204 	addi	r8,r8,8
 802932c:	e440110e 	bge	fp,r17,8029374 <___svfiprintf_internal_r+0xdd8>
 8029330:	18c00404 	addi	r3,r3,16
 8029334:	10800044 	addi	r2,r2,1
 8029338:	45800015 	stw	r22,0(r8)
 802933c:	47000115 	stw	fp,4(r8)
 8029340:	d8c01c15 	stw	r3,112(sp)
 8029344:	d8801b15 	stw	r2,108(sp)
 8029348:	a8bff60e 	bge	r21,r2,8029324 <__alt_data_end+0xfffe9f24>
 802934c:	d9801a04 	addi	r6,sp,104
 8029350:	900b883a 	mov	r5,r18
 8029354:	8009883a 	mov	r4,r16
 8029358:	80283cc0 	call	80283cc <__ssprint_r>
 802935c:	103fcf1e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 8029360:	8c7ffc04 	addi	r17,r17,-16
 8029364:	d8c01c17 	ldw	r3,112(sp)
 8029368:	d8801b17 	ldw	r2,108(sp)
 802936c:	d811883a 	mov	r8,sp
 8029370:	e47fef16 	blt	fp,r17,8029330 <__alt_data_end+0xfffe9f30>
 8029374:	9825883a 	mov	r18,r19
 8029378:	dc002217 	ldw	r16,136(sp)
 802937c:	b827883a 	mov	r19,r23
 8029380:	882f883a 	mov	r23,r17
 8029384:	dc402817 	ldw	r17,160(sp)
 8029388:	d9402117 	ldw	r5,132(sp)
 802938c:	1dc7883a 	add	r3,r3,r23
 8029390:	10800044 	addi	r2,r2,1
 8029394:	41400015 	stw	r5,0(r8)
 8029398:	45c00115 	stw	r23,4(r8)
 802939c:	d8c01c15 	stw	r3,112(sp)
 80293a0:	d8801b15 	stw	r2,108(sp)
 80293a4:	010001c4 	movi	r4,7
 80293a8:	2080b716 	blt	r4,r2,8029688 <___svfiprintf_internal_r+0x10ec>
 80293ac:	42000204 	addi	r8,r8,8
 80293b0:	003f3c06 	br	80290a4 <__alt_data_end+0xfffe9ca4>
 80293b4:	d9402317 	ldw	r5,140(sp)
 80293b8:	d9002717 	ldw	r4,156(sp)
 80293bc:	d9801a04 	addi	r6,sp,104
 80293c0:	80283cc0 	call	80283cc <__ssprint_r>
 80293c4:	103fb51e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 80293c8:	d8c01c17 	ldw	r3,112(sp)
 80293cc:	d811883a 	mov	r8,sp
 80293d0:	003f7106 	br	8029198 <__alt_data_end+0xfffe9d98>
 80293d4:	d9402317 	ldw	r5,140(sp)
 80293d8:	d9002717 	ldw	r4,156(sp)
 80293dc:	d9801a04 	addi	r6,sp,104
 80293e0:	80283cc0 	call	80283cc <__ssprint_r>
 80293e4:	103fa126 	beq	r2,zero,802926c <__alt_data_end+0xfffe9e6c>
 80293e8:	003fac06 	br	802929c <__alt_data_end+0xfffe9e9c>
 80293ec:	d9402317 	ldw	r5,140(sp)
 80293f0:	d9002717 	ldw	r4,156(sp)
 80293f4:	d9801a04 	addi	r6,sp,104
 80293f8:	80283cc0 	call	80283cc <__ssprint_r>
 80293fc:	103fa71e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 8029400:	d811883a 	mov	r8,sp
 8029404:	003c9e06 	br	8028680 <__alt_data_end+0xfffe9280>
 8029408:	d9402317 	ldw	r5,140(sp)
 802940c:	d9002717 	ldw	r4,156(sp)
 8029410:	d9801a04 	addi	r6,sp,104
 8029414:	80283cc0 	call	80283cc <__ssprint_r>
 8029418:	103fa01e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 802941c:	d8c01c17 	ldw	r3,112(sp)
 8029420:	d8801b17 	ldw	r2,108(sp)
 8029424:	d811883a 	mov	r8,sp
 8029428:	003f5206 	br	8029174 <__alt_data_end+0xfffe9d74>
 802942c:	d9402317 	ldw	r5,140(sp)
 8029430:	d9002717 	ldw	r4,156(sp)
 8029434:	d9801a04 	addi	r6,sp,104
 8029438:	80283cc0 	call	80283cc <__ssprint_r>
 802943c:	103f971e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 8029440:	d8c01c17 	ldw	r3,112(sp)
 8029444:	d8801b17 	ldw	r2,108(sp)
 8029448:	d811883a 	mov	r8,sp
 802944c:	003f0506 	br	8029064 <__alt_data_end+0xfffe9c64>
 8029450:	d9402317 	ldw	r5,140(sp)
 8029454:	d9002717 	ldw	r4,156(sp)
 8029458:	d9801a04 	addi	r6,sp,104
 802945c:	80283cc0 	call	80283cc <__ssprint_r>
 8029460:	103f8e1e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 8029464:	d8c01c17 	ldw	r3,112(sp)
 8029468:	d8801b17 	ldw	r2,108(sp)
 802946c:	d811883a 	mov	r8,sp
 8029470:	003f0906 	br	8029098 <__alt_data_end+0xfffe9c98>
 8029474:	d9402017 	ldw	r5,128(sp)
 8029478:	d8001d85 	stb	zero,118(sp)
 802947c:	28007716 	blt	r5,zero,802965c <___svfiprintf_internal_r+0x10c0>
 8029480:	00ffdfc4 	movi	r3,-129
 8029484:	9504b03a 	or	r2,r18,r20
 8029488:	80e0703a 	and	r16,r16,r3
 802948c:	103d3926 	beq	r2,zero,8028974 <__alt_data_end+0xfffe9574>
 8029490:	002b883a 	mov	r21,zero
 8029494:	003d3c06 	br	8028988 <__alt_data_end+0xfffe9588>
 8029498:	d9402317 	ldw	r5,140(sp)
 802949c:	d9002717 	ldw	r4,156(sp)
 80294a0:	d9801a04 	addi	r6,sp,104
 80294a4:	80283cc0 	call	80283cc <__ssprint_r>
 80294a8:	103f7c1e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 80294ac:	d8c01c17 	ldw	r3,112(sp)
 80294b0:	d8801b17 	ldw	r2,108(sp)
 80294b4:	d811883a 	mov	r8,sp
 80294b8:	003edd06 	br	8029030 <__alt_data_end+0xfffe9c30>
 80294bc:	8080100c 	andi	r2,r16,64
 80294c0:	d8001d85 	stb	zero,118(sp)
 80294c4:	10008426 	beq	r2,zero,80296d8 <___svfiprintf_internal_r+0x113c>
 80294c8:	d9402417 	ldw	r5,144(sp)
 80294cc:	d8c02017 	ldw	r3,128(sp)
 80294d0:	0029883a 	mov	r20,zero
 80294d4:	28800104 	addi	r2,r5,4
 80294d8:	2c80000b 	ldhu	r18,0(r5)
 80294dc:	183eab0e 	bge	r3,zero,8028f8c <__alt_data_end+0xfffe9b8c>
 80294e0:	d8802415 	stw	r2,144(sp)
 80294e4:	002b883a 	mov	r21,zero
 80294e8:	9504b03a 	or	r2,r18,r20
 80294ec:	103e171e 	bne	r2,zero,8028d4c <__alt_data_end+0xfffe994c>
 80294f0:	00800044 	movi	r2,1
 80294f4:	10803fcc 	andi	r2,r2,255
 80294f8:	00c00044 	movi	r3,1
 80294fc:	10c05c26 	beq	r2,r3,8029670 <___svfiprintf_internal_r+0x10d4>
 8029500:	00c00084 	movi	r3,2
 8029504:	10fd1e26 	beq	r2,r3,8028980 <__alt_data_end+0xfffe9580>
 8029508:	003ec406 	br	802901c <__alt_data_end+0xfffe9c1c>
 802950c:	d9401e17 	ldw	r5,120(sp)
 8029510:	2c69c83a 	sub	r20,r5,r17
 8029514:	003d4506 	br	8028a2c <__alt_data_end+0xfffe962c>
 8029518:	d8802415 	stw	r2,144(sp)
 802951c:	98c00007 	ldb	r3,0(r19)
 8029520:	003c6a06 	br	80286cc <__alt_data_end+0xfffe92cc>
 8029524:	d9402317 	ldw	r5,140(sp)
 8029528:	d9002717 	ldw	r4,156(sp)
 802952c:	d9801a04 	addi	r6,sp,104
 8029530:	80283cc0 	call	80283cc <__ssprint_r>
 8029534:	103f591e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 8029538:	d8c01c17 	ldw	r3,112(sp)
 802953c:	003f4406 	br	8029250 <__alt_data_end+0xfffe9e50>
 8029540:	014200f4 	movhi	r5,2051
 8029544:	29474704 	addi	r5,r5,7452
 8029548:	d9402915 	stw	r5,164(sp)
 802954c:	003d0906 	br	8028974 <__alt_data_end+0xfffe9574>
 8029550:	d8c02417 	ldw	r3,144(sp)
 8029554:	d9002617 	ldw	r4,152(sp)
 8029558:	d9402417 	ldw	r5,144(sp)
 802955c:	18800017 	ldw	r2,0(r3)
 8029560:	2007d7fa 	srai	r3,r4,31
 8029564:	29400104 	addi	r5,r5,4
 8029568:	d9402415 	stw	r5,144(sp)
 802956c:	11000015 	stw	r4,0(r2)
 8029570:	10c00115 	stw	r3,4(r2)
 8029574:	003c2b06 	br	8028624 <__alt_data_end+0xfffe9224>
 8029578:	d8c01d45 	stb	r3,117(sp)
 802957c:	d8c02017 	ldw	r3,128(sp)
 8029580:	00800c04 	movi	r2,48
 8029584:	d8801d05 	stb	r2,116(sp)
 8029588:	d8001d85 	stb	zero,118(sp)
 802958c:	80800094 	ori	r2,r16,2
 8029590:	1800ac16 	blt	r3,zero,8029844 <___svfiprintf_internal_r+0x12a8>
 8029594:	00bfdfc4 	movi	r2,-129
 8029598:	80a0703a 	and	r16,r16,r2
 802959c:	84000094 	ori	r16,r16,2
 80295a0:	002b883a 	mov	r21,zero
 80295a4:	003cf806 	br	8028988 <__alt_data_end+0xfffe9588>
 80295a8:	98c00007 	ldb	r3,0(r19)
 80295ac:	003c4706 	br	80286cc <__alt_data_end+0xfffe92cc>
 80295b0:	d9402417 	ldw	r5,144(sp)
 80295b4:	2c800017 	ldw	r18,0(r5)
 80295b8:	29400104 	addi	r5,r5,4
 80295bc:	d9402415 	stw	r5,144(sp)
 80295c0:	9029d7fa 	srai	r20,r18,31
 80295c4:	a005883a 	mov	r2,r20
 80295c8:	003dd806 	br	8028d2c <__alt_data_end+0xfffe992c>
 80295cc:	d9402417 	ldw	r5,144(sp)
 80295d0:	0029883a 	mov	r20,zero
 80295d4:	2c800017 	ldw	r18,0(r5)
 80295d8:	29400104 	addi	r5,r5,4
 80295dc:	d9402415 	stw	r5,144(sp)
 80295e0:	003cdb06 	br	8028950 <__alt_data_end+0xfffe9550>
 80295e4:	8080100c 	andi	r2,r16,64
 80295e8:	d8001d85 	stb	zero,118(sp)
 80295ec:	10003326 	beq	r2,zero,80296bc <___svfiprintf_internal_r+0x1120>
 80295f0:	d9002417 	ldw	r4,144(sp)
 80295f4:	d9402017 	ldw	r5,128(sp)
 80295f8:	0029883a 	mov	r20,zero
 80295fc:	20800104 	addi	r2,r4,4
 8029600:	2480000b 	ldhu	r18,0(r4)
 8029604:	283e7e0e 	bge	r5,zero,8029000 <__alt_data_end+0xfffe9c00>
 8029608:	9506b03a 	or	r3,r18,r20
 802960c:	d8802415 	stw	r2,144(sp)
 8029610:	183d271e 	bne	r3,zero,8028ab0 <__alt_data_end+0xfffe96b0>
 8029614:	002b883a 	mov	r21,zero
 8029618:	0005883a 	mov	r2,zero
 802961c:	003fb506 	br	80294f4 <__alt_data_end+0xfffea0f4>
 8029620:	98c00043 	ldbu	r3,1(r19)
 8029624:	8c400814 	ori	r17,r17,32
 8029628:	9cc00044 	addi	r19,r19,1
 802962c:	18c03fcc 	andi	r3,r3,255
 8029630:	18c0201c 	xori	r3,r3,128
 8029634:	18ffe004 	addi	r3,r3,-128
 8029638:	003c2406 	br	80286cc <__alt_data_end+0xfffe92cc>
 802963c:	d8c02415 	stw	r3,144(sp)
 8029640:	002b883a 	mov	r21,zero
 8029644:	003fa806 	br	80294e8 <__alt_data_end+0xfffea0e8>
 8029648:	010200f4 	movhi	r4,2051
 802964c:	21074704 	addi	r4,r4,7452
 8029650:	d9002915 	stw	r4,164(sp)
 8029654:	d8c02415 	stw	r3,144(sp)
 8029658:	1021883a 	mov	r16,r2
 802965c:	9504b03a 	or	r2,r18,r20
 8029660:	103f8b1e 	bne	r2,zero,8029490 <__alt_data_end+0xfffea090>
 8029664:	002b883a 	mov	r21,zero
 8029668:	00800084 	movi	r2,2
 802966c:	003fa106 	br	80294f4 <__alt_data_end+0xfffea0f4>
 8029670:	0025883a 	mov	r18,zero
 8029674:	94800c04 	addi	r18,r18,48
 8029678:	dc8019c5 	stb	r18,103(sp)
 802967c:	dd002c17 	ldw	r20,176(sp)
 8029680:	dc4019c4 	addi	r17,sp,103
 8029684:	003ce906 	br	8028a2c <__alt_data_end+0xfffe962c>
 8029688:	d9402317 	ldw	r5,140(sp)
 802968c:	d9002717 	ldw	r4,156(sp)
 8029690:	d9801a04 	addi	r6,sp,104
 8029694:	80283cc0 	call	80283cc <__ssprint_r>
 8029698:	103f001e 	bne	r2,zero,802929c <__alt_data_end+0xfffe9e9c>
 802969c:	d8c01c17 	ldw	r3,112(sp)
 80296a0:	d8801b17 	ldw	r2,108(sp)
 80296a4:	d811883a 	mov	r8,sp
 80296a8:	003e7e06 	br	80290a4 <__alt_data_end+0xfffe9ca4>
 80296ac:	014200f4 	movhi	r5,2051
 80296b0:	2947a804 	addi	r5,r5,7840
 80296b4:	d9402115 	stw	r5,132(sp)
 80296b8:	003ea406 	br	802914c <__alt_data_end+0xfffe9d4c>
 80296bc:	d8c02417 	ldw	r3,144(sp)
 80296c0:	d9002017 	ldw	r4,128(sp)
 80296c4:	0029883a 	mov	r20,zero
 80296c8:	18800104 	addi	r2,r3,4
 80296cc:	1c800017 	ldw	r18,0(r3)
 80296d0:	203e4b0e 	bge	r4,zero,8029000 <__alt_data_end+0xfffe9c00>
 80296d4:	003fcc06 	br	8029608 <__alt_data_end+0xfffea208>
 80296d8:	d9002417 	ldw	r4,144(sp)
 80296dc:	d9402017 	ldw	r5,128(sp)
 80296e0:	0029883a 	mov	r20,zero
 80296e4:	20800104 	addi	r2,r4,4
 80296e8:	24800017 	ldw	r18,0(r4)
 80296ec:	283e270e 	bge	r5,zero,8028f8c <__alt_data_end+0xfffe9b8c>
 80296f0:	003f7b06 	br	80294e0 <__alt_data_end+0xfffea0e0>
 80296f4:	8400100c 	andi	r16,r16,64
 80296f8:	80003326 	beq	r16,zero,80297c8 <___svfiprintf_internal_r+0x122c>
 80296fc:	d9402417 	ldw	r5,144(sp)
 8029700:	d8c02617 	ldw	r3,152(sp)
 8029704:	28800017 	ldw	r2,0(r5)
 8029708:	29400104 	addi	r5,r5,4
 802970c:	d9402415 	stw	r5,144(sp)
 8029710:	10c0000d 	sth	r3,0(r2)
 8029714:	003bc306 	br	8028624 <__alt_data_end+0xfffe9224>
 8029718:	d9002417 	ldw	r4,144(sp)
 802971c:	0029883a 	mov	r20,zero
 8029720:	24800017 	ldw	r18,0(r4)
 8029724:	21000104 	addi	r4,r4,4
 8029728:	d9002415 	stw	r4,144(sp)
 802972c:	003c8806 	br	8028950 <__alt_data_end+0xfffe9550>
 8029730:	d8c02417 	ldw	r3,144(sp)
 8029734:	1c800017 	ldw	r18,0(r3)
 8029738:	18c00104 	addi	r3,r3,4
 802973c:	d8c02415 	stw	r3,144(sp)
 8029740:	9029d7fa 	srai	r20,r18,31
 8029744:	a005883a 	mov	r2,r20
 8029748:	003d7806 	br	8028d2c <__alt_data_end+0xfffe992c>
 802974c:	8809883a 	mov	r4,r17
 8029750:	da002d15 	stw	r8,180(sp)
 8029754:	802187c0 	call	802187c <strlen>
 8029758:	1029883a 	mov	r20,r2
 802975c:	dd401d83 	ldbu	r21,118(sp)
 8029760:	ddc02415 	stw	r23,144(sp)
 8029764:	d8002015 	stw	zero,128(sp)
 8029768:	da002d17 	ldw	r8,180(sp)
 802976c:	003caf06 	br	8028a2c <__alt_data_end+0xfffe962c>
 8029770:	013fffc4 	movi	r4,-1
 8029774:	003df206 	br	8028f40 <__alt_data_end+0xfffe9b40>
 8029778:	dd002017 	ldw	r20,128(sp)
 802977c:	00800184 	movi	r2,6
 8029780:	1500012e 	bgeu	r2,r20,8029788 <___svfiprintf_internal_r+0x11ec>
 8029784:	1029883a 	mov	r20,r2
 8029788:	a025883a 	mov	r18,r20
 802978c:	a0004116 	blt	r20,zero,8029894 <___svfiprintf_internal_r+0x12f8>
 8029790:	044200f4 	movhi	r17,2051
 8029794:	ddc02415 	stw	r23,144(sp)
 8029798:	8c474c04 	addi	r17,r17,7472
 802979c:	003ce806 	br	8028b40 <__alt_data_end+0xfffe9740>
 80297a0:	04001004 	movi	r16,64
 80297a4:	800b883a 	mov	r5,r16
 80297a8:	8025f5c0 	call	8025f5c <_malloc_r>
 80297ac:	d8c02317 	ldw	r3,140(sp)
 80297b0:	18800015 	stw	r2,0(r3)
 80297b4:	18800415 	stw	r2,16(r3)
 80297b8:	10004d26 	beq	r2,zero,80298f0 <___svfiprintf_internal_r+0x1354>
 80297bc:	d9402317 	ldw	r5,140(sp)
 80297c0:	2c000515 	stw	r16,20(r5)
 80297c4:	003b8906 	br	80285ec <__alt_data_end+0xfffe91ec>
 80297c8:	d9002417 	ldw	r4,144(sp)
 80297cc:	d9402617 	ldw	r5,152(sp)
 80297d0:	20800017 	ldw	r2,0(r4)
 80297d4:	21000104 	addi	r4,r4,4
 80297d8:	d9002415 	stw	r4,144(sp)
 80297dc:	11400015 	stw	r5,0(r2)
 80297e0:	003b9006 	br	8028624 <__alt_data_end+0xfffe9224>
 80297e4:	8080004c 	andi	r2,r16,1
 80297e8:	002b883a 	mov	r21,zero
 80297ec:	10000526 	beq	r2,zero,8029804 <___svfiprintf_internal_r+0x1268>
 80297f0:	00800c04 	movi	r2,48
 80297f4:	d88019c5 	stb	r2,103(sp)
 80297f8:	dd002c17 	ldw	r20,176(sp)
 80297fc:	dc4019c4 	addi	r17,sp,103
 8029800:	003c8a06 	br	8028a2c <__alt_data_end+0xfffe962c>
 8029804:	0029883a 	mov	r20,zero
 8029808:	dc401a04 	addi	r17,sp,104
 802980c:	003c8706 	br	8028a2c <__alt_data_end+0xfffe962c>
 8029810:	014200f4 	movhi	r5,2051
 8029814:	2947ac04 	addi	r5,r5,7856
 8029818:	d9402815 	stw	r5,160(sp)
 802981c:	003cff06 	br	8028c1c <__alt_data_end+0xfffe981c>
 8029820:	00bfffc4 	movi	r2,-1
 8029824:	003ea206 	br	80292b0 <__alt_data_end+0xfffe9eb0>
 8029828:	00800044 	movi	r2,1
 802982c:	10803fcc 	andi	r2,r2,255
 8029830:	00c00044 	movi	r3,1
 8029834:	10fd4526 	beq	r2,r3,8028d4c <__alt_data_end+0xfffe994c>
 8029838:	00c00084 	movi	r3,2
 802983c:	10fc5226 	beq	r2,r3,8028988 <__alt_data_end+0xfffe9588>
 8029840:	003c9c06 	br	8028ab4 <__alt_data_end+0xfffe96b4>
 8029844:	1021883a 	mov	r16,r2
 8029848:	002b883a 	mov	r21,zero
 802984c:	00800084 	movi	r2,2
 8029850:	003ff606 	br	802982c <__alt_data_end+0xfffea42c>
 8029854:	010200f4 	movhi	r4,2051
 8029858:	2107ac04 	addi	r4,r4,7856
 802985c:	d9002815 	stw	r4,160(sp)
 8029860:	003e7206 	br	802922c <__alt_data_end+0xfffe9e2c>
 8029864:	014200f4 	movhi	r5,2051
 8029868:	2947a804 	addi	r5,r5,7840
 802986c:	d9402115 	stw	r5,132(sp)
 8029870:	003ec506 	br	8029388 <__alt_data_end+0xfffe9f88>
 8029874:	e027883a 	mov	r19,fp
 8029878:	d8002015 	stw	zero,128(sp)
 802987c:	003b9406 	br	80286d0 <__alt_data_end+0xfffe92d0>
 8029880:	dd002017 	ldw	r20,128(sp)
 8029884:	dd401d83 	ldbu	r21,118(sp)
 8029888:	ddc02415 	stw	r23,144(sp)
 802988c:	d8002015 	stw	zero,128(sp)
 8029890:	003c6606 	br	8028a2c <__alt_data_end+0xfffe962c>
 8029894:	0025883a 	mov	r18,zero
 8029898:	003fbd06 	br	8029790 <__alt_data_end+0xfffea390>
 802989c:	d9402417 	ldw	r5,144(sp)
 80298a0:	d8c02417 	ldw	r3,144(sp)
 80298a4:	29400017 	ldw	r5,0(r5)
 80298a8:	19000104 	addi	r4,r3,4
 80298ac:	d9002415 	stw	r4,144(sp)
 80298b0:	d9402015 	stw	r5,128(sp)
 80298b4:	98c00043 	ldbu	r3,1(r19)
 80298b8:	e027883a 	mov	r19,fp
 80298bc:	283f5b0e 	bge	r5,zero,802962c <__alt_data_end+0xfffea22c>
 80298c0:	18c03fcc 	andi	r3,r3,255
 80298c4:	013fffc4 	movi	r4,-1
 80298c8:	18c0201c 	xori	r3,r3,128
 80298cc:	d9002015 	stw	r4,128(sp)
 80298d0:	18ffe004 	addi	r3,r3,-128
 80298d4:	003b7d06 	br	80286cc <__alt_data_end+0xfffe92cc>
 80298d8:	dd401d85 	stb	r21,118(sp)
 80298dc:	003cf306 	br	8028cac <__alt_data_end+0xfffe98ac>
 80298e0:	dd401d85 	stb	r21,118(sp)
 80298e4:	003d4e06 	br	8028e20 <__alt_data_end+0xfffe9a20>
 80298e8:	dd401d85 	stb	r21,118(sp)
 80298ec:	003c0e06 	br	8028928 <__alt_data_end+0xfffe9528>
 80298f0:	d9002717 	ldw	r4,156(sp)
 80298f4:	00800304 	movi	r2,12
 80298f8:	20800015 	stw	r2,0(r4)
 80298fc:	00bfffc4 	movi	r2,-1
 8029900:	003e6b06 	br	80292b0 <__alt_data_end+0xfffe9eb0>
 8029904:	dd401d85 	stb	r21,118(sp)
 8029908:	003d0006 	br	8028d0c <__alt_data_end+0xfffe990c>
 802990c:	dd401d85 	stb	r21,118(sp)
 8029910:	003d7106 	br	8028ed8 <__alt_data_end+0xfffe9ad8>
 8029914:	dd401d85 	stb	r21,118(sp)
 8029918:	003c5706 	br	8028a78 <__alt_data_end+0xfffe9678>
 802991c:	dd401d85 	stb	r21,118(sp)
 8029920:	003c2e06 	br	80289dc <__alt_data_end+0xfffe95dc>
 8029924:	dd401d85 	stb	r21,118(sp)
 8029928:	003d8c06 	br	8028f5c <__alt_data_end+0xfffe9b5c>
 802992c:	dd401d85 	stb	r21,118(sp)
 8029930:	003da706 	br	8028fd0 <__alt_data_end+0xfffe9bd0>
 8029934:	dd401d85 	stb	r21,118(sp)
 8029938:	003cc806 	br	8028c5c <__alt_data_end+0xfffe985c>

0802993c <_write_r>:
 802993c:	defffd04 	addi	sp,sp,-12
 8029940:	2805883a 	mov	r2,r5
 8029944:	dc000015 	stw	r16,0(sp)
 8029948:	040200f4 	movhi	r16,2051
 802994c:	dc400115 	stw	r17,4(sp)
 8029950:	300b883a 	mov	r5,r6
 8029954:	8415e404 	addi	r16,r16,22416
 8029958:	2023883a 	mov	r17,r4
 802995c:	380d883a 	mov	r6,r7
 8029960:	1009883a 	mov	r4,r2
 8029964:	dfc00215 	stw	ra,8(sp)
 8029968:	80000015 	stw	zero,0(r16)
 802996c:	802e8d80 	call	802e8d8 <write>
 8029970:	00ffffc4 	movi	r3,-1
 8029974:	10c00526 	beq	r2,r3,802998c <_write_r+0x50>
 8029978:	dfc00217 	ldw	ra,8(sp)
 802997c:	dc400117 	ldw	r17,4(sp)
 8029980:	dc000017 	ldw	r16,0(sp)
 8029984:	dec00304 	addi	sp,sp,12
 8029988:	f800283a 	ret
 802998c:	80c00017 	ldw	r3,0(r16)
 8029990:	183ff926 	beq	r3,zero,8029978 <__alt_data_end+0xfffea578>
 8029994:	88c00015 	stw	r3,0(r17)
 8029998:	003ff706 	br	8029978 <__alt_data_end+0xfffea578>

0802999c <__swsetup_r>:
 802999c:	008200f4 	movhi	r2,2051
 80299a0:	defffd04 	addi	sp,sp,-12
 80299a4:	108eef04 	addi	r2,r2,15292
 80299a8:	dc400115 	stw	r17,4(sp)
 80299ac:	2023883a 	mov	r17,r4
 80299b0:	11000017 	ldw	r4,0(r2)
 80299b4:	dc000015 	stw	r16,0(sp)
 80299b8:	dfc00215 	stw	ra,8(sp)
 80299bc:	2821883a 	mov	r16,r5
 80299c0:	20000226 	beq	r4,zero,80299cc <__swsetup_r+0x30>
 80299c4:	20800e17 	ldw	r2,56(r4)
 80299c8:	10003126 	beq	r2,zero,8029a90 <__swsetup_r+0xf4>
 80299cc:	8080030b 	ldhu	r2,12(r16)
 80299d0:	10c0020c 	andi	r3,r2,8
 80299d4:	1009883a 	mov	r4,r2
 80299d8:	18000f26 	beq	r3,zero,8029a18 <__swsetup_r+0x7c>
 80299dc:	80c00417 	ldw	r3,16(r16)
 80299e0:	18001526 	beq	r3,zero,8029a38 <__swsetup_r+0x9c>
 80299e4:	1100004c 	andi	r4,r2,1
 80299e8:	20001c1e 	bne	r4,zero,8029a5c <__swsetup_r+0xc0>
 80299ec:	1080008c 	andi	r2,r2,2
 80299f0:	1000291e 	bne	r2,zero,8029a98 <__swsetup_r+0xfc>
 80299f4:	80800517 	ldw	r2,20(r16)
 80299f8:	80800215 	stw	r2,8(r16)
 80299fc:	18001c26 	beq	r3,zero,8029a70 <__swsetup_r+0xd4>
 8029a00:	0005883a 	mov	r2,zero
 8029a04:	dfc00217 	ldw	ra,8(sp)
 8029a08:	dc400117 	ldw	r17,4(sp)
 8029a0c:	dc000017 	ldw	r16,0(sp)
 8029a10:	dec00304 	addi	sp,sp,12
 8029a14:	f800283a 	ret
 8029a18:	2080040c 	andi	r2,r4,16
 8029a1c:	10002e26 	beq	r2,zero,8029ad8 <__swsetup_r+0x13c>
 8029a20:	2080010c 	andi	r2,r4,4
 8029a24:	10001e1e 	bne	r2,zero,8029aa0 <__swsetup_r+0x104>
 8029a28:	80c00417 	ldw	r3,16(r16)
 8029a2c:	20800214 	ori	r2,r4,8
 8029a30:	8080030d 	sth	r2,12(r16)
 8029a34:	183feb1e 	bne	r3,zero,80299e4 <__alt_data_end+0xfffea5e4>
 8029a38:	1100a00c 	andi	r4,r2,640
 8029a3c:	01408004 	movi	r5,512
 8029a40:	217fe826 	beq	r4,r5,80299e4 <__alt_data_end+0xfffea5e4>
 8029a44:	800b883a 	mov	r5,r16
 8029a48:	8809883a 	mov	r4,r17
 8029a4c:	802a4600 	call	802a460 <__smakebuf_r>
 8029a50:	8080030b 	ldhu	r2,12(r16)
 8029a54:	80c00417 	ldw	r3,16(r16)
 8029a58:	003fe206 	br	80299e4 <__alt_data_end+0xfffea5e4>
 8029a5c:	80800517 	ldw	r2,20(r16)
 8029a60:	80000215 	stw	zero,8(r16)
 8029a64:	0085c83a 	sub	r2,zero,r2
 8029a68:	80800615 	stw	r2,24(r16)
 8029a6c:	183fe41e 	bne	r3,zero,8029a00 <__alt_data_end+0xfffea600>
 8029a70:	80c0030b 	ldhu	r3,12(r16)
 8029a74:	0005883a 	mov	r2,zero
 8029a78:	1900200c 	andi	r4,r3,128
 8029a7c:	203fe126 	beq	r4,zero,8029a04 <__alt_data_end+0xfffea604>
 8029a80:	18c01014 	ori	r3,r3,64
 8029a84:	80c0030d 	sth	r3,12(r16)
 8029a88:	00bfffc4 	movi	r2,-1
 8029a8c:	003fdd06 	br	8029a04 <__alt_data_end+0xfffea604>
 8029a90:	80257e00 	call	80257e0 <__sinit>
 8029a94:	003fcd06 	br	80299cc <__alt_data_end+0xfffea5cc>
 8029a98:	0005883a 	mov	r2,zero
 8029a9c:	003fd606 	br	80299f8 <__alt_data_end+0xfffea5f8>
 8029aa0:	81400c17 	ldw	r5,48(r16)
 8029aa4:	28000626 	beq	r5,zero,8029ac0 <__swsetup_r+0x124>
 8029aa8:	80801004 	addi	r2,r16,64
 8029aac:	28800326 	beq	r5,r2,8029abc <__swsetup_r+0x120>
 8029ab0:	8809883a 	mov	r4,r17
 8029ab4:	802a0f00 	call	802a0f0 <_free_r>
 8029ab8:	8100030b 	ldhu	r4,12(r16)
 8029abc:	80000c15 	stw	zero,48(r16)
 8029ac0:	80c00417 	ldw	r3,16(r16)
 8029ac4:	00bff6c4 	movi	r2,-37
 8029ac8:	1108703a 	and	r4,r2,r4
 8029acc:	80000115 	stw	zero,4(r16)
 8029ad0:	80c00015 	stw	r3,0(r16)
 8029ad4:	003fd506 	br	8029a2c <__alt_data_end+0xfffea62c>
 8029ad8:	00800244 	movi	r2,9
 8029adc:	88800015 	stw	r2,0(r17)
 8029ae0:	20801014 	ori	r2,r4,64
 8029ae4:	8080030d 	sth	r2,12(r16)
 8029ae8:	00bfffc4 	movi	r2,-1
 8029aec:	003fc506 	br	8029a04 <__alt_data_end+0xfffea604>

08029af0 <_close_r>:
 8029af0:	defffd04 	addi	sp,sp,-12
 8029af4:	dc000015 	stw	r16,0(sp)
 8029af8:	040200f4 	movhi	r16,2051
 8029afc:	dc400115 	stw	r17,4(sp)
 8029b00:	8415e404 	addi	r16,r16,22416
 8029b04:	2023883a 	mov	r17,r4
 8029b08:	2809883a 	mov	r4,r5
 8029b0c:	dfc00215 	stw	ra,8(sp)
 8029b10:	80000015 	stw	zero,0(r16)
 8029b14:	802deac0 	call	802deac <close>
 8029b18:	00ffffc4 	movi	r3,-1
 8029b1c:	10c00526 	beq	r2,r3,8029b34 <_close_r+0x44>
 8029b20:	dfc00217 	ldw	ra,8(sp)
 8029b24:	dc400117 	ldw	r17,4(sp)
 8029b28:	dc000017 	ldw	r16,0(sp)
 8029b2c:	dec00304 	addi	sp,sp,12
 8029b30:	f800283a 	ret
 8029b34:	80c00017 	ldw	r3,0(r16)
 8029b38:	183ff926 	beq	r3,zero,8029b20 <__alt_data_end+0xfffea720>
 8029b3c:	88c00015 	stw	r3,0(r17)
 8029b40:	003ff706 	br	8029b20 <__alt_data_end+0xfffea720>

08029b44 <_calloc_r>:
 8029b44:	defffe04 	addi	sp,sp,-8
 8029b48:	2805883a 	mov	r2,r5
 8029b4c:	dc000015 	stw	r16,0(sp)
 8029b50:	300b883a 	mov	r5,r6
 8029b54:	2021883a 	mov	r16,r4
 8029b58:	1009883a 	mov	r4,r2
 8029b5c:	dfc00115 	stw	ra,4(sp)
 8029b60:	80214e80 	call	80214e8 <__mulsi3>
 8029b64:	100b883a 	mov	r5,r2
 8029b68:	8009883a 	mov	r4,r16
 8029b6c:	8025f5c0 	call	8025f5c <_malloc_r>
 8029b70:	10002926 	beq	r2,zero,8029c18 <_calloc_r+0xd4>
 8029b74:	11bfff17 	ldw	r6,-4(r2)
 8029b78:	1021883a 	mov	r16,r2
 8029b7c:	00bfff04 	movi	r2,-4
 8029b80:	308c703a 	and	r6,r6,r2
 8029b84:	00c00904 	movi	r3,36
 8029b88:	308d883a 	add	r6,r6,r2
 8029b8c:	19801636 	bltu	r3,r6,8029be8 <_calloc_r+0xa4>
 8029b90:	008004c4 	movi	r2,19
 8029b94:	11800b2e 	bgeu	r2,r6,8029bc4 <_calloc_r+0x80>
 8029b98:	80000015 	stw	zero,0(r16)
 8029b9c:	80000115 	stw	zero,4(r16)
 8029ba0:	008006c4 	movi	r2,27
 8029ba4:	11801a2e 	bgeu	r2,r6,8029c10 <_calloc_r+0xcc>
 8029ba8:	80000215 	stw	zero,8(r16)
 8029bac:	80000315 	stw	zero,12(r16)
 8029bb0:	30c0151e 	bne	r6,r3,8029c08 <_calloc_r+0xc4>
 8029bb4:	80000415 	stw	zero,16(r16)
 8029bb8:	80800604 	addi	r2,r16,24
 8029bbc:	80000515 	stw	zero,20(r16)
 8029bc0:	00000106 	br	8029bc8 <_calloc_r+0x84>
 8029bc4:	8005883a 	mov	r2,r16
 8029bc8:	10000015 	stw	zero,0(r2)
 8029bcc:	10000115 	stw	zero,4(r2)
 8029bd0:	10000215 	stw	zero,8(r2)
 8029bd4:	8005883a 	mov	r2,r16
 8029bd8:	dfc00117 	ldw	ra,4(sp)
 8029bdc:	dc000017 	ldw	r16,0(sp)
 8029be0:	dec00204 	addi	sp,sp,8
 8029be4:	f800283a 	ret
 8029be8:	000b883a 	mov	r5,zero
 8029bec:	8009883a 	mov	r4,r16
 8029bf0:	80269a80 	call	80269a8 <memset>
 8029bf4:	8005883a 	mov	r2,r16
 8029bf8:	dfc00117 	ldw	ra,4(sp)
 8029bfc:	dc000017 	ldw	r16,0(sp)
 8029c00:	dec00204 	addi	sp,sp,8
 8029c04:	f800283a 	ret
 8029c08:	80800404 	addi	r2,r16,16
 8029c0c:	003fee06 	br	8029bc8 <__alt_data_end+0xfffea7c8>
 8029c10:	80800204 	addi	r2,r16,8
 8029c14:	003fec06 	br	8029bc8 <__alt_data_end+0xfffea7c8>
 8029c18:	0005883a 	mov	r2,zero
 8029c1c:	003fee06 	br	8029bd8 <__alt_data_end+0xfffea7d8>

08029c20 <_fclose_r>:
 8029c20:	28003926 	beq	r5,zero,8029d08 <_fclose_r+0xe8>
 8029c24:	defffc04 	addi	sp,sp,-16
 8029c28:	dc400115 	stw	r17,4(sp)
 8029c2c:	dc000015 	stw	r16,0(sp)
 8029c30:	dfc00315 	stw	ra,12(sp)
 8029c34:	dc800215 	stw	r18,8(sp)
 8029c38:	2023883a 	mov	r17,r4
 8029c3c:	2821883a 	mov	r16,r5
 8029c40:	20000226 	beq	r4,zero,8029c4c <_fclose_r+0x2c>
 8029c44:	20800e17 	ldw	r2,56(r4)
 8029c48:	10002726 	beq	r2,zero,8029ce8 <_fclose_r+0xc8>
 8029c4c:	8080030f 	ldh	r2,12(r16)
 8029c50:	1000071e 	bne	r2,zero,8029c70 <_fclose_r+0x50>
 8029c54:	0005883a 	mov	r2,zero
 8029c58:	dfc00317 	ldw	ra,12(sp)
 8029c5c:	dc800217 	ldw	r18,8(sp)
 8029c60:	dc400117 	ldw	r17,4(sp)
 8029c64:	dc000017 	ldw	r16,0(sp)
 8029c68:	dec00404 	addi	sp,sp,16
 8029c6c:	f800283a 	ret
 8029c70:	800b883a 	mov	r5,r16
 8029c74:	8809883a 	mov	r4,r17
 8029c78:	8029d240 	call	8029d24 <__sflush_r>
 8029c7c:	1025883a 	mov	r18,r2
 8029c80:	80800b17 	ldw	r2,44(r16)
 8029c84:	10000426 	beq	r2,zero,8029c98 <_fclose_r+0x78>
 8029c88:	81400717 	ldw	r5,28(r16)
 8029c8c:	8809883a 	mov	r4,r17
 8029c90:	103ee83a 	callr	r2
 8029c94:	10001616 	blt	r2,zero,8029cf0 <_fclose_r+0xd0>
 8029c98:	8080030b 	ldhu	r2,12(r16)
 8029c9c:	1080200c 	andi	r2,r2,128
 8029ca0:	1000151e 	bne	r2,zero,8029cf8 <_fclose_r+0xd8>
 8029ca4:	81400c17 	ldw	r5,48(r16)
 8029ca8:	28000526 	beq	r5,zero,8029cc0 <_fclose_r+0xa0>
 8029cac:	80801004 	addi	r2,r16,64
 8029cb0:	28800226 	beq	r5,r2,8029cbc <_fclose_r+0x9c>
 8029cb4:	8809883a 	mov	r4,r17
 8029cb8:	802a0f00 	call	802a0f0 <_free_r>
 8029cbc:	80000c15 	stw	zero,48(r16)
 8029cc0:	81401117 	ldw	r5,68(r16)
 8029cc4:	28000326 	beq	r5,zero,8029cd4 <_fclose_r+0xb4>
 8029cc8:	8809883a 	mov	r4,r17
 8029ccc:	802a0f00 	call	802a0f0 <_free_r>
 8029cd0:	80001115 	stw	zero,68(r16)
 8029cd4:	80257f00 	call	80257f0 <__sfp_lock_acquire>
 8029cd8:	8000030d 	sth	zero,12(r16)
 8029cdc:	80257f40 	call	80257f4 <__sfp_lock_release>
 8029ce0:	9005883a 	mov	r2,r18
 8029ce4:	003fdc06 	br	8029c58 <__alt_data_end+0xfffea858>
 8029ce8:	80257e00 	call	80257e0 <__sinit>
 8029cec:	003fd706 	br	8029c4c <__alt_data_end+0xfffea84c>
 8029cf0:	04bfffc4 	movi	r18,-1
 8029cf4:	003fe806 	br	8029c98 <__alt_data_end+0xfffea898>
 8029cf8:	81400417 	ldw	r5,16(r16)
 8029cfc:	8809883a 	mov	r4,r17
 8029d00:	802a0f00 	call	802a0f0 <_free_r>
 8029d04:	003fe706 	br	8029ca4 <__alt_data_end+0xfffea8a4>
 8029d08:	0005883a 	mov	r2,zero
 8029d0c:	f800283a 	ret

08029d10 <fclose>:
 8029d10:	008200f4 	movhi	r2,2051
 8029d14:	108eef04 	addi	r2,r2,15292
 8029d18:	200b883a 	mov	r5,r4
 8029d1c:	11000017 	ldw	r4,0(r2)
 8029d20:	8029c201 	jmpi	8029c20 <_fclose_r>

08029d24 <__sflush_r>:
 8029d24:	2880030b 	ldhu	r2,12(r5)
 8029d28:	defffb04 	addi	sp,sp,-20
 8029d2c:	dcc00315 	stw	r19,12(sp)
 8029d30:	dc400115 	stw	r17,4(sp)
 8029d34:	dfc00415 	stw	ra,16(sp)
 8029d38:	dc800215 	stw	r18,8(sp)
 8029d3c:	dc000015 	stw	r16,0(sp)
 8029d40:	10c0020c 	andi	r3,r2,8
 8029d44:	2823883a 	mov	r17,r5
 8029d48:	2027883a 	mov	r19,r4
 8029d4c:	1800311e 	bne	r3,zero,8029e14 <__sflush_r+0xf0>
 8029d50:	28c00117 	ldw	r3,4(r5)
 8029d54:	10820014 	ori	r2,r2,2048
 8029d58:	2880030d 	sth	r2,12(r5)
 8029d5c:	00c04b0e 	bge	zero,r3,8029e8c <__sflush_r+0x168>
 8029d60:	8a000a17 	ldw	r8,40(r17)
 8029d64:	40002326 	beq	r8,zero,8029df4 <__sflush_r+0xd0>
 8029d68:	9c000017 	ldw	r16,0(r19)
 8029d6c:	10c4000c 	andi	r3,r2,4096
 8029d70:	98000015 	stw	zero,0(r19)
 8029d74:	18004826 	beq	r3,zero,8029e98 <__sflush_r+0x174>
 8029d78:	89801417 	ldw	r6,80(r17)
 8029d7c:	10c0010c 	andi	r3,r2,4
 8029d80:	18000626 	beq	r3,zero,8029d9c <__sflush_r+0x78>
 8029d84:	88c00117 	ldw	r3,4(r17)
 8029d88:	88800c17 	ldw	r2,48(r17)
 8029d8c:	30cdc83a 	sub	r6,r6,r3
 8029d90:	10000226 	beq	r2,zero,8029d9c <__sflush_r+0x78>
 8029d94:	88800f17 	ldw	r2,60(r17)
 8029d98:	308dc83a 	sub	r6,r6,r2
 8029d9c:	89400717 	ldw	r5,28(r17)
 8029da0:	000f883a 	mov	r7,zero
 8029da4:	9809883a 	mov	r4,r19
 8029da8:	403ee83a 	callr	r8
 8029dac:	00ffffc4 	movi	r3,-1
 8029db0:	10c04426 	beq	r2,r3,8029ec4 <__sflush_r+0x1a0>
 8029db4:	88c0030b 	ldhu	r3,12(r17)
 8029db8:	89000417 	ldw	r4,16(r17)
 8029dbc:	88000115 	stw	zero,4(r17)
 8029dc0:	197dffcc 	andi	r5,r3,63487
 8029dc4:	8940030d 	sth	r5,12(r17)
 8029dc8:	89000015 	stw	r4,0(r17)
 8029dcc:	18c4000c 	andi	r3,r3,4096
 8029dd0:	18002c1e 	bne	r3,zero,8029e84 <__sflush_r+0x160>
 8029dd4:	89400c17 	ldw	r5,48(r17)
 8029dd8:	9c000015 	stw	r16,0(r19)
 8029ddc:	28000526 	beq	r5,zero,8029df4 <__sflush_r+0xd0>
 8029de0:	88801004 	addi	r2,r17,64
 8029de4:	28800226 	beq	r5,r2,8029df0 <__sflush_r+0xcc>
 8029de8:	9809883a 	mov	r4,r19
 8029dec:	802a0f00 	call	802a0f0 <_free_r>
 8029df0:	88000c15 	stw	zero,48(r17)
 8029df4:	0005883a 	mov	r2,zero
 8029df8:	dfc00417 	ldw	ra,16(sp)
 8029dfc:	dcc00317 	ldw	r19,12(sp)
 8029e00:	dc800217 	ldw	r18,8(sp)
 8029e04:	dc400117 	ldw	r17,4(sp)
 8029e08:	dc000017 	ldw	r16,0(sp)
 8029e0c:	dec00504 	addi	sp,sp,20
 8029e10:	f800283a 	ret
 8029e14:	2c800417 	ldw	r18,16(r5)
 8029e18:	903ff626 	beq	r18,zero,8029df4 <__alt_data_end+0xfffea9f4>
 8029e1c:	2c000017 	ldw	r16,0(r5)
 8029e20:	108000cc 	andi	r2,r2,3
 8029e24:	2c800015 	stw	r18,0(r5)
 8029e28:	84a1c83a 	sub	r16,r16,r18
 8029e2c:	1000131e 	bne	r2,zero,8029e7c <__sflush_r+0x158>
 8029e30:	28800517 	ldw	r2,20(r5)
 8029e34:	88800215 	stw	r2,8(r17)
 8029e38:	04000316 	blt	zero,r16,8029e48 <__sflush_r+0x124>
 8029e3c:	003fed06 	br	8029df4 <__alt_data_end+0xfffea9f4>
 8029e40:	90a5883a 	add	r18,r18,r2
 8029e44:	043feb0e 	bge	zero,r16,8029df4 <__alt_data_end+0xfffea9f4>
 8029e48:	88800917 	ldw	r2,36(r17)
 8029e4c:	89400717 	ldw	r5,28(r17)
 8029e50:	800f883a 	mov	r7,r16
 8029e54:	900d883a 	mov	r6,r18
 8029e58:	9809883a 	mov	r4,r19
 8029e5c:	103ee83a 	callr	r2
 8029e60:	80a1c83a 	sub	r16,r16,r2
 8029e64:	00bff616 	blt	zero,r2,8029e40 <__alt_data_end+0xfffeaa40>
 8029e68:	88c0030b 	ldhu	r3,12(r17)
 8029e6c:	00bfffc4 	movi	r2,-1
 8029e70:	18c01014 	ori	r3,r3,64
 8029e74:	88c0030d 	sth	r3,12(r17)
 8029e78:	003fdf06 	br	8029df8 <__alt_data_end+0xfffea9f8>
 8029e7c:	0005883a 	mov	r2,zero
 8029e80:	003fec06 	br	8029e34 <__alt_data_end+0xfffeaa34>
 8029e84:	88801415 	stw	r2,80(r17)
 8029e88:	003fd206 	br	8029dd4 <__alt_data_end+0xfffea9d4>
 8029e8c:	28c00f17 	ldw	r3,60(r5)
 8029e90:	00ffb316 	blt	zero,r3,8029d60 <__alt_data_end+0xfffea960>
 8029e94:	003fd706 	br	8029df4 <__alt_data_end+0xfffea9f4>
 8029e98:	89400717 	ldw	r5,28(r17)
 8029e9c:	000d883a 	mov	r6,zero
 8029ea0:	01c00044 	movi	r7,1
 8029ea4:	9809883a 	mov	r4,r19
 8029ea8:	403ee83a 	callr	r8
 8029eac:	100d883a 	mov	r6,r2
 8029eb0:	00bfffc4 	movi	r2,-1
 8029eb4:	30801426 	beq	r6,r2,8029f08 <__sflush_r+0x1e4>
 8029eb8:	8880030b 	ldhu	r2,12(r17)
 8029ebc:	8a000a17 	ldw	r8,40(r17)
 8029ec0:	003fae06 	br	8029d7c <__alt_data_end+0xfffea97c>
 8029ec4:	98c00017 	ldw	r3,0(r19)
 8029ec8:	183fba26 	beq	r3,zero,8029db4 <__alt_data_end+0xfffea9b4>
 8029ecc:	01000744 	movi	r4,29
 8029ed0:	19000626 	beq	r3,r4,8029eec <__sflush_r+0x1c8>
 8029ed4:	01000584 	movi	r4,22
 8029ed8:	19000426 	beq	r3,r4,8029eec <__sflush_r+0x1c8>
 8029edc:	88c0030b 	ldhu	r3,12(r17)
 8029ee0:	18c01014 	ori	r3,r3,64
 8029ee4:	88c0030d 	sth	r3,12(r17)
 8029ee8:	003fc306 	br	8029df8 <__alt_data_end+0xfffea9f8>
 8029eec:	8880030b 	ldhu	r2,12(r17)
 8029ef0:	88c00417 	ldw	r3,16(r17)
 8029ef4:	88000115 	stw	zero,4(r17)
 8029ef8:	10bdffcc 	andi	r2,r2,63487
 8029efc:	8880030d 	sth	r2,12(r17)
 8029f00:	88c00015 	stw	r3,0(r17)
 8029f04:	003fb306 	br	8029dd4 <__alt_data_end+0xfffea9d4>
 8029f08:	98800017 	ldw	r2,0(r19)
 8029f0c:	103fea26 	beq	r2,zero,8029eb8 <__alt_data_end+0xfffeaab8>
 8029f10:	00c00744 	movi	r3,29
 8029f14:	10c00226 	beq	r2,r3,8029f20 <__sflush_r+0x1fc>
 8029f18:	00c00584 	movi	r3,22
 8029f1c:	10c0031e 	bne	r2,r3,8029f2c <__sflush_r+0x208>
 8029f20:	9c000015 	stw	r16,0(r19)
 8029f24:	0005883a 	mov	r2,zero
 8029f28:	003fb306 	br	8029df8 <__alt_data_end+0xfffea9f8>
 8029f2c:	88c0030b 	ldhu	r3,12(r17)
 8029f30:	3005883a 	mov	r2,r6
 8029f34:	18c01014 	ori	r3,r3,64
 8029f38:	88c0030d 	sth	r3,12(r17)
 8029f3c:	003fae06 	br	8029df8 <__alt_data_end+0xfffea9f8>

08029f40 <_fflush_r>:
 8029f40:	defffd04 	addi	sp,sp,-12
 8029f44:	dc000115 	stw	r16,4(sp)
 8029f48:	dfc00215 	stw	ra,8(sp)
 8029f4c:	2021883a 	mov	r16,r4
 8029f50:	20000226 	beq	r4,zero,8029f5c <_fflush_r+0x1c>
 8029f54:	20800e17 	ldw	r2,56(r4)
 8029f58:	10000c26 	beq	r2,zero,8029f8c <_fflush_r+0x4c>
 8029f5c:	2880030f 	ldh	r2,12(r5)
 8029f60:	1000051e 	bne	r2,zero,8029f78 <_fflush_r+0x38>
 8029f64:	0005883a 	mov	r2,zero
 8029f68:	dfc00217 	ldw	ra,8(sp)
 8029f6c:	dc000117 	ldw	r16,4(sp)
 8029f70:	dec00304 	addi	sp,sp,12
 8029f74:	f800283a 	ret
 8029f78:	8009883a 	mov	r4,r16
 8029f7c:	dfc00217 	ldw	ra,8(sp)
 8029f80:	dc000117 	ldw	r16,4(sp)
 8029f84:	dec00304 	addi	sp,sp,12
 8029f88:	8029d241 	jmpi	8029d24 <__sflush_r>
 8029f8c:	d9400015 	stw	r5,0(sp)
 8029f90:	80257e00 	call	80257e0 <__sinit>
 8029f94:	d9400017 	ldw	r5,0(sp)
 8029f98:	003ff006 	br	8029f5c <__alt_data_end+0xfffeab5c>

08029f9c <fflush>:
 8029f9c:	20000526 	beq	r4,zero,8029fb4 <fflush+0x18>
 8029fa0:	008200f4 	movhi	r2,2051
 8029fa4:	108eef04 	addi	r2,r2,15292
 8029fa8:	200b883a 	mov	r5,r4
 8029fac:	11000017 	ldw	r4,0(r2)
 8029fb0:	8029f401 	jmpi	8029f40 <_fflush_r>
 8029fb4:	008200f4 	movhi	r2,2051
 8029fb8:	108eee04 	addi	r2,r2,15288
 8029fbc:	11000017 	ldw	r4,0(r2)
 8029fc0:	014200f4 	movhi	r5,2051
 8029fc4:	2967d004 	addi	r5,r5,-24768
 8029fc8:	8025dbc1 	jmpi	8025dbc <_fwalk_reent>

08029fcc <_malloc_trim_r>:
 8029fcc:	defffb04 	addi	sp,sp,-20
 8029fd0:	dcc00315 	stw	r19,12(sp)
 8029fd4:	04c200f4 	movhi	r19,2051
 8029fd8:	dc800215 	stw	r18,8(sp)
 8029fdc:	dc400115 	stw	r17,4(sp)
 8029fe0:	dc000015 	stw	r16,0(sp)
 8029fe4:	dfc00415 	stw	ra,16(sp)
 8029fe8:	2821883a 	mov	r16,r5
 8029fec:	9cc94304 	addi	r19,r19,9484
 8029ff0:	2025883a 	mov	r18,r4
 8029ff4:	802e40c0 	call	802e40c <__malloc_lock>
 8029ff8:	98800217 	ldw	r2,8(r19)
 8029ffc:	14400117 	ldw	r17,4(r2)
 802a000:	00bfff04 	movi	r2,-4
 802a004:	88a2703a 	and	r17,r17,r2
 802a008:	8c21c83a 	sub	r16,r17,r16
 802a00c:	8403fbc4 	addi	r16,r16,4079
 802a010:	8020d33a 	srli	r16,r16,12
 802a014:	0083ffc4 	movi	r2,4095
 802a018:	843fffc4 	addi	r16,r16,-1
 802a01c:	8020933a 	slli	r16,r16,12
 802a020:	1400060e 	bge	r2,r16,802a03c <_malloc_trim_r+0x70>
 802a024:	000b883a 	mov	r5,zero
 802a028:	9009883a 	mov	r4,r18
 802a02c:	80281600 	call	8028160 <_sbrk_r>
 802a030:	98c00217 	ldw	r3,8(r19)
 802a034:	1c47883a 	add	r3,r3,r17
 802a038:	10c00a26 	beq	r2,r3,802a064 <_malloc_trim_r+0x98>
 802a03c:	9009883a 	mov	r4,r18
 802a040:	802e4300 	call	802e430 <__malloc_unlock>
 802a044:	0005883a 	mov	r2,zero
 802a048:	dfc00417 	ldw	ra,16(sp)
 802a04c:	dcc00317 	ldw	r19,12(sp)
 802a050:	dc800217 	ldw	r18,8(sp)
 802a054:	dc400117 	ldw	r17,4(sp)
 802a058:	dc000017 	ldw	r16,0(sp)
 802a05c:	dec00504 	addi	sp,sp,20
 802a060:	f800283a 	ret
 802a064:	040bc83a 	sub	r5,zero,r16
 802a068:	9009883a 	mov	r4,r18
 802a06c:	80281600 	call	8028160 <_sbrk_r>
 802a070:	00ffffc4 	movi	r3,-1
 802a074:	10c00d26 	beq	r2,r3,802a0ac <_malloc_trim_r+0xe0>
 802a078:	00c200f4 	movhi	r3,2051
 802a07c:	18d5f204 	addi	r3,r3,22472
 802a080:	18800017 	ldw	r2,0(r3)
 802a084:	99000217 	ldw	r4,8(r19)
 802a088:	8c23c83a 	sub	r17,r17,r16
 802a08c:	8c400054 	ori	r17,r17,1
 802a090:	1421c83a 	sub	r16,r2,r16
 802a094:	24400115 	stw	r17,4(r4)
 802a098:	9009883a 	mov	r4,r18
 802a09c:	1c000015 	stw	r16,0(r3)
 802a0a0:	802e4300 	call	802e430 <__malloc_unlock>
 802a0a4:	00800044 	movi	r2,1
 802a0a8:	003fe706 	br	802a048 <__alt_data_end+0xfffeac48>
 802a0ac:	000b883a 	mov	r5,zero
 802a0b0:	9009883a 	mov	r4,r18
 802a0b4:	80281600 	call	8028160 <_sbrk_r>
 802a0b8:	99000217 	ldw	r4,8(r19)
 802a0bc:	014003c4 	movi	r5,15
 802a0c0:	1107c83a 	sub	r3,r2,r4
 802a0c4:	28ffdd0e 	bge	r5,r3,802a03c <__alt_data_end+0xfffeac3c>
 802a0c8:	014200f4 	movhi	r5,2051
 802a0cc:	294ef104 	addi	r5,r5,15300
 802a0d0:	29400017 	ldw	r5,0(r5)
 802a0d4:	18c00054 	ori	r3,r3,1
 802a0d8:	20c00115 	stw	r3,4(r4)
 802a0dc:	00c200f4 	movhi	r3,2051
 802a0e0:	1145c83a 	sub	r2,r2,r5
 802a0e4:	18d5f204 	addi	r3,r3,22472
 802a0e8:	18800015 	stw	r2,0(r3)
 802a0ec:	003fd306 	br	802a03c <__alt_data_end+0xfffeac3c>

0802a0f0 <_free_r>:
 802a0f0:	28004126 	beq	r5,zero,802a1f8 <_free_r+0x108>
 802a0f4:	defffd04 	addi	sp,sp,-12
 802a0f8:	dc400115 	stw	r17,4(sp)
 802a0fc:	dc000015 	stw	r16,0(sp)
 802a100:	2023883a 	mov	r17,r4
 802a104:	2821883a 	mov	r16,r5
 802a108:	dfc00215 	stw	ra,8(sp)
 802a10c:	802e40c0 	call	802e40c <__malloc_lock>
 802a110:	81ffff17 	ldw	r7,-4(r16)
 802a114:	00bfff84 	movi	r2,-2
 802a118:	010200f4 	movhi	r4,2051
 802a11c:	81bffe04 	addi	r6,r16,-8
 802a120:	3884703a 	and	r2,r7,r2
 802a124:	21094304 	addi	r4,r4,9484
 802a128:	308b883a 	add	r5,r6,r2
 802a12c:	2a400117 	ldw	r9,4(r5)
 802a130:	22000217 	ldw	r8,8(r4)
 802a134:	00ffff04 	movi	r3,-4
 802a138:	48c6703a 	and	r3,r9,r3
 802a13c:	2a005726 	beq	r5,r8,802a29c <_free_r+0x1ac>
 802a140:	28c00115 	stw	r3,4(r5)
 802a144:	39c0004c 	andi	r7,r7,1
 802a148:	3800091e 	bne	r7,zero,802a170 <_free_r+0x80>
 802a14c:	823ffe17 	ldw	r8,-8(r16)
 802a150:	22400204 	addi	r9,r4,8
 802a154:	320dc83a 	sub	r6,r6,r8
 802a158:	31c00217 	ldw	r7,8(r6)
 802a15c:	1205883a 	add	r2,r2,r8
 802a160:	3a406526 	beq	r7,r9,802a2f8 <_free_r+0x208>
 802a164:	32000317 	ldw	r8,12(r6)
 802a168:	3a000315 	stw	r8,12(r7)
 802a16c:	41c00215 	stw	r7,8(r8)
 802a170:	28cf883a 	add	r7,r5,r3
 802a174:	39c00117 	ldw	r7,4(r7)
 802a178:	39c0004c 	andi	r7,r7,1
 802a17c:	38003a26 	beq	r7,zero,802a268 <_free_r+0x178>
 802a180:	10c00054 	ori	r3,r2,1
 802a184:	30c00115 	stw	r3,4(r6)
 802a188:	3087883a 	add	r3,r6,r2
 802a18c:	18800015 	stw	r2,0(r3)
 802a190:	00c07fc4 	movi	r3,511
 802a194:	18801936 	bltu	r3,r2,802a1fc <_free_r+0x10c>
 802a198:	1004d0fa 	srli	r2,r2,3
 802a19c:	01c00044 	movi	r7,1
 802a1a0:	21400117 	ldw	r5,4(r4)
 802a1a4:	10c00044 	addi	r3,r2,1
 802a1a8:	18c7883a 	add	r3,r3,r3
 802a1ac:	1005d0ba 	srai	r2,r2,2
 802a1b0:	18c7883a 	add	r3,r3,r3
 802a1b4:	18c7883a 	add	r3,r3,r3
 802a1b8:	1907883a 	add	r3,r3,r4
 802a1bc:	3884983a 	sll	r2,r7,r2
 802a1c0:	19c00017 	ldw	r7,0(r3)
 802a1c4:	1a3ffe04 	addi	r8,r3,-8
 802a1c8:	1144b03a 	or	r2,r2,r5
 802a1cc:	32000315 	stw	r8,12(r6)
 802a1d0:	31c00215 	stw	r7,8(r6)
 802a1d4:	20800115 	stw	r2,4(r4)
 802a1d8:	19800015 	stw	r6,0(r3)
 802a1dc:	39800315 	stw	r6,12(r7)
 802a1e0:	8809883a 	mov	r4,r17
 802a1e4:	dfc00217 	ldw	ra,8(sp)
 802a1e8:	dc400117 	ldw	r17,4(sp)
 802a1ec:	dc000017 	ldw	r16,0(sp)
 802a1f0:	dec00304 	addi	sp,sp,12
 802a1f4:	802e4301 	jmpi	802e430 <__malloc_unlock>
 802a1f8:	f800283a 	ret
 802a1fc:	100ad27a 	srli	r5,r2,9
 802a200:	00c00104 	movi	r3,4
 802a204:	19404a36 	bltu	r3,r5,802a330 <_free_r+0x240>
 802a208:	100ad1ba 	srli	r5,r2,6
 802a20c:	28c00e44 	addi	r3,r5,57
 802a210:	18c7883a 	add	r3,r3,r3
 802a214:	29400e04 	addi	r5,r5,56
 802a218:	18c7883a 	add	r3,r3,r3
 802a21c:	18c7883a 	add	r3,r3,r3
 802a220:	1909883a 	add	r4,r3,r4
 802a224:	20c00017 	ldw	r3,0(r4)
 802a228:	01c200f4 	movhi	r7,2051
 802a22c:	213ffe04 	addi	r4,r4,-8
 802a230:	39c94304 	addi	r7,r7,9484
 802a234:	20c04426 	beq	r4,r3,802a348 <_free_r+0x258>
 802a238:	01ffff04 	movi	r7,-4
 802a23c:	19400117 	ldw	r5,4(r3)
 802a240:	29ca703a 	and	r5,r5,r7
 802a244:	1140022e 	bgeu	r2,r5,802a250 <_free_r+0x160>
 802a248:	18c00217 	ldw	r3,8(r3)
 802a24c:	20fffb1e 	bne	r4,r3,802a23c <__alt_data_end+0xfffeae3c>
 802a250:	19000317 	ldw	r4,12(r3)
 802a254:	31000315 	stw	r4,12(r6)
 802a258:	30c00215 	stw	r3,8(r6)
 802a25c:	21800215 	stw	r6,8(r4)
 802a260:	19800315 	stw	r6,12(r3)
 802a264:	003fde06 	br	802a1e0 <__alt_data_end+0xfffeade0>
 802a268:	29c00217 	ldw	r7,8(r5)
 802a26c:	10c5883a 	add	r2,r2,r3
 802a270:	00c200f4 	movhi	r3,2051
 802a274:	18c94504 	addi	r3,r3,9492
 802a278:	38c03b26 	beq	r7,r3,802a368 <_free_r+0x278>
 802a27c:	2a000317 	ldw	r8,12(r5)
 802a280:	11400054 	ori	r5,r2,1
 802a284:	3087883a 	add	r3,r6,r2
 802a288:	3a000315 	stw	r8,12(r7)
 802a28c:	41c00215 	stw	r7,8(r8)
 802a290:	31400115 	stw	r5,4(r6)
 802a294:	18800015 	stw	r2,0(r3)
 802a298:	003fbd06 	br	802a190 <__alt_data_end+0xfffead90>
 802a29c:	39c0004c 	andi	r7,r7,1
 802a2a0:	10c5883a 	add	r2,r2,r3
 802a2a4:	3800071e 	bne	r7,zero,802a2c4 <_free_r+0x1d4>
 802a2a8:	81fffe17 	ldw	r7,-8(r16)
 802a2ac:	31cdc83a 	sub	r6,r6,r7
 802a2b0:	30c00317 	ldw	r3,12(r6)
 802a2b4:	31400217 	ldw	r5,8(r6)
 802a2b8:	11c5883a 	add	r2,r2,r7
 802a2bc:	28c00315 	stw	r3,12(r5)
 802a2c0:	19400215 	stw	r5,8(r3)
 802a2c4:	10c00054 	ori	r3,r2,1
 802a2c8:	30c00115 	stw	r3,4(r6)
 802a2cc:	00c200f4 	movhi	r3,2051
 802a2d0:	18cef204 	addi	r3,r3,15304
 802a2d4:	18c00017 	ldw	r3,0(r3)
 802a2d8:	21800215 	stw	r6,8(r4)
 802a2dc:	10ffc036 	bltu	r2,r3,802a1e0 <__alt_data_end+0xfffeade0>
 802a2e0:	008200f4 	movhi	r2,2051
 802a2e4:	1095e304 	addi	r2,r2,22412
 802a2e8:	11400017 	ldw	r5,0(r2)
 802a2ec:	8809883a 	mov	r4,r17
 802a2f0:	8029fcc0 	call	8029fcc <_malloc_trim_r>
 802a2f4:	003fba06 	br	802a1e0 <__alt_data_end+0xfffeade0>
 802a2f8:	28c9883a 	add	r4,r5,r3
 802a2fc:	21000117 	ldw	r4,4(r4)
 802a300:	2100004c 	andi	r4,r4,1
 802a304:	2000391e 	bne	r4,zero,802a3ec <_free_r+0x2fc>
 802a308:	29c00217 	ldw	r7,8(r5)
 802a30c:	29000317 	ldw	r4,12(r5)
 802a310:	1885883a 	add	r2,r3,r2
 802a314:	10c00054 	ori	r3,r2,1
 802a318:	39000315 	stw	r4,12(r7)
 802a31c:	21c00215 	stw	r7,8(r4)
 802a320:	30c00115 	stw	r3,4(r6)
 802a324:	308d883a 	add	r6,r6,r2
 802a328:	30800015 	stw	r2,0(r6)
 802a32c:	003fac06 	br	802a1e0 <__alt_data_end+0xfffeade0>
 802a330:	00c00504 	movi	r3,20
 802a334:	19401536 	bltu	r3,r5,802a38c <_free_r+0x29c>
 802a338:	28c01704 	addi	r3,r5,92
 802a33c:	18c7883a 	add	r3,r3,r3
 802a340:	294016c4 	addi	r5,r5,91
 802a344:	003fb406 	br	802a218 <__alt_data_end+0xfffeae18>
 802a348:	280bd0ba 	srai	r5,r5,2
 802a34c:	00c00044 	movi	r3,1
 802a350:	38800117 	ldw	r2,4(r7)
 802a354:	194a983a 	sll	r5,r3,r5
 802a358:	2007883a 	mov	r3,r4
 802a35c:	2884b03a 	or	r2,r5,r2
 802a360:	38800115 	stw	r2,4(r7)
 802a364:	003fbb06 	br	802a254 <__alt_data_end+0xfffeae54>
 802a368:	21800515 	stw	r6,20(r4)
 802a36c:	21800415 	stw	r6,16(r4)
 802a370:	10c00054 	ori	r3,r2,1
 802a374:	31c00315 	stw	r7,12(r6)
 802a378:	31c00215 	stw	r7,8(r6)
 802a37c:	30c00115 	stw	r3,4(r6)
 802a380:	308d883a 	add	r6,r6,r2
 802a384:	30800015 	stw	r2,0(r6)
 802a388:	003f9506 	br	802a1e0 <__alt_data_end+0xfffeade0>
 802a38c:	00c01504 	movi	r3,84
 802a390:	19400536 	bltu	r3,r5,802a3a8 <_free_r+0x2b8>
 802a394:	100ad33a 	srli	r5,r2,12
 802a398:	28c01bc4 	addi	r3,r5,111
 802a39c:	18c7883a 	add	r3,r3,r3
 802a3a0:	29401b84 	addi	r5,r5,110
 802a3a4:	003f9c06 	br	802a218 <__alt_data_end+0xfffeae18>
 802a3a8:	00c05504 	movi	r3,340
 802a3ac:	19400536 	bltu	r3,r5,802a3c4 <_free_r+0x2d4>
 802a3b0:	100ad3fa 	srli	r5,r2,15
 802a3b4:	28c01e04 	addi	r3,r5,120
 802a3b8:	18c7883a 	add	r3,r3,r3
 802a3bc:	29401dc4 	addi	r5,r5,119
 802a3c0:	003f9506 	br	802a218 <__alt_data_end+0xfffeae18>
 802a3c4:	00c15504 	movi	r3,1364
 802a3c8:	19400536 	bltu	r3,r5,802a3e0 <_free_r+0x2f0>
 802a3cc:	100ad4ba 	srli	r5,r2,18
 802a3d0:	28c01f44 	addi	r3,r5,125
 802a3d4:	18c7883a 	add	r3,r3,r3
 802a3d8:	29401f04 	addi	r5,r5,124
 802a3dc:	003f8e06 	br	802a218 <__alt_data_end+0xfffeae18>
 802a3e0:	00c03f84 	movi	r3,254
 802a3e4:	01401f84 	movi	r5,126
 802a3e8:	003f8b06 	br	802a218 <__alt_data_end+0xfffeae18>
 802a3ec:	10c00054 	ori	r3,r2,1
 802a3f0:	30c00115 	stw	r3,4(r6)
 802a3f4:	308d883a 	add	r6,r6,r2
 802a3f8:	30800015 	stw	r2,0(r6)
 802a3fc:	003f7806 	br	802a1e0 <__alt_data_end+0xfffeade0>

0802a400 <_lseek_r>:
 802a400:	defffd04 	addi	sp,sp,-12
 802a404:	2805883a 	mov	r2,r5
 802a408:	dc000015 	stw	r16,0(sp)
 802a40c:	040200f4 	movhi	r16,2051
 802a410:	dc400115 	stw	r17,4(sp)
 802a414:	300b883a 	mov	r5,r6
 802a418:	8415e404 	addi	r16,r16,22416
 802a41c:	2023883a 	mov	r17,r4
 802a420:	380d883a 	mov	r6,r7
 802a424:	1009883a 	mov	r4,r2
 802a428:	dfc00215 	stw	ra,8(sp)
 802a42c:	80000015 	stw	zero,0(r16)
 802a430:	802e2b40 	call	802e2b4 <lseek>
 802a434:	00ffffc4 	movi	r3,-1
 802a438:	10c00526 	beq	r2,r3,802a450 <_lseek_r+0x50>
 802a43c:	dfc00217 	ldw	ra,8(sp)
 802a440:	dc400117 	ldw	r17,4(sp)
 802a444:	dc000017 	ldw	r16,0(sp)
 802a448:	dec00304 	addi	sp,sp,12
 802a44c:	f800283a 	ret
 802a450:	80c00017 	ldw	r3,0(r16)
 802a454:	183ff926 	beq	r3,zero,802a43c <__alt_data_end+0xfffeb03c>
 802a458:	88c00015 	stw	r3,0(r17)
 802a45c:	003ff706 	br	802a43c <__alt_data_end+0xfffeb03c>

0802a460 <__smakebuf_r>:
 802a460:	2880030b 	ldhu	r2,12(r5)
 802a464:	10c0008c 	andi	r3,r2,2
 802a468:	1800411e 	bne	r3,zero,802a570 <__smakebuf_r+0x110>
 802a46c:	deffec04 	addi	sp,sp,-80
 802a470:	dc000f15 	stw	r16,60(sp)
 802a474:	2821883a 	mov	r16,r5
 802a478:	2940038f 	ldh	r5,14(r5)
 802a47c:	dc401015 	stw	r17,64(sp)
 802a480:	dfc01315 	stw	ra,76(sp)
 802a484:	dcc01215 	stw	r19,72(sp)
 802a488:	dc801115 	stw	r18,68(sp)
 802a48c:	2023883a 	mov	r17,r4
 802a490:	28001c16 	blt	r5,zero,802a504 <__smakebuf_r+0xa4>
 802a494:	d80d883a 	mov	r6,sp
 802a498:	802a67c0 	call	802a67c <_fstat_r>
 802a49c:	10001816 	blt	r2,zero,802a500 <__smakebuf_r+0xa0>
 802a4a0:	d8800117 	ldw	r2,4(sp)
 802a4a4:	00e00014 	movui	r3,32768
 802a4a8:	10bc000c 	andi	r2,r2,61440
 802a4ac:	14c80020 	cmpeqi	r19,r2,8192
 802a4b0:	10c03726 	beq	r2,r3,802a590 <__smakebuf_r+0x130>
 802a4b4:	80c0030b 	ldhu	r3,12(r16)
 802a4b8:	18c20014 	ori	r3,r3,2048
 802a4bc:	80c0030d 	sth	r3,12(r16)
 802a4c0:	00c80004 	movi	r3,8192
 802a4c4:	10c0521e 	bne	r2,r3,802a610 <__smakebuf_r+0x1b0>
 802a4c8:	8140038f 	ldh	r5,14(r16)
 802a4cc:	8809883a 	mov	r4,r17
 802a4d0:	802a6d80 	call	802a6d8 <_isatty_r>
 802a4d4:	10004c26 	beq	r2,zero,802a608 <__smakebuf_r+0x1a8>
 802a4d8:	8080030b 	ldhu	r2,12(r16)
 802a4dc:	80c010c4 	addi	r3,r16,67
 802a4e0:	80c00015 	stw	r3,0(r16)
 802a4e4:	10800054 	ori	r2,r2,1
 802a4e8:	8080030d 	sth	r2,12(r16)
 802a4ec:	00800044 	movi	r2,1
 802a4f0:	80c00415 	stw	r3,16(r16)
 802a4f4:	80800515 	stw	r2,20(r16)
 802a4f8:	04810004 	movi	r18,1024
 802a4fc:	00000706 	br	802a51c <__smakebuf_r+0xbc>
 802a500:	8080030b 	ldhu	r2,12(r16)
 802a504:	10c0200c 	andi	r3,r2,128
 802a508:	18001f1e 	bne	r3,zero,802a588 <__smakebuf_r+0x128>
 802a50c:	04810004 	movi	r18,1024
 802a510:	10820014 	ori	r2,r2,2048
 802a514:	8080030d 	sth	r2,12(r16)
 802a518:	0027883a 	mov	r19,zero
 802a51c:	900b883a 	mov	r5,r18
 802a520:	8809883a 	mov	r4,r17
 802a524:	8025f5c0 	call	8025f5c <_malloc_r>
 802a528:	10002c26 	beq	r2,zero,802a5dc <__smakebuf_r+0x17c>
 802a52c:	80c0030b 	ldhu	r3,12(r16)
 802a530:	010200b4 	movhi	r4,2050
 802a534:	21152204 	addi	r4,r4,21640
 802a538:	89000f15 	stw	r4,60(r17)
 802a53c:	18c02014 	ori	r3,r3,128
 802a540:	80c0030d 	sth	r3,12(r16)
 802a544:	80800015 	stw	r2,0(r16)
 802a548:	80800415 	stw	r2,16(r16)
 802a54c:	84800515 	stw	r18,20(r16)
 802a550:	98001a1e 	bne	r19,zero,802a5bc <__smakebuf_r+0x15c>
 802a554:	dfc01317 	ldw	ra,76(sp)
 802a558:	dcc01217 	ldw	r19,72(sp)
 802a55c:	dc801117 	ldw	r18,68(sp)
 802a560:	dc401017 	ldw	r17,64(sp)
 802a564:	dc000f17 	ldw	r16,60(sp)
 802a568:	dec01404 	addi	sp,sp,80
 802a56c:	f800283a 	ret
 802a570:	288010c4 	addi	r2,r5,67
 802a574:	28800015 	stw	r2,0(r5)
 802a578:	28800415 	stw	r2,16(r5)
 802a57c:	00800044 	movi	r2,1
 802a580:	28800515 	stw	r2,20(r5)
 802a584:	f800283a 	ret
 802a588:	04801004 	movi	r18,64
 802a58c:	003fe006 	br	802a510 <__alt_data_end+0xfffeb110>
 802a590:	81000a17 	ldw	r4,40(r16)
 802a594:	00c200f4 	movhi	r3,2051
 802a598:	18e0a304 	addi	r3,r3,-32116
 802a59c:	20ffc51e 	bne	r4,r3,802a4b4 <__alt_data_end+0xfffeb0b4>
 802a5a0:	8080030b 	ldhu	r2,12(r16)
 802a5a4:	04810004 	movi	r18,1024
 802a5a8:	84801315 	stw	r18,76(r16)
 802a5ac:	1484b03a 	or	r2,r2,r18
 802a5b0:	8080030d 	sth	r2,12(r16)
 802a5b4:	0027883a 	mov	r19,zero
 802a5b8:	003fd806 	br	802a51c <__alt_data_end+0xfffeb11c>
 802a5bc:	8140038f 	ldh	r5,14(r16)
 802a5c0:	8809883a 	mov	r4,r17
 802a5c4:	802a6d80 	call	802a6d8 <_isatty_r>
 802a5c8:	103fe226 	beq	r2,zero,802a554 <__alt_data_end+0xfffeb154>
 802a5cc:	8080030b 	ldhu	r2,12(r16)
 802a5d0:	10800054 	ori	r2,r2,1
 802a5d4:	8080030d 	sth	r2,12(r16)
 802a5d8:	003fde06 	br	802a554 <__alt_data_end+0xfffeb154>
 802a5dc:	8080030b 	ldhu	r2,12(r16)
 802a5e0:	10c0800c 	andi	r3,r2,512
 802a5e4:	183fdb1e 	bne	r3,zero,802a554 <__alt_data_end+0xfffeb154>
 802a5e8:	10800094 	ori	r2,r2,2
 802a5ec:	80c010c4 	addi	r3,r16,67
 802a5f0:	8080030d 	sth	r2,12(r16)
 802a5f4:	00800044 	movi	r2,1
 802a5f8:	80c00015 	stw	r3,0(r16)
 802a5fc:	80c00415 	stw	r3,16(r16)
 802a600:	80800515 	stw	r2,20(r16)
 802a604:	003fd306 	br	802a554 <__alt_data_end+0xfffeb154>
 802a608:	04810004 	movi	r18,1024
 802a60c:	003fc306 	br	802a51c <__alt_data_end+0xfffeb11c>
 802a610:	0027883a 	mov	r19,zero
 802a614:	04810004 	movi	r18,1024
 802a618:	003fc006 	br	802a51c <__alt_data_end+0xfffeb11c>

0802a61c <_read_r>:
 802a61c:	defffd04 	addi	sp,sp,-12
 802a620:	2805883a 	mov	r2,r5
 802a624:	dc000015 	stw	r16,0(sp)
 802a628:	040200f4 	movhi	r16,2051
 802a62c:	dc400115 	stw	r17,4(sp)
 802a630:	300b883a 	mov	r5,r6
 802a634:	8415e404 	addi	r16,r16,22416
 802a638:	2023883a 	mov	r17,r4
 802a63c:	380d883a 	mov	r6,r7
 802a640:	1009883a 	mov	r4,r2
 802a644:	dfc00215 	stw	ra,8(sp)
 802a648:	80000015 	stw	zero,0(r16)
 802a64c:	802e4900 	call	802e490 <read>
 802a650:	00ffffc4 	movi	r3,-1
 802a654:	10c00526 	beq	r2,r3,802a66c <_read_r+0x50>
 802a658:	dfc00217 	ldw	ra,8(sp)
 802a65c:	dc400117 	ldw	r17,4(sp)
 802a660:	dc000017 	ldw	r16,0(sp)
 802a664:	dec00304 	addi	sp,sp,12
 802a668:	f800283a 	ret
 802a66c:	80c00017 	ldw	r3,0(r16)
 802a670:	183ff926 	beq	r3,zero,802a658 <__alt_data_end+0xfffeb258>
 802a674:	88c00015 	stw	r3,0(r17)
 802a678:	003ff706 	br	802a658 <__alt_data_end+0xfffeb258>

0802a67c <_fstat_r>:
 802a67c:	defffd04 	addi	sp,sp,-12
 802a680:	2805883a 	mov	r2,r5
 802a684:	dc000015 	stw	r16,0(sp)
 802a688:	040200f4 	movhi	r16,2051
 802a68c:	dc400115 	stw	r17,4(sp)
 802a690:	8415e404 	addi	r16,r16,22416
 802a694:	2023883a 	mov	r17,r4
 802a698:	300b883a 	mov	r5,r6
 802a69c:	1009883a 	mov	r4,r2
 802a6a0:	dfc00215 	stw	ra,8(sp)
 802a6a4:	80000015 	stw	zero,0(r16)
 802a6a8:	802dfec0 	call	802dfec <fstat>
 802a6ac:	00ffffc4 	movi	r3,-1
 802a6b0:	10c00526 	beq	r2,r3,802a6c8 <_fstat_r+0x4c>
 802a6b4:	dfc00217 	ldw	ra,8(sp)
 802a6b8:	dc400117 	ldw	r17,4(sp)
 802a6bc:	dc000017 	ldw	r16,0(sp)
 802a6c0:	dec00304 	addi	sp,sp,12
 802a6c4:	f800283a 	ret
 802a6c8:	80c00017 	ldw	r3,0(r16)
 802a6cc:	183ff926 	beq	r3,zero,802a6b4 <__alt_data_end+0xfffeb2b4>
 802a6d0:	88c00015 	stw	r3,0(r17)
 802a6d4:	003ff706 	br	802a6b4 <__alt_data_end+0xfffeb2b4>

0802a6d8 <_isatty_r>:
 802a6d8:	defffd04 	addi	sp,sp,-12
 802a6dc:	dc000015 	stw	r16,0(sp)
 802a6e0:	040200f4 	movhi	r16,2051
 802a6e4:	dc400115 	stw	r17,4(sp)
 802a6e8:	8415e404 	addi	r16,r16,22416
 802a6ec:	2023883a 	mov	r17,r4
 802a6f0:	2809883a 	mov	r4,r5
 802a6f4:	dfc00215 	stw	ra,8(sp)
 802a6f8:	80000015 	stw	zero,0(r16)
 802a6fc:	802e0e00 	call	802e0e0 <isatty>
 802a700:	00ffffc4 	movi	r3,-1
 802a704:	10c00526 	beq	r2,r3,802a71c <_isatty_r+0x44>
 802a708:	dfc00217 	ldw	ra,8(sp)
 802a70c:	dc400117 	ldw	r17,4(sp)
 802a710:	dc000017 	ldw	r16,0(sp)
 802a714:	dec00304 	addi	sp,sp,12
 802a718:	f800283a 	ret
 802a71c:	80c00017 	ldw	r3,0(r16)
 802a720:	183ff926 	beq	r3,zero,802a708 <__alt_data_end+0xfffeb308>
 802a724:	88c00015 	stw	r3,0(r17)
 802a728:	003ff706 	br	802a708 <__alt_data_end+0xfffeb308>

0802a72c <__udivdi3>:
 802a72c:	defff404 	addi	sp,sp,-48
 802a730:	dcc00515 	stw	r19,20(sp)
 802a734:	dc000215 	stw	r16,8(sp)
 802a738:	dfc00b15 	stw	ra,44(sp)
 802a73c:	df000a15 	stw	fp,40(sp)
 802a740:	ddc00915 	stw	r23,36(sp)
 802a744:	dd800815 	stw	r22,32(sp)
 802a748:	dd400715 	stw	r21,28(sp)
 802a74c:	dd000615 	stw	r20,24(sp)
 802a750:	dc800415 	stw	r18,16(sp)
 802a754:	dc400315 	stw	r17,12(sp)
 802a758:	2027883a 	mov	r19,r4
 802a75c:	2821883a 	mov	r16,r5
 802a760:	3800461e 	bne	r7,zero,802a87c <__udivdi3+0x150>
 802a764:	3023883a 	mov	r17,r6
 802a768:	2025883a 	mov	r18,r4
 802a76c:	2980572e 	bgeu	r5,r6,802a8cc <__udivdi3+0x1a0>
 802a770:	00bfffd4 	movui	r2,65535
 802a774:	282d883a 	mov	r22,r5
 802a778:	1180b236 	bltu	r2,r6,802aa44 <__udivdi3+0x318>
 802a77c:	00803fc4 	movi	r2,255
 802a780:	1185803a 	cmpltu	r2,r2,r6
 802a784:	100490fa 	slli	r2,r2,3
 802a788:	3086d83a 	srl	r3,r6,r2
 802a78c:	010200f4 	movhi	r4,2051
 802a790:	2107b004 	addi	r4,r4,7872
 802a794:	20c7883a 	add	r3,r4,r3
 802a798:	18c00003 	ldbu	r3,0(r3)
 802a79c:	1885883a 	add	r2,r3,r2
 802a7a0:	00c00804 	movi	r3,32
 802a7a4:	1887c83a 	sub	r3,r3,r2
 802a7a8:	18000526 	beq	r3,zero,802a7c0 <__udivdi3+0x94>
 802a7ac:	80e0983a 	sll	r16,r16,r3
 802a7b0:	9884d83a 	srl	r2,r19,r2
 802a7b4:	30e2983a 	sll	r17,r6,r3
 802a7b8:	98e4983a 	sll	r18,r19,r3
 802a7bc:	142cb03a 	or	r22,r2,r16
 802a7c0:	882ad43a 	srli	r21,r17,16
 802a7c4:	b009883a 	mov	r4,r22
 802a7c8:	8d3fffcc 	andi	r20,r17,65535
 802a7cc:	a80b883a 	mov	r5,r21
 802a7d0:	802b4480 	call	802b448 <__umodsi3>
 802a7d4:	b009883a 	mov	r4,r22
 802a7d8:	a80b883a 	mov	r5,r21
 802a7dc:	1027883a 	mov	r19,r2
 802a7e0:	802b3e40 	call	802b3e4 <__udivsi3>
 802a7e4:	100b883a 	mov	r5,r2
 802a7e8:	a009883a 	mov	r4,r20
 802a7ec:	102d883a 	mov	r22,r2
 802a7f0:	80214e80 	call	80214e8 <__mulsi3>
 802a7f4:	9826943a 	slli	r19,r19,16
 802a7f8:	9006d43a 	srli	r3,r18,16
 802a7fc:	1cc6b03a 	or	r3,r3,r19
 802a800:	1880052e 	bgeu	r3,r2,802a818 <__udivdi3+0xec>
 802a804:	1c47883a 	add	r3,r3,r17
 802a808:	b13fffc4 	addi	r4,r22,-1
 802a80c:	1c400136 	bltu	r3,r17,802a814 <__udivdi3+0xe8>
 802a810:	18814236 	bltu	r3,r2,802ad1c <__udivdi3+0x5f0>
 802a814:	202d883a 	mov	r22,r4
 802a818:	18a1c83a 	sub	r16,r3,r2
 802a81c:	8009883a 	mov	r4,r16
 802a820:	a80b883a 	mov	r5,r21
 802a824:	802b4480 	call	802b448 <__umodsi3>
 802a828:	1027883a 	mov	r19,r2
 802a82c:	8009883a 	mov	r4,r16
 802a830:	a80b883a 	mov	r5,r21
 802a834:	9826943a 	slli	r19,r19,16
 802a838:	802b3e40 	call	802b3e4 <__udivsi3>
 802a83c:	100b883a 	mov	r5,r2
 802a840:	a009883a 	mov	r4,r20
 802a844:	94bfffcc 	andi	r18,r18,65535
 802a848:	1021883a 	mov	r16,r2
 802a84c:	94e4b03a 	or	r18,r18,r19
 802a850:	80214e80 	call	80214e8 <__mulsi3>
 802a854:	9080052e 	bgeu	r18,r2,802a86c <__udivdi3+0x140>
 802a858:	8ca5883a 	add	r18,r17,r18
 802a85c:	80ffffc4 	addi	r3,r16,-1
 802a860:	94410c36 	bltu	r18,r17,802ac94 <__udivdi3+0x568>
 802a864:	90810b2e 	bgeu	r18,r2,802ac94 <__udivdi3+0x568>
 802a868:	843fff84 	addi	r16,r16,-2
 802a86c:	b004943a 	slli	r2,r22,16
 802a870:	0007883a 	mov	r3,zero
 802a874:	1404b03a 	or	r2,r2,r16
 802a878:	00005e06 	br	802a9f4 <__udivdi3+0x2c8>
 802a87c:	29c05b36 	bltu	r5,r7,802a9ec <__udivdi3+0x2c0>
 802a880:	00bfffd4 	movui	r2,65535
 802a884:	11c0672e 	bgeu	r2,r7,802aa24 <__udivdi3+0x2f8>
 802a888:	00804034 	movhi	r2,256
 802a88c:	10bfffc4 	addi	r2,r2,-1
 802a890:	11c10a36 	bltu	r2,r7,802acbc <__udivdi3+0x590>
 802a894:	00800404 	movi	r2,16
 802a898:	3886d83a 	srl	r3,r7,r2
 802a89c:	010200f4 	movhi	r4,2051
 802a8a0:	2107b004 	addi	r4,r4,7872
 802a8a4:	20c7883a 	add	r3,r4,r3
 802a8a8:	18c00003 	ldbu	r3,0(r3)
 802a8ac:	05c00804 	movi	r23,32
 802a8b0:	1885883a 	add	r2,r3,r2
 802a8b4:	b8afc83a 	sub	r23,r23,r2
 802a8b8:	b800671e 	bne	r23,zero,802aa58 <__udivdi3+0x32c>
 802a8bc:	3c010536 	bltu	r7,r16,802acd4 <__udivdi3+0x5a8>
 802a8c0:	9985403a 	cmpgeu	r2,r19,r6
 802a8c4:	0007883a 	mov	r3,zero
 802a8c8:	00004a06 	br	802a9f4 <__udivdi3+0x2c8>
 802a8cc:	3000041e 	bne	r6,zero,802a8e0 <__udivdi3+0x1b4>
 802a8d0:	000b883a 	mov	r5,zero
 802a8d4:	01000044 	movi	r4,1
 802a8d8:	802b3e40 	call	802b3e4 <__udivsi3>
 802a8dc:	1023883a 	mov	r17,r2
 802a8e0:	00bfffd4 	movui	r2,65535
 802a8e4:	1440532e 	bgeu	r2,r17,802aa34 <__udivdi3+0x308>
 802a8e8:	00804034 	movhi	r2,256
 802a8ec:	10bfffc4 	addi	r2,r2,-1
 802a8f0:	1440f436 	bltu	r2,r17,802acc4 <__udivdi3+0x598>
 802a8f4:	00800404 	movi	r2,16
 802a8f8:	8886d83a 	srl	r3,r17,r2
 802a8fc:	010200f4 	movhi	r4,2051
 802a900:	2107b004 	addi	r4,r4,7872
 802a904:	20c7883a 	add	r3,r4,r3
 802a908:	18c00003 	ldbu	r3,0(r3)
 802a90c:	1885883a 	add	r2,r3,r2
 802a910:	00c00804 	movi	r3,32
 802a914:	1887c83a 	sub	r3,r3,r2
 802a918:	1800a51e 	bne	r3,zero,802abb0 <__udivdi3+0x484>
 802a91c:	882ad43a 	srli	r21,r17,16
 802a920:	8461c83a 	sub	r16,r16,r17
 802a924:	8d3fffcc 	andi	r20,r17,65535
 802a928:	00c00044 	movi	r3,1
 802a92c:	a80b883a 	mov	r5,r21
 802a930:	8009883a 	mov	r4,r16
 802a934:	d8c00115 	stw	r3,4(sp)
 802a938:	802b4480 	call	802b448 <__umodsi3>
 802a93c:	a80b883a 	mov	r5,r21
 802a940:	8009883a 	mov	r4,r16
 802a944:	1027883a 	mov	r19,r2
 802a948:	802b3e40 	call	802b3e4 <__udivsi3>
 802a94c:	a00b883a 	mov	r5,r20
 802a950:	1009883a 	mov	r4,r2
 802a954:	102d883a 	mov	r22,r2
 802a958:	80214e80 	call	80214e8 <__mulsi3>
 802a95c:	9826943a 	slli	r19,r19,16
 802a960:	900ed43a 	srli	r7,r18,16
 802a964:	d8c00117 	ldw	r3,4(sp)
 802a968:	3cceb03a 	or	r7,r7,r19
 802a96c:	3880052e 	bgeu	r7,r2,802a984 <__udivdi3+0x258>
 802a970:	3c4f883a 	add	r7,r7,r17
 802a974:	b13fffc4 	addi	r4,r22,-1
 802a978:	3c400136 	bltu	r7,r17,802a980 <__udivdi3+0x254>
 802a97c:	3880e436 	bltu	r7,r2,802ad10 <__udivdi3+0x5e4>
 802a980:	202d883a 	mov	r22,r4
 802a984:	38a1c83a 	sub	r16,r7,r2
 802a988:	8009883a 	mov	r4,r16
 802a98c:	a80b883a 	mov	r5,r21
 802a990:	d8c00115 	stw	r3,4(sp)
 802a994:	802b4480 	call	802b448 <__umodsi3>
 802a998:	1027883a 	mov	r19,r2
 802a99c:	8009883a 	mov	r4,r16
 802a9a0:	a80b883a 	mov	r5,r21
 802a9a4:	9826943a 	slli	r19,r19,16
 802a9a8:	802b3e40 	call	802b3e4 <__udivsi3>
 802a9ac:	a00b883a 	mov	r5,r20
 802a9b0:	1009883a 	mov	r4,r2
 802a9b4:	94bfffcc 	andi	r18,r18,65535
 802a9b8:	1021883a 	mov	r16,r2
 802a9bc:	94e4b03a 	or	r18,r18,r19
 802a9c0:	80214e80 	call	80214e8 <__mulsi3>
 802a9c4:	d8c00117 	ldw	r3,4(sp)
 802a9c8:	9080052e 	bgeu	r18,r2,802a9e0 <__udivdi3+0x2b4>
 802a9cc:	8ca5883a 	add	r18,r17,r18
 802a9d0:	813fffc4 	addi	r4,r16,-1
 802a9d4:	9440ad36 	bltu	r18,r17,802ac8c <__udivdi3+0x560>
 802a9d8:	9080ac2e 	bgeu	r18,r2,802ac8c <__udivdi3+0x560>
 802a9dc:	843fff84 	addi	r16,r16,-2
 802a9e0:	b004943a 	slli	r2,r22,16
 802a9e4:	1404b03a 	or	r2,r2,r16
 802a9e8:	00000206 	br	802a9f4 <__udivdi3+0x2c8>
 802a9ec:	0007883a 	mov	r3,zero
 802a9f0:	0005883a 	mov	r2,zero
 802a9f4:	dfc00b17 	ldw	ra,44(sp)
 802a9f8:	df000a17 	ldw	fp,40(sp)
 802a9fc:	ddc00917 	ldw	r23,36(sp)
 802aa00:	dd800817 	ldw	r22,32(sp)
 802aa04:	dd400717 	ldw	r21,28(sp)
 802aa08:	dd000617 	ldw	r20,24(sp)
 802aa0c:	dcc00517 	ldw	r19,20(sp)
 802aa10:	dc800417 	ldw	r18,16(sp)
 802aa14:	dc400317 	ldw	r17,12(sp)
 802aa18:	dc000217 	ldw	r16,8(sp)
 802aa1c:	dec00c04 	addi	sp,sp,48
 802aa20:	f800283a 	ret
 802aa24:	00803fc4 	movi	r2,255
 802aa28:	11c5803a 	cmpltu	r2,r2,r7
 802aa2c:	100490fa 	slli	r2,r2,3
 802aa30:	003f9906 	br	802a898 <__alt_data_end+0xfffeb498>
 802aa34:	00803fc4 	movi	r2,255
 802aa38:	1445803a 	cmpltu	r2,r2,r17
 802aa3c:	100490fa 	slli	r2,r2,3
 802aa40:	003fad06 	br	802a8f8 <__alt_data_end+0xfffeb4f8>
 802aa44:	00804034 	movhi	r2,256
 802aa48:	10bfffc4 	addi	r2,r2,-1
 802aa4c:	11809f36 	bltu	r2,r6,802accc <__udivdi3+0x5a0>
 802aa50:	00800404 	movi	r2,16
 802aa54:	003f4c06 	br	802a788 <__alt_data_end+0xfffeb388>
 802aa58:	3dce983a 	sll	r7,r7,r23
 802aa5c:	30b8d83a 	srl	fp,r6,r2
 802aa60:	80a2d83a 	srl	r17,r16,r2
 802aa64:	35cc983a 	sll	r6,r6,r23
 802aa68:	3f38b03a 	or	fp,r7,fp
 802aa6c:	e024d43a 	srli	r18,fp,16
 802aa70:	9884d83a 	srl	r2,r19,r2
 802aa74:	85e0983a 	sll	r16,r16,r23
 802aa78:	8809883a 	mov	r4,r17
 802aa7c:	900b883a 	mov	r5,r18
 802aa80:	d9800015 	stw	r6,0(sp)
 802aa84:	1420b03a 	or	r16,r2,r16
 802aa88:	802b4480 	call	802b448 <__umodsi3>
 802aa8c:	900b883a 	mov	r5,r18
 802aa90:	8809883a 	mov	r4,r17
 802aa94:	1029883a 	mov	r20,r2
 802aa98:	e5bfffcc 	andi	r22,fp,65535
 802aa9c:	802b3e40 	call	802b3e4 <__udivsi3>
 802aaa0:	100b883a 	mov	r5,r2
 802aaa4:	b009883a 	mov	r4,r22
 802aaa8:	102b883a 	mov	r21,r2
 802aaac:	80214e80 	call	80214e8 <__mulsi3>
 802aab0:	a028943a 	slli	r20,r20,16
 802aab4:	8006d43a 	srli	r3,r16,16
 802aab8:	1d06b03a 	or	r3,r3,r20
 802aabc:	1880042e 	bgeu	r3,r2,802aad0 <__udivdi3+0x3a4>
 802aac0:	1f07883a 	add	r3,r3,fp
 802aac4:	a93fffc4 	addi	r4,r21,-1
 802aac8:	1f00892e 	bgeu	r3,fp,802acf0 <__udivdi3+0x5c4>
 802aacc:	202b883a 	mov	r21,r4
 802aad0:	18a3c83a 	sub	r17,r3,r2
 802aad4:	8809883a 	mov	r4,r17
 802aad8:	900b883a 	mov	r5,r18
 802aadc:	802b4480 	call	802b448 <__umodsi3>
 802aae0:	1029883a 	mov	r20,r2
 802aae4:	8809883a 	mov	r4,r17
 802aae8:	900b883a 	mov	r5,r18
 802aaec:	a028943a 	slli	r20,r20,16
 802aaf0:	802b3e40 	call	802b3e4 <__udivsi3>
 802aaf4:	100b883a 	mov	r5,r2
 802aaf8:	b009883a 	mov	r4,r22
 802aafc:	843fffcc 	andi	r16,r16,65535
 802ab00:	1023883a 	mov	r17,r2
 802ab04:	8520b03a 	or	r16,r16,r20
 802ab08:	80214e80 	call	80214e8 <__mulsi3>
 802ab0c:	8080042e 	bgeu	r16,r2,802ab20 <__udivdi3+0x3f4>
 802ab10:	8721883a 	add	r16,r16,fp
 802ab14:	88ffffc4 	addi	r3,r17,-1
 802ab18:	8700712e 	bgeu	r16,fp,802ace0 <__udivdi3+0x5b4>
 802ab1c:	1823883a 	mov	r17,r3
 802ab20:	a80e943a 	slli	r7,r21,16
 802ab24:	d8c00017 	ldw	r3,0(sp)
 802ab28:	80a1c83a 	sub	r16,r16,r2
 802ab2c:	3c64b03a 	or	r18,r7,r17
 802ab30:	1d3fffcc 	andi	r20,r3,65535
 802ab34:	9022d43a 	srli	r17,r18,16
 802ab38:	95bfffcc 	andi	r22,r18,65535
 802ab3c:	a00b883a 	mov	r5,r20
 802ab40:	b009883a 	mov	r4,r22
 802ab44:	182ad43a 	srli	r21,r3,16
 802ab48:	80214e80 	call	80214e8 <__mulsi3>
 802ab4c:	a00b883a 	mov	r5,r20
 802ab50:	8809883a 	mov	r4,r17
 802ab54:	1039883a 	mov	fp,r2
 802ab58:	80214e80 	call	80214e8 <__mulsi3>
 802ab5c:	8809883a 	mov	r4,r17
 802ab60:	a80b883a 	mov	r5,r21
 802ab64:	1029883a 	mov	r20,r2
 802ab68:	80214e80 	call	80214e8 <__mulsi3>
 802ab6c:	a80b883a 	mov	r5,r21
 802ab70:	b009883a 	mov	r4,r22
 802ab74:	1023883a 	mov	r17,r2
 802ab78:	80214e80 	call	80214e8 <__mulsi3>
 802ab7c:	e006d43a 	srli	r3,fp,16
 802ab80:	1505883a 	add	r2,r2,r20
 802ab84:	1887883a 	add	r3,r3,r2
 802ab88:	1d00022e 	bgeu	r3,r20,802ab94 <__udivdi3+0x468>
 802ab8c:	00800074 	movhi	r2,1
 802ab90:	88a3883a 	add	r17,r17,r2
 802ab94:	1804d43a 	srli	r2,r3,16
 802ab98:	1463883a 	add	r17,r2,r17
 802ab9c:	84404436 	bltu	r16,r17,802acb0 <__udivdi3+0x584>
 802aba0:	84403e26 	beq	r16,r17,802ac9c <__udivdi3+0x570>
 802aba4:	9005883a 	mov	r2,r18
 802aba8:	0007883a 	mov	r3,zero
 802abac:	003f9106 	br	802a9f4 <__alt_data_end+0xfffeb5f4>
 802abb0:	88e2983a 	sll	r17,r17,r3
 802abb4:	80aed83a 	srl	r23,r16,r2
 802abb8:	80e0983a 	sll	r16,r16,r3
 802abbc:	882ad43a 	srli	r21,r17,16
 802abc0:	9884d83a 	srl	r2,r19,r2
 802abc4:	b809883a 	mov	r4,r23
 802abc8:	a80b883a 	mov	r5,r21
 802abcc:	98e4983a 	sll	r18,r19,r3
 802abd0:	142cb03a 	or	r22,r2,r16
 802abd4:	802b4480 	call	802b448 <__umodsi3>
 802abd8:	b809883a 	mov	r4,r23
 802abdc:	a80b883a 	mov	r5,r21
 802abe0:	1027883a 	mov	r19,r2
 802abe4:	8d3fffcc 	andi	r20,r17,65535
 802abe8:	802b3e40 	call	802b3e4 <__udivsi3>
 802abec:	a009883a 	mov	r4,r20
 802abf0:	100b883a 	mov	r5,r2
 802abf4:	102f883a 	mov	r23,r2
 802abf8:	80214e80 	call	80214e8 <__mulsi3>
 802abfc:	9826943a 	slli	r19,r19,16
 802ac00:	b008d43a 	srli	r4,r22,16
 802ac04:	24c8b03a 	or	r4,r4,r19
 802ac08:	2080062e 	bgeu	r4,r2,802ac24 <__udivdi3+0x4f8>
 802ac0c:	2449883a 	add	r4,r4,r17
 802ac10:	b8ffffc4 	addi	r3,r23,-1
 802ac14:	24403c36 	bltu	r4,r17,802ad08 <__udivdi3+0x5dc>
 802ac18:	20803b2e 	bgeu	r4,r2,802ad08 <__udivdi3+0x5dc>
 802ac1c:	bdffff84 	addi	r23,r23,-2
 802ac20:	2449883a 	add	r4,r4,r17
 802ac24:	20a1c83a 	sub	r16,r4,r2
 802ac28:	a80b883a 	mov	r5,r21
 802ac2c:	8009883a 	mov	r4,r16
 802ac30:	802b4480 	call	802b448 <__umodsi3>
 802ac34:	a80b883a 	mov	r5,r21
 802ac38:	8009883a 	mov	r4,r16
 802ac3c:	1027883a 	mov	r19,r2
 802ac40:	802b3e40 	call	802b3e4 <__udivsi3>
 802ac44:	a009883a 	mov	r4,r20
 802ac48:	100b883a 	mov	r5,r2
 802ac4c:	9826943a 	slli	r19,r19,16
 802ac50:	1039883a 	mov	fp,r2
 802ac54:	80214e80 	call	80214e8 <__mulsi3>
 802ac58:	b13fffcc 	andi	r4,r22,65535
 802ac5c:	24c8b03a 	or	r4,r4,r19
 802ac60:	2080062e 	bgeu	r4,r2,802ac7c <__udivdi3+0x550>
 802ac64:	2449883a 	add	r4,r4,r17
 802ac68:	e0ffffc4 	addi	r3,fp,-1
 802ac6c:	24402436 	bltu	r4,r17,802ad00 <__udivdi3+0x5d4>
 802ac70:	2080232e 	bgeu	r4,r2,802ad00 <__udivdi3+0x5d4>
 802ac74:	e73fff84 	addi	fp,fp,-2
 802ac78:	2449883a 	add	r4,r4,r17
 802ac7c:	b82e943a 	slli	r23,r23,16
 802ac80:	20a1c83a 	sub	r16,r4,r2
 802ac84:	bf06b03a 	or	r3,r23,fp
 802ac88:	003f2806 	br	802a92c <__alt_data_end+0xfffeb52c>
 802ac8c:	2021883a 	mov	r16,r4
 802ac90:	003f5306 	br	802a9e0 <__alt_data_end+0xfffeb5e0>
 802ac94:	1821883a 	mov	r16,r3
 802ac98:	003ef406 	br	802a86c <__alt_data_end+0xfffeb46c>
 802ac9c:	1806943a 	slli	r3,r3,16
 802aca0:	9de6983a 	sll	r19,r19,r23
 802aca4:	e73fffcc 	andi	fp,fp,65535
 802aca8:	1f07883a 	add	r3,r3,fp
 802acac:	98ffbd2e 	bgeu	r19,r3,802aba4 <__alt_data_end+0xfffeb7a4>
 802acb0:	90bfffc4 	addi	r2,r18,-1
 802acb4:	0007883a 	mov	r3,zero
 802acb8:	003f4e06 	br	802a9f4 <__alt_data_end+0xfffeb5f4>
 802acbc:	00800604 	movi	r2,24
 802acc0:	003ef506 	br	802a898 <__alt_data_end+0xfffeb498>
 802acc4:	00800604 	movi	r2,24
 802acc8:	003f0b06 	br	802a8f8 <__alt_data_end+0xfffeb4f8>
 802accc:	00800604 	movi	r2,24
 802acd0:	003ead06 	br	802a788 <__alt_data_end+0xfffeb388>
 802acd4:	0007883a 	mov	r3,zero
 802acd8:	00800044 	movi	r2,1
 802acdc:	003f4506 	br	802a9f4 <__alt_data_end+0xfffeb5f4>
 802ace0:	80bf8e2e 	bgeu	r16,r2,802ab1c <__alt_data_end+0xfffeb71c>
 802ace4:	8c7fff84 	addi	r17,r17,-2
 802ace8:	8721883a 	add	r16,r16,fp
 802acec:	003f8c06 	br	802ab20 <__alt_data_end+0xfffeb720>
 802acf0:	18bf762e 	bgeu	r3,r2,802aacc <__alt_data_end+0xfffeb6cc>
 802acf4:	ad7fff84 	addi	r21,r21,-2
 802acf8:	1f07883a 	add	r3,r3,fp
 802acfc:	003f7406 	br	802aad0 <__alt_data_end+0xfffeb6d0>
 802ad00:	1839883a 	mov	fp,r3
 802ad04:	003fdd06 	br	802ac7c <__alt_data_end+0xfffeb87c>
 802ad08:	182f883a 	mov	r23,r3
 802ad0c:	003fc506 	br	802ac24 <__alt_data_end+0xfffeb824>
 802ad10:	b5bfff84 	addi	r22,r22,-2
 802ad14:	3c4f883a 	add	r7,r7,r17
 802ad18:	003f1a06 	br	802a984 <__alt_data_end+0xfffeb584>
 802ad1c:	b5bfff84 	addi	r22,r22,-2
 802ad20:	1c47883a 	add	r3,r3,r17
 802ad24:	003ebc06 	br	802a818 <__alt_data_end+0xfffeb418>

0802ad28 <__umoddi3>:
 802ad28:	defff304 	addi	sp,sp,-52
 802ad2c:	df000b15 	stw	fp,44(sp)
 802ad30:	dc400415 	stw	r17,16(sp)
 802ad34:	dc000315 	stw	r16,12(sp)
 802ad38:	dfc00c15 	stw	ra,48(sp)
 802ad3c:	ddc00a15 	stw	r23,40(sp)
 802ad40:	dd800915 	stw	r22,36(sp)
 802ad44:	dd400815 	stw	r21,32(sp)
 802ad48:	dd000715 	stw	r20,28(sp)
 802ad4c:	dcc00615 	stw	r19,24(sp)
 802ad50:	dc800515 	stw	r18,20(sp)
 802ad54:	2021883a 	mov	r16,r4
 802ad58:	2823883a 	mov	r17,r5
 802ad5c:	2839883a 	mov	fp,r5
 802ad60:	3800401e 	bne	r7,zero,802ae64 <__umoddi3+0x13c>
 802ad64:	3027883a 	mov	r19,r6
 802ad68:	2029883a 	mov	r20,r4
 802ad6c:	2980552e 	bgeu	r5,r6,802aec4 <__umoddi3+0x19c>
 802ad70:	00bfffd4 	movui	r2,65535
 802ad74:	1180a236 	bltu	r2,r6,802b000 <__umoddi3+0x2d8>
 802ad78:	01003fc4 	movi	r4,255
 802ad7c:	2189803a 	cmpltu	r4,r4,r6
 802ad80:	200890fa 	slli	r4,r4,3
 802ad84:	3104d83a 	srl	r2,r6,r4
 802ad88:	00c200f4 	movhi	r3,2051
 802ad8c:	18c7b004 	addi	r3,r3,7872
 802ad90:	1885883a 	add	r2,r3,r2
 802ad94:	10c00003 	ldbu	r3,0(r2)
 802ad98:	00800804 	movi	r2,32
 802ad9c:	1909883a 	add	r4,r3,r4
 802ada0:	1125c83a 	sub	r18,r2,r4
 802ada4:	90000526 	beq	r18,zero,802adbc <__umoddi3+0x94>
 802ada8:	8ca2983a 	sll	r17,r17,r18
 802adac:	8108d83a 	srl	r4,r16,r4
 802adb0:	34a6983a 	sll	r19,r6,r18
 802adb4:	84a8983a 	sll	r20,r16,r18
 802adb8:	2478b03a 	or	fp,r4,r17
 802adbc:	982cd43a 	srli	r22,r19,16
 802adc0:	e009883a 	mov	r4,fp
 802adc4:	9dffffcc 	andi	r23,r19,65535
 802adc8:	b00b883a 	mov	r5,r22
 802adcc:	802b4480 	call	802b448 <__umodsi3>
 802add0:	b00b883a 	mov	r5,r22
 802add4:	e009883a 	mov	r4,fp
 802add8:	102b883a 	mov	r21,r2
 802addc:	802b3e40 	call	802b3e4 <__udivsi3>
 802ade0:	100b883a 	mov	r5,r2
 802ade4:	b809883a 	mov	r4,r23
 802ade8:	80214e80 	call	80214e8 <__mulsi3>
 802adec:	a82a943a 	slli	r21,r21,16
 802adf0:	a006d43a 	srli	r3,r20,16
 802adf4:	1d46b03a 	or	r3,r3,r21
 802adf8:	1880032e 	bgeu	r3,r2,802ae08 <__umoddi3+0xe0>
 802adfc:	1cc7883a 	add	r3,r3,r19
 802ae00:	1cc00136 	bltu	r3,r19,802ae08 <__umoddi3+0xe0>
 802ae04:	18813136 	bltu	r3,r2,802b2cc <__umoddi3+0x5a4>
 802ae08:	18a1c83a 	sub	r16,r3,r2
 802ae0c:	b00b883a 	mov	r5,r22
 802ae10:	8009883a 	mov	r4,r16
 802ae14:	802b4480 	call	802b448 <__umodsi3>
 802ae18:	b00b883a 	mov	r5,r22
 802ae1c:	8009883a 	mov	r4,r16
 802ae20:	1023883a 	mov	r17,r2
 802ae24:	802b3e40 	call	802b3e4 <__udivsi3>
 802ae28:	100b883a 	mov	r5,r2
 802ae2c:	b809883a 	mov	r4,r23
 802ae30:	8822943a 	slli	r17,r17,16
 802ae34:	80214e80 	call	80214e8 <__mulsi3>
 802ae38:	a0ffffcc 	andi	r3,r20,65535
 802ae3c:	1c46b03a 	or	r3,r3,r17
 802ae40:	1880042e 	bgeu	r3,r2,802ae54 <__umoddi3+0x12c>
 802ae44:	1cc7883a 	add	r3,r3,r19
 802ae48:	1cc00236 	bltu	r3,r19,802ae54 <__umoddi3+0x12c>
 802ae4c:	1880012e 	bgeu	r3,r2,802ae54 <__umoddi3+0x12c>
 802ae50:	1cc7883a 	add	r3,r3,r19
 802ae54:	1885c83a 	sub	r2,r3,r2
 802ae58:	1484d83a 	srl	r2,r2,r18
 802ae5c:	0007883a 	mov	r3,zero
 802ae60:	00005306 	br	802afb0 <__umoddi3+0x288>
 802ae64:	29c05036 	bltu	r5,r7,802afa8 <__umoddi3+0x280>
 802ae68:	00bfffd4 	movui	r2,65535
 802ae6c:	11c05c2e 	bgeu	r2,r7,802afe0 <__umoddi3+0x2b8>
 802ae70:	00804034 	movhi	r2,256
 802ae74:	10bfffc4 	addi	r2,r2,-1
 802ae78:	11c10636 	bltu	r2,r7,802b294 <__umoddi3+0x56c>
 802ae7c:	01000404 	movi	r4,16
 802ae80:	3904d83a 	srl	r2,r7,r4
 802ae84:	00c200f4 	movhi	r3,2051
 802ae88:	18c7b004 	addi	r3,r3,7872
 802ae8c:	1885883a 	add	r2,r3,r2
 802ae90:	14c00003 	ldbu	r19,0(r2)
 802ae94:	00c00804 	movi	r3,32
 802ae98:	9927883a 	add	r19,r19,r4
 802ae9c:	1ce9c83a 	sub	r20,r3,r19
 802aea0:	a0005c1e 	bne	r20,zero,802b014 <__umoddi3+0x2ec>
 802aea4:	3c400136 	bltu	r7,r17,802aeac <__umoddi3+0x184>
 802aea8:	81810a36 	bltu	r16,r6,802b2d4 <__umoddi3+0x5ac>
 802aeac:	8185c83a 	sub	r2,r16,r6
 802aeb0:	89e3c83a 	sub	r17,r17,r7
 802aeb4:	8089803a 	cmpltu	r4,r16,r2
 802aeb8:	8939c83a 	sub	fp,r17,r4
 802aebc:	e007883a 	mov	r3,fp
 802aec0:	00003b06 	br	802afb0 <__umoddi3+0x288>
 802aec4:	3000041e 	bne	r6,zero,802aed8 <__umoddi3+0x1b0>
 802aec8:	000b883a 	mov	r5,zero
 802aecc:	01000044 	movi	r4,1
 802aed0:	802b3e40 	call	802b3e4 <__udivsi3>
 802aed4:	1027883a 	mov	r19,r2
 802aed8:	00bfffd4 	movui	r2,65535
 802aedc:	14c0442e 	bgeu	r2,r19,802aff0 <__umoddi3+0x2c8>
 802aee0:	00804034 	movhi	r2,256
 802aee4:	10bfffc4 	addi	r2,r2,-1
 802aee8:	14c0ec36 	bltu	r2,r19,802b29c <__umoddi3+0x574>
 802aeec:	00800404 	movi	r2,16
 802aef0:	9886d83a 	srl	r3,r19,r2
 802aef4:	010200f4 	movhi	r4,2051
 802aef8:	2107b004 	addi	r4,r4,7872
 802aefc:	20c7883a 	add	r3,r4,r3
 802af00:	18c00003 	ldbu	r3,0(r3)
 802af04:	1887883a 	add	r3,r3,r2
 802af08:	00800804 	movi	r2,32
 802af0c:	10e5c83a 	sub	r18,r2,r3
 802af10:	9000ab1e 	bne	r18,zero,802b1c0 <__umoddi3+0x498>
 802af14:	982cd43a 	srli	r22,r19,16
 802af18:	8ce3c83a 	sub	r17,r17,r19
 802af1c:	9dffffcc 	andi	r23,r19,65535
 802af20:	b00b883a 	mov	r5,r22
 802af24:	8809883a 	mov	r4,r17
 802af28:	802b4480 	call	802b448 <__umodsi3>
 802af2c:	b00b883a 	mov	r5,r22
 802af30:	8809883a 	mov	r4,r17
 802af34:	102b883a 	mov	r21,r2
 802af38:	802b3e40 	call	802b3e4 <__udivsi3>
 802af3c:	b80b883a 	mov	r5,r23
 802af40:	1009883a 	mov	r4,r2
 802af44:	80214e80 	call	80214e8 <__mulsi3>
 802af48:	a82a943a 	slli	r21,r21,16
 802af4c:	a006d43a 	srli	r3,r20,16
 802af50:	1d46b03a 	or	r3,r3,r21
 802af54:	1880042e 	bgeu	r3,r2,802af68 <__umoddi3+0x240>
 802af58:	1cc7883a 	add	r3,r3,r19
 802af5c:	1cc00236 	bltu	r3,r19,802af68 <__umoddi3+0x240>
 802af60:	1880012e 	bgeu	r3,r2,802af68 <__umoddi3+0x240>
 802af64:	1cc7883a 	add	r3,r3,r19
 802af68:	18a1c83a 	sub	r16,r3,r2
 802af6c:	b00b883a 	mov	r5,r22
 802af70:	8009883a 	mov	r4,r16
 802af74:	802b4480 	call	802b448 <__umodsi3>
 802af78:	1023883a 	mov	r17,r2
 802af7c:	b00b883a 	mov	r5,r22
 802af80:	8009883a 	mov	r4,r16
 802af84:	802b3e40 	call	802b3e4 <__udivsi3>
 802af88:	8822943a 	slli	r17,r17,16
 802af8c:	b80b883a 	mov	r5,r23
 802af90:	1009883a 	mov	r4,r2
 802af94:	80214e80 	call	80214e8 <__mulsi3>
 802af98:	a53fffcc 	andi	r20,r20,65535
 802af9c:	a446b03a 	or	r3,r20,r17
 802afa0:	18bfac2e 	bgeu	r3,r2,802ae54 <__alt_data_end+0xfffeba54>
 802afa4:	003fa706 	br	802ae44 <__alt_data_end+0xfffeba44>
 802afa8:	2005883a 	mov	r2,r4
 802afac:	2807883a 	mov	r3,r5
 802afb0:	dfc00c17 	ldw	ra,48(sp)
 802afb4:	df000b17 	ldw	fp,44(sp)
 802afb8:	ddc00a17 	ldw	r23,40(sp)
 802afbc:	dd800917 	ldw	r22,36(sp)
 802afc0:	dd400817 	ldw	r21,32(sp)
 802afc4:	dd000717 	ldw	r20,28(sp)
 802afc8:	dcc00617 	ldw	r19,24(sp)
 802afcc:	dc800517 	ldw	r18,20(sp)
 802afd0:	dc400417 	ldw	r17,16(sp)
 802afd4:	dc000317 	ldw	r16,12(sp)
 802afd8:	dec00d04 	addi	sp,sp,52
 802afdc:	f800283a 	ret
 802afe0:	04c03fc4 	movi	r19,255
 802afe4:	99c9803a 	cmpltu	r4,r19,r7
 802afe8:	200890fa 	slli	r4,r4,3
 802afec:	003fa406 	br	802ae80 <__alt_data_end+0xfffeba80>
 802aff0:	00803fc4 	movi	r2,255
 802aff4:	14c5803a 	cmpltu	r2,r2,r19
 802aff8:	100490fa 	slli	r2,r2,3
 802affc:	003fbc06 	br	802aef0 <__alt_data_end+0xfffebaf0>
 802b000:	00804034 	movhi	r2,256
 802b004:	10bfffc4 	addi	r2,r2,-1
 802b008:	1180a636 	bltu	r2,r6,802b2a4 <__umoddi3+0x57c>
 802b00c:	01000404 	movi	r4,16
 802b010:	003f5c06 	br	802ad84 <__alt_data_end+0xfffeb984>
 802b014:	3d0e983a 	sll	r7,r7,r20
 802b018:	34ead83a 	srl	r21,r6,r19
 802b01c:	8cc6d83a 	srl	r3,r17,r19
 802b020:	8d10983a 	sll	r8,r17,r20
 802b024:	3d6ab03a 	or	r21,r7,r21
 802b028:	a82cd43a 	srli	r22,r21,16
 802b02c:	84e2d83a 	srl	r17,r16,r19
 802b030:	1809883a 	mov	r4,r3
 802b034:	b00b883a 	mov	r5,r22
 802b038:	8a22b03a 	or	r17,r17,r8
 802b03c:	3524983a 	sll	r18,r6,r20
 802b040:	dc400015 	stw	r17,0(sp)
 802b044:	d8c00115 	stw	r3,4(sp)
 802b048:	802b4480 	call	802b448 <__umodsi3>
 802b04c:	d8c00117 	ldw	r3,4(sp)
 802b050:	b00b883a 	mov	r5,r22
 802b054:	1039883a 	mov	fp,r2
 802b058:	1809883a 	mov	r4,r3
 802b05c:	802b3e40 	call	802b3e4 <__udivsi3>
 802b060:	adffffcc 	andi	r23,r21,65535
 802b064:	100b883a 	mov	r5,r2
 802b068:	b809883a 	mov	r4,r23
 802b06c:	1023883a 	mov	r17,r2
 802b070:	80214e80 	call	80214e8 <__mulsi3>
 802b074:	d9400017 	ldw	r5,0(sp)
 802b078:	e008943a 	slli	r4,fp,16
 802b07c:	8520983a 	sll	r16,r16,r20
 802b080:	2806d43a 	srli	r3,r5,16
 802b084:	1906b03a 	or	r3,r3,r4
 802b088:	1880042e 	bgeu	r3,r2,802b09c <__umoddi3+0x374>
 802b08c:	1d47883a 	add	r3,r3,r21
 802b090:	893fffc4 	addi	r4,r17,-1
 802b094:	1d40892e 	bgeu	r3,r21,802b2bc <__umoddi3+0x594>
 802b098:	2023883a 	mov	r17,r4
 802b09c:	18b9c83a 	sub	fp,r3,r2
 802b0a0:	b00b883a 	mov	r5,r22
 802b0a4:	e009883a 	mov	r4,fp
 802b0a8:	802b4480 	call	802b448 <__umodsi3>
 802b0ac:	b00b883a 	mov	r5,r22
 802b0b0:	e009883a 	mov	r4,fp
 802b0b4:	d8800215 	stw	r2,8(sp)
 802b0b8:	802b3e40 	call	802b3e4 <__udivsi3>
 802b0bc:	100b883a 	mov	r5,r2
 802b0c0:	b809883a 	mov	r4,r23
 802b0c4:	102d883a 	mov	r22,r2
 802b0c8:	80214e80 	call	80214e8 <__mulsi3>
 802b0cc:	d9800217 	ldw	r6,8(sp)
 802b0d0:	d8c00017 	ldw	r3,0(sp)
 802b0d4:	300c943a 	slli	r6,r6,16
 802b0d8:	1a3fffcc 	andi	r8,r3,65535
 802b0dc:	4190b03a 	or	r8,r8,r6
 802b0e0:	4080042e 	bgeu	r8,r2,802b0f4 <__umoddi3+0x3cc>
 802b0e4:	4551883a 	add	r8,r8,r21
 802b0e8:	b0ffffc4 	addi	r3,r22,-1
 802b0ec:	45406f2e 	bgeu	r8,r21,802b2ac <__umoddi3+0x584>
 802b0f0:	182d883a 	mov	r22,r3
 802b0f4:	880e943a 	slli	r7,r17,16
 802b0f8:	9006d43a 	srli	r3,r18,16
 802b0fc:	91bfffcc 	andi	r6,r18,65535
 802b100:	3dacb03a 	or	r22,r7,r22
 802b104:	b02ed43a 	srli	r23,r22,16
 802b108:	b5bfffcc 	andi	r22,r22,65535
 802b10c:	300b883a 	mov	r5,r6
 802b110:	b009883a 	mov	r4,r22
 802b114:	40a3c83a 	sub	r17,r8,r2
 802b118:	d8c00115 	stw	r3,4(sp)
 802b11c:	d9800215 	stw	r6,8(sp)
 802b120:	80214e80 	call	80214e8 <__mulsi3>
 802b124:	d9800217 	ldw	r6,8(sp)
 802b128:	b809883a 	mov	r4,r23
 802b12c:	1039883a 	mov	fp,r2
 802b130:	300b883a 	mov	r5,r6
 802b134:	80214e80 	call	80214e8 <__mulsi3>
 802b138:	d8c00117 	ldw	r3,4(sp)
 802b13c:	b809883a 	mov	r4,r23
 802b140:	d8800215 	stw	r2,8(sp)
 802b144:	180b883a 	mov	r5,r3
 802b148:	80214e80 	call	80214e8 <__mulsi3>
 802b14c:	d8c00117 	ldw	r3,4(sp)
 802b150:	b009883a 	mov	r4,r22
 802b154:	102f883a 	mov	r23,r2
 802b158:	180b883a 	mov	r5,r3
 802b15c:	80214e80 	call	80214e8 <__mulsi3>
 802b160:	d9800217 	ldw	r6,8(sp)
 802b164:	e006d43a 	srli	r3,fp,16
 802b168:	1185883a 	add	r2,r2,r6
 802b16c:	1885883a 	add	r2,r3,r2
 802b170:	1180022e 	bgeu	r2,r6,802b17c <__umoddi3+0x454>
 802b174:	00c00074 	movhi	r3,1
 802b178:	b8ef883a 	add	r23,r23,r3
 802b17c:	1006d43a 	srli	r3,r2,16
 802b180:	1004943a 	slli	r2,r2,16
 802b184:	e73fffcc 	andi	fp,fp,65535
 802b188:	1dc7883a 	add	r3,r3,r23
 802b18c:	1739883a 	add	fp,r2,fp
 802b190:	88c03a36 	bltu	r17,r3,802b27c <__umoddi3+0x554>
 802b194:	88c05126 	beq	r17,r3,802b2dc <__umoddi3+0x5b4>
 802b198:	88c9c83a 	sub	r4,r17,r3
 802b19c:	e00f883a 	mov	r7,fp
 802b1a0:	81cfc83a 	sub	r7,r16,r7
 802b1a4:	81c7803a 	cmpltu	r3,r16,r7
 802b1a8:	20c7c83a 	sub	r3,r4,r3
 802b1ac:	1cc4983a 	sll	r2,r3,r19
 802b1b0:	3d0ed83a 	srl	r7,r7,r20
 802b1b4:	1d06d83a 	srl	r3,r3,r20
 802b1b8:	11c4b03a 	or	r2,r2,r7
 802b1bc:	003f7c06 	br	802afb0 <__alt_data_end+0xfffebbb0>
 802b1c0:	9ca6983a 	sll	r19,r19,r18
 802b1c4:	88f8d83a 	srl	fp,r17,r3
 802b1c8:	80c4d83a 	srl	r2,r16,r3
 802b1cc:	982cd43a 	srli	r22,r19,16
 802b1d0:	8ca2983a 	sll	r17,r17,r18
 802b1d4:	e009883a 	mov	r4,fp
 802b1d8:	b00b883a 	mov	r5,r22
 802b1dc:	146ab03a 	or	r21,r2,r17
 802b1e0:	802b4480 	call	802b448 <__umodsi3>
 802b1e4:	b00b883a 	mov	r5,r22
 802b1e8:	e009883a 	mov	r4,fp
 802b1ec:	1029883a 	mov	r20,r2
 802b1f0:	9dffffcc 	andi	r23,r19,65535
 802b1f4:	802b3e40 	call	802b3e4 <__udivsi3>
 802b1f8:	b809883a 	mov	r4,r23
 802b1fc:	100b883a 	mov	r5,r2
 802b200:	80214e80 	call	80214e8 <__mulsi3>
 802b204:	a008943a 	slli	r4,r20,16
 802b208:	a806d43a 	srli	r3,r21,16
 802b20c:	84a8983a 	sll	r20,r16,r18
 802b210:	1906b03a 	or	r3,r3,r4
 802b214:	1880042e 	bgeu	r3,r2,802b228 <__umoddi3+0x500>
 802b218:	1cc7883a 	add	r3,r3,r19
 802b21c:	1cc00236 	bltu	r3,r19,802b228 <__umoddi3+0x500>
 802b220:	1880012e 	bgeu	r3,r2,802b228 <__umoddi3+0x500>
 802b224:	1cc7883a 	add	r3,r3,r19
 802b228:	18a3c83a 	sub	r17,r3,r2
 802b22c:	b00b883a 	mov	r5,r22
 802b230:	8809883a 	mov	r4,r17
 802b234:	802b4480 	call	802b448 <__umodsi3>
 802b238:	b00b883a 	mov	r5,r22
 802b23c:	8809883a 	mov	r4,r17
 802b240:	1021883a 	mov	r16,r2
 802b244:	802b3e40 	call	802b3e4 <__udivsi3>
 802b248:	100b883a 	mov	r5,r2
 802b24c:	b809883a 	mov	r4,r23
 802b250:	8020943a 	slli	r16,r16,16
 802b254:	80214e80 	call	80214e8 <__mulsi3>
 802b258:	a8ffffcc 	andi	r3,r21,65535
 802b25c:	1c06b03a 	or	r3,r3,r16
 802b260:	1880042e 	bgeu	r3,r2,802b274 <__umoddi3+0x54c>
 802b264:	1cc7883a 	add	r3,r3,r19
 802b268:	1cc00236 	bltu	r3,r19,802b274 <__umoddi3+0x54c>
 802b26c:	1880012e 	bgeu	r3,r2,802b274 <__umoddi3+0x54c>
 802b270:	1cc7883a 	add	r3,r3,r19
 802b274:	18a3c83a 	sub	r17,r3,r2
 802b278:	003f2906 	br	802af20 <__alt_data_end+0xfffebb20>
 802b27c:	e48fc83a 	sub	r7,fp,r18
 802b280:	1d49c83a 	sub	r4,r3,r21
 802b284:	e1f9803a 	cmpltu	fp,fp,r7
 802b288:	2739c83a 	sub	fp,r4,fp
 802b28c:	8f09c83a 	sub	r4,r17,fp
 802b290:	003fc306 	br	802b1a0 <__alt_data_end+0xfffebda0>
 802b294:	01000604 	movi	r4,24
 802b298:	003ef906 	br	802ae80 <__alt_data_end+0xfffeba80>
 802b29c:	00800604 	movi	r2,24
 802b2a0:	003f1306 	br	802aef0 <__alt_data_end+0xfffebaf0>
 802b2a4:	01000604 	movi	r4,24
 802b2a8:	003eb606 	br	802ad84 <__alt_data_end+0xfffeb984>
 802b2ac:	40bf902e 	bgeu	r8,r2,802b0f0 <__alt_data_end+0xfffebcf0>
 802b2b0:	b5bfff84 	addi	r22,r22,-2
 802b2b4:	4551883a 	add	r8,r8,r21
 802b2b8:	003f8e06 	br	802b0f4 <__alt_data_end+0xfffebcf4>
 802b2bc:	18bf762e 	bgeu	r3,r2,802b098 <__alt_data_end+0xfffebc98>
 802b2c0:	8c7fff84 	addi	r17,r17,-2
 802b2c4:	1d47883a 	add	r3,r3,r21
 802b2c8:	003f7406 	br	802b09c <__alt_data_end+0xfffebc9c>
 802b2cc:	1cc7883a 	add	r3,r3,r19
 802b2d0:	003ecd06 	br	802ae08 <__alt_data_end+0xfffeba08>
 802b2d4:	8005883a 	mov	r2,r16
 802b2d8:	003ef806 	br	802aebc <__alt_data_end+0xfffebabc>
 802b2dc:	873fe736 	bltu	r16,fp,802b27c <__alt_data_end+0xfffebe7c>
 802b2e0:	e00f883a 	mov	r7,fp
 802b2e4:	0009883a 	mov	r4,zero
 802b2e8:	003fad06 	br	802b1a0 <__alt_data_end+0xfffebda0>

0802b2ec <__divsi3>:
 802b2ec:	20001b16 	blt	r4,zero,802b35c <__divsi3+0x70>
 802b2f0:	000f883a 	mov	r7,zero
 802b2f4:	28001616 	blt	r5,zero,802b350 <__divsi3+0x64>
 802b2f8:	200d883a 	mov	r6,r4
 802b2fc:	29001a2e 	bgeu	r5,r4,802b368 <__divsi3+0x7c>
 802b300:	00800804 	movi	r2,32
 802b304:	00c00044 	movi	r3,1
 802b308:	00000106 	br	802b310 <__divsi3+0x24>
 802b30c:	10000d26 	beq	r2,zero,802b344 <__divsi3+0x58>
 802b310:	294b883a 	add	r5,r5,r5
 802b314:	10bfffc4 	addi	r2,r2,-1
 802b318:	18c7883a 	add	r3,r3,r3
 802b31c:	293ffb36 	bltu	r5,r4,802b30c <__alt_data_end+0xfffebf0c>
 802b320:	0005883a 	mov	r2,zero
 802b324:	18000726 	beq	r3,zero,802b344 <__divsi3+0x58>
 802b328:	0005883a 	mov	r2,zero
 802b32c:	31400236 	bltu	r6,r5,802b338 <__divsi3+0x4c>
 802b330:	314dc83a 	sub	r6,r6,r5
 802b334:	10c4b03a 	or	r2,r2,r3
 802b338:	1806d07a 	srli	r3,r3,1
 802b33c:	280ad07a 	srli	r5,r5,1
 802b340:	183ffa1e 	bne	r3,zero,802b32c <__alt_data_end+0xfffebf2c>
 802b344:	38000126 	beq	r7,zero,802b34c <__divsi3+0x60>
 802b348:	0085c83a 	sub	r2,zero,r2
 802b34c:	f800283a 	ret
 802b350:	014bc83a 	sub	r5,zero,r5
 802b354:	39c0005c 	xori	r7,r7,1
 802b358:	003fe706 	br	802b2f8 <__alt_data_end+0xfffebef8>
 802b35c:	0109c83a 	sub	r4,zero,r4
 802b360:	01c00044 	movi	r7,1
 802b364:	003fe306 	br	802b2f4 <__alt_data_end+0xfffebef4>
 802b368:	00c00044 	movi	r3,1
 802b36c:	003fee06 	br	802b328 <__alt_data_end+0xfffebf28>

0802b370 <__modsi3>:
 802b370:	20001716 	blt	r4,zero,802b3d0 <__modsi3+0x60>
 802b374:	000f883a 	mov	r7,zero
 802b378:	2005883a 	mov	r2,r4
 802b37c:	28001216 	blt	r5,zero,802b3c8 <__modsi3+0x58>
 802b380:	2900162e 	bgeu	r5,r4,802b3dc <__modsi3+0x6c>
 802b384:	01800804 	movi	r6,32
 802b388:	00c00044 	movi	r3,1
 802b38c:	00000106 	br	802b394 <__modsi3+0x24>
 802b390:	30000a26 	beq	r6,zero,802b3bc <__modsi3+0x4c>
 802b394:	294b883a 	add	r5,r5,r5
 802b398:	31bfffc4 	addi	r6,r6,-1
 802b39c:	18c7883a 	add	r3,r3,r3
 802b3a0:	293ffb36 	bltu	r5,r4,802b390 <__alt_data_end+0xfffebf90>
 802b3a4:	18000526 	beq	r3,zero,802b3bc <__modsi3+0x4c>
 802b3a8:	1806d07a 	srli	r3,r3,1
 802b3ac:	11400136 	bltu	r2,r5,802b3b4 <__modsi3+0x44>
 802b3b0:	1145c83a 	sub	r2,r2,r5
 802b3b4:	280ad07a 	srli	r5,r5,1
 802b3b8:	183ffb1e 	bne	r3,zero,802b3a8 <__alt_data_end+0xfffebfa8>
 802b3bc:	38000126 	beq	r7,zero,802b3c4 <__modsi3+0x54>
 802b3c0:	0085c83a 	sub	r2,zero,r2
 802b3c4:	f800283a 	ret
 802b3c8:	014bc83a 	sub	r5,zero,r5
 802b3cc:	003fec06 	br	802b380 <__alt_data_end+0xfffebf80>
 802b3d0:	0109c83a 	sub	r4,zero,r4
 802b3d4:	01c00044 	movi	r7,1
 802b3d8:	003fe706 	br	802b378 <__alt_data_end+0xfffebf78>
 802b3dc:	00c00044 	movi	r3,1
 802b3e0:	003ff106 	br	802b3a8 <__alt_data_end+0xfffebfa8>

0802b3e4 <__udivsi3>:
 802b3e4:	200d883a 	mov	r6,r4
 802b3e8:	2900152e 	bgeu	r5,r4,802b440 <__udivsi3+0x5c>
 802b3ec:	28001416 	blt	r5,zero,802b440 <__udivsi3+0x5c>
 802b3f0:	00800804 	movi	r2,32
 802b3f4:	00c00044 	movi	r3,1
 802b3f8:	00000206 	br	802b404 <__udivsi3+0x20>
 802b3fc:	10000e26 	beq	r2,zero,802b438 <__udivsi3+0x54>
 802b400:	28000516 	blt	r5,zero,802b418 <__udivsi3+0x34>
 802b404:	294b883a 	add	r5,r5,r5
 802b408:	10bfffc4 	addi	r2,r2,-1
 802b40c:	18c7883a 	add	r3,r3,r3
 802b410:	293ffa36 	bltu	r5,r4,802b3fc <__alt_data_end+0xfffebffc>
 802b414:	18000826 	beq	r3,zero,802b438 <__udivsi3+0x54>
 802b418:	0005883a 	mov	r2,zero
 802b41c:	31400236 	bltu	r6,r5,802b428 <__udivsi3+0x44>
 802b420:	314dc83a 	sub	r6,r6,r5
 802b424:	10c4b03a 	or	r2,r2,r3
 802b428:	1806d07a 	srli	r3,r3,1
 802b42c:	280ad07a 	srli	r5,r5,1
 802b430:	183ffa1e 	bne	r3,zero,802b41c <__alt_data_end+0xfffec01c>
 802b434:	f800283a 	ret
 802b438:	0005883a 	mov	r2,zero
 802b43c:	f800283a 	ret
 802b440:	00c00044 	movi	r3,1
 802b444:	003ff406 	br	802b418 <__alt_data_end+0xfffec018>

0802b448 <__umodsi3>:
 802b448:	2005883a 	mov	r2,r4
 802b44c:	2900122e 	bgeu	r5,r4,802b498 <__umodsi3+0x50>
 802b450:	28001116 	blt	r5,zero,802b498 <__umodsi3+0x50>
 802b454:	01800804 	movi	r6,32
 802b458:	00c00044 	movi	r3,1
 802b45c:	00000206 	br	802b468 <__umodsi3+0x20>
 802b460:	30000c26 	beq	r6,zero,802b494 <__umodsi3+0x4c>
 802b464:	28000516 	blt	r5,zero,802b47c <__umodsi3+0x34>
 802b468:	294b883a 	add	r5,r5,r5
 802b46c:	31bfffc4 	addi	r6,r6,-1
 802b470:	18c7883a 	add	r3,r3,r3
 802b474:	293ffa36 	bltu	r5,r4,802b460 <__alt_data_end+0xfffec060>
 802b478:	18000626 	beq	r3,zero,802b494 <__umodsi3+0x4c>
 802b47c:	1806d07a 	srli	r3,r3,1
 802b480:	11400136 	bltu	r2,r5,802b488 <__umodsi3+0x40>
 802b484:	1145c83a 	sub	r2,r2,r5
 802b488:	280ad07a 	srli	r5,r5,1
 802b48c:	183ffb1e 	bne	r3,zero,802b47c <__alt_data_end+0xfffec07c>
 802b490:	f800283a 	ret
 802b494:	f800283a 	ret
 802b498:	00c00044 	movi	r3,1
 802b49c:	003ff706 	br	802b47c <__alt_data_end+0xfffec07c>

0802b4a0 <__adddf3>:
 802b4a0:	02c00434 	movhi	r11,16
 802b4a4:	5affffc4 	addi	r11,r11,-1
 802b4a8:	2806d7fa 	srli	r3,r5,31
 802b4ac:	2ad4703a 	and	r10,r5,r11
 802b4b0:	3ad2703a 	and	r9,r7,r11
 802b4b4:	3804d53a 	srli	r2,r7,20
 802b4b8:	3018d77a 	srli	r12,r6,29
 802b4bc:	280ad53a 	srli	r5,r5,20
 802b4c0:	501490fa 	slli	r10,r10,3
 802b4c4:	2010d77a 	srli	r8,r4,29
 802b4c8:	481290fa 	slli	r9,r9,3
 802b4cc:	380ed7fa 	srli	r7,r7,31
 802b4d0:	defffb04 	addi	sp,sp,-20
 802b4d4:	dc800215 	stw	r18,8(sp)
 802b4d8:	dc400115 	stw	r17,4(sp)
 802b4dc:	dc000015 	stw	r16,0(sp)
 802b4e0:	dfc00415 	stw	ra,16(sp)
 802b4e4:	dcc00315 	stw	r19,12(sp)
 802b4e8:	1c803fcc 	andi	r18,r3,255
 802b4ec:	2c01ffcc 	andi	r16,r5,2047
 802b4f0:	5210b03a 	or	r8,r10,r8
 802b4f4:	202290fa 	slli	r17,r4,3
 802b4f8:	1081ffcc 	andi	r2,r2,2047
 802b4fc:	4b12b03a 	or	r9,r9,r12
 802b500:	300c90fa 	slli	r6,r6,3
 802b504:	91c07526 	beq	r18,r7,802b6dc <__adddf3+0x23c>
 802b508:	8087c83a 	sub	r3,r16,r2
 802b50c:	00c0ab0e 	bge	zero,r3,802b7bc <__adddf3+0x31c>
 802b510:	10002a1e 	bne	r2,zero,802b5bc <__adddf3+0x11c>
 802b514:	4984b03a 	or	r2,r9,r6
 802b518:	1000961e 	bne	r2,zero,802b774 <__adddf3+0x2d4>
 802b51c:	888001cc 	andi	r2,r17,7
 802b520:	10000726 	beq	r2,zero,802b540 <__adddf3+0xa0>
 802b524:	888003cc 	andi	r2,r17,15
 802b528:	00c00104 	movi	r3,4
 802b52c:	10c00426 	beq	r2,r3,802b540 <__adddf3+0xa0>
 802b530:	88c7883a 	add	r3,r17,r3
 802b534:	1c63803a 	cmpltu	r17,r3,r17
 802b538:	4451883a 	add	r8,r8,r17
 802b53c:	1823883a 	mov	r17,r3
 802b540:	4080202c 	andhi	r2,r8,128
 802b544:	10005926 	beq	r2,zero,802b6ac <__adddf3+0x20c>
 802b548:	84000044 	addi	r16,r16,1
 802b54c:	0081ffc4 	movi	r2,2047
 802b550:	8080ba26 	beq	r16,r2,802b83c <__adddf3+0x39c>
 802b554:	00bfe034 	movhi	r2,65408
 802b558:	10bfffc4 	addi	r2,r2,-1
 802b55c:	4090703a 	and	r8,r8,r2
 802b560:	4004977a 	slli	r2,r8,29
 802b564:	4010927a 	slli	r8,r8,9
 802b568:	8822d0fa 	srli	r17,r17,3
 802b56c:	8401ffcc 	andi	r16,r16,2047
 802b570:	4010d33a 	srli	r8,r8,12
 802b574:	9007883a 	mov	r3,r18
 802b578:	1444b03a 	or	r2,r2,r17
 802b57c:	8401ffcc 	andi	r16,r16,2047
 802b580:	8020953a 	slli	r16,r16,20
 802b584:	18c03fcc 	andi	r3,r3,255
 802b588:	01000434 	movhi	r4,16
 802b58c:	213fffc4 	addi	r4,r4,-1
 802b590:	180697fa 	slli	r3,r3,31
 802b594:	4110703a 	and	r8,r8,r4
 802b598:	4410b03a 	or	r8,r8,r16
 802b59c:	40c6b03a 	or	r3,r8,r3
 802b5a0:	dfc00417 	ldw	ra,16(sp)
 802b5a4:	dcc00317 	ldw	r19,12(sp)
 802b5a8:	dc800217 	ldw	r18,8(sp)
 802b5ac:	dc400117 	ldw	r17,4(sp)
 802b5b0:	dc000017 	ldw	r16,0(sp)
 802b5b4:	dec00504 	addi	sp,sp,20
 802b5b8:	f800283a 	ret
 802b5bc:	0081ffc4 	movi	r2,2047
 802b5c0:	80bfd626 	beq	r16,r2,802b51c <__alt_data_end+0xfffec11c>
 802b5c4:	4a402034 	orhi	r9,r9,128
 802b5c8:	00800e04 	movi	r2,56
 802b5cc:	10c09f16 	blt	r2,r3,802b84c <__adddf3+0x3ac>
 802b5d0:	008007c4 	movi	r2,31
 802b5d4:	10c0c216 	blt	r2,r3,802b8e0 <__adddf3+0x440>
 802b5d8:	00800804 	movi	r2,32
 802b5dc:	10c5c83a 	sub	r2,r2,r3
 802b5e0:	488a983a 	sll	r5,r9,r2
 802b5e4:	30c8d83a 	srl	r4,r6,r3
 802b5e8:	3084983a 	sll	r2,r6,r2
 802b5ec:	48c6d83a 	srl	r3,r9,r3
 802b5f0:	290cb03a 	or	r6,r5,r4
 802b5f4:	1004c03a 	cmpne	r2,r2,zero
 802b5f8:	308cb03a 	or	r6,r6,r2
 802b5fc:	898dc83a 	sub	r6,r17,r6
 802b600:	89a3803a 	cmpltu	r17,r17,r6
 802b604:	40d1c83a 	sub	r8,r8,r3
 802b608:	4451c83a 	sub	r8,r8,r17
 802b60c:	3023883a 	mov	r17,r6
 802b610:	4080202c 	andhi	r2,r8,128
 802b614:	10002326 	beq	r2,zero,802b6a4 <__adddf3+0x204>
 802b618:	04c02034 	movhi	r19,128
 802b61c:	9cffffc4 	addi	r19,r19,-1
 802b620:	44e6703a 	and	r19,r8,r19
 802b624:	98007626 	beq	r19,zero,802b800 <__adddf3+0x360>
 802b628:	9809883a 	mov	r4,r19
 802b62c:	802dce00 	call	802dce0 <__clzsi2>
 802b630:	10fffe04 	addi	r3,r2,-8
 802b634:	010007c4 	movi	r4,31
 802b638:	20c07716 	blt	r4,r3,802b818 <__adddf3+0x378>
 802b63c:	00800804 	movi	r2,32
 802b640:	10c5c83a 	sub	r2,r2,r3
 802b644:	8884d83a 	srl	r2,r17,r2
 802b648:	98d0983a 	sll	r8,r19,r3
 802b64c:	88e2983a 	sll	r17,r17,r3
 802b650:	1204b03a 	or	r2,r2,r8
 802b654:	1c007416 	blt	r3,r16,802b828 <__adddf3+0x388>
 802b658:	1c21c83a 	sub	r16,r3,r16
 802b65c:	82000044 	addi	r8,r16,1
 802b660:	00c007c4 	movi	r3,31
 802b664:	1a009116 	blt	r3,r8,802b8ac <__adddf3+0x40c>
 802b668:	00c00804 	movi	r3,32
 802b66c:	1a07c83a 	sub	r3,r3,r8
 802b670:	8a08d83a 	srl	r4,r17,r8
 802b674:	88e2983a 	sll	r17,r17,r3
 802b678:	10c6983a 	sll	r3,r2,r3
 802b67c:	1210d83a 	srl	r8,r2,r8
 802b680:	8804c03a 	cmpne	r2,r17,zero
 802b684:	1906b03a 	or	r3,r3,r4
 802b688:	18a2b03a 	or	r17,r3,r2
 802b68c:	0021883a 	mov	r16,zero
 802b690:	003fa206 	br	802b51c <__alt_data_end+0xfffec11c>
 802b694:	1890b03a 	or	r8,r3,r2
 802b698:	40017d26 	beq	r8,zero,802bc90 <__adddf3+0x7f0>
 802b69c:	1011883a 	mov	r8,r2
 802b6a0:	1823883a 	mov	r17,r3
 802b6a4:	888001cc 	andi	r2,r17,7
 802b6a8:	103f9e1e 	bne	r2,zero,802b524 <__alt_data_end+0xfffec124>
 802b6ac:	4004977a 	slli	r2,r8,29
 802b6b0:	8822d0fa 	srli	r17,r17,3
 802b6b4:	4010d0fa 	srli	r8,r8,3
 802b6b8:	9007883a 	mov	r3,r18
 802b6bc:	1444b03a 	or	r2,r2,r17
 802b6c0:	0101ffc4 	movi	r4,2047
 802b6c4:	81002426 	beq	r16,r4,802b758 <__adddf3+0x2b8>
 802b6c8:	8120703a 	and	r16,r16,r4
 802b6cc:	01000434 	movhi	r4,16
 802b6d0:	213fffc4 	addi	r4,r4,-1
 802b6d4:	4110703a 	and	r8,r8,r4
 802b6d8:	003fa806 	br	802b57c <__alt_data_end+0xfffec17c>
 802b6dc:	8089c83a 	sub	r4,r16,r2
 802b6e0:	01005e0e 	bge	zero,r4,802b85c <__adddf3+0x3bc>
 802b6e4:	10002b26 	beq	r2,zero,802b794 <__adddf3+0x2f4>
 802b6e8:	0081ffc4 	movi	r2,2047
 802b6ec:	80bf8b26 	beq	r16,r2,802b51c <__alt_data_end+0xfffec11c>
 802b6f0:	4a402034 	orhi	r9,r9,128
 802b6f4:	00800e04 	movi	r2,56
 802b6f8:	1100a40e 	bge	r2,r4,802b98c <__adddf3+0x4ec>
 802b6fc:	498cb03a 	or	r6,r9,r6
 802b700:	300ac03a 	cmpne	r5,r6,zero
 802b704:	0013883a 	mov	r9,zero
 802b708:	2c4b883a 	add	r5,r5,r17
 802b70c:	2c63803a 	cmpltu	r17,r5,r17
 802b710:	4a11883a 	add	r8,r9,r8
 802b714:	8a11883a 	add	r8,r17,r8
 802b718:	2823883a 	mov	r17,r5
 802b71c:	4080202c 	andhi	r2,r8,128
 802b720:	103fe026 	beq	r2,zero,802b6a4 <__alt_data_end+0xfffec2a4>
 802b724:	84000044 	addi	r16,r16,1
 802b728:	0081ffc4 	movi	r2,2047
 802b72c:	8080d226 	beq	r16,r2,802ba78 <__adddf3+0x5d8>
 802b730:	00bfe034 	movhi	r2,65408
 802b734:	10bfffc4 	addi	r2,r2,-1
 802b738:	4090703a 	and	r8,r8,r2
 802b73c:	880ad07a 	srli	r5,r17,1
 802b740:	400897fa 	slli	r4,r8,31
 802b744:	88c0004c 	andi	r3,r17,1
 802b748:	28e2b03a 	or	r17,r5,r3
 802b74c:	4010d07a 	srli	r8,r8,1
 802b750:	2462b03a 	or	r17,r4,r17
 802b754:	003f7106 	br	802b51c <__alt_data_end+0xfffec11c>
 802b758:	4088b03a 	or	r4,r8,r2
 802b75c:	20014526 	beq	r4,zero,802bc74 <__adddf3+0x7d4>
 802b760:	01000434 	movhi	r4,16
 802b764:	42000234 	orhi	r8,r8,8
 802b768:	213fffc4 	addi	r4,r4,-1
 802b76c:	4110703a 	and	r8,r8,r4
 802b770:	003f8206 	br	802b57c <__alt_data_end+0xfffec17c>
 802b774:	18ffffc4 	addi	r3,r3,-1
 802b778:	1800491e 	bne	r3,zero,802b8a0 <__adddf3+0x400>
 802b77c:	898bc83a 	sub	r5,r17,r6
 802b780:	8963803a 	cmpltu	r17,r17,r5
 802b784:	4251c83a 	sub	r8,r8,r9
 802b788:	4451c83a 	sub	r8,r8,r17
 802b78c:	2823883a 	mov	r17,r5
 802b790:	003f9f06 	br	802b610 <__alt_data_end+0xfffec210>
 802b794:	4984b03a 	or	r2,r9,r6
 802b798:	103f6026 	beq	r2,zero,802b51c <__alt_data_end+0xfffec11c>
 802b79c:	213fffc4 	addi	r4,r4,-1
 802b7a0:	2000931e 	bne	r4,zero,802b9f0 <__adddf3+0x550>
 802b7a4:	898d883a 	add	r6,r17,r6
 802b7a8:	3463803a 	cmpltu	r17,r6,r17
 802b7ac:	4251883a 	add	r8,r8,r9
 802b7b0:	8a11883a 	add	r8,r17,r8
 802b7b4:	3023883a 	mov	r17,r6
 802b7b8:	003fd806 	br	802b71c <__alt_data_end+0xfffec31c>
 802b7bc:	1800541e 	bne	r3,zero,802b910 <__adddf3+0x470>
 802b7c0:	80800044 	addi	r2,r16,1
 802b7c4:	1081ffcc 	andi	r2,r2,2047
 802b7c8:	00c00044 	movi	r3,1
 802b7cc:	1880a00e 	bge	r3,r2,802ba50 <__adddf3+0x5b0>
 802b7d0:	8989c83a 	sub	r4,r17,r6
 802b7d4:	8905803a 	cmpltu	r2,r17,r4
 802b7d8:	4267c83a 	sub	r19,r8,r9
 802b7dc:	98a7c83a 	sub	r19,r19,r2
 802b7e0:	9880202c 	andhi	r2,r19,128
 802b7e4:	10006326 	beq	r2,zero,802b974 <__adddf3+0x4d4>
 802b7e8:	3463c83a 	sub	r17,r6,r17
 802b7ec:	4a07c83a 	sub	r3,r9,r8
 802b7f0:	344d803a 	cmpltu	r6,r6,r17
 802b7f4:	19a7c83a 	sub	r19,r3,r6
 802b7f8:	3825883a 	mov	r18,r7
 802b7fc:	983f8a1e 	bne	r19,zero,802b628 <__alt_data_end+0xfffec228>
 802b800:	8809883a 	mov	r4,r17
 802b804:	802dce00 	call	802dce0 <__clzsi2>
 802b808:	10800804 	addi	r2,r2,32
 802b80c:	10fffe04 	addi	r3,r2,-8
 802b810:	010007c4 	movi	r4,31
 802b814:	20ff890e 	bge	r4,r3,802b63c <__alt_data_end+0xfffec23c>
 802b818:	10bff604 	addi	r2,r2,-40
 802b81c:	8884983a 	sll	r2,r17,r2
 802b820:	0023883a 	mov	r17,zero
 802b824:	1c3f8c0e 	bge	r3,r16,802b658 <__alt_data_end+0xfffec258>
 802b828:	023fe034 	movhi	r8,65408
 802b82c:	423fffc4 	addi	r8,r8,-1
 802b830:	80e1c83a 	sub	r16,r16,r3
 802b834:	1210703a 	and	r8,r2,r8
 802b838:	003f3806 	br	802b51c <__alt_data_end+0xfffec11c>
 802b83c:	9007883a 	mov	r3,r18
 802b840:	0011883a 	mov	r8,zero
 802b844:	0005883a 	mov	r2,zero
 802b848:	003f4c06 	br	802b57c <__alt_data_end+0xfffec17c>
 802b84c:	498cb03a 	or	r6,r9,r6
 802b850:	300cc03a 	cmpne	r6,r6,zero
 802b854:	0007883a 	mov	r3,zero
 802b858:	003f6806 	br	802b5fc <__alt_data_end+0xfffec1fc>
 802b85c:	20009c1e 	bne	r4,zero,802bad0 <__adddf3+0x630>
 802b860:	80800044 	addi	r2,r16,1
 802b864:	1141ffcc 	andi	r5,r2,2047
 802b868:	01000044 	movi	r4,1
 802b86c:	2140670e 	bge	r4,r5,802ba0c <__adddf3+0x56c>
 802b870:	0101ffc4 	movi	r4,2047
 802b874:	11007f26 	beq	r2,r4,802ba74 <__adddf3+0x5d4>
 802b878:	898d883a 	add	r6,r17,r6
 802b87c:	4247883a 	add	r3,r8,r9
 802b880:	3451803a 	cmpltu	r8,r6,r17
 802b884:	40d1883a 	add	r8,r8,r3
 802b888:	402297fa 	slli	r17,r8,31
 802b88c:	300cd07a 	srli	r6,r6,1
 802b890:	4010d07a 	srli	r8,r8,1
 802b894:	1021883a 	mov	r16,r2
 802b898:	89a2b03a 	or	r17,r17,r6
 802b89c:	003f1f06 	br	802b51c <__alt_data_end+0xfffec11c>
 802b8a0:	0081ffc4 	movi	r2,2047
 802b8a4:	80bf481e 	bne	r16,r2,802b5c8 <__alt_data_end+0xfffec1c8>
 802b8a8:	003f1c06 	br	802b51c <__alt_data_end+0xfffec11c>
 802b8ac:	843ff844 	addi	r16,r16,-31
 802b8b0:	01000804 	movi	r4,32
 802b8b4:	1406d83a 	srl	r3,r2,r16
 802b8b8:	41005026 	beq	r8,r4,802b9fc <__adddf3+0x55c>
 802b8bc:	01001004 	movi	r4,64
 802b8c0:	2211c83a 	sub	r8,r4,r8
 802b8c4:	1204983a 	sll	r2,r2,r8
 802b8c8:	88a2b03a 	or	r17,r17,r2
 802b8cc:	8822c03a 	cmpne	r17,r17,zero
 802b8d0:	1c62b03a 	or	r17,r3,r17
 802b8d4:	0011883a 	mov	r8,zero
 802b8d8:	0021883a 	mov	r16,zero
 802b8dc:	003f7106 	br	802b6a4 <__alt_data_end+0xfffec2a4>
 802b8e0:	193ff804 	addi	r4,r3,-32
 802b8e4:	00800804 	movi	r2,32
 802b8e8:	4908d83a 	srl	r4,r9,r4
 802b8ec:	18804526 	beq	r3,r2,802ba04 <__adddf3+0x564>
 802b8f0:	00801004 	movi	r2,64
 802b8f4:	10c5c83a 	sub	r2,r2,r3
 802b8f8:	4886983a 	sll	r3,r9,r2
 802b8fc:	198cb03a 	or	r6,r3,r6
 802b900:	300cc03a 	cmpne	r6,r6,zero
 802b904:	218cb03a 	or	r6,r4,r6
 802b908:	0007883a 	mov	r3,zero
 802b90c:	003f3b06 	br	802b5fc <__alt_data_end+0xfffec1fc>
 802b910:	80002a26 	beq	r16,zero,802b9bc <__adddf3+0x51c>
 802b914:	0101ffc4 	movi	r4,2047
 802b918:	11006826 	beq	r2,r4,802babc <__adddf3+0x61c>
 802b91c:	00c7c83a 	sub	r3,zero,r3
 802b920:	42002034 	orhi	r8,r8,128
 802b924:	01000e04 	movi	r4,56
 802b928:	20c07c16 	blt	r4,r3,802bb1c <__adddf3+0x67c>
 802b92c:	010007c4 	movi	r4,31
 802b930:	20c0da16 	blt	r4,r3,802bc9c <__adddf3+0x7fc>
 802b934:	01000804 	movi	r4,32
 802b938:	20c9c83a 	sub	r4,r4,r3
 802b93c:	4114983a 	sll	r10,r8,r4
 802b940:	88cad83a 	srl	r5,r17,r3
 802b944:	8908983a 	sll	r4,r17,r4
 802b948:	40c6d83a 	srl	r3,r8,r3
 802b94c:	5162b03a 	or	r17,r10,r5
 802b950:	2008c03a 	cmpne	r4,r4,zero
 802b954:	8922b03a 	or	r17,r17,r4
 802b958:	3463c83a 	sub	r17,r6,r17
 802b95c:	48c7c83a 	sub	r3,r9,r3
 802b960:	344d803a 	cmpltu	r6,r6,r17
 802b964:	1991c83a 	sub	r8,r3,r6
 802b968:	1021883a 	mov	r16,r2
 802b96c:	3825883a 	mov	r18,r7
 802b970:	003f2706 	br	802b610 <__alt_data_end+0xfffec210>
 802b974:	24d0b03a 	or	r8,r4,r19
 802b978:	40001b1e 	bne	r8,zero,802b9e8 <__adddf3+0x548>
 802b97c:	0005883a 	mov	r2,zero
 802b980:	0007883a 	mov	r3,zero
 802b984:	0021883a 	mov	r16,zero
 802b988:	003f4d06 	br	802b6c0 <__alt_data_end+0xfffec2c0>
 802b98c:	008007c4 	movi	r2,31
 802b990:	11003c16 	blt	r2,r4,802ba84 <__adddf3+0x5e4>
 802b994:	00800804 	movi	r2,32
 802b998:	1105c83a 	sub	r2,r2,r4
 802b99c:	488e983a 	sll	r7,r9,r2
 802b9a0:	310ad83a 	srl	r5,r6,r4
 802b9a4:	3084983a 	sll	r2,r6,r2
 802b9a8:	4912d83a 	srl	r9,r9,r4
 802b9ac:	394ab03a 	or	r5,r7,r5
 802b9b0:	1004c03a 	cmpne	r2,r2,zero
 802b9b4:	288ab03a 	or	r5,r5,r2
 802b9b8:	003f5306 	br	802b708 <__alt_data_end+0xfffec308>
 802b9bc:	4448b03a 	or	r4,r8,r17
 802b9c0:	20003e26 	beq	r4,zero,802babc <__adddf3+0x61c>
 802b9c4:	00c6303a 	nor	r3,zero,r3
 802b9c8:	18003a1e 	bne	r3,zero,802bab4 <__adddf3+0x614>
 802b9cc:	3463c83a 	sub	r17,r6,r17
 802b9d0:	4a07c83a 	sub	r3,r9,r8
 802b9d4:	344d803a 	cmpltu	r6,r6,r17
 802b9d8:	1991c83a 	sub	r8,r3,r6
 802b9dc:	1021883a 	mov	r16,r2
 802b9e0:	3825883a 	mov	r18,r7
 802b9e4:	003f0a06 	br	802b610 <__alt_data_end+0xfffec210>
 802b9e8:	2023883a 	mov	r17,r4
 802b9ec:	003f0d06 	br	802b624 <__alt_data_end+0xfffec224>
 802b9f0:	0081ffc4 	movi	r2,2047
 802b9f4:	80bf3f1e 	bne	r16,r2,802b6f4 <__alt_data_end+0xfffec2f4>
 802b9f8:	003ec806 	br	802b51c <__alt_data_end+0xfffec11c>
 802b9fc:	0005883a 	mov	r2,zero
 802ba00:	003fb106 	br	802b8c8 <__alt_data_end+0xfffec4c8>
 802ba04:	0007883a 	mov	r3,zero
 802ba08:	003fbc06 	br	802b8fc <__alt_data_end+0xfffec4fc>
 802ba0c:	4444b03a 	or	r2,r8,r17
 802ba10:	8000871e 	bne	r16,zero,802bc30 <__adddf3+0x790>
 802ba14:	1000ba26 	beq	r2,zero,802bd00 <__adddf3+0x860>
 802ba18:	4984b03a 	or	r2,r9,r6
 802ba1c:	103ebf26 	beq	r2,zero,802b51c <__alt_data_end+0xfffec11c>
 802ba20:	8985883a 	add	r2,r17,r6
 802ba24:	4247883a 	add	r3,r8,r9
 802ba28:	1451803a 	cmpltu	r8,r2,r17
 802ba2c:	40d1883a 	add	r8,r8,r3
 802ba30:	40c0202c 	andhi	r3,r8,128
 802ba34:	1023883a 	mov	r17,r2
 802ba38:	183f1a26 	beq	r3,zero,802b6a4 <__alt_data_end+0xfffec2a4>
 802ba3c:	00bfe034 	movhi	r2,65408
 802ba40:	10bfffc4 	addi	r2,r2,-1
 802ba44:	2021883a 	mov	r16,r4
 802ba48:	4090703a 	and	r8,r8,r2
 802ba4c:	003eb306 	br	802b51c <__alt_data_end+0xfffec11c>
 802ba50:	4444b03a 	or	r2,r8,r17
 802ba54:	8000291e 	bne	r16,zero,802bafc <__adddf3+0x65c>
 802ba58:	10004b1e 	bne	r2,zero,802bb88 <__adddf3+0x6e8>
 802ba5c:	4990b03a 	or	r8,r9,r6
 802ba60:	40008b26 	beq	r8,zero,802bc90 <__adddf3+0x7f0>
 802ba64:	4811883a 	mov	r8,r9
 802ba68:	3023883a 	mov	r17,r6
 802ba6c:	3825883a 	mov	r18,r7
 802ba70:	003eaa06 	br	802b51c <__alt_data_end+0xfffec11c>
 802ba74:	1021883a 	mov	r16,r2
 802ba78:	0011883a 	mov	r8,zero
 802ba7c:	0005883a 	mov	r2,zero
 802ba80:	003f0f06 	br	802b6c0 <__alt_data_end+0xfffec2c0>
 802ba84:	217ff804 	addi	r5,r4,-32
 802ba88:	00800804 	movi	r2,32
 802ba8c:	494ad83a 	srl	r5,r9,r5
 802ba90:	20807d26 	beq	r4,r2,802bc88 <__adddf3+0x7e8>
 802ba94:	00801004 	movi	r2,64
 802ba98:	1109c83a 	sub	r4,r2,r4
 802ba9c:	4912983a 	sll	r9,r9,r4
 802baa0:	498cb03a 	or	r6,r9,r6
 802baa4:	300cc03a 	cmpne	r6,r6,zero
 802baa8:	298ab03a 	or	r5,r5,r6
 802baac:	0013883a 	mov	r9,zero
 802bab0:	003f1506 	br	802b708 <__alt_data_end+0xfffec308>
 802bab4:	0101ffc4 	movi	r4,2047
 802bab8:	113f9a1e 	bne	r2,r4,802b924 <__alt_data_end+0xfffec524>
 802babc:	4811883a 	mov	r8,r9
 802bac0:	3023883a 	mov	r17,r6
 802bac4:	1021883a 	mov	r16,r2
 802bac8:	3825883a 	mov	r18,r7
 802bacc:	003e9306 	br	802b51c <__alt_data_end+0xfffec11c>
 802bad0:	8000161e 	bne	r16,zero,802bb2c <__adddf3+0x68c>
 802bad4:	444ab03a 	or	r5,r8,r17
 802bad8:	28005126 	beq	r5,zero,802bc20 <__adddf3+0x780>
 802badc:	0108303a 	nor	r4,zero,r4
 802bae0:	20004d1e 	bne	r4,zero,802bc18 <__adddf3+0x778>
 802bae4:	89a3883a 	add	r17,r17,r6
 802bae8:	4253883a 	add	r9,r8,r9
 802baec:	898d803a 	cmpltu	r6,r17,r6
 802baf0:	3251883a 	add	r8,r6,r9
 802baf4:	1021883a 	mov	r16,r2
 802baf8:	003f0806 	br	802b71c <__alt_data_end+0xfffec31c>
 802bafc:	1000301e 	bne	r2,zero,802bbc0 <__adddf3+0x720>
 802bb00:	4984b03a 	or	r2,r9,r6
 802bb04:	10007126 	beq	r2,zero,802bccc <__adddf3+0x82c>
 802bb08:	4811883a 	mov	r8,r9
 802bb0c:	3023883a 	mov	r17,r6
 802bb10:	3825883a 	mov	r18,r7
 802bb14:	0401ffc4 	movi	r16,2047
 802bb18:	003e8006 	br	802b51c <__alt_data_end+0xfffec11c>
 802bb1c:	4462b03a 	or	r17,r8,r17
 802bb20:	8822c03a 	cmpne	r17,r17,zero
 802bb24:	0007883a 	mov	r3,zero
 802bb28:	003f8b06 	br	802b958 <__alt_data_end+0xfffec558>
 802bb2c:	0141ffc4 	movi	r5,2047
 802bb30:	11403b26 	beq	r2,r5,802bc20 <__adddf3+0x780>
 802bb34:	0109c83a 	sub	r4,zero,r4
 802bb38:	42002034 	orhi	r8,r8,128
 802bb3c:	01400e04 	movi	r5,56
 802bb40:	29006716 	blt	r5,r4,802bce0 <__adddf3+0x840>
 802bb44:	014007c4 	movi	r5,31
 802bb48:	29007016 	blt	r5,r4,802bd0c <__adddf3+0x86c>
 802bb4c:	01400804 	movi	r5,32
 802bb50:	290bc83a 	sub	r5,r5,r4
 802bb54:	4154983a 	sll	r10,r8,r5
 802bb58:	890ed83a 	srl	r7,r17,r4
 802bb5c:	894a983a 	sll	r5,r17,r5
 802bb60:	4108d83a 	srl	r4,r8,r4
 802bb64:	51e2b03a 	or	r17,r10,r7
 802bb68:	280ac03a 	cmpne	r5,r5,zero
 802bb6c:	8962b03a 	or	r17,r17,r5
 802bb70:	89a3883a 	add	r17,r17,r6
 802bb74:	2253883a 	add	r9,r4,r9
 802bb78:	898d803a 	cmpltu	r6,r17,r6
 802bb7c:	3251883a 	add	r8,r6,r9
 802bb80:	1021883a 	mov	r16,r2
 802bb84:	003ee506 	br	802b71c <__alt_data_end+0xfffec31c>
 802bb88:	4984b03a 	or	r2,r9,r6
 802bb8c:	103e6326 	beq	r2,zero,802b51c <__alt_data_end+0xfffec11c>
 802bb90:	8987c83a 	sub	r3,r17,r6
 802bb94:	88c9803a 	cmpltu	r4,r17,r3
 802bb98:	4245c83a 	sub	r2,r8,r9
 802bb9c:	1105c83a 	sub	r2,r2,r4
 802bba0:	1100202c 	andhi	r4,r2,128
 802bba4:	203ebb26 	beq	r4,zero,802b694 <__alt_data_end+0xfffec294>
 802bba8:	3463c83a 	sub	r17,r6,r17
 802bbac:	4a07c83a 	sub	r3,r9,r8
 802bbb0:	344d803a 	cmpltu	r6,r6,r17
 802bbb4:	1991c83a 	sub	r8,r3,r6
 802bbb8:	3825883a 	mov	r18,r7
 802bbbc:	003e5706 	br	802b51c <__alt_data_end+0xfffec11c>
 802bbc0:	4984b03a 	or	r2,r9,r6
 802bbc4:	10002e26 	beq	r2,zero,802bc80 <__adddf3+0x7e0>
 802bbc8:	4004d0fa 	srli	r2,r8,3
 802bbcc:	8822d0fa 	srli	r17,r17,3
 802bbd0:	4010977a 	slli	r8,r8,29
 802bbd4:	10c0022c 	andhi	r3,r2,8
 802bbd8:	4462b03a 	or	r17,r8,r17
 802bbdc:	18000826 	beq	r3,zero,802bc00 <__adddf3+0x760>
 802bbe0:	4808d0fa 	srli	r4,r9,3
 802bbe4:	20c0022c 	andhi	r3,r4,8
 802bbe8:	1800051e 	bne	r3,zero,802bc00 <__adddf3+0x760>
 802bbec:	300cd0fa 	srli	r6,r6,3
 802bbf0:	4806977a 	slli	r3,r9,29
 802bbf4:	2005883a 	mov	r2,r4
 802bbf8:	3825883a 	mov	r18,r7
 802bbfc:	19a2b03a 	or	r17,r3,r6
 802bc00:	8810d77a 	srli	r8,r17,29
 802bc04:	100490fa 	slli	r2,r2,3
 802bc08:	882290fa 	slli	r17,r17,3
 802bc0c:	0401ffc4 	movi	r16,2047
 802bc10:	4090b03a 	or	r8,r8,r2
 802bc14:	003e4106 	br	802b51c <__alt_data_end+0xfffec11c>
 802bc18:	0141ffc4 	movi	r5,2047
 802bc1c:	117fc71e 	bne	r2,r5,802bb3c <__alt_data_end+0xfffec73c>
 802bc20:	4811883a 	mov	r8,r9
 802bc24:	3023883a 	mov	r17,r6
 802bc28:	1021883a 	mov	r16,r2
 802bc2c:	003e3b06 	br	802b51c <__alt_data_end+0xfffec11c>
 802bc30:	10002f26 	beq	r2,zero,802bcf0 <__adddf3+0x850>
 802bc34:	4984b03a 	or	r2,r9,r6
 802bc38:	10001126 	beq	r2,zero,802bc80 <__adddf3+0x7e0>
 802bc3c:	4004d0fa 	srli	r2,r8,3
 802bc40:	8822d0fa 	srli	r17,r17,3
 802bc44:	4010977a 	slli	r8,r8,29
 802bc48:	10c0022c 	andhi	r3,r2,8
 802bc4c:	4462b03a 	or	r17,r8,r17
 802bc50:	183feb26 	beq	r3,zero,802bc00 <__alt_data_end+0xfffec800>
 802bc54:	4808d0fa 	srli	r4,r9,3
 802bc58:	20c0022c 	andhi	r3,r4,8
 802bc5c:	183fe81e 	bne	r3,zero,802bc00 <__alt_data_end+0xfffec800>
 802bc60:	300cd0fa 	srli	r6,r6,3
 802bc64:	4806977a 	slli	r3,r9,29
 802bc68:	2005883a 	mov	r2,r4
 802bc6c:	19a2b03a 	or	r17,r3,r6
 802bc70:	003fe306 	br	802bc00 <__alt_data_end+0xfffec800>
 802bc74:	0011883a 	mov	r8,zero
 802bc78:	0005883a 	mov	r2,zero
 802bc7c:	003e3f06 	br	802b57c <__alt_data_end+0xfffec17c>
 802bc80:	0401ffc4 	movi	r16,2047
 802bc84:	003e2506 	br	802b51c <__alt_data_end+0xfffec11c>
 802bc88:	0013883a 	mov	r9,zero
 802bc8c:	003f8406 	br	802baa0 <__alt_data_end+0xfffec6a0>
 802bc90:	0005883a 	mov	r2,zero
 802bc94:	0007883a 	mov	r3,zero
 802bc98:	003e8906 	br	802b6c0 <__alt_data_end+0xfffec2c0>
 802bc9c:	197ff804 	addi	r5,r3,-32
 802bca0:	01000804 	movi	r4,32
 802bca4:	414ad83a 	srl	r5,r8,r5
 802bca8:	19002426 	beq	r3,r4,802bd3c <__adddf3+0x89c>
 802bcac:	01001004 	movi	r4,64
 802bcb0:	20c7c83a 	sub	r3,r4,r3
 802bcb4:	40c6983a 	sll	r3,r8,r3
 802bcb8:	1c46b03a 	or	r3,r3,r17
 802bcbc:	1806c03a 	cmpne	r3,r3,zero
 802bcc0:	28e2b03a 	or	r17,r5,r3
 802bcc4:	0007883a 	mov	r3,zero
 802bcc8:	003f2306 	br	802b958 <__alt_data_end+0xfffec558>
 802bccc:	0007883a 	mov	r3,zero
 802bcd0:	5811883a 	mov	r8,r11
 802bcd4:	00bfffc4 	movi	r2,-1
 802bcd8:	0401ffc4 	movi	r16,2047
 802bcdc:	003e7806 	br	802b6c0 <__alt_data_end+0xfffec2c0>
 802bce0:	4462b03a 	or	r17,r8,r17
 802bce4:	8822c03a 	cmpne	r17,r17,zero
 802bce8:	0009883a 	mov	r4,zero
 802bcec:	003fa006 	br	802bb70 <__alt_data_end+0xfffec770>
 802bcf0:	4811883a 	mov	r8,r9
 802bcf4:	3023883a 	mov	r17,r6
 802bcf8:	0401ffc4 	movi	r16,2047
 802bcfc:	003e0706 	br	802b51c <__alt_data_end+0xfffec11c>
 802bd00:	4811883a 	mov	r8,r9
 802bd04:	3023883a 	mov	r17,r6
 802bd08:	003e0406 	br	802b51c <__alt_data_end+0xfffec11c>
 802bd0c:	21fff804 	addi	r7,r4,-32
 802bd10:	01400804 	movi	r5,32
 802bd14:	41ced83a 	srl	r7,r8,r7
 802bd18:	21400a26 	beq	r4,r5,802bd44 <__adddf3+0x8a4>
 802bd1c:	01401004 	movi	r5,64
 802bd20:	2909c83a 	sub	r4,r5,r4
 802bd24:	4108983a 	sll	r4,r8,r4
 802bd28:	2448b03a 	or	r4,r4,r17
 802bd2c:	2008c03a 	cmpne	r4,r4,zero
 802bd30:	3922b03a 	or	r17,r7,r4
 802bd34:	0009883a 	mov	r4,zero
 802bd38:	003f8d06 	br	802bb70 <__alt_data_end+0xfffec770>
 802bd3c:	0007883a 	mov	r3,zero
 802bd40:	003fdd06 	br	802bcb8 <__alt_data_end+0xfffec8b8>
 802bd44:	0009883a 	mov	r4,zero
 802bd48:	003ff706 	br	802bd28 <__alt_data_end+0xfffec928>

0802bd4c <__divdf3>:
 802bd4c:	defff004 	addi	sp,sp,-64
 802bd50:	dc800815 	stw	r18,32(sp)
 802bd54:	2824d53a 	srli	r18,r5,20
 802bd58:	dd800c15 	stw	r22,48(sp)
 802bd5c:	282cd7fa 	srli	r22,r5,31
 802bd60:	dc000615 	stw	r16,24(sp)
 802bd64:	04000434 	movhi	r16,16
 802bd68:	843fffc4 	addi	r16,r16,-1
 802bd6c:	dfc00f15 	stw	ra,60(sp)
 802bd70:	df000e15 	stw	fp,56(sp)
 802bd74:	ddc00d15 	stw	r23,52(sp)
 802bd78:	dd400b15 	stw	r21,44(sp)
 802bd7c:	dd000a15 	stw	r20,40(sp)
 802bd80:	dcc00915 	stw	r19,36(sp)
 802bd84:	dc400715 	stw	r17,28(sp)
 802bd88:	9481ffcc 	andi	r18,r18,2047
 802bd8c:	2c20703a 	and	r16,r5,r16
 802bd90:	b2003fcc 	andi	r8,r22,255
 802bd94:	90006126 	beq	r18,zero,802bf1c <__divdf3+0x1d0>
 802bd98:	0081ffc4 	movi	r2,2047
 802bd9c:	202b883a 	mov	r21,r4
 802bda0:	90803726 	beq	r18,r2,802be80 <__divdf3+0x134>
 802bda4:	80800434 	orhi	r2,r16,16
 802bda8:	100490fa 	slli	r2,r2,3
 802bdac:	2020d77a 	srli	r16,r4,29
 802bdb0:	202a90fa 	slli	r21,r4,3
 802bdb4:	94bf0044 	addi	r18,r18,-1023
 802bdb8:	80a0b03a 	or	r16,r16,r2
 802bdbc:	0013883a 	mov	r9,zero
 802bdc0:	000b883a 	mov	r5,zero
 802bdc4:	3806d53a 	srli	r3,r7,20
 802bdc8:	382ed7fa 	srli	r23,r7,31
 802bdcc:	04400434 	movhi	r17,16
 802bdd0:	8c7fffc4 	addi	r17,r17,-1
 802bdd4:	18c1ffcc 	andi	r3,r3,2047
 802bdd8:	3029883a 	mov	r20,r6
 802bddc:	3c62703a 	and	r17,r7,r17
 802bde0:	bf003fcc 	andi	fp,r23,255
 802bde4:	18006e26 	beq	r3,zero,802bfa0 <__divdf3+0x254>
 802bde8:	0081ffc4 	movi	r2,2047
 802bdec:	18806626 	beq	r3,r2,802bf88 <__divdf3+0x23c>
 802bdf0:	88800434 	orhi	r2,r17,16
 802bdf4:	100490fa 	slli	r2,r2,3
 802bdf8:	3022d77a 	srli	r17,r6,29
 802bdfc:	302890fa 	slli	r20,r6,3
 802be00:	18ff0044 	addi	r3,r3,-1023
 802be04:	88a2b03a 	or	r17,r17,r2
 802be08:	000f883a 	mov	r7,zero
 802be0c:	b5e6f03a 	xor	r19,r22,r23
 802be10:	3a4cb03a 	or	r6,r7,r9
 802be14:	008003c4 	movi	r2,15
 802be18:	9809883a 	mov	r4,r19
 802be1c:	90c7c83a 	sub	r3,r18,r3
 802be20:	9cc03fcc 	andi	r19,r19,255
 802be24:	11809636 	bltu	r2,r6,802c080 <__divdf3+0x334>
 802be28:	300c90ba 	slli	r6,r6,2
 802be2c:	008200f4 	movhi	r2,2051
 802be30:	10af9004 	addi	r2,r2,-16832
 802be34:	308d883a 	add	r6,r6,r2
 802be38:	30800017 	ldw	r2,0(r6)
 802be3c:	1000683a 	jmp	r2
 802be40:	0802c080 	call	802c08 <__alt_mem_new_sdram_controller_0-0x37fd3f8>
 802be44:	0802beb8 	rdprs	zero,at,2810
 802be48:	0802c070 	cmpltui	zero,at,2817
 802be4c:	0802beac 	andhi	zero,at,2810
 802be50:	0802c070 	cmpltui	zero,at,2817
 802be54:	0802c044 	addi	zero,at,2817
 802be58:	0802c070 	cmpltui	zero,at,2817
 802be5c:	0802beac 	andhi	zero,at,2810
 802be60:	0802beb8 	rdprs	zero,at,2810
 802be64:	0802beb8 	rdprs	zero,at,2810
 802be68:	0802c044 	addi	zero,at,2817
 802be6c:	0802beac 	andhi	zero,at,2810
 802be70:	0802be9c 	xori	zero,at,2810
 802be74:	0802be9c 	xori	zero,at,2810
 802be78:	0802be9c 	xori	zero,at,2810
 802be7c:	0802c408 	cmpgei	zero,at,2832
 802be80:	2404b03a 	or	r2,r4,r16
 802be84:	10006c1e 	bne	r2,zero,802c038 <__divdf3+0x2ec>
 802be88:	02400204 	movi	r9,8
 802be8c:	0021883a 	mov	r16,zero
 802be90:	002b883a 	mov	r21,zero
 802be94:	01400084 	movi	r5,2
 802be98:	003fca06 	br	802bdc4 <__alt_data_end+0xfffec9c4>
 802be9c:	8023883a 	mov	r17,r16
 802bea0:	a829883a 	mov	r20,r21
 802bea4:	4039883a 	mov	fp,r8
 802bea8:	280f883a 	mov	r7,r5
 802beac:	00800084 	movi	r2,2
 802beb0:	3881601e 	bne	r7,r2,802c434 <__divdf3+0x6e8>
 802beb4:	e027883a 	mov	r19,fp
 802beb8:	9900004c 	andi	r4,r19,1
 802bebc:	0081ffc4 	movi	r2,2047
 802bec0:	0021883a 	mov	r16,zero
 802bec4:	002b883a 	mov	r21,zero
 802bec8:	1004953a 	slli	r2,r2,20
 802becc:	20c03fcc 	andi	r3,r4,255
 802bed0:	01400434 	movhi	r5,16
 802bed4:	297fffc4 	addi	r5,r5,-1
 802bed8:	180697fa 	slli	r3,r3,31
 802bedc:	8160703a 	and	r16,r16,r5
 802bee0:	80a0b03a 	or	r16,r16,r2
 802bee4:	80c6b03a 	or	r3,r16,r3
 802bee8:	a805883a 	mov	r2,r21
 802beec:	dfc00f17 	ldw	ra,60(sp)
 802bef0:	df000e17 	ldw	fp,56(sp)
 802bef4:	ddc00d17 	ldw	r23,52(sp)
 802bef8:	dd800c17 	ldw	r22,48(sp)
 802befc:	dd400b17 	ldw	r21,44(sp)
 802bf00:	dd000a17 	ldw	r20,40(sp)
 802bf04:	dcc00917 	ldw	r19,36(sp)
 802bf08:	dc800817 	ldw	r18,32(sp)
 802bf0c:	dc400717 	ldw	r17,28(sp)
 802bf10:	dc000617 	ldw	r16,24(sp)
 802bf14:	dec01004 	addi	sp,sp,64
 802bf18:	f800283a 	ret
 802bf1c:	2404b03a 	or	r2,r4,r16
 802bf20:	2023883a 	mov	r17,r4
 802bf24:	10003f26 	beq	r2,zero,802c024 <__divdf3+0x2d8>
 802bf28:	80015e26 	beq	r16,zero,802c4a4 <__divdf3+0x758>
 802bf2c:	8009883a 	mov	r4,r16
 802bf30:	d9800215 	stw	r6,8(sp)
 802bf34:	d9c00515 	stw	r7,20(sp)
 802bf38:	da000415 	stw	r8,16(sp)
 802bf3c:	802dce00 	call	802dce0 <__clzsi2>
 802bf40:	d9800217 	ldw	r6,8(sp)
 802bf44:	d9c00517 	ldw	r7,20(sp)
 802bf48:	da000417 	ldw	r8,16(sp)
 802bf4c:	113ffd44 	addi	r4,r2,-11
 802bf50:	00c00704 	movi	r3,28
 802bf54:	19014f16 	blt	r3,r4,802c494 <__divdf3+0x748>
 802bf58:	00c00744 	movi	r3,29
 802bf5c:	157ffe04 	addi	r21,r2,-8
 802bf60:	1907c83a 	sub	r3,r3,r4
 802bf64:	8560983a 	sll	r16,r16,r21
 802bf68:	88c6d83a 	srl	r3,r17,r3
 802bf6c:	8d6a983a 	sll	r21,r17,r21
 802bf70:	1c20b03a 	or	r16,r3,r16
 802bf74:	1080fcc4 	addi	r2,r2,1011
 802bf78:	00a5c83a 	sub	r18,zero,r2
 802bf7c:	0013883a 	mov	r9,zero
 802bf80:	000b883a 	mov	r5,zero
 802bf84:	003f8f06 	br	802bdc4 <__alt_data_end+0xfffec9c4>
 802bf88:	3444b03a 	or	r2,r6,r17
 802bf8c:	1000231e 	bne	r2,zero,802c01c <__divdf3+0x2d0>
 802bf90:	0023883a 	mov	r17,zero
 802bf94:	0029883a 	mov	r20,zero
 802bf98:	01c00084 	movi	r7,2
 802bf9c:	003f9b06 	br	802be0c <__alt_data_end+0xfffeca0c>
 802bfa0:	3444b03a 	or	r2,r6,r17
 802bfa4:	10001926 	beq	r2,zero,802c00c <__divdf3+0x2c0>
 802bfa8:	88014b26 	beq	r17,zero,802c4d8 <__divdf3+0x78c>
 802bfac:	8809883a 	mov	r4,r17
 802bfb0:	d9400115 	stw	r5,4(sp)
 802bfb4:	d9800215 	stw	r6,8(sp)
 802bfb8:	da000415 	stw	r8,16(sp)
 802bfbc:	da400315 	stw	r9,12(sp)
 802bfc0:	802dce00 	call	802dce0 <__clzsi2>
 802bfc4:	d9400117 	ldw	r5,4(sp)
 802bfc8:	d9800217 	ldw	r6,8(sp)
 802bfcc:	da000417 	ldw	r8,16(sp)
 802bfd0:	da400317 	ldw	r9,12(sp)
 802bfd4:	113ffd44 	addi	r4,r2,-11
 802bfd8:	00c00704 	movi	r3,28
 802bfdc:	19013a16 	blt	r3,r4,802c4c8 <__divdf3+0x77c>
 802bfe0:	00c00744 	movi	r3,29
 802bfe4:	153ffe04 	addi	r20,r2,-8
 802bfe8:	1907c83a 	sub	r3,r3,r4
 802bfec:	8d22983a 	sll	r17,r17,r20
 802bff0:	30c6d83a 	srl	r3,r6,r3
 802bff4:	3528983a 	sll	r20,r6,r20
 802bff8:	1c62b03a 	or	r17,r3,r17
 802bffc:	1080fcc4 	addi	r2,r2,1011
 802c000:	0087c83a 	sub	r3,zero,r2
 802c004:	000f883a 	mov	r7,zero
 802c008:	003f8006 	br	802be0c <__alt_data_end+0xfffeca0c>
 802c00c:	0023883a 	mov	r17,zero
 802c010:	0029883a 	mov	r20,zero
 802c014:	01c00044 	movi	r7,1
 802c018:	003f7c06 	br	802be0c <__alt_data_end+0xfffeca0c>
 802c01c:	01c000c4 	movi	r7,3
 802c020:	003f7a06 	br	802be0c <__alt_data_end+0xfffeca0c>
 802c024:	02400104 	movi	r9,4
 802c028:	0021883a 	mov	r16,zero
 802c02c:	002b883a 	mov	r21,zero
 802c030:	01400044 	movi	r5,1
 802c034:	003f6306 	br	802bdc4 <__alt_data_end+0xfffec9c4>
 802c038:	02400304 	movi	r9,12
 802c03c:	014000c4 	movi	r5,3
 802c040:	003f6006 	br	802bdc4 <__alt_data_end+0xfffec9c4>
 802c044:	04000434 	movhi	r16,16
 802c048:	0009883a 	mov	r4,zero
 802c04c:	843fffc4 	addi	r16,r16,-1
 802c050:	057fffc4 	movi	r21,-1
 802c054:	0081ffc4 	movi	r2,2047
 802c058:	003f9b06 	br	802bec8 <__alt_data_end+0xfffecac8>
 802c05c:	00c00044 	movi	r3,1
 802c060:	1887c83a 	sub	r3,r3,r2
 802c064:	01000e04 	movi	r4,56
 802c068:	20c1530e 	bge	r4,r3,802c5b8 <__divdf3+0x86c>
 802c06c:	9900004c 	andi	r4,r19,1
 802c070:	0005883a 	mov	r2,zero
 802c074:	0021883a 	mov	r16,zero
 802c078:	002b883a 	mov	r21,zero
 802c07c:	003f9206 	br	802bec8 <__alt_data_end+0xfffecac8>
 802c080:	8c012e36 	bltu	r17,r16,802c53c <__divdf3+0x7f0>
 802c084:	84412c26 	beq	r16,r17,802c538 <__divdf3+0x7ec>
 802c088:	a82f883a 	mov	r23,r21
 802c08c:	18ffffc4 	addi	r3,r3,-1
 802c090:	002b883a 	mov	r21,zero
 802c094:	a004d63a 	srli	r2,r20,24
 802c098:	8822923a 	slli	r17,r17,8
 802c09c:	a028923a 	slli	r20,r20,8
 802c0a0:	8009883a 	mov	r4,r16
 802c0a4:	88acb03a 	or	r22,r17,r2
 802c0a8:	dd000015 	stw	r20,0(sp)
 802c0ac:	b028d43a 	srli	r20,r22,16
 802c0b0:	d8c00215 	stw	r3,8(sp)
 802c0b4:	b4bfffcc 	andi	r18,r22,65535
 802c0b8:	a00b883a 	mov	r5,r20
 802c0bc:	802b3e40 	call	802b3e4 <__udivsi3>
 802c0c0:	100b883a 	mov	r5,r2
 802c0c4:	9009883a 	mov	r4,r18
 802c0c8:	1023883a 	mov	r17,r2
 802c0cc:	80214e80 	call	80214e8 <__mulsi3>
 802c0d0:	8009883a 	mov	r4,r16
 802c0d4:	a00b883a 	mov	r5,r20
 802c0d8:	1039883a 	mov	fp,r2
 802c0dc:	802b4480 	call	802b448 <__umodsi3>
 802c0e0:	1004943a 	slli	r2,r2,16
 802c0e4:	b808d43a 	srli	r4,r23,16
 802c0e8:	d8c00217 	ldw	r3,8(sp)
 802c0ec:	2084b03a 	or	r2,r4,r2
 802c0f0:	1700062e 	bgeu	r2,fp,802c10c <__divdf3+0x3c0>
 802c0f4:	1585883a 	add	r2,r2,r22
 802c0f8:	893fffc4 	addi	r4,r17,-1
 802c0fc:	15811d36 	bltu	r2,r22,802c574 <__divdf3+0x828>
 802c100:	17011c2e 	bgeu	r2,fp,802c574 <__divdf3+0x828>
 802c104:	8c7fff84 	addi	r17,r17,-2
 802c108:	1585883a 	add	r2,r2,r22
 802c10c:	1739c83a 	sub	fp,r2,fp
 802c110:	a00b883a 	mov	r5,r20
 802c114:	e009883a 	mov	r4,fp
 802c118:	d8c00215 	stw	r3,8(sp)
 802c11c:	802b3e40 	call	802b3e4 <__udivsi3>
 802c120:	100b883a 	mov	r5,r2
 802c124:	9009883a 	mov	r4,r18
 802c128:	1021883a 	mov	r16,r2
 802c12c:	80214e80 	call	80214e8 <__mulsi3>
 802c130:	a00b883a 	mov	r5,r20
 802c134:	e009883a 	mov	r4,fp
 802c138:	d8800415 	stw	r2,16(sp)
 802c13c:	802b4480 	call	802b448 <__umodsi3>
 802c140:	1004943a 	slli	r2,r2,16
 802c144:	da000417 	ldw	r8,16(sp)
 802c148:	bdffffcc 	andi	r23,r23,65535
 802c14c:	b884b03a 	or	r2,r23,r2
 802c150:	d8c00217 	ldw	r3,8(sp)
 802c154:	1200062e 	bgeu	r2,r8,802c170 <__divdf3+0x424>
 802c158:	1585883a 	add	r2,r2,r22
 802c15c:	813fffc4 	addi	r4,r16,-1
 802c160:	15810236 	bltu	r2,r22,802c56c <__divdf3+0x820>
 802c164:	1201012e 	bgeu	r2,r8,802c56c <__divdf3+0x820>
 802c168:	843fff84 	addi	r16,r16,-2
 802c16c:	1585883a 	add	r2,r2,r22
 802c170:	8822943a 	slli	r17,r17,16
 802c174:	d9800017 	ldw	r6,0(sp)
 802c178:	1211c83a 	sub	r8,r2,r8
 802c17c:	8c22b03a 	or	r17,r17,r16
 802c180:	373fffcc 	andi	fp,r6,65535
 802c184:	8abfffcc 	andi	r10,r17,65535
 802c188:	8820d43a 	srli	r16,r17,16
 802c18c:	5009883a 	mov	r4,r10
 802c190:	e00b883a 	mov	r5,fp
 802c194:	302ed43a 	srli	r23,r6,16
 802c198:	d8c00215 	stw	r3,8(sp)
 802c19c:	da000415 	stw	r8,16(sp)
 802c1a0:	da800115 	stw	r10,4(sp)
 802c1a4:	80214e80 	call	80214e8 <__mulsi3>
 802c1a8:	800b883a 	mov	r5,r16
 802c1ac:	e009883a 	mov	r4,fp
 802c1b0:	d8800515 	stw	r2,20(sp)
 802c1b4:	80214e80 	call	80214e8 <__mulsi3>
 802c1b8:	8009883a 	mov	r4,r16
 802c1bc:	b80b883a 	mov	r5,r23
 802c1c0:	d8800315 	stw	r2,12(sp)
 802c1c4:	80214e80 	call	80214e8 <__mulsi3>
 802c1c8:	da800117 	ldw	r10,4(sp)
 802c1cc:	b80b883a 	mov	r5,r23
 802c1d0:	1021883a 	mov	r16,r2
 802c1d4:	5009883a 	mov	r4,r10
 802c1d8:	80214e80 	call	80214e8 <__mulsi3>
 802c1dc:	d9c00517 	ldw	r7,20(sp)
 802c1e0:	da400317 	ldw	r9,12(sp)
 802c1e4:	d8c00217 	ldw	r3,8(sp)
 802c1e8:	3808d43a 	srli	r4,r7,16
 802c1ec:	1245883a 	add	r2,r2,r9
 802c1f0:	da000417 	ldw	r8,16(sp)
 802c1f4:	2085883a 	add	r2,r4,r2
 802c1f8:	1240022e 	bgeu	r2,r9,802c204 <__divdf3+0x4b8>
 802c1fc:	01000074 	movhi	r4,1
 802c200:	8121883a 	add	r16,r16,r4
 802c204:	1008d43a 	srli	r4,r2,16
 802c208:	1004943a 	slli	r2,r2,16
 802c20c:	39ffffcc 	andi	r7,r7,65535
 802c210:	2409883a 	add	r4,r4,r16
 802c214:	11c5883a 	add	r2,r2,r7
 802c218:	4100bb36 	bltu	r8,r4,802c508 <__divdf3+0x7bc>
 802c21c:	4100d726 	beq	r8,r4,802c57c <__divdf3+0x830>
 802c220:	4109c83a 	sub	r4,r8,r4
 802c224:	a8a1c83a 	sub	r16,r21,r2
 802c228:	ac2b803a 	cmpltu	r21,r21,r16
 802c22c:	256bc83a 	sub	r21,r4,r21
 802c230:	b540d926 	beq	r22,r21,802c598 <__divdf3+0x84c>
 802c234:	a00b883a 	mov	r5,r20
 802c238:	a809883a 	mov	r4,r21
 802c23c:	d8c00215 	stw	r3,8(sp)
 802c240:	802b3e40 	call	802b3e4 <__udivsi3>
 802c244:	100b883a 	mov	r5,r2
 802c248:	9009883a 	mov	r4,r18
 802c24c:	d8800515 	stw	r2,20(sp)
 802c250:	80214e80 	call	80214e8 <__mulsi3>
 802c254:	a809883a 	mov	r4,r21
 802c258:	a00b883a 	mov	r5,r20
 802c25c:	d8800415 	stw	r2,16(sp)
 802c260:	802b4480 	call	802b448 <__umodsi3>
 802c264:	1004943a 	slli	r2,r2,16
 802c268:	8008d43a 	srli	r4,r16,16
 802c26c:	da000417 	ldw	r8,16(sp)
 802c270:	d8c00217 	ldw	r3,8(sp)
 802c274:	2084b03a 	or	r2,r4,r2
 802c278:	d9c00517 	ldw	r7,20(sp)
 802c27c:	1200062e 	bgeu	r2,r8,802c298 <__divdf3+0x54c>
 802c280:	1585883a 	add	r2,r2,r22
 802c284:	393fffc4 	addi	r4,r7,-1
 802c288:	1580c536 	bltu	r2,r22,802c5a0 <__divdf3+0x854>
 802c28c:	1200c42e 	bgeu	r2,r8,802c5a0 <__divdf3+0x854>
 802c290:	39ffff84 	addi	r7,r7,-2
 802c294:	1585883a 	add	r2,r2,r22
 802c298:	122bc83a 	sub	r21,r2,r8
 802c29c:	a00b883a 	mov	r5,r20
 802c2a0:	a809883a 	mov	r4,r21
 802c2a4:	d8c00215 	stw	r3,8(sp)
 802c2a8:	d9c00515 	stw	r7,20(sp)
 802c2ac:	802b3e40 	call	802b3e4 <__udivsi3>
 802c2b0:	9009883a 	mov	r4,r18
 802c2b4:	100b883a 	mov	r5,r2
 802c2b8:	d8800415 	stw	r2,16(sp)
 802c2bc:	80214e80 	call	80214e8 <__mulsi3>
 802c2c0:	a809883a 	mov	r4,r21
 802c2c4:	a00b883a 	mov	r5,r20
 802c2c8:	1025883a 	mov	r18,r2
 802c2cc:	802b4480 	call	802b448 <__umodsi3>
 802c2d0:	1004943a 	slli	r2,r2,16
 802c2d4:	813fffcc 	andi	r4,r16,65535
 802c2d8:	d8c00217 	ldw	r3,8(sp)
 802c2dc:	20a0b03a 	or	r16,r4,r2
 802c2e0:	d9c00517 	ldw	r7,20(sp)
 802c2e4:	da000417 	ldw	r8,16(sp)
 802c2e8:	8480062e 	bgeu	r16,r18,802c304 <__divdf3+0x5b8>
 802c2ec:	85a1883a 	add	r16,r16,r22
 802c2f0:	40bfffc4 	addi	r2,r8,-1
 802c2f4:	8580ac36 	bltu	r16,r22,802c5a8 <__divdf3+0x85c>
 802c2f8:	8480ab2e 	bgeu	r16,r18,802c5a8 <__divdf3+0x85c>
 802c2fc:	423fff84 	addi	r8,r8,-2
 802c300:	85a1883a 	add	r16,r16,r22
 802c304:	3804943a 	slli	r2,r7,16
 802c308:	84a1c83a 	sub	r16,r16,r18
 802c30c:	e009883a 	mov	r4,fp
 802c310:	1228b03a 	or	r20,r2,r8
 802c314:	a1ffffcc 	andi	r7,r20,65535
 802c318:	a024d43a 	srli	r18,r20,16
 802c31c:	380b883a 	mov	r5,r7
 802c320:	d8c00215 	stw	r3,8(sp)
 802c324:	d9c00515 	stw	r7,20(sp)
 802c328:	80214e80 	call	80214e8 <__mulsi3>
 802c32c:	900b883a 	mov	r5,r18
 802c330:	e009883a 	mov	r4,fp
 802c334:	102b883a 	mov	r21,r2
 802c338:	80214e80 	call	80214e8 <__mulsi3>
 802c33c:	900b883a 	mov	r5,r18
 802c340:	b809883a 	mov	r4,r23
 802c344:	1039883a 	mov	fp,r2
 802c348:	80214e80 	call	80214e8 <__mulsi3>
 802c34c:	d9c00517 	ldw	r7,20(sp)
 802c350:	b80b883a 	mov	r5,r23
 802c354:	1025883a 	mov	r18,r2
 802c358:	3809883a 	mov	r4,r7
 802c35c:	80214e80 	call	80214e8 <__mulsi3>
 802c360:	a808d43a 	srli	r4,r21,16
 802c364:	1705883a 	add	r2,r2,fp
 802c368:	d8c00217 	ldw	r3,8(sp)
 802c36c:	2085883a 	add	r2,r4,r2
 802c370:	1700022e 	bgeu	r2,fp,802c37c <__divdf3+0x630>
 802c374:	01000074 	movhi	r4,1
 802c378:	9125883a 	add	r18,r18,r4
 802c37c:	1008d43a 	srli	r4,r2,16
 802c380:	1004943a 	slli	r2,r2,16
 802c384:	ad7fffcc 	andi	r21,r21,65535
 802c388:	2489883a 	add	r4,r4,r18
 802c38c:	1545883a 	add	r2,r2,r21
 802c390:	81003836 	bltu	r16,r4,802c474 <__divdf3+0x728>
 802c394:	81003626 	beq	r16,r4,802c470 <__divdf3+0x724>
 802c398:	a5000054 	ori	r20,r20,1
 802c39c:	1880ffc4 	addi	r2,r3,1023
 802c3a0:	00bf2e0e 	bge	zero,r2,802c05c <__alt_data_end+0xfffecc5c>
 802c3a4:	a10001cc 	andi	r4,r20,7
 802c3a8:	20000726 	beq	r4,zero,802c3c8 <__divdf3+0x67c>
 802c3ac:	a10003cc 	andi	r4,r20,15
 802c3b0:	01400104 	movi	r5,4
 802c3b4:	21400426 	beq	r4,r5,802c3c8 <__divdf3+0x67c>
 802c3b8:	a149883a 	add	r4,r20,r5
 802c3bc:	2529803a 	cmpltu	r20,r4,r20
 802c3c0:	8d23883a 	add	r17,r17,r20
 802c3c4:	2029883a 	mov	r20,r4
 802c3c8:	8900402c 	andhi	r4,r17,256
 802c3cc:	20000426 	beq	r4,zero,802c3e0 <__divdf3+0x694>
 802c3d0:	18810004 	addi	r2,r3,1024
 802c3d4:	00ffc034 	movhi	r3,65280
 802c3d8:	18ffffc4 	addi	r3,r3,-1
 802c3dc:	88e2703a 	and	r17,r17,r3
 802c3e0:	00c1ff84 	movi	r3,2046
 802c3e4:	18beb416 	blt	r3,r2,802beb8 <__alt_data_end+0xfffecab8>
 802c3e8:	a028d0fa 	srli	r20,r20,3
 802c3ec:	882a977a 	slli	r21,r17,29
 802c3f0:	8820927a 	slli	r16,r17,9
 802c3f4:	1081ffcc 	andi	r2,r2,2047
 802c3f8:	ad2ab03a 	or	r21,r21,r20
 802c3fc:	8020d33a 	srli	r16,r16,12
 802c400:	9900004c 	andi	r4,r19,1
 802c404:	003eb006 	br	802bec8 <__alt_data_end+0xfffecac8>
 802c408:	8080022c 	andhi	r2,r16,8
 802c40c:	10001226 	beq	r2,zero,802c458 <__divdf3+0x70c>
 802c410:	8880022c 	andhi	r2,r17,8
 802c414:	1000101e 	bne	r2,zero,802c458 <__divdf3+0x70c>
 802c418:	00800434 	movhi	r2,16
 802c41c:	8c000234 	orhi	r16,r17,8
 802c420:	10bfffc4 	addi	r2,r2,-1
 802c424:	b809883a 	mov	r4,r23
 802c428:	80a0703a 	and	r16,r16,r2
 802c42c:	a02b883a 	mov	r21,r20
 802c430:	003f0806 	br	802c054 <__alt_data_end+0xfffecc54>
 802c434:	008000c4 	movi	r2,3
 802c438:	3880b126 	beq	r7,r2,802c700 <__divdf3+0x9b4>
 802c43c:	00800044 	movi	r2,1
 802c440:	38805b1e 	bne	r7,r2,802c5b0 <__divdf3+0x864>
 802c444:	e009883a 	mov	r4,fp
 802c448:	0005883a 	mov	r2,zero
 802c44c:	0021883a 	mov	r16,zero
 802c450:	002b883a 	mov	r21,zero
 802c454:	003e9c06 	br	802bec8 <__alt_data_end+0xfffecac8>
 802c458:	00800434 	movhi	r2,16
 802c45c:	84000234 	orhi	r16,r16,8
 802c460:	10bfffc4 	addi	r2,r2,-1
 802c464:	b009883a 	mov	r4,r22
 802c468:	80a0703a 	and	r16,r16,r2
 802c46c:	003ef906 	br	802c054 <__alt_data_end+0xfffecc54>
 802c470:	103fca26 	beq	r2,zero,802c39c <__alt_data_end+0xfffecf9c>
 802c474:	b421883a 	add	r16,r22,r16
 802c478:	a17fffc4 	addi	r5,r20,-1
 802c47c:	8580422e 	bgeu	r16,r22,802c588 <__divdf3+0x83c>
 802c480:	2829883a 	mov	r20,r5
 802c484:	813fc41e 	bne	r16,r4,802c398 <__alt_data_end+0xfffecf98>
 802c488:	d9800017 	ldw	r6,0(sp)
 802c48c:	30bfc21e 	bne	r6,r2,802c398 <__alt_data_end+0xfffecf98>
 802c490:	003fc206 	br	802c39c <__alt_data_end+0xfffecf9c>
 802c494:	143ff604 	addi	r16,r2,-40
 802c498:	8c20983a 	sll	r16,r17,r16
 802c49c:	002b883a 	mov	r21,zero
 802c4a0:	003eb406 	br	802bf74 <__alt_data_end+0xfffecb74>
 802c4a4:	d9800215 	stw	r6,8(sp)
 802c4a8:	d9c00515 	stw	r7,20(sp)
 802c4ac:	da000415 	stw	r8,16(sp)
 802c4b0:	802dce00 	call	802dce0 <__clzsi2>
 802c4b4:	10800804 	addi	r2,r2,32
 802c4b8:	da000417 	ldw	r8,16(sp)
 802c4bc:	d9c00517 	ldw	r7,20(sp)
 802c4c0:	d9800217 	ldw	r6,8(sp)
 802c4c4:	003ea106 	br	802bf4c <__alt_data_end+0xfffecb4c>
 802c4c8:	147ff604 	addi	r17,r2,-40
 802c4cc:	3462983a 	sll	r17,r6,r17
 802c4d0:	0029883a 	mov	r20,zero
 802c4d4:	003ec906 	br	802bffc <__alt_data_end+0xfffecbfc>
 802c4d8:	3009883a 	mov	r4,r6
 802c4dc:	d9400115 	stw	r5,4(sp)
 802c4e0:	d9800215 	stw	r6,8(sp)
 802c4e4:	da000415 	stw	r8,16(sp)
 802c4e8:	da400315 	stw	r9,12(sp)
 802c4ec:	802dce00 	call	802dce0 <__clzsi2>
 802c4f0:	10800804 	addi	r2,r2,32
 802c4f4:	da400317 	ldw	r9,12(sp)
 802c4f8:	da000417 	ldw	r8,16(sp)
 802c4fc:	d9800217 	ldw	r6,8(sp)
 802c500:	d9400117 	ldw	r5,4(sp)
 802c504:	003eb306 	br	802bfd4 <__alt_data_end+0xfffecbd4>
 802c508:	d9800017 	ldw	r6,0(sp)
 802c50c:	a9ab883a 	add	r21,r21,r6
 802c510:	a98b803a 	cmpltu	r5,r21,r6
 802c514:	2d8b883a 	add	r5,r5,r22
 802c518:	2a11883a 	add	r8,r5,r8
 802c51c:	897fffc4 	addi	r5,r17,-1
 802c520:	b2000c2e 	bgeu	r22,r8,802c554 <__divdf3+0x808>
 802c524:	41003f36 	bltu	r8,r4,802c624 <__divdf3+0x8d8>
 802c528:	22006c26 	beq	r4,r8,802c6dc <__divdf3+0x990>
 802c52c:	4109c83a 	sub	r4,r8,r4
 802c530:	2823883a 	mov	r17,r5
 802c534:	003f3b06 	br	802c224 <__alt_data_end+0xfffece24>
 802c538:	ad3ed336 	bltu	r21,r20,802c088 <__alt_data_end+0xfffecc88>
 802c53c:	a804d07a 	srli	r2,r21,1
 802c540:	802e97fa 	slli	r23,r16,31
 802c544:	a82a97fa 	slli	r21,r21,31
 802c548:	8020d07a 	srli	r16,r16,1
 802c54c:	b8aeb03a 	or	r23,r23,r2
 802c550:	003ed006 	br	802c094 <__alt_data_end+0xfffecc94>
 802c554:	b23ff51e 	bne	r22,r8,802c52c <__alt_data_end+0xfffed12c>
 802c558:	d9800017 	ldw	r6,0(sp)
 802c55c:	a9bff12e 	bgeu	r21,r6,802c524 <__alt_data_end+0xfffed124>
 802c560:	b109c83a 	sub	r4,r22,r4
 802c564:	2823883a 	mov	r17,r5
 802c568:	003f2e06 	br	802c224 <__alt_data_end+0xfffece24>
 802c56c:	2021883a 	mov	r16,r4
 802c570:	003eff06 	br	802c170 <__alt_data_end+0xfffecd70>
 802c574:	2023883a 	mov	r17,r4
 802c578:	003ee406 	br	802c10c <__alt_data_end+0xfffecd0c>
 802c57c:	a8bfe236 	bltu	r21,r2,802c508 <__alt_data_end+0xfffed108>
 802c580:	0009883a 	mov	r4,zero
 802c584:	003f2706 	br	802c224 <__alt_data_end+0xfffece24>
 802c588:	81002d36 	bltu	r16,r4,802c640 <__divdf3+0x8f4>
 802c58c:	24005626 	beq	r4,r16,802c6e8 <__divdf3+0x99c>
 802c590:	2829883a 	mov	r20,r5
 802c594:	003f8006 	br	802c398 <__alt_data_end+0xfffecf98>
 802c598:	053fffc4 	movi	r20,-1
 802c59c:	003f7f06 	br	802c39c <__alt_data_end+0xfffecf9c>
 802c5a0:	200f883a 	mov	r7,r4
 802c5a4:	003f3c06 	br	802c298 <__alt_data_end+0xfffece98>
 802c5a8:	1011883a 	mov	r8,r2
 802c5ac:	003f5506 	br	802c304 <__alt_data_end+0xfffecf04>
 802c5b0:	e027883a 	mov	r19,fp
 802c5b4:	003f7906 	br	802c39c <__alt_data_end+0xfffecf9c>
 802c5b8:	010007c4 	movi	r4,31
 802c5bc:	20c02816 	blt	r4,r3,802c660 <__divdf3+0x914>
 802c5c0:	00800804 	movi	r2,32
 802c5c4:	10c5c83a 	sub	r2,r2,r3
 802c5c8:	888a983a 	sll	r5,r17,r2
 802c5cc:	a0c8d83a 	srl	r4,r20,r3
 802c5d0:	a084983a 	sll	r2,r20,r2
 802c5d4:	88e2d83a 	srl	r17,r17,r3
 802c5d8:	2906b03a 	or	r3,r5,r4
 802c5dc:	1004c03a 	cmpne	r2,r2,zero
 802c5e0:	1886b03a 	or	r3,r3,r2
 802c5e4:	188001cc 	andi	r2,r3,7
 802c5e8:	10000726 	beq	r2,zero,802c608 <__divdf3+0x8bc>
 802c5ec:	188003cc 	andi	r2,r3,15
 802c5f0:	01000104 	movi	r4,4
 802c5f4:	11000426 	beq	r2,r4,802c608 <__divdf3+0x8bc>
 802c5f8:	1805883a 	mov	r2,r3
 802c5fc:	10c00104 	addi	r3,r2,4
 802c600:	1885803a 	cmpltu	r2,r3,r2
 802c604:	88a3883a 	add	r17,r17,r2
 802c608:	8880202c 	andhi	r2,r17,128
 802c60c:	10002926 	beq	r2,zero,802c6b4 <__divdf3+0x968>
 802c610:	9900004c 	andi	r4,r19,1
 802c614:	00800044 	movi	r2,1
 802c618:	0021883a 	mov	r16,zero
 802c61c:	002b883a 	mov	r21,zero
 802c620:	003e2906 	br	802bec8 <__alt_data_end+0xfffecac8>
 802c624:	d9800017 	ldw	r6,0(sp)
 802c628:	8c7fff84 	addi	r17,r17,-2
 802c62c:	a9ab883a 	add	r21,r21,r6
 802c630:	a98b803a 	cmpltu	r5,r21,r6
 802c634:	2d8b883a 	add	r5,r5,r22
 802c638:	2a11883a 	add	r8,r5,r8
 802c63c:	003ef806 	br	802c220 <__alt_data_end+0xfffece20>
 802c640:	d9800017 	ldw	r6,0(sp)
 802c644:	318f883a 	add	r7,r6,r6
 802c648:	398b803a 	cmpltu	r5,r7,r6
 802c64c:	2d8d883a 	add	r6,r5,r22
 802c650:	81a1883a 	add	r16,r16,r6
 802c654:	a17fff84 	addi	r5,r20,-2
 802c658:	d9c00015 	stw	r7,0(sp)
 802c65c:	003f8806 	br	802c480 <__alt_data_end+0xfffed080>
 802c660:	013ff844 	movi	r4,-31
 802c664:	2085c83a 	sub	r2,r4,r2
 802c668:	8888d83a 	srl	r4,r17,r2
 802c66c:	00800804 	movi	r2,32
 802c670:	18802126 	beq	r3,r2,802c6f8 <__divdf3+0x9ac>
 802c674:	04001004 	movi	r16,64
 802c678:	80c7c83a 	sub	r3,r16,r3
 802c67c:	88e0983a 	sll	r16,r17,r3
 802c680:	8504b03a 	or	r2,r16,r20
 802c684:	1004c03a 	cmpne	r2,r2,zero
 802c688:	2084b03a 	or	r2,r4,r2
 802c68c:	144001cc 	andi	r17,r2,7
 802c690:	88000d1e 	bne	r17,zero,802c6c8 <__divdf3+0x97c>
 802c694:	0021883a 	mov	r16,zero
 802c698:	102ad0fa 	srli	r21,r2,3
 802c69c:	9900004c 	andi	r4,r19,1
 802c6a0:	0005883a 	mov	r2,zero
 802c6a4:	ac6ab03a 	or	r21,r21,r17
 802c6a8:	003e0706 	br	802bec8 <__alt_data_end+0xfffecac8>
 802c6ac:	1007883a 	mov	r3,r2
 802c6b0:	0023883a 	mov	r17,zero
 802c6b4:	8820927a 	slli	r16,r17,9
 802c6b8:	1805883a 	mov	r2,r3
 802c6bc:	8822977a 	slli	r17,r17,29
 802c6c0:	8020d33a 	srli	r16,r16,12
 802c6c4:	003ff406 	br	802c698 <__alt_data_end+0xfffed298>
 802c6c8:	10c003cc 	andi	r3,r2,15
 802c6cc:	01000104 	movi	r4,4
 802c6d0:	193ff626 	beq	r3,r4,802c6ac <__alt_data_end+0xfffed2ac>
 802c6d4:	0023883a 	mov	r17,zero
 802c6d8:	003fc806 	br	802c5fc <__alt_data_end+0xfffed1fc>
 802c6dc:	a8bfd136 	bltu	r21,r2,802c624 <__alt_data_end+0xfffed224>
 802c6e0:	2823883a 	mov	r17,r5
 802c6e4:	003fa606 	br	802c580 <__alt_data_end+0xfffed180>
 802c6e8:	d9800017 	ldw	r6,0(sp)
 802c6ec:	30bfd436 	bltu	r6,r2,802c640 <__alt_data_end+0xfffed240>
 802c6f0:	2829883a 	mov	r20,r5
 802c6f4:	003f6406 	br	802c488 <__alt_data_end+0xfffed088>
 802c6f8:	0021883a 	mov	r16,zero
 802c6fc:	003fe006 	br	802c680 <__alt_data_end+0xfffed280>
 802c700:	00800434 	movhi	r2,16
 802c704:	8c000234 	orhi	r16,r17,8
 802c708:	10bfffc4 	addi	r2,r2,-1
 802c70c:	e009883a 	mov	r4,fp
 802c710:	80a0703a 	and	r16,r16,r2
 802c714:	a02b883a 	mov	r21,r20
 802c718:	003e4e06 	br	802c054 <__alt_data_end+0xfffecc54>

0802c71c <__eqdf2>:
 802c71c:	2804d53a 	srli	r2,r5,20
 802c720:	3806d53a 	srli	r3,r7,20
 802c724:	02000434 	movhi	r8,16
 802c728:	423fffc4 	addi	r8,r8,-1
 802c72c:	1081ffcc 	andi	r2,r2,2047
 802c730:	0281ffc4 	movi	r10,2047
 802c734:	2a12703a 	and	r9,r5,r8
 802c738:	18c1ffcc 	andi	r3,r3,2047
 802c73c:	3a10703a 	and	r8,r7,r8
 802c740:	280ad7fa 	srli	r5,r5,31
 802c744:	380ed7fa 	srli	r7,r7,31
 802c748:	12801026 	beq	r2,r10,802c78c <__eqdf2+0x70>
 802c74c:	0281ffc4 	movi	r10,2047
 802c750:	1a800a26 	beq	r3,r10,802c77c <__eqdf2+0x60>
 802c754:	10c00226 	beq	r2,r3,802c760 <__eqdf2+0x44>
 802c758:	00800044 	movi	r2,1
 802c75c:	f800283a 	ret
 802c760:	4a3ffd1e 	bne	r9,r8,802c758 <__alt_data_end+0xfffed358>
 802c764:	21bffc1e 	bne	r4,r6,802c758 <__alt_data_end+0xfffed358>
 802c768:	29c00c26 	beq	r5,r7,802c79c <__eqdf2+0x80>
 802c76c:	103ffa1e 	bne	r2,zero,802c758 <__alt_data_end+0xfffed358>
 802c770:	2244b03a 	or	r2,r4,r9
 802c774:	1004c03a 	cmpne	r2,r2,zero
 802c778:	f800283a 	ret
 802c77c:	3214b03a 	or	r10,r6,r8
 802c780:	503ff426 	beq	r10,zero,802c754 <__alt_data_end+0xfffed354>
 802c784:	00800044 	movi	r2,1
 802c788:	f800283a 	ret
 802c78c:	2254b03a 	or	r10,r4,r9
 802c790:	503fee26 	beq	r10,zero,802c74c <__alt_data_end+0xfffed34c>
 802c794:	00800044 	movi	r2,1
 802c798:	f800283a 	ret
 802c79c:	0005883a 	mov	r2,zero
 802c7a0:	f800283a 	ret

0802c7a4 <__gedf2>:
 802c7a4:	2804d53a 	srli	r2,r5,20
 802c7a8:	3806d53a 	srli	r3,r7,20
 802c7ac:	02000434 	movhi	r8,16
 802c7b0:	423fffc4 	addi	r8,r8,-1
 802c7b4:	1081ffcc 	andi	r2,r2,2047
 802c7b8:	0241ffc4 	movi	r9,2047
 802c7bc:	2a14703a 	and	r10,r5,r8
 802c7c0:	18c1ffcc 	andi	r3,r3,2047
 802c7c4:	3a10703a 	and	r8,r7,r8
 802c7c8:	280ad7fa 	srli	r5,r5,31
 802c7cc:	380ed7fa 	srli	r7,r7,31
 802c7d0:	12401d26 	beq	r2,r9,802c848 <__gedf2+0xa4>
 802c7d4:	0241ffc4 	movi	r9,2047
 802c7d8:	1a401226 	beq	r3,r9,802c824 <__gedf2+0x80>
 802c7dc:	1000081e 	bne	r2,zero,802c800 <__gedf2+0x5c>
 802c7e0:	2296b03a 	or	r11,r4,r10
 802c7e4:	5813003a 	cmpeq	r9,r11,zero
 802c7e8:	1800091e 	bne	r3,zero,802c810 <__gedf2+0x6c>
 802c7ec:	3218b03a 	or	r12,r6,r8
 802c7f0:	6000071e 	bne	r12,zero,802c810 <__gedf2+0x6c>
 802c7f4:	0005883a 	mov	r2,zero
 802c7f8:	5800101e 	bne	r11,zero,802c83c <__gedf2+0x98>
 802c7fc:	f800283a 	ret
 802c800:	18000c1e 	bne	r3,zero,802c834 <__gedf2+0x90>
 802c804:	3212b03a 	or	r9,r6,r8
 802c808:	48000c26 	beq	r9,zero,802c83c <__gedf2+0x98>
 802c80c:	0013883a 	mov	r9,zero
 802c810:	39c03fcc 	andi	r7,r7,255
 802c814:	48000826 	beq	r9,zero,802c838 <__gedf2+0x94>
 802c818:	38000926 	beq	r7,zero,802c840 <__gedf2+0x9c>
 802c81c:	00800044 	movi	r2,1
 802c820:	f800283a 	ret
 802c824:	3212b03a 	or	r9,r6,r8
 802c828:	483fec26 	beq	r9,zero,802c7dc <__alt_data_end+0xfffed3dc>
 802c82c:	00bfff84 	movi	r2,-2
 802c830:	f800283a 	ret
 802c834:	39c03fcc 	andi	r7,r7,255
 802c838:	29c00626 	beq	r5,r7,802c854 <__gedf2+0xb0>
 802c83c:	283ff726 	beq	r5,zero,802c81c <__alt_data_end+0xfffed41c>
 802c840:	00bfffc4 	movi	r2,-1
 802c844:	f800283a 	ret
 802c848:	2292b03a 	or	r9,r4,r10
 802c84c:	483fe126 	beq	r9,zero,802c7d4 <__alt_data_end+0xfffed3d4>
 802c850:	003ff606 	br	802c82c <__alt_data_end+0xfffed42c>
 802c854:	18bff916 	blt	r3,r2,802c83c <__alt_data_end+0xfffed43c>
 802c858:	10c00316 	blt	r2,r3,802c868 <__gedf2+0xc4>
 802c85c:	42bff736 	bltu	r8,r10,802c83c <__alt_data_end+0xfffed43c>
 802c860:	52000326 	beq	r10,r8,802c870 <__gedf2+0xcc>
 802c864:	5200042e 	bgeu	r10,r8,802c878 <__gedf2+0xd4>
 802c868:	283fec1e 	bne	r5,zero,802c81c <__alt_data_end+0xfffed41c>
 802c86c:	003ff406 	br	802c840 <__alt_data_end+0xfffed440>
 802c870:	313ff236 	bltu	r6,r4,802c83c <__alt_data_end+0xfffed43c>
 802c874:	21bffc36 	bltu	r4,r6,802c868 <__alt_data_end+0xfffed468>
 802c878:	0005883a 	mov	r2,zero
 802c87c:	f800283a 	ret

0802c880 <__ledf2>:
 802c880:	2804d53a 	srli	r2,r5,20
 802c884:	3810d53a 	srli	r8,r7,20
 802c888:	00c00434 	movhi	r3,16
 802c88c:	18ffffc4 	addi	r3,r3,-1
 802c890:	1081ffcc 	andi	r2,r2,2047
 802c894:	0241ffc4 	movi	r9,2047
 802c898:	28d4703a 	and	r10,r5,r3
 802c89c:	4201ffcc 	andi	r8,r8,2047
 802c8a0:	38c6703a 	and	r3,r7,r3
 802c8a4:	280ad7fa 	srli	r5,r5,31
 802c8a8:	380ed7fa 	srli	r7,r7,31
 802c8ac:	12401f26 	beq	r2,r9,802c92c <__ledf2+0xac>
 802c8b0:	0241ffc4 	movi	r9,2047
 802c8b4:	42401426 	beq	r8,r9,802c908 <__ledf2+0x88>
 802c8b8:	1000091e 	bne	r2,zero,802c8e0 <__ledf2+0x60>
 802c8bc:	2296b03a 	or	r11,r4,r10
 802c8c0:	5813003a 	cmpeq	r9,r11,zero
 802c8c4:	29403fcc 	andi	r5,r5,255
 802c8c8:	40000a1e 	bne	r8,zero,802c8f4 <__ledf2+0x74>
 802c8cc:	30d8b03a 	or	r12,r6,r3
 802c8d0:	6000081e 	bne	r12,zero,802c8f4 <__ledf2+0x74>
 802c8d4:	0005883a 	mov	r2,zero
 802c8d8:	5800111e 	bne	r11,zero,802c920 <__ledf2+0xa0>
 802c8dc:	f800283a 	ret
 802c8e0:	29403fcc 	andi	r5,r5,255
 802c8e4:	40000c1e 	bne	r8,zero,802c918 <__ledf2+0x98>
 802c8e8:	30d2b03a 	or	r9,r6,r3
 802c8ec:	48000c26 	beq	r9,zero,802c920 <__ledf2+0xa0>
 802c8f0:	0013883a 	mov	r9,zero
 802c8f4:	39c03fcc 	andi	r7,r7,255
 802c8f8:	48000826 	beq	r9,zero,802c91c <__ledf2+0x9c>
 802c8fc:	38001126 	beq	r7,zero,802c944 <__ledf2+0xc4>
 802c900:	00800044 	movi	r2,1
 802c904:	f800283a 	ret
 802c908:	30d2b03a 	or	r9,r6,r3
 802c90c:	483fea26 	beq	r9,zero,802c8b8 <__alt_data_end+0xfffed4b8>
 802c910:	00800084 	movi	r2,2
 802c914:	f800283a 	ret
 802c918:	39c03fcc 	andi	r7,r7,255
 802c91c:	39400726 	beq	r7,r5,802c93c <__ledf2+0xbc>
 802c920:	2800081e 	bne	r5,zero,802c944 <__ledf2+0xc4>
 802c924:	00800044 	movi	r2,1
 802c928:	f800283a 	ret
 802c92c:	2292b03a 	or	r9,r4,r10
 802c930:	483fdf26 	beq	r9,zero,802c8b0 <__alt_data_end+0xfffed4b0>
 802c934:	00800084 	movi	r2,2
 802c938:	f800283a 	ret
 802c93c:	4080030e 	bge	r8,r2,802c94c <__ledf2+0xcc>
 802c940:	383fef26 	beq	r7,zero,802c900 <__alt_data_end+0xfffed500>
 802c944:	00bfffc4 	movi	r2,-1
 802c948:	f800283a 	ret
 802c94c:	123feb16 	blt	r2,r8,802c8fc <__alt_data_end+0xfffed4fc>
 802c950:	1abff336 	bltu	r3,r10,802c920 <__alt_data_end+0xfffed520>
 802c954:	50c00326 	beq	r10,r3,802c964 <__ledf2+0xe4>
 802c958:	50c0042e 	bgeu	r10,r3,802c96c <__ledf2+0xec>
 802c95c:	283fe81e 	bne	r5,zero,802c900 <__alt_data_end+0xfffed500>
 802c960:	003ff806 	br	802c944 <__alt_data_end+0xfffed544>
 802c964:	313fee36 	bltu	r6,r4,802c920 <__alt_data_end+0xfffed520>
 802c968:	21bffc36 	bltu	r4,r6,802c95c <__alt_data_end+0xfffed55c>
 802c96c:	0005883a 	mov	r2,zero
 802c970:	f800283a 	ret

0802c974 <__muldf3>:
 802c974:	deffee04 	addi	sp,sp,-72
 802c978:	dd000c15 	stw	r20,48(sp)
 802c97c:	2828d53a 	srli	r20,r5,20
 802c980:	ddc00f15 	stw	r23,60(sp)
 802c984:	282ed7fa 	srli	r23,r5,31
 802c988:	dc000815 	stw	r16,32(sp)
 802c98c:	04000434 	movhi	r16,16
 802c990:	dcc00b15 	stw	r19,44(sp)
 802c994:	843fffc4 	addi	r16,r16,-1
 802c998:	dfc01115 	stw	ra,68(sp)
 802c99c:	df001015 	stw	fp,64(sp)
 802c9a0:	dd800e15 	stw	r22,56(sp)
 802c9a4:	dd400d15 	stw	r21,52(sp)
 802c9a8:	dc800a15 	stw	r18,40(sp)
 802c9ac:	dc400915 	stw	r17,36(sp)
 802c9b0:	a501ffcc 	andi	r20,r20,2047
 802c9b4:	2c20703a 	and	r16,r5,r16
 802c9b8:	b827883a 	mov	r19,r23
 802c9bc:	ba403fcc 	andi	r9,r23,255
 802c9c0:	a0006026 	beq	r20,zero,802cb44 <__muldf3+0x1d0>
 802c9c4:	0081ffc4 	movi	r2,2047
 802c9c8:	202d883a 	mov	r22,r4
 802c9cc:	a0803626 	beq	r20,r2,802caa8 <__muldf3+0x134>
 802c9d0:	84000434 	orhi	r16,r16,16
 802c9d4:	200ad77a 	srli	r5,r4,29
 802c9d8:	800490fa 	slli	r2,r16,3
 802c9dc:	202c90fa 	slli	r22,r4,3
 802c9e0:	a53f0044 	addi	r20,r20,-1023
 802c9e4:	28a0b03a 	or	r16,r5,r2
 802c9e8:	002b883a 	mov	r21,zero
 802c9ec:	000b883a 	mov	r5,zero
 802c9f0:	3804d53a 	srli	r2,r7,20
 802c9f4:	3838d7fa 	srli	fp,r7,31
 802c9f8:	04400434 	movhi	r17,16
 802c9fc:	8c7fffc4 	addi	r17,r17,-1
 802ca00:	1081ffcc 	andi	r2,r2,2047
 802ca04:	3025883a 	mov	r18,r6
 802ca08:	3c62703a 	and	r17,r7,r17
 802ca0c:	e2803fcc 	andi	r10,fp,255
 802ca10:	10006d26 	beq	r2,zero,802cbc8 <__muldf3+0x254>
 802ca14:	00c1ffc4 	movi	r3,2047
 802ca18:	10c06526 	beq	r2,r3,802cbb0 <__muldf3+0x23c>
 802ca1c:	8c400434 	orhi	r17,r17,16
 802ca20:	300ed77a 	srli	r7,r6,29
 802ca24:	880690fa 	slli	r3,r17,3
 802ca28:	302490fa 	slli	r18,r6,3
 802ca2c:	10bf0044 	addi	r2,r2,-1023
 802ca30:	38e2b03a 	or	r17,r7,r3
 802ca34:	000f883a 	mov	r7,zero
 802ca38:	a087883a 	add	r3,r20,r2
 802ca3c:	010003c4 	movi	r4,15
 802ca40:	3d44b03a 	or	r2,r7,r21
 802ca44:	e5ccf03a 	xor	r6,fp,r23
 802ca48:	1a000044 	addi	r8,r3,1
 802ca4c:	20809b36 	bltu	r4,r2,802ccbc <__muldf3+0x348>
 802ca50:	100490ba 	slli	r2,r2,2
 802ca54:	010200f4 	movhi	r4,2051
 802ca58:	21329a04 	addi	r4,r4,-13720
 802ca5c:	1105883a 	add	r2,r2,r4
 802ca60:	10800017 	ldw	r2,0(r2)
 802ca64:	1000683a 	jmp	r2
 802ca68:	0802ccbc 	xorhi	zero,at,2866
 802ca6c:	0802cac8 	cmpgei	zero,at,2859
 802ca70:	0802cac8 	cmpgei	zero,at,2859
 802ca74:	0802cac4 	addi	zero,at,2859
 802ca78:	0802cc98 	cmpnei	zero,at,2866
 802ca7c:	0802cc98 	cmpnei	zero,at,2866
 802ca80:	0802cc80 	call	802cc8 <__alt_mem_new_sdram_controller_0-0x37fd338>
 802ca84:	0802cac4 	addi	zero,at,2859
 802ca88:	0802cc98 	cmpnei	zero,at,2866
 802ca8c:	0802cc80 	call	802cc8 <__alt_mem_new_sdram_controller_0-0x37fd338>
 802ca90:	0802cc98 	cmpnei	zero,at,2866
 802ca94:	0802cac4 	addi	zero,at,2859
 802ca98:	0802cca8 	cmpgeui	zero,at,2866
 802ca9c:	0802cca8 	cmpgeui	zero,at,2866
 802caa0:	0802cca8 	cmpgeui	zero,at,2866
 802caa4:	0802d008 	cmpgei	zero,at,2880
 802caa8:	2404b03a 	or	r2,r4,r16
 802caac:	1000711e 	bne	r2,zero,802cc74 <__muldf3+0x300>
 802cab0:	05400204 	movi	r21,8
 802cab4:	0021883a 	mov	r16,zero
 802cab8:	002d883a 	mov	r22,zero
 802cabc:	01400084 	movi	r5,2
 802cac0:	003fcb06 	br	802c9f0 <__alt_data_end+0xfffed5f0>
 802cac4:	500d883a 	mov	r6,r10
 802cac8:	00800084 	movi	r2,2
 802cacc:	38805926 	beq	r7,r2,802cc34 <__muldf3+0x2c0>
 802cad0:	008000c4 	movi	r2,3
 802cad4:	3881bb26 	beq	r7,r2,802d1c4 <__muldf3+0x850>
 802cad8:	00800044 	movi	r2,1
 802cadc:	3881961e 	bne	r7,r2,802d138 <__muldf3+0x7c4>
 802cae0:	3027883a 	mov	r19,r6
 802cae4:	0005883a 	mov	r2,zero
 802cae8:	0021883a 	mov	r16,zero
 802caec:	002d883a 	mov	r22,zero
 802caf0:	1004953a 	slli	r2,r2,20
 802caf4:	98c03fcc 	andi	r3,r19,255
 802caf8:	04400434 	movhi	r17,16
 802cafc:	8c7fffc4 	addi	r17,r17,-1
 802cb00:	180697fa 	slli	r3,r3,31
 802cb04:	8460703a 	and	r16,r16,r17
 802cb08:	80a0b03a 	or	r16,r16,r2
 802cb0c:	80c6b03a 	or	r3,r16,r3
 802cb10:	b005883a 	mov	r2,r22
 802cb14:	dfc01117 	ldw	ra,68(sp)
 802cb18:	df001017 	ldw	fp,64(sp)
 802cb1c:	ddc00f17 	ldw	r23,60(sp)
 802cb20:	dd800e17 	ldw	r22,56(sp)
 802cb24:	dd400d17 	ldw	r21,52(sp)
 802cb28:	dd000c17 	ldw	r20,48(sp)
 802cb2c:	dcc00b17 	ldw	r19,44(sp)
 802cb30:	dc800a17 	ldw	r18,40(sp)
 802cb34:	dc400917 	ldw	r17,36(sp)
 802cb38:	dc000817 	ldw	r16,32(sp)
 802cb3c:	dec01204 	addi	sp,sp,72
 802cb40:	f800283a 	ret
 802cb44:	2404b03a 	or	r2,r4,r16
 802cb48:	202b883a 	mov	r21,r4
 802cb4c:	10004426 	beq	r2,zero,802cc60 <__muldf3+0x2ec>
 802cb50:	80015126 	beq	r16,zero,802d098 <__muldf3+0x724>
 802cb54:	8009883a 	mov	r4,r16
 802cb58:	d9800715 	stw	r6,28(sp)
 802cb5c:	d9c00215 	stw	r7,8(sp)
 802cb60:	da400415 	stw	r9,16(sp)
 802cb64:	802dce00 	call	802dce0 <__clzsi2>
 802cb68:	d9800717 	ldw	r6,28(sp)
 802cb6c:	d9c00217 	ldw	r7,8(sp)
 802cb70:	da400417 	ldw	r9,16(sp)
 802cb74:	113ffd44 	addi	r4,r2,-11
 802cb78:	00c00704 	movi	r3,28
 802cb7c:	19014216 	blt	r3,r4,802d088 <__muldf3+0x714>
 802cb80:	00c00744 	movi	r3,29
 802cb84:	15bffe04 	addi	r22,r2,-8
 802cb88:	1907c83a 	sub	r3,r3,r4
 802cb8c:	85a0983a 	sll	r16,r16,r22
 802cb90:	a8c6d83a 	srl	r3,r21,r3
 802cb94:	adac983a 	sll	r22,r21,r22
 802cb98:	1c20b03a 	or	r16,r3,r16
 802cb9c:	1080fcc4 	addi	r2,r2,1011
 802cba0:	00a9c83a 	sub	r20,zero,r2
 802cba4:	002b883a 	mov	r21,zero
 802cba8:	000b883a 	mov	r5,zero
 802cbac:	003f9006 	br	802c9f0 <__alt_data_end+0xfffed5f0>
 802cbb0:	3446b03a 	or	r3,r6,r17
 802cbb4:	1800281e 	bne	r3,zero,802cc58 <__muldf3+0x2e4>
 802cbb8:	0023883a 	mov	r17,zero
 802cbbc:	0025883a 	mov	r18,zero
 802cbc0:	01c00084 	movi	r7,2
 802cbc4:	003f9c06 	br	802ca38 <__alt_data_end+0xfffed638>
 802cbc8:	3446b03a 	or	r3,r6,r17
 802cbcc:	18001e26 	beq	r3,zero,802cc48 <__muldf3+0x2d4>
 802cbd0:	88012126 	beq	r17,zero,802d058 <__muldf3+0x6e4>
 802cbd4:	8809883a 	mov	r4,r17
 802cbd8:	d9400215 	stw	r5,8(sp)
 802cbdc:	d9800715 	stw	r6,28(sp)
 802cbe0:	da400415 	stw	r9,16(sp)
 802cbe4:	da800315 	stw	r10,12(sp)
 802cbe8:	802dce00 	call	802dce0 <__clzsi2>
 802cbec:	d9400217 	ldw	r5,8(sp)
 802cbf0:	d9800717 	ldw	r6,28(sp)
 802cbf4:	da400417 	ldw	r9,16(sp)
 802cbf8:	da800317 	ldw	r10,12(sp)
 802cbfc:	113ffd44 	addi	r4,r2,-11
 802cc00:	00c00704 	movi	r3,28
 802cc04:	19011016 	blt	r3,r4,802d048 <__muldf3+0x6d4>
 802cc08:	00c00744 	movi	r3,29
 802cc0c:	14bffe04 	addi	r18,r2,-8
 802cc10:	1907c83a 	sub	r3,r3,r4
 802cc14:	8ca2983a 	sll	r17,r17,r18
 802cc18:	30c6d83a 	srl	r3,r6,r3
 802cc1c:	34a4983a 	sll	r18,r6,r18
 802cc20:	1c62b03a 	or	r17,r3,r17
 802cc24:	1080fcc4 	addi	r2,r2,1011
 802cc28:	0085c83a 	sub	r2,zero,r2
 802cc2c:	000f883a 	mov	r7,zero
 802cc30:	003f8106 	br	802ca38 <__alt_data_end+0xfffed638>
 802cc34:	3027883a 	mov	r19,r6
 802cc38:	0081ffc4 	movi	r2,2047
 802cc3c:	0021883a 	mov	r16,zero
 802cc40:	002d883a 	mov	r22,zero
 802cc44:	003faa06 	br	802caf0 <__alt_data_end+0xfffed6f0>
 802cc48:	0023883a 	mov	r17,zero
 802cc4c:	0025883a 	mov	r18,zero
 802cc50:	01c00044 	movi	r7,1
 802cc54:	003f7806 	br	802ca38 <__alt_data_end+0xfffed638>
 802cc58:	01c000c4 	movi	r7,3
 802cc5c:	003f7606 	br	802ca38 <__alt_data_end+0xfffed638>
 802cc60:	05400104 	movi	r21,4
 802cc64:	0021883a 	mov	r16,zero
 802cc68:	002d883a 	mov	r22,zero
 802cc6c:	01400044 	movi	r5,1
 802cc70:	003f5f06 	br	802c9f0 <__alt_data_end+0xfffed5f0>
 802cc74:	05400304 	movi	r21,12
 802cc78:	014000c4 	movi	r5,3
 802cc7c:	003f5c06 	br	802c9f0 <__alt_data_end+0xfffed5f0>
 802cc80:	04000434 	movhi	r16,16
 802cc84:	0027883a 	mov	r19,zero
 802cc88:	843fffc4 	addi	r16,r16,-1
 802cc8c:	05bfffc4 	movi	r22,-1
 802cc90:	0081ffc4 	movi	r2,2047
 802cc94:	003f9606 	br	802caf0 <__alt_data_end+0xfffed6f0>
 802cc98:	8023883a 	mov	r17,r16
 802cc9c:	b025883a 	mov	r18,r22
 802cca0:	280f883a 	mov	r7,r5
 802cca4:	003f8806 	br	802cac8 <__alt_data_end+0xfffed6c8>
 802cca8:	8023883a 	mov	r17,r16
 802ccac:	b025883a 	mov	r18,r22
 802ccb0:	480d883a 	mov	r6,r9
 802ccb4:	280f883a 	mov	r7,r5
 802ccb8:	003f8306 	br	802cac8 <__alt_data_end+0xfffed6c8>
 802ccbc:	b026d43a 	srli	r19,r22,16
 802ccc0:	902ed43a 	srli	r23,r18,16
 802ccc4:	b5bfffcc 	andi	r22,r22,65535
 802ccc8:	94bfffcc 	andi	r18,r18,65535
 802cccc:	b00b883a 	mov	r5,r22
 802ccd0:	9009883a 	mov	r4,r18
 802ccd4:	d8c00515 	stw	r3,20(sp)
 802ccd8:	d9800715 	stw	r6,28(sp)
 802ccdc:	da000615 	stw	r8,24(sp)
 802cce0:	80214e80 	call	80214e8 <__mulsi3>
 802cce4:	980b883a 	mov	r5,r19
 802cce8:	9009883a 	mov	r4,r18
 802ccec:	1029883a 	mov	r20,r2
 802ccf0:	80214e80 	call	80214e8 <__mulsi3>
 802ccf4:	b80b883a 	mov	r5,r23
 802ccf8:	9809883a 	mov	r4,r19
 802ccfc:	102b883a 	mov	r21,r2
 802cd00:	80214e80 	call	80214e8 <__mulsi3>
 802cd04:	b809883a 	mov	r4,r23
 802cd08:	b00b883a 	mov	r5,r22
 802cd0c:	1039883a 	mov	fp,r2
 802cd10:	80214e80 	call	80214e8 <__mulsi3>
 802cd14:	a008d43a 	srli	r4,r20,16
 802cd18:	1545883a 	add	r2,r2,r21
 802cd1c:	d8c00517 	ldw	r3,20(sp)
 802cd20:	2085883a 	add	r2,r4,r2
 802cd24:	d9800717 	ldw	r6,28(sp)
 802cd28:	da000617 	ldw	r8,24(sp)
 802cd2c:	1540022e 	bgeu	r2,r21,802cd38 <__muldf3+0x3c4>
 802cd30:	01000074 	movhi	r4,1
 802cd34:	e139883a 	add	fp,fp,r4
 802cd38:	100e943a 	slli	r7,r2,16
 802cd3c:	1004d43a 	srli	r2,r2,16
 802cd40:	882ad43a 	srli	r21,r17,16
 802cd44:	a53fffcc 	andi	r20,r20,65535
 802cd48:	8c7fffcc 	andi	r17,r17,65535
 802cd4c:	3d29883a 	add	r20,r7,r20
 802cd50:	b00b883a 	mov	r5,r22
 802cd54:	8809883a 	mov	r4,r17
 802cd58:	d8c00515 	stw	r3,20(sp)
 802cd5c:	d9800715 	stw	r6,28(sp)
 802cd60:	da000615 	stw	r8,24(sp)
 802cd64:	dd000115 	stw	r20,4(sp)
 802cd68:	d8800015 	stw	r2,0(sp)
 802cd6c:	80214e80 	call	80214e8 <__mulsi3>
 802cd70:	980b883a 	mov	r5,r19
 802cd74:	8809883a 	mov	r4,r17
 802cd78:	d8800215 	stw	r2,8(sp)
 802cd7c:	80214e80 	call	80214e8 <__mulsi3>
 802cd80:	9809883a 	mov	r4,r19
 802cd84:	a80b883a 	mov	r5,r21
 802cd88:	1029883a 	mov	r20,r2
 802cd8c:	80214e80 	call	80214e8 <__mulsi3>
 802cd90:	b00b883a 	mov	r5,r22
 802cd94:	a809883a 	mov	r4,r21
 802cd98:	d8800415 	stw	r2,16(sp)
 802cd9c:	80214e80 	call	80214e8 <__mulsi3>
 802cda0:	d9c00217 	ldw	r7,8(sp)
 802cda4:	1505883a 	add	r2,r2,r20
 802cda8:	d8c00517 	ldw	r3,20(sp)
 802cdac:	3826d43a 	srli	r19,r7,16
 802cdb0:	d9800717 	ldw	r6,28(sp)
 802cdb4:	da000617 	ldw	r8,24(sp)
 802cdb8:	9885883a 	add	r2,r19,r2
 802cdbc:	da400417 	ldw	r9,16(sp)
 802cdc0:	1500022e 	bgeu	r2,r20,802cdcc <__muldf3+0x458>
 802cdc4:	01000074 	movhi	r4,1
 802cdc8:	4913883a 	add	r9,r9,r4
 802cdcc:	1028d43a 	srli	r20,r2,16
 802cdd0:	1004943a 	slli	r2,r2,16
 802cdd4:	802cd43a 	srli	r22,r16,16
 802cdd8:	843fffcc 	andi	r16,r16,65535
 802cddc:	3cffffcc 	andi	r19,r7,65535
 802cde0:	9009883a 	mov	r4,r18
 802cde4:	800b883a 	mov	r5,r16
 802cde8:	a269883a 	add	r20,r20,r9
 802cdec:	d8c00515 	stw	r3,20(sp)
 802cdf0:	d9800715 	stw	r6,28(sp)
 802cdf4:	da000615 	stw	r8,24(sp)
 802cdf8:	14e7883a 	add	r19,r2,r19
 802cdfc:	80214e80 	call	80214e8 <__mulsi3>
 802ce00:	9009883a 	mov	r4,r18
 802ce04:	b00b883a 	mov	r5,r22
 802ce08:	d8800315 	stw	r2,12(sp)
 802ce0c:	80214e80 	call	80214e8 <__mulsi3>
 802ce10:	b809883a 	mov	r4,r23
 802ce14:	b00b883a 	mov	r5,r22
 802ce18:	d8800215 	stw	r2,8(sp)
 802ce1c:	80214e80 	call	80214e8 <__mulsi3>
 802ce20:	b80b883a 	mov	r5,r23
 802ce24:	8009883a 	mov	r4,r16
 802ce28:	d8800415 	stw	r2,16(sp)
 802ce2c:	80214e80 	call	80214e8 <__mulsi3>
 802ce30:	da800317 	ldw	r10,12(sp)
 802ce34:	d9c00217 	ldw	r7,8(sp)
 802ce38:	d9000017 	ldw	r4,0(sp)
 802ce3c:	502ed43a 	srli	r23,r10,16
 802ce40:	11c5883a 	add	r2,r2,r7
 802ce44:	24e5883a 	add	r18,r4,r19
 802ce48:	b885883a 	add	r2,r23,r2
 802ce4c:	d8c00517 	ldw	r3,20(sp)
 802ce50:	d9800717 	ldw	r6,28(sp)
 802ce54:	da000617 	ldw	r8,24(sp)
 802ce58:	da400417 	ldw	r9,16(sp)
 802ce5c:	11c0022e 	bgeu	r2,r7,802ce68 <__muldf3+0x4f4>
 802ce60:	01000074 	movhi	r4,1
 802ce64:	4913883a 	add	r9,r9,r4
 802ce68:	100ed43a 	srli	r7,r2,16
 802ce6c:	1004943a 	slli	r2,r2,16
 802ce70:	55ffffcc 	andi	r23,r10,65535
 802ce74:	3a53883a 	add	r9,r7,r9
 802ce78:	8809883a 	mov	r4,r17
 802ce7c:	800b883a 	mov	r5,r16
 802ce80:	d8c00515 	stw	r3,20(sp)
 802ce84:	d9800715 	stw	r6,28(sp)
 802ce88:	da000615 	stw	r8,24(sp)
 802ce8c:	da400415 	stw	r9,16(sp)
 802ce90:	15ef883a 	add	r23,r2,r23
 802ce94:	80214e80 	call	80214e8 <__mulsi3>
 802ce98:	8809883a 	mov	r4,r17
 802ce9c:	b00b883a 	mov	r5,r22
 802cea0:	d8800215 	stw	r2,8(sp)
 802cea4:	80214e80 	call	80214e8 <__mulsi3>
 802cea8:	b00b883a 	mov	r5,r22
 802ceac:	a809883a 	mov	r4,r21
 802ceb0:	d8800315 	stw	r2,12(sp)
 802ceb4:	80214e80 	call	80214e8 <__mulsi3>
 802ceb8:	8009883a 	mov	r4,r16
 802cebc:	a80b883a 	mov	r5,r21
 802cec0:	1023883a 	mov	r17,r2
 802cec4:	80214e80 	call	80214e8 <__mulsi3>
 802cec8:	d9c00217 	ldw	r7,8(sp)
 802cecc:	da800317 	ldw	r10,12(sp)
 802ced0:	d8c00517 	ldw	r3,20(sp)
 802ced4:	3808d43a 	srli	r4,r7,16
 802ced8:	1285883a 	add	r2,r2,r10
 802cedc:	d9800717 	ldw	r6,28(sp)
 802cee0:	2085883a 	add	r2,r4,r2
 802cee4:	da000617 	ldw	r8,24(sp)
 802cee8:	da400417 	ldw	r9,16(sp)
 802ceec:	1280022e 	bgeu	r2,r10,802cef8 <__muldf3+0x584>
 802cef0:	01000074 	movhi	r4,1
 802cef4:	8923883a 	add	r17,r17,r4
 802cef8:	1008943a 	slli	r4,r2,16
 802cefc:	39ffffcc 	andi	r7,r7,65535
 802cf00:	e4b9883a 	add	fp,fp,r18
 802cf04:	21cf883a 	add	r7,r4,r7
 802cf08:	e4e7803a 	cmpltu	r19,fp,r19
 802cf0c:	3d0f883a 	add	r7,r7,r20
 802cf10:	bf39883a 	add	fp,r23,fp
 802cf14:	99c9883a 	add	r4,r19,r7
 802cf18:	e5ef803a 	cmpltu	r23,fp,r23
 802cf1c:	490b883a 	add	r5,r9,r4
 802cf20:	1004d43a 	srli	r2,r2,16
 802cf24:	b965883a 	add	r18,r23,r5
 802cf28:	24c9803a 	cmpltu	r4,r4,r19
 802cf2c:	3d29803a 	cmpltu	r20,r7,r20
 802cf30:	a128b03a 	or	r20,r20,r4
 802cf34:	95ef803a 	cmpltu	r23,r18,r23
 802cf38:	2a53803a 	cmpltu	r9,r5,r9
 802cf3c:	a0a9883a 	add	r20,r20,r2
 802cf40:	4deeb03a 	or	r23,r9,r23
 802cf44:	a5ef883a 	add	r23,r20,r23
 802cf48:	bc63883a 	add	r17,r23,r17
 802cf4c:	e004927a 	slli	r2,fp,9
 802cf50:	d9000117 	ldw	r4,4(sp)
 802cf54:	882e927a 	slli	r23,r17,9
 802cf58:	9022d5fa 	srli	r17,r18,23
 802cf5c:	e038d5fa 	srli	fp,fp,23
 802cf60:	1104b03a 	or	r2,r2,r4
 802cf64:	9024927a 	slli	r18,r18,9
 802cf68:	1004c03a 	cmpne	r2,r2,zero
 802cf6c:	bc62b03a 	or	r17,r23,r17
 802cf70:	1738b03a 	or	fp,r2,fp
 802cf74:	8880402c 	andhi	r2,r17,256
 802cf78:	e4a4b03a 	or	r18,fp,r18
 802cf7c:	10000726 	beq	r2,zero,802cf9c <__muldf3+0x628>
 802cf80:	9006d07a 	srli	r3,r18,1
 802cf84:	880497fa 	slli	r2,r17,31
 802cf88:	9480004c 	andi	r18,r18,1
 802cf8c:	8822d07a 	srli	r17,r17,1
 802cf90:	1ca4b03a 	or	r18,r3,r18
 802cf94:	14a4b03a 	or	r18,r2,r18
 802cf98:	4007883a 	mov	r3,r8
 802cf9c:	1880ffc4 	addi	r2,r3,1023
 802cfa0:	0080460e 	bge	zero,r2,802d0bc <__muldf3+0x748>
 802cfa4:	910001cc 	andi	r4,r18,7
 802cfa8:	20000726 	beq	r4,zero,802cfc8 <__muldf3+0x654>
 802cfac:	910003cc 	andi	r4,r18,15
 802cfb0:	01400104 	movi	r5,4
 802cfb4:	21400426 	beq	r4,r5,802cfc8 <__muldf3+0x654>
 802cfb8:	9149883a 	add	r4,r18,r5
 802cfbc:	24a5803a 	cmpltu	r18,r4,r18
 802cfc0:	8ca3883a 	add	r17,r17,r18
 802cfc4:	2025883a 	mov	r18,r4
 802cfc8:	8900402c 	andhi	r4,r17,256
 802cfcc:	20000426 	beq	r4,zero,802cfe0 <__muldf3+0x66c>
 802cfd0:	18810004 	addi	r2,r3,1024
 802cfd4:	00ffc034 	movhi	r3,65280
 802cfd8:	18ffffc4 	addi	r3,r3,-1
 802cfdc:	88e2703a 	and	r17,r17,r3
 802cfe0:	00c1ff84 	movi	r3,2046
 802cfe4:	18bf1316 	blt	r3,r2,802cc34 <__alt_data_end+0xfffed834>
 802cfe8:	882c977a 	slli	r22,r17,29
 802cfec:	9024d0fa 	srli	r18,r18,3
 802cff0:	8822927a 	slli	r17,r17,9
 802cff4:	1081ffcc 	andi	r2,r2,2047
 802cff8:	b4acb03a 	or	r22,r22,r18
 802cffc:	8820d33a 	srli	r16,r17,12
 802d000:	3027883a 	mov	r19,r6
 802d004:	003eba06 	br	802caf0 <__alt_data_end+0xfffed6f0>
 802d008:	8080022c 	andhi	r2,r16,8
 802d00c:	10000926 	beq	r2,zero,802d034 <__muldf3+0x6c0>
 802d010:	8880022c 	andhi	r2,r17,8
 802d014:	1000071e 	bne	r2,zero,802d034 <__muldf3+0x6c0>
 802d018:	00800434 	movhi	r2,16
 802d01c:	8c000234 	orhi	r16,r17,8
 802d020:	10bfffc4 	addi	r2,r2,-1
 802d024:	e027883a 	mov	r19,fp
 802d028:	80a0703a 	and	r16,r16,r2
 802d02c:	902d883a 	mov	r22,r18
 802d030:	003f1706 	br	802cc90 <__alt_data_end+0xfffed890>
 802d034:	00800434 	movhi	r2,16
 802d038:	84000234 	orhi	r16,r16,8
 802d03c:	10bfffc4 	addi	r2,r2,-1
 802d040:	80a0703a 	and	r16,r16,r2
 802d044:	003f1206 	br	802cc90 <__alt_data_end+0xfffed890>
 802d048:	147ff604 	addi	r17,r2,-40
 802d04c:	3462983a 	sll	r17,r6,r17
 802d050:	0025883a 	mov	r18,zero
 802d054:	003ef306 	br	802cc24 <__alt_data_end+0xfffed824>
 802d058:	3009883a 	mov	r4,r6
 802d05c:	d9400215 	stw	r5,8(sp)
 802d060:	d9800715 	stw	r6,28(sp)
 802d064:	da400415 	stw	r9,16(sp)
 802d068:	da800315 	stw	r10,12(sp)
 802d06c:	802dce00 	call	802dce0 <__clzsi2>
 802d070:	10800804 	addi	r2,r2,32
 802d074:	da800317 	ldw	r10,12(sp)
 802d078:	da400417 	ldw	r9,16(sp)
 802d07c:	d9800717 	ldw	r6,28(sp)
 802d080:	d9400217 	ldw	r5,8(sp)
 802d084:	003edd06 	br	802cbfc <__alt_data_end+0xfffed7fc>
 802d088:	143ff604 	addi	r16,r2,-40
 802d08c:	ac20983a 	sll	r16,r21,r16
 802d090:	002d883a 	mov	r22,zero
 802d094:	003ec106 	br	802cb9c <__alt_data_end+0xfffed79c>
 802d098:	d9800715 	stw	r6,28(sp)
 802d09c:	d9c00215 	stw	r7,8(sp)
 802d0a0:	da400415 	stw	r9,16(sp)
 802d0a4:	802dce00 	call	802dce0 <__clzsi2>
 802d0a8:	10800804 	addi	r2,r2,32
 802d0ac:	da400417 	ldw	r9,16(sp)
 802d0b0:	d9c00217 	ldw	r7,8(sp)
 802d0b4:	d9800717 	ldw	r6,28(sp)
 802d0b8:	003eae06 	br	802cb74 <__alt_data_end+0xfffed774>
 802d0bc:	00c00044 	movi	r3,1
 802d0c0:	1887c83a 	sub	r3,r3,r2
 802d0c4:	01000e04 	movi	r4,56
 802d0c8:	20fe8516 	blt	r4,r3,802cae0 <__alt_data_end+0xfffed6e0>
 802d0cc:	010007c4 	movi	r4,31
 802d0d0:	20c01b16 	blt	r4,r3,802d140 <__muldf3+0x7cc>
 802d0d4:	00800804 	movi	r2,32
 802d0d8:	10c5c83a 	sub	r2,r2,r3
 802d0dc:	888a983a 	sll	r5,r17,r2
 802d0e0:	90c8d83a 	srl	r4,r18,r3
 802d0e4:	9084983a 	sll	r2,r18,r2
 802d0e8:	88e2d83a 	srl	r17,r17,r3
 802d0ec:	2906b03a 	or	r3,r5,r4
 802d0f0:	1004c03a 	cmpne	r2,r2,zero
 802d0f4:	1886b03a 	or	r3,r3,r2
 802d0f8:	188001cc 	andi	r2,r3,7
 802d0fc:	10000726 	beq	r2,zero,802d11c <__muldf3+0x7a8>
 802d100:	188003cc 	andi	r2,r3,15
 802d104:	01000104 	movi	r4,4
 802d108:	11000426 	beq	r2,r4,802d11c <__muldf3+0x7a8>
 802d10c:	1805883a 	mov	r2,r3
 802d110:	10c00104 	addi	r3,r2,4
 802d114:	1885803a 	cmpltu	r2,r3,r2
 802d118:	88a3883a 	add	r17,r17,r2
 802d11c:	8880202c 	andhi	r2,r17,128
 802d120:	10001c26 	beq	r2,zero,802d194 <__muldf3+0x820>
 802d124:	3027883a 	mov	r19,r6
 802d128:	00800044 	movi	r2,1
 802d12c:	0021883a 	mov	r16,zero
 802d130:	002d883a 	mov	r22,zero
 802d134:	003e6e06 	br	802caf0 <__alt_data_end+0xfffed6f0>
 802d138:	4007883a 	mov	r3,r8
 802d13c:	003f9706 	br	802cf9c <__alt_data_end+0xfffedb9c>
 802d140:	017ff844 	movi	r5,-31
 802d144:	2885c83a 	sub	r2,r5,r2
 802d148:	888ad83a 	srl	r5,r17,r2
 802d14c:	00800804 	movi	r2,32
 802d150:	18801a26 	beq	r3,r2,802d1bc <__muldf3+0x848>
 802d154:	01001004 	movi	r4,64
 802d158:	20c7c83a 	sub	r3,r4,r3
 802d15c:	88e2983a 	sll	r17,r17,r3
 802d160:	8ca4b03a 	or	r18,r17,r18
 802d164:	9004c03a 	cmpne	r2,r18,zero
 802d168:	2884b03a 	or	r2,r5,r2
 802d16c:	144001cc 	andi	r17,r2,7
 802d170:	88000d1e 	bne	r17,zero,802d1a8 <__muldf3+0x834>
 802d174:	0021883a 	mov	r16,zero
 802d178:	102cd0fa 	srli	r22,r2,3
 802d17c:	3027883a 	mov	r19,r6
 802d180:	0005883a 	mov	r2,zero
 802d184:	b46cb03a 	or	r22,r22,r17
 802d188:	003e5906 	br	802caf0 <__alt_data_end+0xfffed6f0>
 802d18c:	1007883a 	mov	r3,r2
 802d190:	0023883a 	mov	r17,zero
 802d194:	8820927a 	slli	r16,r17,9
 802d198:	1805883a 	mov	r2,r3
 802d19c:	8822977a 	slli	r17,r17,29
 802d1a0:	8020d33a 	srli	r16,r16,12
 802d1a4:	003ff406 	br	802d178 <__alt_data_end+0xfffedd78>
 802d1a8:	10c003cc 	andi	r3,r2,15
 802d1ac:	01000104 	movi	r4,4
 802d1b0:	193ff626 	beq	r3,r4,802d18c <__alt_data_end+0xfffedd8c>
 802d1b4:	0023883a 	mov	r17,zero
 802d1b8:	003fd506 	br	802d110 <__alt_data_end+0xfffedd10>
 802d1bc:	0023883a 	mov	r17,zero
 802d1c0:	003fe706 	br	802d160 <__alt_data_end+0xfffedd60>
 802d1c4:	00800434 	movhi	r2,16
 802d1c8:	8c000234 	orhi	r16,r17,8
 802d1cc:	10bfffc4 	addi	r2,r2,-1
 802d1d0:	3027883a 	mov	r19,r6
 802d1d4:	80a0703a 	and	r16,r16,r2
 802d1d8:	902d883a 	mov	r22,r18
 802d1dc:	003eac06 	br	802cc90 <__alt_data_end+0xfffed890>

0802d1e0 <__subdf3>:
 802d1e0:	02000434 	movhi	r8,16
 802d1e4:	423fffc4 	addi	r8,r8,-1
 802d1e8:	defffb04 	addi	sp,sp,-20
 802d1ec:	2a14703a 	and	r10,r5,r8
 802d1f0:	3812d53a 	srli	r9,r7,20
 802d1f4:	3a10703a 	and	r8,r7,r8
 802d1f8:	2006d77a 	srli	r3,r4,29
 802d1fc:	3004d77a 	srli	r2,r6,29
 802d200:	dc000015 	stw	r16,0(sp)
 802d204:	501490fa 	slli	r10,r10,3
 802d208:	2820d53a 	srli	r16,r5,20
 802d20c:	401090fa 	slli	r8,r8,3
 802d210:	dc800215 	stw	r18,8(sp)
 802d214:	dc400115 	stw	r17,4(sp)
 802d218:	dfc00415 	stw	ra,16(sp)
 802d21c:	202290fa 	slli	r17,r4,3
 802d220:	dcc00315 	stw	r19,12(sp)
 802d224:	4a41ffcc 	andi	r9,r9,2047
 802d228:	0101ffc4 	movi	r4,2047
 802d22c:	2824d7fa 	srli	r18,r5,31
 802d230:	8401ffcc 	andi	r16,r16,2047
 802d234:	50c6b03a 	or	r3,r10,r3
 802d238:	380ed7fa 	srli	r7,r7,31
 802d23c:	408ab03a 	or	r5,r8,r2
 802d240:	300c90fa 	slli	r6,r6,3
 802d244:	49009626 	beq	r9,r4,802d4a0 <__subdf3+0x2c0>
 802d248:	39c0005c 	xori	r7,r7,1
 802d24c:	8245c83a 	sub	r2,r16,r9
 802d250:	3c807426 	beq	r7,r18,802d424 <__subdf3+0x244>
 802d254:	0080af0e 	bge	zero,r2,802d514 <__subdf3+0x334>
 802d258:	48002a1e 	bne	r9,zero,802d304 <__subdf3+0x124>
 802d25c:	2988b03a 	or	r4,r5,r6
 802d260:	20009a1e 	bne	r4,zero,802d4cc <__subdf3+0x2ec>
 802d264:	888001cc 	andi	r2,r17,7
 802d268:	10000726 	beq	r2,zero,802d288 <__subdf3+0xa8>
 802d26c:	888003cc 	andi	r2,r17,15
 802d270:	01000104 	movi	r4,4
 802d274:	11000426 	beq	r2,r4,802d288 <__subdf3+0xa8>
 802d278:	890b883a 	add	r5,r17,r4
 802d27c:	2c63803a 	cmpltu	r17,r5,r17
 802d280:	1c47883a 	add	r3,r3,r17
 802d284:	2823883a 	mov	r17,r5
 802d288:	1880202c 	andhi	r2,r3,128
 802d28c:	10005926 	beq	r2,zero,802d3f4 <__subdf3+0x214>
 802d290:	84000044 	addi	r16,r16,1
 802d294:	0081ffc4 	movi	r2,2047
 802d298:	8080be26 	beq	r16,r2,802d594 <__subdf3+0x3b4>
 802d29c:	017fe034 	movhi	r5,65408
 802d2a0:	297fffc4 	addi	r5,r5,-1
 802d2a4:	1946703a 	and	r3,r3,r5
 802d2a8:	1804977a 	slli	r2,r3,29
 802d2ac:	1806927a 	slli	r3,r3,9
 802d2b0:	8822d0fa 	srli	r17,r17,3
 802d2b4:	8401ffcc 	andi	r16,r16,2047
 802d2b8:	180ad33a 	srli	r5,r3,12
 802d2bc:	9100004c 	andi	r4,r18,1
 802d2c0:	1444b03a 	or	r2,r2,r17
 802d2c4:	80c1ffcc 	andi	r3,r16,2047
 802d2c8:	1820953a 	slli	r16,r3,20
 802d2cc:	20c03fcc 	andi	r3,r4,255
 802d2d0:	180897fa 	slli	r4,r3,31
 802d2d4:	00c00434 	movhi	r3,16
 802d2d8:	18ffffc4 	addi	r3,r3,-1
 802d2dc:	28c6703a 	and	r3,r5,r3
 802d2e0:	1c06b03a 	or	r3,r3,r16
 802d2e4:	1906b03a 	or	r3,r3,r4
 802d2e8:	dfc00417 	ldw	ra,16(sp)
 802d2ec:	dcc00317 	ldw	r19,12(sp)
 802d2f0:	dc800217 	ldw	r18,8(sp)
 802d2f4:	dc400117 	ldw	r17,4(sp)
 802d2f8:	dc000017 	ldw	r16,0(sp)
 802d2fc:	dec00504 	addi	sp,sp,20
 802d300:	f800283a 	ret
 802d304:	0101ffc4 	movi	r4,2047
 802d308:	813fd626 	beq	r16,r4,802d264 <__alt_data_end+0xfffede64>
 802d30c:	29402034 	orhi	r5,r5,128
 802d310:	01000e04 	movi	r4,56
 802d314:	2080a316 	blt	r4,r2,802d5a4 <__subdf3+0x3c4>
 802d318:	010007c4 	movi	r4,31
 802d31c:	2080c616 	blt	r4,r2,802d638 <__subdf3+0x458>
 802d320:	01000804 	movi	r4,32
 802d324:	2089c83a 	sub	r4,r4,r2
 802d328:	2910983a 	sll	r8,r5,r4
 802d32c:	308ed83a 	srl	r7,r6,r2
 802d330:	3108983a 	sll	r4,r6,r4
 802d334:	2884d83a 	srl	r2,r5,r2
 802d338:	41ccb03a 	or	r6,r8,r7
 802d33c:	2008c03a 	cmpne	r4,r4,zero
 802d340:	310cb03a 	or	r6,r6,r4
 802d344:	898dc83a 	sub	r6,r17,r6
 802d348:	89a3803a 	cmpltu	r17,r17,r6
 802d34c:	1887c83a 	sub	r3,r3,r2
 802d350:	1c47c83a 	sub	r3,r3,r17
 802d354:	3023883a 	mov	r17,r6
 802d358:	1880202c 	andhi	r2,r3,128
 802d35c:	10002326 	beq	r2,zero,802d3ec <__subdf3+0x20c>
 802d360:	04c02034 	movhi	r19,128
 802d364:	9cffffc4 	addi	r19,r19,-1
 802d368:	1ce6703a 	and	r19,r3,r19
 802d36c:	98007a26 	beq	r19,zero,802d558 <__subdf3+0x378>
 802d370:	9809883a 	mov	r4,r19
 802d374:	802dce00 	call	802dce0 <__clzsi2>
 802d378:	113ffe04 	addi	r4,r2,-8
 802d37c:	00c007c4 	movi	r3,31
 802d380:	19007b16 	blt	r3,r4,802d570 <__subdf3+0x390>
 802d384:	00800804 	movi	r2,32
 802d388:	1105c83a 	sub	r2,r2,r4
 802d38c:	8884d83a 	srl	r2,r17,r2
 802d390:	9906983a 	sll	r3,r19,r4
 802d394:	8922983a 	sll	r17,r17,r4
 802d398:	10c4b03a 	or	r2,r2,r3
 802d39c:	24007816 	blt	r4,r16,802d580 <__subdf3+0x3a0>
 802d3a0:	2421c83a 	sub	r16,r4,r16
 802d3a4:	80c00044 	addi	r3,r16,1
 802d3a8:	010007c4 	movi	r4,31
 802d3ac:	20c09516 	blt	r4,r3,802d604 <__subdf3+0x424>
 802d3b0:	01400804 	movi	r5,32
 802d3b4:	28cbc83a 	sub	r5,r5,r3
 802d3b8:	88c8d83a 	srl	r4,r17,r3
 802d3bc:	8962983a 	sll	r17,r17,r5
 802d3c0:	114a983a 	sll	r5,r2,r5
 802d3c4:	10c6d83a 	srl	r3,r2,r3
 802d3c8:	8804c03a 	cmpne	r2,r17,zero
 802d3cc:	290ab03a 	or	r5,r5,r4
 802d3d0:	28a2b03a 	or	r17,r5,r2
 802d3d4:	0021883a 	mov	r16,zero
 802d3d8:	003fa206 	br	802d264 <__alt_data_end+0xfffede64>
 802d3dc:	2090b03a 	or	r8,r4,r2
 802d3e0:	40018e26 	beq	r8,zero,802da1c <__subdf3+0x83c>
 802d3e4:	1007883a 	mov	r3,r2
 802d3e8:	2023883a 	mov	r17,r4
 802d3ec:	888001cc 	andi	r2,r17,7
 802d3f0:	103f9e1e 	bne	r2,zero,802d26c <__alt_data_end+0xfffede6c>
 802d3f4:	1804977a 	slli	r2,r3,29
 802d3f8:	8822d0fa 	srli	r17,r17,3
 802d3fc:	1810d0fa 	srli	r8,r3,3
 802d400:	9100004c 	andi	r4,r18,1
 802d404:	1444b03a 	or	r2,r2,r17
 802d408:	00c1ffc4 	movi	r3,2047
 802d40c:	80c02826 	beq	r16,r3,802d4b0 <__subdf3+0x2d0>
 802d410:	01400434 	movhi	r5,16
 802d414:	297fffc4 	addi	r5,r5,-1
 802d418:	80e0703a 	and	r16,r16,r3
 802d41c:	414a703a 	and	r5,r8,r5
 802d420:	003fa806 	br	802d2c4 <__alt_data_end+0xfffedec4>
 802d424:	0080630e 	bge	zero,r2,802d5b4 <__subdf3+0x3d4>
 802d428:	48003026 	beq	r9,zero,802d4ec <__subdf3+0x30c>
 802d42c:	0101ffc4 	movi	r4,2047
 802d430:	813f8c26 	beq	r16,r4,802d264 <__alt_data_end+0xfffede64>
 802d434:	29402034 	orhi	r5,r5,128
 802d438:	01000e04 	movi	r4,56
 802d43c:	2080a90e 	bge	r4,r2,802d6e4 <__subdf3+0x504>
 802d440:	298cb03a 	or	r6,r5,r6
 802d444:	3012c03a 	cmpne	r9,r6,zero
 802d448:	0005883a 	mov	r2,zero
 802d44c:	4c53883a 	add	r9,r9,r17
 802d450:	4c63803a 	cmpltu	r17,r9,r17
 802d454:	10c7883a 	add	r3,r2,r3
 802d458:	88c7883a 	add	r3,r17,r3
 802d45c:	4823883a 	mov	r17,r9
 802d460:	1880202c 	andhi	r2,r3,128
 802d464:	1000d026 	beq	r2,zero,802d7a8 <__subdf3+0x5c8>
 802d468:	84000044 	addi	r16,r16,1
 802d46c:	0081ffc4 	movi	r2,2047
 802d470:	8080fe26 	beq	r16,r2,802d86c <__subdf3+0x68c>
 802d474:	00bfe034 	movhi	r2,65408
 802d478:	10bfffc4 	addi	r2,r2,-1
 802d47c:	1886703a 	and	r3,r3,r2
 802d480:	880ad07a 	srli	r5,r17,1
 802d484:	180497fa 	slli	r2,r3,31
 802d488:	8900004c 	andi	r4,r17,1
 802d48c:	2922b03a 	or	r17,r5,r4
 802d490:	1806d07a 	srli	r3,r3,1
 802d494:	1462b03a 	or	r17,r2,r17
 802d498:	3825883a 	mov	r18,r7
 802d49c:	003f7106 	br	802d264 <__alt_data_end+0xfffede64>
 802d4a0:	2984b03a 	or	r2,r5,r6
 802d4a4:	103f6826 	beq	r2,zero,802d248 <__alt_data_end+0xfffede48>
 802d4a8:	39c03fcc 	andi	r7,r7,255
 802d4ac:	003f6706 	br	802d24c <__alt_data_end+0xfffede4c>
 802d4b0:	4086b03a 	or	r3,r8,r2
 802d4b4:	18015226 	beq	r3,zero,802da00 <__subdf3+0x820>
 802d4b8:	00c00434 	movhi	r3,16
 802d4bc:	41400234 	orhi	r5,r8,8
 802d4c0:	18ffffc4 	addi	r3,r3,-1
 802d4c4:	28ca703a 	and	r5,r5,r3
 802d4c8:	003f7e06 	br	802d2c4 <__alt_data_end+0xfffedec4>
 802d4cc:	10bfffc4 	addi	r2,r2,-1
 802d4d0:	1000491e 	bne	r2,zero,802d5f8 <__subdf3+0x418>
 802d4d4:	898fc83a 	sub	r7,r17,r6
 802d4d8:	89e3803a 	cmpltu	r17,r17,r7
 802d4dc:	1947c83a 	sub	r3,r3,r5
 802d4e0:	1c47c83a 	sub	r3,r3,r17
 802d4e4:	3823883a 	mov	r17,r7
 802d4e8:	003f9b06 	br	802d358 <__alt_data_end+0xfffedf58>
 802d4ec:	2988b03a 	or	r4,r5,r6
 802d4f0:	203f5c26 	beq	r4,zero,802d264 <__alt_data_end+0xfffede64>
 802d4f4:	10bfffc4 	addi	r2,r2,-1
 802d4f8:	1000931e 	bne	r2,zero,802d748 <__subdf3+0x568>
 802d4fc:	898d883a 	add	r6,r17,r6
 802d500:	3463803a 	cmpltu	r17,r6,r17
 802d504:	1947883a 	add	r3,r3,r5
 802d508:	88c7883a 	add	r3,r17,r3
 802d50c:	3023883a 	mov	r17,r6
 802d510:	003fd306 	br	802d460 <__alt_data_end+0xfffee060>
 802d514:	1000541e 	bne	r2,zero,802d668 <__subdf3+0x488>
 802d518:	80800044 	addi	r2,r16,1
 802d51c:	1081ffcc 	andi	r2,r2,2047
 802d520:	01000044 	movi	r4,1
 802d524:	2080a20e 	bge	r4,r2,802d7b0 <__subdf3+0x5d0>
 802d528:	8989c83a 	sub	r4,r17,r6
 802d52c:	8905803a 	cmpltu	r2,r17,r4
 802d530:	1967c83a 	sub	r19,r3,r5
 802d534:	98a7c83a 	sub	r19,r19,r2
 802d538:	9880202c 	andhi	r2,r19,128
 802d53c:	10006326 	beq	r2,zero,802d6cc <__subdf3+0x4ec>
 802d540:	3463c83a 	sub	r17,r6,r17
 802d544:	28c7c83a 	sub	r3,r5,r3
 802d548:	344d803a 	cmpltu	r6,r6,r17
 802d54c:	19a7c83a 	sub	r19,r3,r6
 802d550:	3825883a 	mov	r18,r7
 802d554:	983f861e 	bne	r19,zero,802d370 <__alt_data_end+0xfffedf70>
 802d558:	8809883a 	mov	r4,r17
 802d55c:	802dce00 	call	802dce0 <__clzsi2>
 802d560:	10800804 	addi	r2,r2,32
 802d564:	113ffe04 	addi	r4,r2,-8
 802d568:	00c007c4 	movi	r3,31
 802d56c:	193f850e 	bge	r3,r4,802d384 <__alt_data_end+0xfffedf84>
 802d570:	10bff604 	addi	r2,r2,-40
 802d574:	8884983a 	sll	r2,r17,r2
 802d578:	0023883a 	mov	r17,zero
 802d57c:	243f880e 	bge	r4,r16,802d3a0 <__alt_data_end+0xfffedfa0>
 802d580:	00ffe034 	movhi	r3,65408
 802d584:	18ffffc4 	addi	r3,r3,-1
 802d588:	8121c83a 	sub	r16,r16,r4
 802d58c:	10c6703a 	and	r3,r2,r3
 802d590:	003f3406 	br	802d264 <__alt_data_end+0xfffede64>
 802d594:	9100004c 	andi	r4,r18,1
 802d598:	000b883a 	mov	r5,zero
 802d59c:	0005883a 	mov	r2,zero
 802d5a0:	003f4806 	br	802d2c4 <__alt_data_end+0xfffedec4>
 802d5a4:	298cb03a 	or	r6,r5,r6
 802d5a8:	300cc03a 	cmpne	r6,r6,zero
 802d5ac:	0005883a 	mov	r2,zero
 802d5b0:	003f6406 	br	802d344 <__alt_data_end+0xfffedf44>
 802d5b4:	10009a1e 	bne	r2,zero,802d820 <__subdf3+0x640>
 802d5b8:	82400044 	addi	r9,r16,1
 802d5bc:	4881ffcc 	andi	r2,r9,2047
 802d5c0:	02800044 	movi	r10,1
 802d5c4:	5080670e 	bge	r10,r2,802d764 <__subdf3+0x584>
 802d5c8:	0081ffc4 	movi	r2,2047
 802d5cc:	4880af26 	beq	r9,r2,802d88c <__subdf3+0x6ac>
 802d5d0:	898d883a 	add	r6,r17,r6
 802d5d4:	1945883a 	add	r2,r3,r5
 802d5d8:	3447803a 	cmpltu	r3,r6,r17
 802d5dc:	1887883a 	add	r3,r3,r2
 802d5e0:	182297fa 	slli	r17,r3,31
 802d5e4:	300cd07a 	srli	r6,r6,1
 802d5e8:	1806d07a 	srli	r3,r3,1
 802d5ec:	4821883a 	mov	r16,r9
 802d5f0:	89a2b03a 	or	r17,r17,r6
 802d5f4:	003f1b06 	br	802d264 <__alt_data_end+0xfffede64>
 802d5f8:	0101ffc4 	movi	r4,2047
 802d5fc:	813f441e 	bne	r16,r4,802d310 <__alt_data_end+0xfffedf10>
 802d600:	003f1806 	br	802d264 <__alt_data_end+0xfffede64>
 802d604:	843ff844 	addi	r16,r16,-31
 802d608:	01400804 	movi	r5,32
 802d60c:	1408d83a 	srl	r4,r2,r16
 802d610:	19405026 	beq	r3,r5,802d754 <__subdf3+0x574>
 802d614:	01401004 	movi	r5,64
 802d618:	28c7c83a 	sub	r3,r5,r3
 802d61c:	10c4983a 	sll	r2,r2,r3
 802d620:	88a2b03a 	or	r17,r17,r2
 802d624:	8822c03a 	cmpne	r17,r17,zero
 802d628:	2462b03a 	or	r17,r4,r17
 802d62c:	0007883a 	mov	r3,zero
 802d630:	0021883a 	mov	r16,zero
 802d634:	003f6d06 	br	802d3ec <__alt_data_end+0xfffedfec>
 802d638:	11fff804 	addi	r7,r2,-32
 802d63c:	01000804 	movi	r4,32
 802d640:	29ced83a 	srl	r7,r5,r7
 802d644:	11004526 	beq	r2,r4,802d75c <__subdf3+0x57c>
 802d648:	01001004 	movi	r4,64
 802d64c:	2089c83a 	sub	r4,r4,r2
 802d650:	2904983a 	sll	r2,r5,r4
 802d654:	118cb03a 	or	r6,r2,r6
 802d658:	300cc03a 	cmpne	r6,r6,zero
 802d65c:	398cb03a 	or	r6,r7,r6
 802d660:	0005883a 	mov	r2,zero
 802d664:	003f3706 	br	802d344 <__alt_data_end+0xfffedf44>
 802d668:	80002a26 	beq	r16,zero,802d714 <__subdf3+0x534>
 802d66c:	0101ffc4 	movi	r4,2047
 802d670:	49006626 	beq	r9,r4,802d80c <__subdf3+0x62c>
 802d674:	0085c83a 	sub	r2,zero,r2
 802d678:	18c02034 	orhi	r3,r3,128
 802d67c:	01000e04 	movi	r4,56
 802d680:	20807e16 	blt	r4,r2,802d87c <__subdf3+0x69c>
 802d684:	010007c4 	movi	r4,31
 802d688:	2080e716 	blt	r4,r2,802da28 <__subdf3+0x848>
 802d68c:	01000804 	movi	r4,32
 802d690:	2089c83a 	sub	r4,r4,r2
 802d694:	1914983a 	sll	r10,r3,r4
 802d698:	8890d83a 	srl	r8,r17,r2
 802d69c:	8908983a 	sll	r4,r17,r4
 802d6a0:	1884d83a 	srl	r2,r3,r2
 802d6a4:	5222b03a 	or	r17,r10,r8
 802d6a8:	2006c03a 	cmpne	r3,r4,zero
 802d6ac:	88e2b03a 	or	r17,r17,r3
 802d6b0:	3463c83a 	sub	r17,r6,r17
 802d6b4:	2885c83a 	sub	r2,r5,r2
 802d6b8:	344d803a 	cmpltu	r6,r6,r17
 802d6bc:	1187c83a 	sub	r3,r2,r6
 802d6c0:	4821883a 	mov	r16,r9
 802d6c4:	3825883a 	mov	r18,r7
 802d6c8:	003f2306 	br	802d358 <__alt_data_end+0xfffedf58>
 802d6cc:	24d0b03a 	or	r8,r4,r19
 802d6d0:	40001b1e 	bne	r8,zero,802d740 <__subdf3+0x560>
 802d6d4:	0005883a 	mov	r2,zero
 802d6d8:	0009883a 	mov	r4,zero
 802d6dc:	0021883a 	mov	r16,zero
 802d6e0:	003f4906 	br	802d408 <__alt_data_end+0xfffee008>
 802d6e4:	010007c4 	movi	r4,31
 802d6e8:	20803a16 	blt	r4,r2,802d7d4 <__subdf3+0x5f4>
 802d6ec:	01000804 	movi	r4,32
 802d6f0:	2089c83a 	sub	r4,r4,r2
 802d6f4:	2912983a 	sll	r9,r5,r4
 802d6f8:	3090d83a 	srl	r8,r6,r2
 802d6fc:	3108983a 	sll	r4,r6,r4
 802d700:	2884d83a 	srl	r2,r5,r2
 802d704:	4a12b03a 	or	r9,r9,r8
 802d708:	2008c03a 	cmpne	r4,r4,zero
 802d70c:	4912b03a 	or	r9,r9,r4
 802d710:	003f4e06 	br	802d44c <__alt_data_end+0xfffee04c>
 802d714:	1c48b03a 	or	r4,r3,r17
 802d718:	20003c26 	beq	r4,zero,802d80c <__subdf3+0x62c>
 802d71c:	0084303a 	nor	r2,zero,r2
 802d720:	1000381e 	bne	r2,zero,802d804 <__subdf3+0x624>
 802d724:	3463c83a 	sub	r17,r6,r17
 802d728:	28c5c83a 	sub	r2,r5,r3
 802d72c:	344d803a 	cmpltu	r6,r6,r17
 802d730:	1187c83a 	sub	r3,r2,r6
 802d734:	4821883a 	mov	r16,r9
 802d738:	3825883a 	mov	r18,r7
 802d73c:	003f0606 	br	802d358 <__alt_data_end+0xfffedf58>
 802d740:	2023883a 	mov	r17,r4
 802d744:	003f0906 	br	802d36c <__alt_data_end+0xfffedf6c>
 802d748:	0101ffc4 	movi	r4,2047
 802d74c:	813f3a1e 	bne	r16,r4,802d438 <__alt_data_end+0xfffee038>
 802d750:	003ec406 	br	802d264 <__alt_data_end+0xfffede64>
 802d754:	0005883a 	mov	r2,zero
 802d758:	003fb106 	br	802d620 <__alt_data_end+0xfffee220>
 802d75c:	0005883a 	mov	r2,zero
 802d760:	003fbc06 	br	802d654 <__alt_data_end+0xfffee254>
 802d764:	1c44b03a 	or	r2,r3,r17
 802d768:	80008e1e 	bne	r16,zero,802d9a4 <__subdf3+0x7c4>
 802d76c:	1000c826 	beq	r2,zero,802da90 <__subdf3+0x8b0>
 802d770:	2984b03a 	or	r2,r5,r6
 802d774:	103ebb26 	beq	r2,zero,802d264 <__alt_data_end+0xfffede64>
 802d778:	8989883a 	add	r4,r17,r6
 802d77c:	1945883a 	add	r2,r3,r5
 802d780:	2447803a 	cmpltu	r3,r4,r17
 802d784:	1887883a 	add	r3,r3,r2
 802d788:	1880202c 	andhi	r2,r3,128
 802d78c:	2023883a 	mov	r17,r4
 802d790:	103f1626 	beq	r2,zero,802d3ec <__alt_data_end+0xfffedfec>
 802d794:	00bfe034 	movhi	r2,65408
 802d798:	10bfffc4 	addi	r2,r2,-1
 802d79c:	5021883a 	mov	r16,r10
 802d7a0:	1886703a 	and	r3,r3,r2
 802d7a4:	003eaf06 	br	802d264 <__alt_data_end+0xfffede64>
 802d7a8:	3825883a 	mov	r18,r7
 802d7ac:	003f0f06 	br	802d3ec <__alt_data_end+0xfffedfec>
 802d7b0:	1c44b03a 	or	r2,r3,r17
 802d7b4:	8000251e 	bne	r16,zero,802d84c <__subdf3+0x66c>
 802d7b8:	1000661e 	bne	r2,zero,802d954 <__subdf3+0x774>
 802d7bc:	2990b03a 	or	r8,r5,r6
 802d7c0:	40009626 	beq	r8,zero,802da1c <__subdf3+0x83c>
 802d7c4:	2807883a 	mov	r3,r5
 802d7c8:	3023883a 	mov	r17,r6
 802d7cc:	3825883a 	mov	r18,r7
 802d7d0:	003ea406 	br	802d264 <__alt_data_end+0xfffede64>
 802d7d4:	127ff804 	addi	r9,r2,-32
 802d7d8:	01000804 	movi	r4,32
 802d7dc:	2a52d83a 	srl	r9,r5,r9
 802d7e0:	11008c26 	beq	r2,r4,802da14 <__subdf3+0x834>
 802d7e4:	01001004 	movi	r4,64
 802d7e8:	2085c83a 	sub	r2,r4,r2
 802d7ec:	2884983a 	sll	r2,r5,r2
 802d7f0:	118cb03a 	or	r6,r2,r6
 802d7f4:	300cc03a 	cmpne	r6,r6,zero
 802d7f8:	4992b03a 	or	r9,r9,r6
 802d7fc:	0005883a 	mov	r2,zero
 802d800:	003f1206 	br	802d44c <__alt_data_end+0xfffee04c>
 802d804:	0101ffc4 	movi	r4,2047
 802d808:	493f9c1e 	bne	r9,r4,802d67c <__alt_data_end+0xfffee27c>
 802d80c:	2807883a 	mov	r3,r5
 802d810:	3023883a 	mov	r17,r6
 802d814:	4821883a 	mov	r16,r9
 802d818:	3825883a 	mov	r18,r7
 802d81c:	003e9106 	br	802d264 <__alt_data_end+0xfffede64>
 802d820:	80001f1e 	bne	r16,zero,802d8a0 <__subdf3+0x6c0>
 802d824:	1c48b03a 	or	r4,r3,r17
 802d828:	20005a26 	beq	r4,zero,802d994 <__subdf3+0x7b4>
 802d82c:	0084303a 	nor	r2,zero,r2
 802d830:	1000561e 	bne	r2,zero,802d98c <__subdf3+0x7ac>
 802d834:	89a3883a 	add	r17,r17,r6
 802d838:	1945883a 	add	r2,r3,r5
 802d83c:	898d803a 	cmpltu	r6,r17,r6
 802d840:	3087883a 	add	r3,r6,r2
 802d844:	4821883a 	mov	r16,r9
 802d848:	003f0506 	br	802d460 <__alt_data_end+0xfffee060>
 802d84c:	10002b1e 	bne	r2,zero,802d8fc <__subdf3+0x71c>
 802d850:	2984b03a 	or	r2,r5,r6
 802d854:	10008026 	beq	r2,zero,802da58 <__subdf3+0x878>
 802d858:	2807883a 	mov	r3,r5
 802d85c:	3023883a 	mov	r17,r6
 802d860:	3825883a 	mov	r18,r7
 802d864:	0401ffc4 	movi	r16,2047
 802d868:	003e7e06 	br	802d264 <__alt_data_end+0xfffede64>
 802d86c:	3809883a 	mov	r4,r7
 802d870:	0011883a 	mov	r8,zero
 802d874:	0005883a 	mov	r2,zero
 802d878:	003ee306 	br	802d408 <__alt_data_end+0xfffee008>
 802d87c:	1c62b03a 	or	r17,r3,r17
 802d880:	8822c03a 	cmpne	r17,r17,zero
 802d884:	0005883a 	mov	r2,zero
 802d888:	003f8906 	br	802d6b0 <__alt_data_end+0xfffee2b0>
 802d88c:	3809883a 	mov	r4,r7
 802d890:	4821883a 	mov	r16,r9
 802d894:	0011883a 	mov	r8,zero
 802d898:	0005883a 	mov	r2,zero
 802d89c:	003eda06 	br	802d408 <__alt_data_end+0xfffee008>
 802d8a0:	0101ffc4 	movi	r4,2047
 802d8a4:	49003b26 	beq	r9,r4,802d994 <__subdf3+0x7b4>
 802d8a8:	0085c83a 	sub	r2,zero,r2
 802d8ac:	18c02034 	orhi	r3,r3,128
 802d8b0:	01000e04 	movi	r4,56
 802d8b4:	20806e16 	blt	r4,r2,802da70 <__subdf3+0x890>
 802d8b8:	010007c4 	movi	r4,31
 802d8bc:	20807716 	blt	r4,r2,802da9c <__subdf3+0x8bc>
 802d8c0:	01000804 	movi	r4,32
 802d8c4:	2089c83a 	sub	r4,r4,r2
 802d8c8:	1914983a 	sll	r10,r3,r4
 802d8cc:	8890d83a 	srl	r8,r17,r2
 802d8d0:	8908983a 	sll	r4,r17,r4
 802d8d4:	1884d83a 	srl	r2,r3,r2
 802d8d8:	5222b03a 	or	r17,r10,r8
 802d8dc:	2006c03a 	cmpne	r3,r4,zero
 802d8e0:	88e2b03a 	or	r17,r17,r3
 802d8e4:	89a3883a 	add	r17,r17,r6
 802d8e8:	1145883a 	add	r2,r2,r5
 802d8ec:	898d803a 	cmpltu	r6,r17,r6
 802d8f0:	3087883a 	add	r3,r6,r2
 802d8f4:	4821883a 	mov	r16,r9
 802d8f8:	003ed906 	br	802d460 <__alt_data_end+0xfffee060>
 802d8fc:	2984b03a 	or	r2,r5,r6
 802d900:	10004226 	beq	r2,zero,802da0c <__subdf3+0x82c>
 802d904:	1808d0fa 	srli	r4,r3,3
 802d908:	8822d0fa 	srli	r17,r17,3
 802d90c:	1806977a 	slli	r3,r3,29
 802d910:	2080022c 	andhi	r2,r4,8
 802d914:	1c62b03a 	or	r17,r3,r17
 802d918:	10000826 	beq	r2,zero,802d93c <__subdf3+0x75c>
 802d91c:	2812d0fa 	srli	r9,r5,3
 802d920:	4880022c 	andhi	r2,r9,8
 802d924:	1000051e 	bne	r2,zero,802d93c <__subdf3+0x75c>
 802d928:	300cd0fa 	srli	r6,r6,3
 802d92c:	2804977a 	slli	r2,r5,29
 802d930:	4809883a 	mov	r4,r9
 802d934:	3825883a 	mov	r18,r7
 802d938:	11a2b03a 	or	r17,r2,r6
 802d93c:	8806d77a 	srli	r3,r17,29
 802d940:	200890fa 	slli	r4,r4,3
 802d944:	882290fa 	slli	r17,r17,3
 802d948:	0401ffc4 	movi	r16,2047
 802d94c:	1906b03a 	or	r3,r3,r4
 802d950:	003e4406 	br	802d264 <__alt_data_end+0xfffede64>
 802d954:	2984b03a 	or	r2,r5,r6
 802d958:	103e4226 	beq	r2,zero,802d264 <__alt_data_end+0xfffede64>
 802d95c:	8989c83a 	sub	r4,r17,r6
 802d960:	8911803a 	cmpltu	r8,r17,r4
 802d964:	1945c83a 	sub	r2,r3,r5
 802d968:	1205c83a 	sub	r2,r2,r8
 802d96c:	1200202c 	andhi	r8,r2,128
 802d970:	403e9a26 	beq	r8,zero,802d3dc <__alt_data_end+0xfffedfdc>
 802d974:	3463c83a 	sub	r17,r6,r17
 802d978:	28c5c83a 	sub	r2,r5,r3
 802d97c:	344d803a 	cmpltu	r6,r6,r17
 802d980:	1187c83a 	sub	r3,r2,r6
 802d984:	3825883a 	mov	r18,r7
 802d988:	003e3606 	br	802d264 <__alt_data_end+0xfffede64>
 802d98c:	0101ffc4 	movi	r4,2047
 802d990:	493fc71e 	bne	r9,r4,802d8b0 <__alt_data_end+0xfffee4b0>
 802d994:	2807883a 	mov	r3,r5
 802d998:	3023883a 	mov	r17,r6
 802d99c:	4821883a 	mov	r16,r9
 802d9a0:	003e3006 	br	802d264 <__alt_data_end+0xfffede64>
 802d9a4:	10003626 	beq	r2,zero,802da80 <__subdf3+0x8a0>
 802d9a8:	2984b03a 	or	r2,r5,r6
 802d9ac:	10001726 	beq	r2,zero,802da0c <__subdf3+0x82c>
 802d9b0:	1808d0fa 	srli	r4,r3,3
 802d9b4:	8822d0fa 	srli	r17,r17,3
 802d9b8:	1806977a 	slli	r3,r3,29
 802d9bc:	2080022c 	andhi	r2,r4,8
 802d9c0:	1c62b03a 	or	r17,r3,r17
 802d9c4:	10000726 	beq	r2,zero,802d9e4 <__subdf3+0x804>
 802d9c8:	2812d0fa 	srli	r9,r5,3
 802d9cc:	4880022c 	andhi	r2,r9,8
 802d9d0:	1000041e 	bne	r2,zero,802d9e4 <__subdf3+0x804>
 802d9d4:	300cd0fa 	srli	r6,r6,3
 802d9d8:	2804977a 	slli	r2,r5,29
 802d9dc:	4809883a 	mov	r4,r9
 802d9e0:	11a2b03a 	or	r17,r2,r6
 802d9e4:	8806d77a 	srli	r3,r17,29
 802d9e8:	200890fa 	slli	r4,r4,3
 802d9ec:	882290fa 	slli	r17,r17,3
 802d9f0:	3825883a 	mov	r18,r7
 802d9f4:	1906b03a 	or	r3,r3,r4
 802d9f8:	0401ffc4 	movi	r16,2047
 802d9fc:	003e1906 	br	802d264 <__alt_data_end+0xfffede64>
 802da00:	000b883a 	mov	r5,zero
 802da04:	0005883a 	mov	r2,zero
 802da08:	003e2e06 	br	802d2c4 <__alt_data_end+0xfffedec4>
 802da0c:	0401ffc4 	movi	r16,2047
 802da10:	003e1406 	br	802d264 <__alt_data_end+0xfffede64>
 802da14:	0005883a 	mov	r2,zero
 802da18:	003f7506 	br	802d7f0 <__alt_data_end+0xfffee3f0>
 802da1c:	0005883a 	mov	r2,zero
 802da20:	0009883a 	mov	r4,zero
 802da24:	003e7806 	br	802d408 <__alt_data_end+0xfffee008>
 802da28:	123ff804 	addi	r8,r2,-32
 802da2c:	01000804 	movi	r4,32
 802da30:	1a10d83a 	srl	r8,r3,r8
 802da34:	11002526 	beq	r2,r4,802dacc <__subdf3+0x8ec>
 802da38:	01001004 	movi	r4,64
 802da3c:	2085c83a 	sub	r2,r4,r2
 802da40:	1884983a 	sll	r2,r3,r2
 802da44:	1444b03a 	or	r2,r2,r17
 802da48:	1004c03a 	cmpne	r2,r2,zero
 802da4c:	40a2b03a 	or	r17,r8,r2
 802da50:	0005883a 	mov	r2,zero
 802da54:	003f1606 	br	802d6b0 <__alt_data_end+0xfffee2b0>
 802da58:	02000434 	movhi	r8,16
 802da5c:	0009883a 	mov	r4,zero
 802da60:	423fffc4 	addi	r8,r8,-1
 802da64:	00bfffc4 	movi	r2,-1
 802da68:	0401ffc4 	movi	r16,2047
 802da6c:	003e6606 	br	802d408 <__alt_data_end+0xfffee008>
 802da70:	1c62b03a 	or	r17,r3,r17
 802da74:	8822c03a 	cmpne	r17,r17,zero
 802da78:	0005883a 	mov	r2,zero
 802da7c:	003f9906 	br	802d8e4 <__alt_data_end+0xfffee4e4>
 802da80:	2807883a 	mov	r3,r5
 802da84:	3023883a 	mov	r17,r6
 802da88:	0401ffc4 	movi	r16,2047
 802da8c:	003df506 	br	802d264 <__alt_data_end+0xfffede64>
 802da90:	2807883a 	mov	r3,r5
 802da94:	3023883a 	mov	r17,r6
 802da98:	003df206 	br	802d264 <__alt_data_end+0xfffede64>
 802da9c:	123ff804 	addi	r8,r2,-32
 802daa0:	01000804 	movi	r4,32
 802daa4:	1a10d83a 	srl	r8,r3,r8
 802daa8:	11000a26 	beq	r2,r4,802dad4 <__subdf3+0x8f4>
 802daac:	01001004 	movi	r4,64
 802dab0:	2085c83a 	sub	r2,r4,r2
 802dab4:	1884983a 	sll	r2,r3,r2
 802dab8:	1444b03a 	or	r2,r2,r17
 802dabc:	1004c03a 	cmpne	r2,r2,zero
 802dac0:	40a2b03a 	or	r17,r8,r2
 802dac4:	0005883a 	mov	r2,zero
 802dac8:	003f8606 	br	802d8e4 <__alt_data_end+0xfffee4e4>
 802dacc:	0005883a 	mov	r2,zero
 802dad0:	003fdc06 	br	802da44 <__alt_data_end+0xfffee644>
 802dad4:	0005883a 	mov	r2,zero
 802dad8:	003ff706 	br	802dab8 <__alt_data_end+0xfffee6b8>

0802dadc <__fixdfsi>:
 802dadc:	280cd53a 	srli	r6,r5,20
 802dae0:	00c00434 	movhi	r3,16
 802dae4:	18ffffc4 	addi	r3,r3,-1
 802dae8:	3181ffcc 	andi	r6,r6,2047
 802daec:	01c0ff84 	movi	r7,1022
 802daf0:	28c6703a 	and	r3,r5,r3
 802daf4:	280ad7fa 	srli	r5,r5,31
 802daf8:	3980120e 	bge	r7,r6,802db44 <__fixdfsi+0x68>
 802dafc:	00810744 	movi	r2,1053
 802db00:	11800c16 	blt	r2,r6,802db34 <__fixdfsi+0x58>
 802db04:	00810cc4 	movi	r2,1075
 802db08:	1185c83a 	sub	r2,r2,r6
 802db0c:	01c007c4 	movi	r7,31
 802db10:	18c00434 	orhi	r3,r3,16
 802db14:	38800d16 	blt	r7,r2,802db4c <__fixdfsi+0x70>
 802db18:	31befb44 	addi	r6,r6,-1043
 802db1c:	2084d83a 	srl	r2,r4,r2
 802db20:	1986983a 	sll	r3,r3,r6
 802db24:	1884b03a 	or	r2,r3,r2
 802db28:	28000726 	beq	r5,zero,802db48 <__fixdfsi+0x6c>
 802db2c:	0085c83a 	sub	r2,zero,r2
 802db30:	f800283a 	ret
 802db34:	00a00034 	movhi	r2,32768
 802db38:	10bfffc4 	addi	r2,r2,-1
 802db3c:	2885883a 	add	r2,r5,r2
 802db40:	f800283a 	ret
 802db44:	0005883a 	mov	r2,zero
 802db48:	f800283a 	ret
 802db4c:	008104c4 	movi	r2,1043
 802db50:	1185c83a 	sub	r2,r2,r6
 802db54:	1884d83a 	srl	r2,r3,r2
 802db58:	003ff306 	br	802db28 <__alt_data_end+0xfffee728>

0802db5c <__floatsidf>:
 802db5c:	defffd04 	addi	sp,sp,-12
 802db60:	dfc00215 	stw	ra,8(sp)
 802db64:	dc400115 	stw	r17,4(sp)
 802db68:	dc000015 	stw	r16,0(sp)
 802db6c:	20002b26 	beq	r4,zero,802dc1c <__floatsidf+0xc0>
 802db70:	2023883a 	mov	r17,r4
 802db74:	2020d7fa 	srli	r16,r4,31
 802db78:	20002d16 	blt	r4,zero,802dc30 <__floatsidf+0xd4>
 802db7c:	8809883a 	mov	r4,r17
 802db80:	802dce00 	call	802dce0 <__clzsi2>
 802db84:	01410784 	movi	r5,1054
 802db88:	288bc83a 	sub	r5,r5,r2
 802db8c:	01010cc4 	movi	r4,1075
 802db90:	2149c83a 	sub	r4,r4,r5
 802db94:	00c007c4 	movi	r3,31
 802db98:	1900160e 	bge	r3,r4,802dbf4 <__floatsidf+0x98>
 802db9c:	00c104c4 	movi	r3,1043
 802dba0:	1947c83a 	sub	r3,r3,r5
 802dba4:	88c6983a 	sll	r3,r17,r3
 802dba8:	00800434 	movhi	r2,16
 802dbac:	10bfffc4 	addi	r2,r2,-1
 802dbb0:	1886703a 	and	r3,r3,r2
 802dbb4:	2941ffcc 	andi	r5,r5,2047
 802dbb8:	800d883a 	mov	r6,r16
 802dbbc:	0005883a 	mov	r2,zero
 802dbc0:	280a953a 	slli	r5,r5,20
 802dbc4:	31803fcc 	andi	r6,r6,255
 802dbc8:	01000434 	movhi	r4,16
 802dbcc:	300c97fa 	slli	r6,r6,31
 802dbd0:	213fffc4 	addi	r4,r4,-1
 802dbd4:	1906703a 	and	r3,r3,r4
 802dbd8:	1946b03a 	or	r3,r3,r5
 802dbdc:	1986b03a 	or	r3,r3,r6
 802dbe0:	dfc00217 	ldw	ra,8(sp)
 802dbe4:	dc400117 	ldw	r17,4(sp)
 802dbe8:	dc000017 	ldw	r16,0(sp)
 802dbec:	dec00304 	addi	sp,sp,12
 802dbf0:	f800283a 	ret
 802dbf4:	00c002c4 	movi	r3,11
 802dbf8:	1887c83a 	sub	r3,r3,r2
 802dbfc:	88c6d83a 	srl	r3,r17,r3
 802dc00:	8904983a 	sll	r2,r17,r4
 802dc04:	01000434 	movhi	r4,16
 802dc08:	213fffc4 	addi	r4,r4,-1
 802dc0c:	2941ffcc 	andi	r5,r5,2047
 802dc10:	1906703a 	and	r3,r3,r4
 802dc14:	800d883a 	mov	r6,r16
 802dc18:	003fe906 	br	802dbc0 <__alt_data_end+0xfffee7c0>
 802dc1c:	000d883a 	mov	r6,zero
 802dc20:	000b883a 	mov	r5,zero
 802dc24:	0007883a 	mov	r3,zero
 802dc28:	0005883a 	mov	r2,zero
 802dc2c:	003fe406 	br	802dbc0 <__alt_data_end+0xfffee7c0>
 802dc30:	0123c83a 	sub	r17,zero,r4
 802dc34:	003fd106 	br	802db7c <__alt_data_end+0xfffee77c>

0802dc38 <__floatunsidf>:
 802dc38:	defffe04 	addi	sp,sp,-8
 802dc3c:	dc000015 	stw	r16,0(sp)
 802dc40:	dfc00115 	stw	ra,4(sp)
 802dc44:	2021883a 	mov	r16,r4
 802dc48:	20002226 	beq	r4,zero,802dcd4 <__floatunsidf+0x9c>
 802dc4c:	802dce00 	call	802dce0 <__clzsi2>
 802dc50:	01010784 	movi	r4,1054
 802dc54:	2089c83a 	sub	r4,r4,r2
 802dc58:	01810cc4 	movi	r6,1075
 802dc5c:	310dc83a 	sub	r6,r6,r4
 802dc60:	00c007c4 	movi	r3,31
 802dc64:	1980120e 	bge	r3,r6,802dcb0 <__floatunsidf+0x78>
 802dc68:	00c104c4 	movi	r3,1043
 802dc6c:	1907c83a 	sub	r3,r3,r4
 802dc70:	80ca983a 	sll	r5,r16,r3
 802dc74:	00800434 	movhi	r2,16
 802dc78:	10bfffc4 	addi	r2,r2,-1
 802dc7c:	2101ffcc 	andi	r4,r4,2047
 802dc80:	0021883a 	mov	r16,zero
 802dc84:	288a703a 	and	r5,r5,r2
 802dc88:	2008953a 	slli	r4,r4,20
 802dc8c:	00c00434 	movhi	r3,16
 802dc90:	18ffffc4 	addi	r3,r3,-1
 802dc94:	28c6703a 	and	r3,r5,r3
 802dc98:	8005883a 	mov	r2,r16
 802dc9c:	1906b03a 	or	r3,r3,r4
 802dca0:	dfc00117 	ldw	ra,4(sp)
 802dca4:	dc000017 	ldw	r16,0(sp)
 802dca8:	dec00204 	addi	sp,sp,8
 802dcac:	f800283a 	ret
 802dcb0:	00c002c4 	movi	r3,11
 802dcb4:	188bc83a 	sub	r5,r3,r2
 802dcb8:	814ad83a 	srl	r5,r16,r5
 802dcbc:	00c00434 	movhi	r3,16
 802dcc0:	18ffffc4 	addi	r3,r3,-1
 802dcc4:	81a0983a 	sll	r16,r16,r6
 802dcc8:	2101ffcc 	andi	r4,r4,2047
 802dccc:	28ca703a 	and	r5,r5,r3
 802dcd0:	003fed06 	br	802dc88 <__alt_data_end+0xfffee888>
 802dcd4:	0009883a 	mov	r4,zero
 802dcd8:	000b883a 	mov	r5,zero
 802dcdc:	003fea06 	br	802dc88 <__alt_data_end+0xfffee888>

0802dce0 <__clzsi2>:
 802dce0:	00bfffd4 	movui	r2,65535
 802dce4:	11000536 	bltu	r2,r4,802dcfc <__clzsi2+0x1c>
 802dce8:	00803fc4 	movi	r2,255
 802dcec:	11000f36 	bltu	r2,r4,802dd2c <__clzsi2+0x4c>
 802dcf0:	00800804 	movi	r2,32
 802dcf4:	0007883a 	mov	r3,zero
 802dcf8:	00000506 	br	802dd10 <__clzsi2+0x30>
 802dcfc:	00804034 	movhi	r2,256
 802dd00:	10bfffc4 	addi	r2,r2,-1
 802dd04:	11000c2e 	bgeu	r2,r4,802dd38 <__clzsi2+0x58>
 802dd08:	00800204 	movi	r2,8
 802dd0c:	00c00604 	movi	r3,24
 802dd10:	20c8d83a 	srl	r4,r4,r3
 802dd14:	00c200f4 	movhi	r3,2051
 802dd18:	18c7b004 	addi	r3,r3,7872
 802dd1c:	1909883a 	add	r4,r3,r4
 802dd20:	20c00003 	ldbu	r3,0(r4)
 802dd24:	10c5c83a 	sub	r2,r2,r3
 802dd28:	f800283a 	ret
 802dd2c:	00800604 	movi	r2,24
 802dd30:	00c00204 	movi	r3,8
 802dd34:	003ff606 	br	802dd10 <__alt_data_end+0xfffee910>
 802dd38:	00800404 	movi	r2,16
 802dd3c:	1007883a 	mov	r3,r2
 802dd40:	003ff306 	br	802dd10 <__alt_data_end+0xfffee910>

0802dd44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 802dd44:	defff504 	addi	sp,sp,-44
 802dd48:	df000a15 	stw	fp,40(sp)
 802dd4c:	df000a04 	addi	fp,sp,40
 802dd50:	e13ffc15 	stw	r4,-16(fp)
 802dd54:	e17ffd15 	stw	r5,-12(fp)
 802dd58:	e1bffe15 	stw	r6,-8(fp)
 802dd5c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 802dd60:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 802dd64:	d0a6fa17 	ldw	r2,-25624(gp)
  
  if (alt_ticks_per_second ())
 802dd68:	10003c26 	beq	r2,zero,802de5c <alt_alarm_start+0x118>
  {
    if (alarm)
 802dd6c:	e0bffc17 	ldw	r2,-16(fp)
 802dd70:	10003826 	beq	r2,zero,802de54 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 802dd74:	e0bffc17 	ldw	r2,-16(fp)
 802dd78:	e0fffe17 	ldw	r3,-8(fp)
 802dd7c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 802dd80:	e0bffc17 	ldw	r2,-16(fp)
 802dd84:	e0ffff17 	ldw	r3,-4(fp)
 802dd88:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802dd8c:	0005303a 	rdctl	r2,status
 802dd90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802dd94:	e0fff917 	ldw	r3,-28(fp)
 802dd98:	00bfff84 	movi	r2,-2
 802dd9c:	1884703a 	and	r2,r3,r2
 802dda0:	1001703a 	wrctl	status,r2
  
  return context;
 802dda4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 802dda8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 802ddac:	d0a6fb17 	ldw	r2,-25620(gp)
      
      current_nticks = alt_nticks();
 802ddb0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 802ddb4:	e0fffd17 	ldw	r3,-12(fp)
 802ddb8:	e0bff617 	ldw	r2,-40(fp)
 802ddbc:	1885883a 	add	r2,r3,r2
 802ddc0:	10c00044 	addi	r3,r2,1
 802ddc4:	e0bffc17 	ldw	r2,-16(fp)
 802ddc8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 802ddcc:	e0bffc17 	ldw	r2,-16(fp)
 802ddd0:	10c00217 	ldw	r3,8(r2)
 802ddd4:	e0bff617 	ldw	r2,-40(fp)
 802ddd8:	1880042e 	bgeu	r3,r2,802ddec <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 802dddc:	e0bffc17 	ldw	r2,-16(fp)
 802dde0:	00c00044 	movi	r3,1
 802dde4:	10c00405 	stb	r3,16(r2)
 802dde8:	00000206 	br	802ddf4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 802ddec:	e0bffc17 	ldw	r2,-16(fp)
 802ddf0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 802ddf4:	e0bffc17 	ldw	r2,-16(fp)
 802ddf8:	d0e00c04 	addi	r3,gp,-32720
 802ddfc:	e0fffa15 	stw	r3,-24(fp)
 802de00:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 802de04:	e0bffb17 	ldw	r2,-20(fp)
 802de08:	e0fffa17 	ldw	r3,-24(fp)
 802de0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 802de10:	e0bffa17 	ldw	r2,-24(fp)
 802de14:	10c00017 	ldw	r3,0(r2)
 802de18:	e0bffb17 	ldw	r2,-20(fp)
 802de1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 802de20:	e0bffa17 	ldw	r2,-24(fp)
 802de24:	10800017 	ldw	r2,0(r2)
 802de28:	e0fffb17 	ldw	r3,-20(fp)
 802de2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 802de30:	e0bffa17 	ldw	r2,-24(fp)
 802de34:	e0fffb17 	ldw	r3,-20(fp)
 802de38:	10c00015 	stw	r3,0(r2)
 802de3c:	e0bff817 	ldw	r2,-32(fp)
 802de40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802de44:	e0bff717 	ldw	r2,-36(fp)
 802de48:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 802de4c:	0005883a 	mov	r2,zero
 802de50:	00000306 	br	802de60 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 802de54:	00bffa84 	movi	r2,-22
 802de58:	00000106 	br	802de60 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 802de5c:	00bfde84 	movi	r2,-134
  }
}
 802de60:	e037883a 	mov	sp,fp
 802de64:	df000017 	ldw	fp,0(sp)
 802de68:	dec00104 	addi	sp,sp,4
 802de6c:	f800283a 	ret

0802de70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802de70:	defffe04 	addi	sp,sp,-8
 802de74:	dfc00115 	stw	ra,4(sp)
 802de78:	df000015 	stw	fp,0(sp)
 802de7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802de80:	d0a00a17 	ldw	r2,-32728(gp)
 802de84:	10000326 	beq	r2,zero,802de94 <alt_get_errno+0x24>
 802de88:	d0a00a17 	ldw	r2,-32728(gp)
 802de8c:	103ee83a 	callr	r2
 802de90:	00000106 	br	802de98 <alt_get_errno+0x28>
 802de94:	d0a6f604 	addi	r2,gp,-25640
}
 802de98:	e037883a 	mov	sp,fp
 802de9c:	dfc00117 	ldw	ra,4(sp)
 802dea0:	df000017 	ldw	fp,0(sp)
 802dea4:	dec00204 	addi	sp,sp,8
 802dea8:	f800283a 	ret

0802deac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 802deac:	defffb04 	addi	sp,sp,-20
 802deb0:	dfc00415 	stw	ra,16(sp)
 802deb4:	df000315 	stw	fp,12(sp)
 802deb8:	df000304 	addi	fp,sp,12
 802debc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 802dec0:	e0bfff17 	ldw	r2,-4(fp)
 802dec4:	10000816 	blt	r2,zero,802dee8 <close+0x3c>
 802dec8:	01400304 	movi	r5,12
 802decc:	e13fff17 	ldw	r4,-4(fp)
 802ded0:	80214e80 	call	80214e8 <__mulsi3>
 802ded4:	1007883a 	mov	r3,r2
 802ded8:	008200f4 	movhi	r2,2051
 802dedc:	108a4f04 	addi	r2,r2,10556
 802dee0:	1885883a 	add	r2,r3,r2
 802dee4:	00000106 	br	802deec <close+0x40>
 802dee8:	0005883a 	mov	r2,zero
 802deec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 802def0:	e0bffd17 	ldw	r2,-12(fp)
 802def4:	10001926 	beq	r2,zero,802df5c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 802def8:	e0bffd17 	ldw	r2,-12(fp)
 802defc:	10800017 	ldw	r2,0(r2)
 802df00:	10800417 	ldw	r2,16(r2)
 802df04:	10000626 	beq	r2,zero,802df20 <close+0x74>
 802df08:	e0bffd17 	ldw	r2,-12(fp)
 802df0c:	10800017 	ldw	r2,0(r2)
 802df10:	10800417 	ldw	r2,16(r2)
 802df14:	e13ffd17 	ldw	r4,-12(fp)
 802df18:	103ee83a 	callr	r2
 802df1c:	00000106 	br	802df24 <close+0x78>
 802df20:	0005883a 	mov	r2,zero
 802df24:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 802df28:	e13fff17 	ldw	r4,-4(fp)
 802df2c:	802e5940 	call	802e594 <alt_release_fd>
    if (rval < 0)
 802df30:	e0bffe17 	ldw	r2,-8(fp)
 802df34:	1000070e 	bge	r2,zero,802df54 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 802df38:	802de700 	call	802de70 <alt_get_errno>
 802df3c:	1007883a 	mov	r3,r2
 802df40:	e0bffe17 	ldw	r2,-8(fp)
 802df44:	0085c83a 	sub	r2,zero,r2
 802df48:	18800015 	stw	r2,0(r3)
      return -1;
 802df4c:	00bfffc4 	movi	r2,-1
 802df50:	00000706 	br	802df70 <close+0xc4>
    }
    return 0;
 802df54:	0005883a 	mov	r2,zero
 802df58:	00000506 	br	802df70 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 802df5c:	802de700 	call	802de70 <alt_get_errno>
 802df60:	1007883a 	mov	r3,r2
 802df64:	00801444 	movi	r2,81
 802df68:	18800015 	stw	r2,0(r3)
    return -1;
 802df6c:	00bfffc4 	movi	r2,-1
  }
}
 802df70:	e037883a 	mov	sp,fp
 802df74:	dfc00117 	ldw	ra,4(sp)
 802df78:	df000017 	ldw	fp,0(sp)
 802df7c:	dec00204 	addi	sp,sp,8
 802df80:	f800283a 	ret

0802df84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 802df84:	defffc04 	addi	sp,sp,-16
 802df88:	df000315 	stw	fp,12(sp)
 802df8c:	df000304 	addi	fp,sp,12
 802df90:	e13ffd15 	stw	r4,-12(fp)
 802df94:	e17ffe15 	stw	r5,-8(fp)
 802df98:	e1bfff15 	stw	r6,-4(fp)
  return len;
 802df9c:	e0bfff17 	ldw	r2,-4(fp)
}
 802dfa0:	e037883a 	mov	sp,fp
 802dfa4:	df000017 	ldw	fp,0(sp)
 802dfa8:	dec00104 	addi	sp,sp,4
 802dfac:	f800283a 	ret

0802dfb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802dfb0:	defffe04 	addi	sp,sp,-8
 802dfb4:	dfc00115 	stw	ra,4(sp)
 802dfb8:	df000015 	stw	fp,0(sp)
 802dfbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802dfc0:	d0a00a17 	ldw	r2,-32728(gp)
 802dfc4:	10000326 	beq	r2,zero,802dfd4 <alt_get_errno+0x24>
 802dfc8:	d0a00a17 	ldw	r2,-32728(gp)
 802dfcc:	103ee83a 	callr	r2
 802dfd0:	00000106 	br	802dfd8 <alt_get_errno+0x28>
 802dfd4:	d0a6f604 	addi	r2,gp,-25640
}
 802dfd8:	e037883a 	mov	sp,fp
 802dfdc:	dfc00117 	ldw	ra,4(sp)
 802dfe0:	df000017 	ldw	fp,0(sp)
 802dfe4:	dec00204 	addi	sp,sp,8
 802dfe8:	f800283a 	ret

0802dfec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 802dfec:	defffb04 	addi	sp,sp,-20
 802dff0:	dfc00415 	stw	ra,16(sp)
 802dff4:	df000315 	stw	fp,12(sp)
 802dff8:	df000304 	addi	fp,sp,12
 802dffc:	e13ffe15 	stw	r4,-8(fp)
 802e000:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 802e004:	e0bffe17 	ldw	r2,-8(fp)
 802e008:	10000816 	blt	r2,zero,802e02c <fstat+0x40>
 802e00c:	01400304 	movi	r5,12
 802e010:	e13ffe17 	ldw	r4,-8(fp)
 802e014:	80214e80 	call	80214e8 <__mulsi3>
 802e018:	1007883a 	mov	r3,r2
 802e01c:	008200f4 	movhi	r2,2051
 802e020:	108a4f04 	addi	r2,r2,10556
 802e024:	1885883a 	add	r2,r3,r2
 802e028:	00000106 	br	802e030 <fstat+0x44>
 802e02c:	0005883a 	mov	r2,zero
 802e030:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 802e034:	e0bffd17 	ldw	r2,-12(fp)
 802e038:	10001026 	beq	r2,zero,802e07c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 802e03c:	e0bffd17 	ldw	r2,-12(fp)
 802e040:	10800017 	ldw	r2,0(r2)
 802e044:	10800817 	ldw	r2,32(r2)
 802e048:	10000726 	beq	r2,zero,802e068 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 802e04c:	e0bffd17 	ldw	r2,-12(fp)
 802e050:	10800017 	ldw	r2,0(r2)
 802e054:	10800817 	ldw	r2,32(r2)
 802e058:	e17fff17 	ldw	r5,-4(fp)
 802e05c:	e13ffd17 	ldw	r4,-12(fp)
 802e060:	103ee83a 	callr	r2
 802e064:	00000a06 	br	802e090 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 802e068:	e0bfff17 	ldw	r2,-4(fp)
 802e06c:	00c80004 	movi	r3,8192
 802e070:	10c00115 	stw	r3,4(r2)
      return 0;
 802e074:	0005883a 	mov	r2,zero
 802e078:	00000506 	br	802e090 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 802e07c:	802dfb00 	call	802dfb0 <alt_get_errno>
 802e080:	1007883a 	mov	r3,r2
 802e084:	00801444 	movi	r2,81
 802e088:	18800015 	stw	r2,0(r3)
    return -1;
 802e08c:	00bfffc4 	movi	r2,-1
  }
}
 802e090:	e037883a 	mov	sp,fp
 802e094:	dfc00117 	ldw	ra,4(sp)
 802e098:	df000017 	ldw	fp,0(sp)
 802e09c:	dec00204 	addi	sp,sp,8
 802e0a0:	f800283a 	ret

0802e0a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802e0a4:	defffe04 	addi	sp,sp,-8
 802e0a8:	dfc00115 	stw	ra,4(sp)
 802e0ac:	df000015 	stw	fp,0(sp)
 802e0b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802e0b4:	d0a00a17 	ldw	r2,-32728(gp)
 802e0b8:	10000326 	beq	r2,zero,802e0c8 <alt_get_errno+0x24>
 802e0bc:	d0a00a17 	ldw	r2,-32728(gp)
 802e0c0:	103ee83a 	callr	r2
 802e0c4:	00000106 	br	802e0cc <alt_get_errno+0x28>
 802e0c8:	d0a6f604 	addi	r2,gp,-25640
}
 802e0cc:	e037883a 	mov	sp,fp
 802e0d0:	dfc00117 	ldw	ra,4(sp)
 802e0d4:	df000017 	ldw	fp,0(sp)
 802e0d8:	dec00204 	addi	sp,sp,8
 802e0dc:	f800283a 	ret

0802e0e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 802e0e0:	deffed04 	addi	sp,sp,-76
 802e0e4:	dfc01215 	stw	ra,72(sp)
 802e0e8:	df001115 	stw	fp,68(sp)
 802e0ec:	df001104 	addi	fp,sp,68
 802e0f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 802e0f4:	e0bfff17 	ldw	r2,-4(fp)
 802e0f8:	10000816 	blt	r2,zero,802e11c <isatty+0x3c>
 802e0fc:	01400304 	movi	r5,12
 802e100:	e13fff17 	ldw	r4,-4(fp)
 802e104:	80214e80 	call	80214e8 <__mulsi3>
 802e108:	1007883a 	mov	r3,r2
 802e10c:	008200f4 	movhi	r2,2051
 802e110:	108a4f04 	addi	r2,r2,10556
 802e114:	1885883a 	add	r2,r3,r2
 802e118:	00000106 	br	802e120 <isatty+0x40>
 802e11c:	0005883a 	mov	r2,zero
 802e120:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 802e124:	e0bfef17 	ldw	r2,-68(fp)
 802e128:	10000e26 	beq	r2,zero,802e164 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 802e12c:	e0bfef17 	ldw	r2,-68(fp)
 802e130:	10800017 	ldw	r2,0(r2)
 802e134:	10800817 	ldw	r2,32(r2)
 802e138:	1000021e 	bne	r2,zero,802e144 <isatty+0x64>
    {
      return 1;
 802e13c:	00800044 	movi	r2,1
 802e140:	00000d06 	br	802e178 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 802e144:	e0bff004 	addi	r2,fp,-64
 802e148:	100b883a 	mov	r5,r2
 802e14c:	e13fff17 	ldw	r4,-4(fp)
 802e150:	802dfec0 	call	802dfec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 802e154:	e0bff117 	ldw	r2,-60(fp)
 802e158:	10880020 	cmpeqi	r2,r2,8192
 802e15c:	10803fcc 	andi	r2,r2,255
 802e160:	00000506 	br	802e178 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 802e164:	802e0a40 	call	802e0a4 <alt_get_errno>
 802e168:	1007883a 	mov	r3,r2
 802e16c:	00801444 	movi	r2,81
 802e170:	18800015 	stw	r2,0(r3)
    return 0;
 802e174:	0005883a 	mov	r2,zero
  }
}
 802e178:	e037883a 	mov	sp,fp
 802e17c:	dfc00117 	ldw	ra,4(sp)
 802e180:	df000017 	ldw	fp,0(sp)
 802e184:	dec00204 	addi	sp,sp,8
 802e188:	f800283a 	ret

0802e18c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 802e18c:	defffc04 	addi	sp,sp,-16
 802e190:	df000315 	stw	fp,12(sp)
 802e194:	df000304 	addi	fp,sp,12
 802e198:	e13ffd15 	stw	r4,-12(fp)
 802e19c:	e17ffe15 	stw	r5,-8(fp)
 802e1a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 802e1a4:	e0fffe17 	ldw	r3,-8(fp)
 802e1a8:	e0bffd17 	ldw	r2,-12(fp)
 802e1ac:	18800c26 	beq	r3,r2,802e1e0 <alt_load_section+0x54>
  {
    while( to != end )
 802e1b0:	00000806 	br	802e1d4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 802e1b4:	e0bffe17 	ldw	r2,-8(fp)
 802e1b8:	10c00104 	addi	r3,r2,4
 802e1bc:	e0fffe15 	stw	r3,-8(fp)
 802e1c0:	e0fffd17 	ldw	r3,-12(fp)
 802e1c4:	19000104 	addi	r4,r3,4
 802e1c8:	e13ffd15 	stw	r4,-12(fp)
 802e1cc:	18c00017 	ldw	r3,0(r3)
 802e1d0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 802e1d4:	e0fffe17 	ldw	r3,-8(fp)
 802e1d8:	e0bfff17 	ldw	r2,-4(fp)
 802e1dc:	18bff51e 	bne	r3,r2,802e1b4 <__alt_data_end+0xfffeedb4>
    {
      *to++ = *from++;
    }
  }
}
 802e1e0:	0001883a 	nop
 802e1e4:	e037883a 	mov	sp,fp
 802e1e8:	df000017 	ldw	fp,0(sp)
 802e1ec:	dec00104 	addi	sp,sp,4
 802e1f0:	f800283a 	ret

0802e1f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 802e1f4:	defffe04 	addi	sp,sp,-8
 802e1f8:	dfc00115 	stw	ra,4(sp)
 802e1fc:	df000015 	stw	fp,0(sp)
 802e200:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 802e204:	018200f4 	movhi	r6,2051
 802e208:	318efd04 	addi	r6,r6,15348
 802e20c:	014200f4 	movhi	r5,2051
 802e210:	29481c04 	addi	r5,r5,8304
 802e214:	010200f4 	movhi	r4,2051
 802e218:	210efd04 	addi	r4,r4,15348
 802e21c:	802e18c0 	call	802e18c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 802e220:	018200b4 	movhi	r6,2050
 802e224:	31808c04 	addi	r6,r6,560
 802e228:	014200b4 	movhi	r5,2050
 802e22c:	29400804 	addi	r5,r5,32
 802e230:	010200b4 	movhi	r4,2050
 802e234:	21000804 	addi	r4,r4,32
 802e238:	802e18c0 	call	802e18c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 802e23c:	018200f4 	movhi	r6,2051
 802e240:	31881c04 	addi	r6,r6,8304
 802e244:	014200f4 	movhi	r5,2051
 802e248:	2946d704 	addi	r5,r5,7004
 802e24c:	010200f4 	movhi	r4,2051
 802e250:	2106d704 	addi	r4,r4,7004
 802e254:	802e18c0 	call	802e18c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 802e258:	8030c480 	call	8030c48 <alt_dcache_flush_all>
  alt_icache_flush_all();
 802e25c:	8030e980 	call	8030e98 <alt_icache_flush_all>
}
 802e260:	0001883a 	nop
 802e264:	e037883a 	mov	sp,fp
 802e268:	dfc00117 	ldw	ra,4(sp)
 802e26c:	df000017 	ldw	fp,0(sp)
 802e270:	dec00204 	addi	sp,sp,8
 802e274:	f800283a 	ret

0802e278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802e278:	defffe04 	addi	sp,sp,-8
 802e27c:	dfc00115 	stw	ra,4(sp)
 802e280:	df000015 	stw	fp,0(sp)
 802e284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802e288:	d0a00a17 	ldw	r2,-32728(gp)
 802e28c:	10000326 	beq	r2,zero,802e29c <alt_get_errno+0x24>
 802e290:	d0a00a17 	ldw	r2,-32728(gp)
 802e294:	103ee83a 	callr	r2
 802e298:	00000106 	br	802e2a0 <alt_get_errno+0x28>
 802e29c:	d0a6f604 	addi	r2,gp,-25640
}
 802e2a0:	e037883a 	mov	sp,fp
 802e2a4:	dfc00117 	ldw	ra,4(sp)
 802e2a8:	df000017 	ldw	fp,0(sp)
 802e2ac:	dec00204 	addi	sp,sp,8
 802e2b0:	f800283a 	ret

0802e2b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 802e2b4:	defff904 	addi	sp,sp,-28
 802e2b8:	dfc00615 	stw	ra,24(sp)
 802e2bc:	df000515 	stw	fp,20(sp)
 802e2c0:	df000504 	addi	fp,sp,20
 802e2c4:	e13ffd15 	stw	r4,-12(fp)
 802e2c8:	e17ffe15 	stw	r5,-8(fp)
 802e2cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 802e2d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 802e2d4:	e0bffd17 	ldw	r2,-12(fp)
 802e2d8:	10000816 	blt	r2,zero,802e2fc <lseek+0x48>
 802e2dc:	01400304 	movi	r5,12
 802e2e0:	e13ffd17 	ldw	r4,-12(fp)
 802e2e4:	80214e80 	call	80214e8 <__mulsi3>
 802e2e8:	1007883a 	mov	r3,r2
 802e2ec:	008200f4 	movhi	r2,2051
 802e2f0:	108a4f04 	addi	r2,r2,10556
 802e2f4:	1885883a 	add	r2,r3,r2
 802e2f8:	00000106 	br	802e300 <lseek+0x4c>
 802e2fc:	0005883a 	mov	r2,zero
 802e300:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 802e304:	e0bffc17 	ldw	r2,-16(fp)
 802e308:	10001026 	beq	r2,zero,802e34c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 802e30c:	e0bffc17 	ldw	r2,-16(fp)
 802e310:	10800017 	ldw	r2,0(r2)
 802e314:	10800717 	ldw	r2,28(r2)
 802e318:	10000926 	beq	r2,zero,802e340 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 802e31c:	e0bffc17 	ldw	r2,-16(fp)
 802e320:	10800017 	ldw	r2,0(r2)
 802e324:	10800717 	ldw	r2,28(r2)
 802e328:	e1bfff17 	ldw	r6,-4(fp)
 802e32c:	e17ffe17 	ldw	r5,-8(fp)
 802e330:	e13ffc17 	ldw	r4,-16(fp)
 802e334:	103ee83a 	callr	r2
 802e338:	e0bffb15 	stw	r2,-20(fp)
 802e33c:	00000506 	br	802e354 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 802e340:	00bfde84 	movi	r2,-134
 802e344:	e0bffb15 	stw	r2,-20(fp)
 802e348:	00000206 	br	802e354 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 802e34c:	00bfebc4 	movi	r2,-81
 802e350:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 802e354:	e0bffb17 	ldw	r2,-20(fp)
 802e358:	1000070e 	bge	r2,zero,802e378 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 802e35c:	802e2780 	call	802e278 <alt_get_errno>
 802e360:	1007883a 	mov	r3,r2
 802e364:	e0bffb17 	ldw	r2,-20(fp)
 802e368:	0085c83a 	sub	r2,zero,r2
 802e36c:	18800015 	stw	r2,0(r3)
    rc = -1;
 802e370:	00bfffc4 	movi	r2,-1
 802e374:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 802e378:	e0bffb17 	ldw	r2,-20(fp)
}
 802e37c:	e037883a 	mov	sp,fp
 802e380:	dfc00117 	ldw	ra,4(sp)
 802e384:	df000017 	ldw	fp,0(sp)
 802e388:	dec00204 	addi	sp,sp,8
 802e38c:	f800283a 	ret

0802e390 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 802e390:	defffd04 	addi	sp,sp,-12
 802e394:	dfc00215 	stw	ra,8(sp)
 802e398:	df000115 	stw	fp,4(sp)
 802e39c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 802e3a0:	0009883a 	mov	r4,zero
 802e3a4:	802ea0c0 	call	802ea0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 802e3a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 802e3ac:	802ea440 	call	802ea44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 802e3b0:	018200f4 	movhi	r6,2051
 802e3b4:	3187f304 	addi	r6,r6,8140
 802e3b8:	014200f4 	movhi	r5,2051
 802e3bc:	2947f304 	addi	r5,r5,8140
 802e3c0:	010200f4 	movhi	r4,2051
 802e3c4:	2107f304 	addi	r4,r4,8140
 802e3c8:	803123c0 	call	803123c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 802e3cc:	8030d480 	call	8030d48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 802e3d0:	010200f4 	movhi	r4,2051
 802e3d4:	21036a04 	addi	r4,r4,3496
 802e3d8:	80317c80 	call	80317c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 802e3dc:	d0a6f717 	ldw	r2,-25636(gp)
 802e3e0:	d0e6f817 	ldw	r3,-25632(gp)
 802e3e4:	d126f917 	ldw	r4,-25628(gp)
 802e3e8:	200d883a 	mov	r6,r4
 802e3ec:	180b883a 	mov	r5,r3
 802e3f0:	1009883a 	mov	r4,r2
 802e3f4:	80202cc0 	call	80202cc <main>
 802e3f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 802e3fc:	01000044 	movi	r4,1
 802e400:	802deac0 	call	802deac <close>
  exit (result);
 802e404:	e13fff17 	ldw	r4,-4(fp)
 802e408:	80317dc0 	call	80317dc <exit>

0802e40c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 802e40c:	defffe04 	addi	sp,sp,-8
 802e410:	df000115 	stw	fp,4(sp)
 802e414:	df000104 	addi	fp,sp,4
 802e418:	e13fff15 	stw	r4,-4(fp)
}
 802e41c:	0001883a 	nop
 802e420:	e037883a 	mov	sp,fp
 802e424:	df000017 	ldw	fp,0(sp)
 802e428:	dec00104 	addi	sp,sp,4
 802e42c:	f800283a 	ret

0802e430 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 802e430:	defffe04 	addi	sp,sp,-8
 802e434:	df000115 	stw	fp,4(sp)
 802e438:	df000104 	addi	fp,sp,4
 802e43c:	e13fff15 	stw	r4,-4(fp)
}
 802e440:	0001883a 	nop
 802e444:	e037883a 	mov	sp,fp
 802e448:	df000017 	ldw	fp,0(sp)
 802e44c:	dec00104 	addi	sp,sp,4
 802e450:	f800283a 	ret

0802e454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802e454:	defffe04 	addi	sp,sp,-8
 802e458:	dfc00115 	stw	ra,4(sp)
 802e45c:	df000015 	stw	fp,0(sp)
 802e460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802e464:	d0a00a17 	ldw	r2,-32728(gp)
 802e468:	10000326 	beq	r2,zero,802e478 <alt_get_errno+0x24>
 802e46c:	d0a00a17 	ldw	r2,-32728(gp)
 802e470:	103ee83a 	callr	r2
 802e474:	00000106 	br	802e47c <alt_get_errno+0x28>
 802e478:	d0a6f604 	addi	r2,gp,-25640
}
 802e47c:	e037883a 	mov	sp,fp
 802e480:	dfc00117 	ldw	ra,4(sp)
 802e484:	df000017 	ldw	fp,0(sp)
 802e488:	dec00204 	addi	sp,sp,8
 802e48c:	f800283a 	ret

0802e490 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 802e490:	defff904 	addi	sp,sp,-28
 802e494:	dfc00615 	stw	ra,24(sp)
 802e498:	df000515 	stw	fp,20(sp)
 802e49c:	df000504 	addi	fp,sp,20
 802e4a0:	e13ffd15 	stw	r4,-12(fp)
 802e4a4:	e17ffe15 	stw	r5,-8(fp)
 802e4a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 802e4ac:	e0bffd17 	ldw	r2,-12(fp)
 802e4b0:	10000816 	blt	r2,zero,802e4d4 <read+0x44>
 802e4b4:	01400304 	movi	r5,12
 802e4b8:	e13ffd17 	ldw	r4,-12(fp)
 802e4bc:	80214e80 	call	80214e8 <__mulsi3>
 802e4c0:	1007883a 	mov	r3,r2
 802e4c4:	008200f4 	movhi	r2,2051
 802e4c8:	108a4f04 	addi	r2,r2,10556
 802e4cc:	1885883a 	add	r2,r3,r2
 802e4d0:	00000106 	br	802e4d8 <read+0x48>
 802e4d4:	0005883a 	mov	r2,zero
 802e4d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 802e4dc:	e0bffb17 	ldw	r2,-20(fp)
 802e4e0:	10002226 	beq	r2,zero,802e56c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 802e4e4:	e0bffb17 	ldw	r2,-20(fp)
 802e4e8:	10800217 	ldw	r2,8(r2)
 802e4ec:	108000cc 	andi	r2,r2,3
 802e4f0:	10800060 	cmpeqi	r2,r2,1
 802e4f4:	1000181e 	bne	r2,zero,802e558 <read+0xc8>
        (fd->dev->read))
 802e4f8:	e0bffb17 	ldw	r2,-20(fp)
 802e4fc:	10800017 	ldw	r2,0(r2)
 802e500:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 802e504:	10001426 	beq	r2,zero,802e558 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 802e508:	e0bffb17 	ldw	r2,-20(fp)
 802e50c:	10800017 	ldw	r2,0(r2)
 802e510:	10800517 	ldw	r2,20(r2)
 802e514:	e0ffff17 	ldw	r3,-4(fp)
 802e518:	180d883a 	mov	r6,r3
 802e51c:	e17ffe17 	ldw	r5,-8(fp)
 802e520:	e13ffb17 	ldw	r4,-20(fp)
 802e524:	103ee83a 	callr	r2
 802e528:	e0bffc15 	stw	r2,-16(fp)
 802e52c:	e0bffc17 	ldw	r2,-16(fp)
 802e530:	1000070e 	bge	r2,zero,802e550 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 802e534:	802e4540 	call	802e454 <alt_get_errno>
 802e538:	1007883a 	mov	r3,r2
 802e53c:	e0bffc17 	ldw	r2,-16(fp)
 802e540:	0085c83a 	sub	r2,zero,r2
 802e544:	18800015 	stw	r2,0(r3)
          return -1;
 802e548:	00bfffc4 	movi	r2,-1
 802e54c:	00000c06 	br	802e580 <read+0xf0>
        }
        return rval;
 802e550:	e0bffc17 	ldw	r2,-16(fp)
 802e554:	00000a06 	br	802e580 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 802e558:	802e4540 	call	802e454 <alt_get_errno>
 802e55c:	1007883a 	mov	r3,r2
 802e560:	00800344 	movi	r2,13
 802e564:	18800015 	stw	r2,0(r3)
 802e568:	00000406 	br	802e57c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 802e56c:	802e4540 	call	802e454 <alt_get_errno>
 802e570:	1007883a 	mov	r3,r2
 802e574:	00801444 	movi	r2,81
 802e578:	18800015 	stw	r2,0(r3)
  }
  return -1;
 802e57c:	00bfffc4 	movi	r2,-1
}
 802e580:	e037883a 	mov	sp,fp
 802e584:	dfc00117 	ldw	ra,4(sp)
 802e588:	df000017 	ldw	fp,0(sp)
 802e58c:	dec00204 	addi	sp,sp,8
 802e590:	f800283a 	ret

0802e594 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 802e594:	defffc04 	addi	sp,sp,-16
 802e598:	dfc00315 	stw	ra,12(sp)
 802e59c:	df000215 	stw	fp,8(sp)
 802e5a0:	dc000115 	stw	r16,4(sp)
 802e5a4:	df000204 	addi	fp,sp,8
 802e5a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 802e5ac:	e0bffe17 	ldw	r2,-8(fp)
 802e5b0:	108000d0 	cmplti	r2,r2,3
 802e5b4:	1000111e 	bne	r2,zero,802e5fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 802e5b8:	040200f4 	movhi	r16,2051
 802e5bc:	840a4f04 	addi	r16,r16,10556
 802e5c0:	e0bffe17 	ldw	r2,-8(fp)
 802e5c4:	01400304 	movi	r5,12
 802e5c8:	1009883a 	mov	r4,r2
 802e5cc:	80214e80 	call	80214e8 <__mulsi3>
 802e5d0:	8085883a 	add	r2,r16,r2
 802e5d4:	10800204 	addi	r2,r2,8
 802e5d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 802e5dc:	040200f4 	movhi	r16,2051
 802e5e0:	840a4f04 	addi	r16,r16,10556
 802e5e4:	e0bffe17 	ldw	r2,-8(fp)
 802e5e8:	01400304 	movi	r5,12
 802e5ec:	1009883a 	mov	r4,r2
 802e5f0:	80214e80 	call	80214e8 <__mulsi3>
 802e5f4:	8085883a 	add	r2,r16,r2
 802e5f8:	10000015 	stw	zero,0(r2)
  }
}
 802e5fc:	0001883a 	nop
 802e600:	e6ffff04 	addi	sp,fp,-4
 802e604:	dfc00217 	ldw	ra,8(sp)
 802e608:	df000117 	ldw	fp,4(sp)
 802e60c:	dc000017 	ldw	r16,0(sp)
 802e610:	dec00304 	addi	sp,sp,12
 802e614:	f800283a 	ret

0802e618 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 802e618:	defff904 	addi	sp,sp,-28
 802e61c:	df000615 	stw	fp,24(sp)
 802e620:	df000604 	addi	fp,sp,24
 802e624:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802e628:	0005303a 	rdctl	r2,status
 802e62c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802e630:	e0fffe17 	ldw	r3,-8(fp)
 802e634:	00bfff84 	movi	r2,-2
 802e638:	1884703a 	and	r2,r3,r2
 802e63c:	1001703a 	wrctl	status,r2
  
  return context;
 802e640:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 802e644:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 802e648:	d0a00b17 	ldw	r2,-32724(gp)
 802e64c:	10c000c4 	addi	r3,r2,3
 802e650:	00bfff04 	movi	r2,-4
 802e654:	1884703a 	and	r2,r3,r2
 802e658:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 802e65c:	d0e00b17 	ldw	r3,-32724(gp)
 802e660:	e0bfff17 	ldw	r2,-4(fp)
 802e664:	1887883a 	add	r3,r3,r2
 802e668:	00820134 	movhi	r2,2052
 802e66c:	10bd0004 	addi	r2,r2,-3072
 802e670:	10c0062e 	bgeu	r2,r3,802e68c <sbrk+0x74>
 802e674:	e0bffb17 	ldw	r2,-20(fp)
 802e678:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802e67c:	e0bffa17 	ldw	r2,-24(fp)
 802e680:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 802e684:	00bfffc4 	movi	r2,-1
 802e688:	00000b06 	br	802e6b8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 802e68c:	d0a00b17 	ldw	r2,-32724(gp)
 802e690:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 802e694:	d0e00b17 	ldw	r3,-32724(gp)
 802e698:	e0bfff17 	ldw	r2,-4(fp)
 802e69c:	1885883a 	add	r2,r3,r2
 802e6a0:	d0a00b15 	stw	r2,-32724(gp)
 802e6a4:	e0bffb17 	ldw	r2,-20(fp)
 802e6a8:	e0bffc15 	stw	r2,-16(fp)
 802e6ac:	e0bffc17 	ldw	r2,-16(fp)
 802e6b0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 802e6b4:	e0bffd17 	ldw	r2,-12(fp)
} 
 802e6b8:	e037883a 	mov	sp,fp
 802e6bc:	df000017 	ldw	fp,0(sp)
 802e6c0:	dec00104 	addi	sp,sp,4
 802e6c4:	f800283a 	ret

0802e6c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 802e6c8:	defffa04 	addi	sp,sp,-24
 802e6cc:	df000515 	stw	fp,20(sp)
 802e6d0:	df000504 	addi	fp,sp,20
 802e6d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802e6d8:	0005303a 	rdctl	r2,status
 802e6dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802e6e0:	e0fffc17 	ldw	r3,-16(fp)
 802e6e4:	00bfff84 	movi	r2,-2
 802e6e8:	1884703a 	and	r2,r3,r2
 802e6ec:	1001703a 	wrctl	status,r2
  
  return context;
 802e6f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 802e6f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 802e6f8:	e0bfff17 	ldw	r2,-4(fp)
 802e6fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 802e700:	e0bffd17 	ldw	r2,-12(fp)
 802e704:	10800017 	ldw	r2,0(r2)
 802e708:	e0fffd17 	ldw	r3,-12(fp)
 802e70c:	18c00117 	ldw	r3,4(r3)
 802e710:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 802e714:	e0bffd17 	ldw	r2,-12(fp)
 802e718:	10800117 	ldw	r2,4(r2)
 802e71c:	e0fffd17 	ldw	r3,-12(fp)
 802e720:	18c00017 	ldw	r3,0(r3)
 802e724:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 802e728:	e0bffd17 	ldw	r2,-12(fp)
 802e72c:	e0fffd17 	ldw	r3,-12(fp)
 802e730:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 802e734:	e0bffd17 	ldw	r2,-12(fp)
 802e738:	e0fffd17 	ldw	r3,-12(fp)
 802e73c:	10c00015 	stw	r3,0(r2)
 802e740:	e0bffb17 	ldw	r2,-20(fp)
 802e744:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802e748:	e0bffe17 	ldw	r2,-8(fp)
 802e74c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 802e750:	0001883a 	nop
 802e754:	e037883a 	mov	sp,fp
 802e758:	df000017 	ldw	fp,0(sp)
 802e75c:	dec00104 	addi	sp,sp,4
 802e760:	f800283a 	ret

0802e764 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 802e764:	defffb04 	addi	sp,sp,-20
 802e768:	dfc00415 	stw	ra,16(sp)
 802e76c:	df000315 	stw	fp,12(sp)
 802e770:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 802e774:	d0a00c17 	ldw	r2,-32720(gp)
 802e778:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 802e77c:	d0a6fb17 	ldw	r2,-25620(gp)
 802e780:	10800044 	addi	r2,r2,1
 802e784:	d0a6fb15 	stw	r2,-25620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 802e788:	00002e06 	br	802e844 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 802e78c:	e0bffd17 	ldw	r2,-12(fp)
 802e790:	10800017 	ldw	r2,0(r2)
 802e794:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 802e798:	e0bffd17 	ldw	r2,-12(fp)
 802e79c:	10800403 	ldbu	r2,16(r2)
 802e7a0:	10803fcc 	andi	r2,r2,255
 802e7a4:	10000426 	beq	r2,zero,802e7b8 <alt_tick+0x54>
 802e7a8:	d0a6fb17 	ldw	r2,-25620(gp)
 802e7ac:	1000021e 	bne	r2,zero,802e7b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 802e7b0:	e0bffd17 	ldw	r2,-12(fp)
 802e7b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 802e7b8:	e0bffd17 	ldw	r2,-12(fp)
 802e7bc:	10800217 	ldw	r2,8(r2)
 802e7c0:	d0e6fb17 	ldw	r3,-25620(gp)
 802e7c4:	18801d36 	bltu	r3,r2,802e83c <alt_tick+0xd8>
 802e7c8:	e0bffd17 	ldw	r2,-12(fp)
 802e7cc:	10800403 	ldbu	r2,16(r2)
 802e7d0:	10803fcc 	andi	r2,r2,255
 802e7d4:	1000191e 	bne	r2,zero,802e83c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 802e7d8:	e0bffd17 	ldw	r2,-12(fp)
 802e7dc:	10800317 	ldw	r2,12(r2)
 802e7e0:	e0fffd17 	ldw	r3,-12(fp)
 802e7e4:	18c00517 	ldw	r3,20(r3)
 802e7e8:	1809883a 	mov	r4,r3
 802e7ec:	103ee83a 	callr	r2
 802e7f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 802e7f4:	e0bfff17 	ldw	r2,-4(fp)
 802e7f8:	1000031e 	bne	r2,zero,802e808 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 802e7fc:	e13ffd17 	ldw	r4,-12(fp)
 802e800:	802e6c80 	call	802e6c8 <alt_alarm_stop>
 802e804:	00000d06 	br	802e83c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 802e808:	e0bffd17 	ldw	r2,-12(fp)
 802e80c:	10c00217 	ldw	r3,8(r2)
 802e810:	e0bfff17 	ldw	r2,-4(fp)
 802e814:	1887883a 	add	r3,r3,r2
 802e818:	e0bffd17 	ldw	r2,-12(fp)
 802e81c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 802e820:	e0bffd17 	ldw	r2,-12(fp)
 802e824:	10c00217 	ldw	r3,8(r2)
 802e828:	d0a6fb17 	ldw	r2,-25620(gp)
 802e82c:	1880032e 	bgeu	r3,r2,802e83c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 802e830:	e0bffd17 	ldw	r2,-12(fp)
 802e834:	00c00044 	movi	r3,1
 802e838:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 802e83c:	e0bffe17 	ldw	r2,-8(fp)
 802e840:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 802e844:	e0fffd17 	ldw	r3,-12(fp)
 802e848:	d0a00c04 	addi	r2,gp,-32720
 802e84c:	18bfcf1e 	bne	r3,r2,802e78c <__alt_data_end+0xfffef38c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 802e850:	0001883a 	nop
}
 802e854:	0001883a 	nop
 802e858:	e037883a 	mov	sp,fp
 802e85c:	dfc00117 	ldw	ra,4(sp)
 802e860:	df000017 	ldw	fp,0(sp)
 802e864:	dec00204 	addi	sp,sp,8
 802e868:	f800283a 	ret

0802e86c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 802e86c:	defffd04 	addi	sp,sp,-12
 802e870:	dfc00215 	stw	ra,8(sp)
 802e874:	df000115 	stw	fp,4(sp)
 802e878:	df000104 	addi	fp,sp,4
 802e87c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 802e880:	e13fff17 	ldw	r4,-4(fp)
 802e884:	8030af00 	call	8030af0 <alt_busy_sleep>
}
 802e888:	e037883a 	mov	sp,fp
 802e88c:	dfc00117 	ldw	ra,4(sp)
 802e890:	df000017 	ldw	fp,0(sp)
 802e894:	dec00204 	addi	sp,sp,8
 802e898:	f800283a 	ret

0802e89c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802e89c:	defffe04 	addi	sp,sp,-8
 802e8a0:	dfc00115 	stw	ra,4(sp)
 802e8a4:	df000015 	stw	fp,0(sp)
 802e8a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802e8ac:	d0a00a17 	ldw	r2,-32728(gp)
 802e8b0:	10000326 	beq	r2,zero,802e8c0 <alt_get_errno+0x24>
 802e8b4:	d0a00a17 	ldw	r2,-32728(gp)
 802e8b8:	103ee83a 	callr	r2
 802e8bc:	00000106 	br	802e8c4 <alt_get_errno+0x28>
 802e8c0:	d0a6f604 	addi	r2,gp,-25640
}
 802e8c4:	e037883a 	mov	sp,fp
 802e8c8:	dfc00117 	ldw	ra,4(sp)
 802e8cc:	df000017 	ldw	fp,0(sp)
 802e8d0:	dec00204 	addi	sp,sp,8
 802e8d4:	f800283a 	ret

0802e8d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 802e8d8:	defff904 	addi	sp,sp,-28
 802e8dc:	dfc00615 	stw	ra,24(sp)
 802e8e0:	df000515 	stw	fp,20(sp)
 802e8e4:	df000504 	addi	fp,sp,20
 802e8e8:	e13ffd15 	stw	r4,-12(fp)
 802e8ec:	e17ffe15 	stw	r5,-8(fp)
 802e8f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 802e8f4:	e0bffd17 	ldw	r2,-12(fp)
 802e8f8:	10000816 	blt	r2,zero,802e91c <write+0x44>
 802e8fc:	01400304 	movi	r5,12
 802e900:	e13ffd17 	ldw	r4,-12(fp)
 802e904:	80214e80 	call	80214e8 <__mulsi3>
 802e908:	1007883a 	mov	r3,r2
 802e90c:	008200f4 	movhi	r2,2051
 802e910:	108a4f04 	addi	r2,r2,10556
 802e914:	1885883a 	add	r2,r3,r2
 802e918:	00000106 	br	802e920 <write+0x48>
 802e91c:	0005883a 	mov	r2,zero
 802e920:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 802e924:	e0bffb17 	ldw	r2,-20(fp)
 802e928:	10002126 	beq	r2,zero,802e9b0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 802e92c:	e0bffb17 	ldw	r2,-20(fp)
 802e930:	10800217 	ldw	r2,8(r2)
 802e934:	108000cc 	andi	r2,r2,3
 802e938:	10001826 	beq	r2,zero,802e99c <write+0xc4>
 802e93c:	e0bffb17 	ldw	r2,-20(fp)
 802e940:	10800017 	ldw	r2,0(r2)
 802e944:	10800617 	ldw	r2,24(r2)
 802e948:	10001426 	beq	r2,zero,802e99c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 802e94c:	e0bffb17 	ldw	r2,-20(fp)
 802e950:	10800017 	ldw	r2,0(r2)
 802e954:	10800617 	ldw	r2,24(r2)
 802e958:	e0ffff17 	ldw	r3,-4(fp)
 802e95c:	180d883a 	mov	r6,r3
 802e960:	e17ffe17 	ldw	r5,-8(fp)
 802e964:	e13ffb17 	ldw	r4,-20(fp)
 802e968:	103ee83a 	callr	r2
 802e96c:	e0bffc15 	stw	r2,-16(fp)
 802e970:	e0bffc17 	ldw	r2,-16(fp)
 802e974:	1000070e 	bge	r2,zero,802e994 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 802e978:	802e89c0 	call	802e89c <alt_get_errno>
 802e97c:	1007883a 	mov	r3,r2
 802e980:	e0bffc17 	ldw	r2,-16(fp)
 802e984:	0085c83a 	sub	r2,zero,r2
 802e988:	18800015 	stw	r2,0(r3)
        return -1;
 802e98c:	00bfffc4 	movi	r2,-1
 802e990:	00000c06 	br	802e9c4 <write+0xec>
      }
      return rval;
 802e994:	e0bffc17 	ldw	r2,-16(fp)
 802e998:	00000a06 	br	802e9c4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 802e99c:	802e89c0 	call	802e89c <alt_get_errno>
 802e9a0:	1007883a 	mov	r3,r2
 802e9a4:	00800344 	movi	r2,13
 802e9a8:	18800015 	stw	r2,0(r3)
 802e9ac:	00000406 	br	802e9c0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 802e9b0:	802e89c0 	call	802e89c <alt_get_errno>
 802e9b4:	1007883a 	mov	r3,r2
 802e9b8:	00801444 	movi	r2,81
 802e9bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 802e9c0:	00bfffc4 	movi	r2,-1
}
 802e9c4:	e037883a 	mov	sp,fp
 802e9c8:	dfc00117 	ldw	ra,4(sp)
 802e9cc:	df000017 	ldw	fp,0(sp)
 802e9d0:	dec00204 	addi	sp,sp,8
 802e9d4:	f800283a 	ret

0802e9d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 802e9d8:	defffd04 	addi	sp,sp,-12
 802e9dc:	dfc00215 	stw	ra,8(sp)
 802e9e0:	df000115 	stw	fp,4(sp)
 802e9e4:	df000104 	addi	fp,sp,4
 802e9e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 802e9ec:	d1600704 	addi	r5,gp,-32740
 802e9f0:	e13fff17 	ldw	r4,-4(fp)
 802e9f4:	8030ca40 	call	8030ca4 <alt_dev_llist_insert>
}
 802e9f8:	e037883a 	mov	sp,fp
 802e9fc:	dfc00117 	ldw	ra,4(sp)
 802ea00:	df000017 	ldw	fp,0(sp)
 802ea04:	dec00204 	addi	sp,sp,8
 802ea08:	f800283a 	ret

0802ea0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 802ea0c:	defffd04 	addi	sp,sp,-12
 802ea10:	dfc00215 	stw	ra,8(sp)
 802ea14:	df000115 	stw	fp,4(sp)
 802ea18:	df000104 	addi	fp,sp,4
 802ea1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( TOP_LEVEL, top_level);
 802ea20:	803153c0 	call	803153c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 802ea24:	00800044 	movi	r2,1
 802ea28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 802ea2c:	0001883a 	nop
 802ea30:	e037883a 	mov	sp,fp
 802ea34:	dfc00117 	ldw	ra,4(sp)
 802ea38:	df000017 	ldw	fp,0(sp)
 802ea3c:	dec00204 	addi	sp,sp,8
 802ea40:	f800283a 	ret

0802ea44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 802ea44:	defffd04 	addi	sp,sp,-12
 802ea48:	dfc00215 	stw	ra,8(sp)
 802ea4c:	df000115 	stw	fp,4(sp)
 802ea50:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 802ea54:	01c0fa04 	movi	r7,1000
 802ea58:	01800044 	movi	r6,1
 802ea5c:	000b883a 	mov	r5,zero
 802ea60:	01020134 	movhi	r4,2052
 802ea64:	210c0804 	addi	r4,r4,12320
 802ea68:	802f81c0 	call	802f81c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 802ea6c:	000d883a 	mov	r6,zero
 802ea70:	000b883a 	mov	r5,zero
 802ea74:	010200f4 	movhi	r4,2051
 802ea78:	210ab904 	addi	r4,r4,10980
 802ea7c:	802eea00 	call	802eea0 <altera_avalon_jtag_uart_init>
 802ea80:	010200f4 	movhi	r4,2051
 802ea84:	210aaf04 	addi	r4,r4,10940
 802ea88:	802e9d80 	call	802e9d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 802ea8c:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 802ea90:	008200f4 	movhi	r2,2051
 802ea94:	108ec704 	addi	r2,r2,15132
 802ea98:	10800a17 	ldw	r2,40(r2)
 802ea9c:	10800104 	addi	r2,r2,4
 802eaa0:	10800017 	ldw	r2,0(r2)
 802eaa4:	10ffffcc 	andi	r3,r2,65535
 802eaa8:	008200f4 	movhi	r2,2051
 802eaac:	108ec704 	addi	r2,r2,15132
 802eab0:	10c00c15 	stw	r3,48(r2)
 802eab4:	008200f4 	movhi	r2,2051
 802eab8:	108ec704 	addi	r2,r2,15132
 802eabc:	10800a17 	ldw	r2,40(r2)
 802eac0:	10800104 	addi	r2,r2,4
 802eac4:	10800017 	ldw	r2,0(r2)
 802eac8:	1006d43a 	srli	r3,r2,16
 802eacc:	008200f4 	movhi	r2,2051
 802ead0:	108ec704 	addi	r2,r2,15132
 802ead4:	10c00d15 	stw	r3,52(r2)
 802ead8:	008200f4 	movhi	r2,2051
 802eadc:	108ec704 	addi	r2,r2,15132
 802eae0:	10800c17 	ldw	r2,48(r2)
 802eae4:	10801068 	cmpgeui	r2,r2,65
 802eae8:	1000081e 	bne	r2,zero,802eb0c <alt_sys_init+0xc8>
 802eaec:	008200f4 	movhi	r2,2051
 802eaf0:	108ec704 	addi	r2,r2,15132
 802eaf4:	00c00fc4 	movi	r3,63
 802eaf8:	10c00f15 	stw	r3,60(r2)
 802eafc:	008200f4 	movhi	r2,2051
 802eb00:	108ec704 	addi	r2,r2,15132
 802eb04:	00c00184 	movi	r3,6
 802eb08:	10c01015 	stw	r3,64(r2)
 802eb0c:	008200f4 	movhi	r2,2051
 802eb10:	108ec704 	addi	r2,r2,15132
 802eb14:	10800d17 	ldw	r2,52(r2)
 802eb18:	10800868 	cmpgeui	r2,r2,33
 802eb1c:	1000041e 	bne	r2,zero,802eb30 <alt_sys_init+0xec>
 802eb20:	008200f4 	movhi	r2,2051
 802eb24:	108ec704 	addi	r2,r2,15132
 802eb28:	00c007c4 	movi	r3,31
 802eb2c:	10c01115 	stw	r3,68(r2)
 802eb30:	010200f4 	movhi	r4,2051
 802eb34:	210ec704 	addi	r4,r4,15132
 802eb38:	802f8980 	call	802f898 <alt_up_char_buffer_init>
 802eb3c:	010200f4 	movhi	r4,2051
 802eb40:	210ec704 	addi	r4,r4,15132
 802eb44:	802e9d80 	call	802e9d8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 802eb48:	008200f4 	movhi	r2,2051
 802eb4c:	108ed904 	addi	r2,r2,15204
 802eb50:	10800a17 	ldw	r2,40(r2)
 802eb54:	10800017 	ldw	r2,0(r2)
 802eb58:	1007883a 	mov	r3,r2
 802eb5c:	008200f4 	movhi	r2,2051
 802eb60:	108ed904 	addi	r2,r2,15204
 802eb64:	10c00b15 	stw	r3,44(r2)
 802eb68:	008200f4 	movhi	r2,2051
 802eb6c:	108ed904 	addi	r2,r2,15204
 802eb70:	10800a17 	ldw	r2,40(r2)
 802eb74:	10800104 	addi	r2,r2,4
 802eb78:	10800017 	ldw	r2,0(r2)
 802eb7c:	1007883a 	mov	r3,r2
 802eb80:	008200f4 	movhi	r2,2051
 802eb84:	108ed904 	addi	r2,r2,15204
 802eb88:	10c00c15 	stw	r3,48(r2)
 802eb8c:	008200f4 	movhi	r2,2051
 802eb90:	108ed904 	addi	r2,r2,15204
 802eb94:	10800a17 	ldw	r2,40(r2)
 802eb98:	10800204 	addi	r2,r2,8
 802eb9c:	10800017 	ldw	r2,0(r2)
 802eba0:	10ffffcc 	andi	r3,r2,65535
 802eba4:	008200f4 	movhi	r2,2051
 802eba8:	108ed904 	addi	r2,r2,15204
 802ebac:	10c00f15 	stw	r3,60(r2)
 802ebb0:	008200f4 	movhi	r2,2051
 802ebb4:	108ed904 	addi	r2,r2,15204
 802ebb8:	10800a17 	ldw	r2,40(r2)
 802ebbc:	10800204 	addi	r2,r2,8
 802ebc0:	10800017 	ldw	r2,0(r2)
 802ebc4:	1006d43a 	srli	r3,r2,16
 802ebc8:	008200f4 	movhi	r2,2051
 802ebcc:	108ed904 	addi	r2,r2,15204
 802ebd0:	10c01015 	stw	r3,64(r2)
 802ebd4:	008200f4 	movhi	r2,2051
 802ebd8:	108ed904 	addi	r2,r2,15204
 802ebdc:	10800a17 	ldw	r2,40(r2)
 802ebe0:	10800304 	addi	r2,r2,12
 802ebe4:	10800017 	ldw	r2,0(r2)
 802ebe8:	1005d07a 	srai	r2,r2,1
 802ebec:	10c0004c 	andi	r3,r2,1
 802ebf0:	008200f4 	movhi	r2,2051
 802ebf4:	108ed904 	addi	r2,r2,15204
 802ebf8:	10c00d15 	stw	r3,52(r2)
 802ebfc:	008200f4 	movhi	r2,2051
 802ec00:	108ed904 	addi	r2,r2,15204
 802ec04:	10800a17 	ldw	r2,40(r2)
 802ec08:	10800304 	addi	r2,r2,12
 802ec0c:	10800017 	ldw	r2,0(r2)
 802ec10:	1005d13a 	srai	r2,r2,4
 802ec14:	10c003cc 	andi	r3,r2,15
 802ec18:	008200f4 	movhi	r2,2051
 802ec1c:	108ed904 	addi	r2,r2,15204
 802ec20:	10c00e15 	stw	r3,56(r2)
 802ec24:	008200f4 	movhi	r2,2051
 802ec28:	108ed904 	addi	r2,r2,15204
 802ec2c:	10800a17 	ldw	r2,40(r2)
 802ec30:	10800304 	addi	r2,r2,12
 802ec34:	10800017 	ldw	r2,0(r2)
 802ec38:	1005d43a 	srai	r2,r2,16
 802ec3c:	e0bfff05 	stb	r2,-4(fp)
 802ec40:	008200f4 	movhi	r2,2051
 802ec44:	108ed904 	addi	r2,r2,15204
 802ec48:	10800a17 	ldw	r2,40(r2)
 802ec4c:	10800304 	addi	r2,r2,12
 802ec50:	10800017 	ldw	r2,0(r2)
 802ec54:	1004d63a 	srli	r2,r2,24
 802ec58:	e0bfff45 	stb	r2,-3(fp)
 802ec5c:	008200f4 	movhi	r2,2051
 802ec60:	108ed904 	addi	r2,r2,15204
 802ec64:	10800e17 	ldw	r2,56(r2)
 802ec68:	10800058 	cmpnei	r2,r2,1
 802ec6c:	1000041e 	bne	r2,zero,802ec80 <alt_sys_init+0x23c>
 802ec70:	008200f4 	movhi	r2,2051
 802ec74:	108ed904 	addi	r2,r2,15204
 802ec78:	10001115 	stw	zero,68(r2)
 802ec7c:	00000e06 	br	802ecb8 <alt_sys_init+0x274>
 802ec80:	008200f4 	movhi	r2,2051
 802ec84:	108ed904 	addi	r2,r2,15204
 802ec88:	10800e17 	ldw	r2,56(r2)
 802ec8c:	10800098 	cmpnei	r2,r2,2
 802ec90:	1000051e 	bne	r2,zero,802eca8 <alt_sys_init+0x264>
 802ec94:	008200f4 	movhi	r2,2051
 802ec98:	108ed904 	addi	r2,r2,15204
 802ec9c:	00c00044 	movi	r3,1
 802eca0:	10c01115 	stw	r3,68(r2)
 802eca4:	00000406 	br	802ecb8 <alt_sys_init+0x274>
 802eca8:	008200f4 	movhi	r2,2051
 802ecac:	108ed904 	addi	r2,r2,15204
 802ecb0:	00c00084 	movi	r3,2
 802ecb4:	10c01115 	stw	r3,68(r2)
 802ecb8:	e0bfff03 	ldbu	r2,-4(fp)
 802ecbc:	00c00804 	movi	r3,32
 802ecc0:	1885c83a 	sub	r2,r3,r2
 802ecc4:	00ffffc4 	movi	r3,-1
 802ecc8:	1886d83a 	srl	r3,r3,r2
 802eccc:	008200f4 	movhi	r2,2051
 802ecd0:	108ed904 	addi	r2,r2,15204
 802ecd4:	10c01215 	stw	r3,72(r2)
 802ecd8:	e0ffff03 	ldbu	r3,-4(fp)
 802ecdc:	008200f4 	movhi	r2,2051
 802ece0:	108ed904 	addi	r2,r2,15204
 802ece4:	10801117 	ldw	r2,68(r2)
 802ece8:	1887883a 	add	r3,r3,r2
 802ecec:	008200f4 	movhi	r2,2051
 802ecf0:	108ed904 	addi	r2,r2,15204
 802ecf4:	10c01315 	stw	r3,76(r2)
 802ecf8:	e0bfff43 	ldbu	r2,-3(fp)
 802ecfc:	00c00804 	movi	r3,32
 802ed00:	1885c83a 	sub	r2,r3,r2
 802ed04:	00ffffc4 	movi	r3,-1
 802ed08:	1886d83a 	srl	r3,r3,r2
 802ed0c:	008200f4 	movhi	r2,2051
 802ed10:	108ed904 	addi	r2,r2,15204
 802ed14:	10c01415 	stw	r3,80(r2)
 802ed18:	010200f4 	movhi	r4,2051
 802ed1c:	210ed904 	addi	r4,r4,15204
 802ed20:	802e9d80 	call	802e9d8 <alt_dev_reg>
}
 802ed24:	0001883a 	nop
 802ed28:	e037883a 	mov	sp,fp
 802ed2c:	dfc00117 	ldw	ra,4(sp)
 802ed30:	df000017 	ldw	fp,0(sp)
 802ed34:	dec00204 	addi	sp,sp,8
 802ed38:	f800283a 	ret

0802ed3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 802ed3c:	defffa04 	addi	sp,sp,-24
 802ed40:	dfc00515 	stw	ra,20(sp)
 802ed44:	df000415 	stw	fp,16(sp)
 802ed48:	df000404 	addi	fp,sp,16
 802ed4c:	e13ffd15 	stw	r4,-12(fp)
 802ed50:	e17ffe15 	stw	r5,-8(fp)
 802ed54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 802ed58:	e0bffd17 	ldw	r2,-12(fp)
 802ed5c:	10800017 	ldw	r2,0(r2)
 802ed60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 802ed64:	e0bffc17 	ldw	r2,-16(fp)
 802ed68:	10c00a04 	addi	r3,r2,40
 802ed6c:	e0bffd17 	ldw	r2,-12(fp)
 802ed70:	10800217 	ldw	r2,8(r2)
 802ed74:	100f883a 	mov	r7,r2
 802ed78:	e1bfff17 	ldw	r6,-4(fp)
 802ed7c:	e17ffe17 	ldw	r5,-8(fp)
 802ed80:	1809883a 	mov	r4,r3
 802ed84:	802f3640 	call	802f364 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 802ed88:	e037883a 	mov	sp,fp
 802ed8c:	dfc00117 	ldw	ra,4(sp)
 802ed90:	df000017 	ldw	fp,0(sp)
 802ed94:	dec00204 	addi	sp,sp,8
 802ed98:	f800283a 	ret

0802ed9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 802ed9c:	defffa04 	addi	sp,sp,-24
 802eda0:	dfc00515 	stw	ra,20(sp)
 802eda4:	df000415 	stw	fp,16(sp)
 802eda8:	df000404 	addi	fp,sp,16
 802edac:	e13ffd15 	stw	r4,-12(fp)
 802edb0:	e17ffe15 	stw	r5,-8(fp)
 802edb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 802edb8:	e0bffd17 	ldw	r2,-12(fp)
 802edbc:	10800017 	ldw	r2,0(r2)
 802edc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 802edc4:	e0bffc17 	ldw	r2,-16(fp)
 802edc8:	10c00a04 	addi	r3,r2,40
 802edcc:	e0bffd17 	ldw	r2,-12(fp)
 802edd0:	10800217 	ldw	r2,8(r2)
 802edd4:	100f883a 	mov	r7,r2
 802edd8:	e1bfff17 	ldw	r6,-4(fp)
 802eddc:	e17ffe17 	ldw	r5,-8(fp)
 802ede0:	1809883a 	mov	r4,r3
 802ede4:	802f5800 	call	802f580 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 802ede8:	e037883a 	mov	sp,fp
 802edec:	dfc00117 	ldw	ra,4(sp)
 802edf0:	df000017 	ldw	fp,0(sp)
 802edf4:	dec00204 	addi	sp,sp,8
 802edf8:	f800283a 	ret

0802edfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 802edfc:	defffc04 	addi	sp,sp,-16
 802ee00:	dfc00315 	stw	ra,12(sp)
 802ee04:	df000215 	stw	fp,8(sp)
 802ee08:	df000204 	addi	fp,sp,8
 802ee0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 802ee10:	e0bfff17 	ldw	r2,-4(fp)
 802ee14:	10800017 	ldw	r2,0(r2)
 802ee18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 802ee1c:	e0bffe17 	ldw	r2,-8(fp)
 802ee20:	10c00a04 	addi	r3,r2,40
 802ee24:	e0bfff17 	ldw	r2,-4(fp)
 802ee28:	10800217 	ldw	r2,8(r2)
 802ee2c:	100b883a 	mov	r5,r2
 802ee30:	1809883a 	mov	r4,r3
 802ee34:	802f20c0 	call	802f20c <altera_avalon_jtag_uart_close>
}
 802ee38:	e037883a 	mov	sp,fp
 802ee3c:	dfc00117 	ldw	ra,4(sp)
 802ee40:	df000017 	ldw	fp,0(sp)
 802ee44:	dec00204 	addi	sp,sp,8
 802ee48:	f800283a 	ret

0802ee4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 802ee4c:	defffa04 	addi	sp,sp,-24
 802ee50:	dfc00515 	stw	ra,20(sp)
 802ee54:	df000415 	stw	fp,16(sp)
 802ee58:	df000404 	addi	fp,sp,16
 802ee5c:	e13ffd15 	stw	r4,-12(fp)
 802ee60:	e17ffe15 	stw	r5,-8(fp)
 802ee64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 802ee68:	e0bffd17 	ldw	r2,-12(fp)
 802ee6c:	10800017 	ldw	r2,0(r2)
 802ee70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 802ee74:	e0bffc17 	ldw	r2,-16(fp)
 802ee78:	10800a04 	addi	r2,r2,40
 802ee7c:	e1bfff17 	ldw	r6,-4(fp)
 802ee80:	e17ffe17 	ldw	r5,-8(fp)
 802ee84:	1009883a 	mov	r4,r2
 802ee88:	802f2740 	call	802f274 <altera_avalon_jtag_uart_ioctl>
}
 802ee8c:	e037883a 	mov	sp,fp
 802ee90:	dfc00117 	ldw	ra,4(sp)
 802ee94:	df000017 	ldw	fp,0(sp)
 802ee98:	dec00204 	addi	sp,sp,8
 802ee9c:	f800283a 	ret

0802eea0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 802eea0:	defffa04 	addi	sp,sp,-24
 802eea4:	dfc00515 	stw	ra,20(sp)
 802eea8:	df000415 	stw	fp,16(sp)
 802eeac:	df000404 	addi	fp,sp,16
 802eeb0:	e13ffd15 	stw	r4,-12(fp)
 802eeb4:	e17ffe15 	stw	r5,-8(fp)
 802eeb8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 802eebc:	e0bffd17 	ldw	r2,-12(fp)
 802eec0:	00c00044 	movi	r3,1
 802eec4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 802eec8:	e0bffd17 	ldw	r2,-12(fp)
 802eecc:	10800017 	ldw	r2,0(r2)
 802eed0:	10800104 	addi	r2,r2,4
 802eed4:	1007883a 	mov	r3,r2
 802eed8:	e0bffd17 	ldw	r2,-12(fp)
 802eedc:	10800817 	ldw	r2,32(r2)
 802eee0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 802eee4:	e0bffe17 	ldw	r2,-8(fp)
 802eee8:	e0ffff17 	ldw	r3,-4(fp)
 802eeec:	d8000015 	stw	zero,0(sp)
 802eef0:	e1fffd17 	ldw	r7,-12(fp)
 802eef4:	018200f4 	movhi	r6,2051
 802eef8:	31bbd804 	addi	r6,r6,-4256
 802eefc:	180b883a 	mov	r5,r3
 802ef00:	1009883a 	mov	r4,r2
 802ef04:	8030eb80 	call	8030eb8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 802ef08:	e0bffd17 	ldw	r2,-12(fp)
 802ef0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 802ef10:	e0bffd17 	ldw	r2,-12(fp)
 802ef14:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 802ef18:	d0e6fa17 	ldw	r3,-25624(gp)
 802ef1c:	e1fffd17 	ldw	r7,-12(fp)
 802ef20:	018200f4 	movhi	r6,2051
 802ef24:	31bc5b04 	addi	r6,r6,-3732
 802ef28:	180b883a 	mov	r5,r3
 802ef2c:	1009883a 	mov	r4,r2
 802ef30:	802dd440 	call	802dd44 <alt_alarm_start>
 802ef34:	1000040e 	bge	r2,zero,802ef48 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 802ef38:	e0fffd17 	ldw	r3,-12(fp)
 802ef3c:	00a00034 	movhi	r2,32768
 802ef40:	10bfffc4 	addi	r2,r2,-1
 802ef44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 802ef48:	0001883a 	nop
 802ef4c:	e037883a 	mov	sp,fp
 802ef50:	dfc00117 	ldw	ra,4(sp)
 802ef54:	df000017 	ldw	fp,0(sp)
 802ef58:	dec00204 	addi	sp,sp,8
 802ef5c:	f800283a 	ret

0802ef60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 802ef60:	defff804 	addi	sp,sp,-32
 802ef64:	df000715 	stw	fp,28(sp)
 802ef68:	df000704 	addi	fp,sp,28
 802ef6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 802ef70:	e0bfff17 	ldw	r2,-4(fp)
 802ef74:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 802ef78:	e0bffb17 	ldw	r2,-20(fp)
 802ef7c:	10800017 	ldw	r2,0(r2)
 802ef80:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 802ef84:	e0bffc17 	ldw	r2,-16(fp)
 802ef88:	10800104 	addi	r2,r2,4
 802ef8c:	10800037 	ldwio	r2,0(r2)
 802ef90:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 802ef94:	e0bffd17 	ldw	r2,-12(fp)
 802ef98:	1080c00c 	andi	r2,r2,768
 802ef9c:	10006d26 	beq	r2,zero,802f154 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 802efa0:	e0bffd17 	ldw	r2,-12(fp)
 802efa4:	1080400c 	andi	r2,r2,256
 802efa8:	10003526 	beq	r2,zero,802f080 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 802efac:	00800074 	movhi	r2,1
 802efb0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802efb4:	e0bffb17 	ldw	r2,-20(fp)
 802efb8:	10800a17 	ldw	r2,40(r2)
 802efbc:	10800044 	addi	r2,r2,1
 802efc0:	1081ffcc 	andi	r2,r2,2047
 802efc4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 802efc8:	e0bffb17 	ldw	r2,-20(fp)
 802efcc:	10c00b17 	ldw	r3,44(r2)
 802efd0:	e0bffe17 	ldw	r2,-8(fp)
 802efd4:	18801526 	beq	r3,r2,802f02c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 802efd8:	e0bffc17 	ldw	r2,-16(fp)
 802efdc:	10800037 	ldwio	r2,0(r2)
 802efe0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 802efe4:	e0bff917 	ldw	r2,-28(fp)
 802efe8:	10a0000c 	andi	r2,r2,32768
 802efec:	10001126 	beq	r2,zero,802f034 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 802eff0:	e0bffb17 	ldw	r2,-20(fp)
 802eff4:	10800a17 	ldw	r2,40(r2)
 802eff8:	e0fff917 	ldw	r3,-28(fp)
 802effc:	1809883a 	mov	r4,r3
 802f000:	e0fffb17 	ldw	r3,-20(fp)
 802f004:	1885883a 	add	r2,r3,r2
 802f008:	10800e04 	addi	r2,r2,56
 802f00c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802f010:	e0bffb17 	ldw	r2,-20(fp)
 802f014:	10800a17 	ldw	r2,40(r2)
 802f018:	10800044 	addi	r2,r2,1
 802f01c:	10c1ffcc 	andi	r3,r2,2047
 802f020:	e0bffb17 	ldw	r2,-20(fp)
 802f024:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 802f028:	003fe206 	br	802efb4 <__alt_data_end+0xfffefbb4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 802f02c:	0001883a 	nop
 802f030:	00000106 	br	802f038 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 802f034:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 802f038:	e0bff917 	ldw	r2,-28(fp)
 802f03c:	10bfffec 	andhi	r2,r2,65535
 802f040:	10000f26 	beq	r2,zero,802f080 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 802f044:	e0bffb17 	ldw	r2,-20(fp)
 802f048:	10c00817 	ldw	r3,32(r2)
 802f04c:	00bfff84 	movi	r2,-2
 802f050:	1886703a 	and	r3,r3,r2
 802f054:	e0bffb17 	ldw	r2,-20(fp)
 802f058:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 802f05c:	e0bffc17 	ldw	r2,-16(fp)
 802f060:	10800104 	addi	r2,r2,4
 802f064:	1007883a 	mov	r3,r2
 802f068:	e0bffb17 	ldw	r2,-20(fp)
 802f06c:	10800817 	ldw	r2,32(r2)
 802f070:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 802f074:	e0bffc17 	ldw	r2,-16(fp)
 802f078:	10800104 	addi	r2,r2,4
 802f07c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 802f080:	e0bffd17 	ldw	r2,-12(fp)
 802f084:	1080800c 	andi	r2,r2,512
 802f088:	103fbe26 	beq	r2,zero,802ef84 <__alt_data_end+0xfffefb84>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 802f08c:	e0bffd17 	ldw	r2,-12(fp)
 802f090:	1004d43a 	srli	r2,r2,16
 802f094:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 802f098:	00001406 	br	802f0ec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 802f09c:	e0bffc17 	ldw	r2,-16(fp)
 802f0a0:	e0fffb17 	ldw	r3,-20(fp)
 802f0a4:	18c00d17 	ldw	r3,52(r3)
 802f0a8:	e13ffb17 	ldw	r4,-20(fp)
 802f0ac:	20c7883a 	add	r3,r4,r3
 802f0b0:	18c20e04 	addi	r3,r3,2104
 802f0b4:	18c00003 	ldbu	r3,0(r3)
 802f0b8:	18c03fcc 	andi	r3,r3,255
 802f0bc:	18c0201c 	xori	r3,r3,128
 802f0c0:	18ffe004 	addi	r3,r3,-128
 802f0c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802f0c8:	e0bffb17 	ldw	r2,-20(fp)
 802f0cc:	10800d17 	ldw	r2,52(r2)
 802f0d0:	10800044 	addi	r2,r2,1
 802f0d4:	10c1ffcc 	andi	r3,r2,2047
 802f0d8:	e0bffb17 	ldw	r2,-20(fp)
 802f0dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 802f0e0:	e0bffa17 	ldw	r2,-24(fp)
 802f0e4:	10bfffc4 	addi	r2,r2,-1
 802f0e8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 802f0ec:	e0bffa17 	ldw	r2,-24(fp)
 802f0f0:	10000526 	beq	r2,zero,802f108 <altera_avalon_jtag_uart_irq+0x1a8>
 802f0f4:	e0bffb17 	ldw	r2,-20(fp)
 802f0f8:	10c00d17 	ldw	r3,52(r2)
 802f0fc:	e0bffb17 	ldw	r2,-20(fp)
 802f100:	10800c17 	ldw	r2,48(r2)
 802f104:	18bfe51e 	bne	r3,r2,802f09c <__alt_data_end+0xfffefc9c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 802f108:	e0bffa17 	ldw	r2,-24(fp)
 802f10c:	103f9d26 	beq	r2,zero,802ef84 <__alt_data_end+0xfffefb84>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 802f110:	e0bffb17 	ldw	r2,-20(fp)
 802f114:	10c00817 	ldw	r3,32(r2)
 802f118:	00bfff44 	movi	r2,-3
 802f11c:	1886703a 	and	r3,r3,r2
 802f120:	e0bffb17 	ldw	r2,-20(fp)
 802f124:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 802f128:	e0bffb17 	ldw	r2,-20(fp)
 802f12c:	10800017 	ldw	r2,0(r2)
 802f130:	10800104 	addi	r2,r2,4
 802f134:	1007883a 	mov	r3,r2
 802f138:	e0bffb17 	ldw	r2,-20(fp)
 802f13c:	10800817 	ldw	r2,32(r2)
 802f140:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 802f144:	e0bffc17 	ldw	r2,-16(fp)
 802f148:	10800104 	addi	r2,r2,4
 802f14c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 802f150:	003f8c06 	br	802ef84 <__alt_data_end+0xfffefb84>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 802f154:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 802f158:	0001883a 	nop
 802f15c:	e037883a 	mov	sp,fp
 802f160:	df000017 	ldw	fp,0(sp)
 802f164:	dec00104 	addi	sp,sp,4
 802f168:	f800283a 	ret

0802f16c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 802f16c:	defff804 	addi	sp,sp,-32
 802f170:	df000715 	stw	fp,28(sp)
 802f174:	df000704 	addi	fp,sp,28
 802f178:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 802f17c:	e0bffb17 	ldw	r2,-20(fp)
 802f180:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 802f184:	e0bff917 	ldw	r2,-28(fp)
 802f188:	10800017 	ldw	r2,0(r2)
 802f18c:	10800104 	addi	r2,r2,4
 802f190:	10800037 	ldwio	r2,0(r2)
 802f194:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 802f198:	e0bffa17 	ldw	r2,-24(fp)
 802f19c:	1081000c 	andi	r2,r2,1024
 802f1a0:	10000b26 	beq	r2,zero,802f1d0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 802f1a4:	e0bff917 	ldw	r2,-28(fp)
 802f1a8:	10800017 	ldw	r2,0(r2)
 802f1ac:	10800104 	addi	r2,r2,4
 802f1b0:	1007883a 	mov	r3,r2
 802f1b4:	e0bff917 	ldw	r2,-28(fp)
 802f1b8:	10800817 	ldw	r2,32(r2)
 802f1bc:	10810014 	ori	r2,r2,1024
 802f1c0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 802f1c4:	e0bff917 	ldw	r2,-28(fp)
 802f1c8:	10000915 	stw	zero,36(r2)
 802f1cc:	00000a06 	br	802f1f8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 802f1d0:	e0bff917 	ldw	r2,-28(fp)
 802f1d4:	10c00917 	ldw	r3,36(r2)
 802f1d8:	00a00034 	movhi	r2,32768
 802f1dc:	10bfff04 	addi	r2,r2,-4
 802f1e0:	10c00536 	bltu	r2,r3,802f1f8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 802f1e4:	e0bff917 	ldw	r2,-28(fp)
 802f1e8:	10800917 	ldw	r2,36(r2)
 802f1ec:	10c00044 	addi	r3,r2,1
 802f1f0:	e0bff917 	ldw	r2,-28(fp)
 802f1f4:	10c00915 	stw	r3,36(r2)
 802f1f8:	d0a6fa17 	ldw	r2,-25624(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 802f1fc:	e037883a 	mov	sp,fp
 802f200:	df000017 	ldw	fp,0(sp)
 802f204:	dec00104 	addi	sp,sp,4
 802f208:	f800283a 	ret

0802f20c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 802f20c:	defffd04 	addi	sp,sp,-12
 802f210:	df000215 	stw	fp,8(sp)
 802f214:	df000204 	addi	fp,sp,8
 802f218:	e13ffe15 	stw	r4,-8(fp)
 802f21c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 802f220:	00000506 	br	802f238 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 802f224:	e0bfff17 	ldw	r2,-4(fp)
 802f228:	1090000c 	andi	r2,r2,16384
 802f22c:	10000226 	beq	r2,zero,802f238 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 802f230:	00bffd44 	movi	r2,-11
 802f234:	00000b06 	br	802f264 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 802f238:	e0bffe17 	ldw	r2,-8(fp)
 802f23c:	10c00d17 	ldw	r3,52(r2)
 802f240:	e0bffe17 	ldw	r2,-8(fp)
 802f244:	10800c17 	ldw	r2,48(r2)
 802f248:	18800526 	beq	r3,r2,802f260 <altera_avalon_jtag_uart_close+0x54>
 802f24c:	e0bffe17 	ldw	r2,-8(fp)
 802f250:	10c00917 	ldw	r3,36(r2)
 802f254:	e0bffe17 	ldw	r2,-8(fp)
 802f258:	10800117 	ldw	r2,4(r2)
 802f25c:	18bff136 	bltu	r3,r2,802f224 <__alt_data_end+0xfffefe24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 802f260:	0005883a 	mov	r2,zero
}
 802f264:	e037883a 	mov	sp,fp
 802f268:	df000017 	ldw	fp,0(sp)
 802f26c:	dec00104 	addi	sp,sp,4
 802f270:	f800283a 	ret

0802f274 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 802f274:	defffa04 	addi	sp,sp,-24
 802f278:	df000515 	stw	fp,20(sp)
 802f27c:	df000504 	addi	fp,sp,20
 802f280:	e13ffd15 	stw	r4,-12(fp)
 802f284:	e17ffe15 	stw	r5,-8(fp)
 802f288:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 802f28c:	00bff9c4 	movi	r2,-25
 802f290:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 802f294:	e0bffe17 	ldw	r2,-8(fp)
 802f298:	10da8060 	cmpeqi	r3,r2,27137
 802f29c:	1800031e 	bne	r3,zero,802f2ac <altera_avalon_jtag_uart_ioctl+0x38>
 802f2a0:	109a80a0 	cmpeqi	r2,r2,27138
 802f2a4:	1000181e 	bne	r2,zero,802f308 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 802f2a8:	00002906 	br	802f350 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 802f2ac:	e0bffd17 	ldw	r2,-12(fp)
 802f2b0:	10c00117 	ldw	r3,4(r2)
 802f2b4:	00a00034 	movhi	r2,32768
 802f2b8:	10bfffc4 	addi	r2,r2,-1
 802f2bc:	18802126 	beq	r3,r2,802f344 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 802f2c0:	e0bfff17 	ldw	r2,-4(fp)
 802f2c4:	10800017 	ldw	r2,0(r2)
 802f2c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 802f2cc:	e0bffc17 	ldw	r2,-16(fp)
 802f2d0:	10800090 	cmplti	r2,r2,2
 802f2d4:	1000061e 	bne	r2,zero,802f2f0 <altera_avalon_jtag_uart_ioctl+0x7c>
 802f2d8:	e0fffc17 	ldw	r3,-16(fp)
 802f2dc:	00a00034 	movhi	r2,32768
 802f2e0:	10bfffc4 	addi	r2,r2,-1
 802f2e4:	18800226 	beq	r3,r2,802f2f0 <altera_avalon_jtag_uart_ioctl+0x7c>
 802f2e8:	e0bffc17 	ldw	r2,-16(fp)
 802f2ec:	00000206 	br	802f2f8 <altera_avalon_jtag_uart_ioctl+0x84>
 802f2f0:	00a00034 	movhi	r2,32768
 802f2f4:	10bfff84 	addi	r2,r2,-2
 802f2f8:	e0fffd17 	ldw	r3,-12(fp)
 802f2fc:	18800115 	stw	r2,4(r3)
      rc = 0;
 802f300:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 802f304:	00000f06 	br	802f344 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 802f308:	e0bffd17 	ldw	r2,-12(fp)
 802f30c:	10c00117 	ldw	r3,4(r2)
 802f310:	00a00034 	movhi	r2,32768
 802f314:	10bfffc4 	addi	r2,r2,-1
 802f318:	18800c26 	beq	r3,r2,802f34c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 802f31c:	e0bffd17 	ldw	r2,-12(fp)
 802f320:	10c00917 	ldw	r3,36(r2)
 802f324:	e0bffd17 	ldw	r2,-12(fp)
 802f328:	10800117 	ldw	r2,4(r2)
 802f32c:	1885803a 	cmpltu	r2,r3,r2
 802f330:	10c03fcc 	andi	r3,r2,255
 802f334:	e0bfff17 	ldw	r2,-4(fp)
 802f338:	10c00015 	stw	r3,0(r2)
      rc = 0;
 802f33c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 802f340:	00000206 	br	802f34c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 802f344:	0001883a 	nop
 802f348:	00000106 	br	802f350 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 802f34c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 802f350:	e0bffb17 	ldw	r2,-20(fp)
}
 802f354:	e037883a 	mov	sp,fp
 802f358:	df000017 	ldw	fp,0(sp)
 802f35c:	dec00104 	addi	sp,sp,4
 802f360:	f800283a 	ret

0802f364 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 802f364:	defff304 	addi	sp,sp,-52
 802f368:	dfc00c15 	stw	ra,48(sp)
 802f36c:	df000b15 	stw	fp,44(sp)
 802f370:	df000b04 	addi	fp,sp,44
 802f374:	e13ffc15 	stw	r4,-16(fp)
 802f378:	e17ffd15 	stw	r5,-12(fp)
 802f37c:	e1bffe15 	stw	r6,-8(fp)
 802f380:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 802f384:	e0bffd17 	ldw	r2,-12(fp)
 802f388:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 802f38c:	00004706 	br	802f4ac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 802f390:	e0bffc17 	ldw	r2,-16(fp)
 802f394:	10800a17 	ldw	r2,40(r2)
 802f398:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 802f39c:	e0bffc17 	ldw	r2,-16(fp)
 802f3a0:	10800b17 	ldw	r2,44(r2)
 802f3a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 802f3a8:	e0fff717 	ldw	r3,-36(fp)
 802f3ac:	e0bff817 	ldw	r2,-32(fp)
 802f3b0:	18800536 	bltu	r3,r2,802f3c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 802f3b4:	e0fff717 	ldw	r3,-36(fp)
 802f3b8:	e0bff817 	ldw	r2,-32(fp)
 802f3bc:	1885c83a 	sub	r2,r3,r2
 802f3c0:	e0bff615 	stw	r2,-40(fp)
 802f3c4:	00000406 	br	802f3d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 802f3c8:	00c20004 	movi	r3,2048
 802f3cc:	e0bff817 	ldw	r2,-32(fp)
 802f3d0:	1885c83a 	sub	r2,r3,r2
 802f3d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 802f3d8:	e0bff617 	ldw	r2,-40(fp)
 802f3dc:	10001e26 	beq	r2,zero,802f458 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 802f3e0:	e0fffe17 	ldw	r3,-8(fp)
 802f3e4:	e0bff617 	ldw	r2,-40(fp)
 802f3e8:	1880022e 	bgeu	r3,r2,802f3f4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 802f3ec:	e0bffe17 	ldw	r2,-8(fp)
 802f3f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 802f3f4:	e0bffc17 	ldw	r2,-16(fp)
 802f3f8:	10c00e04 	addi	r3,r2,56
 802f3fc:	e0bff817 	ldw	r2,-32(fp)
 802f400:	1885883a 	add	r2,r3,r2
 802f404:	e1bff617 	ldw	r6,-40(fp)
 802f408:	100b883a 	mov	r5,r2
 802f40c:	e13ff517 	ldw	r4,-44(fp)
 802f410:	802159c0 	call	802159c <memcpy>
      ptr   += n;
 802f414:	e0fff517 	ldw	r3,-44(fp)
 802f418:	e0bff617 	ldw	r2,-40(fp)
 802f41c:	1885883a 	add	r2,r3,r2
 802f420:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 802f424:	e0fffe17 	ldw	r3,-8(fp)
 802f428:	e0bff617 	ldw	r2,-40(fp)
 802f42c:	1885c83a 	sub	r2,r3,r2
 802f430:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802f434:	e0fff817 	ldw	r3,-32(fp)
 802f438:	e0bff617 	ldw	r2,-40(fp)
 802f43c:	1885883a 	add	r2,r3,r2
 802f440:	10c1ffcc 	andi	r3,r2,2047
 802f444:	e0bffc17 	ldw	r2,-16(fp)
 802f448:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 802f44c:	e0bffe17 	ldw	r2,-8(fp)
 802f450:	00bfcf16 	blt	zero,r2,802f390 <__alt_data_end+0xfffeff90>
 802f454:	00000106 	br	802f45c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 802f458:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 802f45c:	e0fff517 	ldw	r3,-44(fp)
 802f460:	e0bffd17 	ldw	r2,-12(fp)
 802f464:	1880141e 	bne	r3,r2,802f4b8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 802f468:	e0bfff17 	ldw	r2,-4(fp)
 802f46c:	1090000c 	andi	r2,r2,16384
 802f470:	1000131e 	bne	r2,zero,802f4c0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 802f474:	0001883a 	nop
 802f478:	e0bffc17 	ldw	r2,-16(fp)
 802f47c:	10c00a17 	ldw	r3,40(r2)
 802f480:	e0bff717 	ldw	r2,-36(fp)
 802f484:	1880051e 	bne	r3,r2,802f49c <altera_avalon_jtag_uart_read+0x138>
 802f488:	e0bffc17 	ldw	r2,-16(fp)
 802f48c:	10c00917 	ldw	r3,36(r2)
 802f490:	e0bffc17 	ldw	r2,-16(fp)
 802f494:	10800117 	ldw	r2,4(r2)
 802f498:	18bff736 	bltu	r3,r2,802f478 <__alt_data_end+0xffff0078>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 802f49c:	e0bffc17 	ldw	r2,-16(fp)
 802f4a0:	10c00a17 	ldw	r3,40(r2)
 802f4a4:	e0bff717 	ldw	r2,-36(fp)
 802f4a8:	18800726 	beq	r3,r2,802f4c8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 802f4ac:	e0bffe17 	ldw	r2,-8(fp)
 802f4b0:	00bfb716 	blt	zero,r2,802f390 <__alt_data_end+0xfffeff90>
 802f4b4:	00000506 	br	802f4cc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 802f4b8:	0001883a 	nop
 802f4bc:	00000306 	br	802f4cc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 802f4c0:	0001883a 	nop
 802f4c4:	00000106 	br	802f4cc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 802f4c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 802f4cc:	e0fff517 	ldw	r3,-44(fp)
 802f4d0:	e0bffd17 	ldw	r2,-12(fp)
 802f4d4:	18801826 	beq	r3,r2,802f538 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802f4d8:	0005303a 	rdctl	r2,status
 802f4dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802f4e0:	e0fffb17 	ldw	r3,-20(fp)
 802f4e4:	00bfff84 	movi	r2,-2
 802f4e8:	1884703a 	and	r2,r3,r2
 802f4ec:	1001703a 	wrctl	status,r2
  
  return context;
 802f4f0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 802f4f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 802f4f8:	e0bffc17 	ldw	r2,-16(fp)
 802f4fc:	10800817 	ldw	r2,32(r2)
 802f500:	10c00054 	ori	r3,r2,1
 802f504:	e0bffc17 	ldw	r2,-16(fp)
 802f508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 802f50c:	e0bffc17 	ldw	r2,-16(fp)
 802f510:	10800017 	ldw	r2,0(r2)
 802f514:	10800104 	addi	r2,r2,4
 802f518:	1007883a 	mov	r3,r2
 802f51c:	e0bffc17 	ldw	r2,-16(fp)
 802f520:	10800817 	ldw	r2,32(r2)
 802f524:	18800035 	stwio	r2,0(r3)
 802f528:	e0bffa17 	ldw	r2,-24(fp)
 802f52c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802f530:	e0bff917 	ldw	r2,-28(fp)
 802f534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 802f538:	e0fff517 	ldw	r3,-44(fp)
 802f53c:	e0bffd17 	ldw	r2,-12(fp)
 802f540:	18800426 	beq	r3,r2,802f554 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 802f544:	e0fff517 	ldw	r3,-44(fp)
 802f548:	e0bffd17 	ldw	r2,-12(fp)
 802f54c:	1885c83a 	sub	r2,r3,r2
 802f550:	00000606 	br	802f56c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 802f554:	e0bfff17 	ldw	r2,-4(fp)
 802f558:	1090000c 	andi	r2,r2,16384
 802f55c:	10000226 	beq	r2,zero,802f568 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 802f560:	00bffd44 	movi	r2,-11
 802f564:	00000106 	br	802f56c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 802f568:	00bffec4 	movi	r2,-5
}
 802f56c:	e037883a 	mov	sp,fp
 802f570:	dfc00117 	ldw	ra,4(sp)
 802f574:	df000017 	ldw	fp,0(sp)
 802f578:	dec00204 	addi	sp,sp,8
 802f57c:	f800283a 	ret

0802f580 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 802f580:	defff304 	addi	sp,sp,-52
 802f584:	dfc00c15 	stw	ra,48(sp)
 802f588:	df000b15 	stw	fp,44(sp)
 802f58c:	df000b04 	addi	fp,sp,44
 802f590:	e13ffc15 	stw	r4,-16(fp)
 802f594:	e17ffd15 	stw	r5,-12(fp)
 802f598:	e1bffe15 	stw	r6,-8(fp)
 802f59c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 802f5a0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 802f5a4:	e0bffd17 	ldw	r2,-12(fp)
 802f5a8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 802f5ac:	00003706 	br	802f68c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 802f5b0:	e0bffc17 	ldw	r2,-16(fp)
 802f5b4:	10800c17 	ldw	r2,48(r2)
 802f5b8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 802f5bc:	e0bffc17 	ldw	r2,-16(fp)
 802f5c0:	10800d17 	ldw	r2,52(r2)
 802f5c4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 802f5c8:	e0fff917 	ldw	r3,-28(fp)
 802f5cc:	e0bff517 	ldw	r2,-44(fp)
 802f5d0:	1880062e 	bgeu	r3,r2,802f5ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 802f5d4:	e0fff517 	ldw	r3,-44(fp)
 802f5d8:	e0bff917 	ldw	r2,-28(fp)
 802f5dc:	1885c83a 	sub	r2,r3,r2
 802f5e0:	10bfffc4 	addi	r2,r2,-1
 802f5e4:	e0bff615 	stw	r2,-40(fp)
 802f5e8:	00000b06 	br	802f618 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 802f5ec:	e0bff517 	ldw	r2,-44(fp)
 802f5f0:	10000526 	beq	r2,zero,802f608 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 802f5f4:	00c20004 	movi	r3,2048
 802f5f8:	e0bff917 	ldw	r2,-28(fp)
 802f5fc:	1885c83a 	sub	r2,r3,r2
 802f600:	e0bff615 	stw	r2,-40(fp)
 802f604:	00000406 	br	802f618 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 802f608:	00c1ffc4 	movi	r3,2047
 802f60c:	e0bff917 	ldw	r2,-28(fp)
 802f610:	1885c83a 	sub	r2,r3,r2
 802f614:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 802f618:	e0bff617 	ldw	r2,-40(fp)
 802f61c:	10001e26 	beq	r2,zero,802f698 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 802f620:	e0fffe17 	ldw	r3,-8(fp)
 802f624:	e0bff617 	ldw	r2,-40(fp)
 802f628:	1880022e 	bgeu	r3,r2,802f634 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 802f62c:	e0bffe17 	ldw	r2,-8(fp)
 802f630:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 802f634:	e0bffc17 	ldw	r2,-16(fp)
 802f638:	10c20e04 	addi	r3,r2,2104
 802f63c:	e0bff917 	ldw	r2,-28(fp)
 802f640:	1885883a 	add	r2,r3,r2
 802f644:	e1bff617 	ldw	r6,-40(fp)
 802f648:	e17ffd17 	ldw	r5,-12(fp)
 802f64c:	1009883a 	mov	r4,r2
 802f650:	802159c0 	call	802159c <memcpy>
      ptr   += n;
 802f654:	e0fffd17 	ldw	r3,-12(fp)
 802f658:	e0bff617 	ldw	r2,-40(fp)
 802f65c:	1885883a 	add	r2,r3,r2
 802f660:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 802f664:	e0fffe17 	ldw	r3,-8(fp)
 802f668:	e0bff617 	ldw	r2,-40(fp)
 802f66c:	1885c83a 	sub	r2,r3,r2
 802f670:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802f674:	e0fff917 	ldw	r3,-28(fp)
 802f678:	e0bff617 	ldw	r2,-40(fp)
 802f67c:	1885883a 	add	r2,r3,r2
 802f680:	10c1ffcc 	andi	r3,r2,2047
 802f684:	e0bffc17 	ldw	r2,-16(fp)
 802f688:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 802f68c:	e0bffe17 	ldw	r2,-8(fp)
 802f690:	00bfc716 	blt	zero,r2,802f5b0 <__alt_data_end+0xffff01b0>
 802f694:	00000106 	br	802f69c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 802f698:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802f69c:	0005303a 	rdctl	r2,status
 802f6a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802f6a4:	e0fffb17 	ldw	r3,-20(fp)
 802f6a8:	00bfff84 	movi	r2,-2
 802f6ac:	1884703a 	and	r2,r3,r2
 802f6b0:	1001703a 	wrctl	status,r2
  
  return context;
 802f6b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 802f6b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 802f6bc:	e0bffc17 	ldw	r2,-16(fp)
 802f6c0:	10800817 	ldw	r2,32(r2)
 802f6c4:	10c00094 	ori	r3,r2,2
 802f6c8:	e0bffc17 	ldw	r2,-16(fp)
 802f6cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 802f6d0:	e0bffc17 	ldw	r2,-16(fp)
 802f6d4:	10800017 	ldw	r2,0(r2)
 802f6d8:	10800104 	addi	r2,r2,4
 802f6dc:	1007883a 	mov	r3,r2
 802f6e0:	e0bffc17 	ldw	r2,-16(fp)
 802f6e4:	10800817 	ldw	r2,32(r2)
 802f6e8:	18800035 	stwio	r2,0(r3)
 802f6ec:	e0bffa17 	ldw	r2,-24(fp)
 802f6f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802f6f4:	e0bff817 	ldw	r2,-32(fp)
 802f6f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 802f6fc:	e0bffe17 	ldw	r2,-8(fp)
 802f700:	0080100e 	bge	zero,r2,802f744 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 802f704:	e0bfff17 	ldw	r2,-4(fp)
 802f708:	1090000c 	andi	r2,r2,16384
 802f70c:	1000101e 	bne	r2,zero,802f750 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 802f710:	0001883a 	nop
 802f714:	e0bffc17 	ldw	r2,-16(fp)
 802f718:	10c00d17 	ldw	r3,52(r2)
 802f71c:	e0bff517 	ldw	r2,-44(fp)
 802f720:	1880051e 	bne	r3,r2,802f738 <altera_avalon_jtag_uart_write+0x1b8>
 802f724:	e0bffc17 	ldw	r2,-16(fp)
 802f728:	10c00917 	ldw	r3,36(r2)
 802f72c:	e0bffc17 	ldw	r2,-16(fp)
 802f730:	10800117 	ldw	r2,4(r2)
 802f734:	18bff736 	bltu	r3,r2,802f714 <__alt_data_end+0xffff0314>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 802f738:	e0bffc17 	ldw	r2,-16(fp)
 802f73c:	10800917 	ldw	r2,36(r2)
 802f740:	1000051e 	bne	r2,zero,802f758 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 802f744:	e0bffe17 	ldw	r2,-8(fp)
 802f748:	00bfd016 	blt	zero,r2,802f68c <__alt_data_end+0xffff028c>
 802f74c:	00000306 	br	802f75c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 802f750:	0001883a 	nop
 802f754:	00000106 	br	802f75c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 802f758:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 802f75c:	e0fffd17 	ldw	r3,-12(fp)
 802f760:	e0bff717 	ldw	r2,-36(fp)
 802f764:	18800426 	beq	r3,r2,802f778 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 802f768:	e0fffd17 	ldw	r3,-12(fp)
 802f76c:	e0bff717 	ldw	r2,-36(fp)
 802f770:	1885c83a 	sub	r2,r3,r2
 802f774:	00000606 	br	802f790 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 802f778:	e0bfff17 	ldw	r2,-4(fp)
 802f77c:	1090000c 	andi	r2,r2,16384
 802f780:	10000226 	beq	r2,zero,802f78c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 802f784:	00bffd44 	movi	r2,-11
 802f788:	00000106 	br	802f790 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 802f78c:	00bffec4 	movi	r2,-5
}
 802f790:	e037883a 	mov	sp,fp
 802f794:	dfc00117 	ldw	ra,4(sp)
 802f798:	df000017 	ldw	fp,0(sp)
 802f79c:	dec00204 	addi	sp,sp,8
 802f7a0:	f800283a 	ret

0802f7a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 802f7a4:	defffa04 	addi	sp,sp,-24
 802f7a8:	dfc00515 	stw	ra,20(sp)
 802f7ac:	df000415 	stw	fp,16(sp)
 802f7b0:	df000404 	addi	fp,sp,16
 802f7b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 802f7b8:	0007883a 	mov	r3,zero
 802f7bc:	e0bfff17 	ldw	r2,-4(fp)
 802f7c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 802f7c4:	e0bfff17 	ldw	r2,-4(fp)
 802f7c8:	10800104 	addi	r2,r2,4
 802f7cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802f7d0:	0005303a 	rdctl	r2,status
 802f7d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802f7d8:	e0fffd17 	ldw	r3,-12(fp)
 802f7dc:	00bfff84 	movi	r2,-2
 802f7e0:	1884703a 	and	r2,r3,r2
 802f7e4:	1001703a 	wrctl	status,r2
  
  return context;
 802f7e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 802f7ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 802f7f0:	802e7640 	call	802e764 <alt_tick>
 802f7f4:	e0bffc17 	ldw	r2,-16(fp)
 802f7f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802f7fc:	e0bffe17 	ldw	r2,-8(fp)
 802f800:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 802f804:	0001883a 	nop
 802f808:	e037883a 	mov	sp,fp
 802f80c:	dfc00117 	ldw	ra,4(sp)
 802f810:	df000017 	ldw	fp,0(sp)
 802f814:	dec00204 	addi	sp,sp,8
 802f818:	f800283a 	ret

0802f81c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 802f81c:	defff804 	addi	sp,sp,-32
 802f820:	dfc00715 	stw	ra,28(sp)
 802f824:	df000615 	stw	fp,24(sp)
 802f828:	df000604 	addi	fp,sp,24
 802f82c:	e13ffc15 	stw	r4,-16(fp)
 802f830:	e17ffd15 	stw	r5,-12(fp)
 802f834:	e1bffe15 	stw	r6,-8(fp)
 802f838:	e1ffff15 	stw	r7,-4(fp)
 802f83c:	e0bfff17 	ldw	r2,-4(fp)
 802f840:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 802f844:	d0a6fa17 	ldw	r2,-25624(gp)
 802f848:	1000021e 	bne	r2,zero,802f854 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 802f84c:	e0bffb17 	ldw	r2,-20(fp)
 802f850:	d0a6fa15 	stw	r2,-25624(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 802f854:	e0bffc17 	ldw	r2,-16(fp)
 802f858:	10800104 	addi	r2,r2,4
 802f85c:	00c001c4 	movi	r3,7
 802f860:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 802f864:	d8000015 	stw	zero,0(sp)
 802f868:	e1fffc17 	ldw	r7,-16(fp)
 802f86c:	018200f4 	movhi	r6,2051
 802f870:	31bde904 	addi	r6,r6,-2140
 802f874:	e17ffe17 	ldw	r5,-8(fp)
 802f878:	e13ffd17 	ldw	r4,-12(fp)
 802f87c:	8030eb80 	call	8030eb8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 802f880:	0001883a 	nop
 802f884:	e037883a 	mov	sp,fp
 802f888:	dfc00117 	ldw	ra,4(sp)
 802f88c:	df000017 	ldw	fp,0(sp)
 802f890:	dec00204 	addi	sp,sp,8
 802f894:	f800283a 	ret

0802f898 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 802f898:	defffc04 	addi	sp,sp,-16
 802f89c:	dfc00315 	stw	ra,12(sp)
 802f8a0:	df000215 	stw	fp,8(sp)
 802f8a4:	df000204 	addi	fp,sp,8
 802f8a8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 802f8ac:	e0bfff17 	ldw	r2,-4(fp)
 802f8b0:	10800217 	ldw	r2,8(r2)
 802f8b4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 802f8b8:	00000b06 	br	802f8e8 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 802f8bc:	014200f4 	movhi	r5,2051
 802f8c0:	29481504 	addi	r5,r5,8276
 802f8c4:	e13ffe17 	ldw	r4,-8(fp)
 802f8c8:	80282f00 	call	80282f0 <strcmp>
 802f8cc:	1000031e 	bne	r2,zero,802f8dc <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
 802f8d0:	e0bffe17 	ldw	r2,-8(fp)
 802f8d4:	10000005 	stb	zero,0(r2)
			break;
 802f8d8:	00000906 	br	802f900 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 802f8dc:	e0bffe17 	ldw	r2,-8(fp)
 802f8e0:	10800044 	addi	r2,r2,1
 802f8e4:	e0bffe15 	stw	r2,-8(fp)
 802f8e8:	e0bffe17 	ldw	r2,-8(fp)
 802f8ec:	10800003 	ldbu	r2,0(r2)
 802f8f0:	10803fcc 	andi	r2,r2,255
 802f8f4:	1080201c 	xori	r2,r2,128
 802f8f8:	10bfe004 	addi	r2,r2,-128
 802f8fc:	103fef1e 	bne	r2,zero,802f8bc <__alt_data_end+0xffff04bc>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 802f900:	0001883a 	nop
}
 802f904:	e037883a 	mov	sp,fp
 802f908:	dfc00117 	ldw	ra,4(sp)
 802f90c:	df000017 	ldw	fp,0(sp)
 802f910:	dec00204 	addi	sp,sp,8
 802f914:	f800283a 	ret

0802f918 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 802f918:	defffc04 	addi	sp,sp,-16
 802f91c:	dfc00315 	stw	ra,12(sp)
 802f920:	df000215 	stw	fp,8(sp)
 802f924:	df000204 	addi	fp,sp,8
 802f928:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 802f92c:	d1600704 	addi	r5,gp,-32740
 802f930:	e13fff17 	ldw	r4,-4(fp)
 802f934:	8030e080 	call	8030e08 <alt_find_dev>
 802f938:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 802f93c:	e0bffe17 	ldw	r2,-8(fp)
}
 802f940:	e037883a 	mov	sp,fp
 802f944:	dfc00117 	ldw	ra,4(sp)
 802f948:	df000017 	ldw	fp,0(sp)
 802f94c:	dec00204 	addi	sp,sp,8
 802f950:	f800283a 	ret

0802f954 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 802f954:	defffa04 	addi	sp,sp,-24
 802f958:	df000515 	stw	fp,20(sp)
 802f95c:	df000504 	addi	fp,sp,20
 802f960:	e13ffc15 	stw	r4,-16(fp)
 802f964:	2805883a 	mov	r2,r5
 802f968:	e1bffe15 	stw	r6,-8(fp)
 802f96c:	e1ffff15 	stw	r7,-4(fp)
 802f970:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 802f974:	e0bffc17 	ldw	r2,-16(fp)
 802f978:	10800c17 	ldw	r2,48(r2)
 802f97c:	e0fffe17 	ldw	r3,-8(fp)
 802f980:	1880042e 	bgeu	r3,r2,802f994 <alt_up_char_buffer_draw+0x40>
 802f984:	e0bffc17 	ldw	r2,-16(fp)
 802f988:	10800d17 	ldw	r2,52(r2)
 802f98c:	e0ffff17 	ldw	r3,-4(fp)
 802f990:	18800236 	bltu	r3,r2,802f99c <alt_up_char_buffer_draw+0x48>
		return -1;
 802f994:	00bfffc4 	movi	r2,-1
 802f998:	00001d06 	br	802fa10 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 802f99c:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 802f9a0:	e0bffc17 	ldw	r2,-16(fp)
 802f9a4:	10c00f17 	ldw	r3,60(r2)
 802f9a8:	e0bffe17 	ldw	r2,-8(fp)
 802f9ac:	1886703a 	and	r3,r3,r2
 802f9b0:	e0bffc17 	ldw	r2,-16(fp)
 802f9b4:	10800e17 	ldw	r2,56(r2)
 802f9b8:	1884983a 	sll	r2,r3,r2
 802f9bc:	e0fffb17 	ldw	r3,-20(fp)
 802f9c0:	1884b03a 	or	r2,r3,r2
 802f9c4:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 802f9c8:	e0bffc17 	ldw	r2,-16(fp)
 802f9cc:	10c01117 	ldw	r3,68(r2)
 802f9d0:	e0bfff17 	ldw	r2,-4(fp)
 802f9d4:	1886703a 	and	r3,r3,r2
 802f9d8:	e0bffc17 	ldw	r2,-16(fp)
 802f9dc:	10801017 	ldw	r2,64(r2)
 802f9e0:	1884983a 	sll	r2,r3,r2
 802f9e4:	e0fffb17 	ldw	r3,-20(fp)
 802f9e8:	1884b03a 	or	r2,r3,r2
 802f9ec:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 802f9f0:	e0bffc17 	ldw	r2,-16(fp)
 802f9f4:	10c00b17 	ldw	r3,44(r2)
 802f9f8:	e0bffb17 	ldw	r2,-20(fp)
 802f9fc:	1885883a 	add	r2,r3,r2
 802fa00:	1007883a 	mov	r3,r2
 802fa04:	e0bffd03 	ldbu	r2,-12(fp)
 802fa08:	18800025 	stbio	r2,0(r3)

	return 0;
 802fa0c:	0005883a 	mov	r2,zero
}
 802fa10:	e037883a 	mov	sp,fp
 802fa14:	df000017 	ldw	fp,0(sp)
 802fa18:	dec00104 	addi	sp,sp,4
 802fa1c:	f800283a 	ret

0802fa20 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 802fa20:	defffa04 	addi	sp,sp,-24
 802fa24:	df000515 	stw	fp,20(sp)
 802fa28:	df000504 	addi	fp,sp,20
 802fa2c:	e13ffc15 	stw	r4,-16(fp)
 802fa30:	e17ffd15 	stw	r5,-12(fp)
 802fa34:	e1bffe15 	stw	r6,-8(fp)
 802fa38:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 802fa3c:	e0bffc17 	ldw	r2,-16(fp)
 802fa40:	10800c17 	ldw	r2,48(r2)
 802fa44:	e0fffe17 	ldw	r3,-8(fp)
 802fa48:	1880042e 	bgeu	r3,r2,802fa5c <alt_up_char_buffer_string+0x3c>
 802fa4c:	e0bffc17 	ldw	r2,-16(fp)
 802fa50:	10800d17 	ldw	r2,52(r2)
 802fa54:	e0ffff17 	ldw	r3,-4(fp)
 802fa58:	18800236 	bltu	r3,r2,802fa64 <alt_up_char_buffer_string+0x44>
		return -1;
 802fa5c:	00bfffc4 	movi	r2,-1
 802fa60:	00002a06 	br	802fb0c <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
 802fa64:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 802fa68:	e0bffc17 	ldw	r2,-16(fp)
 802fa6c:	10801017 	ldw	r2,64(r2)
 802fa70:	e0ffff17 	ldw	r3,-4(fp)
 802fa74:	1886983a 	sll	r3,r3,r2
 802fa78:	e0bffe17 	ldw	r2,-8(fp)
 802fa7c:	1885883a 	add	r2,r3,r2
 802fa80:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 802fa84:	00001a06 	br	802faf0 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 802fa88:	e0bffc17 	ldw	r2,-16(fp)
 802fa8c:	10c00b17 	ldw	r3,44(r2)
 802fa90:	e0bffb17 	ldw	r2,-20(fp)
 802fa94:	1885883a 	add	r2,r3,r2
 802fa98:	1007883a 	mov	r3,r2
 802fa9c:	e0bffd17 	ldw	r2,-12(fp)
 802faa0:	10800003 	ldbu	r2,0(r2)
 802faa4:	10803fcc 	andi	r2,r2,255
 802faa8:	1080201c 	xori	r2,r2,128
 802faac:	10bfe004 	addi	r2,r2,-128
 802fab0:	18800025 	stbio	r2,0(r3)
		++ptr;
 802fab4:	e0bffd17 	ldw	r2,-12(fp)
 802fab8:	10800044 	addi	r2,r2,1
 802fabc:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 802fac0:	e0bffe17 	ldw	r2,-8(fp)
 802fac4:	10800044 	addi	r2,r2,1
 802fac8:	e0bffe15 	stw	r2,-8(fp)
 802facc:	e0bffc17 	ldw	r2,-16(fp)
 802fad0:	10800c17 	ldw	r2,48(r2)
 802fad4:	e0fffe17 	ldw	r3,-8(fp)
 802fad8:	18800236 	bltu	r3,r2,802fae4 <alt_up_char_buffer_string+0xc4>
			return -1;
 802fadc:	00bfffc4 	movi	r2,-1
 802fae0:	00000a06 	br	802fb0c <alt_up_char_buffer_string+0xec>
		++offset;
 802fae4:	e0bffb17 	ldw	r2,-20(fp)
 802fae8:	10800044 	addi	r2,r2,1
 802faec:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 802faf0:	e0bffd17 	ldw	r2,-12(fp)
 802faf4:	10800003 	ldbu	r2,0(r2)
 802faf8:	10803fcc 	andi	r2,r2,255
 802fafc:	1080201c 	xori	r2,r2,128
 802fb00:	10bfe004 	addi	r2,r2,-128
 802fb04:	103fe01e 	bne	r2,zero,802fa88 <__alt_data_end+0xffff0688>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 802fb08:	0005883a 	mov	r2,zero
}
 802fb0c:	e037883a 	mov	sp,fp
 802fb10:	df000017 	ldw	fp,0(sp)
 802fb14:	dec00104 	addi	sp,sp,4
 802fb18:	f800283a 	ret

0802fb1c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 802fb1c:	defffe04 	addi	sp,sp,-8
 802fb20:	df000115 	stw	fp,4(sp)
 802fb24:	df000104 	addi	fp,sp,4
 802fb28:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 802fb2c:	e0bfff17 	ldw	r2,-4(fp)
 802fb30:	10800a17 	ldw	r2,40(r2)
 802fb34:	10800084 	addi	r2,r2,2
 802fb38:	1007883a 	mov	r3,r2
 802fb3c:	00800044 	movi	r2,1
 802fb40:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 802fb44:	0001883a 	nop
 802fb48:	e0bfff17 	ldw	r2,-4(fp)
 802fb4c:	10800a17 	ldw	r2,40(r2)
 802fb50:	10800084 	addi	r2,r2,2
 802fb54:	10800023 	ldbuio	r2,0(r2)
 802fb58:	10803fcc 	andi	r2,r2,255
 802fb5c:	1080004c 	andi	r2,r2,1
 802fb60:	103ff91e 	bne	r2,zero,802fb48 <__alt_data_end+0xffff0748>
	return 0;
 802fb64:	0005883a 	mov	r2,zero
}
 802fb68:	e037883a 	mov	sp,fp
 802fb6c:	df000017 	ldw	fp,0(sp)
 802fb70:	dec00104 	addi	sp,sp,4
 802fb74:	f800283a 	ret

0802fb78 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 802fb78:	defffc04 	addi	sp,sp,-16
 802fb7c:	dfc00315 	stw	ra,12(sp)
 802fb80:	df000215 	stw	fp,8(sp)
 802fb84:	df000204 	addi	fp,sp,8
 802fb88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 802fb8c:	d1600704 	addi	r5,gp,-32740
 802fb90:	e13fff17 	ldw	r4,-4(fp)
 802fb94:	8030e080 	call	8030e08 <alt_find_dev>
 802fb98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 802fb9c:	e0bffe17 	ldw	r2,-8(fp)
}
 802fba0:	e037883a 	mov	sp,fp
 802fba4:	dfc00117 	ldw	ra,4(sp)
 802fba8:	df000017 	ldw	fp,0(sp)
 802fbac:	dec00204 	addi	sp,sp,8
 802fbb0:	f800283a 	ret

0802fbb4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 802fbb4:	defff904 	addi	sp,sp,-28
 802fbb8:	dfc00615 	stw	ra,24(sp)
 802fbbc:	df000515 	stw	fp,20(sp)
 802fbc0:	df000504 	addi	fp,sp,20
 802fbc4:	e13ffc15 	stw	r4,-16(fp)
 802fbc8:	e17ffd15 	stw	r5,-12(fp)
 802fbcc:	e1bffe15 	stw	r6,-8(fp)
 802fbd0:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 802fbd4:	e0bffc17 	ldw	r2,-16(fp)
 802fbd8:	10800f17 	ldw	r2,60(r2)
 802fbdc:	e0fffe17 	ldw	r3,-8(fp)
 802fbe0:	1880042e 	bgeu	r3,r2,802fbf4 <alt_up_pixel_buffer_dma_draw+0x40>
 802fbe4:	e0bffc17 	ldw	r2,-16(fp)
 802fbe8:	10801017 	ldw	r2,64(r2)
 802fbec:	e0ffff17 	ldw	r3,-4(fp)
 802fbf0:	18800236 	bltu	r3,r2,802fbfc <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 802fbf4:	00bfffc4 	movi	r2,-1
 802fbf8:	00005306 	br	802fd48 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 802fbfc:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 802fc00:	e0bffc17 	ldw	r2,-16(fp)
 802fc04:	10800d17 	ldw	r2,52(r2)
 802fc08:	1000151e 	bne	r2,zero,802fc60 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 802fc0c:	e0bffc17 	ldw	r2,-16(fp)
 802fc10:	10c01217 	ldw	r3,72(r2)
 802fc14:	e0bffe17 	ldw	r2,-8(fp)
 802fc18:	1886703a 	and	r3,r3,r2
 802fc1c:	e0bffc17 	ldw	r2,-16(fp)
 802fc20:	10801117 	ldw	r2,68(r2)
 802fc24:	1884983a 	sll	r2,r3,r2
 802fc28:	e0fffb17 	ldw	r3,-20(fp)
 802fc2c:	1885883a 	add	r2,r3,r2
 802fc30:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 802fc34:	e0bffc17 	ldw	r2,-16(fp)
 802fc38:	10c01417 	ldw	r3,80(r2)
 802fc3c:	e0bfff17 	ldw	r2,-4(fp)
 802fc40:	1886703a 	and	r3,r3,r2
 802fc44:	e0bffc17 	ldw	r2,-16(fp)
 802fc48:	10801317 	ldw	r2,76(r2)
 802fc4c:	1884983a 	sll	r2,r3,r2
 802fc50:	e0fffb17 	ldw	r3,-20(fp)
 802fc54:	1885883a 	add	r2,r3,r2
 802fc58:	e0bffb15 	stw	r2,-20(fp)
 802fc5c:	00001a06 	br	802fcc8 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 802fc60:	e0bffc17 	ldw	r2,-16(fp)
 802fc64:	10c01217 	ldw	r3,72(r2)
 802fc68:	e0bffe17 	ldw	r2,-8(fp)
 802fc6c:	1886703a 	and	r3,r3,r2
 802fc70:	e0bffc17 	ldw	r2,-16(fp)
 802fc74:	10801117 	ldw	r2,68(r2)
 802fc78:	1884983a 	sll	r2,r3,r2
 802fc7c:	e0fffb17 	ldw	r3,-20(fp)
 802fc80:	1885883a 	add	r2,r3,r2
 802fc84:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 802fc88:	e0bffc17 	ldw	r2,-16(fp)
 802fc8c:	10c01417 	ldw	r3,80(r2)
 802fc90:	e0bfff17 	ldw	r2,-4(fp)
 802fc94:	1886703a 	and	r3,r3,r2
 802fc98:	e0bffc17 	ldw	r2,-16(fp)
 802fc9c:	10800f17 	ldw	r2,60(r2)
 802fca0:	100b883a 	mov	r5,r2
 802fca4:	1809883a 	mov	r4,r3
 802fca8:	80214e80 	call	80214e8 <__mulsi3>
 802fcac:	1007883a 	mov	r3,r2
 802fcb0:	e0bffc17 	ldw	r2,-16(fp)
 802fcb4:	10801117 	ldw	r2,68(r2)
 802fcb8:	1884983a 	sll	r2,r3,r2
 802fcbc:	e0fffb17 	ldw	r3,-20(fp)
 802fcc0:	1885883a 	add	r2,r3,r2
 802fcc4:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 802fcc8:	e0bffc17 	ldw	r2,-16(fp)
 802fccc:	10800e17 	ldw	r2,56(r2)
 802fcd0:	10800058 	cmpnei	r2,r2,1
 802fcd4:	1000081e 	bne	r2,zero,802fcf8 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 802fcd8:	e0bffc17 	ldw	r2,-16(fp)
 802fcdc:	10c00c17 	ldw	r3,48(r2)
 802fce0:	e0bffb17 	ldw	r2,-20(fp)
 802fce4:	1885883a 	add	r2,r3,r2
 802fce8:	1007883a 	mov	r3,r2
 802fcec:	e0bffd17 	ldw	r2,-12(fp)
 802fcf0:	18800025 	stbio	r2,0(r3)
 802fcf4:	00001306 	br	802fd44 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 802fcf8:	e0bffc17 	ldw	r2,-16(fp)
 802fcfc:	10800e17 	ldw	r2,56(r2)
 802fd00:	10800098 	cmpnei	r2,r2,2
 802fd04:	1000081e 	bne	r2,zero,802fd28 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 802fd08:	e0bffc17 	ldw	r2,-16(fp)
 802fd0c:	10c00c17 	ldw	r3,48(r2)
 802fd10:	e0bffb17 	ldw	r2,-20(fp)
 802fd14:	1885883a 	add	r2,r3,r2
 802fd18:	1007883a 	mov	r3,r2
 802fd1c:	e0bffd17 	ldw	r2,-12(fp)
 802fd20:	1880002d 	sthio	r2,0(r3)
 802fd24:	00000706 	br	802fd44 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 802fd28:	e0bffc17 	ldw	r2,-16(fp)
 802fd2c:	10c00c17 	ldw	r3,48(r2)
 802fd30:	e0bffb17 	ldw	r2,-20(fp)
 802fd34:	1885883a 	add	r2,r3,r2
 802fd38:	1007883a 	mov	r3,r2
 802fd3c:	e0bffd17 	ldw	r2,-12(fp)
 802fd40:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 802fd44:	0005883a 	mov	r2,zero
}
 802fd48:	e037883a 	mov	sp,fp
 802fd4c:	dfc00117 	ldw	ra,4(sp)
 802fd50:	df000017 	ldw	fp,0(sp)
 802fd54:	dec00204 	addi	sp,sp,8
 802fd58:	f800283a 	ret

0802fd5c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 802fd5c:	defffd04 	addi	sp,sp,-12
 802fd60:	df000215 	stw	fp,8(sp)
 802fd64:	df000204 	addi	fp,sp,8
 802fd68:	e13ffe15 	stw	r4,-8(fp)
 802fd6c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 802fd70:	e0bffe17 	ldw	r2,-8(fp)
 802fd74:	10800a17 	ldw	r2,40(r2)
 802fd78:	10800104 	addi	r2,r2,4
 802fd7c:	1007883a 	mov	r3,r2
 802fd80:	e0bfff17 	ldw	r2,-4(fp)
 802fd84:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 802fd88:	e0bffe17 	ldw	r2,-8(fp)
 802fd8c:	10800a17 	ldw	r2,40(r2)
 802fd90:	10800104 	addi	r2,r2,4
 802fd94:	10800037 	ldwio	r2,0(r2)
 802fd98:	1007883a 	mov	r3,r2
 802fd9c:	e0bffe17 	ldw	r2,-8(fp)
 802fda0:	10c00c15 	stw	r3,48(r2)
	return 0;
 802fda4:	0005883a 	mov	r2,zero
}
 802fda8:	e037883a 	mov	sp,fp
 802fdac:	df000017 	ldw	fp,0(sp)
 802fdb0:	dec00104 	addi	sp,sp,4
 802fdb4:	f800283a 	ret

0802fdb8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 802fdb8:	defffd04 	addi	sp,sp,-12
 802fdbc:	df000215 	stw	fp,8(sp)
 802fdc0:	dc000115 	stw	r16,4(sp)
 802fdc4:	df000204 	addi	fp,sp,8
 802fdc8:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 802fdcc:	e0bffe17 	ldw	r2,-8(fp)
 802fdd0:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 802fdd4:	e0bffe17 	ldw	r2,-8(fp)
 802fdd8:	10800a17 	ldw	r2,40(r2)
 802fddc:	1007883a 	mov	r3,r2
 802fde0:	00800044 	movi	r2,1
 802fde4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 802fde8:	e0bffe17 	ldw	r2,-8(fp)
 802fdec:	10c00b17 	ldw	r3,44(r2)
 802fdf0:	e0bffe17 	ldw	r2,-8(fp)
 802fdf4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 802fdf8:	e0bffe17 	ldw	r2,-8(fp)
 802fdfc:	14000b15 	stw	r16,44(r2)
	return 0;
 802fe00:	0005883a 	mov	r2,zero
}
 802fe04:	e6ffff04 	addi	sp,fp,-4
 802fe08:	df000117 	ldw	fp,4(sp)
 802fe0c:	dc000017 	ldw	r16,0(sp)
 802fe10:	dec00204 	addi	sp,sp,8
 802fe14:	f800283a 	ret

0802fe18 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 802fe18:	defffe04 	addi	sp,sp,-8
 802fe1c:	df000115 	stw	fp,4(sp)
 802fe20:	df000104 	addi	fp,sp,4
 802fe24:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 802fe28:	e0bfff17 	ldw	r2,-4(fp)
 802fe2c:	10800a17 	ldw	r2,40(r2)
 802fe30:	10800304 	addi	r2,r2,12
 802fe34:	10800037 	ldwio	r2,0(r2)
 802fe38:	1080004c 	andi	r2,r2,1
}
 802fe3c:	e037883a 	mov	sp,fp
 802fe40:	df000017 	ldw	fp,0(sp)
 802fe44:	dec00104 	addi	sp,sp,4
 802fe48:	f800283a 	ret

0802fe4c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 802fe4c:	defff604 	addi	sp,sp,-40
 802fe50:	dfc00915 	stw	ra,36(sp)
 802fe54:	df000815 	stw	fp,32(sp)
 802fe58:	dd400715 	stw	r21,28(sp)
 802fe5c:	dd000615 	stw	r20,24(sp)
 802fe60:	dcc00515 	stw	r19,20(sp)
 802fe64:	dc800415 	stw	r18,16(sp)
 802fe68:	dc400315 	stw	r17,12(sp)
 802fe6c:	dc000215 	stw	r16,8(sp)
 802fe70:	df000804 	addi	fp,sp,32
 802fe74:	e13ff815 	stw	r4,-32(fp)
 802fe78:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 802fe7c:	e0bff917 	ldw	r2,-28(fp)
 802fe80:	10800058 	cmpnei	r2,r2,1
 802fe84:	1000031e 	bne	r2,zero,802fe94 <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 802fe88:	e0bff817 	ldw	r2,-32(fp)
 802fe8c:	14400c17 	ldw	r17,48(r2)
 802fe90:	00000206 	br	802fe9c <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 802fe94:	e0bff817 	ldw	r2,-32(fp)
 802fe98:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 802fe9c:	e0bff817 	ldw	r2,-32(fp)
 802fea0:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 802fea4:	e0bff817 	ldw	r2,-32(fp)
 802fea8:	10800e17 	ldw	r2,56(r2)
 802feac:	10800098 	cmpnei	r2,r2,2
 802feb0:	1000031e 	bne	r2,zero,802fec0 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 802feb4:	8405883a 	add	r2,r16,r16
 802feb8:	1021883a 	mov	r16,r2
 802febc:	00000306 	br	802fecc <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 802fec0:	8405883a 	add	r2,r16,r16
 802fec4:	1085883a 	add	r2,r2,r2
 802fec8:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 802fecc:	e0bff817 	ldw	r2,-32(fp)
 802fed0:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 802fed4:	e0bff817 	ldw	r2,-32(fp)
 802fed8:	10800d17 	ldw	r2,52(r2)
 802fedc:	1000111e 	bne	r2,zero,802ff24 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 802fee0:	e0bff817 	ldw	r2,-32(fp)
 802fee4:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 802fee8:	0029883a 	mov	r20,zero
 802feec:	00000b06 	br	802ff1c <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 802fef0:	0025883a 	mov	r18,zero
 802fef4:	00000406 	br	802ff08 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 802fef8:	9445883a 	add	r2,r18,r17
 802fefc:	0007883a 	mov	r3,zero
 802ff00:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 802ff04:	94800104 	addi	r18,r18,4
 802ff08:	943ffb36 	bltu	r18,r16,802fef8 <__alt_data_end+0xffff0af8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 802ff0c:	00800044 	movi	r2,1
 802ff10:	1544983a 	sll	r2,r2,r21
 802ff14:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 802ff18:	a5000044 	addi	r20,r20,1
 802ff1c:	a4fff436 	bltu	r20,r19,802fef0 <__alt_data_end+0xffff0af0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 802ff20:	00000d06 	br	802ff58 <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 802ff24:	800b883a 	mov	r5,r16
 802ff28:	9809883a 	mov	r4,r19
 802ff2c:	80214e80 	call	80214e8 <__mulsi3>
 802ff30:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 802ff34:	0021883a 	mov	r16,zero
 802ff38:	00000506 	br	802ff50 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 802ff3c:	8005883a 	mov	r2,r16
 802ff40:	1445883a 	add	r2,r2,r17
 802ff44:	0007883a 	mov	r3,zero
 802ff48:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 802ff4c:	84000104 	addi	r16,r16,4
 802ff50:	8005883a 	mov	r2,r16
 802ff54:	14fff936 	bltu	r2,r19,802ff3c <__alt_data_end+0xffff0b3c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 802ff58:	0001883a 	nop
 802ff5c:	e6fffa04 	addi	sp,fp,-24
 802ff60:	dfc00717 	ldw	ra,28(sp)
 802ff64:	df000617 	ldw	fp,24(sp)
 802ff68:	dd400517 	ldw	r21,20(sp)
 802ff6c:	dd000417 	ldw	r20,16(sp)
 802ff70:	dcc00317 	ldw	r19,12(sp)
 802ff74:	dc800217 	ldw	r18,8(sp)
 802ff78:	dc400117 	ldw	r17,4(sp)
 802ff7c:	dc000017 	ldw	r16,0(sp)
 802ff80:	dec00804 	addi	sp,sp,32
 802ff84:	f800283a 	ret

0802ff88 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 802ff88:	defff204 	addi	sp,sp,-56
 802ff8c:	dfc00d15 	stw	ra,52(sp)
 802ff90:	df000c15 	stw	fp,48(sp)
 802ff94:	ddc00b15 	stw	r23,44(sp)
 802ff98:	dd800a15 	stw	r22,40(sp)
 802ff9c:	dd400915 	stw	r21,36(sp)
 802ffa0:	dd000815 	stw	r20,32(sp)
 802ffa4:	dcc00715 	stw	r19,28(sp)
 802ffa8:	dc800615 	stw	r18,24(sp)
 802ffac:	dc400515 	stw	r17,20(sp)
 802ffb0:	dc000415 	stw	r16,16(sp)
 802ffb4:	df000c04 	addi	fp,sp,48
 802ffb8:	e13ff415 	stw	r4,-48(fp)
 802ffbc:	e17ff515 	stw	r5,-44(fp)
 802ffc0:	e1bff615 	stw	r6,-40(fp)
 802ffc4:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 802ffc8:	e0bff417 	ldw	r2,-48(fp)
 802ffcc:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 802ffd0:	e0bff417 	ldw	r2,-48(fp)
 802ffd4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 802ffd8:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 802ffdc:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 802ffe0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 802ffe4:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 802ffe8:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 802ffec:	a580032e 	bgeu	r20,r22,802fffc <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 802fff0:	b02b883a 	mov	r21,r22
		l_x = r_x;
 802fff4:	a02d883a 	mov	r22,r20
		r_x = temp;
 802fff8:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 802fffc:	9c40032e 	bgeu	r19,r17,803000c <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 8030000:	882b883a 	mov	r21,r17
		t_y = b_y;
 8030004:	9823883a 	mov	r17,r19
		b_y = temp;
 8030008:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 803000c:	b4808f2e 	bgeu	r22,r18,803024c <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 8030010:	8c008e2e 	bgeu	r17,r16,803024c <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8030014:	a4800136 	bltu	r20,r18,803001c <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 8030018:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 803001c:	9c000136 	bltu	r19,r16,8030024 <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8030020:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8030024:	e0800417 	ldw	r2,16(fp)
 8030028:	10800058 	cmpnei	r2,r2,1
 803002c:	1000031e 	bne	r2,zero,803003c <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 8030030:	e0bff417 	ldw	r2,-48(fp)
 8030034:	14000c17 	ldw	r16,48(r2)
 8030038:	00000206 	br	8030044 <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 803003c:	e0bff417 	ldw	r2,-48(fp)
 8030040:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8030044:	e0bff417 	ldw	r2,-48(fp)
 8030048:	10800d17 	ldw	r2,52(r2)
 803004c:	10003c1e 	bne	r2,zero,8030140 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8030050:	e0bff417 	ldw	r2,-48(fp)
 8030054:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8030058:	8d44983a 	sll	r2,r17,r21
 803005c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8030060:	e0bff417 	ldw	r2,-48(fp)
 8030064:	10800e17 	ldw	r2,56(r2)
 8030068:	10800058 	cmpnei	r2,r2,1
 803006c:	10000f1e 	bne	r2,zero,80300ac <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 8030070:	8825883a 	mov	r18,r17
 8030074:	00000b06 	br	80300a4 <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 8030078:	b023883a 	mov	r17,r22
 803007c:	00000406 	br	8030090 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8030080:	8c05883a 	add	r2,r17,r16
 8030084:	b807883a 	mov	r3,r23
 8030088:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 803008c:	8c400044 	addi	r17,r17,1
 8030090:	a47ffb2e 	bgeu	r20,r17,8030080 <__alt_data_end+0xffff0c80>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8030094:	00800044 	movi	r2,1
 8030098:	1544983a 	sll	r2,r2,r21
 803009c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80300a0:	94800044 	addi	r18,r18,1
 80300a4:	9cbff42e 	bgeu	r19,r18,8030078 <__alt_data_end+0xffff0c78>
 80300a8:	00006906 	br	8030250 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80300ac:	e0bff417 	ldw	r2,-48(fp)
 80300b0:	10800e17 	ldw	r2,56(r2)
 80300b4:	10800098 	cmpnei	r2,r2,2
 80300b8:	1000101e 	bne	r2,zero,80300fc <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 80300bc:	8825883a 	mov	r18,r17
 80300c0:	00000c06 	br	80300f4 <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 80300c4:	b023883a 	mov	r17,r22
 80300c8:	00000506 	br	80300e0 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80300cc:	8c45883a 	add	r2,r17,r17
 80300d0:	1405883a 	add	r2,r2,r16
 80300d4:	b807883a 	mov	r3,r23
 80300d8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80300dc:	8c400044 	addi	r17,r17,1
 80300e0:	a47ffa2e 	bgeu	r20,r17,80300cc <__alt_data_end+0xffff0ccc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 80300e4:	00800044 	movi	r2,1
 80300e8:	1544983a 	sll	r2,r2,r21
 80300ec:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80300f0:	94800044 	addi	r18,r18,1
 80300f4:	9cbff32e 	bgeu	r19,r18,80300c4 <__alt_data_end+0xffff0cc4>
 80300f8:	00005506 	br	8030250 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80300fc:	8825883a 	mov	r18,r17
 8030100:	00000d06 	br	8030138 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 8030104:	b023883a 	mov	r17,r22
 8030108:	00000606 	br	8030124 <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 803010c:	8c45883a 	add	r2,r17,r17
 8030110:	1085883a 	add	r2,r2,r2
 8030114:	1405883a 	add	r2,r2,r16
 8030118:	b807883a 	mov	r3,r23
 803011c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8030120:	8c400044 	addi	r17,r17,1
 8030124:	a47ff92e 	bgeu	r20,r17,803010c <__alt_data_end+0xffff0d0c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8030128:	00800044 	movi	r2,1
 803012c:	1544983a 	sll	r2,r2,r21
 8030130:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8030134:	94800044 	addi	r18,r18,1
 8030138:	9cbff22e 	bgeu	r19,r18,8030104 <__alt_data_end+0xffff0d04>
 803013c:	00004406 	br	8030250 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8030140:	e0bff417 	ldw	r2,-48(fp)
 8030144:	10800e17 	ldw	r2,56(r2)
 8030148:	10800058 	cmpnei	r2,r2,1
 803014c:	1000111e 	bne	r2,zero,8030194 <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 8030150:	900b883a 	mov	r5,r18
 8030154:	8809883a 	mov	r4,r17
 8030158:	80214e80 	call	80214e8 <__mulsi3>
 803015c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8030160:	882b883a 	mov	r21,r17
 8030164:	00000906 	br	803018c <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 8030168:	b023883a 	mov	r17,r22
 803016c:	00000406 	br	8030180 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8030170:	8c05883a 	add	r2,r17,r16
 8030174:	b807883a 	mov	r3,r23
 8030178:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 803017c:	8c400044 	addi	r17,r17,1
 8030180:	a47ffb2e 	bgeu	r20,r17,8030170 <__alt_data_end+0xffff0d70>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8030184:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8030188:	ad400044 	addi	r21,r21,1
 803018c:	9d7ff62e 	bgeu	r19,r21,8030168 <__alt_data_end+0xffff0d68>
 8030190:	00002f06 	br	8030250 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8030194:	e0bff417 	ldw	r2,-48(fp)
 8030198:	10800e17 	ldw	r2,56(r2)
 803019c:	10800098 	cmpnei	r2,r2,2
 80301a0:	1000141e 	bne	r2,zero,80301f4 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 80301a4:	9485883a 	add	r2,r18,r18
 80301a8:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 80301ac:	900b883a 	mov	r5,r18
 80301b0:	8809883a 	mov	r4,r17
 80301b4:	80214e80 	call	80214e8 <__mulsi3>
 80301b8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80301bc:	882b883a 	mov	r21,r17
 80301c0:	00000a06 	br	80301ec <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 80301c4:	b023883a 	mov	r17,r22
 80301c8:	00000506 	br	80301e0 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80301cc:	8c45883a 	add	r2,r17,r17
 80301d0:	1405883a 	add	r2,r2,r16
 80301d4:	b807883a 	mov	r3,r23
 80301d8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80301dc:	8c400044 	addi	r17,r17,1
 80301e0:	a47ffa2e 	bgeu	r20,r17,80301cc <__alt_data_end+0xffff0dcc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 80301e4:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80301e8:	ad400044 	addi	r21,r21,1
 80301ec:	9d7ff52e 	bgeu	r19,r21,80301c4 <__alt_data_end+0xffff0dc4>
 80301f0:	00001706 	br	8030250 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80301f4:	9485883a 	add	r2,r18,r18
 80301f8:	1085883a 	add	r2,r2,r2
 80301fc:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8030200:	900b883a 	mov	r5,r18
 8030204:	8809883a 	mov	r4,r17
 8030208:	80214e80 	call	80214e8 <__mulsi3>
 803020c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8030210:	882b883a 	mov	r21,r17
 8030214:	00000b06 	br	8030244 <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 8030218:	b023883a 	mov	r17,r22
 803021c:	00000606 	br	8030238 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8030220:	8c45883a 	add	r2,r17,r17
 8030224:	1085883a 	add	r2,r2,r2
 8030228:	1405883a 	add	r2,r2,r16
 803022c:	b807883a 	mov	r3,r23
 8030230:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8030234:	8c400044 	addi	r17,r17,1
 8030238:	a47ff92e 	bgeu	r20,r17,8030220 <__alt_data_end+0xffff0e20>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 803023c:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8030240:	ad400044 	addi	r21,r21,1
 8030244:	9d7ff42e 	bgeu	r19,r21,8030218 <__alt_data_end+0xffff0e18>
 8030248:	00000106 	br	8030250 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 803024c:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8030250:	e6fff804 	addi	sp,fp,-32
 8030254:	dfc00917 	ldw	ra,36(sp)
 8030258:	df000817 	ldw	fp,32(sp)
 803025c:	ddc00717 	ldw	r23,28(sp)
 8030260:	dd800617 	ldw	r22,24(sp)
 8030264:	dd400517 	ldw	r21,20(sp)
 8030268:	dd000417 	ldw	r20,16(sp)
 803026c:	dcc00317 	ldw	r19,12(sp)
 8030270:	dc800217 	ldw	r18,8(sp)
 8030274:	dc400117 	ldw	r17,4(sp)
 8030278:	dc000017 	ldw	r16,0(sp)
 803027c:	dec00a04 	addi	sp,sp,40
 8030280:	f800283a 	ret

08030284 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8030284:	defff304 	addi	sp,sp,-52
 8030288:	dfc00c15 	stw	ra,48(sp)
 803028c:	df000b15 	stw	fp,44(sp)
 8030290:	dd800a15 	stw	r22,40(sp)
 8030294:	dd400915 	stw	r21,36(sp)
 8030298:	dd000815 	stw	r20,32(sp)
 803029c:	dcc00715 	stw	r19,28(sp)
 80302a0:	dc800615 	stw	r18,24(sp)
 80302a4:	dc400515 	stw	r17,20(sp)
 80302a8:	dc000415 	stw	r16,16(sp)
 80302ac:	df000b04 	addi	fp,sp,44
 80302b0:	e13ff515 	stw	r4,-44(fp)
 80302b4:	e17ff615 	stw	r5,-40(fp)
 80302b8:	e1bff715 	stw	r6,-36(fp)
 80302bc:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80302c0:	e0bff517 	ldw	r2,-44(fp)
 80302c4:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80302c8:	e0bff517 	ldw	r2,-44(fp)
 80302cc:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80302d0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 80302d4:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 80302d8:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 80302dc:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80302e0:	9440032e 	bgeu	r18,r17,80302f0 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 80302e4:	882d883a 	mov	r22,r17
		l_x = r_x;
 80302e8:	9023883a 	mov	r17,r18
		r_x = temp;
 80302ec:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 80302f0:	8cc0632e 	bgeu	r17,r19,8030480 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 80302f4:	a400622e 	bgeu	r20,r16,8030480 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 80302f8:	94c00136 	bltu	r18,r19,8030300 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 80302fc:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8030300:	e0800317 	ldw	r2,12(fp)
 8030304:	10800058 	cmpnei	r2,r2,1
 8030308:	1000031e 	bne	r2,zero,8030318 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 803030c:	e0bff517 	ldw	r2,-44(fp)
 8030310:	14000c17 	ldw	r16,48(r2)
 8030314:	00000206 	br	8030320 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8030318:	e0bff517 	ldw	r2,-44(fp)
 803031c:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8030320:	e0bff517 	ldw	r2,-44(fp)
 8030324:	10800d17 	ldw	r2,52(r2)
 8030328:	1000231e 	bne	r2,zero,80303b8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 803032c:	e0bff517 	ldw	r2,-44(fp)
 8030330:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 8030334:	a4c4983a 	sll	r2,r20,r19
 8030338:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 803033c:	e0bff517 	ldw	r2,-44(fp)
 8030340:	10800e17 	ldw	r2,56(r2)
 8030344:	10800058 	cmpnei	r2,r2,1
 8030348:	1000071e 	bne	r2,zero,8030368 <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 803034c:	00000406 	br	8030360 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8030350:	8c05883a 	add	r2,r17,r16
 8030354:	a807883a 	mov	r3,r21
 8030358:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 803035c:	8c400044 	addi	r17,r17,1
 8030360:	947ffb2e 	bgeu	r18,r17,8030350 <__alt_data_end+0xffff0f50>
 8030364:	00004706 	br	8030484 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8030368:	e0bff517 	ldw	r2,-44(fp)
 803036c:	10800e17 	ldw	r2,56(r2)
 8030370:	10800098 	cmpnei	r2,r2,2
 8030374:	10000e1e 	bne	r2,zero,80303b0 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 8030378:	00000506 	br	8030390 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 803037c:	8c45883a 	add	r2,r17,r17
 8030380:	1405883a 	add	r2,r2,r16
 8030384:	a807883a 	mov	r3,r21
 8030388:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 803038c:	8c400044 	addi	r17,r17,1
 8030390:	947ffa2e 	bgeu	r18,r17,803037c <__alt_data_end+0xffff0f7c>
 8030394:	00003b06 	br	8030484 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8030398:	8c45883a 	add	r2,r17,r17
 803039c:	1085883a 	add	r2,r2,r2
 80303a0:	1405883a 	add	r2,r2,r16
 80303a4:	a807883a 	mov	r3,r21
 80303a8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 80303ac:	8c400044 	addi	r17,r17,1
 80303b0:	947ff92e 	bgeu	r18,r17,8030398 <__alt_data_end+0xffff0f98>
 80303b4:	00003306 	br	8030484 <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80303b8:	e0bff517 	ldw	r2,-44(fp)
 80303bc:	10800e17 	ldw	r2,56(r2)
 80303c0:	10800058 	cmpnei	r2,r2,1
 80303c4:	10000b1e 	bne	r2,zero,80303f4 <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 80303c8:	980b883a 	mov	r5,r19
 80303cc:	a009883a 	mov	r4,r20
 80303d0:	80214e80 	call	80214e8 <__mulsi3>
 80303d4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 80303d8:	00000406 	br	80303ec <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 80303dc:	8c05883a 	add	r2,r17,r16
 80303e0:	a807883a 	mov	r3,r21
 80303e4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 80303e8:	8c400044 	addi	r17,r17,1
 80303ec:	947ffb2e 	bgeu	r18,r17,80303dc <__alt_data_end+0xffff0fdc>
 80303f0:	00002406 	br	8030484 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80303f4:	e0bff517 	ldw	r2,-44(fp)
 80303f8:	10800e17 	ldw	r2,56(r2)
 80303fc:	10800098 	cmpnei	r2,r2,2
 8030400:	10000e1e 	bne	r2,zero,803043c <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 8030404:	9cc5883a 	add	r2,r19,r19
 8030408:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 803040c:	980b883a 	mov	r5,r19
 8030410:	a009883a 	mov	r4,r20
 8030414:	80214e80 	call	80214e8 <__mulsi3>
 8030418:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 803041c:	00000506 	br	8030434 <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8030420:	8c45883a 	add	r2,r17,r17
 8030424:	1405883a 	add	r2,r2,r16
 8030428:	a807883a 	mov	r3,r21
 803042c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8030430:	8c400044 	addi	r17,r17,1
 8030434:	947ffa2e 	bgeu	r18,r17,8030420 <__alt_data_end+0xffff1020>
 8030438:	00001206 	br	8030484 <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 803043c:	9cc5883a 	add	r2,r19,r19
 8030440:	1085883a 	add	r2,r2,r2
 8030444:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8030448:	980b883a 	mov	r5,r19
 803044c:	a009883a 	mov	r4,r20
 8030450:	80214e80 	call	80214e8 <__mulsi3>
 8030454:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8030458:	00000606 	br	8030474 <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 803045c:	8c45883a 	add	r2,r17,r17
 8030460:	1085883a 	add	r2,r2,r2
 8030464:	1405883a 	add	r2,r2,r16
 8030468:	a807883a 	mov	r3,r21
 803046c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8030470:	8c400044 	addi	r17,r17,1
 8030474:	947ff92e 	bgeu	r18,r17,803045c <__alt_data_end+0xffff105c>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 8030478:	84e1883a 	add	r16,r16,r19
 803047c:	00000106 	br	8030484 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8030480:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 8030484:	e6fff904 	addi	sp,fp,-28
 8030488:	dfc00817 	ldw	ra,32(sp)
 803048c:	df000717 	ldw	fp,28(sp)
 8030490:	dd800617 	ldw	r22,24(sp)
 8030494:	dd400517 	ldw	r21,20(sp)
 8030498:	dd000417 	ldw	r20,16(sp)
 803049c:	dcc00317 	ldw	r19,12(sp)
 80304a0:	dc800217 	ldw	r18,8(sp)
 80304a4:	dc400117 	ldw	r17,4(sp)
 80304a8:	dc000017 	ldw	r16,0(sp)
 80304ac:	dec00904 	addi	sp,sp,36
 80304b0:	f800283a 	ret

080304b4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 80304b4:	defff304 	addi	sp,sp,-52
 80304b8:	dfc00c15 	stw	ra,48(sp)
 80304bc:	df000b15 	stw	fp,44(sp)
 80304c0:	dd800a15 	stw	r22,40(sp)
 80304c4:	dd400915 	stw	r21,36(sp)
 80304c8:	dd000815 	stw	r20,32(sp)
 80304cc:	dcc00715 	stw	r19,28(sp)
 80304d0:	dc800615 	stw	r18,24(sp)
 80304d4:	dc400515 	stw	r17,20(sp)
 80304d8:	dc000415 	stw	r16,16(sp)
 80304dc:	df000b04 	addi	fp,sp,44
 80304e0:	e13ff515 	stw	r4,-44(fp)
 80304e4:	e17ff615 	stw	r5,-40(fp)
 80304e8:	e1bff715 	stw	r6,-36(fp)
 80304ec:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80304f0:	e0bff517 	ldw	r2,-44(fp)
 80304f4:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80304f8:	e0bff517 	ldw	r2,-44(fp)
 80304fc:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8030500:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 8030504:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 8030508:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 803050c:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8030510:	9500032e 	bgeu	r18,r20,8030520 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 8030514:	a02b883a 	mov	r21,r20
		t_y = b_y;
 8030518:	9029883a 	mov	r20,r18
		b_y = temp;
 803051c:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8030520:	8cc0722e 	bgeu	r17,r19,80306ec <alt_up_pixel_buffer_dma_draw_vline+0x238>
 8030524:	a400712e 	bgeu	r20,r16,80306ec <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8030528:	94000136 	bltu	r18,r16,8030530 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 803052c:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8030530:	e0800317 	ldw	r2,12(fp)
 8030534:	10800058 	cmpnei	r2,r2,1
 8030538:	1000031e 	bne	r2,zero,8030548 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 803053c:	e0bff517 	ldw	r2,-44(fp)
 8030540:	14000c17 	ldw	r16,48(r2)
 8030544:	00000206 	br	8030550 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8030548:	e0bff517 	ldw	r2,-44(fp)
 803054c:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8030550:	e0bff517 	ldw	r2,-44(fp)
 8030554:	10800d17 	ldw	r2,52(r2)
 8030558:	1000301e 	bne	r2,zero,803061c <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 803055c:	e0bff517 	ldw	r2,-44(fp)
 8030560:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8030564:	a544983a 	sll	r2,r20,r21
 8030568:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 803056c:	e0bff517 	ldw	r2,-44(fp)
 8030570:	10800e17 	ldw	r2,56(r2)
 8030574:	10800058 	cmpnei	r2,r2,1
 8030578:	10000b1e 	bne	r2,zero,80305a8 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 803057c:	a027883a 	mov	r19,r20
 8030580:	00000706 	br	80305a0 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8030584:	8c05883a 	add	r2,r17,r16
 8030588:	b007883a 	mov	r3,r22
 803058c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8030590:	00800044 	movi	r2,1
 8030594:	1544983a 	sll	r2,r2,r21
 8030598:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 803059c:	9cc00044 	addi	r19,r19,1
 80305a0:	94fff82e 	bgeu	r18,r19,8030584 <__alt_data_end+0xffff1184>
 80305a4:	00005206 	br	80306f0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80305a8:	e0bff517 	ldw	r2,-44(fp)
 80305ac:	10800e17 	ldw	r2,56(r2)
 80305b0:	10800098 	cmpnei	r2,r2,2
 80305b4:	10000c1e 	bne	r2,zero,80305e8 <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 80305b8:	a027883a 	mov	r19,r20
 80305bc:	00000806 	br	80305e0 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 80305c0:	8c45883a 	add	r2,r17,r17
 80305c4:	1405883a 	add	r2,r2,r16
 80305c8:	b007883a 	mov	r3,r22
 80305cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80305d0:	00800044 	movi	r2,1
 80305d4:	1544983a 	sll	r2,r2,r21
 80305d8:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80305dc:	9cc00044 	addi	r19,r19,1
 80305e0:	94fff72e 	bgeu	r18,r19,80305c0 <__alt_data_end+0xffff11c0>
 80305e4:	00004206 	br	80306f0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80305e8:	a027883a 	mov	r19,r20
 80305ec:	00000906 	br	8030614 <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 80305f0:	8c45883a 	add	r2,r17,r17
 80305f4:	1085883a 	add	r2,r2,r2
 80305f8:	1405883a 	add	r2,r2,r16
 80305fc:	b007883a 	mov	r3,r22
 8030600:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8030604:	00800044 	movi	r2,1
 8030608:	1544983a 	sll	r2,r2,r21
 803060c:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8030610:	9cc00044 	addi	r19,r19,1
 8030614:	94fff62e 	bgeu	r18,r19,80305f0 <__alt_data_end+0xffff11f0>
 8030618:	00003506 	br	80306f0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 803061c:	e0bff517 	ldw	r2,-44(fp)
 8030620:	10800e17 	ldw	r2,56(r2)
 8030624:	10800058 	cmpnei	r2,r2,1
 8030628:	10000c1e 	bne	r2,zero,803065c <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 803062c:	980b883a 	mov	r5,r19
 8030630:	a009883a 	mov	r4,r20
 8030634:	80214e80 	call	80214e8 <__mulsi3>
 8030638:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 803063c:	00000506 	br	8030654 <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8030640:	8c05883a 	add	r2,r17,r16
 8030644:	b007883a 	mov	r3,r22
 8030648:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 803064c:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8030650:	a5000044 	addi	r20,r20,1
 8030654:	953ffa2e 	bgeu	r18,r20,8030640 <__alt_data_end+0xffff1240>
 8030658:	00002506 	br	80306f0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 803065c:	e0bff517 	ldw	r2,-44(fp)
 8030660:	10800e17 	ldw	r2,56(r2)
 8030664:	10800098 	cmpnei	r2,r2,2
 8030668:	10000f1e 	bne	r2,zero,80306a8 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 803066c:	9cc5883a 	add	r2,r19,r19
 8030670:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 8030674:	980b883a 	mov	r5,r19
 8030678:	a009883a 	mov	r4,r20
 803067c:	80214e80 	call	80214e8 <__mulsi3>
 8030680:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8030684:	00000606 	br	80306a0 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8030688:	8c45883a 	add	r2,r17,r17
 803068c:	1405883a 	add	r2,r2,r16
 8030690:	b007883a 	mov	r3,r22
 8030694:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8030698:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 803069c:	a5000044 	addi	r20,r20,1
 80306a0:	953ff92e 	bgeu	r18,r20,8030688 <__alt_data_end+0xffff1288>
 80306a4:	00001206 	br	80306f0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80306a8:	9cc5883a 	add	r2,r19,r19
 80306ac:	1085883a 	add	r2,r2,r2
 80306b0:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 80306b4:	980b883a 	mov	r5,r19
 80306b8:	a009883a 	mov	r4,r20
 80306bc:	80214e80 	call	80214e8 <__mulsi3>
 80306c0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80306c4:	00000706 	br	80306e4 <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 80306c8:	8c45883a 	add	r2,r17,r17
 80306cc:	1085883a 	add	r2,r2,r2
 80306d0:	1405883a 	add	r2,r2,r16
 80306d4:	b007883a 	mov	r3,r22
 80306d8:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 80306dc:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80306e0:	a5000044 	addi	r20,r20,1
 80306e4:	953ff82e 	bgeu	r18,r20,80306c8 <__alt_data_end+0xffff12c8>
 80306e8:	00000106 	br	80306f0 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 80306ec:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 80306f0:	e6fff904 	addi	sp,fp,-28
 80306f4:	dfc00817 	ldw	ra,32(sp)
 80306f8:	df000717 	ldw	fp,28(sp)
 80306fc:	dd800617 	ldw	r22,24(sp)
 8030700:	dd400517 	ldw	r21,20(sp)
 8030704:	dd000417 	ldw	r20,16(sp)
 8030708:	dcc00317 	ldw	r19,12(sp)
 803070c:	dc800217 	ldw	r18,8(sp)
 8030710:	dc400117 	ldw	r17,4(sp)
 8030714:	dc000017 	ldw	r16,0(sp)
 8030718:	dec00904 	addi	sp,sp,36
 803071c:	f800283a 	ret

08030720 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8030720:	defff804 	addi	sp,sp,-32
 8030724:	dfc00715 	stw	ra,28(sp)
 8030728:	df000615 	stw	fp,24(sp)
 803072c:	df000604 	addi	fp,sp,24
 8030730:	e13ffc15 	stw	r4,-16(fp)
 8030734:	e17ffd15 	stw	r5,-12(fp)
 8030738:	e1bffe15 	stw	r6,-8(fp)
 803073c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8030740:	e0800417 	ldw	r2,16(fp)
 8030744:	d8800115 	stw	r2,4(sp)
 8030748:	e0800317 	ldw	r2,12(fp)
 803074c:	d8800015 	stw	r2,0(sp)
 8030750:	e1fffe17 	ldw	r7,-8(fp)
 8030754:	e1bfff17 	ldw	r6,-4(fp)
 8030758:	e17ffd17 	ldw	r5,-12(fp)
 803075c:	e13ffc17 	ldw	r4,-16(fp)
 8030760:	80302840 	call	8030284 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8030764:	e0800417 	ldw	r2,16(fp)
 8030768:	d8800115 	stw	r2,4(sp)
 803076c:	e0800317 	ldw	r2,12(fp)
 8030770:	d8800015 	stw	r2,0(sp)
 8030774:	e1c00217 	ldw	r7,8(fp)
 8030778:	e1bfff17 	ldw	r6,-4(fp)
 803077c:	e17ffd17 	ldw	r5,-12(fp)
 8030780:	e13ffc17 	ldw	r4,-16(fp)
 8030784:	80302840 	call	8030284 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8030788:	e0800417 	ldw	r2,16(fp)
 803078c:	d8800115 	stw	r2,4(sp)
 8030790:	e0800317 	ldw	r2,12(fp)
 8030794:	d8800015 	stw	r2,0(sp)
 8030798:	e1c00217 	ldw	r7,8(fp)
 803079c:	e1bffe17 	ldw	r6,-8(fp)
 80307a0:	e17ffd17 	ldw	r5,-12(fp)
 80307a4:	e13ffc17 	ldw	r4,-16(fp)
 80307a8:	80304b40 	call	80304b4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 80307ac:	e0800417 	ldw	r2,16(fp)
 80307b0:	d8800115 	stw	r2,4(sp)
 80307b4:	e0800317 	ldw	r2,12(fp)
 80307b8:	d8800015 	stw	r2,0(sp)
 80307bc:	e1c00217 	ldw	r7,8(fp)
 80307c0:	e1bffe17 	ldw	r6,-8(fp)
 80307c4:	e17fff17 	ldw	r5,-4(fp)
 80307c8:	e13ffc17 	ldw	r4,-16(fp)
 80307cc:	80304b40 	call	80304b4 <alt_up_pixel_buffer_dma_draw_vline>
}
 80307d0:	0001883a 	nop
 80307d4:	e037883a 	mov	sp,fp
 80307d8:	dfc00117 	ldw	ra,4(sp)
 80307dc:	df000017 	ldw	fp,0(sp)
 80307e0:	dec00204 	addi	sp,sp,8
 80307e4:	f800283a 	ret

080307e8 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 80307e8:	defffb04 	addi	sp,sp,-20
 80307ec:	dfc00415 	stw	ra,16(sp)
 80307f0:	df000315 	stw	fp,12(sp)
 80307f4:	dc800215 	stw	r18,8(sp)
 80307f8:	dc400115 	stw	r17,4(sp)
 80307fc:	dc000015 	stw	r16,0(sp)
 8030800:	df000304 	addi	fp,sp,12
 8030804:	2021883a 	mov	r16,r4
 8030808:	2807883a 	mov	r3,r5
 803080c:	3023883a 	mov	r17,r6
 8030810:	3809883a 	mov	r4,r7
 8030814:	e4800217 	ldw	r18,8(fp)
 8030818:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 803081c:	1000071e 	bne	r2,zero,803083c <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8030820:	200b883a 	mov	r5,r4
 8030824:	1809883a 	mov	r4,r3
 8030828:	80214e80 	call	80214e8 <__mulsi3>
 803082c:	1445883a 	add	r2,r2,r17
 8030830:	1405883a 	add	r2,r2,r16
 8030834:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8030838:	00001206 	br	8030884 <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 803083c:	10800058 	cmpnei	r2,r2,1
 8030840:	1000081e 	bne	r2,zero,8030864 <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8030844:	200b883a 	mov	r5,r4
 8030848:	1809883a 	mov	r4,r3
 803084c:	80214e80 	call	80214e8 <__mulsi3>
 8030850:	1445883a 	add	r2,r2,r17
 8030854:	1085883a 	add	r2,r2,r2
 8030858:	1405883a 	add	r2,r2,r16
 803085c:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8030860:	00000806 	br	8030884 <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8030864:	200b883a 	mov	r5,r4
 8030868:	1809883a 	mov	r4,r3
 803086c:	80214e80 	call	80214e8 <__mulsi3>
 8030870:	1445883a 	add	r2,r2,r17
 8030874:	1085883a 	add	r2,r2,r2
 8030878:	1085883a 	add	r2,r2,r2
 803087c:	1405883a 	add	r2,r2,r16
 8030880:	14800035 	stwio	r18,0(r2)
}
 8030884:	0001883a 	nop
 8030888:	e6fffd04 	addi	sp,fp,-12
 803088c:	dfc00417 	ldw	ra,16(sp)
 8030890:	df000317 	ldw	fp,12(sp)
 8030894:	dc800217 	ldw	r18,8(sp)
 8030898:	dc400117 	ldw	r17,4(sp)
 803089c:	dc000017 	ldw	r16,0(sp)
 80308a0:	dec00504 	addi	sp,sp,20
 80308a4:	f800283a 	ret

080308a8 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 80308a8:	deffeb04 	addi	sp,sp,-84
 80308ac:	dfc01415 	stw	ra,80(sp)
 80308b0:	df001315 	stw	fp,76(sp)
 80308b4:	ddc01215 	stw	r23,72(sp)
 80308b8:	dd801115 	stw	r22,68(sp)
 80308bc:	dd401015 	stw	r21,64(sp)
 80308c0:	dd000f15 	stw	r20,60(sp)
 80308c4:	dcc00e15 	stw	r19,56(sp)
 80308c8:	dc800d15 	stw	r18,52(sp)
 80308cc:	dc400c15 	stw	r17,48(sp)
 80308d0:	dc000b15 	stw	r16,44(sp)
 80308d4:	df001304 	addi	fp,sp,76
 80308d8:	e13fef15 	stw	r4,-68(fp)
 80308dc:	e17ff015 	stw	r5,-64(fp)
 80308e0:	e1bff115 	stw	r6,-60(fp)
 80308e4:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 80308e8:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 80308ec:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 80308f0:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 80308f4:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 80308f8:	a4c5c83a 	sub	r2,r20,r19
 80308fc:	1000010e 	bge	r2,zero,8030904 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 8030900:	0085c83a 	sub	r2,zero,r2
 8030904:	1007883a 	mov	r3,r2
 8030908:	9445c83a 	sub	r2,r18,r17
 803090c:	1000010e 	bge	r2,zero,8030914 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 8030910:	0085c83a 	sub	r2,zero,r2
 8030914:	10c4803a 	cmplt	r2,r2,r3
 8030918:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 803091c:	e0bfef17 	ldw	r2,-68(fp)
 8030920:	10800e17 	ldw	r2,56(r2)
 8030924:	10800060 	cmpeqi	r2,r2,1
 8030928:	1000081e 	bne	r2,zero,803094c <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 803092c:	e0bfef17 	ldw	r2,-68(fp)
 8030930:	10800e17 	ldw	r2,56(r2)
 8030934:	10800098 	cmpnei	r2,r2,2
 8030938:	1000021e 	bne	r2,zero,8030944 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 803093c:	00800044 	movi	r2,1
 8030940:	00000306 	br	8030950 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 8030944:	00800084 	movi	r2,2
 8030948:	00000106 	br	8030950 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 803094c:	0005883a 	mov	r2,zero
 8030950:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 8030954:	e0800317 	ldw	r2,12(fp)
 8030958:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 803095c:	e0bfef17 	ldw	r2,-68(fp)
 8030960:	10800d17 	ldw	r2,52(r2)
 8030964:	1000071e 	bne	r2,zero,8030984 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 8030968:	e0bfef17 	ldw	r2,-68(fp)
 803096c:	10801317 	ldw	r2,76(r2)
 8030970:	e0fff417 	ldw	r3,-48(fp)
 8030974:	10c5c83a 	sub	r2,r2,r3
 8030978:	00c00044 	movi	r3,1
 803097c:	1884983a 	sll	r2,r3,r2
 8030980:	00000206 	br	803098c <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8030984:	e0bfef17 	ldw	r2,-68(fp)
 8030988:	10800f17 	ldw	r2,60(r2)
 803098c:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 8030990:	e0800417 	ldw	r2,16(fp)
 8030994:	10800058 	cmpnei	r2,r2,1
 8030998:	1000031e 	bne	r2,zero,80309a8 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 803099c:	e0bfef17 	ldw	r2,-68(fp)
 80309a0:	15c00c17 	ldw	r23,48(r2)
 80309a4:	00000206 	br	80309b0 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 80309a8:	e0bfef17 	ldw	r2,-68(fp)
 80309ac:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 80309b0:	e0bff307 	ldb	r2,-52(fp)
 80309b4:	0080060e 	bge	zero,r2,80309d0 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 80309b8:	8821883a 	mov	r16,r17
		x_0 = y_0;
 80309bc:	9823883a 	mov	r17,r19
		y_0 = error;
 80309c0:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 80309c4:	9021883a 	mov	r16,r18
		x_1 = y_1;
 80309c8:	a025883a 	mov	r18,r20
		y_1 = error;
 80309cc:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 80309d0:	9440060e 	bge	r18,r17,80309ec <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 80309d4:	8821883a 	mov	r16,r17
		x_0 = x_1;
 80309d8:	9023883a 	mov	r17,r18
		x_1 = error;
 80309dc:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 80309e0:	9821883a 	mov	r16,r19
		y_0 = y_1;
 80309e4:	a027883a 	mov	r19,r20
		y_1 = error;
 80309e8:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 80309ec:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 80309f0:	a4c5c83a 	sub	r2,r20,r19
 80309f4:	1000010e 	bge	r2,zero,80309fc <alt_up_pixel_buffer_dma_draw_line+0x154>
 80309f8:	0085c83a 	sub	r2,zero,r2
 80309fc:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 8030a00:	a804d7fa 	srli	r2,r21,31
 8030a04:	1545883a 	add	r2,r2,r21
 8030a08:	1005d07a 	srai	r2,r2,1
 8030a0c:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8030a10:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8030a14:	9d00020e 	bge	r19,r20,8030a20 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8030a18:	04c00044 	movi	r19,1
 8030a1c:	00000106 	br	8030a24 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 8030a20:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8030a24:	e0bff307 	ldb	r2,-52(fp)
 8030a28:	10800058 	cmpnei	r2,r2,1
 8030a2c:	1000211e 	bne	r2,zero,8030ab4 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 8030a30:	00000f06 	br	8030a70 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8030a34:	e0bff417 	ldw	r2,-48(fp)
 8030a38:	d8800115 	stw	r2,4(sp)
 8030a3c:	e0bff517 	ldw	r2,-44(fp)
 8030a40:	d8800015 	stw	r2,0(sp)
 8030a44:	880f883a 	mov	r7,r17
 8030a48:	b00d883a 	mov	r6,r22
 8030a4c:	e17ff617 	ldw	r5,-40(fp)
 8030a50:	b809883a 	mov	r4,r23
 8030a54:	80307e80 	call	80307e8 <helper_plot_pixel>
			error = error + deltay;
 8030a58:	e0bff717 	ldw	r2,-36(fp)
 8030a5c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8030a60:	0400020e 	bge	zero,r16,8030a6c <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 8030a64:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8030a68:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8030a6c:	8c400044 	addi	r17,r17,1
 8030a70:	947ff00e 	bge	r18,r17,8030a34 <__alt_data_end+0xffff1634>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8030a74:	00001006 	br	8030ab8 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8030a78:	e0bff417 	ldw	r2,-48(fp)
 8030a7c:	d8800115 	stw	r2,4(sp)
 8030a80:	e0bff517 	ldw	r2,-44(fp)
 8030a84:	d8800015 	stw	r2,0(sp)
 8030a88:	b00f883a 	mov	r7,r22
 8030a8c:	880d883a 	mov	r6,r17
 8030a90:	e17ff617 	ldw	r5,-40(fp)
 8030a94:	b809883a 	mov	r4,r23
 8030a98:	80307e80 	call	80307e8 <helper_plot_pixel>
			error = error + deltay;
 8030a9c:	e0bff717 	ldw	r2,-36(fp)
 8030aa0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8030aa4:	0400020e 	bge	zero,r16,8030ab0 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8030aa8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8030aac:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8030ab0:	8c400044 	addi	r17,r17,1
 8030ab4:	947ff00e 	bge	r18,r17,8030a78 <__alt_data_end+0xffff1678>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8030ab8:	0001883a 	nop
 8030abc:	e6fff804 	addi	sp,fp,-32
 8030ac0:	dfc00917 	ldw	ra,36(sp)
 8030ac4:	df000817 	ldw	fp,32(sp)
 8030ac8:	ddc00717 	ldw	r23,28(sp)
 8030acc:	dd800617 	ldw	r22,24(sp)
 8030ad0:	dd400517 	ldw	r21,20(sp)
 8030ad4:	dd000417 	ldw	r20,16(sp)
 8030ad8:	dcc00317 	ldw	r19,12(sp)
 8030adc:	dc800217 	ldw	r18,8(sp)
 8030ae0:	dc400117 	ldw	r17,4(sp)
 8030ae4:	dc000017 	ldw	r16,0(sp)
 8030ae8:	dec00a04 	addi	sp,sp,40
 8030aec:	f800283a 	ret

08030af0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8030af0:	defffa04 	addi	sp,sp,-24
 8030af4:	dfc00515 	stw	ra,20(sp)
 8030af8:	df000415 	stw	fp,16(sp)
 8030afc:	df000404 	addi	fp,sp,16
 8030b00:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8030b04:	00800244 	movi	r2,9
 8030b08:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8030b0c:	014003f4 	movhi	r5,15
 8030b10:	29509004 	addi	r5,r5,16960
 8030b14:	e13ffd17 	ldw	r4,-12(fp)
 8030b18:	80214e80 	call	80214e8 <__mulsi3>
 8030b1c:	100b883a 	mov	r5,r2
 8030b20:	0100bef4 	movhi	r4,763
 8030b24:	213c2004 	addi	r4,r4,-3968
 8030b28:	802b3e40 	call	802b3e4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8030b2c:	100b883a 	mov	r5,r2
 8030b30:	01200034 	movhi	r4,32768
 8030b34:	213fffc4 	addi	r4,r4,-1
 8030b38:	802b3e40 	call	802b3e4 <__udivsi3>
 8030b3c:	100b883a 	mov	r5,r2
 8030b40:	e13fff17 	ldw	r4,-4(fp)
 8030b44:	802b3e40 	call	802b3e4 <__udivsi3>
 8030b48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8030b4c:	e0bffe17 	ldw	r2,-8(fp)
 8030b50:	10002a26 	beq	r2,zero,8030bfc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8030b54:	e03ffc15 	stw	zero,-16(fp)
 8030b58:	00001706 	br	8030bb8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8030b5c:	00a00034 	movhi	r2,32768
 8030b60:	10bfffc4 	addi	r2,r2,-1
 8030b64:	10bfffc4 	addi	r2,r2,-1
 8030b68:	103ffe1e 	bne	r2,zero,8030b64 <__alt_data_end+0xffff1764>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8030b6c:	014003f4 	movhi	r5,15
 8030b70:	29509004 	addi	r5,r5,16960
 8030b74:	e13ffd17 	ldw	r4,-12(fp)
 8030b78:	80214e80 	call	80214e8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8030b7c:	100b883a 	mov	r5,r2
 8030b80:	0100bef4 	movhi	r4,763
 8030b84:	213c2004 	addi	r4,r4,-3968
 8030b88:	802b3e40 	call	802b3e4 <__udivsi3>
 8030b8c:	100b883a 	mov	r5,r2
 8030b90:	01200034 	movhi	r4,32768
 8030b94:	213fffc4 	addi	r4,r4,-1
 8030b98:	802b3e40 	call	802b3e4 <__udivsi3>
 8030b9c:	1007883a 	mov	r3,r2
 8030ba0:	e0bfff17 	ldw	r2,-4(fp)
 8030ba4:	10c5c83a 	sub	r2,r2,r3
 8030ba8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8030bac:	e0bffc17 	ldw	r2,-16(fp)
 8030bb0:	10800044 	addi	r2,r2,1
 8030bb4:	e0bffc15 	stw	r2,-16(fp)
 8030bb8:	e0fffc17 	ldw	r3,-16(fp)
 8030bbc:	e0bffe17 	ldw	r2,-8(fp)
 8030bc0:	18bfe616 	blt	r3,r2,8030b5c <__alt_data_end+0xffff175c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8030bc4:	014003f4 	movhi	r5,15
 8030bc8:	29509004 	addi	r5,r5,16960
 8030bcc:	e13ffd17 	ldw	r4,-12(fp)
 8030bd0:	80214e80 	call	80214e8 <__mulsi3>
 8030bd4:	100b883a 	mov	r5,r2
 8030bd8:	0100bef4 	movhi	r4,763
 8030bdc:	213c2004 	addi	r4,r4,-3968
 8030be0:	802b3e40 	call	802b3e4 <__udivsi3>
 8030be4:	e17fff17 	ldw	r5,-4(fp)
 8030be8:	1009883a 	mov	r4,r2
 8030bec:	80214e80 	call	80214e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8030bf0:	10bfffc4 	addi	r2,r2,-1
 8030bf4:	103ffe1e 	bne	r2,zero,8030bf0 <__alt_data_end+0xffff17f0>
 8030bf8:	00000d06 	br	8030c30 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8030bfc:	014003f4 	movhi	r5,15
 8030c00:	29509004 	addi	r5,r5,16960
 8030c04:	e13ffd17 	ldw	r4,-12(fp)
 8030c08:	80214e80 	call	80214e8 <__mulsi3>
 8030c0c:	100b883a 	mov	r5,r2
 8030c10:	0100bef4 	movhi	r4,763
 8030c14:	213c2004 	addi	r4,r4,-3968
 8030c18:	802b3e40 	call	802b3e4 <__udivsi3>
 8030c1c:	e17fff17 	ldw	r5,-4(fp)
 8030c20:	1009883a 	mov	r4,r2
 8030c24:	80214e80 	call	80214e8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8030c28:	10bfffc4 	addi	r2,r2,-1
 8030c2c:	00bffe16 	blt	zero,r2,8030c28 <__alt_data_end+0xffff1828>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8030c30:	0005883a 	mov	r2,zero
}
 8030c34:	e037883a 	mov	sp,fp
 8030c38:	dfc00117 	ldw	ra,4(sp)
 8030c3c:	df000017 	ldw	fp,0(sp)
 8030c40:	dec00204 	addi	sp,sp,8
 8030c44:	f800283a 	ret

08030c48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8030c48:	deffff04 	addi	sp,sp,-4
 8030c4c:	df000015 	stw	fp,0(sp)
 8030c50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8030c54:	0001883a 	nop
 8030c58:	e037883a 	mov	sp,fp
 8030c5c:	df000017 	ldw	fp,0(sp)
 8030c60:	dec00104 	addi	sp,sp,4
 8030c64:	f800283a 	ret

08030c68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8030c68:	defffe04 	addi	sp,sp,-8
 8030c6c:	dfc00115 	stw	ra,4(sp)
 8030c70:	df000015 	stw	fp,0(sp)
 8030c74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8030c78:	d0a00a17 	ldw	r2,-32728(gp)
 8030c7c:	10000326 	beq	r2,zero,8030c8c <alt_get_errno+0x24>
 8030c80:	d0a00a17 	ldw	r2,-32728(gp)
 8030c84:	103ee83a 	callr	r2
 8030c88:	00000106 	br	8030c90 <alt_get_errno+0x28>
 8030c8c:	d0a6f604 	addi	r2,gp,-25640
}
 8030c90:	e037883a 	mov	sp,fp
 8030c94:	dfc00117 	ldw	ra,4(sp)
 8030c98:	df000017 	ldw	fp,0(sp)
 8030c9c:	dec00204 	addi	sp,sp,8
 8030ca0:	f800283a 	ret

08030ca4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8030ca4:	defffa04 	addi	sp,sp,-24
 8030ca8:	dfc00515 	stw	ra,20(sp)
 8030cac:	df000415 	stw	fp,16(sp)
 8030cb0:	df000404 	addi	fp,sp,16
 8030cb4:	e13ffe15 	stw	r4,-8(fp)
 8030cb8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8030cbc:	e0bffe17 	ldw	r2,-8(fp)
 8030cc0:	10000326 	beq	r2,zero,8030cd0 <alt_dev_llist_insert+0x2c>
 8030cc4:	e0bffe17 	ldw	r2,-8(fp)
 8030cc8:	10800217 	ldw	r2,8(r2)
 8030ccc:	1000061e 	bne	r2,zero,8030ce8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8030cd0:	8030c680 	call	8030c68 <alt_get_errno>
 8030cd4:	1007883a 	mov	r3,r2
 8030cd8:	00800584 	movi	r2,22
 8030cdc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8030ce0:	00bffa84 	movi	r2,-22
 8030ce4:	00001306 	br	8030d34 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8030ce8:	e0bffe17 	ldw	r2,-8(fp)
 8030cec:	e0ffff17 	ldw	r3,-4(fp)
 8030cf0:	e0fffc15 	stw	r3,-16(fp)
 8030cf4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8030cf8:	e0bffd17 	ldw	r2,-12(fp)
 8030cfc:	e0fffc17 	ldw	r3,-16(fp)
 8030d00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8030d04:	e0bffc17 	ldw	r2,-16(fp)
 8030d08:	10c00017 	ldw	r3,0(r2)
 8030d0c:	e0bffd17 	ldw	r2,-12(fp)
 8030d10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8030d14:	e0bffc17 	ldw	r2,-16(fp)
 8030d18:	10800017 	ldw	r2,0(r2)
 8030d1c:	e0fffd17 	ldw	r3,-12(fp)
 8030d20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8030d24:	e0bffc17 	ldw	r2,-16(fp)
 8030d28:	e0fffd17 	ldw	r3,-12(fp)
 8030d2c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8030d30:	0005883a 	mov	r2,zero
}
 8030d34:	e037883a 	mov	sp,fp
 8030d38:	dfc00117 	ldw	ra,4(sp)
 8030d3c:	df000017 	ldw	fp,0(sp)
 8030d40:	dec00204 	addi	sp,sp,8
 8030d44:	f800283a 	ret

08030d48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8030d48:	defffd04 	addi	sp,sp,-12
 8030d4c:	dfc00215 	stw	ra,8(sp)
 8030d50:	df000115 	stw	fp,4(sp)
 8030d54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8030d58:	008200f4 	movhi	r2,2051
 8030d5c:	1086d604 	addi	r2,r2,7000
 8030d60:	e0bfff15 	stw	r2,-4(fp)
 8030d64:	00000606 	br	8030d80 <_do_ctors+0x38>
        (*ctor) (); 
 8030d68:	e0bfff17 	ldw	r2,-4(fp)
 8030d6c:	10800017 	ldw	r2,0(r2)
 8030d70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8030d74:	e0bfff17 	ldw	r2,-4(fp)
 8030d78:	10bfff04 	addi	r2,r2,-4
 8030d7c:	e0bfff15 	stw	r2,-4(fp)
 8030d80:	e0ffff17 	ldw	r3,-4(fp)
 8030d84:	008200f4 	movhi	r2,2051
 8030d88:	1086d704 	addi	r2,r2,7004
 8030d8c:	18bff62e 	bgeu	r3,r2,8030d68 <__alt_data_end+0xffff1968>
        (*ctor) (); 
}
 8030d90:	0001883a 	nop
 8030d94:	e037883a 	mov	sp,fp
 8030d98:	dfc00117 	ldw	ra,4(sp)
 8030d9c:	df000017 	ldw	fp,0(sp)
 8030da0:	dec00204 	addi	sp,sp,8
 8030da4:	f800283a 	ret

08030da8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8030da8:	defffd04 	addi	sp,sp,-12
 8030dac:	dfc00215 	stw	ra,8(sp)
 8030db0:	df000115 	stw	fp,4(sp)
 8030db4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8030db8:	008200f4 	movhi	r2,2051
 8030dbc:	1086d604 	addi	r2,r2,7000
 8030dc0:	e0bfff15 	stw	r2,-4(fp)
 8030dc4:	00000606 	br	8030de0 <_do_dtors+0x38>
        (*dtor) (); 
 8030dc8:	e0bfff17 	ldw	r2,-4(fp)
 8030dcc:	10800017 	ldw	r2,0(r2)
 8030dd0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8030dd4:	e0bfff17 	ldw	r2,-4(fp)
 8030dd8:	10bfff04 	addi	r2,r2,-4
 8030ddc:	e0bfff15 	stw	r2,-4(fp)
 8030de0:	e0ffff17 	ldw	r3,-4(fp)
 8030de4:	008200f4 	movhi	r2,2051
 8030de8:	1086d704 	addi	r2,r2,7004
 8030dec:	18bff62e 	bgeu	r3,r2,8030dc8 <__alt_data_end+0xffff19c8>
        (*dtor) (); 
}
 8030df0:	0001883a 	nop
 8030df4:	e037883a 	mov	sp,fp
 8030df8:	dfc00117 	ldw	ra,4(sp)
 8030dfc:	df000017 	ldw	fp,0(sp)
 8030e00:	dec00204 	addi	sp,sp,8
 8030e04:	f800283a 	ret

08030e08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8030e08:	defffa04 	addi	sp,sp,-24
 8030e0c:	dfc00515 	stw	ra,20(sp)
 8030e10:	df000415 	stw	fp,16(sp)
 8030e14:	df000404 	addi	fp,sp,16
 8030e18:	e13ffe15 	stw	r4,-8(fp)
 8030e1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8030e20:	e0bfff17 	ldw	r2,-4(fp)
 8030e24:	10800017 	ldw	r2,0(r2)
 8030e28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8030e2c:	e13ffe17 	ldw	r4,-8(fp)
 8030e30:	802187c0 	call	802187c <strlen>
 8030e34:	10800044 	addi	r2,r2,1
 8030e38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8030e3c:	00000d06 	br	8030e74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8030e40:	e0bffc17 	ldw	r2,-16(fp)
 8030e44:	10800217 	ldw	r2,8(r2)
 8030e48:	e0fffd17 	ldw	r3,-12(fp)
 8030e4c:	180d883a 	mov	r6,r3
 8030e50:	e17ffe17 	ldw	r5,-8(fp)
 8030e54:	1009883a 	mov	r4,r2
 8030e58:	80318140 	call	8031814 <memcmp>
 8030e5c:	1000021e 	bne	r2,zero,8030e68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8030e60:	e0bffc17 	ldw	r2,-16(fp)
 8030e64:	00000706 	br	8030e84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8030e68:	e0bffc17 	ldw	r2,-16(fp)
 8030e6c:	10800017 	ldw	r2,0(r2)
 8030e70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8030e74:	e0fffc17 	ldw	r3,-16(fp)
 8030e78:	e0bfff17 	ldw	r2,-4(fp)
 8030e7c:	18bff01e 	bne	r3,r2,8030e40 <__alt_data_end+0xffff1a40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8030e80:	0005883a 	mov	r2,zero
}
 8030e84:	e037883a 	mov	sp,fp
 8030e88:	dfc00117 	ldw	ra,4(sp)
 8030e8c:	df000017 	ldw	fp,0(sp)
 8030e90:	dec00204 	addi	sp,sp,8
 8030e94:	f800283a 	ret

08030e98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8030e98:	deffff04 	addi	sp,sp,-4
 8030e9c:	df000015 	stw	fp,0(sp)
 8030ea0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8030ea4:	0001883a 	nop
 8030ea8:	e037883a 	mov	sp,fp
 8030eac:	df000017 	ldw	fp,0(sp)
 8030eb0:	dec00104 	addi	sp,sp,4
 8030eb4:	f800283a 	ret

08030eb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8030eb8:	defff904 	addi	sp,sp,-28
 8030ebc:	dfc00615 	stw	ra,24(sp)
 8030ec0:	df000515 	stw	fp,20(sp)
 8030ec4:	df000504 	addi	fp,sp,20
 8030ec8:	e13ffc15 	stw	r4,-16(fp)
 8030ecc:	e17ffd15 	stw	r5,-12(fp)
 8030ed0:	e1bffe15 	stw	r6,-8(fp)
 8030ed4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8030ed8:	e0800217 	ldw	r2,8(fp)
 8030edc:	d8800015 	stw	r2,0(sp)
 8030ee0:	e1ffff17 	ldw	r7,-4(fp)
 8030ee4:	e1bffe17 	ldw	r6,-8(fp)
 8030ee8:	e17ffd17 	ldw	r5,-12(fp)
 8030eec:	e13ffc17 	ldw	r4,-16(fp)
 8030ef0:	80310680 	call	8031068 <alt_iic_isr_register>
}  
 8030ef4:	e037883a 	mov	sp,fp
 8030ef8:	dfc00117 	ldw	ra,4(sp)
 8030efc:	df000017 	ldw	fp,0(sp)
 8030f00:	dec00204 	addi	sp,sp,8
 8030f04:	f800283a 	ret

08030f08 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8030f08:	defff904 	addi	sp,sp,-28
 8030f0c:	df000615 	stw	fp,24(sp)
 8030f10:	df000604 	addi	fp,sp,24
 8030f14:	e13ffe15 	stw	r4,-8(fp)
 8030f18:	e17fff15 	stw	r5,-4(fp)
 8030f1c:	e0bfff17 	ldw	r2,-4(fp)
 8030f20:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8030f24:	0005303a 	rdctl	r2,status
 8030f28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8030f2c:	e0fffb17 	ldw	r3,-20(fp)
 8030f30:	00bfff84 	movi	r2,-2
 8030f34:	1884703a 	and	r2,r3,r2
 8030f38:	1001703a 	wrctl	status,r2
  
  return context;
 8030f3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8030f40:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8030f44:	00c00044 	movi	r3,1
 8030f48:	e0bffa17 	ldw	r2,-24(fp)
 8030f4c:	1884983a 	sll	r2,r3,r2
 8030f50:	1007883a 	mov	r3,r2
 8030f54:	d0a6fc17 	ldw	r2,-25616(gp)
 8030f58:	1884b03a 	or	r2,r3,r2
 8030f5c:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8030f60:	d0a6fc17 	ldw	r2,-25616(gp)
 8030f64:	100170fa 	wrctl	ienable,r2
 8030f68:	e0bffc17 	ldw	r2,-16(fp)
 8030f6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8030f70:	e0bffd17 	ldw	r2,-12(fp)
 8030f74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8030f78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8030f7c:	0001883a 	nop
}
 8030f80:	e037883a 	mov	sp,fp
 8030f84:	df000017 	ldw	fp,0(sp)
 8030f88:	dec00104 	addi	sp,sp,4
 8030f8c:	f800283a 	ret

08030f90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8030f90:	defff904 	addi	sp,sp,-28
 8030f94:	df000615 	stw	fp,24(sp)
 8030f98:	df000604 	addi	fp,sp,24
 8030f9c:	e13ffe15 	stw	r4,-8(fp)
 8030fa0:	e17fff15 	stw	r5,-4(fp)
 8030fa4:	e0bfff17 	ldw	r2,-4(fp)
 8030fa8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8030fac:	0005303a 	rdctl	r2,status
 8030fb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8030fb4:	e0fffb17 	ldw	r3,-20(fp)
 8030fb8:	00bfff84 	movi	r2,-2
 8030fbc:	1884703a 	and	r2,r3,r2
 8030fc0:	1001703a 	wrctl	status,r2
  
  return context;
 8030fc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8030fc8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8030fcc:	00c00044 	movi	r3,1
 8030fd0:	e0bffa17 	ldw	r2,-24(fp)
 8030fd4:	1884983a 	sll	r2,r3,r2
 8030fd8:	0084303a 	nor	r2,zero,r2
 8030fdc:	1007883a 	mov	r3,r2
 8030fe0:	d0a6fc17 	ldw	r2,-25616(gp)
 8030fe4:	1884703a 	and	r2,r3,r2
 8030fe8:	d0a6fc15 	stw	r2,-25616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8030fec:	d0a6fc17 	ldw	r2,-25616(gp)
 8030ff0:	100170fa 	wrctl	ienable,r2
 8030ff4:	e0bffc17 	ldw	r2,-16(fp)
 8030ff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8030ffc:	e0bffd17 	ldw	r2,-12(fp)
 8031000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8031004:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8031008:	0001883a 	nop
}
 803100c:	e037883a 	mov	sp,fp
 8031010:	df000017 	ldw	fp,0(sp)
 8031014:	dec00104 	addi	sp,sp,4
 8031018:	f800283a 	ret

0803101c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 803101c:	defffc04 	addi	sp,sp,-16
 8031020:	df000315 	stw	fp,12(sp)
 8031024:	df000304 	addi	fp,sp,12
 8031028:	e13ffe15 	stw	r4,-8(fp)
 803102c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8031030:	000530fa 	rdctl	r2,ienable
 8031034:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8031038:	00c00044 	movi	r3,1
 803103c:	e0bfff17 	ldw	r2,-4(fp)
 8031040:	1884983a 	sll	r2,r3,r2
 8031044:	1007883a 	mov	r3,r2
 8031048:	e0bffd17 	ldw	r2,-12(fp)
 803104c:	1884703a 	and	r2,r3,r2
 8031050:	1004c03a 	cmpne	r2,r2,zero
 8031054:	10803fcc 	andi	r2,r2,255
}
 8031058:	e037883a 	mov	sp,fp
 803105c:	df000017 	ldw	fp,0(sp)
 8031060:	dec00104 	addi	sp,sp,4
 8031064:	f800283a 	ret

08031068 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8031068:	defff504 	addi	sp,sp,-44
 803106c:	dfc00a15 	stw	ra,40(sp)
 8031070:	df000915 	stw	fp,36(sp)
 8031074:	df000904 	addi	fp,sp,36
 8031078:	e13ffc15 	stw	r4,-16(fp)
 803107c:	e17ffd15 	stw	r5,-12(fp)
 8031080:	e1bffe15 	stw	r6,-8(fp)
 8031084:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8031088:	00bffa84 	movi	r2,-22
 803108c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8031090:	e0bffd17 	ldw	r2,-12(fp)
 8031094:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8031098:	e0bff817 	ldw	r2,-32(fp)
 803109c:	10800808 	cmpgei	r2,r2,32
 80310a0:	1000271e 	bne	r2,zero,8031140 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80310a4:	0005303a 	rdctl	r2,status
 80310a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80310ac:	e0fffb17 	ldw	r3,-20(fp)
 80310b0:	00bfff84 	movi	r2,-2
 80310b4:	1884703a 	and	r2,r3,r2
 80310b8:	1001703a 	wrctl	status,r2
  
  return context;
 80310bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80310c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80310c4:	008200f4 	movhi	r2,2051
 80310c8:	1095fc04 	addi	r2,r2,22512
 80310cc:	e0fff817 	ldw	r3,-32(fp)
 80310d0:	180690fa 	slli	r3,r3,3
 80310d4:	10c5883a 	add	r2,r2,r3
 80310d8:	e0fffe17 	ldw	r3,-8(fp)
 80310dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80310e0:	008200f4 	movhi	r2,2051
 80310e4:	1095fc04 	addi	r2,r2,22512
 80310e8:	e0fff817 	ldw	r3,-32(fp)
 80310ec:	180690fa 	slli	r3,r3,3
 80310f0:	10c5883a 	add	r2,r2,r3
 80310f4:	10800104 	addi	r2,r2,4
 80310f8:	e0ffff17 	ldw	r3,-4(fp)
 80310fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8031100:	e0bffe17 	ldw	r2,-8(fp)
 8031104:	10000526 	beq	r2,zero,803111c <alt_iic_isr_register+0xb4>
 8031108:	e0bff817 	ldw	r2,-32(fp)
 803110c:	100b883a 	mov	r5,r2
 8031110:	e13ffc17 	ldw	r4,-16(fp)
 8031114:	8030f080 	call	8030f08 <alt_ic_irq_enable>
 8031118:	00000406 	br	803112c <alt_iic_isr_register+0xc4>
 803111c:	e0bff817 	ldw	r2,-32(fp)
 8031120:	100b883a 	mov	r5,r2
 8031124:	e13ffc17 	ldw	r4,-16(fp)
 8031128:	8030f900 	call	8030f90 <alt_ic_irq_disable>
 803112c:	e0bff715 	stw	r2,-36(fp)
 8031130:	e0bffa17 	ldw	r2,-24(fp)
 8031134:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8031138:	e0bff917 	ldw	r2,-28(fp)
 803113c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8031140:	e0bff717 	ldw	r2,-36(fp)
}
 8031144:	e037883a 	mov	sp,fp
 8031148:	dfc00117 	ldw	ra,4(sp)
 803114c:	df000017 	ldw	fp,0(sp)
 8031150:	dec00204 	addi	sp,sp,8
 8031154:	f800283a 	ret

08031158 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8031158:	defff804 	addi	sp,sp,-32
 803115c:	dfc00715 	stw	ra,28(sp)
 8031160:	df000615 	stw	fp,24(sp)
 8031164:	dc000515 	stw	r16,20(sp)
 8031168:	df000604 	addi	fp,sp,24
 803116c:	e13ffb15 	stw	r4,-20(fp)
 8031170:	e17ffc15 	stw	r5,-16(fp)
 8031174:	e1bffd15 	stw	r6,-12(fp)
 8031178:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 803117c:	e1bffe17 	ldw	r6,-8(fp)
 8031180:	e17ffd17 	ldw	r5,-12(fp)
 8031184:	e13ffc17 	ldw	r4,-16(fp)
 8031188:	80313e00 	call	80313e0 <open>
 803118c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8031190:	e0bffa17 	ldw	r2,-24(fp)
 8031194:	10002216 	blt	r2,zero,8031220 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8031198:	040200f4 	movhi	r16,2051
 803119c:	840a4f04 	addi	r16,r16,10556
 80311a0:	e0bffa17 	ldw	r2,-24(fp)
 80311a4:	01400304 	movi	r5,12
 80311a8:	1009883a 	mov	r4,r2
 80311ac:	80214e80 	call	80214e8 <__mulsi3>
 80311b0:	8085883a 	add	r2,r16,r2
 80311b4:	10c00017 	ldw	r3,0(r2)
 80311b8:	e0bffb17 	ldw	r2,-20(fp)
 80311bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80311c0:	040200f4 	movhi	r16,2051
 80311c4:	840a4f04 	addi	r16,r16,10556
 80311c8:	e0bffa17 	ldw	r2,-24(fp)
 80311cc:	01400304 	movi	r5,12
 80311d0:	1009883a 	mov	r4,r2
 80311d4:	80214e80 	call	80214e8 <__mulsi3>
 80311d8:	8085883a 	add	r2,r16,r2
 80311dc:	10800104 	addi	r2,r2,4
 80311e0:	10c00017 	ldw	r3,0(r2)
 80311e4:	e0bffb17 	ldw	r2,-20(fp)
 80311e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80311ec:	040200f4 	movhi	r16,2051
 80311f0:	840a4f04 	addi	r16,r16,10556
 80311f4:	e0bffa17 	ldw	r2,-24(fp)
 80311f8:	01400304 	movi	r5,12
 80311fc:	1009883a 	mov	r4,r2
 8031200:	80214e80 	call	80214e8 <__mulsi3>
 8031204:	8085883a 	add	r2,r16,r2
 8031208:	10800204 	addi	r2,r2,8
 803120c:	10c00017 	ldw	r3,0(r2)
 8031210:	e0bffb17 	ldw	r2,-20(fp)
 8031214:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8031218:	e13ffa17 	ldw	r4,-24(fp)
 803121c:	802e5940 	call	802e594 <alt_release_fd>
  }
} 
 8031220:	0001883a 	nop
 8031224:	e6ffff04 	addi	sp,fp,-4
 8031228:	dfc00217 	ldw	ra,8(sp)
 803122c:	df000117 	ldw	fp,4(sp)
 8031230:	dc000017 	ldw	r16,0(sp)
 8031234:	dec00304 	addi	sp,sp,12
 8031238:	f800283a 	ret

0803123c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 803123c:	defffb04 	addi	sp,sp,-20
 8031240:	dfc00415 	stw	ra,16(sp)
 8031244:	df000315 	stw	fp,12(sp)
 8031248:	df000304 	addi	fp,sp,12
 803124c:	e13ffd15 	stw	r4,-12(fp)
 8031250:	e17ffe15 	stw	r5,-8(fp)
 8031254:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8031258:	01c07fc4 	movi	r7,511
 803125c:	01800044 	movi	r6,1
 8031260:	e17ffd17 	ldw	r5,-12(fp)
 8031264:	010200f4 	movhi	r4,2051
 8031268:	210a5204 	addi	r4,r4,10568
 803126c:	80311580 	call	8031158 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8031270:	01c07fc4 	movi	r7,511
 8031274:	000d883a 	mov	r6,zero
 8031278:	e17ffe17 	ldw	r5,-8(fp)
 803127c:	010200f4 	movhi	r4,2051
 8031280:	210a4f04 	addi	r4,r4,10556
 8031284:	80311580 	call	8031158 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8031288:	01c07fc4 	movi	r7,511
 803128c:	01800044 	movi	r6,1
 8031290:	e17fff17 	ldw	r5,-4(fp)
 8031294:	010200f4 	movhi	r4,2051
 8031298:	210a5504 	addi	r4,r4,10580
 803129c:	80311580 	call	8031158 <alt_open_fd>
}  
 80312a0:	0001883a 	nop
 80312a4:	e037883a 	mov	sp,fp
 80312a8:	dfc00117 	ldw	ra,4(sp)
 80312ac:	df000017 	ldw	fp,0(sp)
 80312b0:	dec00204 	addi	sp,sp,8
 80312b4:	f800283a 	ret

080312b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80312b8:	defffe04 	addi	sp,sp,-8
 80312bc:	dfc00115 	stw	ra,4(sp)
 80312c0:	df000015 	stw	fp,0(sp)
 80312c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80312c8:	d0a00a17 	ldw	r2,-32728(gp)
 80312cc:	10000326 	beq	r2,zero,80312dc <alt_get_errno+0x24>
 80312d0:	d0a00a17 	ldw	r2,-32728(gp)
 80312d4:	103ee83a 	callr	r2
 80312d8:	00000106 	br	80312e0 <alt_get_errno+0x28>
 80312dc:	d0a6f604 	addi	r2,gp,-25640
}
 80312e0:	e037883a 	mov	sp,fp
 80312e4:	dfc00117 	ldw	ra,4(sp)
 80312e8:	df000017 	ldw	fp,0(sp)
 80312ec:	dec00204 	addi	sp,sp,8
 80312f0:	f800283a 	ret

080312f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80312f4:	defffb04 	addi	sp,sp,-20
 80312f8:	dfc00415 	stw	ra,16(sp)
 80312fc:	df000315 	stw	fp,12(sp)
 8031300:	dc000215 	stw	r16,8(sp)
 8031304:	df000304 	addi	fp,sp,12
 8031308:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 803130c:	e0bffe17 	ldw	r2,-8(fp)
 8031310:	10800217 	ldw	r2,8(r2)
 8031314:	10d00034 	orhi	r3,r2,16384
 8031318:	e0bffe17 	ldw	r2,-8(fp)
 803131c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8031320:	e03ffd15 	stw	zero,-12(fp)
 8031324:	00002306 	br	80313b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8031328:	040200f4 	movhi	r16,2051
 803132c:	840a4f04 	addi	r16,r16,10556
 8031330:	e0bffd17 	ldw	r2,-12(fp)
 8031334:	01400304 	movi	r5,12
 8031338:	1009883a 	mov	r4,r2
 803133c:	80214e80 	call	80214e8 <__mulsi3>
 8031340:	8085883a 	add	r2,r16,r2
 8031344:	10c00017 	ldw	r3,0(r2)
 8031348:	e0bffe17 	ldw	r2,-8(fp)
 803134c:	10800017 	ldw	r2,0(r2)
 8031350:	1880151e 	bne	r3,r2,80313a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8031354:	040200f4 	movhi	r16,2051
 8031358:	840a4f04 	addi	r16,r16,10556
 803135c:	e0bffd17 	ldw	r2,-12(fp)
 8031360:	01400304 	movi	r5,12
 8031364:	1009883a 	mov	r4,r2
 8031368:	80214e80 	call	80214e8 <__mulsi3>
 803136c:	8085883a 	add	r2,r16,r2
 8031370:	10800204 	addi	r2,r2,8
 8031374:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8031378:	10000b0e 	bge	r2,zero,80313a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 803137c:	01400304 	movi	r5,12
 8031380:	e13ffd17 	ldw	r4,-12(fp)
 8031384:	80214e80 	call	80214e8 <__mulsi3>
 8031388:	1007883a 	mov	r3,r2
 803138c:	008200f4 	movhi	r2,2051
 8031390:	108a4f04 	addi	r2,r2,10556
 8031394:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8031398:	e0bffe17 	ldw	r2,-8(fp)
 803139c:	18800226 	beq	r3,r2,80313a8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80313a0:	00bffcc4 	movi	r2,-13
 80313a4:	00000806 	br	80313c8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80313a8:	e0bffd17 	ldw	r2,-12(fp)
 80313ac:	10800044 	addi	r2,r2,1
 80313b0:	e0bffd15 	stw	r2,-12(fp)
 80313b4:	d0a00917 	ldw	r2,-32732(gp)
 80313b8:	1007883a 	mov	r3,r2
 80313bc:	e0bffd17 	ldw	r2,-12(fp)
 80313c0:	18bfd92e 	bgeu	r3,r2,8031328 <__alt_data_end+0xffff1f28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80313c4:	0005883a 	mov	r2,zero
}
 80313c8:	e6ffff04 	addi	sp,fp,-4
 80313cc:	dfc00217 	ldw	ra,8(sp)
 80313d0:	df000117 	ldw	fp,4(sp)
 80313d4:	dc000017 	ldw	r16,0(sp)
 80313d8:	dec00304 	addi	sp,sp,12
 80313dc:	f800283a 	ret

080313e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80313e0:	defff604 	addi	sp,sp,-40
 80313e4:	dfc00915 	stw	ra,36(sp)
 80313e8:	df000815 	stw	fp,32(sp)
 80313ec:	df000804 	addi	fp,sp,32
 80313f0:	e13ffd15 	stw	r4,-12(fp)
 80313f4:	e17ffe15 	stw	r5,-8(fp)
 80313f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80313fc:	00bfffc4 	movi	r2,-1
 8031400:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8031404:	00bffb44 	movi	r2,-19
 8031408:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 803140c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8031410:	d1600704 	addi	r5,gp,-32740
 8031414:	e13ffd17 	ldw	r4,-12(fp)
 8031418:	8030e080 	call	8030e08 <alt_find_dev>
 803141c:	e0bff815 	stw	r2,-32(fp)
 8031420:	e0bff817 	ldw	r2,-32(fp)
 8031424:	1000051e 	bne	r2,zero,803143c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8031428:	e13ffd17 	ldw	r4,-12(fp)
 803142c:	80315600 	call	8031560 <alt_find_file>
 8031430:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8031434:	00800044 	movi	r2,1
 8031438:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 803143c:	e0bff817 	ldw	r2,-32(fp)
 8031440:	10002b26 	beq	r2,zero,80314f0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8031444:	e13ff817 	ldw	r4,-32(fp)
 8031448:	80316680 	call	8031668 <alt_get_fd>
 803144c:	e0bff915 	stw	r2,-28(fp)
 8031450:	e0bff917 	ldw	r2,-28(fp)
 8031454:	1000030e 	bge	r2,zero,8031464 <open+0x84>
    {
      status = index;
 8031458:	e0bff917 	ldw	r2,-28(fp)
 803145c:	e0bffa15 	stw	r2,-24(fp)
 8031460:	00002506 	br	80314f8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8031464:	01400304 	movi	r5,12
 8031468:	e13ff917 	ldw	r4,-28(fp)
 803146c:	80214e80 	call	80214e8 <__mulsi3>
 8031470:	1007883a 	mov	r3,r2
 8031474:	008200f4 	movhi	r2,2051
 8031478:	108a4f04 	addi	r2,r2,10556
 803147c:	1885883a 	add	r2,r3,r2
 8031480:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8031484:	e0fffe17 	ldw	r3,-8(fp)
 8031488:	00900034 	movhi	r2,16384
 803148c:	10bfffc4 	addi	r2,r2,-1
 8031490:	1886703a 	and	r3,r3,r2
 8031494:	e0bffc17 	ldw	r2,-16(fp)
 8031498:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 803149c:	e0bffb17 	ldw	r2,-20(fp)
 80314a0:	1000051e 	bne	r2,zero,80314b8 <open+0xd8>
 80314a4:	e13ffc17 	ldw	r4,-16(fp)
 80314a8:	80312f40 	call	80312f4 <alt_file_locked>
 80314ac:	e0bffa15 	stw	r2,-24(fp)
 80314b0:	e0bffa17 	ldw	r2,-24(fp)
 80314b4:	10001016 	blt	r2,zero,80314f8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80314b8:	e0bff817 	ldw	r2,-32(fp)
 80314bc:	10800317 	ldw	r2,12(r2)
 80314c0:	10000826 	beq	r2,zero,80314e4 <open+0x104>
 80314c4:	e0bff817 	ldw	r2,-32(fp)
 80314c8:	10800317 	ldw	r2,12(r2)
 80314cc:	e1ffff17 	ldw	r7,-4(fp)
 80314d0:	e1bffe17 	ldw	r6,-8(fp)
 80314d4:	e17ffd17 	ldw	r5,-12(fp)
 80314d8:	e13ffc17 	ldw	r4,-16(fp)
 80314dc:	103ee83a 	callr	r2
 80314e0:	00000106 	br	80314e8 <open+0x108>
 80314e4:	0005883a 	mov	r2,zero
 80314e8:	e0bffa15 	stw	r2,-24(fp)
 80314ec:	00000206 	br	80314f8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80314f0:	00bffb44 	movi	r2,-19
 80314f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80314f8:	e0bffa17 	ldw	r2,-24(fp)
 80314fc:	1000090e 	bge	r2,zero,8031524 <open+0x144>
  {
    alt_release_fd (index);  
 8031500:	e13ff917 	ldw	r4,-28(fp)
 8031504:	802e5940 	call	802e594 <alt_release_fd>
    ALT_ERRNO = -status;
 8031508:	80312b80 	call	80312b8 <alt_get_errno>
 803150c:	1007883a 	mov	r3,r2
 8031510:	e0bffa17 	ldw	r2,-24(fp)
 8031514:	0085c83a 	sub	r2,zero,r2
 8031518:	18800015 	stw	r2,0(r3)
    return -1;
 803151c:	00bfffc4 	movi	r2,-1
 8031520:	00000106 	br	8031528 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8031524:	e0bff917 	ldw	r2,-28(fp)
}
 8031528:	e037883a 	mov	sp,fp
 803152c:	dfc00117 	ldw	ra,4(sp)
 8031530:	df000017 	ldw	fp,0(sp)
 8031534:	dec00204 	addi	sp,sp,8
 8031538:	f800283a 	ret

0803153c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 803153c:	deffff04 	addi	sp,sp,-4
 8031540:	df000015 	stw	fp,0(sp)
 8031544:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8031548:	000170fa 	wrctl	ienable,zero
}
 803154c:	0001883a 	nop
 8031550:	e037883a 	mov	sp,fp
 8031554:	df000017 	ldw	fp,0(sp)
 8031558:	dec00104 	addi	sp,sp,4
 803155c:	f800283a 	ret

08031560 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8031560:	defffb04 	addi	sp,sp,-20
 8031564:	dfc00415 	stw	ra,16(sp)
 8031568:	df000315 	stw	fp,12(sp)
 803156c:	df000304 	addi	fp,sp,12
 8031570:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8031574:	d0a00517 	ldw	r2,-32748(gp)
 8031578:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 803157c:	00003106 	br	8031644 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8031580:	e0bffd17 	ldw	r2,-12(fp)
 8031584:	10800217 	ldw	r2,8(r2)
 8031588:	1009883a 	mov	r4,r2
 803158c:	802187c0 	call	802187c <strlen>
 8031590:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8031594:	e0bffd17 	ldw	r2,-12(fp)
 8031598:	10c00217 	ldw	r3,8(r2)
 803159c:	e0bffe17 	ldw	r2,-8(fp)
 80315a0:	10bfffc4 	addi	r2,r2,-1
 80315a4:	1885883a 	add	r2,r3,r2
 80315a8:	10800003 	ldbu	r2,0(r2)
 80315ac:	10803fcc 	andi	r2,r2,255
 80315b0:	1080201c 	xori	r2,r2,128
 80315b4:	10bfe004 	addi	r2,r2,-128
 80315b8:	10800bd8 	cmpnei	r2,r2,47
 80315bc:	1000031e 	bne	r2,zero,80315cc <alt_find_file+0x6c>
    {
      len -= 1;
 80315c0:	e0bffe17 	ldw	r2,-8(fp)
 80315c4:	10bfffc4 	addi	r2,r2,-1
 80315c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80315cc:	e0bffe17 	ldw	r2,-8(fp)
 80315d0:	e0ffff17 	ldw	r3,-4(fp)
 80315d4:	1885883a 	add	r2,r3,r2
 80315d8:	10800003 	ldbu	r2,0(r2)
 80315dc:	10803fcc 	andi	r2,r2,255
 80315e0:	1080201c 	xori	r2,r2,128
 80315e4:	10bfe004 	addi	r2,r2,-128
 80315e8:	10800be0 	cmpeqi	r2,r2,47
 80315ec:	1000081e 	bne	r2,zero,8031610 <alt_find_file+0xb0>
 80315f0:	e0bffe17 	ldw	r2,-8(fp)
 80315f4:	e0ffff17 	ldw	r3,-4(fp)
 80315f8:	1885883a 	add	r2,r3,r2
 80315fc:	10800003 	ldbu	r2,0(r2)
 8031600:	10803fcc 	andi	r2,r2,255
 8031604:	1080201c 	xori	r2,r2,128
 8031608:	10bfe004 	addi	r2,r2,-128
 803160c:	10000a1e 	bne	r2,zero,8031638 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8031610:	e0bffd17 	ldw	r2,-12(fp)
 8031614:	10800217 	ldw	r2,8(r2)
 8031618:	e0fffe17 	ldw	r3,-8(fp)
 803161c:	180d883a 	mov	r6,r3
 8031620:	e17fff17 	ldw	r5,-4(fp)
 8031624:	1009883a 	mov	r4,r2
 8031628:	80318140 	call	8031814 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 803162c:	1000021e 	bne	r2,zero,8031638 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8031630:	e0bffd17 	ldw	r2,-12(fp)
 8031634:	00000706 	br	8031654 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8031638:	e0bffd17 	ldw	r2,-12(fp)
 803163c:	10800017 	ldw	r2,0(r2)
 8031640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8031644:	e0fffd17 	ldw	r3,-12(fp)
 8031648:	d0a00504 	addi	r2,gp,-32748
 803164c:	18bfcc1e 	bne	r3,r2,8031580 <__alt_data_end+0xffff2180>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8031650:	0005883a 	mov	r2,zero
}
 8031654:	e037883a 	mov	sp,fp
 8031658:	dfc00117 	ldw	ra,4(sp)
 803165c:	df000017 	ldw	fp,0(sp)
 8031660:	dec00204 	addi	sp,sp,8
 8031664:	f800283a 	ret

08031668 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8031668:	defffa04 	addi	sp,sp,-24
 803166c:	dfc00515 	stw	ra,20(sp)
 8031670:	df000415 	stw	fp,16(sp)
 8031674:	dc000315 	stw	r16,12(sp)
 8031678:	df000404 	addi	fp,sp,16
 803167c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8031680:	00bffa04 	movi	r2,-24
 8031684:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8031688:	e03ffc15 	stw	zero,-16(fp)
 803168c:	00001d06 	br	8031704 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8031690:	040200f4 	movhi	r16,2051
 8031694:	840a4f04 	addi	r16,r16,10556
 8031698:	e0bffc17 	ldw	r2,-16(fp)
 803169c:	01400304 	movi	r5,12
 80316a0:	1009883a 	mov	r4,r2
 80316a4:	80214e80 	call	80214e8 <__mulsi3>
 80316a8:	8085883a 	add	r2,r16,r2
 80316ac:	10800017 	ldw	r2,0(r2)
 80316b0:	1000111e 	bne	r2,zero,80316f8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80316b4:	040200f4 	movhi	r16,2051
 80316b8:	840a4f04 	addi	r16,r16,10556
 80316bc:	e0bffc17 	ldw	r2,-16(fp)
 80316c0:	01400304 	movi	r5,12
 80316c4:	1009883a 	mov	r4,r2
 80316c8:	80214e80 	call	80214e8 <__mulsi3>
 80316cc:	8085883a 	add	r2,r16,r2
 80316d0:	e0fffe17 	ldw	r3,-8(fp)
 80316d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80316d8:	d0e00917 	ldw	r3,-32732(gp)
 80316dc:	e0bffc17 	ldw	r2,-16(fp)
 80316e0:	1880020e 	bge	r3,r2,80316ec <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80316e4:	e0bffc17 	ldw	r2,-16(fp)
 80316e8:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 80316ec:	e0bffc17 	ldw	r2,-16(fp)
 80316f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80316f4:	00000606 	br	8031710 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80316f8:	e0bffc17 	ldw	r2,-16(fp)
 80316fc:	10800044 	addi	r2,r2,1
 8031700:	e0bffc15 	stw	r2,-16(fp)
 8031704:	e0bffc17 	ldw	r2,-16(fp)
 8031708:	10800810 	cmplti	r2,r2,32
 803170c:	103fe01e 	bne	r2,zero,8031690 <__alt_data_end+0xffff2290>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8031710:	e0bffd17 	ldw	r2,-12(fp)
}
 8031714:	e6ffff04 	addi	sp,fp,-4
 8031718:	dfc00217 	ldw	ra,8(sp)
 803171c:	df000117 	ldw	fp,4(sp)
 8031720:	dc000017 	ldw	r16,0(sp)
 8031724:	dec00304 	addi	sp,sp,12
 8031728:	f800283a 	ret

0803172c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 803172c:	defffe04 	addi	sp,sp,-8
 8031730:	df000115 	stw	fp,4(sp)
 8031734:	df000104 	addi	fp,sp,4
 8031738:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 803173c:	e0bfff17 	ldw	r2,-4(fp)
 8031740:	10bffe84 	addi	r2,r2,-6
 8031744:	10c00428 	cmpgeui	r3,r2,16
 8031748:	18001a1e 	bne	r3,zero,80317b4 <alt_exception_cause_generated_bad_addr+0x88>
 803174c:	100690ba 	slli	r3,r2,2
 8031750:	008200f4 	movhi	r2,2051
 8031754:	1085d904 	addi	r2,r2,5988
 8031758:	1885883a 	add	r2,r3,r2
 803175c:	10800017 	ldw	r2,0(r2)
 8031760:	1000683a 	jmp	r2
 8031764:	080317a4 	muli	zero,at,3166
 8031768:	080317a4 	muli	zero,at,3166
 803176c:	080317b4 	orhi	zero,at,3166
 8031770:	080317b4 	orhi	zero,at,3166
 8031774:	080317b4 	orhi	zero,at,3166
 8031778:	080317a4 	muli	zero,at,3166
 803177c:	080317ac 	andhi	zero,at,3166
 8031780:	080317b4 	orhi	zero,at,3166
 8031784:	080317a4 	muli	zero,at,3166
 8031788:	080317a4 	muli	zero,at,3166
 803178c:	080317b4 	orhi	zero,at,3166
 8031790:	080317a4 	muli	zero,at,3166
 8031794:	080317ac 	andhi	zero,at,3166
 8031798:	080317b4 	orhi	zero,at,3166
 803179c:	080317b4 	orhi	zero,at,3166
 80317a0:	080317a4 	muli	zero,at,3166
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80317a4:	00800044 	movi	r2,1
 80317a8:	00000306 	br	80317b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80317ac:	0005883a 	mov	r2,zero
 80317b0:	00000106 	br	80317b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80317b4:	0005883a 	mov	r2,zero
  }
}
 80317b8:	e037883a 	mov	sp,fp
 80317bc:	df000017 	ldw	fp,0(sp)
 80317c0:	dec00104 	addi	sp,sp,4
 80317c4:	f800283a 	ret

080317c8 <atexit>:
 80317c8:	200b883a 	mov	r5,r4
 80317cc:	000f883a 	mov	r7,zero
 80317d0:	000d883a 	mov	r6,zero
 80317d4:	0009883a 	mov	r4,zero
 80317d8:	80318901 	jmpi	8031890 <__register_exitproc>

080317dc <exit>:
 80317dc:	defffe04 	addi	sp,sp,-8
 80317e0:	000b883a 	mov	r5,zero
 80317e4:	dc000015 	stw	r16,0(sp)
 80317e8:	dfc00115 	stw	ra,4(sp)
 80317ec:	2021883a 	mov	r16,r4
 80317f0:	80319a80 	call	80319a8 <__call_exitprocs>
 80317f4:	008200f4 	movhi	r2,2051
 80317f8:	108eee04 	addi	r2,r2,15288
 80317fc:	11000017 	ldw	r4,0(r2)
 8031800:	20800f17 	ldw	r2,60(r4)
 8031804:	10000126 	beq	r2,zero,803180c <exit+0x30>
 8031808:	103ee83a 	callr	r2
 803180c:	8009883a 	mov	r4,r16
 8031810:	8031b280 	call	8031b28 <_exit>

08031814 <memcmp>:
 8031814:	01c000c4 	movi	r7,3
 8031818:	3980192e 	bgeu	r7,r6,8031880 <memcmp+0x6c>
 803181c:	2144b03a 	or	r2,r4,r5
 8031820:	11c4703a 	and	r2,r2,r7
 8031824:	10000f26 	beq	r2,zero,8031864 <memcmp+0x50>
 8031828:	20800003 	ldbu	r2,0(r4)
 803182c:	28c00003 	ldbu	r3,0(r5)
 8031830:	10c0151e 	bne	r2,r3,8031888 <memcmp+0x74>
 8031834:	31bfff84 	addi	r6,r6,-2
 8031838:	01ffffc4 	movi	r7,-1
 803183c:	00000406 	br	8031850 <memcmp+0x3c>
 8031840:	20800003 	ldbu	r2,0(r4)
 8031844:	28c00003 	ldbu	r3,0(r5)
 8031848:	31bfffc4 	addi	r6,r6,-1
 803184c:	10c00e1e 	bne	r2,r3,8031888 <memcmp+0x74>
 8031850:	21000044 	addi	r4,r4,1
 8031854:	29400044 	addi	r5,r5,1
 8031858:	31fff91e 	bne	r6,r7,8031840 <__alt_data_end+0xffff2440>
 803185c:	0005883a 	mov	r2,zero
 8031860:	f800283a 	ret
 8031864:	20c00017 	ldw	r3,0(r4)
 8031868:	28800017 	ldw	r2,0(r5)
 803186c:	18bfee1e 	bne	r3,r2,8031828 <__alt_data_end+0xffff2428>
 8031870:	31bfff04 	addi	r6,r6,-4
 8031874:	21000104 	addi	r4,r4,4
 8031878:	29400104 	addi	r5,r5,4
 803187c:	39bff936 	bltu	r7,r6,8031864 <__alt_data_end+0xffff2464>
 8031880:	303fe91e 	bne	r6,zero,8031828 <__alt_data_end+0xffff2428>
 8031884:	003ff506 	br	803185c <__alt_data_end+0xffff245c>
 8031888:	10c5c83a 	sub	r2,r2,r3
 803188c:	f800283a 	ret

08031890 <__register_exitproc>:
 8031890:	defffa04 	addi	sp,sp,-24
 8031894:	dc000315 	stw	r16,12(sp)
 8031898:	040200f4 	movhi	r16,2051
 803189c:	840eee04 	addi	r16,r16,15288
 80318a0:	80c00017 	ldw	r3,0(r16)
 80318a4:	dc400415 	stw	r17,16(sp)
 80318a8:	dfc00515 	stw	ra,20(sp)
 80318ac:	18805217 	ldw	r2,328(r3)
 80318b0:	2023883a 	mov	r17,r4
 80318b4:	10003726 	beq	r2,zero,8031994 <__register_exitproc+0x104>
 80318b8:	10c00117 	ldw	r3,4(r2)
 80318bc:	010007c4 	movi	r4,31
 80318c0:	20c00e16 	blt	r4,r3,80318fc <__register_exitproc+0x6c>
 80318c4:	1a000044 	addi	r8,r3,1
 80318c8:	8800221e 	bne	r17,zero,8031954 <__register_exitproc+0xc4>
 80318cc:	18c00084 	addi	r3,r3,2
 80318d0:	18c7883a 	add	r3,r3,r3
 80318d4:	18c7883a 	add	r3,r3,r3
 80318d8:	12000115 	stw	r8,4(r2)
 80318dc:	10c7883a 	add	r3,r2,r3
 80318e0:	19400015 	stw	r5,0(r3)
 80318e4:	0005883a 	mov	r2,zero
 80318e8:	dfc00517 	ldw	ra,20(sp)
 80318ec:	dc400417 	ldw	r17,16(sp)
 80318f0:	dc000317 	ldw	r16,12(sp)
 80318f4:	dec00604 	addi	sp,sp,24
 80318f8:	f800283a 	ret
 80318fc:	00800034 	movhi	r2,0
 8031900:	10800004 	addi	r2,r2,0
 8031904:	10002626 	beq	r2,zero,80319a0 <__register_exitproc+0x110>
 8031908:	01006404 	movi	r4,400
 803190c:	d9400015 	stw	r5,0(sp)
 8031910:	d9800115 	stw	r6,4(sp)
 8031914:	d9c00215 	stw	r7,8(sp)
 8031918:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 803191c:	d9400017 	ldw	r5,0(sp)
 8031920:	d9800117 	ldw	r6,4(sp)
 8031924:	d9c00217 	ldw	r7,8(sp)
 8031928:	10001d26 	beq	r2,zero,80319a0 <__register_exitproc+0x110>
 803192c:	81000017 	ldw	r4,0(r16)
 8031930:	10000115 	stw	zero,4(r2)
 8031934:	02000044 	movi	r8,1
 8031938:	22405217 	ldw	r9,328(r4)
 803193c:	0007883a 	mov	r3,zero
 8031940:	12400015 	stw	r9,0(r2)
 8031944:	20805215 	stw	r2,328(r4)
 8031948:	10006215 	stw	zero,392(r2)
 803194c:	10006315 	stw	zero,396(r2)
 8031950:	883fde26 	beq	r17,zero,80318cc <__alt_data_end+0xffff24cc>
 8031954:	18c9883a 	add	r4,r3,r3
 8031958:	2109883a 	add	r4,r4,r4
 803195c:	1109883a 	add	r4,r2,r4
 8031960:	21802215 	stw	r6,136(r4)
 8031964:	01800044 	movi	r6,1
 8031968:	12406217 	ldw	r9,392(r2)
 803196c:	30cc983a 	sll	r6,r6,r3
 8031970:	4992b03a 	or	r9,r9,r6
 8031974:	12406215 	stw	r9,392(r2)
 8031978:	21c04215 	stw	r7,264(r4)
 803197c:	01000084 	movi	r4,2
 8031980:	893fd21e 	bne	r17,r4,80318cc <__alt_data_end+0xffff24cc>
 8031984:	11006317 	ldw	r4,396(r2)
 8031988:	218cb03a 	or	r6,r4,r6
 803198c:	11806315 	stw	r6,396(r2)
 8031990:	003fce06 	br	80318cc <__alt_data_end+0xffff24cc>
 8031994:	18805304 	addi	r2,r3,332
 8031998:	18805215 	stw	r2,328(r3)
 803199c:	003fc606 	br	80318b8 <__alt_data_end+0xffff24b8>
 80319a0:	00bfffc4 	movi	r2,-1
 80319a4:	003fd006 	br	80318e8 <__alt_data_end+0xffff24e8>

080319a8 <__call_exitprocs>:
 80319a8:	defff504 	addi	sp,sp,-44
 80319ac:	df000915 	stw	fp,36(sp)
 80319b0:	dd400615 	stw	r21,24(sp)
 80319b4:	dc800315 	stw	r18,12(sp)
 80319b8:	dfc00a15 	stw	ra,40(sp)
 80319bc:	ddc00815 	stw	r23,32(sp)
 80319c0:	dd800715 	stw	r22,28(sp)
 80319c4:	dd000515 	stw	r20,20(sp)
 80319c8:	dcc00415 	stw	r19,16(sp)
 80319cc:	dc400215 	stw	r17,8(sp)
 80319d0:	dc000115 	stw	r16,4(sp)
 80319d4:	d9000015 	stw	r4,0(sp)
 80319d8:	2839883a 	mov	fp,r5
 80319dc:	04800044 	movi	r18,1
 80319e0:	057fffc4 	movi	r21,-1
 80319e4:	008200f4 	movhi	r2,2051
 80319e8:	108eee04 	addi	r2,r2,15288
 80319ec:	12000017 	ldw	r8,0(r2)
 80319f0:	45005217 	ldw	r20,328(r8)
 80319f4:	44c05204 	addi	r19,r8,328
 80319f8:	a0001c26 	beq	r20,zero,8031a6c <__call_exitprocs+0xc4>
 80319fc:	a0800117 	ldw	r2,4(r20)
 8031a00:	15ffffc4 	addi	r23,r2,-1
 8031a04:	b8000d16 	blt	r23,zero,8031a3c <__call_exitprocs+0x94>
 8031a08:	14000044 	addi	r16,r2,1
 8031a0c:	8421883a 	add	r16,r16,r16
 8031a10:	8421883a 	add	r16,r16,r16
 8031a14:	84402004 	addi	r17,r16,128
 8031a18:	a463883a 	add	r17,r20,r17
 8031a1c:	a421883a 	add	r16,r20,r16
 8031a20:	e0001e26 	beq	fp,zero,8031a9c <__call_exitprocs+0xf4>
 8031a24:	80804017 	ldw	r2,256(r16)
 8031a28:	e0801c26 	beq	fp,r2,8031a9c <__call_exitprocs+0xf4>
 8031a2c:	bdffffc4 	addi	r23,r23,-1
 8031a30:	843fff04 	addi	r16,r16,-4
 8031a34:	8c7fff04 	addi	r17,r17,-4
 8031a38:	bd7ff91e 	bne	r23,r21,8031a20 <__alt_data_end+0xffff2620>
 8031a3c:	00800034 	movhi	r2,0
 8031a40:	10800004 	addi	r2,r2,0
 8031a44:	10000926 	beq	r2,zero,8031a6c <__call_exitprocs+0xc4>
 8031a48:	a0800117 	ldw	r2,4(r20)
 8031a4c:	1000301e 	bne	r2,zero,8031b10 <__call_exitprocs+0x168>
 8031a50:	a0800017 	ldw	r2,0(r20)
 8031a54:	10003226 	beq	r2,zero,8031b20 <__call_exitprocs+0x178>
 8031a58:	a009883a 	mov	r4,r20
 8031a5c:	98800015 	stw	r2,0(r19)
 8031a60:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8031a64:	9d000017 	ldw	r20,0(r19)
 8031a68:	a03fe41e 	bne	r20,zero,80319fc <__alt_data_end+0xffff25fc>
 8031a6c:	dfc00a17 	ldw	ra,40(sp)
 8031a70:	df000917 	ldw	fp,36(sp)
 8031a74:	ddc00817 	ldw	r23,32(sp)
 8031a78:	dd800717 	ldw	r22,28(sp)
 8031a7c:	dd400617 	ldw	r21,24(sp)
 8031a80:	dd000517 	ldw	r20,20(sp)
 8031a84:	dcc00417 	ldw	r19,16(sp)
 8031a88:	dc800317 	ldw	r18,12(sp)
 8031a8c:	dc400217 	ldw	r17,8(sp)
 8031a90:	dc000117 	ldw	r16,4(sp)
 8031a94:	dec00b04 	addi	sp,sp,44
 8031a98:	f800283a 	ret
 8031a9c:	a0800117 	ldw	r2,4(r20)
 8031aa0:	80c00017 	ldw	r3,0(r16)
 8031aa4:	10bfffc4 	addi	r2,r2,-1
 8031aa8:	15c01426 	beq	r2,r23,8031afc <__call_exitprocs+0x154>
 8031aac:	80000015 	stw	zero,0(r16)
 8031ab0:	183fde26 	beq	r3,zero,8031a2c <__alt_data_end+0xffff262c>
 8031ab4:	95c8983a 	sll	r4,r18,r23
 8031ab8:	a0806217 	ldw	r2,392(r20)
 8031abc:	a5800117 	ldw	r22,4(r20)
 8031ac0:	2084703a 	and	r2,r4,r2
 8031ac4:	10000b26 	beq	r2,zero,8031af4 <__call_exitprocs+0x14c>
 8031ac8:	a0806317 	ldw	r2,396(r20)
 8031acc:	2088703a 	and	r4,r4,r2
 8031ad0:	20000c1e 	bne	r4,zero,8031b04 <__call_exitprocs+0x15c>
 8031ad4:	89400017 	ldw	r5,0(r17)
 8031ad8:	d9000017 	ldw	r4,0(sp)
 8031adc:	183ee83a 	callr	r3
 8031ae0:	a0800117 	ldw	r2,4(r20)
 8031ae4:	15bfbf1e 	bne	r2,r22,80319e4 <__alt_data_end+0xffff25e4>
 8031ae8:	98800017 	ldw	r2,0(r19)
 8031aec:	153fcf26 	beq	r2,r20,8031a2c <__alt_data_end+0xffff262c>
 8031af0:	003fbc06 	br	80319e4 <__alt_data_end+0xffff25e4>
 8031af4:	183ee83a 	callr	r3
 8031af8:	003ff906 	br	8031ae0 <__alt_data_end+0xffff26e0>
 8031afc:	a5c00115 	stw	r23,4(r20)
 8031b00:	003feb06 	br	8031ab0 <__alt_data_end+0xffff26b0>
 8031b04:	89000017 	ldw	r4,0(r17)
 8031b08:	183ee83a 	callr	r3
 8031b0c:	003ff406 	br	8031ae0 <__alt_data_end+0xffff26e0>
 8031b10:	a0800017 	ldw	r2,0(r20)
 8031b14:	a027883a 	mov	r19,r20
 8031b18:	1029883a 	mov	r20,r2
 8031b1c:	003fb606 	br	80319f8 <__alt_data_end+0xffff25f8>
 8031b20:	0005883a 	mov	r2,zero
 8031b24:	003ffb06 	br	8031b14 <__alt_data_end+0xffff2714>

08031b28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8031b28:	defffd04 	addi	sp,sp,-12
 8031b2c:	df000215 	stw	fp,8(sp)
 8031b30:	df000204 	addi	fp,sp,8
 8031b34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8031b38:	0001883a 	nop
 8031b3c:	e0bfff17 	ldw	r2,-4(fp)
 8031b40:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8031b44:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8031b48:	10000226 	beq	r2,zero,8031b54 <_exit+0x2c>
    ALT_SIM_FAIL();
 8031b4c:	002af070 	cmpltui	zero,zero,43969
 8031b50:	00000106 	br	8031b58 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8031b54:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8031b58:	003fff06 	br	8031b58 <__alt_data_end+0xffff2758>
