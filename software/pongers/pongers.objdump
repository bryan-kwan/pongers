
pongers.elf:     file format elf32-littlenios2
pongers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08020230

Program Header:
    LOAD off    0x00001000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x08020020 align 2**12
         filesz 0x0000a0a4 memsz 0x0000a0a4 flags r-x
    LOAD off    0x0000b0c4 vaddr 0x0802a0c4 paddr 0x0802bbc8 align 2**12
         filesz 0x00001b04 memsz 0x00001b04 flags rw-
    LOAD off    0x0000d6cc vaddr 0x0802d6cc paddr 0x0802d6cc align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08020020  08020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009c80  08020230  08020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000214  08029eb0  08029eb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b04  0802a0c4  0802bbc8  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  0802d6cc  0802d6cc  0000d6cc  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  0000cbc8  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0802d838  0802d838  0000cbc8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000cbc8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c48  00000000  00000000  0000cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001a222  00000000  00000000  0000d838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007360  00000000  00000000  00027a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008305  00000000  00000000  0002edba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001e44  00000000  00000000  000370c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000356a  00000000  00000000  00038f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008e0d  00000000  00000000  0003c46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0004527c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000d50  00000000  00000000  000452c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00048f72  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00048f75  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00048f7e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00048f7f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00048f80  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00048f84  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00048f88  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00048f8c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00048f97  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00048fa2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00048fad  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001e  00000000  00000000  00048fb6  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d27  00000000  00000000  00048fd4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008a00a  00000000  00000000  0004ccfb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
08020230 l    d  .text	00000000 .text
08029eb0 l    d  .rodata	00000000 .rodata
0802a0c4 l    d  .rwdata	00000000 .rwdata
0802d6cc l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0802d838 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pongers_bsp//obj/HAL/src/crt0.o
08020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gameutil.c
00000000 l    df *ABS*	00000000 pongers.c
08020f80 l     F .text	0000003c alarm_callback.3015
0802d6f8 l     O .bss	00000018 alarm.3017
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 tramp.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
080233ec l     F .text	00000008 __fp_unlock
08023400 l     F .text	0000019c __sinit.part.1
0802359c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0802a0c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08025fdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080260f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0802611c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08026210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080262f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080263e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080265c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0802bbb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08026a08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08026b44 l     F .text	00000034 alt_dev_reg
0802aa98 l     O .rwdata	00001060 jtag_uart_0
0802baf8 l     O .rwdata	0000003c modular_adc_0
0802bb34 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08027028 l     F .text	0000020c altera_avalon_jtag_uart_irq
08027234 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0802786c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
08027960 l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08028fbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080294ac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0802960c l     F .text	0000003c alt_get_errno
08029648 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0802d6f4 g     O .bss	00000004 alt_instruction_exception_handler
08027c00 g     F .text	00000050 adc_stop
08025e5c g     F .text	00000054 _isatty_r
080264fc g     F .text	0000007c alt_main
08028808 g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
08023280 g     F .text	000000c0 _puts_r
0802d738 g     O .bss	00000100 alt_irq
08025b84 g     F .text	00000060 _lseek_r
0802bbc8 g       *ABS*	00000000 __flash_rwdata_start
0802d838 g       *ABS*	00000000 __alt_heap_start
08025138 g     F .text	0000005c __sseek
0802374c g     F .text	00000010 __sinit
080235a4 g     F .text	00000078 __sfmoreglue
0802659c g     F .text	00000024 __malloc_unlock
08024824 g     F .text	0000015c memmove
08023734 g     F .text	00000018 _cleanup
08021844 g     F .text	00000070 .hidden __fixsfsi
08027f08 g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
08022374 g     F .text	000000dc .hidden __gtdf2
08029890 g     F .text	00000024 altera_nios2_gen2_irq_init
08027ecc g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08020000 g     F .entry	0000000c __reset
08027dc4 g     F .text	00000048 adc_interrupt_disable
08020020 g       *ABS*	00000000 __flash_exceptions_start
08025e00 g     F .text	0000005c _fstat_r
0802d6d8 g     O .bss	00000004 errno
080250b4 g     F .text	00000008 __seofread
08027ab4 g     F .text	00000074 altera_modular_adc_init
0802d6e0 g     O .bss	00000004 alt_argv
08033b88 g       *ABS*	00000000 _gp
080269d8 g     F .text	00000030 usleep
08021360 g     F .text	000004e4 .hidden __subsf3
080280b0 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0802a918 g     O .rwdata	00000180 alt_fd_list
0802915c g     F .text	00000090 alt_find_dev
080246dc g     F .text	00000148 memcpy
080233f4 g     F .text	0000000c _cleanup_r
08027cc8 g     F .text	0000003c adc_set_mode_run_continuously
08029590 g     F .text	0000007c alt_io_redirect
08022450 g     F .text	000000f4 .hidden __ltdf2
08029eb0 g       *ABS*	00000000 __DTOR_END__
08023340 g     F .text	00000014 puts
08029a80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080205a8 g     F .text	000006bc update_rect
0802816c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0802742c g     F .text	0000021c altera_avalon_jtag_uart_read
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080231c4 g     F .text	00000064 .hidden __udivsi3
0802624c g     F .text	000000ac isatty
080285d8 g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
0802d6d4 g     O .bss	00000004 __malloc_top_pad
0802379c g     F .text	000004c8 __sfvwrite_r
0802500c g     F .text	00000054 _sbrk_r
08028b3c g     F .text	000000c0 helper_plot_pixel
08025da0 g     F .text	00000060 _read_r
0802bbbc g     O .rwdata	00000008 altera_modular_adc_list
0802bba8 g     O .rwdata	00000004 alt_max_fd
080253a4 g     F .text	000000f0 _fclose_r
08025720 g     F .text	00000030 fflush
0802d6d0 g     O .bss	00000004 __malloc_max_sbrked_mem
08022db0 g     F .text	00000110 .hidden __extendsfdf2
080281a0 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
08026420 g     F .text	000000dc lseek
0802bb88 g     O .rwdata	00000004 _global_impure_ptr
08024aa8 g     F .text	00000564 _realloc_r
0802d838 g       *ABS*	00000000 __bss_end
080293bc g     F .text	000000f0 alt_iic_isr_register
080282dc g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
080268d0 g     F .text	00000108 alt_tick
08027e90 g     F .text	0000003c adc_wait_for_interrupt
0802376c g     F .text	00000018 __fp_lock_all
08029370 g     F .text	0000004c alt_ic_irq_enabled
08026834 g     F .text	0000009c alt_alarm_stop
0802d6f0 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
0802a8f0 g     O .rwdata	00000028 alt_dev_null
08027c88 g     F .text	00000040 adc_set_mode_run_once
08028f9c g     F .text	00000020 alt_dcache_flush_all
08028a74 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0802bbc8 g       *ABS*	00000000 __ram_rwdata_end
0802bba0 g     O .rwdata	00000008 alt_dev_list
08026a44 g     F .text	00000100 write
08028bfc g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
0802a0c4 g       *ABS*	00000000 __ram_rodata_end
08026158 g     F .text	000000b8 fstat
08020c64 g     F .text	0000003c clear
08022450 g     F .text	000000f4 .hidden __ledf2
08027c50 g     F .text	00000038 adc_start
08023228 g     F .text	00000058 .hidden __umodsi3
0802d838 g       *ABS*	00000000 end
08026f68 g     F .text	000000c0 altera_avalon_jtag_uart_init
080201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080212d4 g     F .text	0000008c .hidden __trampoline_setup
08029eb0 g       *ABS*	00000000 __CTOR_LIST__
0803f400 g       *ABS*	00000000 __alt_stack_pointer
080278e4 g     F .text	0000007c alt_avalon_timer_sc_init
08023068 g     F .text	00000064 .hidden __clzsi2
08027648 g     F .text	00000224 altera_avalon_jtag_uart_write
0802375c g     F .text	00000004 __sfp_lock_acquire
080245f8 g     F .text	000000e4 memchr
08025874 g     F .text	00000310 _free_r
08029cfc g     F .text	00000180 __call_exitprocs
0802bb90 g     O .rwdata	00000004 __malloc_sbrk_base
08020230 g     F .text	0000003c _start
0802d6e8 g     O .bss	00000004 _alt_tick_rate
0802d6ec g     O .bss	00000004 _alt_nticks
080265fc g     F .text	00000104 read
08026bb0 g     F .text	00000254 alt_sys_init
08029be4 g     F .text	00000118 __register_exitproc
080272d4 g     F .text	00000068 altera_avalon_jtag_uart_close
080212ac g     F .text	00000028 .hidden __mulsi3
0802a0c4 g       *ABS*	00000000 __ram_rwdata_start
08029eb0 g       *ABS*	00000000 __ram_rodata_start
0802d710 g     O .bss	00000028 __malloc_current_mallinfo
0802026c g     F .text	0000033c update_paddle
08026e04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080299bc g     F .text	000000c4 alt_get_fd
08028e44 g     F .text	00000158 alt_busy_sleep
08025350 g     F .text	00000054 _close_r
08029b68 g     F .text	0000007c memcmp
08026ec4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802d838 g       *ABS*	00000000 __alt_stack_base
08026f14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080251fc g     F .text	00000154 __swsetup_r
08027d80 g     F .text	00000044 adc_interrupt_enable
080219a4 g     F .text	000009d0 .hidden __divdf3
0802361c g     F .text	00000118 __sfp
0802a4e8 g     O .rwdata	00000408 __malloc_av_
08023768 g     F .text	00000004 __sinit_lock_release
08022544 g     F .text	0000086c .hidden __muldf3
08025060 g     F .text	00000054 __sread
080298b4 g     F .text	00000108 alt_find_file
08028ff8 g     F .text	000000a4 alt_dev_llist_insert
08026578 g     F .text	00000024 __malloc_lock
08026784 g     F .text	000000b0 sbrk
080256c4 g     F .text	0000005c _fflush_r
0802d6cc g       *ABS*	00000000 __bss_start
08024980 g     F .text	00000128 memset
08020fbc g     F .text	000002f0 main
0802d6e4 g     O .bss	00000004 alt_envp
0802d6cc g     O .bss	00000004 __malloc_max_total_mem
0802810c g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08026e64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08027a08 g     F .text	000000ac alt_adc_word_read
08025194 g     F .text	00000008 __sclose
0803f400 g       *ABS*	00000000 __alt_heap_limit
08025494 g     F .text	00000014 fclose
08022ec0 g     F .text	000001a8 .hidden __truncdfsf2
08023dec g     F .text	0000080c _malloc_r
0802bbac g     O .rwdata	00000004 alt_errno
08023c64 g     F .text	000000c4 _fwalk
080230cc g     F .text	00000084 .hidden __divsi3
08025750 g     F .text	00000124 _malloc_trim_r
08029eb0 g       *ABS*	00000000 __CTOR_END__
08029eb0 g       *ABS*	00000000 __flash_rodata_start
08029eb0 g       *ABS*	00000000 __DTOR_LIST__
08026b78 g     F .text	00000038 alt_irq_init
08026700 g     F .text	00000084 alt_release_fd
08029f42 g     O .rodata	00000100 .hidden __clz_tab
08029b1c g     F .text	00000014 atexit
0802519c g     F .text	00000060 _write_r
0802bb8c g     O .rwdata	00000004 _impure_ptr
0802d6dc g     O .bss	00000004 alt_argc
080254a8 g     F .text	0000021c __sflush_r
080290fc g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
08023784 g     F .text	00000018 __fp_unlock_all
0802bb98 g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0802920c g     F .text	00000050 alt_ic_isr_register
0802bbc8 g       *ABS*	00000000 _edata
0802d838 g       *ABS*	00000000 _end
08027e50 g     F .text	00000040 adc_interrupt_asserted
08020230 g       *ABS*	00000000 __ram_exceptions_end
0802733c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080292e4 g     F .text	0000008c alt_ic_irq_disable
080250bc g     F .text	0000007c __swrite
0802bb94 g     O .rwdata	00000004 __malloc_trim_threshold
08027e0c g     F .text	00000044 adc_clear_interrupt_status
08029b30 g     F .text	00000038 exit
08023d28 g     F .text	000000c4 _fwalk_reent
080218b4 g     F .text	000000f0 .hidden __floatunsisf
08023150 g     F .text	00000074 .hidden __modsi3
0803f400 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
08023760 g     F .text	00000004 __sfp_lock_release
08020ca0 g     F .text	00000170 draw
08027bc0 g     F .text	00000040 altera_modular_adc_open
08029e7c g     F .text	00000034 _exit
08025eb0 g     F .text	0000012c alt_alarm_start
08025be4 g     F .text	000001bc __smakebuf_r
08023354 g     F .text	00000098 strlen
08029734 g     F .text	0000015c open
08022374 g     F .text	000000dc .hidden __gedf2
08020efc g     F .text	00000084 get_user_input
08027d04 g     F .text	0000007c adc_recalibrate
080291ec g     F .text	00000020 alt_icache_flush_all
0802bbc4 g     O .rwdata	00000004 alt_priority_mask
0802925c g     F .text	00000088 alt_ic_irq_enable
0802bbb4 g     O .rwdata	00000008 alt_alarm_list
08020e10 g     F .text	000000ec run_game_tick
0802909c g     F .text	00000060 _do_ctors
08026018 g     F .text	000000d8 close
08026360 g     F .text	00000084 alt_load
08027b28 g     F .text	00000098 alt_adc_register_callback
08023764 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020000:	004200b4 	movhi	at,2050
    ori r1, r1, %lo(_start)
 8020004:	08408c14 	ori	at,at,560
    jmp r1
 8020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	008200f4 	movhi	r2,2051
 8020140:	10b5ce04 	addi	r2,r2,-10440
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	008200f4 	movhi	r2,2051
 8020158:	10b5ce04 	addi	r2,r2,-10440
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80201e4:	00bfffc4 	movi	r2,-1
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80201f0:	d0a6db17 	ldw	r2,-25748(gp)
 80201f4:	10000726 	beq	r2,zero,8020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80201f8:	d0a6db17 	ldw	r2,-25748(gp)
 80201fc:	e0fffd17 	ldw	r3,-12(fp)
 8020200:	e1bffe17 	ldw	r6,-8(fp)
 8020204:	e17fff17 	ldw	r5,-4(fp)
 8020208:	1809883a 	mov	r4,r3
 802020c:	103ee83a 	callr	r2
 8020210:	00000206 	br	802021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020218:	0005883a 	mov	r2,zero
}
 802021c:	e037883a 	mov	sp,fp
 8020220:	dfc00117 	ldw	ra,4(sp)
 8020224:	df000017 	ldw	fp,0(sp)
 8020228:	dec00204 	addi	sp,sp,8
 802022c:	f800283a 	ret

Disassembly of section .text:

08020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8020230:	06c200f4 	movhi	sp,2051
    ori sp, sp, %lo(__alt_stack_pointer)
 8020234:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
 8020238:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 802023c:	d68ee214 	ori	gp,gp,15240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8020240:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 8020244:	10b5b314 	ori	r2,r2,54988

    movhi r3, %hi(__bss_end)
 8020248:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 802024c:	18f60e14 	ori	r3,r3,55352

    beq r2, r3, 1f
 8020250:	10c00326 	beq	r2,r3,8020260 <_start+0x30>

0:
    stw zero, (r2)
 8020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 802025c:	10fffd36 	bltu	r2,r3,8020254 <__alt_data_end+0xfffe0e54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8020260:	80263600 	call	8026360 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8020264:	80264fc0 	call	80264fc <alt_main>

08020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8020268:	003fff06 	br	8020268 <__alt_data_end+0xfffe0e68>

0802026c <update_paddle>:
#include "gameutil.h"


// Updates paddle positions
// There must be at least 2 paddles in the paddle[] array
void update_paddle(Rectangle paddle[], int len, float* user_input) {
 802026c:	defff804 	addi	sp,sp,-32
 8020270:	dfc00715 	stw	ra,28(sp)
 8020274:	df000615 	stw	fp,24(sp)
 8020278:	dc400515 	stw	r17,20(sp)
 802027c:	dc000415 	stw	r16,16(sp)
 8020280:	df000604 	addi	fp,sp,24
 8020284:	e13ffb15 	stw	r4,-20(fp)
 8020288:	e17ffc15 	stw	r5,-16(fp)
 802028c:	e1bffd15 	stw	r6,-12(fp)
	// Adjust speed according to user input

	if(*user_input>=2.6){
 8020290:	e0bffd17 	ldw	r2,-12(fp)
 8020294:	10c00017 	ldw	r3,0(r2)
 8020298:	1809883a 	mov	r4,r3
 802029c:	8022db00 	call	8022db0 <__extendsfdf2>
 80202a0:	1011883a 	mov	r8,r2
 80202a4:	1813883a 	mov	r9,r3
 80202a8:	01b33374 	movhi	r6,52429
 80202ac:	31b33344 	addi	r6,r6,-13107
 80202b0:	01d00174 	movhi	r7,16389
 80202b4:	39f33304 	addi	r7,r7,-13108
 80202b8:	4009883a 	mov	r4,r8
 80202bc:	480b883a 	mov	r5,r9
 80202c0:	80223740 	call	8022374 <__gedf2>
 80202c4:	10000f16 	blt	r2,zero,8020304 <update_paddle+0x98>
		paddle[1].yspeed = *user_input;
 80202c8:	e0bffb17 	ldw	r2,-20(fp)
 80202cc:	14000704 	addi	r16,r2,28
 80202d0:	e0bffd17 	ldw	r2,-12(fp)
 80202d4:	10c00017 	ldw	r3,0(r2)
 80202d8:	1809883a 	mov	r4,r3
 80202dc:	80218440 	call	8021844 <__fixsfsi>
 80202e0:	80800315 	stw	r2,12(r16)
		paddle[0].yspeed = *user_input;
 80202e4:	e0bffd17 	ldw	r2,-12(fp)
 80202e8:	10c00017 	ldw	r3,0(r2)
 80202ec:	1809883a 	mov	r4,r3
 80202f0:	80218440 	call	8021844 <__fixsfsi>
 80202f4:	1007883a 	mov	r3,r2
 80202f8:	e0bffb17 	ldw	r2,-20(fp)
 80202fc:	10c00315 	stw	r3,12(r2)
 8020300:	00002e06 	br	80203bc <update_paddle+0x150>
	}
	else if(*user_input<=2.4){
 8020304:	e0bffd17 	ldw	r2,-12(fp)
 8020308:	10c00017 	ldw	r3,0(r2)
 802030c:	1809883a 	mov	r4,r3
 8020310:	8022db00 	call	8022db0 <__extendsfdf2>
 8020314:	1011883a 	mov	r8,r2
 8020318:	1813883a 	mov	r9,r3
 802031c:	018cccf4 	movhi	r6,13107
 8020320:	318cccc4 	addi	r6,r6,13107
 8020324:	01d000f4 	movhi	r7,16387
 8020328:	39ccccc4 	addi	r7,r7,13107
 802032c:	4009883a 	mov	r4,r8
 8020330:	480b883a 	mov	r5,r9
 8020334:	80224500 	call	8022450 <__ledf2>
 8020338:	00801b16 	blt	zero,r2,80203a8 <update_paddle+0x13c>
		paddle[1].yspeed = -(5-*user_input);
 802033c:	e0bffb17 	ldw	r2,-20(fp)
 8020340:	14000704 	addi	r16,r2,28
 8020344:	e0bffd17 	ldw	r2,-12(fp)
 8020348:	10c00017 	ldw	r3,0(r2)
 802034c:	180b883a 	mov	r5,r3
 8020350:	01102834 	movhi	r4,16544
 8020354:	80213600 	call	8021360 <__subsf3>
 8020358:	1007883a 	mov	r3,r2
 802035c:	1805883a 	mov	r2,r3
 8020360:	10a0003c 	xorhi	r2,r2,32768
 8020364:	1009883a 	mov	r4,r2
 8020368:	80218440 	call	8021844 <__fixsfsi>
 802036c:	80800315 	stw	r2,12(r16)
		paddle[0].yspeed = -(5-*user_input);
 8020370:	e0bffd17 	ldw	r2,-12(fp)
 8020374:	10c00017 	ldw	r3,0(r2)
 8020378:	180b883a 	mov	r5,r3
 802037c:	01102834 	movhi	r4,16544
 8020380:	80213600 	call	8021360 <__subsf3>
 8020384:	1007883a 	mov	r3,r2
 8020388:	1805883a 	mov	r2,r3
 802038c:	10a0003c 	xorhi	r2,r2,32768
 8020390:	1009883a 	mov	r4,r2
 8020394:	80218440 	call	8021844 <__fixsfsi>
 8020398:	1007883a 	mov	r3,r2
 802039c:	e0bffb17 	ldw	r2,-20(fp)
 80203a0:	10c00315 	stw	r3,12(r2)
 80203a4:	00000506 	br	80203bc <update_paddle+0x150>
	}
	else{
		paddle[1].yspeed =0;
 80203a8:	e0bffb17 	ldw	r2,-20(fp)
 80203ac:	10800704 	addi	r2,r2,28
 80203b0:	10000315 	stw	zero,12(r2)
		paddle[0].yspeed = 0;
 80203b4:	e0bffb17 	ldw	r2,-20(fp)
 80203b8:	10000315 	stw	zero,12(r2)
	}
	for(int i = 0; i< len; i++) {
 80203bc:	e03ffa15 	stw	zero,-24(fp)
 80203c0:	00006e06 	br	802057c <update_paddle+0x310>
			// Update position
			paddle[i].y += paddle[i].yspeed;
 80203c4:	e0bffa17 	ldw	r2,-24(fp)
 80203c8:	01400704 	movi	r5,28
 80203cc:	1009883a 	mov	r4,r2
 80203d0:	80212ac0 	call	80212ac <__mulsi3>
 80203d4:	1007883a 	mov	r3,r2
 80203d8:	e0bffb17 	ldw	r2,-20(fp)
 80203dc:	10e1883a 	add	r16,r2,r3
 80203e0:	e0bffa17 	ldw	r2,-24(fp)
 80203e4:	01400704 	movi	r5,28
 80203e8:	1009883a 	mov	r4,r2
 80203ec:	80212ac0 	call	80212ac <__mulsi3>
 80203f0:	1007883a 	mov	r3,r2
 80203f4:	e0bffb17 	ldw	r2,-20(fp)
 80203f8:	10c5883a 	add	r2,r2,r3
 80203fc:	14400117 	ldw	r17,4(r2)
 8020400:	e0bffa17 	ldw	r2,-24(fp)
 8020404:	01400704 	movi	r5,28
 8020408:	1009883a 	mov	r4,r2
 802040c:	80212ac0 	call	80212ac <__mulsi3>
 8020410:	1007883a 	mov	r3,r2
 8020414:	e0bffb17 	ldw	r2,-20(fp)
 8020418:	10c5883a 	add	r2,r2,r3
 802041c:	10800317 	ldw	r2,12(r2)
 8020420:	8885883a 	add	r2,r17,r2
 8020424:	80800115 	stw	r2,4(r16)
			paddle[0].x = 10;
 8020428:	e0bffb17 	ldw	r2,-20(fp)
 802042c:	00c00284 	movi	r3,10
 8020430:	10c00015 	stw	r3,0(r2)
			paddle[1].x = SCREEN_WIDTH - paddle[1].width;
 8020434:	e0bffb17 	ldw	r2,-20(fp)
 8020438:	10800704 	addi	r2,r2,28
 802043c:	e0fffb17 	ldw	r3,-20(fp)
 8020440:	18c00704 	addi	r3,r3,28
 8020444:	18c00417 	ldw	r3,16(r3)
 8020448:	01005004 	movi	r4,320
 802044c:	20c7c83a 	sub	r3,r4,r3
 8020450:	10c00015 	stw	r3,0(r2)
			// Check for collisions
			if (paddle[i].y + paddle[i].height >= SCREEN_HEIGHT) {
 8020454:	e0bffa17 	ldw	r2,-24(fp)
 8020458:	01400704 	movi	r5,28
 802045c:	1009883a 	mov	r4,r2
 8020460:	80212ac0 	call	80212ac <__mulsi3>
 8020464:	1007883a 	mov	r3,r2
 8020468:	e0bffb17 	ldw	r2,-20(fp)
 802046c:	10c5883a 	add	r2,r2,r3
 8020470:	14000117 	ldw	r16,4(r2)
 8020474:	e0bffa17 	ldw	r2,-24(fp)
 8020478:	01400704 	movi	r5,28
 802047c:	1009883a 	mov	r4,r2
 8020480:	80212ac0 	call	80212ac <__mulsi3>
 8020484:	1007883a 	mov	r3,r2
 8020488:	e0bffb17 	ldw	r2,-20(fp)
 802048c:	10c5883a 	add	r2,r2,r3
 8020490:	10800517 	ldw	r2,20(r2)
 8020494:	8085883a 	add	r2,r16,r2
 8020498:	10803c10 	cmplti	r2,r2,240
 802049c:	10001b1e 	bne	r2,zero,802050c <update_paddle+0x2a0>
				paddle[i].y = SCREEN_HEIGHT - paddle[i].height;
 80204a0:	e0bffa17 	ldw	r2,-24(fp)
 80204a4:	01400704 	movi	r5,28
 80204a8:	1009883a 	mov	r4,r2
 80204ac:	80212ac0 	call	80212ac <__mulsi3>
 80204b0:	1007883a 	mov	r3,r2
 80204b4:	e0bffb17 	ldw	r2,-20(fp)
 80204b8:	10e1883a 	add	r16,r2,r3
 80204bc:	e0bffa17 	ldw	r2,-24(fp)
 80204c0:	01400704 	movi	r5,28
 80204c4:	1009883a 	mov	r4,r2
 80204c8:	80212ac0 	call	80212ac <__mulsi3>
 80204cc:	1007883a 	mov	r3,r2
 80204d0:	e0bffb17 	ldw	r2,-20(fp)
 80204d4:	10c5883a 	add	r2,r2,r3
 80204d8:	10800517 	ldw	r2,20(r2)
 80204dc:	00c03c04 	movi	r3,240
 80204e0:	1885c83a 	sub	r2,r3,r2
 80204e4:	80800115 	stw	r2,4(r16)
				paddle[i].yspeed = 0;
 80204e8:	e0bffa17 	ldw	r2,-24(fp)
 80204ec:	01400704 	movi	r5,28
 80204f0:	1009883a 	mov	r4,r2
 80204f4:	80212ac0 	call	80212ac <__mulsi3>
 80204f8:	1007883a 	mov	r3,r2
 80204fc:	e0bffb17 	ldw	r2,-20(fp)
 8020500:	10c5883a 	add	r2,r2,r3
 8020504:	10000315 	stw	zero,12(r2)
 8020508:	00001906 	br	8020570 <update_paddle+0x304>
			}
			else if (paddle[i].y <= 0) {
 802050c:	e0bffa17 	ldw	r2,-24(fp)
 8020510:	01400704 	movi	r5,28
 8020514:	1009883a 	mov	r4,r2
 8020518:	80212ac0 	call	80212ac <__mulsi3>
 802051c:	1007883a 	mov	r3,r2
 8020520:	e0bffb17 	ldw	r2,-20(fp)
 8020524:	10c5883a 	add	r2,r2,r3
 8020528:	10800117 	ldw	r2,4(r2)
 802052c:	00801016 	blt	zero,r2,8020570 <update_paddle+0x304>
				paddle[i].y = 0;
 8020530:	e0bffa17 	ldw	r2,-24(fp)
 8020534:	01400704 	movi	r5,28
 8020538:	1009883a 	mov	r4,r2
 802053c:	80212ac0 	call	80212ac <__mulsi3>
 8020540:	1007883a 	mov	r3,r2
 8020544:	e0bffb17 	ldw	r2,-20(fp)
 8020548:	10c5883a 	add	r2,r2,r3
 802054c:	10000115 	stw	zero,4(r2)
				paddle[i].yspeed = 0;
 8020550:	e0bffa17 	ldw	r2,-24(fp)
 8020554:	01400704 	movi	r5,28
 8020558:	1009883a 	mov	r4,r2
 802055c:	80212ac0 	call	80212ac <__mulsi3>
 8020560:	1007883a 	mov	r3,r2
 8020564:	e0bffb17 	ldw	r2,-20(fp)
 8020568:	10c5883a 	add	r2,r2,r3
 802056c:	10000315 	stw	zero,12(r2)
	}
	else{
		paddle[1].yspeed =0;
		paddle[0].yspeed = 0;
	}
	for(int i = 0; i< len; i++) {
 8020570:	e0bffa17 	ldw	r2,-24(fp)
 8020574:	10800044 	addi	r2,r2,1
 8020578:	e0bffa15 	stw	r2,-24(fp)
 802057c:	e0fffa17 	ldw	r3,-24(fp)
 8020580:	e0bffc17 	ldw	r2,-16(fp)
 8020584:	18bf8f16 	blt	r3,r2,80203c4 <__alt_data_end+0xfffe0fc4>
			paddle[i].yspeed = 0;
			*/
		//}

	}
}
 8020588:	0001883a 	nop
 802058c:	e6fffe04 	addi	sp,fp,-8
 8020590:	dfc00317 	ldw	ra,12(sp)
 8020594:	df000217 	ldw	fp,8(sp)
 8020598:	dc400117 	ldw	r17,4(sp)
 802059c:	dc000017 	ldw	r16,0(sp)
 80205a0:	dec00404 	addi	sp,sp,16
 80205a4:	f800283a 	ret

080205a8 <update_rect>:
// Updates the position of each Rectangle object
// "bounces" each object upon collision with screen top/bottom edges
// or paddle objects
void update_rect(Rectangle rect[], Rectangle paddles[], int rect_len, int paddle_len, int* scores) {
 80205a8:	defff704 	addi	sp,sp,-36
 80205ac:	dfc00815 	stw	ra,32(sp)
 80205b0:	df000715 	stw	fp,28(sp)
 80205b4:	dc400615 	stw	r17,24(sp)
 80205b8:	dc000515 	stw	r16,20(sp)
 80205bc:	df000704 	addi	fp,sp,28
 80205c0:	e13ffa15 	stw	r4,-24(fp)
 80205c4:	e17ffb15 	stw	r5,-20(fp)
 80205c8:	e1bffc15 	stw	r6,-16(fp)
 80205cc:	e1fffd15 	stw	r7,-12(fp)
	for(int i = 0; i< rect_len; i++) {
 80205d0:	e03ff915 	stw	zero,-28(fp)
 80205d4:	00019806 	br	8020c38 <update_rect+0x690>
		// Update position
		rect[i].x += rect[i].xspeed;
 80205d8:	e0bff917 	ldw	r2,-28(fp)
 80205dc:	01400704 	movi	r5,28
 80205e0:	1009883a 	mov	r4,r2
 80205e4:	80212ac0 	call	80212ac <__mulsi3>
 80205e8:	1007883a 	mov	r3,r2
 80205ec:	e0bffa17 	ldw	r2,-24(fp)
 80205f0:	10e1883a 	add	r16,r2,r3
 80205f4:	e0bff917 	ldw	r2,-28(fp)
 80205f8:	01400704 	movi	r5,28
 80205fc:	1009883a 	mov	r4,r2
 8020600:	80212ac0 	call	80212ac <__mulsi3>
 8020604:	1007883a 	mov	r3,r2
 8020608:	e0bffa17 	ldw	r2,-24(fp)
 802060c:	10c5883a 	add	r2,r2,r3
 8020610:	14400017 	ldw	r17,0(r2)
 8020614:	e0bff917 	ldw	r2,-28(fp)
 8020618:	01400704 	movi	r5,28
 802061c:	1009883a 	mov	r4,r2
 8020620:	80212ac0 	call	80212ac <__mulsi3>
 8020624:	1007883a 	mov	r3,r2
 8020628:	e0bffa17 	ldw	r2,-24(fp)
 802062c:	10c5883a 	add	r2,r2,r3
 8020630:	10800217 	ldw	r2,8(r2)
 8020634:	8885883a 	add	r2,r17,r2
 8020638:	80800015 	stw	r2,0(r16)
		rect[i].y += rect[i].yspeed;
 802063c:	e0bff917 	ldw	r2,-28(fp)
 8020640:	01400704 	movi	r5,28
 8020644:	1009883a 	mov	r4,r2
 8020648:	80212ac0 	call	80212ac <__mulsi3>
 802064c:	1007883a 	mov	r3,r2
 8020650:	e0bffa17 	ldw	r2,-24(fp)
 8020654:	10e1883a 	add	r16,r2,r3
 8020658:	e0bff917 	ldw	r2,-28(fp)
 802065c:	01400704 	movi	r5,28
 8020660:	1009883a 	mov	r4,r2
 8020664:	80212ac0 	call	80212ac <__mulsi3>
 8020668:	1007883a 	mov	r3,r2
 802066c:	e0bffa17 	ldw	r2,-24(fp)
 8020670:	10c5883a 	add	r2,r2,r3
 8020674:	14400117 	ldw	r17,4(r2)
 8020678:	e0bff917 	ldw	r2,-28(fp)
 802067c:	01400704 	movi	r5,28
 8020680:	1009883a 	mov	r4,r2
 8020684:	80212ac0 	call	80212ac <__mulsi3>
 8020688:	1007883a 	mov	r3,r2
 802068c:	e0bffa17 	ldw	r2,-24(fp)
 8020690:	10c5883a 	add	r2,r2,r3
 8020694:	10800317 	ldw	r2,12(r2)
 8020698:	8885883a 	add	r2,r17,r2
 802069c:	80800115 	stw	r2,4(r16)
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
 80206a0:	e0bff917 	ldw	r2,-28(fp)
 80206a4:	01400704 	movi	r5,28
 80206a8:	1009883a 	mov	r4,r2
 80206ac:	80212ac0 	call	80212ac <__mulsi3>
 80206b0:	1007883a 	mov	r3,r2
 80206b4:	e0bffa17 	ldw	r2,-24(fp)
 80206b8:	10c5883a 	add	r2,r2,r3
 80206bc:	14000017 	ldw	r16,0(r2)
 80206c0:	e0bff917 	ldw	r2,-28(fp)
 80206c4:	01400704 	movi	r5,28
 80206c8:	1009883a 	mov	r4,r2
 80206cc:	80212ac0 	call	80212ac <__mulsi3>
 80206d0:	1007883a 	mov	r3,r2
 80206d4:	e0bffa17 	ldw	r2,-24(fp)
 80206d8:	10c5883a 	add	r2,r2,r3
 80206dc:	10800417 	ldw	r2,16(r2)
 80206e0:	8085883a 	add	r2,r16,r2
 80206e4:	10805008 	cmpgei	r2,r2,320
 80206e8:	1000151e 	bne	r2,zero,8020740 <update_rect+0x198>
 80206ec:	e0bff917 	ldw	r2,-28(fp)
 80206f0:	01400704 	movi	r5,28
 80206f4:	1009883a 	mov	r4,r2
 80206f8:	80212ac0 	call	80212ac <__mulsi3>
 80206fc:	1007883a 	mov	r3,r2
 8020700:	e0bffa17 	ldw	r2,-24(fp)
 8020704:	10c5883a 	add	r2,r2,r3
 8020708:	14000017 	ldw	r16,0(r2)
 802070c:	e0bff917 	ldw	r2,-28(fp)
 8020710:	01400704 	movi	r5,28
 8020714:	1009883a 	mov	r4,r2
 8020718:	80212ac0 	call	80212ac <__mulsi3>
 802071c:	1007883a 	mov	r3,r2
 8020720:	e0bffa17 	ldw	r2,-24(fp)
 8020724:	10c5883a 	add	r2,r2,r3
 8020728:	10800417 	ldw	r2,16(r2)
 802072c:	8087883a 	add	r3,r16,r2
 8020730:	e0bffb17 	ldw	r2,-20(fp)
 8020734:	10800704 	addi	r2,r2,28
 8020738:	10800017 	ldw	r2,0(r2)
 802073c:	18806b16 	blt	r3,r2,80208ec <update_rect+0x344>
			// Collision with right paddle
			if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8020740:	e0bff917 	ldw	r2,-28(fp)
 8020744:	01400704 	movi	r5,28
 8020748:	1009883a 	mov	r4,r2
 802074c:	80212ac0 	call	80212ac <__mulsi3>
 8020750:	1007883a 	mov	r3,r2
 8020754:	e0bffa17 	ldw	r2,-24(fp)
 8020758:	10c5883a 	add	r2,r2,r3
 802075c:	14000117 	ldw	r16,4(r2)
 8020760:	e0bff917 	ldw	r2,-28(fp)
 8020764:	01400704 	movi	r5,28
 8020768:	1009883a 	mov	r4,r2
 802076c:	80212ac0 	call	80212ac <__mulsi3>
 8020770:	1007883a 	mov	r3,r2
 8020774:	e0bffa17 	ldw	r2,-24(fp)
 8020778:	10c5883a 	add	r2,r2,r3
 802077c:	10800517 	ldw	r2,20(r2)
 8020780:	8087883a 	add	r3,r16,r2
 8020784:	e0bffb17 	ldw	r2,-20(fp)
 8020788:	10800704 	addi	r2,r2,28
 802078c:	10800117 	ldw	r2,4(r2)
 8020790:	18803616 	blt	r3,r2,802086c <update_rect+0x2c4>
 8020794:	e0bff917 	ldw	r2,-28(fp)
 8020798:	01400704 	movi	r5,28
 802079c:	1009883a 	mov	r4,r2
 80207a0:	80212ac0 	call	80212ac <__mulsi3>
 80207a4:	1007883a 	mov	r3,r2
 80207a8:	e0bffa17 	ldw	r2,-24(fp)
 80207ac:	10c5883a 	add	r2,r2,r3
 80207b0:	10800117 	ldw	r2,4(r2)
 80207b4:	e0fffb17 	ldw	r3,-20(fp)
 80207b8:	18c00704 	addi	r3,r3,28
 80207bc:	19000117 	ldw	r4,4(r3)
 80207c0:	e0fffb17 	ldw	r3,-20(fp)
 80207c4:	18c00704 	addi	r3,r3,28
 80207c8:	18c00517 	ldw	r3,20(r3)
 80207cc:	20c7883a 	add	r3,r4,r3
 80207d0:	18802616 	blt	r3,r2,802086c <update_rect+0x2c4>
				rect[i].x = paddles[1].x - rect[i].width;
 80207d4:	e0bff917 	ldw	r2,-28(fp)
 80207d8:	01400704 	movi	r5,28
 80207dc:	1009883a 	mov	r4,r2
 80207e0:	80212ac0 	call	80212ac <__mulsi3>
 80207e4:	1007883a 	mov	r3,r2
 80207e8:	e0bffa17 	ldw	r2,-24(fp)
 80207ec:	10e1883a 	add	r16,r2,r3
 80207f0:	e0bffb17 	ldw	r2,-20(fp)
 80207f4:	10800704 	addi	r2,r2,28
 80207f8:	14400017 	ldw	r17,0(r2)
 80207fc:	e0bff917 	ldw	r2,-28(fp)
 8020800:	01400704 	movi	r5,28
 8020804:	1009883a 	mov	r4,r2
 8020808:	80212ac0 	call	80212ac <__mulsi3>
 802080c:	1007883a 	mov	r3,r2
 8020810:	e0bffa17 	ldw	r2,-24(fp)
 8020814:	10c5883a 	add	r2,r2,r3
 8020818:	10800417 	ldw	r2,16(r2)
 802081c:	8885c83a 	sub	r2,r17,r2
 8020820:	80800015 	stw	r2,0(r16)
				rect[i].xspeed*=-1; // Bounce
 8020824:	e0bff917 	ldw	r2,-28(fp)
 8020828:	01400704 	movi	r5,28
 802082c:	1009883a 	mov	r4,r2
 8020830:	80212ac0 	call	80212ac <__mulsi3>
 8020834:	1007883a 	mov	r3,r2
 8020838:	e0bffa17 	ldw	r2,-24(fp)
 802083c:	10e1883a 	add	r16,r2,r3
 8020840:	e0bff917 	ldw	r2,-28(fp)
 8020844:	01400704 	movi	r5,28
 8020848:	1009883a 	mov	r4,r2
 802084c:	80212ac0 	call	80212ac <__mulsi3>
 8020850:	1007883a 	mov	r3,r2
 8020854:	e0bffa17 	ldw	r2,-24(fp)
 8020858:	10c5883a 	add	r2,r2,r3
 802085c:	10800217 	ldw	r2,8(r2)
 8020860:	0085c83a 	sub	r2,zero,r2
 8020864:	80800215 	stw	r2,8(r16)
		rect[i].x += rect[i].xspeed;
		rect[i].y += rect[i].yspeed;
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
			// Collision with right paddle
			if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8020868:	0000f006 	br	8020c2c <update_rect+0x684>
				rect[i].x = paddles[1].x - rect[i].width;
				rect[i].xspeed*=-1; // Bounce
			}
			else { // Goal - player 1 scored
				// Reset ball position
				rect[i].x = BALL_XDEFAULT;
 802086c:	e0bff917 	ldw	r2,-28(fp)
 8020870:	01400704 	movi	r5,28
 8020874:	1009883a 	mov	r4,r2
 8020878:	80212ac0 	call	80212ac <__mulsi3>
 802087c:	1007883a 	mov	r3,r2
 8020880:	e0bffa17 	ldw	r2,-24(fp)
 8020884:	10c5883a 	add	r2,r2,r3
 8020888:	00c02804 	movi	r3,160
 802088c:	10c00015 	stw	r3,0(r2)
				rect[i].xspeed*=-1;
 8020890:	e0bff917 	ldw	r2,-28(fp)
 8020894:	01400704 	movi	r5,28
 8020898:	1009883a 	mov	r4,r2
 802089c:	80212ac0 	call	80212ac <__mulsi3>
 80208a0:	1007883a 	mov	r3,r2
 80208a4:	e0bffa17 	ldw	r2,-24(fp)
 80208a8:	10e1883a 	add	r16,r2,r3
 80208ac:	e0bff917 	ldw	r2,-28(fp)
 80208b0:	01400704 	movi	r5,28
 80208b4:	1009883a 	mov	r4,r2
 80208b8:	80212ac0 	call	80212ac <__mulsi3>
 80208bc:	1007883a 	mov	r3,r2
 80208c0:	e0bffa17 	ldw	r2,-24(fp)
 80208c4:	10c5883a 	add	r2,r2,r3
 80208c8:	10800217 	ldw	r2,8(r2)
 80208cc:	0085c83a 	sub	r2,zero,r2
 80208d0:	80800215 	stw	r2,8(r16)
				// Add 1 to left player's score
				scores[0] += 1;
 80208d4:	e0800217 	ldw	r2,8(fp)
 80208d8:	10800017 	ldw	r2,0(r2)
 80208dc:	10c00044 	addi	r3,r2,1
 80208e0:	e0800217 	ldw	r2,8(fp)
 80208e4:	10c00015 	stw	r3,0(r2)
		rect[i].x += rect[i].xspeed;
		rect[i].y += rect[i].yspeed;
		// Check for collisions
		if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
			// Collision with right paddle
			if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 80208e8:	0000d006 	br	8020c2c <update_rect+0x684>
				rect[i].xspeed*=-1;
				// Add 1 to left player's score
				scores[0] += 1;
			}
		}
		else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
 80208ec:	e0bff917 	ldw	r2,-28(fp)
 80208f0:	01400704 	movi	r5,28
 80208f4:	1009883a 	mov	r4,r2
 80208f8:	80212ac0 	call	80212ac <__mulsi3>
 80208fc:	1007883a 	mov	r3,r2
 8020900:	e0bffa17 	ldw	r2,-24(fp)
 8020904:	10c5883a 	add	r2,r2,r3
 8020908:	10800017 	ldw	r2,0(r2)
 802090c:	00800b0e 	bge	zero,r2,802093c <update_rect+0x394>
 8020910:	e0bff917 	ldw	r2,-28(fp)
 8020914:	01400704 	movi	r5,28
 8020918:	1009883a 	mov	r4,r2
 802091c:	80212ac0 	call	80212ac <__mulsi3>
 8020920:	1007883a 	mov	r3,r2
 8020924:	e0bffa17 	ldw	r2,-24(fp)
 8020928:	10c5883a 	add	r2,r2,r3
 802092c:	10800017 	ldw	r2,0(r2)
 8020930:	e0fffb17 	ldw	r3,-20(fp)
 8020934:	18c00417 	ldw	r3,16(r3)
 8020938:	18806316 	blt	r3,r2,8020ac8 <update_rect+0x520>
			// Collision with left paddle
			if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 802093c:	e0bff917 	ldw	r2,-28(fp)
 8020940:	01400704 	movi	r5,28
 8020944:	1009883a 	mov	r4,r2
 8020948:	80212ac0 	call	80212ac <__mulsi3>
 802094c:	1007883a 	mov	r3,r2
 8020950:	e0bffa17 	ldw	r2,-24(fp)
 8020954:	10c5883a 	add	r2,r2,r3
 8020958:	14000117 	ldw	r16,4(r2)
 802095c:	e0bff917 	ldw	r2,-28(fp)
 8020960:	01400704 	movi	r5,28
 8020964:	1009883a 	mov	r4,r2
 8020968:	80212ac0 	call	80212ac <__mulsi3>
 802096c:	1007883a 	mov	r3,r2
 8020970:	e0bffa17 	ldw	r2,-24(fp)
 8020974:	10c5883a 	add	r2,r2,r3
 8020978:	10800517 	ldw	r2,20(r2)
 802097c:	8087883a 	add	r3,r16,r2
 8020980:	e0bffb17 	ldw	r2,-20(fp)
 8020984:	10800117 	ldw	r2,4(r2)
 8020988:	18802d16 	blt	r3,r2,8020a40 <update_rect+0x498>
 802098c:	e0bff917 	ldw	r2,-28(fp)
 8020990:	01400704 	movi	r5,28
 8020994:	1009883a 	mov	r4,r2
 8020998:	80212ac0 	call	80212ac <__mulsi3>
 802099c:	1007883a 	mov	r3,r2
 80209a0:	e0bffa17 	ldw	r2,-24(fp)
 80209a4:	10c5883a 	add	r2,r2,r3
 80209a8:	10800117 	ldw	r2,4(r2)
 80209ac:	e0fffb17 	ldw	r3,-20(fp)
 80209b0:	19000117 	ldw	r4,4(r3)
 80209b4:	e0fffb17 	ldw	r3,-20(fp)
 80209b8:	18c00517 	ldw	r3,20(r3)
 80209bc:	20c7883a 	add	r3,r4,r3
 80209c0:	18801f16 	blt	r3,r2,8020a40 <update_rect+0x498>
				rect[i].x = paddles[0].x + paddles[0].width;
 80209c4:	e0bff917 	ldw	r2,-28(fp)
 80209c8:	01400704 	movi	r5,28
 80209cc:	1009883a 	mov	r4,r2
 80209d0:	80212ac0 	call	80212ac <__mulsi3>
 80209d4:	1007883a 	mov	r3,r2
 80209d8:	e0bffa17 	ldw	r2,-24(fp)
 80209dc:	10c5883a 	add	r2,r2,r3
 80209e0:	e0fffb17 	ldw	r3,-20(fp)
 80209e4:	19000017 	ldw	r4,0(r3)
 80209e8:	e0fffb17 	ldw	r3,-20(fp)
 80209ec:	18c00417 	ldw	r3,16(r3)
 80209f0:	20c7883a 	add	r3,r4,r3
 80209f4:	10c00015 	stw	r3,0(r2)
				rect[i].xspeed*=-1; //Bounce
 80209f8:	e0bff917 	ldw	r2,-28(fp)
 80209fc:	01400704 	movi	r5,28
 8020a00:	1009883a 	mov	r4,r2
 8020a04:	80212ac0 	call	80212ac <__mulsi3>
 8020a08:	1007883a 	mov	r3,r2
 8020a0c:	e0bffa17 	ldw	r2,-24(fp)
 8020a10:	10e1883a 	add	r16,r2,r3
 8020a14:	e0bff917 	ldw	r2,-28(fp)
 8020a18:	01400704 	movi	r5,28
 8020a1c:	1009883a 	mov	r4,r2
 8020a20:	80212ac0 	call	80212ac <__mulsi3>
 8020a24:	1007883a 	mov	r3,r2
 8020a28:	e0bffa17 	ldw	r2,-24(fp)
 8020a2c:	10c5883a 	add	r2,r2,r3
 8020a30:	10800217 	ldw	r2,8(r2)
 8020a34:	0085c83a 	sub	r2,zero,r2
 8020a38:	80800215 	stw	r2,8(r16)
				scores[0] += 1;
			}
		}
		else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
			// Collision with left paddle
			if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8020a3c:	00007b06 	br	8020c2c <update_rect+0x684>
				rect[i].x = paddles[0].x + paddles[0].width;
				rect[i].xspeed*=-1; //Bounce
			}
			else { // Goal - player 2 scored
				// Reset ball position
				rect[i].x = BALL_XDEFAULT;
 8020a40:	e0bff917 	ldw	r2,-28(fp)
 8020a44:	01400704 	movi	r5,28
 8020a48:	1009883a 	mov	r4,r2
 8020a4c:	80212ac0 	call	80212ac <__mulsi3>
 8020a50:	1007883a 	mov	r3,r2
 8020a54:	e0bffa17 	ldw	r2,-24(fp)
 8020a58:	10c5883a 	add	r2,r2,r3
 8020a5c:	00c02804 	movi	r3,160
 8020a60:	10c00015 	stw	r3,0(r2)
				rect[i].xspeed*=-1;
 8020a64:	e0bff917 	ldw	r2,-28(fp)
 8020a68:	01400704 	movi	r5,28
 8020a6c:	1009883a 	mov	r4,r2
 8020a70:	80212ac0 	call	80212ac <__mulsi3>
 8020a74:	1007883a 	mov	r3,r2
 8020a78:	e0bffa17 	ldw	r2,-24(fp)
 8020a7c:	10e1883a 	add	r16,r2,r3
 8020a80:	e0bff917 	ldw	r2,-28(fp)
 8020a84:	01400704 	movi	r5,28
 8020a88:	1009883a 	mov	r4,r2
 8020a8c:	80212ac0 	call	80212ac <__mulsi3>
 8020a90:	1007883a 	mov	r3,r2
 8020a94:	e0bffa17 	ldw	r2,-24(fp)
 8020a98:	10c5883a 	add	r2,r2,r3
 8020a9c:	10800217 	ldw	r2,8(r2)
 8020aa0:	0085c83a 	sub	r2,zero,r2
 8020aa4:	80800215 	stw	r2,8(r16)
				// Add 1 to right player's score
				scores[1] += 1;
 8020aa8:	e0800217 	ldw	r2,8(fp)
 8020aac:	10800104 	addi	r2,r2,4
 8020ab0:	e0c00217 	ldw	r3,8(fp)
 8020ab4:	18c00104 	addi	r3,r3,4
 8020ab8:	18c00017 	ldw	r3,0(r3)
 8020abc:	18c00044 	addi	r3,r3,1
 8020ac0:	10c00015 	stw	r3,0(r2)
				scores[0] += 1;
			}
		}
		else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
			// Collision with left paddle
			if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8020ac4:	00005906 	br	8020c2c <update_rect+0x684>
				rect[i].xspeed*=-1;
				// Add 1 to right player's score
				scores[1] += 1;
			}
		}
		else if (rect[i].y + rect[i].height >= SCREEN_HEIGHT) {
 8020ac8:	e0bff917 	ldw	r2,-28(fp)
 8020acc:	01400704 	movi	r5,28
 8020ad0:	1009883a 	mov	r4,r2
 8020ad4:	80212ac0 	call	80212ac <__mulsi3>
 8020ad8:	1007883a 	mov	r3,r2
 8020adc:	e0bffa17 	ldw	r2,-24(fp)
 8020ae0:	10c5883a 	add	r2,r2,r3
 8020ae4:	14000117 	ldw	r16,4(r2)
 8020ae8:	e0bff917 	ldw	r2,-28(fp)
 8020aec:	01400704 	movi	r5,28
 8020af0:	1009883a 	mov	r4,r2
 8020af4:	80212ac0 	call	80212ac <__mulsi3>
 8020af8:	1007883a 	mov	r3,r2
 8020afc:	e0bffa17 	ldw	r2,-24(fp)
 8020b00:	10c5883a 	add	r2,r2,r3
 8020b04:	10800517 	ldw	r2,20(r2)
 8020b08:	8085883a 	add	r2,r16,r2
 8020b0c:	10803c10 	cmplti	r2,r2,240
 8020b10:	1000241e 	bne	r2,zero,8020ba4 <update_rect+0x5fc>
			rect[i].y = SCREEN_HEIGHT - rect[i].height;
 8020b14:	e0bff917 	ldw	r2,-28(fp)
 8020b18:	01400704 	movi	r5,28
 8020b1c:	1009883a 	mov	r4,r2
 8020b20:	80212ac0 	call	80212ac <__mulsi3>
 8020b24:	1007883a 	mov	r3,r2
 8020b28:	e0bffa17 	ldw	r2,-24(fp)
 8020b2c:	10e1883a 	add	r16,r2,r3
 8020b30:	e0bff917 	ldw	r2,-28(fp)
 8020b34:	01400704 	movi	r5,28
 8020b38:	1009883a 	mov	r4,r2
 8020b3c:	80212ac0 	call	80212ac <__mulsi3>
 8020b40:	1007883a 	mov	r3,r2
 8020b44:	e0bffa17 	ldw	r2,-24(fp)
 8020b48:	10c5883a 	add	r2,r2,r3
 8020b4c:	10800517 	ldw	r2,20(r2)
 8020b50:	00c03c04 	movi	r3,240
 8020b54:	1885c83a 	sub	r2,r3,r2
 8020b58:	80800115 	stw	r2,4(r16)
			rect[i].yspeed *= -1;
 8020b5c:	e0bff917 	ldw	r2,-28(fp)
 8020b60:	01400704 	movi	r5,28
 8020b64:	1009883a 	mov	r4,r2
 8020b68:	80212ac0 	call	80212ac <__mulsi3>
 8020b6c:	1007883a 	mov	r3,r2
 8020b70:	e0bffa17 	ldw	r2,-24(fp)
 8020b74:	10e1883a 	add	r16,r2,r3
 8020b78:	e0bff917 	ldw	r2,-28(fp)
 8020b7c:	01400704 	movi	r5,28
 8020b80:	1009883a 	mov	r4,r2
 8020b84:	80212ac0 	call	80212ac <__mulsi3>
 8020b88:	1007883a 	mov	r3,r2
 8020b8c:	e0bffa17 	ldw	r2,-24(fp)
 8020b90:	10c5883a 	add	r2,r2,r3
 8020b94:	10800317 	ldw	r2,12(r2)
 8020b98:	0085c83a 	sub	r2,zero,r2
 8020b9c:	80800315 	stw	r2,12(r16)
 8020ba0:	00002206 	br	8020c2c <update_rect+0x684>
		}
		else if (rect[i].y <= 0) {
 8020ba4:	e0bff917 	ldw	r2,-28(fp)
 8020ba8:	01400704 	movi	r5,28
 8020bac:	1009883a 	mov	r4,r2
 8020bb0:	80212ac0 	call	80212ac <__mulsi3>
 8020bb4:	1007883a 	mov	r3,r2
 8020bb8:	e0bffa17 	ldw	r2,-24(fp)
 8020bbc:	10c5883a 	add	r2,r2,r3
 8020bc0:	10800117 	ldw	r2,4(r2)
 8020bc4:	00801916 	blt	zero,r2,8020c2c <update_rect+0x684>
			rect[i].y = 0;
 8020bc8:	e0bff917 	ldw	r2,-28(fp)
 8020bcc:	01400704 	movi	r5,28
 8020bd0:	1009883a 	mov	r4,r2
 8020bd4:	80212ac0 	call	80212ac <__mulsi3>
 8020bd8:	1007883a 	mov	r3,r2
 8020bdc:	e0bffa17 	ldw	r2,-24(fp)
 8020be0:	10c5883a 	add	r2,r2,r3
 8020be4:	10000115 	stw	zero,4(r2)
			rect[i].yspeed *= -1;
 8020be8:	e0bff917 	ldw	r2,-28(fp)
 8020bec:	01400704 	movi	r5,28
 8020bf0:	1009883a 	mov	r4,r2
 8020bf4:	80212ac0 	call	80212ac <__mulsi3>
 8020bf8:	1007883a 	mov	r3,r2
 8020bfc:	e0bffa17 	ldw	r2,-24(fp)
 8020c00:	10e1883a 	add	r16,r2,r3
 8020c04:	e0bff917 	ldw	r2,-28(fp)
 8020c08:	01400704 	movi	r5,28
 8020c0c:	1009883a 	mov	r4,r2
 8020c10:	80212ac0 	call	80212ac <__mulsi3>
 8020c14:	1007883a 	mov	r3,r2
 8020c18:	e0bffa17 	ldw	r2,-24(fp)
 8020c1c:	10c5883a 	add	r2,r2,r3
 8020c20:	10800317 	ldw	r2,12(r2)
 8020c24:	0085c83a 	sub	r2,zero,r2
 8020c28:	80800315 	stw	r2,12(r16)
}
// Updates the position of each Rectangle object
// "bounces" each object upon collision with screen top/bottom edges
// or paddle objects
void update_rect(Rectangle rect[], Rectangle paddles[], int rect_len, int paddle_len, int* scores) {
	for(int i = 0; i< rect_len; i++) {
 8020c2c:	e0bff917 	ldw	r2,-28(fp)
 8020c30:	10800044 	addi	r2,r2,1
 8020c34:	e0bff915 	stw	r2,-28(fp)
 8020c38:	e0fff917 	ldw	r3,-28(fp)
 8020c3c:	e0bffc17 	ldw	r2,-16(fp)
 8020c40:	18be6516 	blt	r3,r2,80205d8 <__alt_data_end+0xfffe11d8>
		else if (rect[i].y <= 0) {
			rect[i].y = 0;
			rect[i].yspeed *= -1;
		}
	}
}
 8020c44:	0001883a 	nop
 8020c48:	e6fffe04 	addi	sp,fp,-8
 8020c4c:	dfc00317 	ldw	ra,12(sp)
 8020c50:	df000217 	ldw	fp,8(sp)
 8020c54:	dc400117 	ldw	r17,4(sp)
 8020c58:	dc000017 	ldw	r16,0(sp)
 8020c5c:	dec00404 	addi	sp,sp,16
 8020c60:	f800283a 	ret

08020c64 <clear>:
void clear(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, int buffer) {
 8020c64:	defffc04 	addi	sp,sp,-16
 8020c68:	dfc00315 	stw	ra,12(sp)
 8020c6c:	df000215 	stw	fp,8(sp)
 8020c70:	df000204 	addi	fp,sp,8
 8020c74:	e13ffe15 	stw	r4,-8(fp)
 8020c78:	e17fff15 	stw	r5,-4(fp)
	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
 8020c7c:	e17fff17 	ldw	r5,-4(fp)
 8020c80:	e13ffe17 	ldw	r4,-8(fp)
 8020c84:	80281a00 	call	80281a0 <alt_up_pixel_buffer_dma_clear_screen>
}
 8020c88:	0001883a 	nop
 8020c8c:	e037883a 	mov	sp,fp
 8020c90:	dfc00117 	ldw	ra,4(sp)
 8020c94:	df000017 	ldw	fp,0(sp)
 8020c98:	dec00204 	addi	sp,sp,8
 8020c9c:	f800283a 	ret

08020ca0 <draw>:
// Renders game components on the screen
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer) {
 8020ca0:	defff204 	addi	sp,sp,-56
 8020ca4:	dfc00d15 	stw	ra,52(sp)
 8020ca8:	df000c15 	stw	fp,48(sp)
 8020cac:	dcc00b15 	stw	r19,44(sp)
 8020cb0:	dc800a15 	stw	r18,40(sp)
 8020cb4:	dc400915 	stw	r17,36(sp)
 8020cb8:	dc000815 	stw	r16,32(sp)
 8020cbc:	df000c04 	addi	fp,sp,48
 8020cc0:	e13ff815 	stw	r4,-32(fp)
 8020cc4:	e17ff915 	stw	r5,-28(fp)
 8020cc8:	e1bffa15 	stw	r6,-24(fp)
 8020ccc:	e1fffb15 	stw	r7,-20(fp)
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
 8020cd0:	e03ff715 	stw	zero,-36(fp)
 8020cd4:	00004106 	br	8020ddc <draw+0x13c>
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 8020cd8:	e0bff717 	ldw	r2,-36(fp)
 8020cdc:	01400704 	movi	r5,28
 8020ce0:	1009883a 	mov	r4,r2
 8020ce4:	80212ac0 	call	80212ac <__mulsi3>
 8020ce8:	1007883a 	mov	r3,r2
 8020cec:	e0bff817 	ldw	r2,-32(fp)
 8020cf0:	10c5883a 	add	r2,r2,r3
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020cf4:	14400017 	ldw	r17,0(r2)
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 8020cf8:	e0bff717 	ldw	r2,-36(fp)
 8020cfc:	01400704 	movi	r5,28
 8020d00:	1009883a 	mov	r4,r2
 8020d04:	80212ac0 	call	80212ac <__mulsi3>
 8020d08:	1007883a 	mov	r3,r2
 8020d0c:	e0bff817 	ldw	r2,-32(fp)
 8020d10:	10c5883a 	add	r2,r2,r3
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020d14:	14800117 	ldw	r18,4(r2)
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 8020d18:	e0bff717 	ldw	r2,-36(fp)
 8020d1c:	01400704 	movi	r5,28
 8020d20:	1009883a 	mov	r4,r2
 8020d24:	80212ac0 	call	80212ac <__mulsi3>
 8020d28:	1007883a 	mov	r3,r2
 8020d2c:	e0bff817 	ldw	r2,-32(fp)
 8020d30:	10c5883a 	add	r2,r2,r3
 8020d34:	14000017 	ldw	r16,0(r2)
 8020d38:	e0bff717 	ldw	r2,-36(fp)
 8020d3c:	01400704 	movi	r5,28
 8020d40:	1009883a 	mov	r4,r2
 8020d44:	80212ac0 	call	80212ac <__mulsi3>
 8020d48:	1007883a 	mov	r3,r2
 8020d4c:	e0bff817 	ldw	r2,-32(fp)
 8020d50:	10c5883a 	add	r2,r2,r3
 8020d54:	10800417 	ldw	r2,16(r2)
 8020d58:	8085883a 	add	r2,r16,r2
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020d5c:	14ffffc4 	addi	r19,r2,-1
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
 8020d60:	e0bff717 	ldw	r2,-36(fp)
 8020d64:	01400704 	movi	r5,28
 8020d68:	1009883a 	mov	r4,r2
 8020d6c:	80212ac0 	call	80212ac <__mulsi3>
 8020d70:	1007883a 	mov	r3,r2
 8020d74:	e0bff817 	ldw	r2,-32(fp)
 8020d78:	10c5883a 	add	r2,r2,r3
 8020d7c:	14000117 	ldw	r16,4(r2)
 8020d80:	e0bff717 	ldw	r2,-36(fp)
 8020d84:	01400704 	movi	r5,28
 8020d88:	1009883a 	mov	r4,r2
 8020d8c:	80212ac0 	call	80212ac <__mulsi3>
 8020d90:	1007883a 	mov	r3,r2
 8020d94:	e0bff817 	ldw	r2,-32(fp)
 8020d98:	10c5883a 	add	r2,r2,r3
 8020d9c:	10800517 	ldw	r2,20(r2)
 8020da0:	8085883a 	add	r2,r16,r2
//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
//			}
//		}

		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8020da4:	10bfffc4 	addi	r2,r2,-1
 8020da8:	e0c00217 	ldw	r3,8(fp)
 8020dac:	d8c00215 	stw	r3,8(sp)
 8020db0:	e0fffb17 	ldw	r3,-20(fp)
 8020db4:	d8c00115 	stw	r3,4(sp)
 8020db8:	d8800015 	stw	r2,0(sp)
 8020dbc:	980f883a 	mov	r7,r19
 8020dc0:	900d883a 	mov	r6,r18
 8020dc4:	880b883a 	mov	r5,r17
 8020dc8:	e13ffa17 	ldw	r4,-24(fp)
 8020dcc:	80282dc0 	call	80282dc <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
}
// Renders game components on the screen
void draw(Rectangle rect[], int len, alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer) {
	// Draw each rectangle
	for(int i = 0; i<len; i++) {
 8020dd0:	e0bff717 	ldw	r2,-36(fp)
 8020dd4:	10800044 	addi	r2,r2,1
 8020dd8:	e0bff715 	stw	r2,-36(fp)
 8020ddc:	e0fff717 	ldw	r3,-36(fp)
 8020de0:	e0bff917 	ldw	r2,-28(fp)
 8020de4:	18bfbc16 	blt	r3,r2,8020cd8 <__alt_data_end+0xfffe18d8>
		alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
				rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
				rect[i].y + rect[i].height - 1,
				colour, buffer);
	}
}
 8020de8:	0001883a 	nop
 8020dec:	e6fffc04 	addi	sp,fp,-16
 8020df0:	dfc00517 	ldw	ra,20(sp)
 8020df4:	df000417 	ldw	fp,16(sp)
 8020df8:	dcc00317 	ldw	r19,12(sp)
 8020dfc:	dc800217 	ldw	r18,8(sp)
 8020e00:	dc400117 	ldw	r17,4(sp)
 8020e04:	dc000017 	ldw	r16,0(sp)
 8020e08:	dec00604 	addi	sp,sp,24
 8020e0c:	f800283a 	ret

08020e10 <run_game_tick>:

void run_game_tick(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, Rectangle paddles[], int paddle_len, Rectangle balls[], int ball_len, int* scores, int buffer, float* user_input) {
 8020e10:	defff904 	addi	sp,sp,-28
 8020e14:	dfc00615 	stw	ra,24(sp)
 8020e18:	df000515 	stw	fp,20(sp)
 8020e1c:	df000504 	addi	fp,sp,20
 8020e20:	e13ffc15 	stw	r4,-16(fp)
 8020e24:	e17ffd15 	stw	r5,-12(fp)
 8020e28:	e1bffe15 	stw	r6,-8(fp)
 8020e2c:	e1ffff15 	stw	r7,-4(fp)
	// Wait for screen refresh
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dma_dev);
 8020e30:	e13ffc17 	ldw	r4,-16(fp)
 8020e34:	802810c0 	call	802810c <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dma_dev));
 8020e38:	0001883a 	nop
 8020e3c:	e13ffc17 	ldw	r4,-16(fp)
 8020e40:	802816c0 	call	802816c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 8020e44:	103ffd1e 	bne	r2,zero,8020e3c <__alt_data_end+0xfffe1a3c>
	//get_user_input(user_input);
	// Cleanup - erase old objects
	draw(balls, NUM_BALLS, pixel_buf_dma_dev, BACKGROUND_COLOUR,buffer);
 8020e48:	e0800417 	ldw	r2,16(fp)
 8020e4c:	d8800015 	stw	r2,0(sp)
 8020e50:	000f883a 	mov	r7,zero
 8020e54:	e1bffc17 	ldw	r6,-16(fp)
 8020e58:	01400044 	movi	r5,1
 8020e5c:	e13fff17 	ldw	r4,-4(fp)
 8020e60:	8020ca00 	call	8020ca0 <draw>
	draw(paddles, NUM_PADDLES, pixel_buf_dma_dev, BACKGROUND_COLOUR, buffer);
 8020e64:	e0800417 	ldw	r2,16(fp)
 8020e68:	d8800015 	stw	r2,0(sp)
 8020e6c:	000f883a 	mov	r7,zero
 8020e70:	e1bffc17 	ldw	r6,-16(fp)
 8020e74:	01400084 	movi	r5,2
 8020e78:	e13ffd17 	ldw	r4,-12(fp)
 8020e7c:	8020ca00 	call	8020ca0 <draw>
	// Game logic
	update_rect(balls, paddles, NUM_BALLS, NUM_PADDLES, scores);
 8020e80:	e0800317 	ldw	r2,12(fp)
 8020e84:	d8800015 	stw	r2,0(sp)
 8020e88:	01c00084 	movi	r7,2
 8020e8c:	01800044 	movi	r6,1
 8020e90:	e17ffd17 	ldw	r5,-12(fp)
 8020e94:	e13fff17 	ldw	r4,-4(fp)
 8020e98:	80205a80 	call	80205a8 <update_rect>
	update_paddle(paddles, NUM_PADDLES, user_input);
 8020e9c:	e1800517 	ldw	r6,20(fp)
 8020ea0:	01400084 	movi	r5,2
 8020ea4:	e13ffd17 	ldw	r4,-12(fp)
 8020ea8:	802026c0 	call	802026c <update_paddle>
	// Render the screen
	draw(balls, NUM_BALLS, pixel_buf_dma_dev, BALL_COLOUR, buffer);
 8020eac:	e0800417 	ldw	r2,16(fp)
 8020eb0:	d8800015 	stw	r2,0(sp)
 8020eb4:	01ffffd4 	movui	r7,65535
 8020eb8:	e1bffc17 	ldw	r6,-16(fp)
 8020ebc:	01400044 	movi	r5,1
 8020ec0:	e13fff17 	ldw	r4,-4(fp)
 8020ec4:	8020ca00 	call	8020ca0 <draw>
	draw(paddles, NUM_PADDLES, pixel_buf_dma_dev, PADDLE_COLOUR, buffer);
 8020ec8:	e0800417 	ldw	r2,16(fp)
 8020ecc:	d8800015 	stw	r2,0(sp)
 8020ed0:	01ffffd4 	movui	r7,65535
 8020ed4:	e1bffc17 	ldw	r6,-16(fp)
 8020ed8:	01400084 	movi	r5,2
 8020edc:	e13ffd17 	ldw	r4,-12(fp)
 8020ee0:	8020ca00 	call	8020ca0 <draw>
}
 8020ee4:	0001883a 	nop
 8020ee8:	e037883a 	mov	sp,fp
 8020eec:	dfc00117 	ldw	ra,4(sp)
 8020ef0:	df000017 	ldw	fp,0(sp)
 8020ef4:	dec00204 	addi	sp,sp,8
 8020ef8:	f800283a 	ret

08020efc <get_user_input>:
void get_user_input(int* user_input) {
 8020efc:	defffc04 	addi	sp,sp,-16
 8020f00:	df000315 	stw	fp,12(sp)
 8020f04:	df000304 	addi	fp,sp,12
 8020f08:	e13fff15 	stw	r4,-4(fp)
	int SW = IORD(SW_BASE, 0);
 8020f0c:	00820134 	movhi	r2,2052
 8020f10:	10849404 	addi	r2,r2,4688
 8020f14:	10800037 	ldwio	r2,0(r2)
 8020f18:	e0bffe15 	stw	r2,-8(fp)
	for(int i = 0; i<8; i++) {
 8020f1c:	e03ffd15 	stw	zero,-12(fp)
 8020f20:	00000f06 	br	8020f60 <get_user_input+0x64>
		user_input[i] = (0b1 << i) & SW;
 8020f24:	e0bffd17 	ldw	r2,-12(fp)
 8020f28:	1085883a 	add	r2,r2,r2
 8020f2c:	1085883a 	add	r2,r2,r2
 8020f30:	1007883a 	mov	r3,r2
 8020f34:	e0bfff17 	ldw	r2,-4(fp)
 8020f38:	10c5883a 	add	r2,r2,r3
 8020f3c:	01000044 	movi	r4,1
 8020f40:	e0fffd17 	ldw	r3,-12(fp)
 8020f44:	20c8983a 	sll	r4,r4,r3
 8020f48:	e0fffe17 	ldw	r3,-8(fp)
 8020f4c:	20c6703a 	and	r3,r4,r3
 8020f50:	10c00015 	stw	r3,0(r2)
	draw(balls, NUM_BALLS, pixel_buf_dma_dev, BALL_COLOUR, buffer);
	draw(paddles, NUM_PADDLES, pixel_buf_dma_dev, PADDLE_COLOUR, buffer);
}
void get_user_input(int* user_input) {
	int SW = IORD(SW_BASE, 0);
	for(int i = 0; i<8; i++) {
 8020f54:	e0bffd17 	ldw	r2,-12(fp)
 8020f58:	10800044 	addi	r2,r2,1
 8020f5c:	e0bffd15 	stw	r2,-12(fp)
 8020f60:	e0bffd17 	ldw	r2,-12(fp)
 8020f64:	10800210 	cmplti	r2,r2,8
 8020f68:	103fee1e 	bne	r2,zero,8020f24 <__alt_data_end+0xfffe1b24>
		user_input[i] = (0b1 << i) & SW;
	}
}
 8020f6c:	0001883a 	nop
 8020f70:	e037883a 	mov	sp,fp
 8020f74:	df000017 	ldw	fp,0(sp)
 8020f78:	dec00104 	addi	sp,sp,4
 8020f7c:	f800283a 	ret

08020f80 <alarm_callback.3015>:
		printf ("Error: could not open pixel buffer device \n");
	else
		printf ("Opened pixel buffer device \n");

	// Alarm setup - executes the callback function periodically (every second)
	alt_u32 alarm_callback(void *context) {
 8020f80:	defffd04 	addi	sp,sp,-12
 8020f84:	df000215 	stw	fp,8(sp)
 8020f88:	df000204 	addi	fp,sp,8
 8020f8c:	e13ffe15 	stw	r4,-8(fp)
 8020f90:	6005883a 	mov	r2,r12
 8020f94:	e33fff15 	stw	r12,-4(fp)
		time += 1;
 8020f98:	10c00017 	ldw	r3,0(r2)
 8020f9c:	18c00044 	addi	r3,r3,1
 8020fa0:	10c00015 	stw	r3,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8020fa4:	d0a6d817 	ldw	r2,-25760(gp)
		return alt_ticks_per_second();
 8020fa8:	0001883a 	nop
	}
 8020fac:	e037883a 	mov	sp,fp
 8020fb0:	df000017 	ldw	fp,0(sp)
 8020fb4:	dec00104 	addi	sp,sp,4
 8020fb8:	f800283a 	ret

08020fbc <main>:

#define SDRAM_COLOUR_BITS 16


int main()
{
 8020fbc:	deffc404 	addi	sp,sp,-240
 8020fc0:	dfc03b15 	stw	ra,236(sp)
 8020fc4:	df003a15 	stw	fp,232(sp)
 8020fc8:	df003a04 	addi	fp,sp,232
#include "gameutil.h"

#define SDRAM_COLOUR_BITS 16


int main()
 8020fcc:	e0bfcc04 	addi	r2,fp,-208
 8020fd0:	10800104 	addi	r2,r2,4
 8020fd4:	e0ffcc04 	addi	r3,fp,-208
 8020fd8:	180d883a 	mov	r6,r3
 8020fdc:	014200b4 	movhi	r5,2050
 8020fe0:	2943e004 	addi	r5,r5,3968
 8020fe4:	1009883a 	mov	r4,r2
 8020fe8:	80212d40 	call	80212d4 <__trampoline_setup>
{
	printf("Entered Main\n");
 8020fec:	010200f4 	movhi	r4,2051
 8020ff0:	2127ac04 	addi	r4,r4,-24912
 8020ff4:	80233400 	call	8023340 <puts>
	alt_u32 adc_val;


	adc_stop(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
 8020ff8:	01020134 	movhi	r4,2052
 8020ffc:	2104a404 	addi	r4,r4,4752
 8021000:	8027c000 	call	8027c00 <adc_stop>
	adc_set_mode_run_once(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
 8021004:	01020134 	movhi	r4,2052
 8021008:	2104a404 	addi	r4,r4,4752
 802100c:	8027c880 	call	8027c88 <adc_set_mode_run_once>

	int time; // Game timer measured in s
	// Have to set up these pointers to open the device
	// Reference : https://faculty-web.msoe.edu/johnsontimoj/EE3921/files3921/nios_pixel_sw.pdf
	alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
 8021010:	010200f4 	movhi	r4,2051
 8021014:	2127b004 	addi	r4,r4,-24896
 8021018:	8027ecc0 	call	8027ecc <alt_up_pixel_buffer_dma_open_dev>
 802101c:	e0bfca15 	stw	r2,-216(fp)
	// Check for error
	if ( pixel_buf_dma_dev == NULL)
 8021020:	e0bfca17 	ldw	r2,-216(fp)
 8021024:	1000041e 	bne	r2,zero,8021038 <main+0x7c>
		printf ("Error: could not open pixel buffer device \n");
 8021028:	010200f4 	movhi	r4,2051
 802102c:	2127b804 	addi	r4,r4,-24864
 8021030:	80233400 	call	8023340 <puts>
 8021034:	00000306 	br	8021044 <main+0x88>
	else
		printf ("Opened pixel buffer device \n");
 8021038:	010200f4 	movhi	r4,2051
 802103c:	2127c304 	addi	r4,r4,-24820
 8021040:	80233400 	call	8023340 <puts>
 8021044:	d0e6d817 	ldw	r3,-25760(gp)
		time += 1;
		return alt_ticks_per_second();
	}
	static alt_alarm alarm;
	// Setup alarm to call the callback function every N_TICKS
	if (alt_alarm_start(&alarm, alt_ticks_per_second(), alarm_callback, NULL) < 0){
 8021048:	e0bfcc04 	addi	r2,fp,-208
 802104c:	10800104 	addi	r2,r2,4
 8021050:	000f883a 	mov	r7,zero
 8021054:	100d883a 	mov	r6,r2
 8021058:	180b883a 	mov	r5,r3
 802105c:	010200f4 	movhi	r4,2051
 8021060:	2135be04 	addi	r4,r4,-10504
 8021064:	8025eb00 	call	8025eb0 <alt_alarm_start>
 8021068:	1000030e 	bge	r2,zero,8021078 <main+0xbc>
		printf ("No System Clock Available\n");
 802106c:	010200f4 	movhi	r4,2051
 8021070:	2127ca04 	addi	r4,r4,-24792
 8021074:	80233400 	call	8023340 <puts>
	}


	// Game objects
	int scores[2] = {0, 0};
 8021078:	e03fd315 	stw	zero,-180(fp)
 802107c:	e03fd415 	stw	zero,-176(fp)
	Rectangle balls[NUM_BALLS];
	Rectangle ball = {BALL_XDEFAULT, BALL_YDEFAULT, BALL_XSPEED, BALL_YSPEED, BALL_WIDTH, BALL_HEIGHT, BALL_COLOUR};
 8021080:	00802804 	movi	r2,160
 8021084:	e0bfdc15 	stw	r2,-144(fp)
 8021088:	00801e04 	movi	r2,120
 802108c:	e0bfdd15 	stw	r2,-140(fp)
 8021090:	00800104 	movi	r2,4
 8021094:	e0bfde15 	stw	r2,-136(fp)
 8021098:	00800084 	movi	r2,2
 802109c:	e0bfdf15 	stw	r2,-132(fp)
 80210a0:	00800284 	movi	r2,10
 80210a4:	e0bfe015 	stw	r2,-128(fp)
 80210a8:	00800284 	movi	r2,10
 80210ac:	e0bfe115 	stw	r2,-124(fp)
 80210b0:	00bfffd4 	movui	r2,65535
 80210b4:	e0bfe215 	stw	r2,-120(fp)
	balls[0] = ball;
 80210b8:	e0bfdc17 	ldw	r2,-144(fp)
 80210bc:	e0bfd515 	stw	r2,-172(fp)
 80210c0:	e0bfdd17 	ldw	r2,-140(fp)
 80210c4:	e0bfd615 	stw	r2,-168(fp)
 80210c8:	e0bfde17 	ldw	r2,-136(fp)
 80210cc:	e0bfd715 	stw	r2,-164(fp)
 80210d0:	e0bfdf17 	ldw	r2,-132(fp)
 80210d4:	e0bfd815 	stw	r2,-160(fp)
 80210d8:	e0bfe017 	ldw	r2,-128(fp)
 80210dc:	e0bfd915 	stw	r2,-156(fp)
 80210e0:	e0bfe117 	ldw	r2,-124(fp)
 80210e4:	e0bfda15 	stw	r2,-152(fp)
 80210e8:	e0bfe217 	ldw	r2,-120(fp)
 80210ec:	e0bfdb15 	stw	r2,-148(fp)
	Rectangle paddles[NUM_PADDLES];
	Rectangle paddle_left = {0, 0, 0, 0, PADDLE_WIDTH, PADDLE_HEIGHT, PADDLE_COLOUR};
 80210f0:	e03ff115 	stw	zero,-60(fp)
 80210f4:	e03ff215 	stw	zero,-56(fp)
 80210f8:	e03ff315 	stw	zero,-52(fp)
 80210fc:	e03ff415 	stw	zero,-48(fp)
 8021100:	00800144 	movi	r2,5
 8021104:	e0bff515 	stw	r2,-44(fp)
 8021108:	00800c84 	movi	r2,50
 802110c:	e0bff615 	stw	r2,-40(fp)
 8021110:	00bfffd4 	movui	r2,65535
 8021114:	e0bff715 	stw	r2,-36(fp)
	Rectangle paddle_right = {SCREEN_WIDTH-PADDLE_WIDTH, 0, 0, 0, PADDLE_WIDTH, PADDLE_HEIGHT, PADDLE_COLOUR};
 8021118:	00804ec4 	movi	r2,315
 802111c:	e0bff815 	stw	r2,-32(fp)
 8021120:	e03ff915 	stw	zero,-28(fp)
 8021124:	e03ffa15 	stw	zero,-24(fp)
 8021128:	e03ffb15 	stw	zero,-20(fp)
 802112c:	00800144 	movi	r2,5
 8021130:	e0bffc15 	stw	r2,-16(fp)
 8021134:	00800c84 	movi	r2,50
 8021138:	e0bffd15 	stw	r2,-12(fp)
 802113c:	00bfffd4 	movui	r2,65535
 8021140:	e0bffe15 	stw	r2,-8(fp)
	paddles[0] = paddle_left;
 8021144:	e0bff117 	ldw	r2,-60(fp)
 8021148:	e0bfe315 	stw	r2,-116(fp)
 802114c:	e0bff217 	ldw	r2,-56(fp)
 8021150:	e0bfe415 	stw	r2,-112(fp)
 8021154:	e0bff317 	ldw	r2,-52(fp)
 8021158:	e0bfe515 	stw	r2,-108(fp)
 802115c:	e0bff417 	ldw	r2,-48(fp)
 8021160:	e0bfe615 	stw	r2,-104(fp)
 8021164:	e0bff517 	ldw	r2,-44(fp)
 8021168:	e0bfe715 	stw	r2,-100(fp)
 802116c:	e0bff617 	ldw	r2,-40(fp)
 8021170:	e0bfe815 	stw	r2,-96(fp)
 8021174:	e0bff717 	ldw	r2,-36(fp)
 8021178:	e0bfe915 	stw	r2,-92(fp)
	paddles[1] = paddle_right;
 802117c:	e0bff817 	ldw	r2,-32(fp)
 8021180:	e0bfea15 	stw	r2,-88(fp)
 8021184:	e0bff917 	ldw	r2,-28(fp)
 8021188:	e0bfeb15 	stw	r2,-84(fp)
 802118c:	e0bffa17 	ldw	r2,-24(fp)
 8021190:	e0bfec15 	stw	r2,-80(fp)
 8021194:	e0bffb17 	ldw	r2,-20(fp)
 8021198:	e0bfed15 	stw	r2,-76(fp)
 802119c:	e0bffc17 	ldw	r2,-16(fp)
 80211a0:	e0bfee15 	stw	r2,-72(fp)
 80211a4:	e0bffd17 	ldw	r2,-12(fp)
 80211a8:	e0bfef15 	stw	r2,-68(fp)
 80211ac:	e0bffe17 	ldw	r2,-8(fp)
 80211b0:	e0bff015 	stw	r2,-64(fp)

	float* user_input;
	float adc_volt;
	// Clear screen
	clear(pixel_buf_dma_dev, 0); // Current screen
 80211b4:	000b883a 	mov	r5,zero
 80211b8:	e13fca17 	ldw	r4,-216(fp)
 80211bc:	8020c640 	call	8020c64 <clear>


	while(1) {
		alt_adc_word_read(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE, &adc_val, MODULAR_ADC_0_SAMPLE_STORE_CSR_CSD_LENGTH);
 80211c0:	e0bfd204 	addi	r2,fp,-184
 80211c4:	01800044 	movi	r6,1
 80211c8:	100b883a 	mov	r5,r2
 80211cc:	01020134 	movhi	r4,2052
 80211d0:	21040004 	addi	r4,r4,4096
 80211d4:	8027a080 	call	8027a08 <alt_adc_word_read>
		adc_volt = (float)adc_val * 5.0 / 4096.0;
 80211d8:	e0bfd217 	ldw	r2,-184(fp)
 80211dc:	1009883a 	mov	r4,r2
 80211e0:	80218b40 	call	80218b4 <__floatunsisf>
 80211e4:	1007883a 	mov	r3,r2
 80211e8:	1809883a 	mov	r4,r3
 80211ec:	8022db00 	call	8022db0 <__extendsfdf2>
 80211f0:	1011883a 	mov	r8,r2
 80211f4:	1813883a 	mov	r9,r3
 80211f8:	000d883a 	mov	r6,zero
 80211fc:	01d00534 	movhi	r7,16404
 8021200:	4009883a 	mov	r4,r8
 8021204:	480b883a 	mov	r5,r9
 8021208:	80225440 	call	8022544 <__muldf3>
 802120c:	1009883a 	mov	r4,r2
 8021210:	180b883a 	mov	r5,r3
 8021214:	2005883a 	mov	r2,r4
 8021218:	2807883a 	mov	r3,r5
 802121c:	000d883a 	mov	r6,zero
 8021220:	01d02c34 	movhi	r7,16560
 8021224:	1009883a 	mov	r4,r2
 8021228:	180b883a 	mov	r5,r3
 802122c:	80219a40 	call	80219a4 <__divdf3>
 8021230:	1009883a 	mov	r4,r2
 8021234:	180b883a 	mov	r5,r3
 8021238:	2005883a 	mov	r2,r4
 802123c:	2807883a 	mov	r3,r5
 8021240:	1009883a 	mov	r4,r2
 8021244:	180b883a 	mov	r5,r3
 8021248:	8022ec00 	call	8022ec0 <__truncdfsf2>
 802124c:	1007883a 	mov	r3,r2
 8021250:	e0ffff15 	stw	r3,-4(fp)
		user_input = &adc_volt;
 8021254:	e0bfff04 	addi	r2,fp,-4
 8021258:	e0bfcb15 	stw	r2,-212(fp)
		run_game_tick(pixel_buf_dma_dev, paddles, NUM_PADDLES, balls, NUM_BALLS, scores, 0, user_input);
 802125c:	e13fd504 	addi	r4,fp,-172
 8021260:	e0ffe304 	addi	r3,fp,-116
 8021264:	e0bfcb17 	ldw	r2,-212(fp)
 8021268:	d8800315 	stw	r2,12(sp)
 802126c:	d8000215 	stw	zero,8(sp)
 8021270:	e0bfd304 	addi	r2,fp,-180
 8021274:	d8800115 	stw	r2,4(sp)
 8021278:	00800044 	movi	r2,1
 802127c:	d8800015 	stw	r2,0(sp)
 8021280:	200f883a 	mov	r7,r4
 8021284:	01800084 	movi	r6,2
 8021288:	180b883a 	mov	r5,r3
 802128c:	e13fca17 	ldw	r4,-216(fp)
 8021290:	8020e100 	call	8020e10 <run_game_tick>
		adc_start(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
 8021294:	01020134 	movhi	r4,2052
 8021298:	2104a404 	addi	r4,r4,4752
 802129c:	8027c500 	call	8027c50 <adc_start>
		usleep(10000);
 80212a0:	0109c404 	movi	r4,10000
 80212a4:	80269d80 	call	80269d8 <usleep>




		//printf("adc value = %lu\t adc_voltage = %f\t", adc_val, adc_volt);
	}
 80212a8:	003fc506 	br	80211c0 <__alt_data_end+0xfffe1dc0>

080212ac <__mulsi3>:
 80212ac:	0005883a 	mov	r2,zero
 80212b0:	20000726 	beq	r4,zero,80212d0 <__mulsi3+0x24>
 80212b4:	20c0004c 	andi	r3,r4,1
 80212b8:	2008d07a 	srli	r4,r4,1
 80212bc:	18000126 	beq	r3,zero,80212c4 <__mulsi3+0x18>
 80212c0:	1145883a 	add	r2,r2,r5
 80212c4:	294b883a 	add	r5,r5,r5
 80212c8:	203ffa1e 	bne	r4,zero,80212b4 <__alt_data_end+0xfffe1eb4>
 80212cc:	f800283a 	ret
 80212d0:	f800283a 	ret

080212d4 <__trampoline_setup>:
 80212d4:	300ed43a 	srli	r7,r6,16
 80212d8:	2806d43a 	srli	r3,r5,16
 80212dc:	31bfffcc 	andi	r6,r6,65535
 80212e0:	380e91ba 	slli	r7,r7,6
 80212e4:	0080c034 	movhi	r2,768
 80212e8:	10800d04 	addi	r2,r2,52
 80212ec:	300c91ba 	slli	r6,r6,6
 80212f0:	388eb03a 	or	r7,r7,r2
 80212f4:	0098c034 	movhi	r2,25344
 80212f8:	10800504 	addi	r2,r2,20
 80212fc:	180691ba 	slli	r3,r3,6
 8021300:	308cb03a 	or	r6,r6,r2
 8021304:	297fffcc 	andi	r5,r5,65535
 8021308:	00802034 	movhi	r2,128
 802130c:	10800d04 	addi	r2,r2,52
 8021310:	280a91ba 	slli	r5,r5,6
 8021314:	1886b03a 	or	r3,r3,r2
 8021318:	00842034 	movhi	r2,4224
 802131c:	10800504 	addi	r2,r2,20
 8021320:	20c00215 	stw	r3,8(r4)
 8021324:	00c40034 	movhi	r3,4096
 8021328:	288ab03a 	or	r5,r5,r2
 802132c:	18da0e84 	addi	r3,r3,26682
 8021330:	20c00415 	stw	r3,16(r4)
 8021334:	2005883a 	mov	r2,r4
 8021338:	21c00015 	stw	r7,0(r4)
 802133c:	21800115 	stw	r6,4(r4)
 8021340:	21400315 	stw	r5,12(r4)
 8021344:	20c00504 	addi	r3,r4,20
 8021348:	1000003b 	flushd	0(r2)
 802134c:	1000603a 	flushi	r2
 8021350:	10800104 	addi	r2,r2,4
 8021354:	10fffc1e 	bne	r2,r3,8021348 <__alt_data_end+0xfffe1f48>
 8021358:	0000203a 	flushp
 802135c:	f800283a 	ret

08021360 <__subsf3>:
 8021360:	defffc04 	addi	sp,sp,-16
 8021364:	280cd5fa 	srli	r6,r5,23
 8021368:	dc000015 	stw	r16,0(sp)
 802136c:	01c02034 	movhi	r7,128
 8021370:	2020d5fa 	srli	r16,r4,23
 8021374:	39ffffc4 	addi	r7,r7,-1
 8021378:	3906703a 	and	r3,r7,r4
 802137c:	dc400115 	stw	r17,4(sp)
 8021380:	394e703a 	and	r7,r7,r5
 8021384:	2022d7fa 	srli	r17,r4,31
 8021388:	dfc00315 	stw	ra,12(sp)
 802138c:	dc800215 	stw	r18,8(sp)
 8021390:	31803fcc 	andi	r6,r6,255
 8021394:	01003fc4 	movi	r4,255
 8021398:	84003fcc 	andi	r16,r16,255
 802139c:	180690fa 	slli	r3,r3,3
 80213a0:	2804d7fa 	srli	r2,r5,31
 80213a4:	380e90fa 	slli	r7,r7,3
 80213a8:	31006d26 	beq	r6,r4,8021560 <__subsf3+0x200>
 80213ac:	1080005c 	xori	r2,r2,1
 80213b0:	8189c83a 	sub	r4,r16,r6
 80213b4:	14404f26 	beq	r2,r17,80214f4 <__subsf3+0x194>
 80213b8:	0100770e 	bge	zero,r4,8021598 <__subsf3+0x238>
 80213bc:	30001e1e 	bne	r6,zero,8021438 <__subsf3+0xd8>
 80213c0:	38006a1e 	bne	r7,zero,802156c <__subsf3+0x20c>
 80213c4:	188001cc 	andi	r2,r3,7
 80213c8:	10000426 	beq	r2,zero,80213dc <__subsf3+0x7c>
 80213cc:	188003cc 	andi	r2,r3,15
 80213d0:	01000104 	movi	r4,4
 80213d4:	11000126 	beq	r2,r4,80213dc <__subsf3+0x7c>
 80213d8:	1907883a 	add	r3,r3,r4
 80213dc:	1881002c 	andhi	r2,r3,1024
 80213e0:	10003926 	beq	r2,zero,80214c8 <__subsf3+0x168>
 80213e4:	84000044 	addi	r16,r16,1
 80213e8:	00803fc4 	movi	r2,255
 80213ec:	80807526 	beq	r16,r2,80215c4 <__subsf3+0x264>
 80213f0:	180691ba 	slli	r3,r3,6
 80213f4:	8880004c 	andi	r2,r17,1
 80213f8:	180ad27a 	srli	r5,r3,9
 80213fc:	84003fcc 	andi	r16,r16,255
 8021400:	800695fa 	slli	r3,r16,23
 8021404:	10803fcc 	andi	r2,r2,255
 8021408:	01002034 	movhi	r4,128
 802140c:	213fffc4 	addi	r4,r4,-1
 8021410:	100497fa 	slli	r2,r2,31
 8021414:	2920703a 	and	r16,r5,r4
 8021418:	80e0b03a 	or	r16,r16,r3
 802141c:	8084b03a 	or	r2,r16,r2
 8021420:	dfc00317 	ldw	ra,12(sp)
 8021424:	dc800217 	ldw	r18,8(sp)
 8021428:	dc400117 	ldw	r17,4(sp)
 802142c:	dc000017 	ldw	r16,0(sp)
 8021430:	dec00404 	addi	sp,sp,16
 8021434:	f800283a 	ret
 8021438:	00803fc4 	movi	r2,255
 802143c:	80bfe126 	beq	r16,r2,80213c4 <__alt_data_end+0xfffe1fc4>
 8021440:	39c10034 	orhi	r7,r7,1024
 8021444:	008006c4 	movi	r2,27
 8021448:	11007416 	blt	r2,r4,802161c <__subsf3+0x2bc>
 802144c:	00800804 	movi	r2,32
 8021450:	1105c83a 	sub	r2,r2,r4
 8021454:	3884983a 	sll	r2,r7,r2
 8021458:	390ed83a 	srl	r7,r7,r4
 802145c:	1008c03a 	cmpne	r4,r2,zero
 8021460:	390eb03a 	or	r7,r7,r4
 8021464:	19c7c83a 	sub	r3,r3,r7
 8021468:	1881002c 	andhi	r2,r3,1024
 802146c:	10001426 	beq	r2,zero,80214c0 <__subsf3+0x160>
 8021470:	04810034 	movhi	r18,1024
 8021474:	94bfffc4 	addi	r18,r18,-1
 8021478:	1ca4703a 	and	r18,r3,r18
 802147c:	9009883a 	mov	r4,r18
 8021480:	80230680 	call	8023068 <__clzsi2>
 8021484:	10bffec4 	addi	r2,r2,-5
 8021488:	90a4983a 	sll	r18,r18,r2
 802148c:	14005116 	blt	r2,r16,80215d4 <__subsf3+0x274>
 8021490:	1405c83a 	sub	r2,r2,r16
 8021494:	10c00044 	addi	r3,r2,1
 8021498:	00800804 	movi	r2,32
 802149c:	10c5c83a 	sub	r2,r2,r3
 80214a0:	9084983a 	sll	r2,r18,r2
 80214a4:	90e4d83a 	srl	r18,r18,r3
 80214a8:	0021883a 	mov	r16,zero
 80214ac:	1006c03a 	cmpne	r3,r2,zero
 80214b0:	90c6b03a 	or	r3,r18,r3
 80214b4:	003fc306 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80214b8:	2000e026 	beq	r4,zero,802183c <__subsf3+0x4dc>
 80214bc:	2007883a 	mov	r3,r4
 80214c0:	188001cc 	andi	r2,r3,7
 80214c4:	103fc11e 	bne	r2,zero,80213cc <__alt_data_end+0xfffe1fcc>
 80214c8:	180ad0fa 	srli	r5,r3,3
 80214cc:	00c03fc4 	movi	r3,255
 80214d0:	8880004c 	andi	r2,r17,1
 80214d4:	80c0031e 	bne	r16,r3,80214e4 <__subsf3+0x184>
 80214d8:	28006d26 	beq	r5,zero,8021690 <__subsf3+0x330>
 80214dc:	29401034 	orhi	r5,r5,64
 80214e0:	043fffc4 	movi	r16,-1
 80214e4:	00c02034 	movhi	r3,128
 80214e8:	18ffffc4 	addi	r3,r3,-1
 80214ec:	28ca703a 	and	r5,r5,r3
 80214f0:	003fc206 	br	80213fc <__alt_data_end+0xfffe1ffc>
 80214f4:	01003c0e 	bge	zero,r4,80215e8 <__subsf3+0x288>
 80214f8:	30002126 	beq	r6,zero,8021580 <__subsf3+0x220>
 80214fc:	01403fc4 	movi	r5,255
 8021500:	817fb026 	beq	r16,r5,80213c4 <__alt_data_end+0xfffe1fc4>
 8021504:	39c10034 	orhi	r7,r7,1024
 8021508:	014006c4 	movi	r5,27
 802150c:	29007416 	blt	r5,r4,80216e0 <__subsf3+0x380>
 8021510:	01400804 	movi	r5,32
 8021514:	290bc83a 	sub	r5,r5,r4
 8021518:	394a983a 	sll	r5,r7,r5
 802151c:	390ed83a 	srl	r7,r7,r4
 8021520:	2808c03a 	cmpne	r4,r5,zero
 8021524:	390eb03a 	or	r7,r7,r4
 8021528:	19c7883a 	add	r3,r3,r7
 802152c:	1901002c 	andhi	r4,r3,1024
 8021530:	20003826 	beq	r4,zero,8021614 <__subsf3+0x2b4>
 8021534:	84000044 	addi	r16,r16,1
 8021538:	01003fc4 	movi	r4,255
 802153c:	81005426 	beq	r16,r4,8021690 <__subsf3+0x330>
 8021540:	1023883a 	mov	r17,r2
 8021544:	00bf0034 	movhi	r2,64512
 8021548:	10bfffc4 	addi	r2,r2,-1
 802154c:	1900004c 	andi	r4,r3,1
 8021550:	1886703a 	and	r3,r3,r2
 8021554:	1806d07a 	srli	r3,r3,1
 8021558:	1906b03a 	or	r3,r3,r4
 802155c:	003f9906 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021560:	383f9226 	beq	r7,zero,80213ac <__alt_data_end+0xfffe1fac>
 8021564:	10803fcc 	andi	r2,r2,255
 8021568:	003f9106 	br	80213b0 <__alt_data_end+0xfffe1fb0>
 802156c:	213fffc4 	addi	r4,r4,-1
 8021570:	203fbc26 	beq	r4,zero,8021464 <__alt_data_end+0xfffe2064>
 8021574:	00803fc4 	movi	r2,255
 8021578:	80bfb21e 	bne	r16,r2,8021444 <__alt_data_end+0xfffe2044>
 802157c:	003f9106 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021580:	383f9026 	beq	r7,zero,80213c4 <__alt_data_end+0xfffe1fc4>
 8021584:	213fffc4 	addi	r4,r4,-1
 8021588:	203fe726 	beq	r4,zero,8021528 <__alt_data_end+0xfffe2128>
 802158c:	01403fc4 	movi	r5,255
 8021590:	817fdd1e 	bne	r16,r5,8021508 <__alt_data_end+0xfffe2108>
 8021594:	003f8b06 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021598:	2000221e 	bne	r4,zero,8021624 <__subsf3+0x2c4>
 802159c:	81000044 	addi	r4,r16,1
 80215a0:	21003fcc 	andi	r4,r4,255
 80215a4:	01400044 	movi	r5,1
 80215a8:	2900470e 	bge	r5,r4,80216c8 <__subsf3+0x368>
 80215ac:	19e5c83a 	sub	r18,r3,r7
 80215b0:	9141002c 	andhi	r5,r18,1024
 80215b4:	28002d26 	beq	r5,zero,802166c <__subsf3+0x30c>
 80215b8:	38e5c83a 	sub	r18,r7,r3
 80215bc:	1023883a 	mov	r17,r2
 80215c0:	003fae06 	br	802147c <__alt_data_end+0xfffe207c>
 80215c4:	8880004c 	andi	r2,r17,1
 80215c8:	043fffc4 	movi	r16,-1
 80215cc:	000b883a 	mov	r5,zero
 80215d0:	003f8a06 	br	80213fc <__alt_data_end+0xfffe1ffc>
 80215d4:	00ff0034 	movhi	r3,64512
 80215d8:	18ffffc4 	addi	r3,r3,-1
 80215dc:	80a1c83a 	sub	r16,r16,r2
 80215e0:	90c6703a 	and	r3,r18,r3
 80215e4:	003f7706 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80215e8:	2000431e 	bne	r4,zero,80216f8 <__subsf3+0x398>
 80215ec:	81000044 	addi	r4,r16,1
 80215f0:	21803fcc 	andi	r6,r4,255
 80215f4:	01400044 	movi	r5,1
 80215f8:	2980280e 	bge	r5,r6,802169c <__subsf3+0x33c>
 80215fc:	01403fc4 	movi	r5,255
 8021600:	21402326 	beq	r4,r5,8021690 <__subsf3+0x330>
 8021604:	19c7883a 	add	r3,r3,r7
 8021608:	1806d07a 	srli	r3,r3,1
 802160c:	2021883a 	mov	r16,r4
 8021610:	003f6c06 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021614:	1023883a 	mov	r17,r2
 8021618:	003fa906 	br	80214c0 <__alt_data_end+0xfffe20c0>
 802161c:	01c00044 	movi	r7,1
 8021620:	003f9006 	br	8021464 <__alt_data_end+0xfffe2064>
 8021624:	8000151e 	bne	r16,zero,802167c <__subsf3+0x31c>
 8021628:	18002f26 	beq	r3,zero,80216e8 <__subsf3+0x388>
 802162c:	0108303a 	nor	r4,zero,r4
 8021630:	20000a26 	beq	r4,zero,802165c <__subsf3+0x2fc>
 8021634:	01403fc4 	movi	r5,255
 8021638:	31402b26 	beq	r6,r5,80216e8 <__subsf3+0x388>
 802163c:	014006c4 	movi	r5,27
 8021640:	29006e16 	blt	r5,r4,80217fc <__subsf3+0x49c>
 8021644:	01400804 	movi	r5,32
 8021648:	290bc83a 	sub	r5,r5,r4
 802164c:	194a983a 	sll	r5,r3,r5
 8021650:	1908d83a 	srl	r4,r3,r4
 8021654:	2806c03a 	cmpne	r3,r5,zero
 8021658:	20c6b03a 	or	r3,r4,r3
 802165c:	38c7c83a 	sub	r3,r7,r3
 8021660:	3021883a 	mov	r16,r6
 8021664:	1023883a 	mov	r17,r2
 8021668:	003f7f06 	br	8021468 <__alt_data_end+0xfffe2068>
 802166c:	903f831e 	bne	r18,zero,802147c <__alt_data_end+0xfffe207c>
 8021670:	0005883a 	mov	r2,zero
 8021674:	0021883a 	mov	r16,zero
 8021678:	003f9a06 	br	80214e4 <__alt_data_end+0xfffe20e4>
 802167c:	01403fc4 	movi	r5,255
 8021680:	31401926 	beq	r6,r5,80216e8 <__subsf3+0x388>
 8021684:	0109c83a 	sub	r4,zero,r4
 8021688:	18c10034 	orhi	r3,r3,1024
 802168c:	003feb06 	br	802163c <__alt_data_end+0xfffe223c>
 8021690:	043fffc4 	movi	r16,-1
 8021694:	000b883a 	mov	r5,zero
 8021698:	003f5806 	br	80213fc <__alt_data_end+0xfffe1ffc>
 802169c:	8000481e 	bne	r16,zero,80217c0 <__subsf3+0x460>
 80216a0:	18006226 	beq	r3,zero,802182c <__subsf3+0x4cc>
 80216a4:	383f4726 	beq	r7,zero,80213c4 <__alt_data_end+0xfffe1fc4>
 80216a8:	19c7883a 	add	r3,r3,r7
 80216ac:	1881002c 	andhi	r2,r3,1024
 80216b0:	103f8326 	beq	r2,zero,80214c0 <__alt_data_end+0xfffe20c0>
 80216b4:	00bf0034 	movhi	r2,64512
 80216b8:	10bfffc4 	addi	r2,r2,-1
 80216bc:	2821883a 	mov	r16,r5
 80216c0:	1886703a 	and	r3,r3,r2
 80216c4:	003f3f06 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80216c8:	80001c1e 	bne	r16,zero,802173c <__subsf3+0x3dc>
 80216cc:	1800261e 	bne	r3,zero,8021768 <__subsf3+0x408>
 80216d0:	38004c26 	beq	r7,zero,8021804 <__subsf3+0x4a4>
 80216d4:	3807883a 	mov	r3,r7
 80216d8:	1023883a 	mov	r17,r2
 80216dc:	003f3906 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80216e0:	01c00044 	movi	r7,1
 80216e4:	003f9006 	br	8021528 <__alt_data_end+0xfffe2128>
 80216e8:	3807883a 	mov	r3,r7
 80216ec:	3021883a 	mov	r16,r6
 80216f0:	1023883a 	mov	r17,r2
 80216f4:	003f3306 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80216f8:	8000161e 	bne	r16,zero,8021754 <__subsf3+0x3f4>
 80216fc:	18002d26 	beq	r3,zero,80217b4 <__subsf3+0x454>
 8021700:	0108303a 	nor	r4,zero,r4
 8021704:	20000a26 	beq	r4,zero,8021730 <__subsf3+0x3d0>
 8021708:	01403fc4 	movi	r5,255
 802170c:	31402926 	beq	r6,r5,80217b4 <__subsf3+0x454>
 8021710:	014006c4 	movi	r5,27
 8021714:	29004716 	blt	r5,r4,8021834 <__subsf3+0x4d4>
 8021718:	01400804 	movi	r5,32
 802171c:	290bc83a 	sub	r5,r5,r4
 8021720:	194a983a 	sll	r5,r3,r5
 8021724:	1908d83a 	srl	r4,r3,r4
 8021728:	2806c03a 	cmpne	r3,r5,zero
 802172c:	20c6b03a 	or	r3,r4,r3
 8021730:	19c7883a 	add	r3,r3,r7
 8021734:	3021883a 	mov	r16,r6
 8021738:	003f7c06 	br	802152c <__alt_data_end+0xfffe212c>
 802173c:	1800111e 	bne	r3,zero,8021784 <__subsf3+0x424>
 8021740:	38003326 	beq	r7,zero,8021810 <__subsf3+0x4b0>
 8021744:	3807883a 	mov	r3,r7
 8021748:	1023883a 	mov	r17,r2
 802174c:	04003fc4 	movi	r16,255
 8021750:	003f1c06 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021754:	01403fc4 	movi	r5,255
 8021758:	31401626 	beq	r6,r5,80217b4 <__subsf3+0x454>
 802175c:	0109c83a 	sub	r4,zero,r4
 8021760:	18c10034 	orhi	r3,r3,1024
 8021764:	003fea06 	br	8021710 <__alt_data_end+0xfffe2310>
 8021768:	383f1626 	beq	r7,zero,80213c4 <__alt_data_end+0xfffe1fc4>
 802176c:	19c9c83a 	sub	r4,r3,r7
 8021770:	2141002c 	andhi	r5,r4,1024
 8021774:	283f5026 	beq	r5,zero,80214b8 <__alt_data_end+0xfffe20b8>
 8021778:	38c7c83a 	sub	r3,r7,r3
 802177c:	1023883a 	mov	r17,r2
 8021780:	003f1006 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021784:	38001b26 	beq	r7,zero,80217f4 <__subsf3+0x494>
 8021788:	1806d0fa 	srli	r3,r3,3
 802178c:	1900102c 	andhi	r4,r3,64
 8021790:	20000526 	beq	r4,zero,80217a8 <__subsf3+0x448>
 8021794:	380ed0fa 	srli	r7,r7,3
 8021798:	3900102c 	andhi	r4,r7,64
 802179c:	2000021e 	bne	r4,zero,80217a8 <__subsf3+0x448>
 80217a0:	3807883a 	mov	r3,r7
 80217a4:	1023883a 	mov	r17,r2
 80217a8:	180690fa 	slli	r3,r3,3
 80217ac:	04003fc4 	movi	r16,255
 80217b0:	003f0406 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80217b4:	3807883a 	mov	r3,r7
 80217b8:	3021883a 	mov	r16,r6
 80217bc:	003f0106 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80217c0:	18001726 	beq	r3,zero,8021820 <__subsf3+0x4c0>
 80217c4:	38000b26 	beq	r7,zero,80217f4 <__subsf3+0x494>
 80217c8:	1806d0fa 	srli	r3,r3,3
 80217cc:	1900102c 	andhi	r4,r3,64
 80217d0:	20000426 	beq	r4,zero,80217e4 <__subsf3+0x484>
 80217d4:	380ed0fa 	srli	r7,r7,3
 80217d8:	3900102c 	andhi	r4,r7,64
 80217dc:	2000011e 	bne	r4,zero,80217e4 <__subsf3+0x484>
 80217e0:	3807883a 	mov	r3,r7
 80217e4:	180690fa 	slli	r3,r3,3
 80217e8:	1023883a 	mov	r17,r2
 80217ec:	04003fc4 	movi	r16,255
 80217f0:	003ef406 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80217f4:	04003fc4 	movi	r16,255
 80217f8:	003ef206 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 80217fc:	00c00044 	movi	r3,1
 8021800:	003f9606 	br	802165c <__alt_data_end+0xfffe225c>
 8021804:	000b883a 	mov	r5,zero
 8021808:	0005883a 	mov	r2,zero
 802180c:	003f3506 	br	80214e4 <__alt_data_end+0xfffe20e4>
 8021810:	01402034 	movhi	r5,128
 8021814:	297fffc4 	addi	r5,r5,-1
 8021818:	0005883a 	mov	r2,zero
 802181c:	003f2f06 	br	80214dc <__alt_data_end+0xfffe20dc>
 8021820:	3807883a 	mov	r3,r7
 8021824:	04003fc4 	movi	r16,255
 8021828:	003ee606 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 802182c:	3807883a 	mov	r3,r7
 8021830:	003ee406 	br	80213c4 <__alt_data_end+0xfffe1fc4>
 8021834:	00c00044 	movi	r3,1
 8021838:	003fbd06 	br	8021730 <__alt_data_end+0xfffe2330>
 802183c:	0005883a 	mov	r2,zero
 8021840:	003f2806 	br	80214e4 <__alt_data_end+0xfffe20e4>

08021844 <__fixsfsi>:
 8021844:	200ad5fa 	srli	r5,r4,23
 8021848:	00c02034 	movhi	r3,128
 802184c:	18ffffc4 	addi	r3,r3,-1
 8021850:	29403fcc 	andi	r5,r5,255
 8021854:	00801f84 	movi	r2,126
 8021858:	1906703a 	and	r3,r3,r4
 802185c:	2008d7fa 	srli	r4,r4,31
 8021860:	11400e0e 	bge	r2,r5,802189c <__fixsfsi+0x58>
 8021864:	00802744 	movi	r2,157
 8021868:	11400816 	blt	r2,r5,802188c <__fixsfsi+0x48>
 802186c:	00802544 	movi	r2,149
 8021870:	18c02034 	orhi	r3,r3,128
 8021874:	11400b0e 	bge	r2,r5,80218a4 <__fixsfsi+0x60>
 8021878:	28bfda84 	addi	r2,r5,-150
 802187c:	1884983a 	sll	r2,r3,r2
 8021880:	20000726 	beq	r4,zero,80218a0 <__fixsfsi+0x5c>
 8021884:	0085c83a 	sub	r2,zero,r2
 8021888:	f800283a 	ret
 802188c:	00a00034 	movhi	r2,32768
 8021890:	10bfffc4 	addi	r2,r2,-1
 8021894:	2085883a 	add	r2,r4,r2
 8021898:	f800283a 	ret
 802189c:	0005883a 	mov	r2,zero
 80218a0:	f800283a 	ret
 80218a4:	00802584 	movi	r2,150
 80218a8:	1145c83a 	sub	r2,r2,r5
 80218ac:	1884d83a 	srl	r2,r3,r2
 80218b0:	003ff306 	br	8021880 <__alt_data_end+0xfffe2480>

080218b4 <__floatunsisf>:
 80218b4:	defffe04 	addi	sp,sp,-8
 80218b8:	dfc00115 	stw	ra,4(sp)
 80218bc:	dc000015 	stw	r16,0(sp)
 80218c0:	20002c26 	beq	r4,zero,8021974 <__floatunsisf+0xc0>
 80218c4:	2021883a 	mov	r16,r4
 80218c8:	80230680 	call	8023068 <__clzsi2>
 80218cc:	00c02784 	movi	r3,158
 80218d0:	1887c83a 	sub	r3,r3,r2
 80218d4:	01002584 	movi	r4,150
 80218d8:	20c00f16 	blt	r4,r3,8021918 <__floatunsisf+0x64>
 80218dc:	20c9c83a 	sub	r4,r4,r3
 80218e0:	8108983a 	sll	r4,r16,r4
 80218e4:	00802034 	movhi	r2,128
 80218e8:	10bfffc4 	addi	r2,r2,-1
 80218ec:	2088703a 	and	r4,r4,r2
 80218f0:	18803fcc 	andi	r2,r3,255
 80218f4:	100695fa 	slli	r3,r2,23
 80218f8:	00802034 	movhi	r2,128
 80218fc:	10bfffc4 	addi	r2,r2,-1
 8021900:	2084703a 	and	r2,r4,r2
 8021904:	10c4b03a 	or	r2,r2,r3
 8021908:	dfc00117 	ldw	ra,4(sp)
 802190c:	dc000017 	ldw	r16,0(sp)
 8021910:	dec00204 	addi	sp,sp,8
 8021914:	f800283a 	ret
 8021918:	01002644 	movi	r4,153
 802191c:	20c01816 	blt	r4,r3,8021980 <__floatunsisf+0xcc>
 8021920:	20c9c83a 	sub	r4,r4,r3
 8021924:	8108983a 	sll	r4,r16,r4
 8021928:	017f0034 	movhi	r5,64512
 802192c:	297fffc4 	addi	r5,r5,-1
 8021930:	218001cc 	andi	r6,r4,7
 8021934:	214a703a 	and	r5,r4,r5
 8021938:	30000426 	beq	r6,zero,802194c <__floatunsisf+0x98>
 802193c:	210003cc 	andi	r4,r4,15
 8021940:	01800104 	movi	r6,4
 8021944:	21800126 	beq	r4,r6,802194c <__floatunsisf+0x98>
 8021948:	298b883a 	add	r5,r5,r6
 802194c:	2901002c 	andhi	r4,r5,1024
 8021950:	20000526 	beq	r4,zero,8021968 <__floatunsisf+0xb4>
 8021954:	00c027c4 	movi	r3,159
 8021958:	1887c83a 	sub	r3,r3,r2
 802195c:	00bf0034 	movhi	r2,64512
 8021960:	10bfffc4 	addi	r2,r2,-1
 8021964:	288a703a 	and	r5,r5,r2
 8021968:	280891ba 	slli	r4,r5,6
 802196c:	2008d27a 	srli	r4,r4,9
 8021970:	003fdf06 	br	80218f0 <__alt_data_end+0xfffe24f0>
 8021974:	0007883a 	mov	r3,zero
 8021978:	0009883a 	mov	r4,zero
 802197c:	003fdc06 	br	80218f0 <__alt_data_end+0xfffe24f0>
 8021980:	01402e44 	movi	r5,185
 8021984:	28cbc83a 	sub	r5,r5,r3
 8021988:	01000144 	movi	r4,5
 802198c:	2089c83a 	sub	r4,r4,r2
 8021990:	814a983a 	sll	r5,r16,r5
 8021994:	8108d83a 	srl	r4,r16,r4
 8021998:	2820c03a 	cmpne	r16,r5,zero
 802199c:	2408b03a 	or	r4,r4,r16
 80219a0:	003fe106 	br	8021928 <__alt_data_end+0xfffe2528>

080219a4 <__divdf3>:
 80219a4:	defff004 	addi	sp,sp,-64
 80219a8:	dc800815 	stw	r18,32(sp)
 80219ac:	2824d53a 	srli	r18,r5,20
 80219b0:	dd800c15 	stw	r22,48(sp)
 80219b4:	282cd7fa 	srli	r22,r5,31
 80219b8:	dc000615 	stw	r16,24(sp)
 80219bc:	04000434 	movhi	r16,16
 80219c0:	843fffc4 	addi	r16,r16,-1
 80219c4:	dfc00f15 	stw	ra,60(sp)
 80219c8:	df000e15 	stw	fp,56(sp)
 80219cc:	ddc00d15 	stw	r23,52(sp)
 80219d0:	dd400b15 	stw	r21,44(sp)
 80219d4:	dd000a15 	stw	r20,40(sp)
 80219d8:	dcc00915 	stw	r19,36(sp)
 80219dc:	dc400715 	stw	r17,28(sp)
 80219e0:	9481ffcc 	andi	r18,r18,2047
 80219e4:	2c20703a 	and	r16,r5,r16
 80219e8:	b2003fcc 	andi	r8,r22,255
 80219ec:	90006126 	beq	r18,zero,8021b74 <__divdf3+0x1d0>
 80219f0:	0081ffc4 	movi	r2,2047
 80219f4:	202b883a 	mov	r21,r4
 80219f8:	90803726 	beq	r18,r2,8021ad8 <__divdf3+0x134>
 80219fc:	80800434 	orhi	r2,r16,16
 8021a00:	100490fa 	slli	r2,r2,3
 8021a04:	2020d77a 	srli	r16,r4,29
 8021a08:	202a90fa 	slli	r21,r4,3
 8021a0c:	94bf0044 	addi	r18,r18,-1023
 8021a10:	80a0b03a 	or	r16,r16,r2
 8021a14:	0013883a 	mov	r9,zero
 8021a18:	000b883a 	mov	r5,zero
 8021a1c:	3806d53a 	srli	r3,r7,20
 8021a20:	382ed7fa 	srli	r23,r7,31
 8021a24:	04400434 	movhi	r17,16
 8021a28:	8c7fffc4 	addi	r17,r17,-1
 8021a2c:	18c1ffcc 	andi	r3,r3,2047
 8021a30:	3029883a 	mov	r20,r6
 8021a34:	3c62703a 	and	r17,r7,r17
 8021a38:	bf003fcc 	andi	fp,r23,255
 8021a3c:	18006e26 	beq	r3,zero,8021bf8 <__divdf3+0x254>
 8021a40:	0081ffc4 	movi	r2,2047
 8021a44:	18806626 	beq	r3,r2,8021be0 <__divdf3+0x23c>
 8021a48:	88800434 	orhi	r2,r17,16
 8021a4c:	100490fa 	slli	r2,r2,3
 8021a50:	3022d77a 	srli	r17,r6,29
 8021a54:	302890fa 	slli	r20,r6,3
 8021a58:	18ff0044 	addi	r3,r3,-1023
 8021a5c:	88a2b03a 	or	r17,r17,r2
 8021a60:	000f883a 	mov	r7,zero
 8021a64:	b5e6f03a 	xor	r19,r22,r23
 8021a68:	3a4cb03a 	or	r6,r7,r9
 8021a6c:	008003c4 	movi	r2,15
 8021a70:	9809883a 	mov	r4,r19
 8021a74:	90c7c83a 	sub	r3,r18,r3
 8021a78:	9cc03fcc 	andi	r19,r19,255
 8021a7c:	11809636 	bltu	r2,r6,8021cd8 <__divdf3+0x334>
 8021a80:	300c90ba 	slli	r6,r6,2
 8021a84:	008200b4 	movhi	r2,2050
 8021a88:	1086a604 	addi	r2,r2,6808
 8021a8c:	308d883a 	add	r6,r6,r2
 8021a90:	30800017 	ldw	r2,0(r6)
 8021a94:	1000683a 	jmp	r2
 8021a98:	08021cd8 	cmpnei	zero,at,2163
 8021a9c:	08021b10 	cmplti	zero,at,2156
 8021aa0:	08021cc8 	cmpgei	zero,at,2163
 8021aa4:	08021b04 	addi	zero,at,2156
 8021aa8:	08021cc8 	cmpgei	zero,at,2163
 8021aac:	08021c9c 	xori	zero,at,2162
 8021ab0:	08021cc8 	cmpgei	zero,at,2163
 8021ab4:	08021b04 	addi	zero,at,2156
 8021ab8:	08021b10 	cmplti	zero,at,2156
 8021abc:	08021b10 	cmplti	zero,at,2156
 8021ac0:	08021c9c 	xori	zero,at,2162
 8021ac4:	08021b04 	addi	zero,at,2156
 8021ac8:	08021af4 	orhi	zero,at,2155
 8021acc:	08021af4 	orhi	zero,at,2155
 8021ad0:	08021af4 	orhi	zero,at,2155
 8021ad4:	08022060 	cmpeqi	zero,at,2177
 8021ad8:	2404b03a 	or	r2,r4,r16
 8021adc:	10006c1e 	bne	r2,zero,8021c90 <__divdf3+0x2ec>
 8021ae0:	02400204 	movi	r9,8
 8021ae4:	0021883a 	mov	r16,zero
 8021ae8:	002b883a 	mov	r21,zero
 8021aec:	01400084 	movi	r5,2
 8021af0:	003fca06 	br	8021a1c <__alt_data_end+0xfffe261c>
 8021af4:	8023883a 	mov	r17,r16
 8021af8:	a829883a 	mov	r20,r21
 8021afc:	4039883a 	mov	fp,r8
 8021b00:	280f883a 	mov	r7,r5
 8021b04:	00800084 	movi	r2,2
 8021b08:	3881601e 	bne	r7,r2,802208c <__divdf3+0x6e8>
 8021b0c:	e027883a 	mov	r19,fp
 8021b10:	9900004c 	andi	r4,r19,1
 8021b14:	0081ffc4 	movi	r2,2047
 8021b18:	0021883a 	mov	r16,zero
 8021b1c:	002b883a 	mov	r21,zero
 8021b20:	1004953a 	slli	r2,r2,20
 8021b24:	20c03fcc 	andi	r3,r4,255
 8021b28:	01400434 	movhi	r5,16
 8021b2c:	297fffc4 	addi	r5,r5,-1
 8021b30:	180697fa 	slli	r3,r3,31
 8021b34:	8160703a 	and	r16,r16,r5
 8021b38:	80a0b03a 	or	r16,r16,r2
 8021b3c:	80c6b03a 	or	r3,r16,r3
 8021b40:	a805883a 	mov	r2,r21
 8021b44:	dfc00f17 	ldw	ra,60(sp)
 8021b48:	df000e17 	ldw	fp,56(sp)
 8021b4c:	ddc00d17 	ldw	r23,52(sp)
 8021b50:	dd800c17 	ldw	r22,48(sp)
 8021b54:	dd400b17 	ldw	r21,44(sp)
 8021b58:	dd000a17 	ldw	r20,40(sp)
 8021b5c:	dcc00917 	ldw	r19,36(sp)
 8021b60:	dc800817 	ldw	r18,32(sp)
 8021b64:	dc400717 	ldw	r17,28(sp)
 8021b68:	dc000617 	ldw	r16,24(sp)
 8021b6c:	dec01004 	addi	sp,sp,64
 8021b70:	f800283a 	ret
 8021b74:	2404b03a 	or	r2,r4,r16
 8021b78:	2023883a 	mov	r17,r4
 8021b7c:	10003f26 	beq	r2,zero,8021c7c <__divdf3+0x2d8>
 8021b80:	80015e26 	beq	r16,zero,80220fc <__divdf3+0x758>
 8021b84:	8009883a 	mov	r4,r16
 8021b88:	d9800215 	stw	r6,8(sp)
 8021b8c:	d9c00515 	stw	r7,20(sp)
 8021b90:	da000415 	stw	r8,16(sp)
 8021b94:	80230680 	call	8023068 <__clzsi2>
 8021b98:	d9800217 	ldw	r6,8(sp)
 8021b9c:	d9c00517 	ldw	r7,20(sp)
 8021ba0:	da000417 	ldw	r8,16(sp)
 8021ba4:	113ffd44 	addi	r4,r2,-11
 8021ba8:	00c00704 	movi	r3,28
 8021bac:	19014f16 	blt	r3,r4,80220ec <__divdf3+0x748>
 8021bb0:	00c00744 	movi	r3,29
 8021bb4:	157ffe04 	addi	r21,r2,-8
 8021bb8:	1907c83a 	sub	r3,r3,r4
 8021bbc:	8560983a 	sll	r16,r16,r21
 8021bc0:	88c6d83a 	srl	r3,r17,r3
 8021bc4:	8d6a983a 	sll	r21,r17,r21
 8021bc8:	1c20b03a 	or	r16,r3,r16
 8021bcc:	1080fcc4 	addi	r2,r2,1011
 8021bd0:	00a5c83a 	sub	r18,zero,r2
 8021bd4:	0013883a 	mov	r9,zero
 8021bd8:	000b883a 	mov	r5,zero
 8021bdc:	003f8f06 	br	8021a1c <__alt_data_end+0xfffe261c>
 8021be0:	3444b03a 	or	r2,r6,r17
 8021be4:	1000231e 	bne	r2,zero,8021c74 <__divdf3+0x2d0>
 8021be8:	0023883a 	mov	r17,zero
 8021bec:	0029883a 	mov	r20,zero
 8021bf0:	01c00084 	movi	r7,2
 8021bf4:	003f9b06 	br	8021a64 <__alt_data_end+0xfffe2664>
 8021bf8:	3444b03a 	or	r2,r6,r17
 8021bfc:	10001926 	beq	r2,zero,8021c64 <__divdf3+0x2c0>
 8021c00:	88014b26 	beq	r17,zero,8022130 <__divdf3+0x78c>
 8021c04:	8809883a 	mov	r4,r17
 8021c08:	d9400115 	stw	r5,4(sp)
 8021c0c:	d9800215 	stw	r6,8(sp)
 8021c10:	da000415 	stw	r8,16(sp)
 8021c14:	da400315 	stw	r9,12(sp)
 8021c18:	80230680 	call	8023068 <__clzsi2>
 8021c1c:	d9400117 	ldw	r5,4(sp)
 8021c20:	d9800217 	ldw	r6,8(sp)
 8021c24:	da000417 	ldw	r8,16(sp)
 8021c28:	da400317 	ldw	r9,12(sp)
 8021c2c:	113ffd44 	addi	r4,r2,-11
 8021c30:	00c00704 	movi	r3,28
 8021c34:	19013a16 	blt	r3,r4,8022120 <__divdf3+0x77c>
 8021c38:	00c00744 	movi	r3,29
 8021c3c:	153ffe04 	addi	r20,r2,-8
 8021c40:	1907c83a 	sub	r3,r3,r4
 8021c44:	8d22983a 	sll	r17,r17,r20
 8021c48:	30c6d83a 	srl	r3,r6,r3
 8021c4c:	3528983a 	sll	r20,r6,r20
 8021c50:	1c62b03a 	or	r17,r3,r17
 8021c54:	1080fcc4 	addi	r2,r2,1011
 8021c58:	0087c83a 	sub	r3,zero,r2
 8021c5c:	000f883a 	mov	r7,zero
 8021c60:	003f8006 	br	8021a64 <__alt_data_end+0xfffe2664>
 8021c64:	0023883a 	mov	r17,zero
 8021c68:	0029883a 	mov	r20,zero
 8021c6c:	01c00044 	movi	r7,1
 8021c70:	003f7c06 	br	8021a64 <__alt_data_end+0xfffe2664>
 8021c74:	01c000c4 	movi	r7,3
 8021c78:	003f7a06 	br	8021a64 <__alt_data_end+0xfffe2664>
 8021c7c:	02400104 	movi	r9,4
 8021c80:	0021883a 	mov	r16,zero
 8021c84:	002b883a 	mov	r21,zero
 8021c88:	01400044 	movi	r5,1
 8021c8c:	003f6306 	br	8021a1c <__alt_data_end+0xfffe261c>
 8021c90:	02400304 	movi	r9,12
 8021c94:	014000c4 	movi	r5,3
 8021c98:	003f6006 	br	8021a1c <__alt_data_end+0xfffe261c>
 8021c9c:	04000434 	movhi	r16,16
 8021ca0:	0009883a 	mov	r4,zero
 8021ca4:	843fffc4 	addi	r16,r16,-1
 8021ca8:	057fffc4 	movi	r21,-1
 8021cac:	0081ffc4 	movi	r2,2047
 8021cb0:	003f9b06 	br	8021b20 <__alt_data_end+0xfffe2720>
 8021cb4:	00c00044 	movi	r3,1
 8021cb8:	1887c83a 	sub	r3,r3,r2
 8021cbc:	01000e04 	movi	r4,56
 8021cc0:	20c1530e 	bge	r4,r3,8022210 <__divdf3+0x86c>
 8021cc4:	9900004c 	andi	r4,r19,1
 8021cc8:	0005883a 	mov	r2,zero
 8021ccc:	0021883a 	mov	r16,zero
 8021cd0:	002b883a 	mov	r21,zero
 8021cd4:	003f9206 	br	8021b20 <__alt_data_end+0xfffe2720>
 8021cd8:	8c012e36 	bltu	r17,r16,8022194 <__divdf3+0x7f0>
 8021cdc:	84412c26 	beq	r16,r17,8022190 <__divdf3+0x7ec>
 8021ce0:	a82f883a 	mov	r23,r21
 8021ce4:	18ffffc4 	addi	r3,r3,-1
 8021ce8:	002b883a 	mov	r21,zero
 8021cec:	a004d63a 	srli	r2,r20,24
 8021cf0:	8822923a 	slli	r17,r17,8
 8021cf4:	a028923a 	slli	r20,r20,8
 8021cf8:	8009883a 	mov	r4,r16
 8021cfc:	88acb03a 	or	r22,r17,r2
 8021d00:	dd000015 	stw	r20,0(sp)
 8021d04:	b028d43a 	srli	r20,r22,16
 8021d08:	d8c00215 	stw	r3,8(sp)
 8021d0c:	b4bfffcc 	andi	r18,r22,65535
 8021d10:	a00b883a 	mov	r5,r20
 8021d14:	80231c40 	call	80231c4 <__udivsi3>
 8021d18:	100b883a 	mov	r5,r2
 8021d1c:	9009883a 	mov	r4,r18
 8021d20:	1023883a 	mov	r17,r2
 8021d24:	80212ac0 	call	80212ac <__mulsi3>
 8021d28:	8009883a 	mov	r4,r16
 8021d2c:	a00b883a 	mov	r5,r20
 8021d30:	1039883a 	mov	fp,r2
 8021d34:	80232280 	call	8023228 <__umodsi3>
 8021d38:	1004943a 	slli	r2,r2,16
 8021d3c:	b808d43a 	srli	r4,r23,16
 8021d40:	d8c00217 	ldw	r3,8(sp)
 8021d44:	2084b03a 	or	r2,r4,r2
 8021d48:	1700062e 	bgeu	r2,fp,8021d64 <__divdf3+0x3c0>
 8021d4c:	1585883a 	add	r2,r2,r22
 8021d50:	893fffc4 	addi	r4,r17,-1
 8021d54:	15811d36 	bltu	r2,r22,80221cc <__divdf3+0x828>
 8021d58:	17011c2e 	bgeu	r2,fp,80221cc <__divdf3+0x828>
 8021d5c:	8c7fff84 	addi	r17,r17,-2
 8021d60:	1585883a 	add	r2,r2,r22
 8021d64:	1739c83a 	sub	fp,r2,fp
 8021d68:	a00b883a 	mov	r5,r20
 8021d6c:	e009883a 	mov	r4,fp
 8021d70:	d8c00215 	stw	r3,8(sp)
 8021d74:	80231c40 	call	80231c4 <__udivsi3>
 8021d78:	100b883a 	mov	r5,r2
 8021d7c:	9009883a 	mov	r4,r18
 8021d80:	1021883a 	mov	r16,r2
 8021d84:	80212ac0 	call	80212ac <__mulsi3>
 8021d88:	a00b883a 	mov	r5,r20
 8021d8c:	e009883a 	mov	r4,fp
 8021d90:	d8800415 	stw	r2,16(sp)
 8021d94:	80232280 	call	8023228 <__umodsi3>
 8021d98:	1004943a 	slli	r2,r2,16
 8021d9c:	da000417 	ldw	r8,16(sp)
 8021da0:	bdffffcc 	andi	r23,r23,65535
 8021da4:	b884b03a 	or	r2,r23,r2
 8021da8:	d8c00217 	ldw	r3,8(sp)
 8021dac:	1200062e 	bgeu	r2,r8,8021dc8 <__divdf3+0x424>
 8021db0:	1585883a 	add	r2,r2,r22
 8021db4:	813fffc4 	addi	r4,r16,-1
 8021db8:	15810236 	bltu	r2,r22,80221c4 <__divdf3+0x820>
 8021dbc:	1201012e 	bgeu	r2,r8,80221c4 <__divdf3+0x820>
 8021dc0:	843fff84 	addi	r16,r16,-2
 8021dc4:	1585883a 	add	r2,r2,r22
 8021dc8:	8822943a 	slli	r17,r17,16
 8021dcc:	d9800017 	ldw	r6,0(sp)
 8021dd0:	1211c83a 	sub	r8,r2,r8
 8021dd4:	8c22b03a 	or	r17,r17,r16
 8021dd8:	373fffcc 	andi	fp,r6,65535
 8021ddc:	8abfffcc 	andi	r10,r17,65535
 8021de0:	8820d43a 	srli	r16,r17,16
 8021de4:	5009883a 	mov	r4,r10
 8021de8:	e00b883a 	mov	r5,fp
 8021dec:	302ed43a 	srli	r23,r6,16
 8021df0:	d8c00215 	stw	r3,8(sp)
 8021df4:	da000415 	stw	r8,16(sp)
 8021df8:	da800115 	stw	r10,4(sp)
 8021dfc:	80212ac0 	call	80212ac <__mulsi3>
 8021e00:	800b883a 	mov	r5,r16
 8021e04:	e009883a 	mov	r4,fp
 8021e08:	d8800515 	stw	r2,20(sp)
 8021e0c:	80212ac0 	call	80212ac <__mulsi3>
 8021e10:	8009883a 	mov	r4,r16
 8021e14:	b80b883a 	mov	r5,r23
 8021e18:	d8800315 	stw	r2,12(sp)
 8021e1c:	80212ac0 	call	80212ac <__mulsi3>
 8021e20:	da800117 	ldw	r10,4(sp)
 8021e24:	b80b883a 	mov	r5,r23
 8021e28:	1021883a 	mov	r16,r2
 8021e2c:	5009883a 	mov	r4,r10
 8021e30:	80212ac0 	call	80212ac <__mulsi3>
 8021e34:	d9c00517 	ldw	r7,20(sp)
 8021e38:	da400317 	ldw	r9,12(sp)
 8021e3c:	d8c00217 	ldw	r3,8(sp)
 8021e40:	3808d43a 	srli	r4,r7,16
 8021e44:	1245883a 	add	r2,r2,r9
 8021e48:	da000417 	ldw	r8,16(sp)
 8021e4c:	2085883a 	add	r2,r4,r2
 8021e50:	1240022e 	bgeu	r2,r9,8021e5c <__divdf3+0x4b8>
 8021e54:	01000074 	movhi	r4,1
 8021e58:	8121883a 	add	r16,r16,r4
 8021e5c:	1008d43a 	srli	r4,r2,16
 8021e60:	1004943a 	slli	r2,r2,16
 8021e64:	39ffffcc 	andi	r7,r7,65535
 8021e68:	2409883a 	add	r4,r4,r16
 8021e6c:	11c5883a 	add	r2,r2,r7
 8021e70:	4100bb36 	bltu	r8,r4,8022160 <__divdf3+0x7bc>
 8021e74:	4100d726 	beq	r8,r4,80221d4 <__divdf3+0x830>
 8021e78:	4109c83a 	sub	r4,r8,r4
 8021e7c:	a8a1c83a 	sub	r16,r21,r2
 8021e80:	ac2b803a 	cmpltu	r21,r21,r16
 8021e84:	256bc83a 	sub	r21,r4,r21
 8021e88:	b540d926 	beq	r22,r21,80221f0 <__divdf3+0x84c>
 8021e8c:	a00b883a 	mov	r5,r20
 8021e90:	a809883a 	mov	r4,r21
 8021e94:	d8c00215 	stw	r3,8(sp)
 8021e98:	80231c40 	call	80231c4 <__udivsi3>
 8021e9c:	100b883a 	mov	r5,r2
 8021ea0:	9009883a 	mov	r4,r18
 8021ea4:	d8800515 	stw	r2,20(sp)
 8021ea8:	80212ac0 	call	80212ac <__mulsi3>
 8021eac:	a809883a 	mov	r4,r21
 8021eb0:	a00b883a 	mov	r5,r20
 8021eb4:	d8800415 	stw	r2,16(sp)
 8021eb8:	80232280 	call	8023228 <__umodsi3>
 8021ebc:	1004943a 	slli	r2,r2,16
 8021ec0:	8008d43a 	srli	r4,r16,16
 8021ec4:	da000417 	ldw	r8,16(sp)
 8021ec8:	d8c00217 	ldw	r3,8(sp)
 8021ecc:	2084b03a 	or	r2,r4,r2
 8021ed0:	d9c00517 	ldw	r7,20(sp)
 8021ed4:	1200062e 	bgeu	r2,r8,8021ef0 <__divdf3+0x54c>
 8021ed8:	1585883a 	add	r2,r2,r22
 8021edc:	393fffc4 	addi	r4,r7,-1
 8021ee0:	1580c536 	bltu	r2,r22,80221f8 <__divdf3+0x854>
 8021ee4:	1200c42e 	bgeu	r2,r8,80221f8 <__divdf3+0x854>
 8021ee8:	39ffff84 	addi	r7,r7,-2
 8021eec:	1585883a 	add	r2,r2,r22
 8021ef0:	122bc83a 	sub	r21,r2,r8
 8021ef4:	a00b883a 	mov	r5,r20
 8021ef8:	a809883a 	mov	r4,r21
 8021efc:	d8c00215 	stw	r3,8(sp)
 8021f00:	d9c00515 	stw	r7,20(sp)
 8021f04:	80231c40 	call	80231c4 <__udivsi3>
 8021f08:	9009883a 	mov	r4,r18
 8021f0c:	100b883a 	mov	r5,r2
 8021f10:	d8800415 	stw	r2,16(sp)
 8021f14:	80212ac0 	call	80212ac <__mulsi3>
 8021f18:	a809883a 	mov	r4,r21
 8021f1c:	a00b883a 	mov	r5,r20
 8021f20:	1025883a 	mov	r18,r2
 8021f24:	80232280 	call	8023228 <__umodsi3>
 8021f28:	1004943a 	slli	r2,r2,16
 8021f2c:	813fffcc 	andi	r4,r16,65535
 8021f30:	d8c00217 	ldw	r3,8(sp)
 8021f34:	20a0b03a 	or	r16,r4,r2
 8021f38:	d9c00517 	ldw	r7,20(sp)
 8021f3c:	da000417 	ldw	r8,16(sp)
 8021f40:	8480062e 	bgeu	r16,r18,8021f5c <__divdf3+0x5b8>
 8021f44:	85a1883a 	add	r16,r16,r22
 8021f48:	40bfffc4 	addi	r2,r8,-1
 8021f4c:	8580ac36 	bltu	r16,r22,8022200 <__divdf3+0x85c>
 8021f50:	8480ab2e 	bgeu	r16,r18,8022200 <__divdf3+0x85c>
 8021f54:	423fff84 	addi	r8,r8,-2
 8021f58:	85a1883a 	add	r16,r16,r22
 8021f5c:	3804943a 	slli	r2,r7,16
 8021f60:	84a1c83a 	sub	r16,r16,r18
 8021f64:	e009883a 	mov	r4,fp
 8021f68:	1228b03a 	or	r20,r2,r8
 8021f6c:	a1ffffcc 	andi	r7,r20,65535
 8021f70:	a024d43a 	srli	r18,r20,16
 8021f74:	380b883a 	mov	r5,r7
 8021f78:	d8c00215 	stw	r3,8(sp)
 8021f7c:	d9c00515 	stw	r7,20(sp)
 8021f80:	80212ac0 	call	80212ac <__mulsi3>
 8021f84:	900b883a 	mov	r5,r18
 8021f88:	e009883a 	mov	r4,fp
 8021f8c:	102b883a 	mov	r21,r2
 8021f90:	80212ac0 	call	80212ac <__mulsi3>
 8021f94:	900b883a 	mov	r5,r18
 8021f98:	b809883a 	mov	r4,r23
 8021f9c:	1039883a 	mov	fp,r2
 8021fa0:	80212ac0 	call	80212ac <__mulsi3>
 8021fa4:	d9c00517 	ldw	r7,20(sp)
 8021fa8:	b80b883a 	mov	r5,r23
 8021fac:	1025883a 	mov	r18,r2
 8021fb0:	3809883a 	mov	r4,r7
 8021fb4:	80212ac0 	call	80212ac <__mulsi3>
 8021fb8:	a808d43a 	srli	r4,r21,16
 8021fbc:	1705883a 	add	r2,r2,fp
 8021fc0:	d8c00217 	ldw	r3,8(sp)
 8021fc4:	2085883a 	add	r2,r4,r2
 8021fc8:	1700022e 	bgeu	r2,fp,8021fd4 <__divdf3+0x630>
 8021fcc:	01000074 	movhi	r4,1
 8021fd0:	9125883a 	add	r18,r18,r4
 8021fd4:	1008d43a 	srli	r4,r2,16
 8021fd8:	1004943a 	slli	r2,r2,16
 8021fdc:	ad7fffcc 	andi	r21,r21,65535
 8021fe0:	2489883a 	add	r4,r4,r18
 8021fe4:	1545883a 	add	r2,r2,r21
 8021fe8:	81003836 	bltu	r16,r4,80220cc <__divdf3+0x728>
 8021fec:	81003626 	beq	r16,r4,80220c8 <__divdf3+0x724>
 8021ff0:	a5000054 	ori	r20,r20,1
 8021ff4:	1880ffc4 	addi	r2,r3,1023
 8021ff8:	00bf2e0e 	bge	zero,r2,8021cb4 <__alt_data_end+0xfffe28b4>
 8021ffc:	a10001cc 	andi	r4,r20,7
 8022000:	20000726 	beq	r4,zero,8022020 <__divdf3+0x67c>
 8022004:	a10003cc 	andi	r4,r20,15
 8022008:	01400104 	movi	r5,4
 802200c:	21400426 	beq	r4,r5,8022020 <__divdf3+0x67c>
 8022010:	a149883a 	add	r4,r20,r5
 8022014:	2529803a 	cmpltu	r20,r4,r20
 8022018:	8d23883a 	add	r17,r17,r20
 802201c:	2029883a 	mov	r20,r4
 8022020:	8900402c 	andhi	r4,r17,256
 8022024:	20000426 	beq	r4,zero,8022038 <__divdf3+0x694>
 8022028:	18810004 	addi	r2,r3,1024
 802202c:	00ffc034 	movhi	r3,65280
 8022030:	18ffffc4 	addi	r3,r3,-1
 8022034:	88e2703a 	and	r17,r17,r3
 8022038:	00c1ff84 	movi	r3,2046
 802203c:	18beb416 	blt	r3,r2,8021b10 <__alt_data_end+0xfffe2710>
 8022040:	a028d0fa 	srli	r20,r20,3
 8022044:	882a977a 	slli	r21,r17,29
 8022048:	8820927a 	slli	r16,r17,9
 802204c:	1081ffcc 	andi	r2,r2,2047
 8022050:	ad2ab03a 	or	r21,r21,r20
 8022054:	8020d33a 	srli	r16,r16,12
 8022058:	9900004c 	andi	r4,r19,1
 802205c:	003eb006 	br	8021b20 <__alt_data_end+0xfffe2720>
 8022060:	8080022c 	andhi	r2,r16,8
 8022064:	10001226 	beq	r2,zero,80220b0 <__divdf3+0x70c>
 8022068:	8880022c 	andhi	r2,r17,8
 802206c:	1000101e 	bne	r2,zero,80220b0 <__divdf3+0x70c>
 8022070:	00800434 	movhi	r2,16
 8022074:	8c000234 	orhi	r16,r17,8
 8022078:	10bfffc4 	addi	r2,r2,-1
 802207c:	b809883a 	mov	r4,r23
 8022080:	80a0703a 	and	r16,r16,r2
 8022084:	a02b883a 	mov	r21,r20
 8022088:	003f0806 	br	8021cac <__alt_data_end+0xfffe28ac>
 802208c:	008000c4 	movi	r2,3
 8022090:	3880b126 	beq	r7,r2,8022358 <__divdf3+0x9b4>
 8022094:	00800044 	movi	r2,1
 8022098:	38805b1e 	bne	r7,r2,8022208 <__divdf3+0x864>
 802209c:	e009883a 	mov	r4,fp
 80220a0:	0005883a 	mov	r2,zero
 80220a4:	0021883a 	mov	r16,zero
 80220a8:	002b883a 	mov	r21,zero
 80220ac:	003e9c06 	br	8021b20 <__alt_data_end+0xfffe2720>
 80220b0:	00800434 	movhi	r2,16
 80220b4:	84000234 	orhi	r16,r16,8
 80220b8:	10bfffc4 	addi	r2,r2,-1
 80220bc:	b009883a 	mov	r4,r22
 80220c0:	80a0703a 	and	r16,r16,r2
 80220c4:	003ef906 	br	8021cac <__alt_data_end+0xfffe28ac>
 80220c8:	103fca26 	beq	r2,zero,8021ff4 <__alt_data_end+0xfffe2bf4>
 80220cc:	b421883a 	add	r16,r22,r16
 80220d0:	a17fffc4 	addi	r5,r20,-1
 80220d4:	8580422e 	bgeu	r16,r22,80221e0 <__divdf3+0x83c>
 80220d8:	2829883a 	mov	r20,r5
 80220dc:	813fc41e 	bne	r16,r4,8021ff0 <__alt_data_end+0xfffe2bf0>
 80220e0:	d9800017 	ldw	r6,0(sp)
 80220e4:	30bfc21e 	bne	r6,r2,8021ff0 <__alt_data_end+0xfffe2bf0>
 80220e8:	003fc206 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 80220ec:	143ff604 	addi	r16,r2,-40
 80220f0:	8c20983a 	sll	r16,r17,r16
 80220f4:	002b883a 	mov	r21,zero
 80220f8:	003eb406 	br	8021bcc <__alt_data_end+0xfffe27cc>
 80220fc:	d9800215 	stw	r6,8(sp)
 8022100:	d9c00515 	stw	r7,20(sp)
 8022104:	da000415 	stw	r8,16(sp)
 8022108:	80230680 	call	8023068 <__clzsi2>
 802210c:	10800804 	addi	r2,r2,32
 8022110:	da000417 	ldw	r8,16(sp)
 8022114:	d9c00517 	ldw	r7,20(sp)
 8022118:	d9800217 	ldw	r6,8(sp)
 802211c:	003ea106 	br	8021ba4 <__alt_data_end+0xfffe27a4>
 8022120:	147ff604 	addi	r17,r2,-40
 8022124:	3462983a 	sll	r17,r6,r17
 8022128:	0029883a 	mov	r20,zero
 802212c:	003ec906 	br	8021c54 <__alt_data_end+0xfffe2854>
 8022130:	3009883a 	mov	r4,r6
 8022134:	d9400115 	stw	r5,4(sp)
 8022138:	d9800215 	stw	r6,8(sp)
 802213c:	da000415 	stw	r8,16(sp)
 8022140:	da400315 	stw	r9,12(sp)
 8022144:	80230680 	call	8023068 <__clzsi2>
 8022148:	10800804 	addi	r2,r2,32
 802214c:	da400317 	ldw	r9,12(sp)
 8022150:	da000417 	ldw	r8,16(sp)
 8022154:	d9800217 	ldw	r6,8(sp)
 8022158:	d9400117 	ldw	r5,4(sp)
 802215c:	003eb306 	br	8021c2c <__alt_data_end+0xfffe282c>
 8022160:	d9800017 	ldw	r6,0(sp)
 8022164:	a9ab883a 	add	r21,r21,r6
 8022168:	a98b803a 	cmpltu	r5,r21,r6
 802216c:	2d8b883a 	add	r5,r5,r22
 8022170:	2a11883a 	add	r8,r5,r8
 8022174:	897fffc4 	addi	r5,r17,-1
 8022178:	b2000c2e 	bgeu	r22,r8,80221ac <__divdf3+0x808>
 802217c:	41003f36 	bltu	r8,r4,802227c <__divdf3+0x8d8>
 8022180:	22006c26 	beq	r4,r8,8022334 <__divdf3+0x990>
 8022184:	4109c83a 	sub	r4,r8,r4
 8022188:	2823883a 	mov	r17,r5
 802218c:	003f3b06 	br	8021e7c <__alt_data_end+0xfffe2a7c>
 8022190:	ad3ed336 	bltu	r21,r20,8021ce0 <__alt_data_end+0xfffe28e0>
 8022194:	a804d07a 	srli	r2,r21,1
 8022198:	802e97fa 	slli	r23,r16,31
 802219c:	a82a97fa 	slli	r21,r21,31
 80221a0:	8020d07a 	srli	r16,r16,1
 80221a4:	b8aeb03a 	or	r23,r23,r2
 80221a8:	003ed006 	br	8021cec <__alt_data_end+0xfffe28ec>
 80221ac:	b23ff51e 	bne	r22,r8,8022184 <__alt_data_end+0xfffe2d84>
 80221b0:	d9800017 	ldw	r6,0(sp)
 80221b4:	a9bff12e 	bgeu	r21,r6,802217c <__alt_data_end+0xfffe2d7c>
 80221b8:	b109c83a 	sub	r4,r22,r4
 80221bc:	2823883a 	mov	r17,r5
 80221c0:	003f2e06 	br	8021e7c <__alt_data_end+0xfffe2a7c>
 80221c4:	2021883a 	mov	r16,r4
 80221c8:	003eff06 	br	8021dc8 <__alt_data_end+0xfffe29c8>
 80221cc:	2023883a 	mov	r17,r4
 80221d0:	003ee406 	br	8021d64 <__alt_data_end+0xfffe2964>
 80221d4:	a8bfe236 	bltu	r21,r2,8022160 <__alt_data_end+0xfffe2d60>
 80221d8:	0009883a 	mov	r4,zero
 80221dc:	003f2706 	br	8021e7c <__alt_data_end+0xfffe2a7c>
 80221e0:	81002d36 	bltu	r16,r4,8022298 <__divdf3+0x8f4>
 80221e4:	24005626 	beq	r4,r16,8022340 <__divdf3+0x99c>
 80221e8:	2829883a 	mov	r20,r5
 80221ec:	003f8006 	br	8021ff0 <__alt_data_end+0xfffe2bf0>
 80221f0:	053fffc4 	movi	r20,-1
 80221f4:	003f7f06 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 80221f8:	200f883a 	mov	r7,r4
 80221fc:	003f3c06 	br	8021ef0 <__alt_data_end+0xfffe2af0>
 8022200:	1011883a 	mov	r8,r2
 8022204:	003f5506 	br	8021f5c <__alt_data_end+0xfffe2b5c>
 8022208:	e027883a 	mov	r19,fp
 802220c:	003f7906 	br	8021ff4 <__alt_data_end+0xfffe2bf4>
 8022210:	010007c4 	movi	r4,31
 8022214:	20c02816 	blt	r4,r3,80222b8 <__divdf3+0x914>
 8022218:	00800804 	movi	r2,32
 802221c:	10c5c83a 	sub	r2,r2,r3
 8022220:	888a983a 	sll	r5,r17,r2
 8022224:	a0c8d83a 	srl	r4,r20,r3
 8022228:	a084983a 	sll	r2,r20,r2
 802222c:	88e2d83a 	srl	r17,r17,r3
 8022230:	2906b03a 	or	r3,r5,r4
 8022234:	1004c03a 	cmpne	r2,r2,zero
 8022238:	1886b03a 	or	r3,r3,r2
 802223c:	188001cc 	andi	r2,r3,7
 8022240:	10000726 	beq	r2,zero,8022260 <__divdf3+0x8bc>
 8022244:	188003cc 	andi	r2,r3,15
 8022248:	01000104 	movi	r4,4
 802224c:	11000426 	beq	r2,r4,8022260 <__divdf3+0x8bc>
 8022250:	1805883a 	mov	r2,r3
 8022254:	10c00104 	addi	r3,r2,4
 8022258:	1885803a 	cmpltu	r2,r3,r2
 802225c:	88a3883a 	add	r17,r17,r2
 8022260:	8880202c 	andhi	r2,r17,128
 8022264:	10002926 	beq	r2,zero,802230c <__divdf3+0x968>
 8022268:	9900004c 	andi	r4,r19,1
 802226c:	00800044 	movi	r2,1
 8022270:	0021883a 	mov	r16,zero
 8022274:	002b883a 	mov	r21,zero
 8022278:	003e2906 	br	8021b20 <__alt_data_end+0xfffe2720>
 802227c:	d9800017 	ldw	r6,0(sp)
 8022280:	8c7fff84 	addi	r17,r17,-2
 8022284:	a9ab883a 	add	r21,r21,r6
 8022288:	a98b803a 	cmpltu	r5,r21,r6
 802228c:	2d8b883a 	add	r5,r5,r22
 8022290:	2a11883a 	add	r8,r5,r8
 8022294:	003ef806 	br	8021e78 <__alt_data_end+0xfffe2a78>
 8022298:	d9800017 	ldw	r6,0(sp)
 802229c:	318f883a 	add	r7,r6,r6
 80222a0:	398b803a 	cmpltu	r5,r7,r6
 80222a4:	2d8d883a 	add	r6,r5,r22
 80222a8:	81a1883a 	add	r16,r16,r6
 80222ac:	a17fff84 	addi	r5,r20,-2
 80222b0:	d9c00015 	stw	r7,0(sp)
 80222b4:	003f8806 	br	80220d8 <__alt_data_end+0xfffe2cd8>
 80222b8:	013ff844 	movi	r4,-31
 80222bc:	2085c83a 	sub	r2,r4,r2
 80222c0:	8888d83a 	srl	r4,r17,r2
 80222c4:	00800804 	movi	r2,32
 80222c8:	18802126 	beq	r3,r2,8022350 <__divdf3+0x9ac>
 80222cc:	04001004 	movi	r16,64
 80222d0:	80c7c83a 	sub	r3,r16,r3
 80222d4:	88e0983a 	sll	r16,r17,r3
 80222d8:	8504b03a 	or	r2,r16,r20
 80222dc:	1004c03a 	cmpne	r2,r2,zero
 80222e0:	2084b03a 	or	r2,r4,r2
 80222e4:	144001cc 	andi	r17,r2,7
 80222e8:	88000d1e 	bne	r17,zero,8022320 <__divdf3+0x97c>
 80222ec:	0021883a 	mov	r16,zero
 80222f0:	102ad0fa 	srli	r21,r2,3
 80222f4:	9900004c 	andi	r4,r19,1
 80222f8:	0005883a 	mov	r2,zero
 80222fc:	ac6ab03a 	or	r21,r21,r17
 8022300:	003e0706 	br	8021b20 <__alt_data_end+0xfffe2720>
 8022304:	1007883a 	mov	r3,r2
 8022308:	0023883a 	mov	r17,zero
 802230c:	8820927a 	slli	r16,r17,9
 8022310:	1805883a 	mov	r2,r3
 8022314:	8822977a 	slli	r17,r17,29
 8022318:	8020d33a 	srli	r16,r16,12
 802231c:	003ff406 	br	80222f0 <__alt_data_end+0xfffe2ef0>
 8022320:	10c003cc 	andi	r3,r2,15
 8022324:	01000104 	movi	r4,4
 8022328:	193ff626 	beq	r3,r4,8022304 <__alt_data_end+0xfffe2f04>
 802232c:	0023883a 	mov	r17,zero
 8022330:	003fc806 	br	8022254 <__alt_data_end+0xfffe2e54>
 8022334:	a8bfd136 	bltu	r21,r2,802227c <__alt_data_end+0xfffe2e7c>
 8022338:	2823883a 	mov	r17,r5
 802233c:	003fa606 	br	80221d8 <__alt_data_end+0xfffe2dd8>
 8022340:	d9800017 	ldw	r6,0(sp)
 8022344:	30bfd436 	bltu	r6,r2,8022298 <__alt_data_end+0xfffe2e98>
 8022348:	2829883a 	mov	r20,r5
 802234c:	003f6406 	br	80220e0 <__alt_data_end+0xfffe2ce0>
 8022350:	0021883a 	mov	r16,zero
 8022354:	003fe006 	br	80222d8 <__alt_data_end+0xfffe2ed8>
 8022358:	00800434 	movhi	r2,16
 802235c:	8c000234 	orhi	r16,r17,8
 8022360:	10bfffc4 	addi	r2,r2,-1
 8022364:	e009883a 	mov	r4,fp
 8022368:	80a0703a 	and	r16,r16,r2
 802236c:	a02b883a 	mov	r21,r20
 8022370:	003e4e06 	br	8021cac <__alt_data_end+0xfffe28ac>

08022374 <__gedf2>:
 8022374:	2804d53a 	srli	r2,r5,20
 8022378:	3806d53a 	srli	r3,r7,20
 802237c:	02000434 	movhi	r8,16
 8022380:	423fffc4 	addi	r8,r8,-1
 8022384:	1081ffcc 	andi	r2,r2,2047
 8022388:	0241ffc4 	movi	r9,2047
 802238c:	2a14703a 	and	r10,r5,r8
 8022390:	18c1ffcc 	andi	r3,r3,2047
 8022394:	3a10703a 	and	r8,r7,r8
 8022398:	280ad7fa 	srli	r5,r5,31
 802239c:	380ed7fa 	srli	r7,r7,31
 80223a0:	12401d26 	beq	r2,r9,8022418 <__gedf2+0xa4>
 80223a4:	0241ffc4 	movi	r9,2047
 80223a8:	1a401226 	beq	r3,r9,80223f4 <__gedf2+0x80>
 80223ac:	1000081e 	bne	r2,zero,80223d0 <__gedf2+0x5c>
 80223b0:	2296b03a 	or	r11,r4,r10
 80223b4:	5813003a 	cmpeq	r9,r11,zero
 80223b8:	1800091e 	bne	r3,zero,80223e0 <__gedf2+0x6c>
 80223bc:	3218b03a 	or	r12,r6,r8
 80223c0:	6000071e 	bne	r12,zero,80223e0 <__gedf2+0x6c>
 80223c4:	0005883a 	mov	r2,zero
 80223c8:	5800101e 	bne	r11,zero,802240c <__gedf2+0x98>
 80223cc:	f800283a 	ret
 80223d0:	18000c1e 	bne	r3,zero,8022404 <__gedf2+0x90>
 80223d4:	3212b03a 	or	r9,r6,r8
 80223d8:	48000c26 	beq	r9,zero,802240c <__gedf2+0x98>
 80223dc:	0013883a 	mov	r9,zero
 80223e0:	39c03fcc 	andi	r7,r7,255
 80223e4:	48000826 	beq	r9,zero,8022408 <__gedf2+0x94>
 80223e8:	38000926 	beq	r7,zero,8022410 <__gedf2+0x9c>
 80223ec:	00800044 	movi	r2,1
 80223f0:	f800283a 	ret
 80223f4:	3212b03a 	or	r9,r6,r8
 80223f8:	483fec26 	beq	r9,zero,80223ac <__alt_data_end+0xfffe2fac>
 80223fc:	00bfff84 	movi	r2,-2
 8022400:	f800283a 	ret
 8022404:	39c03fcc 	andi	r7,r7,255
 8022408:	29c00626 	beq	r5,r7,8022424 <__gedf2+0xb0>
 802240c:	283ff726 	beq	r5,zero,80223ec <__alt_data_end+0xfffe2fec>
 8022410:	00bfffc4 	movi	r2,-1
 8022414:	f800283a 	ret
 8022418:	2292b03a 	or	r9,r4,r10
 802241c:	483fe126 	beq	r9,zero,80223a4 <__alt_data_end+0xfffe2fa4>
 8022420:	003ff606 	br	80223fc <__alt_data_end+0xfffe2ffc>
 8022424:	18bff916 	blt	r3,r2,802240c <__alt_data_end+0xfffe300c>
 8022428:	10c00316 	blt	r2,r3,8022438 <__gedf2+0xc4>
 802242c:	42bff736 	bltu	r8,r10,802240c <__alt_data_end+0xfffe300c>
 8022430:	52000326 	beq	r10,r8,8022440 <__gedf2+0xcc>
 8022434:	5200042e 	bgeu	r10,r8,8022448 <__gedf2+0xd4>
 8022438:	283fec1e 	bne	r5,zero,80223ec <__alt_data_end+0xfffe2fec>
 802243c:	003ff406 	br	8022410 <__alt_data_end+0xfffe3010>
 8022440:	313ff236 	bltu	r6,r4,802240c <__alt_data_end+0xfffe300c>
 8022444:	21bffc36 	bltu	r4,r6,8022438 <__alt_data_end+0xfffe3038>
 8022448:	0005883a 	mov	r2,zero
 802244c:	f800283a 	ret

08022450 <__ledf2>:
 8022450:	2804d53a 	srli	r2,r5,20
 8022454:	3810d53a 	srli	r8,r7,20
 8022458:	00c00434 	movhi	r3,16
 802245c:	18ffffc4 	addi	r3,r3,-1
 8022460:	1081ffcc 	andi	r2,r2,2047
 8022464:	0241ffc4 	movi	r9,2047
 8022468:	28d4703a 	and	r10,r5,r3
 802246c:	4201ffcc 	andi	r8,r8,2047
 8022470:	38c6703a 	and	r3,r7,r3
 8022474:	280ad7fa 	srli	r5,r5,31
 8022478:	380ed7fa 	srli	r7,r7,31
 802247c:	12401f26 	beq	r2,r9,80224fc <__ledf2+0xac>
 8022480:	0241ffc4 	movi	r9,2047
 8022484:	42401426 	beq	r8,r9,80224d8 <__ledf2+0x88>
 8022488:	1000091e 	bne	r2,zero,80224b0 <__ledf2+0x60>
 802248c:	2296b03a 	or	r11,r4,r10
 8022490:	5813003a 	cmpeq	r9,r11,zero
 8022494:	29403fcc 	andi	r5,r5,255
 8022498:	40000a1e 	bne	r8,zero,80224c4 <__ledf2+0x74>
 802249c:	30d8b03a 	or	r12,r6,r3
 80224a0:	6000081e 	bne	r12,zero,80224c4 <__ledf2+0x74>
 80224a4:	0005883a 	mov	r2,zero
 80224a8:	5800111e 	bne	r11,zero,80224f0 <__ledf2+0xa0>
 80224ac:	f800283a 	ret
 80224b0:	29403fcc 	andi	r5,r5,255
 80224b4:	40000c1e 	bne	r8,zero,80224e8 <__ledf2+0x98>
 80224b8:	30d2b03a 	or	r9,r6,r3
 80224bc:	48000c26 	beq	r9,zero,80224f0 <__ledf2+0xa0>
 80224c0:	0013883a 	mov	r9,zero
 80224c4:	39c03fcc 	andi	r7,r7,255
 80224c8:	48000826 	beq	r9,zero,80224ec <__ledf2+0x9c>
 80224cc:	38001126 	beq	r7,zero,8022514 <__ledf2+0xc4>
 80224d0:	00800044 	movi	r2,1
 80224d4:	f800283a 	ret
 80224d8:	30d2b03a 	or	r9,r6,r3
 80224dc:	483fea26 	beq	r9,zero,8022488 <__alt_data_end+0xfffe3088>
 80224e0:	00800084 	movi	r2,2
 80224e4:	f800283a 	ret
 80224e8:	39c03fcc 	andi	r7,r7,255
 80224ec:	39400726 	beq	r7,r5,802250c <__ledf2+0xbc>
 80224f0:	2800081e 	bne	r5,zero,8022514 <__ledf2+0xc4>
 80224f4:	00800044 	movi	r2,1
 80224f8:	f800283a 	ret
 80224fc:	2292b03a 	or	r9,r4,r10
 8022500:	483fdf26 	beq	r9,zero,8022480 <__alt_data_end+0xfffe3080>
 8022504:	00800084 	movi	r2,2
 8022508:	f800283a 	ret
 802250c:	4080030e 	bge	r8,r2,802251c <__ledf2+0xcc>
 8022510:	383fef26 	beq	r7,zero,80224d0 <__alt_data_end+0xfffe30d0>
 8022514:	00bfffc4 	movi	r2,-1
 8022518:	f800283a 	ret
 802251c:	123feb16 	blt	r2,r8,80224cc <__alt_data_end+0xfffe30cc>
 8022520:	1abff336 	bltu	r3,r10,80224f0 <__alt_data_end+0xfffe30f0>
 8022524:	50c00326 	beq	r10,r3,8022534 <__ledf2+0xe4>
 8022528:	50c0042e 	bgeu	r10,r3,802253c <__ledf2+0xec>
 802252c:	283fe81e 	bne	r5,zero,80224d0 <__alt_data_end+0xfffe30d0>
 8022530:	003ff806 	br	8022514 <__alt_data_end+0xfffe3114>
 8022534:	313fee36 	bltu	r6,r4,80224f0 <__alt_data_end+0xfffe30f0>
 8022538:	21bffc36 	bltu	r4,r6,802252c <__alt_data_end+0xfffe312c>
 802253c:	0005883a 	mov	r2,zero
 8022540:	f800283a 	ret

08022544 <__muldf3>:
 8022544:	deffee04 	addi	sp,sp,-72
 8022548:	dd000c15 	stw	r20,48(sp)
 802254c:	2828d53a 	srli	r20,r5,20
 8022550:	ddc00f15 	stw	r23,60(sp)
 8022554:	282ed7fa 	srli	r23,r5,31
 8022558:	dc000815 	stw	r16,32(sp)
 802255c:	04000434 	movhi	r16,16
 8022560:	dcc00b15 	stw	r19,44(sp)
 8022564:	843fffc4 	addi	r16,r16,-1
 8022568:	dfc01115 	stw	ra,68(sp)
 802256c:	df001015 	stw	fp,64(sp)
 8022570:	dd800e15 	stw	r22,56(sp)
 8022574:	dd400d15 	stw	r21,52(sp)
 8022578:	dc800a15 	stw	r18,40(sp)
 802257c:	dc400915 	stw	r17,36(sp)
 8022580:	a501ffcc 	andi	r20,r20,2047
 8022584:	2c20703a 	and	r16,r5,r16
 8022588:	b827883a 	mov	r19,r23
 802258c:	ba403fcc 	andi	r9,r23,255
 8022590:	a0006026 	beq	r20,zero,8022714 <__muldf3+0x1d0>
 8022594:	0081ffc4 	movi	r2,2047
 8022598:	202d883a 	mov	r22,r4
 802259c:	a0803626 	beq	r20,r2,8022678 <__muldf3+0x134>
 80225a0:	84000434 	orhi	r16,r16,16
 80225a4:	200ad77a 	srli	r5,r4,29
 80225a8:	800490fa 	slli	r2,r16,3
 80225ac:	202c90fa 	slli	r22,r4,3
 80225b0:	a53f0044 	addi	r20,r20,-1023
 80225b4:	28a0b03a 	or	r16,r5,r2
 80225b8:	002b883a 	mov	r21,zero
 80225bc:	000b883a 	mov	r5,zero
 80225c0:	3804d53a 	srli	r2,r7,20
 80225c4:	3838d7fa 	srli	fp,r7,31
 80225c8:	04400434 	movhi	r17,16
 80225cc:	8c7fffc4 	addi	r17,r17,-1
 80225d0:	1081ffcc 	andi	r2,r2,2047
 80225d4:	3025883a 	mov	r18,r6
 80225d8:	3c62703a 	and	r17,r7,r17
 80225dc:	e2803fcc 	andi	r10,fp,255
 80225e0:	10006d26 	beq	r2,zero,8022798 <__muldf3+0x254>
 80225e4:	00c1ffc4 	movi	r3,2047
 80225e8:	10c06526 	beq	r2,r3,8022780 <__muldf3+0x23c>
 80225ec:	8c400434 	orhi	r17,r17,16
 80225f0:	300ed77a 	srli	r7,r6,29
 80225f4:	880690fa 	slli	r3,r17,3
 80225f8:	302490fa 	slli	r18,r6,3
 80225fc:	10bf0044 	addi	r2,r2,-1023
 8022600:	38e2b03a 	or	r17,r7,r3
 8022604:	000f883a 	mov	r7,zero
 8022608:	a087883a 	add	r3,r20,r2
 802260c:	010003c4 	movi	r4,15
 8022610:	3d44b03a 	or	r2,r7,r21
 8022614:	e5ccf03a 	xor	r6,fp,r23
 8022618:	1a000044 	addi	r8,r3,1
 802261c:	20809b36 	bltu	r4,r2,802288c <__muldf3+0x348>
 8022620:	100490ba 	slli	r2,r2,2
 8022624:	010200b4 	movhi	r4,2050
 8022628:	21098e04 	addi	r4,r4,9784
 802262c:	1105883a 	add	r2,r2,r4
 8022630:	10800017 	ldw	r2,0(r2)
 8022634:	1000683a 	jmp	r2
 8022638:	0802288c 	andi	zero,at,2210
 802263c:	08022698 	cmpnei	zero,at,2202
 8022640:	08022698 	cmpnei	zero,at,2202
 8022644:	08022694 	ori	zero,at,2202
 8022648:	08022868 	cmpgeui	zero,at,2209
 802264c:	08022868 	cmpgeui	zero,at,2209
 8022650:	08022850 	cmplti	zero,at,2209
 8022654:	08022694 	ori	zero,at,2202
 8022658:	08022868 	cmpgeui	zero,at,2209
 802265c:	08022850 	cmplti	zero,at,2209
 8022660:	08022868 	cmpgeui	zero,at,2209
 8022664:	08022694 	ori	zero,at,2202
 8022668:	08022878 	rdprs	zero,at,2209
 802266c:	08022878 	rdprs	zero,at,2209
 8022670:	08022878 	rdprs	zero,at,2209
 8022674:	08022bd8 	cmpnei	zero,at,2223
 8022678:	2404b03a 	or	r2,r4,r16
 802267c:	1000711e 	bne	r2,zero,8022844 <__muldf3+0x300>
 8022680:	05400204 	movi	r21,8
 8022684:	0021883a 	mov	r16,zero
 8022688:	002d883a 	mov	r22,zero
 802268c:	01400084 	movi	r5,2
 8022690:	003fcb06 	br	80225c0 <__alt_data_end+0xfffe31c0>
 8022694:	500d883a 	mov	r6,r10
 8022698:	00800084 	movi	r2,2
 802269c:	38805926 	beq	r7,r2,8022804 <__muldf3+0x2c0>
 80226a0:	008000c4 	movi	r2,3
 80226a4:	3881bb26 	beq	r7,r2,8022d94 <__muldf3+0x850>
 80226a8:	00800044 	movi	r2,1
 80226ac:	3881961e 	bne	r7,r2,8022d08 <__muldf3+0x7c4>
 80226b0:	3027883a 	mov	r19,r6
 80226b4:	0005883a 	mov	r2,zero
 80226b8:	0021883a 	mov	r16,zero
 80226bc:	002d883a 	mov	r22,zero
 80226c0:	1004953a 	slli	r2,r2,20
 80226c4:	98c03fcc 	andi	r3,r19,255
 80226c8:	04400434 	movhi	r17,16
 80226cc:	8c7fffc4 	addi	r17,r17,-1
 80226d0:	180697fa 	slli	r3,r3,31
 80226d4:	8460703a 	and	r16,r16,r17
 80226d8:	80a0b03a 	or	r16,r16,r2
 80226dc:	80c6b03a 	or	r3,r16,r3
 80226e0:	b005883a 	mov	r2,r22
 80226e4:	dfc01117 	ldw	ra,68(sp)
 80226e8:	df001017 	ldw	fp,64(sp)
 80226ec:	ddc00f17 	ldw	r23,60(sp)
 80226f0:	dd800e17 	ldw	r22,56(sp)
 80226f4:	dd400d17 	ldw	r21,52(sp)
 80226f8:	dd000c17 	ldw	r20,48(sp)
 80226fc:	dcc00b17 	ldw	r19,44(sp)
 8022700:	dc800a17 	ldw	r18,40(sp)
 8022704:	dc400917 	ldw	r17,36(sp)
 8022708:	dc000817 	ldw	r16,32(sp)
 802270c:	dec01204 	addi	sp,sp,72
 8022710:	f800283a 	ret
 8022714:	2404b03a 	or	r2,r4,r16
 8022718:	202b883a 	mov	r21,r4
 802271c:	10004426 	beq	r2,zero,8022830 <__muldf3+0x2ec>
 8022720:	80015126 	beq	r16,zero,8022c68 <__muldf3+0x724>
 8022724:	8009883a 	mov	r4,r16
 8022728:	d9800715 	stw	r6,28(sp)
 802272c:	d9c00215 	stw	r7,8(sp)
 8022730:	da400415 	stw	r9,16(sp)
 8022734:	80230680 	call	8023068 <__clzsi2>
 8022738:	d9800717 	ldw	r6,28(sp)
 802273c:	d9c00217 	ldw	r7,8(sp)
 8022740:	da400417 	ldw	r9,16(sp)
 8022744:	113ffd44 	addi	r4,r2,-11
 8022748:	00c00704 	movi	r3,28
 802274c:	19014216 	blt	r3,r4,8022c58 <__muldf3+0x714>
 8022750:	00c00744 	movi	r3,29
 8022754:	15bffe04 	addi	r22,r2,-8
 8022758:	1907c83a 	sub	r3,r3,r4
 802275c:	85a0983a 	sll	r16,r16,r22
 8022760:	a8c6d83a 	srl	r3,r21,r3
 8022764:	adac983a 	sll	r22,r21,r22
 8022768:	1c20b03a 	or	r16,r3,r16
 802276c:	1080fcc4 	addi	r2,r2,1011
 8022770:	00a9c83a 	sub	r20,zero,r2
 8022774:	002b883a 	mov	r21,zero
 8022778:	000b883a 	mov	r5,zero
 802277c:	003f9006 	br	80225c0 <__alt_data_end+0xfffe31c0>
 8022780:	3446b03a 	or	r3,r6,r17
 8022784:	1800281e 	bne	r3,zero,8022828 <__muldf3+0x2e4>
 8022788:	0023883a 	mov	r17,zero
 802278c:	0025883a 	mov	r18,zero
 8022790:	01c00084 	movi	r7,2
 8022794:	003f9c06 	br	8022608 <__alt_data_end+0xfffe3208>
 8022798:	3446b03a 	or	r3,r6,r17
 802279c:	18001e26 	beq	r3,zero,8022818 <__muldf3+0x2d4>
 80227a0:	88012126 	beq	r17,zero,8022c28 <__muldf3+0x6e4>
 80227a4:	8809883a 	mov	r4,r17
 80227a8:	d9400215 	stw	r5,8(sp)
 80227ac:	d9800715 	stw	r6,28(sp)
 80227b0:	da400415 	stw	r9,16(sp)
 80227b4:	da800315 	stw	r10,12(sp)
 80227b8:	80230680 	call	8023068 <__clzsi2>
 80227bc:	d9400217 	ldw	r5,8(sp)
 80227c0:	d9800717 	ldw	r6,28(sp)
 80227c4:	da400417 	ldw	r9,16(sp)
 80227c8:	da800317 	ldw	r10,12(sp)
 80227cc:	113ffd44 	addi	r4,r2,-11
 80227d0:	00c00704 	movi	r3,28
 80227d4:	19011016 	blt	r3,r4,8022c18 <__muldf3+0x6d4>
 80227d8:	00c00744 	movi	r3,29
 80227dc:	14bffe04 	addi	r18,r2,-8
 80227e0:	1907c83a 	sub	r3,r3,r4
 80227e4:	8ca2983a 	sll	r17,r17,r18
 80227e8:	30c6d83a 	srl	r3,r6,r3
 80227ec:	34a4983a 	sll	r18,r6,r18
 80227f0:	1c62b03a 	or	r17,r3,r17
 80227f4:	1080fcc4 	addi	r2,r2,1011
 80227f8:	0085c83a 	sub	r2,zero,r2
 80227fc:	000f883a 	mov	r7,zero
 8022800:	003f8106 	br	8022608 <__alt_data_end+0xfffe3208>
 8022804:	3027883a 	mov	r19,r6
 8022808:	0081ffc4 	movi	r2,2047
 802280c:	0021883a 	mov	r16,zero
 8022810:	002d883a 	mov	r22,zero
 8022814:	003faa06 	br	80226c0 <__alt_data_end+0xfffe32c0>
 8022818:	0023883a 	mov	r17,zero
 802281c:	0025883a 	mov	r18,zero
 8022820:	01c00044 	movi	r7,1
 8022824:	003f7806 	br	8022608 <__alt_data_end+0xfffe3208>
 8022828:	01c000c4 	movi	r7,3
 802282c:	003f7606 	br	8022608 <__alt_data_end+0xfffe3208>
 8022830:	05400104 	movi	r21,4
 8022834:	0021883a 	mov	r16,zero
 8022838:	002d883a 	mov	r22,zero
 802283c:	01400044 	movi	r5,1
 8022840:	003f5f06 	br	80225c0 <__alt_data_end+0xfffe31c0>
 8022844:	05400304 	movi	r21,12
 8022848:	014000c4 	movi	r5,3
 802284c:	003f5c06 	br	80225c0 <__alt_data_end+0xfffe31c0>
 8022850:	04000434 	movhi	r16,16
 8022854:	0027883a 	mov	r19,zero
 8022858:	843fffc4 	addi	r16,r16,-1
 802285c:	05bfffc4 	movi	r22,-1
 8022860:	0081ffc4 	movi	r2,2047
 8022864:	003f9606 	br	80226c0 <__alt_data_end+0xfffe32c0>
 8022868:	8023883a 	mov	r17,r16
 802286c:	b025883a 	mov	r18,r22
 8022870:	280f883a 	mov	r7,r5
 8022874:	003f8806 	br	8022698 <__alt_data_end+0xfffe3298>
 8022878:	8023883a 	mov	r17,r16
 802287c:	b025883a 	mov	r18,r22
 8022880:	480d883a 	mov	r6,r9
 8022884:	280f883a 	mov	r7,r5
 8022888:	003f8306 	br	8022698 <__alt_data_end+0xfffe3298>
 802288c:	b026d43a 	srli	r19,r22,16
 8022890:	902ed43a 	srli	r23,r18,16
 8022894:	b5bfffcc 	andi	r22,r22,65535
 8022898:	94bfffcc 	andi	r18,r18,65535
 802289c:	b00b883a 	mov	r5,r22
 80228a0:	9009883a 	mov	r4,r18
 80228a4:	d8c00515 	stw	r3,20(sp)
 80228a8:	d9800715 	stw	r6,28(sp)
 80228ac:	da000615 	stw	r8,24(sp)
 80228b0:	80212ac0 	call	80212ac <__mulsi3>
 80228b4:	980b883a 	mov	r5,r19
 80228b8:	9009883a 	mov	r4,r18
 80228bc:	1029883a 	mov	r20,r2
 80228c0:	80212ac0 	call	80212ac <__mulsi3>
 80228c4:	b80b883a 	mov	r5,r23
 80228c8:	9809883a 	mov	r4,r19
 80228cc:	102b883a 	mov	r21,r2
 80228d0:	80212ac0 	call	80212ac <__mulsi3>
 80228d4:	b809883a 	mov	r4,r23
 80228d8:	b00b883a 	mov	r5,r22
 80228dc:	1039883a 	mov	fp,r2
 80228e0:	80212ac0 	call	80212ac <__mulsi3>
 80228e4:	a008d43a 	srli	r4,r20,16
 80228e8:	1545883a 	add	r2,r2,r21
 80228ec:	d8c00517 	ldw	r3,20(sp)
 80228f0:	2085883a 	add	r2,r4,r2
 80228f4:	d9800717 	ldw	r6,28(sp)
 80228f8:	da000617 	ldw	r8,24(sp)
 80228fc:	1540022e 	bgeu	r2,r21,8022908 <__muldf3+0x3c4>
 8022900:	01000074 	movhi	r4,1
 8022904:	e139883a 	add	fp,fp,r4
 8022908:	100e943a 	slli	r7,r2,16
 802290c:	1004d43a 	srli	r2,r2,16
 8022910:	882ad43a 	srli	r21,r17,16
 8022914:	a53fffcc 	andi	r20,r20,65535
 8022918:	8c7fffcc 	andi	r17,r17,65535
 802291c:	3d29883a 	add	r20,r7,r20
 8022920:	b00b883a 	mov	r5,r22
 8022924:	8809883a 	mov	r4,r17
 8022928:	d8c00515 	stw	r3,20(sp)
 802292c:	d9800715 	stw	r6,28(sp)
 8022930:	da000615 	stw	r8,24(sp)
 8022934:	dd000115 	stw	r20,4(sp)
 8022938:	d8800015 	stw	r2,0(sp)
 802293c:	80212ac0 	call	80212ac <__mulsi3>
 8022940:	980b883a 	mov	r5,r19
 8022944:	8809883a 	mov	r4,r17
 8022948:	d8800215 	stw	r2,8(sp)
 802294c:	80212ac0 	call	80212ac <__mulsi3>
 8022950:	9809883a 	mov	r4,r19
 8022954:	a80b883a 	mov	r5,r21
 8022958:	1029883a 	mov	r20,r2
 802295c:	80212ac0 	call	80212ac <__mulsi3>
 8022960:	b00b883a 	mov	r5,r22
 8022964:	a809883a 	mov	r4,r21
 8022968:	d8800415 	stw	r2,16(sp)
 802296c:	80212ac0 	call	80212ac <__mulsi3>
 8022970:	d9c00217 	ldw	r7,8(sp)
 8022974:	1505883a 	add	r2,r2,r20
 8022978:	d8c00517 	ldw	r3,20(sp)
 802297c:	3826d43a 	srli	r19,r7,16
 8022980:	d9800717 	ldw	r6,28(sp)
 8022984:	da000617 	ldw	r8,24(sp)
 8022988:	9885883a 	add	r2,r19,r2
 802298c:	da400417 	ldw	r9,16(sp)
 8022990:	1500022e 	bgeu	r2,r20,802299c <__muldf3+0x458>
 8022994:	01000074 	movhi	r4,1
 8022998:	4913883a 	add	r9,r9,r4
 802299c:	1028d43a 	srli	r20,r2,16
 80229a0:	1004943a 	slli	r2,r2,16
 80229a4:	802cd43a 	srli	r22,r16,16
 80229a8:	843fffcc 	andi	r16,r16,65535
 80229ac:	3cffffcc 	andi	r19,r7,65535
 80229b0:	9009883a 	mov	r4,r18
 80229b4:	800b883a 	mov	r5,r16
 80229b8:	a269883a 	add	r20,r20,r9
 80229bc:	d8c00515 	stw	r3,20(sp)
 80229c0:	d9800715 	stw	r6,28(sp)
 80229c4:	da000615 	stw	r8,24(sp)
 80229c8:	14e7883a 	add	r19,r2,r19
 80229cc:	80212ac0 	call	80212ac <__mulsi3>
 80229d0:	9009883a 	mov	r4,r18
 80229d4:	b00b883a 	mov	r5,r22
 80229d8:	d8800315 	stw	r2,12(sp)
 80229dc:	80212ac0 	call	80212ac <__mulsi3>
 80229e0:	b809883a 	mov	r4,r23
 80229e4:	b00b883a 	mov	r5,r22
 80229e8:	d8800215 	stw	r2,8(sp)
 80229ec:	80212ac0 	call	80212ac <__mulsi3>
 80229f0:	b80b883a 	mov	r5,r23
 80229f4:	8009883a 	mov	r4,r16
 80229f8:	d8800415 	stw	r2,16(sp)
 80229fc:	80212ac0 	call	80212ac <__mulsi3>
 8022a00:	da800317 	ldw	r10,12(sp)
 8022a04:	d9c00217 	ldw	r7,8(sp)
 8022a08:	d9000017 	ldw	r4,0(sp)
 8022a0c:	502ed43a 	srli	r23,r10,16
 8022a10:	11c5883a 	add	r2,r2,r7
 8022a14:	24e5883a 	add	r18,r4,r19
 8022a18:	b885883a 	add	r2,r23,r2
 8022a1c:	d8c00517 	ldw	r3,20(sp)
 8022a20:	d9800717 	ldw	r6,28(sp)
 8022a24:	da000617 	ldw	r8,24(sp)
 8022a28:	da400417 	ldw	r9,16(sp)
 8022a2c:	11c0022e 	bgeu	r2,r7,8022a38 <__muldf3+0x4f4>
 8022a30:	01000074 	movhi	r4,1
 8022a34:	4913883a 	add	r9,r9,r4
 8022a38:	100ed43a 	srli	r7,r2,16
 8022a3c:	1004943a 	slli	r2,r2,16
 8022a40:	55ffffcc 	andi	r23,r10,65535
 8022a44:	3a53883a 	add	r9,r7,r9
 8022a48:	8809883a 	mov	r4,r17
 8022a4c:	800b883a 	mov	r5,r16
 8022a50:	d8c00515 	stw	r3,20(sp)
 8022a54:	d9800715 	stw	r6,28(sp)
 8022a58:	da000615 	stw	r8,24(sp)
 8022a5c:	da400415 	stw	r9,16(sp)
 8022a60:	15ef883a 	add	r23,r2,r23
 8022a64:	80212ac0 	call	80212ac <__mulsi3>
 8022a68:	8809883a 	mov	r4,r17
 8022a6c:	b00b883a 	mov	r5,r22
 8022a70:	d8800215 	stw	r2,8(sp)
 8022a74:	80212ac0 	call	80212ac <__mulsi3>
 8022a78:	b00b883a 	mov	r5,r22
 8022a7c:	a809883a 	mov	r4,r21
 8022a80:	d8800315 	stw	r2,12(sp)
 8022a84:	80212ac0 	call	80212ac <__mulsi3>
 8022a88:	8009883a 	mov	r4,r16
 8022a8c:	a80b883a 	mov	r5,r21
 8022a90:	1023883a 	mov	r17,r2
 8022a94:	80212ac0 	call	80212ac <__mulsi3>
 8022a98:	d9c00217 	ldw	r7,8(sp)
 8022a9c:	da800317 	ldw	r10,12(sp)
 8022aa0:	d8c00517 	ldw	r3,20(sp)
 8022aa4:	3808d43a 	srli	r4,r7,16
 8022aa8:	1285883a 	add	r2,r2,r10
 8022aac:	d9800717 	ldw	r6,28(sp)
 8022ab0:	2085883a 	add	r2,r4,r2
 8022ab4:	da000617 	ldw	r8,24(sp)
 8022ab8:	da400417 	ldw	r9,16(sp)
 8022abc:	1280022e 	bgeu	r2,r10,8022ac8 <__muldf3+0x584>
 8022ac0:	01000074 	movhi	r4,1
 8022ac4:	8923883a 	add	r17,r17,r4
 8022ac8:	1008943a 	slli	r4,r2,16
 8022acc:	39ffffcc 	andi	r7,r7,65535
 8022ad0:	e4b9883a 	add	fp,fp,r18
 8022ad4:	21cf883a 	add	r7,r4,r7
 8022ad8:	e4e7803a 	cmpltu	r19,fp,r19
 8022adc:	3d0f883a 	add	r7,r7,r20
 8022ae0:	bf39883a 	add	fp,r23,fp
 8022ae4:	99c9883a 	add	r4,r19,r7
 8022ae8:	e5ef803a 	cmpltu	r23,fp,r23
 8022aec:	490b883a 	add	r5,r9,r4
 8022af0:	1004d43a 	srli	r2,r2,16
 8022af4:	b965883a 	add	r18,r23,r5
 8022af8:	24c9803a 	cmpltu	r4,r4,r19
 8022afc:	3d29803a 	cmpltu	r20,r7,r20
 8022b00:	a128b03a 	or	r20,r20,r4
 8022b04:	95ef803a 	cmpltu	r23,r18,r23
 8022b08:	2a53803a 	cmpltu	r9,r5,r9
 8022b0c:	a0a9883a 	add	r20,r20,r2
 8022b10:	4deeb03a 	or	r23,r9,r23
 8022b14:	a5ef883a 	add	r23,r20,r23
 8022b18:	bc63883a 	add	r17,r23,r17
 8022b1c:	e004927a 	slli	r2,fp,9
 8022b20:	d9000117 	ldw	r4,4(sp)
 8022b24:	882e927a 	slli	r23,r17,9
 8022b28:	9022d5fa 	srli	r17,r18,23
 8022b2c:	e038d5fa 	srli	fp,fp,23
 8022b30:	1104b03a 	or	r2,r2,r4
 8022b34:	9024927a 	slli	r18,r18,9
 8022b38:	1004c03a 	cmpne	r2,r2,zero
 8022b3c:	bc62b03a 	or	r17,r23,r17
 8022b40:	1738b03a 	or	fp,r2,fp
 8022b44:	8880402c 	andhi	r2,r17,256
 8022b48:	e4a4b03a 	or	r18,fp,r18
 8022b4c:	10000726 	beq	r2,zero,8022b6c <__muldf3+0x628>
 8022b50:	9006d07a 	srli	r3,r18,1
 8022b54:	880497fa 	slli	r2,r17,31
 8022b58:	9480004c 	andi	r18,r18,1
 8022b5c:	8822d07a 	srli	r17,r17,1
 8022b60:	1ca4b03a 	or	r18,r3,r18
 8022b64:	14a4b03a 	or	r18,r2,r18
 8022b68:	4007883a 	mov	r3,r8
 8022b6c:	1880ffc4 	addi	r2,r3,1023
 8022b70:	0080460e 	bge	zero,r2,8022c8c <__muldf3+0x748>
 8022b74:	910001cc 	andi	r4,r18,7
 8022b78:	20000726 	beq	r4,zero,8022b98 <__muldf3+0x654>
 8022b7c:	910003cc 	andi	r4,r18,15
 8022b80:	01400104 	movi	r5,4
 8022b84:	21400426 	beq	r4,r5,8022b98 <__muldf3+0x654>
 8022b88:	9149883a 	add	r4,r18,r5
 8022b8c:	24a5803a 	cmpltu	r18,r4,r18
 8022b90:	8ca3883a 	add	r17,r17,r18
 8022b94:	2025883a 	mov	r18,r4
 8022b98:	8900402c 	andhi	r4,r17,256
 8022b9c:	20000426 	beq	r4,zero,8022bb0 <__muldf3+0x66c>
 8022ba0:	18810004 	addi	r2,r3,1024
 8022ba4:	00ffc034 	movhi	r3,65280
 8022ba8:	18ffffc4 	addi	r3,r3,-1
 8022bac:	88e2703a 	and	r17,r17,r3
 8022bb0:	00c1ff84 	movi	r3,2046
 8022bb4:	18bf1316 	blt	r3,r2,8022804 <__alt_data_end+0xfffe3404>
 8022bb8:	882c977a 	slli	r22,r17,29
 8022bbc:	9024d0fa 	srli	r18,r18,3
 8022bc0:	8822927a 	slli	r17,r17,9
 8022bc4:	1081ffcc 	andi	r2,r2,2047
 8022bc8:	b4acb03a 	or	r22,r22,r18
 8022bcc:	8820d33a 	srli	r16,r17,12
 8022bd0:	3027883a 	mov	r19,r6
 8022bd4:	003eba06 	br	80226c0 <__alt_data_end+0xfffe32c0>
 8022bd8:	8080022c 	andhi	r2,r16,8
 8022bdc:	10000926 	beq	r2,zero,8022c04 <__muldf3+0x6c0>
 8022be0:	8880022c 	andhi	r2,r17,8
 8022be4:	1000071e 	bne	r2,zero,8022c04 <__muldf3+0x6c0>
 8022be8:	00800434 	movhi	r2,16
 8022bec:	8c000234 	orhi	r16,r17,8
 8022bf0:	10bfffc4 	addi	r2,r2,-1
 8022bf4:	e027883a 	mov	r19,fp
 8022bf8:	80a0703a 	and	r16,r16,r2
 8022bfc:	902d883a 	mov	r22,r18
 8022c00:	003f1706 	br	8022860 <__alt_data_end+0xfffe3460>
 8022c04:	00800434 	movhi	r2,16
 8022c08:	84000234 	orhi	r16,r16,8
 8022c0c:	10bfffc4 	addi	r2,r2,-1
 8022c10:	80a0703a 	and	r16,r16,r2
 8022c14:	003f1206 	br	8022860 <__alt_data_end+0xfffe3460>
 8022c18:	147ff604 	addi	r17,r2,-40
 8022c1c:	3462983a 	sll	r17,r6,r17
 8022c20:	0025883a 	mov	r18,zero
 8022c24:	003ef306 	br	80227f4 <__alt_data_end+0xfffe33f4>
 8022c28:	3009883a 	mov	r4,r6
 8022c2c:	d9400215 	stw	r5,8(sp)
 8022c30:	d9800715 	stw	r6,28(sp)
 8022c34:	da400415 	stw	r9,16(sp)
 8022c38:	da800315 	stw	r10,12(sp)
 8022c3c:	80230680 	call	8023068 <__clzsi2>
 8022c40:	10800804 	addi	r2,r2,32
 8022c44:	da800317 	ldw	r10,12(sp)
 8022c48:	da400417 	ldw	r9,16(sp)
 8022c4c:	d9800717 	ldw	r6,28(sp)
 8022c50:	d9400217 	ldw	r5,8(sp)
 8022c54:	003edd06 	br	80227cc <__alt_data_end+0xfffe33cc>
 8022c58:	143ff604 	addi	r16,r2,-40
 8022c5c:	ac20983a 	sll	r16,r21,r16
 8022c60:	002d883a 	mov	r22,zero
 8022c64:	003ec106 	br	802276c <__alt_data_end+0xfffe336c>
 8022c68:	d9800715 	stw	r6,28(sp)
 8022c6c:	d9c00215 	stw	r7,8(sp)
 8022c70:	da400415 	stw	r9,16(sp)
 8022c74:	80230680 	call	8023068 <__clzsi2>
 8022c78:	10800804 	addi	r2,r2,32
 8022c7c:	da400417 	ldw	r9,16(sp)
 8022c80:	d9c00217 	ldw	r7,8(sp)
 8022c84:	d9800717 	ldw	r6,28(sp)
 8022c88:	003eae06 	br	8022744 <__alt_data_end+0xfffe3344>
 8022c8c:	00c00044 	movi	r3,1
 8022c90:	1887c83a 	sub	r3,r3,r2
 8022c94:	01000e04 	movi	r4,56
 8022c98:	20fe8516 	blt	r4,r3,80226b0 <__alt_data_end+0xfffe32b0>
 8022c9c:	010007c4 	movi	r4,31
 8022ca0:	20c01b16 	blt	r4,r3,8022d10 <__muldf3+0x7cc>
 8022ca4:	00800804 	movi	r2,32
 8022ca8:	10c5c83a 	sub	r2,r2,r3
 8022cac:	888a983a 	sll	r5,r17,r2
 8022cb0:	90c8d83a 	srl	r4,r18,r3
 8022cb4:	9084983a 	sll	r2,r18,r2
 8022cb8:	88e2d83a 	srl	r17,r17,r3
 8022cbc:	2906b03a 	or	r3,r5,r4
 8022cc0:	1004c03a 	cmpne	r2,r2,zero
 8022cc4:	1886b03a 	or	r3,r3,r2
 8022cc8:	188001cc 	andi	r2,r3,7
 8022ccc:	10000726 	beq	r2,zero,8022cec <__muldf3+0x7a8>
 8022cd0:	188003cc 	andi	r2,r3,15
 8022cd4:	01000104 	movi	r4,4
 8022cd8:	11000426 	beq	r2,r4,8022cec <__muldf3+0x7a8>
 8022cdc:	1805883a 	mov	r2,r3
 8022ce0:	10c00104 	addi	r3,r2,4
 8022ce4:	1885803a 	cmpltu	r2,r3,r2
 8022ce8:	88a3883a 	add	r17,r17,r2
 8022cec:	8880202c 	andhi	r2,r17,128
 8022cf0:	10001c26 	beq	r2,zero,8022d64 <__muldf3+0x820>
 8022cf4:	3027883a 	mov	r19,r6
 8022cf8:	00800044 	movi	r2,1
 8022cfc:	0021883a 	mov	r16,zero
 8022d00:	002d883a 	mov	r22,zero
 8022d04:	003e6e06 	br	80226c0 <__alt_data_end+0xfffe32c0>
 8022d08:	4007883a 	mov	r3,r8
 8022d0c:	003f9706 	br	8022b6c <__alt_data_end+0xfffe376c>
 8022d10:	017ff844 	movi	r5,-31
 8022d14:	2885c83a 	sub	r2,r5,r2
 8022d18:	888ad83a 	srl	r5,r17,r2
 8022d1c:	00800804 	movi	r2,32
 8022d20:	18801a26 	beq	r3,r2,8022d8c <__muldf3+0x848>
 8022d24:	01001004 	movi	r4,64
 8022d28:	20c7c83a 	sub	r3,r4,r3
 8022d2c:	88e2983a 	sll	r17,r17,r3
 8022d30:	8ca4b03a 	or	r18,r17,r18
 8022d34:	9004c03a 	cmpne	r2,r18,zero
 8022d38:	2884b03a 	or	r2,r5,r2
 8022d3c:	144001cc 	andi	r17,r2,7
 8022d40:	88000d1e 	bne	r17,zero,8022d78 <__muldf3+0x834>
 8022d44:	0021883a 	mov	r16,zero
 8022d48:	102cd0fa 	srli	r22,r2,3
 8022d4c:	3027883a 	mov	r19,r6
 8022d50:	0005883a 	mov	r2,zero
 8022d54:	b46cb03a 	or	r22,r22,r17
 8022d58:	003e5906 	br	80226c0 <__alt_data_end+0xfffe32c0>
 8022d5c:	1007883a 	mov	r3,r2
 8022d60:	0023883a 	mov	r17,zero
 8022d64:	8820927a 	slli	r16,r17,9
 8022d68:	1805883a 	mov	r2,r3
 8022d6c:	8822977a 	slli	r17,r17,29
 8022d70:	8020d33a 	srli	r16,r16,12
 8022d74:	003ff406 	br	8022d48 <__alt_data_end+0xfffe3948>
 8022d78:	10c003cc 	andi	r3,r2,15
 8022d7c:	01000104 	movi	r4,4
 8022d80:	193ff626 	beq	r3,r4,8022d5c <__alt_data_end+0xfffe395c>
 8022d84:	0023883a 	mov	r17,zero
 8022d88:	003fd506 	br	8022ce0 <__alt_data_end+0xfffe38e0>
 8022d8c:	0023883a 	mov	r17,zero
 8022d90:	003fe706 	br	8022d30 <__alt_data_end+0xfffe3930>
 8022d94:	00800434 	movhi	r2,16
 8022d98:	8c000234 	orhi	r16,r17,8
 8022d9c:	10bfffc4 	addi	r2,r2,-1
 8022da0:	3027883a 	mov	r19,r6
 8022da4:	80a0703a 	and	r16,r16,r2
 8022da8:	902d883a 	mov	r22,r18
 8022dac:	003eac06 	br	8022860 <__alt_data_end+0xfffe3460>

08022db0 <__extendsfdf2>:
 8022db0:	200ad5fa 	srli	r5,r4,23
 8022db4:	defffd04 	addi	sp,sp,-12
 8022db8:	dc400115 	stw	r17,4(sp)
 8022dbc:	29403fcc 	andi	r5,r5,255
 8022dc0:	29800044 	addi	r6,r5,1
 8022dc4:	04402034 	movhi	r17,128
 8022dc8:	dc000015 	stw	r16,0(sp)
 8022dcc:	8c7fffc4 	addi	r17,r17,-1
 8022dd0:	dfc00215 	stw	ra,8(sp)
 8022dd4:	31803fcc 	andi	r6,r6,255
 8022dd8:	00800044 	movi	r2,1
 8022ddc:	8922703a 	and	r17,r17,r4
 8022de0:	2020d7fa 	srli	r16,r4,31
 8022de4:	1180110e 	bge	r2,r6,8022e2c <__extendsfdf2+0x7c>
 8022de8:	880cd0fa 	srli	r6,r17,3
 8022dec:	8822977a 	slli	r17,r17,29
 8022df0:	2940e004 	addi	r5,r5,896
 8022df4:	2941ffcc 	andi	r5,r5,2047
 8022df8:	2804953a 	slli	r2,r5,20
 8022dfc:	01400434 	movhi	r5,16
 8022e00:	800697fa 	slli	r3,r16,31
 8022e04:	297fffc4 	addi	r5,r5,-1
 8022e08:	314a703a 	and	r5,r6,r5
 8022e0c:	288ab03a 	or	r5,r5,r2
 8022e10:	28c6b03a 	or	r3,r5,r3
 8022e14:	8805883a 	mov	r2,r17
 8022e18:	dfc00217 	ldw	ra,8(sp)
 8022e1c:	dc400117 	ldw	r17,4(sp)
 8022e20:	dc000017 	ldw	r16,0(sp)
 8022e24:	dec00304 	addi	sp,sp,12
 8022e28:	f800283a 	ret
 8022e2c:	2800111e 	bne	r5,zero,8022e74 <__extendsfdf2+0xc4>
 8022e30:	88001c26 	beq	r17,zero,8022ea4 <__extendsfdf2+0xf4>
 8022e34:	8809883a 	mov	r4,r17
 8022e38:	80230680 	call	8023068 <__clzsi2>
 8022e3c:	00c00284 	movi	r3,10
 8022e40:	18801b16 	blt	r3,r2,8022eb0 <__extendsfdf2+0x100>
 8022e44:	018002c4 	movi	r6,11
 8022e48:	308dc83a 	sub	r6,r6,r2
 8022e4c:	11000544 	addi	r4,r2,21
 8022e50:	8986d83a 	srl	r3,r17,r6
 8022e54:	8922983a 	sll	r17,r17,r4
 8022e58:	0180e244 	movi	r6,905
 8022e5c:	01400434 	movhi	r5,16
 8022e60:	3085c83a 	sub	r2,r6,r2
 8022e64:	297fffc4 	addi	r5,r5,-1
 8022e68:	194c703a 	and	r6,r3,r5
 8022e6c:	1141ffcc 	andi	r5,r2,2047
 8022e70:	003fe006 	br	8022df4 <__alt_data_end+0xfffe39f4>
 8022e74:	88000826 	beq	r17,zero,8022e98 <__extendsfdf2+0xe8>
 8022e78:	880cd0fa 	srli	r6,r17,3
 8022e7c:	00800434 	movhi	r2,16
 8022e80:	10bfffc4 	addi	r2,r2,-1
 8022e84:	31800234 	orhi	r6,r6,8
 8022e88:	8822977a 	slli	r17,r17,29
 8022e8c:	308c703a 	and	r6,r6,r2
 8022e90:	0141ffc4 	movi	r5,2047
 8022e94:	003fd706 	br	8022df4 <__alt_data_end+0xfffe39f4>
 8022e98:	0141ffc4 	movi	r5,2047
 8022e9c:	000d883a 	mov	r6,zero
 8022ea0:	003fd406 	br	8022df4 <__alt_data_end+0xfffe39f4>
 8022ea4:	000b883a 	mov	r5,zero
 8022ea8:	000d883a 	mov	r6,zero
 8022eac:	003fd106 	br	8022df4 <__alt_data_end+0xfffe39f4>
 8022eb0:	11bffd44 	addi	r6,r2,-11
 8022eb4:	8986983a 	sll	r3,r17,r6
 8022eb8:	0023883a 	mov	r17,zero
 8022ebc:	003fe606 	br	8022e58 <__alt_data_end+0xfffe3a58>

08022ec0 <__truncdfsf2>:
 8022ec0:	2810d53a 	srli	r8,r5,20
 8022ec4:	01c00434 	movhi	r7,16
 8022ec8:	39ffffc4 	addi	r7,r7,-1
 8022ecc:	29ce703a 	and	r7,r5,r7
 8022ed0:	4201ffcc 	andi	r8,r8,2047
 8022ed4:	380e90fa 	slli	r7,r7,3
 8022ed8:	200cd77a 	srli	r6,r4,29
 8022edc:	42400044 	addi	r9,r8,1
 8022ee0:	4a41ffcc 	andi	r9,r9,2047
 8022ee4:	00c00044 	movi	r3,1
 8022ee8:	280ad7fa 	srli	r5,r5,31
 8022eec:	31ceb03a 	or	r7,r6,r7
 8022ef0:	200490fa 	slli	r2,r4,3
 8022ef4:	1a40230e 	bge	r3,r9,8022f84 <__truncdfsf2+0xc4>
 8022ef8:	40ff2004 	addi	r3,r8,-896
 8022efc:	01803f84 	movi	r6,254
 8022f00:	30c01516 	blt	r6,r3,8022f58 <__truncdfsf2+0x98>
 8022f04:	00c0380e 	bge	zero,r3,8022fe8 <__truncdfsf2+0x128>
 8022f08:	200c91ba 	slli	r6,r4,6
 8022f0c:	380e90fa 	slli	r7,r7,3
 8022f10:	1004d77a 	srli	r2,r2,29
 8022f14:	300cc03a 	cmpne	r6,r6,zero
 8022f18:	31ccb03a 	or	r6,r6,r7
 8022f1c:	308cb03a 	or	r6,r6,r2
 8022f20:	308001cc 	andi	r2,r6,7
 8022f24:	10000426 	beq	r2,zero,8022f38 <__truncdfsf2+0x78>
 8022f28:	308003cc 	andi	r2,r6,15
 8022f2c:	01000104 	movi	r4,4
 8022f30:	11000126 	beq	r2,r4,8022f38 <__truncdfsf2+0x78>
 8022f34:	31800104 	addi	r6,r6,4
 8022f38:	3081002c 	andhi	r2,r6,1024
 8022f3c:	10001626 	beq	r2,zero,8022f98 <__truncdfsf2+0xd8>
 8022f40:	18c00044 	addi	r3,r3,1
 8022f44:	00803fc4 	movi	r2,255
 8022f48:	18800326 	beq	r3,r2,8022f58 <__truncdfsf2+0x98>
 8022f4c:	300c91ba 	slli	r6,r6,6
 8022f50:	300cd27a 	srli	r6,r6,9
 8022f54:	00000206 	br	8022f60 <__truncdfsf2+0xa0>
 8022f58:	00ffffc4 	movi	r3,-1
 8022f5c:	000d883a 	mov	r6,zero
 8022f60:	18c03fcc 	andi	r3,r3,255
 8022f64:	180895fa 	slli	r4,r3,23
 8022f68:	00c02034 	movhi	r3,128
 8022f6c:	280a97fa 	slli	r5,r5,31
 8022f70:	18ffffc4 	addi	r3,r3,-1
 8022f74:	30c6703a 	and	r3,r6,r3
 8022f78:	1906b03a 	or	r3,r3,r4
 8022f7c:	1944b03a 	or	r2,r3,r5
 8022f80:	f800283a 	ret
 8022f84:	40000b1e 	bne	r8,zero,8022fb4 <__truncdfsf2+0xf4>
 8022f88:	388cb03a 	or	r6,r7,r2
 8022f8c:	0007883a 	mov	r3,zero
 8022f90:	30000426 	beq	r6,zero,8022fa4 <__truncdfsf2+0xe4>
 8022f94:	01800144 	movi	r6,5
 8022f98:	00803fc4 	movi	r2,255
 8022f9c:	300cd0fa 	srli	r6,r6,3
 8022fa0:	18800a26 	beq	r3,r2,8022fcc <__truncdfsf2+0x10c>
 8022fa4:	00802034 	movhi	r2,128
 8022fa8:	10bfffc4 	addi	r2,r2,-1
 8022fac:	308c703a 	and	r6,r6,r2
 8022fb0:	003feb06 	br	8022f60 <__alt_data_end+0xfffe3b60>
 8022fb4:	3888b03a 	or	r4,r7,r2
 8022fb8:	203fe726 	beq	r4,zero,8022f58 <__alt_data_end+0xfffe3b58>
 8022fbc:	380c90fa 	slli	r6,r7,3
 8022fc0:	00c03fc4 	movi	r3,255
 8022fc4:	31808034 	orhi	r6,r6,512
 8022fc8:	003fd506 	br	8022f20 <__alt_data_end+0xfffe3b20>
 8022fcc:	303fe226 	beq	r6,zero,8022f58 <__alt_data_end+0xfffe3b58>
 8022fd0:	00802034 	movhi	r2,128
 8022fd4:	31801034 	orhi	r6,r6,64
 8022fd8:	10bfffc4 	addi	r2,r2,-1
 8022fdc:	00ffffc4 	movi	r3,-1
 8022fe0:	308c703a 	and	r6,r6,r2
 8022fe4:	003fde06 	br	8022f60 <__alt_data_end+0xfffe3b60>
 8022fe8:	013ffa44 	movi	r4,-23
 8022fec:	19000e16 	blt	r3,r4,8023028 <__truncdfsf2+0x168>
 8022ff0:	01000784 	movi	r4,30
 8022ff4:	20c9c83a 	sub	r4,r4,r3
 8022ff8:	018007c4 	movi	r6,31
 8022ffc:	39c02034 	orhi	r7,r7,128
 8023000:	31000b16 	blt	r6,r4,8023030 <__truncdfsf2+0x170>
 8023004:	423f2084 	addi	r8,r8,-894
 8023008:	120c983a 	sll	r6,r2,r8
 802300c:	3a0e983a 	sll	r7,r7,r8
 8023010:	1104d83a 	srl	r2,r2,r4
 8023014:	300cc03a 	cmpne	r6,r6,zero
 8023018:	31ceb03a 	or	r7,r6,r7
 802301c:	388cb03a 	or	r6,r7,r2
 8023020:	0007883a 	mov	r3,zero
 8023024:	003fbe06 	br	8022f20 <__alt_data_end+0xfffe3b20>
 8023028:	0007883a 	mov	r3,zero
 802302c:	003fd906 	br	8022f94 <__alt_data_end+0xfffe3b94>
 8023030:	01bfff84 	movi	r6,-2
 8023034:	30cdc83a 	sub	r6,r6,r3
 8023038:	00c00804 	movi	r3,32
 802303c:	398cd83a 	srl	r6,r7,r6
 8023040:	20c00726 	beq	r4,r3,8023060 <__truncdfsf2+0x1a0>
 8023044:	423f2884 	addi	r8,r8,-862
 8023048:	3a0e983a 	sll	r7,r7,r8
 802304c:	3884b03a 	or	r2,r7,r2
 8023050:	1004c03a 	cmpne	r2,r2,zero
 8023054:	118cb03a 	or	r6,r2,r6
 8023058:	0007883a 	mov	r3,zero
 802305c:	003fb006 	br	8022f20 <__alt_data_end+0xfffe3b20>
 8023060:	000f883a 	mov	r7,zero
 8023064:	003ff906 	br	802304c <__alt_data_end+0xfffe3c4c>

08023068 <__clzsi2>:
 8023068:	00bfffd4 	movui	r2,65535
 802306c:	11000536 	bltu	r2,r4,8023084 <__clzsi2+0x1c>
 8023070:	00803fc4 	movi	r2,255
 8023074:	11000f36 	bltu	r2,r4,80230b4 <__clzsi2+0x4c>
 8023078:	00800804 	movi	r2,32
 802307c:	0007883a 	mov	r3,zero
 8023080:	00000506 	br	8023098 <__clzsi2+0x30>
 8023084:	00804034 	movhi	r2,256
 8023088:	10bfffc4 	addi	r2,r2,-1
 802308c:	11000c2e 	bgeu	r2,r4,80230c0 <__clzsi2+0x58>
 8023090:	00800204 	movi	r2,8
 8023094:	00c00604 	movi	r3,24
 8023098:	20c8d83a 	srl	r4,r4,r3
 802309c:	00c200f4 	movhi	r3,2051
 80230a0:	18e7d084 	addi	r3,r3,-24766
 80230a4:	1909883a 	add	r4,r3,r4
 80230a8:	20c00003 	ldbu	r3,0(r4)
 80230ac:	10c5c83a 	sub	r2,r2,r3
 80230b0:	f800283a 	ret
 80230b4:	00800604 	movi	r2,24
 80230b8:	00c00204 	movi	r3,8
 80230bc:	003ff606 	br	8023098 <__alt_data_end+0xfffe3c98>
 80230c0:	00800404 	movi	r2,16
 80230c4:	1007883a 	mov	r3,r2
 80230c8:	003ff306 	br	8023098 <__alt_data_end+0xfffe3c98>

080230cc <__divsi3>:
 80230cc:	20001b16 	blt	r4,zero,802313c <__divsi3+0x70>
 80230d0:	000f883a 	mov	r7,zero
 80230d4:	28001616 	blt	r5,zero,8023130 <__divsi3+0x64>
 80230d8:	200d883a 	mov	r6,r4
 80230dc:	29001a2e 	bgeu	r5,r4,8023148 <__divsi3+0x7c>
 80230e0:	00800804 	movi	r2,32
 80230e4:	00c00044 	movi	r3,1
 80230e8:	00000106 	br	80230f0 <__divsi3+0x24>
 80230ec:	10000d26 	beq	r2,zero,8023124 <__divsi3+0x58>
 80230f0:	294b883a 	add	r5,r5,r5
 80230f4:	10bfffc4 	addi	r2,r2,-1
 80230f8:	18c7883a 	add	r3,r3,r3
 80230fc:	293ffb36 	bltu	r5,r4,80230ec <__alt_data_end+0xfffe3cec>
 8023100:	0005883a 	mov	r2,zero
 8023104:	18000726 	beq	r3,zero,8023124 <__divsi3+0x58>
 8023108:	0005883a 	mov	r2,zero
 802310c:	31400236 	bltu	r6,r5,8023118 <__divsi3+0x4c>
 8023110:	314dc83a 	sub	r6,r6,r5
 8023114:	10c4b03a 	or	r2,r2,r3
 8023118:	1806d07a 	srli	r3,r3,1
 802311c:	280ad07a 	srli	r5,r5,1
 8023120:	183ffa1e 	bne	r3,zero,802310c <__alt_data_end+0xfffe3d0c>
 8023124:	38000126 	beq	r7,zero,802312c <__divsi3+0x60>
 8023128:	0085c83a 	sub	r2,zero,r2
 802312c:	f800283a 	ret
 8023130:	014bc83a 	sub	r5,zero,r5
 8023134:	39c0005c 	xori	r7,r7,1
 8023138:	003fe706 	br	80230d8 <__alt_data_end+0xfffe3cd8>
 802313c:	0109c83a 	sub	r4,zero,r4
 8023140:	01c00044 	movi	r7,1
 8023144:	003fe306 	br	80230d4 <__alt_data_end+0xfffe3cd4>
 8023148:	00c00044 	movi	r3,1
 802314c:	003fee06 	br	8023108 <__alt_data_end+0xfffe3d08>

08023150 <__modsi3>:
 8023150:	20001716 	blt	r4,zero,80231b0 <__modsi3+0x60>
 8023154:	000f883a 	mov	r7,zero
 8023158:	2005883a 	mov	r2,r4
 802315c:	28001216 	blt	r5,zero,80231a8 <__modsi3+0x58>
 8023160:	2900162e 	bgeu	r5,r4,80231bc <__modsi3+0x6c>
 8023164:	01800804 	movi	r6,32
 8023168:	00c00044 	movi	r3,1
 802316c:	00000106 	br	8023174 <__modsi3+0x24>
 8023170:	30000a26 	beq	r6,zero,802319c <__modsi3+0x4c>
 8023174:	294b883a 	add	r5,r5,r5
 8023178:	31bfffc4 	addi	r6,r6,-1
 802317c:	18c7883a 	add	r3,r3,r3
 8023180:	293ffb36 	bltu	r5,r4,8023170 <__alt_data_end+0xfffe3d70>
 8023184:	18000526 	beq	r3,zero,802319c <__modsi3+0x4c>
 8023188:	1806d07a 	srli	r3,r3,1
 802318c:	11400136 	bltu	r2,r5,8023194 <__modsi3+0x44>
 8023190:	1145c83a 	sub	r2,r2,r5
 8023194:	280ad07a 	srli	r5,r5,1
 8023198:	183ffb1e 	bne	r3,zero,8023188 <__alt_data_end+0xfffe3d88>
 802319c:	38000126 	beq	r7,zero,80231a4 <__modsi3+0x54>
 80231a0:	0085c83a 	sub	r2,zero,r2
 80231a4:	f800283a 	ret
 80231a8:	014bc83a 	sub	r5,zero,r5
 80231ac:	003fec06 	br	8023160 <__alt_data_end+0xfffe3d60>
 80231b0:	0109c83a 	sub	r4,zero,r4
 80231b4:	01c00044 	movi	r7,1
 80231b8:	003fe706 	br	8023158 <__alt_data_end+0xfffe3d58>
 80231bc:	00c00044 	movi	r3,1
 80231c0:	003ff106 	br	8023188 <__alt_data_end+0xfffe3d88>

080231c4 <__udivsi3>:
 80231c4:	200d883a 	mov	r6,r4
 80231c8:	2900152e 	bgeu	r5,r4,8023220 <__udivsi3+0x5c>
 80231cc:	28001416 	blt	r5,zero,8023220 <__udivsi3+0x5c>
 80231d0:	00800804 	movi	r2,32
 80231d4:	00c00044 	movi	r3,1
 80231d8:	00000206 	br	80231e4 <__udivsi3+0x20>
 80231dc:	10000e26 	beq	r2,zero,8023218 <__udivsi3+0x54>
 80231e0:	28000516 	blt	r5,zero,80231f8 <__udivsi3+0x34>
 80231e4:	294b883a 	add	r5,r5,r5
 80231e8:	10bfffc4 	addi	r2,r2,-1
 80231ec:	18c7883a 	add	r3,r3,r3
 80231f0:	293ffa36 	bltu	r5,r4,80231dc <__alt_data_end+0xfffe3ddc>
 80231f4:	18000826 	beq	r3,zero,8023218 <__udivsi3+0x54>
 80231f8:	0005883a 	mov	r2,zero
 80231fc:	31400236 	bltu	r6,r5,8023208 <__udivsi3+0x44>
 8023200:	314dc83a 	sub	r6,r6,r5
 8023204:	10c4b03a 	or	r2,r2,r3
 8023208:	1806d07a 	srli	r3,r3,1
 802320c:	280ad07a 	srli	r5,r5,1
 8023210:	183ffa1e 	bne	r3,zero,80231fc <__alt_data_end+0xfffe3dfc>
 8023214:	f800283a 	ret
 8023218:	0005883a 	mov	r2,zero
 802321c:	f800283a 	ret
 8023220:	00c00044 	movi	r3,1
 8023224:	003ff406 	br	80231f8 <__alt_data_end+0xfffe3df8>

08023228 <__umodsi3>:
 8023228:	2005883a 	mov	r2,r4
 802322c:	2900122e 	bgeu	r5,r4,8023278 <__umodsi3+0x50>
 8023230:	28001116 	blt	r5,zero,8023278 <__umodsi3+0x50>
 8023234:	01800804 	movi	r6,32
 8023238:	00c00044 	movi	r3,1
 802323c:	00000206 	br	8023248 <__umodsi3+0x20>
 8023240:	30000c26 	beq	r6,zero,8023274 <__umodsi3+0x4c>
 8023244:	28000516 	blt	r5,zero,802325c <__umodsi3+0x34>
 8023248:	294b883a 	add	r5,r5,r5
 802324c:	31bfffc4 	addi	r6,r6,-1
 8023250:	18c7883a 	add	r3,r3,r3
 8023254:	293ffa36 	bltu	r5,r4,8023240 <__alt_data_end+0xfffe3e40>
 8023258:	18000626 	beq	r3,zero,8023274 <__umodsi3+0x4c>
 802325c:	1806d07a 	srli	r3,r3,1
 8023260:	11400136 	bltu	r2,r5,8023268 <__umodsi3+0x40>
 8023264:	1145c83a 	sub	r2,r2,r5
 8023268:	280ad07a 	srli	r5,r5,1
 802326c:	183ffb1e 	bne	r3,zero,802325c <__alt_data_end+0xfffe3e5c>
 8023270:	f800283a 	ret
 8023274:	f800283a 	ret
 8023278:	00c00044 	movi	r3,1
 802327c:	003ff706 	br	802325c <__alt_data_end+0xfffe3e5c>

08023280 <_puts_r>:
 8023280:	defff604 	addi	sp,sp,-40
 8023284:	dc000715 	stw	r16,28(sp)
 8023288:	2021883a 	mov	r16,r4
 802328c:	2809883a 	mov	r4,r5
 8023290:	dc400815 	stw	r17,32(sp)
 8023294:	dfc00915 	stw	ra,36(sp)
 8023298:	2823883a 	mov	r17,r5
 802329c:	80233540 	call	8023354 <strlen>
 80232a0:	10c00044 	addi	r3,r2,1
 80232a4:	d8800115 	stw	r2,4(sp)
 80232a8:	008200f4 	movhi	r2,2051
 80232ac:	10a81104 	addi	r2,r2,-24508
 80232b0:	d8800215 	stw	r2,8(sp)
 80232b4:	00800044 	movi	r2,1
 80232b8:	d8800315 	stw	r2,12(sp)
 80232bc:	00800084 	movi	r2,2
 80232c0:	dc400015 	stw	r17,0(sp)
 80232c4:	d8c00615 	stw	r3,24(sp)
 80232c8:	dec00415 	stw	sp,16(sp)
 80232cc:	d8800515 	stw	r2,20(sp)
 80232d0:	80000226 	beq	r16,zero,80232dc <_puts_r+0x5c>
 80232d4:	80800e17 	ldw	r2,56(r16)
 80232d8:	10001426 	beq	r2,zero,802332c <_puts_r+0xac>
 80232dc:	81400217 	ldw	r5,8(r16)
 80232e0:	2880030b 	ldhu	r2,12(r5)
 80232e4:	10c8000c 	andi	r3,r2,8192
 80232e8:	1800061e 	bne	r3,zero,8023304 <_puts_r+0x84>
 80232ec:	29001917 	ldw	r4,100(r5)
 80232f0:	00f7ffc4 	movi	r3,-8193
 80232f4:	10880014 	ori	r2,r2,8192
 80232f8:	20c6703a 	and	r3,r4,r3
 80232fc:	2880030d 	sth	r2,12(r5)
 8023300:	28c01915 	stw	r3,100(r5)
 8023304:	d9800404 	addi	r6,sp,16
 8023308:	8009883a 	mov	r4,r16
 802330c:	802379c0 	call	802379c <__sfvwrite_r>
 8023310:	1000091e 	bne	r2,zero,8023338 <_puts_r+0xb8>
 8023314:	00800284 	movi	r2,10
 8023318:	dfc00917 	ldw	ra,36(sp)
 802331c:	dc400817 	ldw	r17,32(sp)
 8023320:	dc000717 	ldw	r16,28(sp)
 8023324:	dec00a04 	addi	sp,sp,40
 8023328:	f800283a 	ret
 802332c:	8009883a 	mov	r4,r16
 8023330:	802374c0 	call	802374c <__sinit>
 8023334:	003fe906 	br	80232dc <__alt_data_end+0xfffe3edc>
 8023338:	00bfffc4 	movi	r2,-1
 802333c:	003ff606 	br	8023318 <__alt_data_end+0xfffe3f18>

08023340 <puts>:
 8023340:	008200f4 	movhi	r2,2051
 8023344:	10aee304 	addi	r2,r2,-17524
 8023348:	200b883a 	mov	r5,r4
 802334c:	11000017 	ldw	r4,0(r2)
 8023350:	80232801 	jmpi	8023280 <_puts_r>

08023354 <strlen>:
 8023354:	208000cc 	andi	r2,r4,3
 8023358:	10002026 	beq	r2,zero,80233dc <strlen+0x88>
 802335c:	20800007 	ldb	r2,0(r4)
 8023360:	10002026 	beq	r2,zero,80233e4 <strlen+0x90>
 8023364:	2005883a 	mov	r2,r4
 8023368:	00000206 	br	8023374 <strlen+0x20>
 802336c:	10c00007 	ldb	r3,0(r2)
 8023370:	18001826 	beq	r3,zero,80233d4 <strlen+0x80>
 8023374:	10800044 	addi	r2,r2,1
 8023378:	10c000cc 	andi	r3,r2,3
 802337c:	183ffb1e 	bne	r3,zero,802336c <__alt_data_end+0xfffe3f6c>
 8023380:	10c00017 	ldw	r3,0(r2)
 8023384:	01ffbff4 	movhi	r7,65279
 8023388:	39ffbfc4 	addi	r7,r7,-257
 802338c:	00ca303a 	nor	r5,zero,r3
 8023390:	01a02074 	movhi	r6,32897
 8023394:	19c7883a 	add	r3,r3,r7
 8023398:	31a02004 	addi	r6,r6,-32640
 802339c:	1946703a 	and	r3,r3,r5
 80233a0:	1986703a 	and	r3,r3,r6
 80233a4:	1800091e 	bne	r3,zero,80233cc <strlen+0x78>
 80233a8:	10800104 	addi	r2,r2,4
 80233ac:	10c00017 	ldw	r3,0(r2)
 80233b0:	19cb883a 	add	r5,r3,r7
 80233b4:	00c6303a 	nor	r3,zero,r3
 80233b8:	28c6703a 	and	r3,r5,r3
 80233bc:	1986703a 	and	r3,r3,r6
 80233c0:	183ff926 	beq	r3,zero,80233a8 <__alt_data_end+0xfffe3fa8>
 80233c4:	00000106 	br	80233cc <strlen+0x78>
 80233c8:	10800044 	addi	r2,r2,1
 80233cc:	10c00007 	ldb	r3,0(r2)
 80233d0:	183ffd1e 	bne	r3,zero,80233c8 <__alt_data_end+0xfffe3fc8>
 80233d4:	1105c83a 	sub	r2,r2,r4
 80233d8:	f800283a 	ret
 80233dc:	2005883a 	mov	r2,r4
 80233e0:	003fe706 	br	8023380 <__alt_data_end+0xfffe3f80>
 80233e4:	0005883a 	mov	r2,zero
 80233e8:	f800283a 	ret

080233ec <__fp_unlock>:
 80233ec:	0005883a 	mov	r2,zero
 80233f0:	f800283a 	ret

080233f4 <_cleanup_r>:
 80233f4:	014200b4 	movhi	r5,2050
 80233f8:	2954e904 	addi	r5,r5,21412
 80233fc:	8023d281 	jmpi	8023d28 <_fwalk_reent>

08023400 <__sinit.part.1>:
 8023400:	defff704 	addi	sp,sp,-36
 8023404:	00c200b4 	movhi	r3,2050
 8023408:	dfc00815 	stw	ra,32(sp)
 802340c:	ddc00715 	stw	r23,28(sp)
 8023410:	dd800615 	stw	r22,24(sp)
 8023414:	dd400515 	stw	r21,20(sp)
 8023418:	dd000415 	stw	r20,16(sp)
 802341c:	dcc00315 	stw	r19,12(sp)
 8023420:	dc800215 	stw	r18,8(sp)
 8023424:	dc400115 	stw	r17,4(sp)
 8023428:	dc000015 	stw	r16,0(sp)
 802342c:	18ccfd04 	addi	r3,r3,13300
 8023430:	24000117 	ldw	r16,4(r4)
 8023434:	20c00f15 	stw	r3,60(r4)
 8023438:	2080bb04 	addi	r2,r4,748
 802343c:	00c000c4 	movi	r3,3
 8023440:	20c0b915 	stw	r3,740(r4)
 8023444:	2080ba15 	stw	r2,744(r4)
 8023448:	2000b815 	stw	zero,736(r4)
 802344c:	05c00204 	movi	r23,8
 8023450:	00800104 	movi	r2,4
 8023454:	2025883a 	mov	r18,r4
 8023458:	b80d883a 	mov	r6,r23
 802345c:	81001704 	addi	r4,r16,92
 8023460:	000b883a 	mov	r5,zero
 8023464:	80000015 	stw	zero,0(r16)
 8023468:	80000115 	stw	zero,4(r16)
 802346c:	80000215 	stw	zero,8(r16)
 8023470:	8080030d 	sth	r2,12(r16)
 8023474:	80001915 	stw	zero,100(r16)
 8023478:	8000038d 	sth	zero,14(r16)
 802347c:	80000415 	stw	zero,16(r16)
 8023480:	80000515 	stw	zero,20(r16)
 8023484:	80000615 	stw	zero,24(r16)
 8023488:	80249800 	call	8024980 <memset>
 802348c:	058200b4 	movhi	r22,2050
 8023490:	94400217 	ldw	r17,8(r18)
 8023494:	054200b4 	movhi	r21,2050
 8023498:	050200b4 	movhi	r20,2050
 802349c:	04c200b4 	movhi	r19,2050
 80234a0:	b5941804 	addi	r22,r22,20576
 80234a4:	ad542f04 	addi	r21,r21,20668
 80234a8:	a5144e04 	addi	r20,r20,20792
 80234ac:	9cd46504 	addi	r19,r19,20884
 80234b0:	85800815 	stw	r22,32(r16)
 80234b4:	85400915 	stw	r21,36(r16)
 80234b8:	85000a15 	stw	r20,40(r16)
 80234bc:	84c00b15 	stw	r19,44(r16)
 80234c0:	84000715 	stw	r16,28(r16)
 80234c4:	00800284 	movi	r2,10
 80234c8:	8880030d 	sth	r2,12(r17)
 80234cc:	00800044 	movi	r2,1
 80234d0:	b80d883a 	mov	r6,r23
 80234d4:	89001704 	addi	r4,r17,92
 80234d8:	000b883a 	mov	r5,zero
 80234dc:	88000015 	stw	zero,0(r17)
 80234e0:	88000115 	stw	zero,4(r17)
 80234e4:	88000215 	stw	zero,8(r17)
 80234e8:	88001915 	stw	zero,100(r17)
 80234ec:	8880038d 	sth	r2,14(r17)
 80234f0:	88000415 	stw	zero,16(r17)
 80234f4:	88000515 	stw	zero,20(r17)
 80234f8:	88000615 	stw	zero,24(r17)
 80234fc:	80249800 	call	8024980 <memset>
 8023500:	94000317 	ldw	r16,12(r18)
 8023504:	00800484 	movi	r2,18
 8023508:	8c400715 	stw	r17,28(r17)
 802350c:	8d800815 	stw	r22,32(r17)
 8023510:	8d400915 	stw	r21,36(r17)
 8023514:	8d000a15 	stw	r20,40(r17)
 8023518:	8cc00b15 	stw	r19,44(r17)
 802351c:	8080030d 	sth	r2,12(r16)
 8023520:	00800084 	movi	r2,2
 8023524:	80000015 	stw	zero,0(r16)
 8023528:	80000115 	stw	zero,4(r16)
 802352c:	80000215 	stw	zero,8(r16)
 8023530:	80001915 	stw	zero,100(r16)
 8023534:	8080038d 	sth	r2,14(r16)
 8023538:	80000415 	stw	zero,16(r16)
 802353c:	80000515 	stw	zero,20(r16)
 8023540:	80000615 	stw	zero,24(r16)
 8023544:	b80d883a 	mov	r6,r23
 8023548:	000b883a 	mov	r5,zero
 802354c:	81001704 	addi	r4,r16,92
 8023550:	80249800 	call	8024980 <memset>
 8023554:	00800044 	movi	r2,1
 8023558:	84000715 	stw	r16,28(r16)
 802355c:	85800815 	stw	r22,32(r16)
 8023560:	85400915 	stw	r21,36(r16)
 8023564:	85000a15 	stw	r20,40(r16)
 8023568:	84c00b15 	stw	r19,44(r16)
 802356c:	90800e15 	stw	r2,56(r18)
 8023570:	dfc00817 	ldw	ra,32(sp)
 8023574:	ddc00717 	ldw	r23,28(sp)
 8023578:	dd800617 	ldw	r22,24(sp)
 802357c:	dd400517 	ldw	r21,20(sp)
 8023580:	dd000417 	ldw	r20,16(sp)
 8023584:	dcc00317 	ldw	r19,12(sp)
 8023588:	dc800217 	ldw	r18,8(sp)
 802358c:	dc400117 	ldw	r17,4(sp)
 8023590:	dc000017 	ldw	r16,0(sp)
 8023594:	dec00904 	addi	sp,sp,36
 8023598:	f800283a 	ret

0802359c <__fp_lock>:
 802359c:	0005883a 	mov	r2,zero
 80235a0:	f800283a 	ret

080235a4 <__sfmoreglue>:
 80235a4:	defffc04 	addi	sp,sp,-16
 80235a8:	dc800215 	stw	r18,8(sp)
 80235ac:	2825883a 	mov	r18,r5
 80235b0:	dc000015 	stw	r16,0(sp)
 80235b4:	01401a04 	movi	r5,104
 80235b8:	2021883a 	mov	r16,r4
 80235bc:	913fffc4 	addi	r4,r18,-1
 80235c0:	dfc00315 	stw	ra,12(sp)
 80235c4:	dc400115 	stw	r17,4(sp)
 80235c8:	80212ac0 	call	80212ac <__mulsi3>
 80235cc:	8009883a 	mov	r4,r16
 80235d0:	11401d04 	addi	r5,r2,116
 80235d4:	1023883a 	mov	r17,r2
 80235d8:	8023dec0 	call	8023dec <_malloc_r>
 80235dc:	1021883a 	mov	r16,r2
 80235e0:	10000726 	beq	r2,zero,8023600 <__sfmoreglue+0x5c>
 80235e4:	11000304 	addi	r4,r2,12
 80235e8:	10000015 	stw	zero,0(r2)
 80235ec:	14800115 	stw	r18,4(r2)
 80235f0:	11000215 	stw	r4,8(r2)
 80235f4:	89801a04 	addi	r6,r17,104
 80235f8:	000b883a 	mov	r5,zero
 80235fc:	80249800 	call	8024980 <memset>
 8023600:	8005883a 	mov	r2,r16
 8023604:	dfc00317 	ldw	ra,12(sp)
 8023608:	dc800217 	ldw	r18,8(sp)
 802360c:	dc400117 	ldw	r17,4(sp)
 8023610:	dc000017 	ldw	r16,0(sp)
 8023614:	dec00404 	addi	sp,sp,16
 8023618:	f800283a 	ret

0802361c <__sfp>:
 802361c:	defffb04 	addi	sp,sp,-20
 8023620:	dc000015 	stw	r16,0(sp)
 8023624:	040200f4 	movhi	r16,2051
 8023628:	842ee204 	addi	r16,r16,-17528
 802362c:	dcc00315 	stw	r19,12(sp)
 8023630:	2027883a 	mov	r19,r4
 8023634:	81000017 	ldw	r4,0(r16)
 8023638:	dfc00415 	stw	ra,16(sp)
 802363c:	dc800215 	stw	r18,8(sp)
 8023640:	20800e17 	ldw	r2,56(r4)
 8023644:	dc400115 	stw	r17,4(sp)
 8023648:	1000021e 	bne	r2,zero,8023654 <__sfp+0x38>
 802364c:	80234000 	call	8023400 <__sinit.part.1>
 8023650:	81000017 	ldw	r4,0(r16)
 8023654:	2480b804 	addi	r18,r4,736
 8023658:	047fffc4 	movi	r17,-1
 802365c:	91000117 	ldw	r4,4(r18)
 8023660:	94000217 	ldw	r16,8(r18)
 8023664:	213fffc4 	addi	r4,r4,-1
 8023668:	20000a16 	blt	r4,zero,8023694 <__sfp+0x78>
 802366c:	8080030f 	ldh	r2,12(r16)
 8023670:	10000c26 	beq	r2,zero,80236a4 <__sfp+0x88>
 8023674:	80c01d04 	addi	r3,r16,116
 8023678:	00000206 	br	8023684 <__sfp+0x68>
 802367c:	18bfe60f 	ldh	r2,-104(r3)
 8023680:	10000826 	beq	r2,zero,80236a4 <__sfp+0x88>
 8023684:	213fffc4 	addi	r4,r4,-1
 8023688:	1c3ffd04 	addi	r16,r3,-12
 802368c:	18c01a04 	addi	r3,r3,104
 8023690:	247ffa1e 	bne	r4,r17,802367c <__alt_data_end+0xfffe427c>
 8023694:	90800017 	ldw	r2,0(r18)
 8023698:	10001d26 	beq	r2,zero,8023710 <__sfp+0xf4>
 802369c:	1025883a 	mov	r18,r2
 80236a0:	003fee06 	br	802365c <__alt_data_end+0xfffe425c>
 80236a4:	00bfffc4 	movi	r2,-1
 80236a8:	8080038d 	sth	r2,14(r16)
 80236ac:	00800044 	movi	r2,1
 80236b0:	8080030d 	sth	r2,12(r16)
 80236b4:	80001915 	stw	zero,100(r16)
 80236b8:	80000015 	stw	zero,0(r16)
 80236bc:	80000215 	stw	zero,8(r16)
 80236c0:	80000115 	stw	zero,4(r16)
 80236c4:	80000415 	stw	zero,16(r16)
 80236c8:	80000515 	stw	zero,20(r16)
 80236cc:	80000615 	stw	zero,24(r16)
 80236d0:	01800204 	movi	r6,8
 80236d4:	000b883a 	mov	r5,zero
 80236d8:	81001704 	addi	r4,r16,92
 80236dc:	80249800 	call	8024980 <memset>
 80236e0:	8005883a 	mov	r2,r16
 80236e4:	80000c15 	stw	zero,48(r16)
 80236e8:	80000d15 	stw	zero,52(r16)
 80236ec:	80001115 	stw	zero,68(r16)
 80236f0:	80001215 	stw	zero,72(r16)
 80236f4:	dfc00417 	ldw	ra,16(sp)
 80236f8:	dcc00317 	ldw	r19,12(sp)
 80236fc:	dc800217 	ldw	r18,8(sp)
 8023700:	dc400117 	ldw	r17,4(sp)
 8023704:	dc000017 	ldw	r16,0(sp)
 8023708:	dec00504 	addi	sp,sp,20
 802370c:	f800283a 	ret
 8023710:	01400104 	movi	r5,4
 8023714:	9809883a 	mov	r4,r19
 8023718:	80235a40 	call	80235a4 <__sfmoreglue>
 802371c:	90800015 	stw	r2,0(r18)
 8023720:	103fde1e 	bne	r2,zero,802369c <__alt_data_end+0xfffe429c>
 8023724:	00800304 	movi	r2,12
 8023728:	98800015 	stw	r2,0(r19)
 802372c:	0005883a 	mov	r2,zero
 8023730:	003ff006 	br	80236f4 <__alt_data_end+0xfffe42f4>

08023734 <_cleanup>:
 8023734:	008200f4 	movhi	r2,2051
 8023738:	10aee204 	addi	r2,r2,-17528
 802373c:	11000017 	ldw	r4,0(r2)
 8023740:	014200b4 	movhi	r5,2050
 8023744:	2954e904 	addi	r5,r5,21412
 8023748:	8023d281 	jmpi	8023d28 <_fwalk_reent>

0802374c <__sinit>:
 802374c:	20800e17 	ldw	r2,56(r4)
 8023750:	10000126 	beq	r2,zero,8023758 <__sinit+0xc>
 8023754:	f800283a 	ret
 8023758:	80234001 	jmpi	8023400 <__sinit.part.1>

0802375c <__sfp_lock_acquire>:
 802375c:	f800283a 	ret

08023760 <__sfp_lock_release>:
 8023760:	f800283a 	ret

08023764 <__sinit_lock_acquire>:
 8023764:	f800283a 	ret

08023768 <__sinit_lock_release>:
 8023768:	f800283a 	ret

0802376c <__fp_lock_all>:
 802376c:	008200f4 	movhi	r2,2051
 8023770:	10aee304 	addi	r2,r2,-17524
 8023774:	11000017 	ldw	r4,0(r2)
 8023778:	014200b4 	movhi	r5,2050
 802377c:	294d6704 	addi	r5,r5,13724
 8023780:	8023c641 	jmpi	8023c64 <_fwalk>

08023784 <__fp_unlock_all>:
 8023784:	008200f4 	movhi	r2,2051
 8023788:	10aee304 	addi	r2,r2,-17524
 802378c:	11000017 	ldw	r4,0(r2)
 8023790:	014200b4 	movhi	r5,2050
 8023794:	294cfb04 	addi	r5,r5,13292
 8023798:	8023c641 	jmpi	8023c64 <_fwalk>

0802379c <__sfvwrite_r>:
 802379c:	30800217 	ldw	r2,8(r6)
 80237a0:	10006726 	beq	r2,zero,8023940 <__sfvwrite_r+0x1a4>
 80237a4:	28c0030b 	ldhu	r3,12(r5)
 80237a8:	defff404 	addi	sp,sp,-48
 80237ac:	dd400715 	stw	r21,28(sp)
 80237b0:	dd000615 	stw	r20,24(sp)
 80237b4:	dc000215 	stw	r16,8(sp)
 80237b8:	dfc00b15 	stw	ra,44(sp)
 80237bc:	df000a15 	stw	fp,40(sp)
 80237c0:	ddc00915 	stw	r23,36(sp)
 80237c4:	dd800815 	stw	r22,32(sp)
 80237c8:	dcc00515 	stw	r19,20(sp)
 80237cc:	dc800415 	stw	r18,16(sp)
 80237d0:	dc400315 	stw	r17,12(sp)
 80237d4:	1880020c 	andi	r2,r3,8
 80237d8:	2821883a 	mov	r16,r5
 80237dc:	202b883a 	mov	r21,r4
 80237e0:	3029883a 	mov	r20,r6
 80237e4:	10002726 	beq	r2,zero,8023884 <__sfvwrite_r+0xe8>
 80237e8:	28800417 	ldw	r2,16(r5)
 80237ec:	10002526 	beq	r2,zero,8023884 <__sfvwrite_r+0xe8>
 80237f0:	1880008c 	andi	r2,r3,2
 80237f4:	a4400017 	ldw	r17,0(r20)
 80237f8:	10002a26 	beq	r2,zero,80238a4 <__sfvwrite_r+0x108>
 80237fc:	05a00034 	movhi	r22,32768
 8023800:	0027883a 	mov	r19,zero
 8023804:	0025883a 	mov	r18,zero
 8023808:	b5bf0004 	addi	r22,r22,-1024
 802380c:	980d883a 	mov	r6,r19
 8023810:	a809883a 	mov	r4,r21
 8023814:	90004626 	beq	r18,zero,8023930 <__sfvwrite_r+0x194>
 8023818:	900f883a 	mov	r7,r18
 802381c:	b480022e 	bgeu	r22,r18,8023828 <__sfvwrite_r+0x8c>
 8023820:	01e00034 	movhi	r7,32768
 8023824:	39ff0004 	addi	r7,r7,-1024
 8023828:	80800917 	ldw	r2,36(r16)
 802382c:	81400717 	ldw	r5,28(r16)
 8023830:	103ee83a 	callr	r2
 8023834:	00805a0e 	bge	zero,r2,80239a0 <__sfvwrite_r+0x204>
 8023838:	a0c00217 	ldw	r3,8(r20)
 802383c:	98a7883a 	add	r19,r19,r2
 8023840:	90a5c83a 	sub	r18,r18,r2
 8023844:	1885c83a 	sub	r2,r3,r2
 8023848:	a0800215 	stw	r2,8(r20)
 802384c:	103fef1e 	bne	r2,zero,802380c <__alt_data_end+0xfffe440c>
 8023850:	0005883a 	mov	r2,zero
 8023854:	dfc00b17 	ldw	ra,44(sp)
 8023858:	df000a17 	ldw	fp,40(sp)
 802385c:	ddc00917 	ldw	r23,36(sp)
 8023860:	dd800817 	ldw	r22,32(sp)
 8023864:	dd400717 	ldw	r21,28(sp)
 8023868:	dd000617 	ldw	r20,24(sp)
 802386c:	dcc00517 	ldw	r19,20(sp)
 8023870:	dc800417 	ldw	r18,16(sp)
 8023874:	dc400317 	ldw	r17,12(sp)
 8023878:	dc000217 	ldw	r16,8(sp)
 802387c:	dec00c04 	addi	sp,sp,48
 8023880:	f800283a 	ret
 8023884:	800b883a 	mov	r5,r16
 8023888:	a809883a 	mov	r4,r21
 802388c:	80251fc0 	call	80251fc <__swsetup_r>
 8023890:	1000ee1e 	bne	r2,zero,8023c4c <__sfvwrite_r+0x4b0>
 8023894:	80c0030b 	ldhu	r3,12(r16)
 8023898:	a4400017 	ldw	r17,0(r20)
 802389c:	1880008c 	andi	r2,r3,2
 80238a0:	103fd61e 	bne	r2,zero,80237fc <__alt_data_end+0xfffe43fc>
 80238a4:	1880004c 	andi	r2,r3,1
 80238a8:	1000421e 	bne	r2,zero,80239b4 <__sfvwrite_r+0x218>
 80238ac:	0039883a 	mov	fp,zero
 80238b0:	0025883a 	mov	r18,zero
 80238b4:	90001a26 	beq	r18,zero,8023920 <__sfvwrite_r+0x184>
 80238b8:	1880800c 	andi	r2,r3,512
 80238bc:	84c00217 	ldw	r19,8(r16)
 80238c0:	10002126 	beq	r2,zero,8023948 <__sfvwrite_r+0x1ac>
 80238c4:	982f883a 	mov	r23,r19
 80238c8:	94c09636 	bltu	r18,r19,8023b24 <__sfvwrite_r+0x388>
 80238cc:	1881200c 	andi	r2,r3,1152
 80238d0:	1000a11e 	bne	r2,zero,8023b58 <__sfvwrite_r+0x3bc>
 80238d4:	81000017 	ldw	r4,0(r16)
 80238d8:	b80d883a 	mov	r6,r23
 80238dc:	e00b883a 	mov	r5,fp
 80238e0:	80248240 	call	8024824 <memmove>
 80238e4:	80c00217 	ldw	r3,8(r16)
 80238e8:	81000017 	ldw	r4,0(r16)
 80238ec:	9005883a 	mov	r2,r18
 80238f0:	1ce7c83a 	sub	r19,r3,r19
 80238f4:	25cf883a 	add	r7,r4,r23
 80238f8:	84c00215 	stw	r19,8(r16)
 80238fc:	81c00015 	stw	r7,0(r16)
 8023900:	a0c00217 	ldw	r3,8(r20)
 8023904:	e0b9883a 	add	fp,fp,r2
 8023908:	90a5c83a 	sub	r18,r18,r2
 802390c:	18a7c83a 	sub	r19,r3,r2
 8023910:	a4c00215 	stw	r19,8(r20)
 8023914:	983fce26 	beq	r19,zero,8023850 <__alt_data_end+0xfffe4450>
 8023918:	80c0030b 	ldhu	r3,12(r16)
 802391c:	903fe61e 	bne	r18,zero,80238b8 <__alt_data_end+0xfffe44b8>
 8023920:	8f000017 	ldw	fp,0(r17)
 8023924:	8c800117 	ldw	r18,4(r17)
 8023928:	8c400204 	addi	r17,r17,8
 802392c:	003fe106 	br	80238b4 <__alt_data_end+0xfffe44b4>
 8023930:	8cc00017 	ldw	r19,0(r17)
 8023934:	8c800117 	ldw	r18,4(r17)
 8023938:	8c400204 	addi	r17,r17,8
 802393c:	003fb306 	br	802380c <__alt_data_end+0xfffe440c>
 8023940:	0005883a 	mov	r2,zero
 8023944:	f800283a 	ret
 8023948:	81000017 	ldw	r4,0(r16)
 802394c:	80800417 	ldw	r2,16(r16)
 8023950:	11005a36 	bltu	r2,r4,8023abc <__sfvwrite_r+0x320>
 8023954:	85c00517 	ldw	r23,20(r16)
 8023958:	95c05836 	bltu	r18,r23,8023abc <__sfvwrite_r+0x320>
 802395c:	00a00034 	movhi	r2,32768
 8023960:	10bfffc4 	addi	r2,r2,-1
 8023964:	9009883a 	mov	r4,r18
 8023968:	1480012e 	bgeu	r2,r18,8023970 <__sfvwrite_r+0x1d4>
 802396c:	1009883a 	mov	r4,r2
 8023970:	b80b883a 	mov	r5,r23
 8023974:	80230cc0 	call	80230cc <__divsi3>
 8023978:	b80b883a 	mov	r5,r23
 802397c:	1009883a 	mov	r4,r2
 8023980:	80212ac0 	call	80212ac <__mulsi3>
 8023984:	81400717 	ldw	r5,28(r16)
 8023988:	80c00917 	ldw	r3,36(r16)
 802398c:	100f883a 	mov	r7,r2
 8023990:	e00d883a 	mov	r6,fp
 8023994:	a809883a 	mov	r4,r21
 8023998:	183ee83a 	callr	r3
 802399c:	00bfd816 	blt	zero,r2,8023900 <__alt_data_end+0xfffe4500>
 80239a0:	8080030b 	ldhu	r2,12(r16)
 80239a4:	10801014 	ori	r2,r2,64
 80239a8:	8080030d 	sth	r2,12(r16)
 80239ac:	00bfffc4 	movi	r2,-1
 80239b0:	003fa806 	br	8023854 <__alt_data_end+0xfffe4454>
 80239b4:	0027883a 	mov	r19,zero
 80239b8:	0011883a 	mov	r8,zero
 80239bc:	0039883a 	mov	fp,zero
 80239c0:	0025883a 	mov	r18,zero
 80239c4:	90001f26 	beq	r18,zero,8023a44 <__sfvwrite_r+0x2a8>
 80239c8:	40005a26 	beq	r8,zero,8023b34 <__sfvwrite_r+0x398>
 80239cc:	982d883a 	mov	r22,r19
 80239d0:	94c0012e 	bgeu	r18,r19,80239d8 <__sfvwrite_r+0x23c>
 80239d4:	902d883a 	mov	r22,r18
 80239d8:	81000017 	ldw	r4,0(r16)
 80239dc:	80800417 	ldw	r2,16(r16)
 80239e0:	b02f883a 	mov	r23,r22
 80239e4:	81c00517 	ldw	r7,20(r16)
 80239e8:	1100032e 	bgeu	r2,r4,80239f8 <__sfvwrite_r+0x25c>
 80239ec:	80c00217 	ldw	r3,8(r16)
 80239f0:	38c7883a 	add	r3,r7,r3
 80239f4:	1d801816 	blt	r3,r22,8023a58 <__sfvwrite_r+0x2bc>
 80239f8:	b1c03e16 	blt	r22,r7,8023af4 <__sfvwrite_r+0x358>
 80239fc:	80800917 	ldw	r2,36(r16)
 8023a00:	81400717 	ldw	r5,28(r16)
 8023a04:	e00d883a 	mov	r6,fp
 8023a08:	da000115 	stw	r8,4(sp)
 8023a0c:	a809883a 	mov	r4,r21
 8023a10:	103ee83a 	callr	r2
 8023a14:	102f883a 	mov	r23,r2
 8023a18:	da000117 	ldw	r8,4(sp)
 8023a1c:	00bfe00e 	bge	zero,r2,80239a0 <__alt_data_end+0xfffe45a0>
 8023a20:	9de7c83a 	sub	r19,r19,r23
 8023a24:	98001f26 	beq	r19,zero,8023aa4 <__sfvwrite_r+0x308>
 8023a28:	a0800217 	ldw	r2,8(r20)
 8023a2c:	e5f9883a 	add	fp,fp,r23
 8023a30:	95e5c83a 	sub	r18,r18,r23
 8023a34:	15efc83a 	sub	r23,r2,r23
 8023a38:	a5c00215 	stw	r23,8(r20)
 8023a3c:	b83f8426 	beq	r23,zero,8023850 <__alt_data_end+0xfffe4450>
 8023a40:	903fe11e 	bne	r18,zero,80239c8 <__alt_data_end+0xfffe45c8>
 8023a44:	8f000017 	ldw	fp,0(r17)
 8023a48:	8c800117 	ldw	r18,4(r17)
 8023a4c:	0011883a 	mov	r8,zero
 8023a50:	8c400204 	addi	r17,r17,8
 8023a54:	003fdb06 	br	80239c4 <__alt_data_end+0xfffe45c4>
 8023a58:	180d883a 	mov	r6,r3
 8023a5c:	e00b883a 	mov	r5,fp
 8023a60:	da000115 	stw	r8,4(sp)
 8023a64:	d8c00015 	stw	r3,0(sp)
 8023a68:	80248240 	call	8024824 <memmove>
 8023a6c:	d8c00017 	ldw	r3,0(sp)
 8023a70:	80800017 	ldw	r2,0(r16)
 8023a74:	800b883a 	mov	r5,r16
 8023a78:	a809883a 	mov	r4,r21
 8023a7c:	10c5883a 	add	r2,r2,r3
 8023a80:	80800015 	stw	r2,0(r16)
 8023a84:	d8c00015 	stw	r3,0(sp)
 8023a88:	80256c40 	call	80256c4 <_fflush_r>
 8023a8c:	d8c00017 	ldw	r3,0(sp)
 8023a90:	da000117 	ldw	r8,4(sp)
 8023a94:	103fc21e 	bne	r2,zero,80239a0 <__alt_data_end+0xfffe45a0>
 8023a98:	182f883a 	mov	r23,r3
 8023a9c:	9de7c83a 	sub	r19,r19,r23
 8023aa0:	983fe11e 	bne	r19,zero,8023a28 <__alt_data_end+0xfffe4628>
 8023aa4:	800b883a 	mov	r5,r16
 8023aa8:	a809883a 	mov	r4,r21
 8023aac:	80256c40 	call	80256c4 <_fflush_r>
 8023ab0:	103fbb1e 	bne	r2,zero,80239a0 <__alt_data_end+0xfffe45a0>
 8023ab4:	0011883a 	mov	r8,zero
 8023ab8:	003fdb06 	br	8023a28 <__alt_data_end+0xfffe4628>
 8023abc:	94c0012e 	bgeu	r18,r19,8023ac4 <__sfvwrite_r+0x328>
 8023ac0:	9027883a 	mov	r19,r18
 8023ac4:	980d883a 	mov	r6,r19
 8023ac8:	e00b883a 	mov	r5,fp
 8023acc:	80248240 	call	8024824 <memmove>
 8023ad0:	80800217 	ldw	r2,8(r16)
 8023ad4:	80c00017 	ldw	r3,0(r16)
 8023ad8:	14c5c83a 	sub	r2,r2,r19
 8023adc:	1cc7883a 	add	r3,r3,r19
 8023ae0:	80800215 	stw	r2,8(r16)
 8023ae4:	80c00015 	stw	r3,0(r16)
 8023ae8:	10004326 	beq	r2,zero,8023bf8 <__sfvwrite_r+0x45c>
 8023aec:	9805883a 	mov	r2,r19
 8023af0:	003f8306 	br	8023900 <__alt_data_end+0xfffe4500>
 8023af4:	b00d883a 	mov	r6,r22
 8023af8:	e00b883a 	mov	r5,fp
 8023afc:	da000115 	stw	r8,4(sp)
 8023b00:	80248240 	call	8024824 <memmove>
 8023b04:	80800217 	ldw	r2,8(r16)
 8023b08:	80c00017 	ldw	r3,0(r16)
 8023b0c:	da000117 	ldw	r8,4(sp)
 8023b10:	1585c83a 	sub	r2,r2,r22
 8023b14:	1dad883a 	add	r22,r3,r22
 8023b18:	80800215 	stw	r2,8(r16)
 8023b1c:	85800015 	stw	r22,0(r16)
 8023b20:	003fbf06 	br	8023a20 <__alt_data_end+0xfffe4620>
 8023b24:	81000017 	ldw	r4,0(r16)
 8023b28:	9027883a 	mov	r19,r18
 8023b2c:	902f883a 	mov	r23,r18
 8023b30:	003f6906 	br	80238d8 <__alt_data_end+0xfffe44d8>
 8023b34:	900d883a 	mov	r6,r18
 8023b38:	01400284 	movi	r5,10
 8023b3c:	e009883a 	mov	r4,fp
 8023b40:	80245f80 	call	80245f8 <memchr>
 8023b44:	10003e26 	beq	r2,zero,8023c40 <__sfvwrite_r+0x4a4>
 8023b48:	10800044 	addi	r2,r2,1
 8023b4c:	1727c83a 	sub	r19,r2,fp
 8023b50:	02000044 	movi	r8,1
 8023b54:	003f9d06 	br	80239cc <__alt_data_end+0xfffe45cc>
 8023b58:	80800517 	ldw	r2,20(r16)
 8023b5c:	81400417 	ldw	r5,16(r16)
 8023b60:	81c00017 	ldw	r7,0(r16)
 8023b64:	10a7883a 	add	r19,r2,r2
 8023b68:	9885883a 	add	r2,r19,r2
 8023b6c:	1026d7fa 	srli	r19,r2,31
 8023b70:	396dc83a 	sub	r22,r7,r5
 8023b74:	b1000044 	addi	r4,r22,1
 8023b78:	9885883a 	add	r2,r19,r2
 8023b7c:	1027d07a 	srai	r19,r2,1
 8023b80:	2485883a 	add	r2,r4,r18
 8023b84:	980d883a 	mov	r6,r19
 8023b88:	9880022e 	bgeu	r19,r2,8023b94 <__sfvwrite_r+0x3f8>
 8023b8c:	1027883a 	mov	r19,r2
 8023b90:	100d883a 	mov	r6,r2
 8023b94:	18c1000c 	andi	r3,r3,1024
 8023b98:	18001c26 	beq	r3,zero,8023c0c <__sfvwrite_r+0x470>
 8023b9c:	300b883a 	mov	r5,r6
 8023ba0:	a809883a 	mov	r4,r21
 8023ba4:	8023dec0 	call	8023dec <_malloc_r>
 8023ba8:	102f883a 	mov	r23,r2
 8023bac:	10002926 	beq	r2,zero,8023c54 <__sfvwrite_r+0x4b8>
 8023bb0:	81400417 	ldw	r5,16(r16)
 8023bb4:	b00d883a 	mov	r6,r22
 8023bb8:	1009883a 	mov	r4,r2
 8023bbc:	80246dc0 	call	80246dc <memcpy>
 8023bc0:	8080030b 	ldhu	r2,12(r16)
 8023bc4:	00fedfc4 	movi	r3,-1153
 8023bc8:	10c4703a 	and	r2,r2,r3
 8023bcc:	10802014 	ori	r2,r2,128
 8023bd0:	8080030d 	sth	r2,12(r16)
 8023bd4:	bd89883a 	add	r4,r23,r22
 8023bd8:	9d8fc83a 	sub	r7,r19,r22
 8023bdc:	85c00415 	stw	r23,16(r16)
 8023be0:	84c00515 	stw	r19,20(r16)
 8023be4:	81000015 	stw	r4,0(r16)
 8023be8:	9027883a 	mov	r19,r18
 8023bec:	81c00215 	stw	r7,8(r16)
 8023bf0:	902f883a 	mov	r23,r18
 8023bf4:	003f3806 	br	80238d8 <__alt_data_end+0xfffe44d8>
 8023bf8:	800b883a 	mov	r5,r16
 8023bfc:	a809883a 	mov	r4,r21
 8023c00:	80256c40 	call	80256c4 <_fflush_r>
 8023c04:	103fb926 	beq	r2,zero,8023aec <__alt_data_end+0xfffe46ec>
 8023c08:	003f6506 	br	80239a0 <__alt_data_end+0xfffe45a0>
 8023c0c:	a809883a 	mov	r4,r21
 8023c10:	8024aa80 	call	8024aa8 <_realloc_r>
 8023c14:	102f883a 	mov	r23,r2
 8023c18:	103fee1e 	bne	r2,zero,8023bd4 <__alt_data_end+0xfffe47d4>
 8023c1c:	81400417 	ldw	r5,16(r16)
 8023c20:	a809883a 	mov	r4,r21
 8023c24:	80258740 	call	8025874 <_free_r>
 8023c28:	8080030b 	ldhu	r2,12(r16)
 8023c2c:	00ffdfc4 	movi	r3,-129
 8023c30:	1884703a 	and	r2,r3,r2
 8023c34:	00c00304 	movi	r3,12
 8023c38:	a8c00015 	stw	r3,0(r21)
 8023c3c:	003f5906 	br	80239a4 <__alt_data_end+0xfffe45a4>
 8023c40:	94c00044 	addi	r19,r18,1
 8023c44:	02000044 	movi	r8,1
 8023c48:	003f6006 	br	80239cc <__alt_data_end+0xfffe45cc>
 8023c4c:	00bfffc4 	movi	r2,-1
 8023c50:	003f0006 	br	8023854 <__alt_data_end+0xfffe4454>
 8023c54:	00800304 	movi	r2,12
 8023c58:	a8800015 	stw	r2,0(r21)
 8023c5c:	8080030b 	ldhu	r2,12(r16)
 8023c60:	003f5006 	br	80239a4 <__alt_data_end+0xfffe45a4>

08023c64 <_fwalk>:
 8023c64:	defff704 	addi	sp,sp,-36
 8023c68:	dd000415 	stw	r20,16(sp)
 8023c6c:	dfc00815 	stw	ra,32(sp)
 8023c70:	ddc00715 	stw	r23,28(sp)
 8023c74:	dd800615 	stw	r22,24(sp)
 8023c78:	dd400515 	stw	r21,20(sp)
 8023c7c:	dcc00315 	stw	r19,12(sp)
 8023c80:	dc800215 	stw	r18,8(sp)
 8023c84:	dc400115 	stw	r17,4(sp)
 8023c88:	dc000015 	stw	r16,0(sp)
 8023c8c:	2500b804 	addi	r20,r4,736
 8023c90:	a0002326 	beq	r20,zero,8023d20 <_fwalk+0xbc>
 8023c94:	282b883a 	mov	r21,r5
 8023c98:	002f883a 	mov	r23,zero
 8023c9c:	05800044 	movi	r22,1
 8023ca0:	04ffffc4 	movi	r19,-1
 8023ca4:	a4400117 	ldw	r17,4(r20)
 8023ca8:	a4800217 	ldw	r18,8(r20)
 8023cac:	8c7fffc4 	addi	r17,r17,-1
 8023cb0:	88000d16 	blt	r17,zero,8023ce8 <_fwalk+0x84>
 8023cb4:	94000304 	addi	r16,r18,12
 8023cb8:	94800384 	addi	r18,r18,14
 8023cbc:	8080000b 	ldhu	r2,0(r16)
 8023cc0:	8c7fffc4 	addi	r17,r17,-1
 8023cc4:	813ffd04 	addi	r4,r16,-12
 8023cc8:	b080042e 	bgeu	r22,r2,8023cdc <_fwalk+0x78>
 8023ccc:	9080000f 	ldh	r2,0(r18)
 8023cd0:	14c00226 	beq	r2,r19,8023cdc <_fwalk+0x78>
 8023cd4:	a83ee83a 	callr	r21
 8023cd8:	b8aeb03a 	or	r23,r23,r2
 8023cdc:	84001a04 	addi	r16,r16,104
 8023ce0:	94801a04 	addi	r18,r18,104
 8023ce4:	8cfff51e 	bne	r17,r19,8023cbc <__alt_data_end+0xfffe48bc>
 8023ce8:	a5000017 	ldw	r20,0(r20)
 8023cec:	a03fed1e 	bne	r20,zero,8023ca4 <__alt_data_end+0xfffe48a4>
 8023cf0:	b805883a 	mov	r2,r23
 8023cf4:	dfc00817 	ldw	ra,32(sp)
 8023cf8:	ddc00717 	ldw	r23,28(sp)
 8023cfc:	dd800617 	ldw	r22,24(sp)
 8023d00:	dd400517 	ldw	r21,20(sp)
 8023d04:	dd000417 	ldw	r20,16(sp)
 8023d08:	dcc00317 	ldw	r19,12(sp)
 8023d0c:	dc800217 	ldw	r18,8(sp)
 8023d10:	dc400117 	ldw	r17,4(sp)
 8023d14:	dc000017 	ldw	r16,0(sp)
 8023d18:	dec00904 	addi	sp,sp,36
 8023d1c:	f800283a 	ret
 8023d20:	002f883a 	mov	r23,zero
 8023d24:	003ff206 	br	8023cf0 <__alt_data_end+0xfffe48f0>

08023d28 <_fwalk_reent>:
 8023d28:	defff704 	addi	sp,sp,-36
 8023d2c:	dd000415 	stw	r20,16(sp)
 8023d30:	dfc00815 	stw	ra,32(sp)
 8023d34:	ddc00715 	stw	r23,28(sp)
 8023d38:	dd800615 	stw	r22,24(sp)
 8023d3c:	dd400515 	stw	r21,20(sp)
 8023d40:	dcc00315 	stw	r19,12(sp)
 8023d44:	dc800215 	stw	r18,8(sp)
 8023d48:	dc400115 	stw	r17,4(sp)
 8023d4c:	dc000015 	stw	r16,0(sp)
 8023d50:	2500b804 	addi	r20,r4,736
 8023d54:	a0002326 	beq	r20,zero,8023de4 <_fwalk_reent+0xbc>
 8023d58:	282b883a 	mov	r21,r5
 8023d5c:	2027883a 	mov	r19,r4
 8023d60:	002f883a 	mov	r23,zero
 8023d64:	05800044 	movi	r22,1
 8023d68:	04bfffc4 	movi	r18,-1
 8023d6c:	a4400117 	ldw	r17,4(r20)
 8023d70:	a4000217 	ldw	r16,8(r20)
 8023d74:	8c7fffc4 	addi	r17,r17,-1
 8023d78:	88000c16 	blt	r17,zero,8023dac <_fwalk_reent+0x84>
 8023d7c:	84000304 	addi	r16,r16,12
 8023d80:	8080000b 	ldhu	r2,0(r16)
 8023d84:	8c7fffc4 	addi	r17,r17,-1
 8023d88:	817ffd04 	addi	r5,r16,-12
 8023d8c:	b080052e 	bgeu	r22,r2,8023da4 <_fwalk_reent+0x7c>
 8023d90:	8080008f 	ldh	r2,2(r16)
 8023d94:	9809883a 	mov	r4,r19
 8023d98:	14800226 	beq	r2,r18,8023da4 <_fwalk_reent+0x7c>
 8023d9c:	a83ee83a 	callr	r21
 8023da0:	b8aeb03a 	or	r23,r23,r2
 8023da4:	84001a04 	addi	r16,r16,104
 8023da8:	8cbff51e 	bne	r17,r18,8023d80 <__alt_data_end+0xfffe4980>
 8023dac:	a5000017 	ldw	r20,0(r20)
 8023db0:	a03fee1e 	bne	r20,zero,8023d6c <__alt_data_end+0xfffe496c>
 8023db4:	b805883a 	mov	r2,r23
 8023db8:	dfc00817 	ldw	ra,32(sp)
 8023dbc:	ddc00717 	ldw	r23,28(sp)
 8023dc0:	dd800617 	ldw	r22,24(sp)
 8023dc4:	dd400517 	ldw	r21,20(sp)
 8023dc8:	dd000417 	ldw	r20,16(sp)
 8023dcc:	dcc00317 	ldw	r19,12(sp)
 8023dd0:	dc800217 	ldw	r18,8(sp)
 8023dd4:	dc400117 	ldw	r17,4(sp)
 8023dd8:	dc000017 	ldw	r16,0(sp)
 8023ddc:	dec00904 	addi	sp,sp,36
 8023de0:	f800283a 	ret
 8023de4:	002f883a 	mov	r23,zero
 8023de8:	003ff206 	br	8023db4 <__alt_data_end+0xfffe49b4>

08023dec <_malloc_r>:
 8023dec:	defff504 	addi	sp,sp,-44
 8023df0:	dc800315 	stw	r18,12(sp)
 8023df4:	dfc00a15 	stw	ra,40(sp)
 8023df8:	df000915 	stw	fp,36(sp)
 8023dfc:	ddc00815 	stw	r23,32(sp)
 8023e00:	dd800715 	stw	r22,28(sp)
 8023e04:	dd400615 	stw	r21,24(sp)
 8023e08:	dd000515 	stw	r20,20(sp)
 8023e0c:	dcc00415 	stw	r19,16(sp)
 8023e10:	dc400215 	stw	r17,8(sp)
 8023e14:	dc000115 	stw	r16,4(sp)
 8023e18:	288002c4 	addi	r2,r5,11
 8023e1c:	00c00584 	movi	r3,22
 8023e20:	2025883a 	mov	r18,r4
 8023e24:	18807f2e 	bgeu	r3,r2,8024024 <_malloc_r+0x238>
 8023e28:	047ffe04 	movi	r17,-8
 8023e2c:	1462703a 	and	r17,r2,r17
 8023e30:	8800a316 	blt	r17,zero,80240c0 <_malloc_r+0x2d4>
 8023e34:	8940a236 	bltu	r17,r5,80240c0 <_malloc_r+0x2d4>
 8023e38:	80265780 	call	8026578 <__malloc_lock>
 8023e3c:	00807dc4 	movi	r2,503
 8023e40:	1441e92e 	bgeu	r2,r17,80245e8 <_malloc_r+0x7fc>
 8023e44:	8804d27a 	srli	r2,r17,9
 8023e48:	1000a126 	beq	r2,zero,80240d0 <_malloc_r+0x2e4>
 8023e4c:	00c00104 	movi	r3,4
 8023e50:	18811e36 	bltu	r3,r2,80242cc <_malloc_r+0x4e0>
 8023e54:	8804d1ba 	srli	r2,r17,6
 8023e58:	12000e44 	addi	r8,r2,57
 8023e5c:	11c00e04 	addi	r7,r2,56
 8023e60:	4209883a 	add	r4,r8,r8
 8023e64:	04c200f4 	movhi	r19,2051
 8023e68:	2109883a 	add	r4,r4,r4
 8023e6c:	9ce93a04 	addi	r19,r19,-23320
 8023e70:	2109883a 	add	r4,r4,r4
 8023e74:	9909883a 	add	r4,r19,r4
 8023e78:	24000117 	ldw	r16,4(r4)
 8023e7c:	213ffe04 	addi	r4,r4,-8
 8023e80:	24009726 	beq	r4,r16,80240e0 <_malloc_r+0x2f4>
 8023e84:	80800117 	ldw	r2,4(r16)
 8023e88:	01bfff04 	movi	r6,-4
 8023e8c:	014003c4 	movi	r5,15
 8023e90:	1184703a 	and	r2,r2,r6
 8023e94:	1447c83a 	sub	r3,r2,r17
 8023e98:	28c00716 	blt	r5,r3,8023eb8 <_malloc_r+0xcc>
 8023e9c:	1800920e 	bge	r3,zero,80240e8 <_malloc_r+0x2fc>
 8023ea0:	84000317 	ldw	r16,12(r16)
 8023ea4:	24008e26 	beq	r4,r16,80240e0 <_malloc_r+0x2f4>
 8023ea8:	80800117 	ldw	r2,4(r16)
 8023eac:	1184703a 	and	r2,r2,r6
 8023eb0:	1447c83a 	sub	r3,r2,r17
 8023eb4:	28fff90e 	bge	r5,r3,8023e9c <__alt_data_end+0xfffe4a9c>
 8023eb8:	3809883a 	mov	r4,r7
 8023ebc:	018200f4 	movhi	r6,2051
 8023ec0:	9c000417 	ldw	r16,16(r19)
 8023ec4:	31a93a04 	addi	r6,r6,-23320
 8023ec8:	32000204 	addi	r8,r6,8
 8023ecc:	82013426 	beq	r16,r8,80243a0 <_malloc_r+0x5b4>
 8023ed0:	80c00117 	ldw	r3,4(r16)
 8023ed4:	00bfff04 	movi	r2,-4
 8023ed8:	188e703a 	and	r7,r3,r2
 8023edc:	3c45c83a 	sub	r2,r7,r17
 8023ee0:	00c003c4 	movi	r3,15
 8023ee4:	18811f16 	blt	r3,r2,8024364 <_malloc_r+0x578>
 8023ee8:	32000515 	stw	r8,20(r6)
 8023eec:	32000415 	stw	r8,16(r6)
 8023ef0:	10007f0e 	bge	r2,zero,80240f0 <_malloc_r+0x304>
 8023ef4:	00807fc4 	movi	r2,511
 8023ef8:	11c0fd36 	bltu	r2,r7,80242f0 <_malloc_r+0x504>
 8023efc:	3806d0fa 	srli	r3,r7,3
 8023f00:	01c00044 	movi	r7,1
 8023f04:	30800117 	ldw	r2,4(r6)
 8023f08:	19400044 	addi	r5,r3,1
 8023f0c:	294b883a 	add	r5,r5,r5
 8023f10:	1807d0ba 	srai	r3,r3,2
 8023f14:	294b883a 	add	r5,r5,r5
 8023f18:	294b883a 	add	r5,r5,r5
 8023f1c:	298b883a 	add	r5,r5,r6
 8023f20:	38c6983a 	sll	r3,r7,r3
 8023f24:	29c00017 	ldw	r7,0(r5)
 8023f28:	2a7ffe04 	addi	r9,r5,-8
 8023f2c:	1886b03a 	or	r3,r3,r2
 8023f30:	82400315 	stw	r9,12(r16)
 8023f34:	81c00215 	stw	r7,8(r16)
 8023f38:	30c00115 	stw	r3,4(r6)
 8023f3c:	2c000015 	stw	r16,0(r5)
 8023f40:	3c000315 	stw	r16,12(r7)
 8023f44:	2005d0ba 	srai	r2,r4,2
 8023f48:	01400044 	movi	r5,1
 8023f4c:	288a983a 	sll	r5,r5,r2
 8023f50:	19406f36 	bltu	r3,r5,8024110 <_malloc_r+0x324>
 8023f54:	28c4703a 	and	r2,r5,r3
 8023f58:	10000a1e 	bne	r2,zero,8023f84 <_malloc_r+0x198>
 8023f5c:	00bfff04 	movi	r2,-4
 8023f60:	294b883a 	add	r5,r5,r5
 8023f64:	2088703a 	and	r4,r4,r2
 8023f68:	28c4703a 	and	r2,r5,r3
 8023f6c:	21000104 	addi	r4,r4,4
 8023f70:	1000041e 	bne	r2,zero,8023f84 <_malloc_r+0x198>
 8023f74:	294b883a 	add	r5,r5,r5
 8023f78:	28c4703a 	and	r2,r5,r3
 8023f7c:	21000104 	addi	r4,r4,4
 8023f80:	103ffc26 	beq	r2,zero,8023f74 <__alt_data_end+0xfffe4b74>
 8023f84:	02bfff04 	movi	r10,-4
 8023f88:	024003c4 	movi	r9,15
 8023f8c:	21800044 	addi	r6,r4,1
 8023f90:	318d883a 	add	r6,r6,r6
 8023f94:	318d883a 	add	r6,r6,r6
 8023f98:	318d883a 	add	r6,r6,r6
 8023f9c:	998d883a 	add	r6,r19,r6
 8023fa0:	333ffe04 	addi	r12,r6,-8
 8023fa4:	2017883a 	mov	r11,r4
 8023fa8:	31800104 	addi	r6,r6,4
 8023fac:	34000017 	ldw	r16,0(r6)
 8023fb0:	31fffd04 	addi	r7,r6,-12
 8023fb4:	81c0041e 	bne	r16,r7,8023fc8 <_malloc_r+0x1dc>
 8023fb8:	0000fb06 	br	80243a8 <_malloc_r+0x5bc>
 8023fbc:	1801030e 	bge	r3,zero,80243cc <_malloc_r+0x5e0>
 8023fc0:	84000317 	ldw	r16,12(r16)
 8023fc4:	81c0f826 	beq	r16,r7,80243a8 <_malloc_r+0x5bc>
 8023fc8:	80800117 	ldw	r2,4(r16)
 8023fcc:	1284703a 	and	r2,r2,r10
 8023fd0:	1447c83a 	sub	r3,r2,r17
 8023fd4:	48fff90e 	bge	r9,r3,8023fbc <__alt_data_end+0xfffe4bbc>
 8023fd8:	80800317 	ldw	r2,12(r16)
 8023fdc:	81000217 	ldw	r4,8(r16)
 8023fe0:	89400054 	ori	r5,r17,1
 8023fe4:	81400115 	stw	r5,4(r16)
 8023fe8:	20800315 	stw	r2,12(r4)
 8023fec:	11000215 	stw	r4,8(r2)
 8023ff0:	8463883a 	add	r17,r16,r17
 8023ff4:	9c400515 	stw	r17,20(r19)
 8023ff8:	9c400415 	stw	r17,16(r19)
 8023ffc:	18800054 	ori	r2,r3,1
 8024000:	88800115 	stw	r2,4(r17)
 8024004:	8a000315 	stw	r8,12(r17)
 8024008:	8a000215 	stw	r8,8(r17)
 802400c:	88e3883a 	add	r17,r17,r3
 8024010:	88c00015 	stw	r3,0(r17)
 8024014:	9009883a 	mov	r4,r18
 8024018:	802659c0 	call	802659c <__malloc_unlock>
 802401c:	80800204 	addi	r2,r16,8
 8024020:	00001b06 	br	8024090 <_malloc_r+0x2a4>
 8024024:	04400404 	movi	r17,16
 8024028:	89402536 	bltu	r17,r5,80240c0 <_malloc_r+0x2d4>
 802402c:	80265780 	call	8026578 <__malloc_lock>
 8024030:	00800184 	movi	r2,6
 8024034:	01000084 	movi	r4,2
 8024038:	04c200f4 	movhi	r19,2051
 802403c:	1085883a 	add	r2,r2,r2
 8024040:	9ce93a04 	addi	r19,r19,-23320
 8024044:	1085883a 	add	r2,r2,r2
 8024048:	9885883a 	add	r2,r19,r2
 802404c:	14000117 	ldw	r16,4(r2)
 8024050:	10fffe04 	addi	r3,r2,-8
 8024054:	80c0d926 	beq	r16,r3,80243bc <_malloc_r+0x5d0>
 8024058:	80c00117 	ldw	r3,4(r16)
 802405c:	81000317 	ldw	r4,12(r16)
 8024060:	00bfff04 	movi	r2,-4
 8024064:	1884703a 	and	r2,r3,r2
 8024068:	81400217 	ldw	r5,8(r16)
 802406c:	8085883a 	add	r2,r16,r2
 8024070:	10c00117 	ldw	r3,4(r2)
 8024074:	29000315 	stw	r4,12(r5)
 8024078:	21400215 	stw	r5,8(r4)
 802407c:	18c00054 	ori	r3,r3,1
 8024080:	10c00115 	stw	r3,4(r2)
 8024084:	9009883a 	mov	r4,r18
 8024088:	802659c0 	call	802659c <__malloc_unlock>
 802408c:	80800204 	addi	r2,r16,8
 8024090:	dfc00a17 	ldw	ra,40(sp)
 8024094:	df000917 	ldw	fp,36(sp)
 8024098:	ddc00817 	ldw	r23,32(sp)
 802409c:	dd800717 	ldw	r22,28(sp)
 80240a0:	dd400617 	ldw	r21,24(sp)
 80240a4:	dd000517 	ldw	r20,20(sp)
 80240a8:	dcc00417 	ldw	r19,16(sp)
 80240ac:	dc800317 	ldw	r18,12(sp)
 80240b0:	dc400217 	ldw	r17,8(sp)
 80240b4:	dc000117 	ldw	r16,4(sp)
 80240b8:	dec00b04 	addi	sp,sp,44
 80240bc:	f800283a 	ret
 80240c0:	00800304 	movi	r2,12
 80240c4:	90800015 	stw	r2,0(r18)
 80240c8:	0005883a 	mov	r2,zero
 80240cc:	003ff006 	br	8024090 <__alt_data_end+0xfffe4c90>
 80240d0:	01002004 	movi	r4,128
 80240d4:	02001004 	movi	r8,64
 80240d8:	01c00fc4 	movi	r7,63
 80240dc:	003f6106 	br	8023e64 <__alt_data_end+0xfffe4a64>
 80240e0:	4009883a 	mov	r4,r8
 80240e4:	003f7506 	br	8023ebc <__alt_data_end+0xfffe4abc>
 80240e8:	81000317 	ldw	r4,12(r16)
 80240ec:	003fde06 	br	8024068 <__alt_data_end+0xfffe4c68>
 80240f0:	81c5883a 	add	r2,r16,r7
 80240f4:	11400117 	ldw	r5,4(r2)
 80240f8:	9009883a 	mov	r4,r18
 80240fc:	29400054 	ori	r5,r5,1
 8024100:	11400115 	stw	r5,4(r2)
 8024104:	802659c0 	call	802659c <__malloc_unlock>
 8024108:	80800204 	addi	r2,r16,8
 802410c:	003fe006 	br	8024090 <__alt_data_end+0xfffe4c90>
 8024110:	9c000217 	ldw	r16,8(r19)
 8024114:	00bfff04 	movi	r2,-4
 8024118:	85800117 	ldw	r22,4(r16)
 802411c:	b0ac703a 	and	r22,r22,r2
 8024120:	b4400336 	bltu	r22,r17,8024130 <_malloc_r+0x344>
 8024124:	b445c83a 	sub	r2,r22,r17
 8024128:	00c003c4 	movi	r3,15
 802412c:	18805d16 	blt	r3,r2,80242a4 <_malloc_r+0x4b8>
 8024130:	05c200f4 	movhi	r23,2051
 8024134:	008200f4 	movhi	r2,2051
 8024138:	10b5b504 	addi	r2,r2,-10540
 802413c:	bdeee404 	addi	r23,r23,-17520
 8024140:	15400017 	ldw	r21,0(r2)
 8024144:	b8c00017 	ldw	r3,0(r23)
 8024148:	00bfffc4 	movi	r2,-1
 802414c:	858d883a 	add	r6,r16,r22
 8024150:	8d6b883a 	add	r21,r17,r21
 8024154:	1880ea26 	beq	r3,r2,8024500 <_malloc_r+0x714>
 8024158:	ad4403c4 	addi	r21,r21,4111
 802415c:	00bc0004 	movi	r2,-4096
 8024160:	a8aa703a 	and	r21,r21,r2
 8024164:	a80b883a 	mov	r5,r21
 8024168:	9009883a 	mov	r4,r18
 802416c:	d9800015 	stw	r6,0(sp)
 8024170:	802500c0 	call	802500c <_sbrk_r>
 8024174:	1029883a 	mov	r20,r2
 8024178:	00bfffc4 	movi	r2,-1
 802417c:	d9800017 	ldw	r6,0(sp)
 8024180:	a080e826 	beq	r20,r2,8024524 <_malloc_r+0x738>
 8024184:	a180a636 	bltu	r20,r6,8024420 <_malloc_r+0x634>
 8024188:	070200f4 	movhi	fp,2051
 802418c:	e735c404 	addi	fp,fp,-10480
 8024190:	e0800017 	ldw	r2,0(fp)
 8024194:	a887883a 	add	r3,r21,r2
 8024198:	e0c00015 	stw	r3,0(fp)
 802419c:	3500e626 	beq	r6,r20,8024538 <_malloc_r+0x74c>
 80241a0:	b9000017 	ldw	r4,0(r23)
 80241a4:	00bfffc4 	movi	r2,-1
 80241a8:	2080ee26 	beq	r4,r2,8024564 <_malloc_r+0x778>
 80241ac:	a185c83a 	sub	r2,r20,r6
 80241b0:	10c5883a 	add	r2,r2,r3
 80241b4:	e0800015 	stw	r2,0(fp)
 80241b8:	a0c001cc 	andi	r3,r20,7
 80241bc:	1800bc26 	beq	r3,zero,80244b0 <_malloc_r+0x6c4>
 80241c0:	a0e9c83a 	sub	r20,r20,r3
 80241c4:	00840204 	movi	r2,4104
 80241c8:	a5000204 	addi	r20,r20,8
 80241cc:	10c7c83a 	sub	r3,r2,r3
 80241d0:	a545883a 	add	r2,r20,r21
 80241d4:	1083ffcc 	andi	r2,r2,4095
 80241d8:	18abc83a 	sub	r21,r3,r2
 80241dc:	a80b883a 	mov	r5,r21
 80241e0:	9009883a 	mov	r4,r18
 80241e4:	802500c0 	call	802500c <_sbrk_r>
 80241e8:	00ffffc4 	movi	r3,-1
 80241ec:	10c0e126 	beq	r2,r3,8024574 <_malloc_r+0x788>
 80241f0:	1505c83a 	sub	r2,r2,r20
 80241f4:	1545883a 	add	r2,r2,r21
 80241f8:	10800054 	ori	r2,r2,1
 80241fc:	e0c00017 	ldw	r3,0(fp)
 8024200:	9d000215 	stw	r20,8(r19)
 8024204:	a0800115 	stw	r2,4(r20)
 8024208:	a8c7883a 	add	r3,r21,r3
 802420c:	e0c00015 	stw	r3,0(fp)
 8024210:	84c00e26 	beq	r16,r19,802424c <_malloc_r+0x460>
 8024214:	018003c4 	movi	r6,15
 8024218:	3580a72e 	bgeu	r6,r22,80244b8 <_malloc_r+0x6cc>
 802421c:	81400117 	ldw	r5,4(r16)
 8024220:	013ffe04 	movi	r4,-8
 8024224:	b0bffd04 	addi	r2,r22,-12
 8024228:	1104703a 	and	r2,r2,r4
 802422c:	2900004c 	andi	r4,r5,1
 8024230:	2088b03a 	or	r4,r4,r2
 8024234:	81000115 	stw	r4,4(r16)
 8024238:	01400144 	movi	r5,5
 802423c:	8089883a 	add	r4,r16,r2
 8024240:	21400115 	stw	r5,4(r4)
 8024244:	21400215 	stw	r5,8(r4)
 8024248:	3080cd36 	bltu	r6,r2,8024580 <_malloc_r+0x794>
 802424c:	008200f4 	movhi	r2,2051
 8024250:	10b5b404 	addi	r2,r2,-10544
 8024254:	11000017 	ldw	r4,0(r2)
 8024258:	20c0012e 	bgeu	r4,r3,8024260 <_malloc_r+0x474>
 802425c:	10c00015 	stw	r3,0(r2)
 8024260:	008200f4 	movhi	r2,2051
 8024264:	10b5b304 	addi	r2,r2,-10548
 8024268:	11000017 	ldw	r4,0(r2)
 802426c:	9c000217 	ldw	r16,8(r19)
 8024270:	20c0012e 	bgeu	r4,r3,8024278 <_malloc_r+0x48c>
 8024274:	10c00015 	stw	r3,0(r2)
 8024278:	80c00117 	ldw	r3,4(r16)
 802427c:	00bfff04 	movi	r2,-4
 8024280:	1886703a 	and	r3,r3,r2
 8024284:	1c45c83a 	sub	r2,r3,r17
 8024288:	1c400236 	bltu	r3,r17,8024294 <_malloc_r+0x4a8>
 802428c:	00c003c4 	movi	r3,15
 8024290:	18800416 	blt	r3,r2,80242a4 <_malloc_r+0x4b8>
 8024294:	9009883a 	mov	r4,r18
 8024298:	802659c0 	call	802659c <__malloc_unlock>
 802429c:	0005883a 	mov	r2,zero
 80242a0:	003f7b06 	br	8024090 <__alt_data_end+0xfffe4c90>
 80242a4:	88c00054 	ori	r3,r17,1
 80242a8:	80c00115 	stw	r3,4(r16)
 80242ac:	8463883a 	add	r17,r16,r17
 80242b0:	10800054 	ori	r2,r2,1
 80242b4:	9c400215 	stw	r17,8(r19)
 80242b8:	88800115 	stw	r2,4(r17)
 80242bc:	9009883a 	mov	r4,r18
 80242c0:	802659c0 	call	802659c <__malloc_unlock>
 80242c4:	80800204 	addi	r2,r16,8
 80242c8:	003f7106 	br	8024090 <__alt_data_end+0xfffe4c90>
 80242cc:	00c00504 	movi	r3,20
 80242d0:	18804a2e 	bgeu	r3,r2,80243fc <_malloc_r+0x610>
 80242d4:	00c01504 	movi	r3,84
 80242d8:	18806e36 	bltu	r3,r2,8024494 <_malloc_r+0x6a8>
 80242dc:	8804d33a 	srli	r2,r17,12
 80242e0:	12001bc4 	addi	r8,r2,111
 80242e4:	11c01b84 	addi	r7,r2,110
 80242e8:	4209883a 	add	r4,r8,r8
 80242ec:	003edd06 	br	8023e64 <__alt_data_end+0xfffe4a64>
 80242f0:	3804d27a 	srli	r2,r7,9
 80242f4:	00c00104 	movi	r3,4
 80242f8:	1880442e 	bgeu	r3,r2,802440c <_malloc_r+0x620>
 80242fc:	00c00504 	movi	r3,20
 8024300:	18808136 	bltu	r3,r2,8024508 <_malloc_r+0x71c>
 8024304:	11401704 	addi	r5,r2,92
 8024308:	10c016c4 	addi	r3,r2,91
 802430c:	294b883a 	add	r5,r5,r5
 8024310:	294b883a 	add	r5,r5,r5
 8024314:	294b883a 	add	r5,r5,r5
 8024318:	994b883a 	add	r5,r19,r5
 802431c:	28800017 	ldw	r2,0(r5)
 8024320:	018200f4 	movhi	r6,2051
 8024324:	297ffe04 	addi	r5,r5,-8
 8024328:	31a93a04 	addi	r6,r6,-23320
 802432c:	28806526 	beq	r5,r2,80244c4 <_malloc_r+0x6d8>
 8024330:	01bfff04 	movi	r6,-4
 8024334:	10c00117 	ldw	r3,4(r2)
 8024338:	1986703a 	and	r3,r3,r6
 802433c:	38c0022e 	bgeu	r7,r3,8024348 <_malloc_r+0x55c>
 8024340:	10800217 	ldw	r2,8(r2)
 8024344:	28bffb1e 	bne	r5,r2,8024334 <__alt_data_end+0xfffe4f34>
 8024348:	11400317 	ldw	r5,12(r2)
 802434c:	98c00117 	ldw	r3,4(r19)
 8024350:	81400315 	stw	r5,12(r16)
 8024354:	80800215 	stw	r2,8(r16)
 8024358:	2c000215 	stw	r16,8(r5)
 802435c:	14000315 	stw	r16,12(r2)
 8024360:	003ef806 	br	8023f44 <__alt_data_end+0xfffe4b44>
 8024364:	88c00054 	ori	r3,r17,1
 8024368:	80c00115 	stw	r3,4(r16)
 802436c:	8463883a 	add	r17,r16,r17
 8024370:	34400515 	stw	r17,20(r6)
 8024374:	34400415 	stw	r17,16(r6)
 8024378:	10c00054 	ori	r3,r2,1
 802437c:	8a000315 	stw	r8,12(r17)
 8024380:	8a000215 	stw	r8,8(r17)
 8024384:	88c00115 	stw	r3,4(r17)
 8024388:	88a3883a 	add	r17,r17,r2
 802438c:	88800015 	stw	r2,0(r17)
 8024390:	9009883a 	mov	r4,r18
 8024394:	802659c0 	call	802659c <__malloc_unlock>
 8024398:	80800204 	addi	r2,r16,8
 802439c:	003f3c06 	br	8024090 <__alt_data_end+0xfffe4c90>
 80243a0:	30c00117 	ldw	r3,4(r6)
 80243a4:	003ee706 	br	8023f44 <__alt_data_end+0xfffe4b44>
 80243a8:	5ac00044 	addi	r11,r11,1
 80243ac:	588000cc 	andi	r2,r11,3
 80243b0:	31800204 	addi	r6,r6,8
 80243b4:	103efd1e 	bne	r2,zero,8023fac <__alt_data_end+0xfffe4bac>
 80243b8:	00002406 	br	802444c <_malloc_r+0x660>
 80243bc:	14000317 	ldw	r16,12(r2)
 80243c0:	143f251e 	bne	r2,r16,8024058 <__alt_data_end+0xfffe4c58>
 80243c4:	21000084 	addi	r4,r4,2
 80243c8:	003ebc06 	br	8023ebc <__alt_data_end+0xfffe4abc>
 80243cc:	8085883a 	add	r2,r16,r2
 80243d0:	10c00117 	ldw	r3,4(r2)
 80243d4:	81000317 	ldw	r4,12(r16)
 80243d8:	81400217 	ldw	r5,8(r16)
 80243dc:	18c00054 	ori	r3,r3,1
 80243e0:	10c00115 	stw	r3,4(r2)
 80243e4:	29000315 	stw	r4,12(r5)
 80243e8:	21400215 	stw	r5,8(r4)
 80243ec:	9009883a 	mov	r4,r18
 80243f0:	802659c0 	call	802659c <__malloc_unlock>
 80243f4:	80800204 	addi	r2,r16,8
 80243f8:	003f2506 	br	8024090 <__alt_data_end+0xfffe4c90>
 80243fc:	12001704 	addi	r8,r2,92
 8024400:	11c016c4 	addi	r7,r2,91
 8024404:	4209883a 	add	r4,r8,r8
 8024408:	003e9606 	br	8023e64 <__alt_data_end+0xfffe4a64>
 802440c:	3804d1ba 	srli	r2,r7,6
 8024410:	11400e44 	addi	r5,r2,57
 8024414:	10c00e04 	addi	r3,r2,56
 8024418:	294b883a 	add	r5,r5,r5
 802441c:	003fbc06 	br	8024310 <__alt_data_end+0xfffe4f10>
 8024420:	84ff5926 	beq	r16,r19,8024188 <__alt_data_end+0xfffe4d88>
 8024424:	008200f4 	movhi	r2,2051
 8024428:	10a93a04 	addi	r2,r2,-23320
 802442c:	14000217 	ldw	r16,8(r2)
 8024430:	00bfff04 	movi	r2,-4
 8024434:	80c00117 	ldw	r3,4(r16)
 8024438:	1886703a 	and	r3,r3,r2
 802443c:	003f9106 	br	8024284 <__alt_data_end+0xfffe4e84>
 8024440:	60800217 	ldw	r2,8(r12)
 8024444:	213fffc4 	addi	r4,r4,-1
 8024448:	1300651e 	bne	r2,r12,80245e0 <_malloc_r+0x7f4>
 802444c:	208000cc 	andi	r2,r4,3
 8024450:	633ffe04 	addi	r12,r12,-8
 8024454:	103ffa1e 	bne	r2,zero,8024440 <__alt_data_end+0xfffe5040>
 8024458:	98800117 	ldw	r2,4(r19)
 802445c:	0146303a 	nor	r3,zero,r5
 8024460:	1884703a 	and	r2,r3,r2
 8024464:	98800115 	stw	r2,4(r19)
 8024468:	294b883a 	add	r5,r5,r5
 802446c:	117f2836 	bltu	r2,r5,8024110 <__alt_data_end+0xfffe4d10>
 8024470:	283f2726 	beq	r5,zero,8024110 <__alt_data_end+0xfffe4d10>
 8024474:	2886703a 	and	r3,r5,r2
 8024478:	5809883a 	mov	r4,r11
 802447c:	183ec31e 	bne	r3,zero,8023f8c <__alt_data_end+0xfffe4b8c>
 8024480:	294b883a 	add	r5,r5,r5
 8024484:	2886703a 	and	r3,r5,r2
 8024488:	21000104 	addi	r4,r4,4
 802448c:	183ffc26 	beq	r3,zero,8024480 <__alt_data_end+0xfffe5080>
 8024490:	003ebe06 	br	8023f8c <__alt_data_end+0xfffe4b8c>
 8024494:	00c05504 	movi	r3,340
 8024498:	18801236 	bltu	r3,r2,80244e4 <_malloc_r+0x6f8>
 802449c:	8804d3fa 	srli	r2,r17,15
 80244a0:	12001e04 	addi	r8,r2,120
 80244a4:	11c01dc4 	addi	r7,r2,119
 80244a8:	4209883a 	add	r4,r8,r8
 80244ac:	003e6d06 	br	8023e64 <__alt_data_end+0xfffe4a64>
 80244b0:	00c40004 	movi	r3,4096
 80244b4:	003f4606 	br	80241d0 <__alt_data_end+0xfffe4dd0>
 80244b8:	00800044 	movi	r2,1
 80244bc:	a0800115 	stw	r2,4(r20)
 80244c0:	003f7406 	br	8024294 <__alt_data_end+0xfffe4e94>
 80244c4:	1805d0ba 	srai	r2,r3,2
 80244c8:	01c00044 	movi	r7,1
 80244cc:	30c00117 	ldw	r3,4(r6)
 80244d0:	388e983a 	sll	r7,r7,r2
 80244d4:	2805883a 	mov	r2,r5
 80244d8:	38c6b03a 	or	r3,r7,r3
 80244dc:	30c00115 	stw	r3,4(r6)
 80244e0:	003f9b06 	br	8024350 <__alt_data_end+0xfffe4f50>
 80244e4:	00c15504 	movi	r3,1364
 80244e8:	18801a36 	bltu	r3,r2,8024554 <_malloc_r+0x768>
 80244ec:	8804d4ba 	srli	r2,r17,18
 80244f0:	12001f44 	addi	r8,r2,125
 80244f4:	11c01f04 	addi	r7,r2,124
 80244f8:	4209883a 	add	r4,r8,r8
 80244fc:	003e5906 	br	8023e64 <__alt_data_end+0xfffe4a64>
 8024500:	ad400404 	addi	r21,r21,16
 8024504:	003f1706 	br	8024164 <__alt_data_end+0xfffe4d64>
 8024508:	00c01504 	movi	r3,84
 802450c:	18802336 	bltu	r3,r2,802459c <_malloc_r+0x7b0>
 8024510:	3804d33a 	srli	r2,r7,12
 8024514:	11401bc4 	addi	r5,r2,111
 8024518:	10c01b84 	addi	r3,r2,110
 802451c:	294b883a 	add	r5,r5,r5
 8024520:	003f7b06 	br	8024310 <__alt_data_end+0xfffe4f10>
 8024524:	9c000217 	ldw	r16,8(r19)
 8024528:	00bfff04 	movi	r2,-4
 802452c:	80c00117 	ldw	r3,4(r16)
 8024530:	1886703a 	and	r3,r3,r2
 8024534:	003f5306 	br	8024284 <__alt_data_end+0xfffe4e84>
 8024538:	3083ffcc 	andi	r2,r6,4095
 802453c:	103f181e 	bne	r2,zero,80241a0 <__alt_data_end+0xfffe4da0>
 8024540:	99000217 	ldw	r4,8(r19)
 8024544:	b545883a 	add	r2,r22,r21
 8024548:	10800054 	ori	r2,r2,1
 802454c:	20800115 	stw	r2,4(r4)
 8024550:	003f3e06 	br	802424c <__alt_data_end+0xfffe4e4c>
 8024554:	01003f84 	movi	r4,254
 8024558:	02001fc4 	movi	r8,127
 802455c:	01c01f84 	movi	r7,126
 8024560:	003e4006 	br	8023e64 <__alt_data_end+0xfffe4a64>
 8024564:	008200f4 	movhi	r2,2051
 8024568:	10aee404 	addi	r2,r2,-17520
 802456c:	15000015 	stw	r20,0(r2)
 8024570:	003f1106 	br	80241b8 <__alt_data_end+0xfffe4db8>
 8024574:	00800044 	movi	r2,1
 8024578:	002b883a 	mov	r21,zero
 802457c:	003f1f06 	br	80241fc <__alt_data_end+0xfffe4dfc>
 8024580:	81400204 	addi	r5,r16,8
 8024584:	9009883a 	mov	r4,r18
 8024588:	80258740 	call	8025874 <_free_r>
 802458c:	008200f4 	movhi	r2,2051
 8024590:	10b5c404 	addi	r2,r2,-10480
 8024594:	10c00017 	ldw	r3,0(r2)
 8024598:	003f2c06 	br	802424c <__alt_data_end+0xfffe4e4c>
 802459c:	00c05504 	movi	r3,340
 80245a0:	18800536 	bltu	r3,r2,80245b8 <_malloc_r+0x7cc>
 80245a4:	3804d3fa 	srli	r2,r7,15
 80245a8:	11401e04 	addi	r5,r2,120
 80245ac:	10c01dc4 	addi	r3,r2,119
 80245b0:	294b883a 	add	r5,r5,r5
 80245b4:	003f5606 	br	8024310 <__alt_data_end+0xfffe4f10>
 80245b8:	00c15504 	movi	r3,1364
 80245bc:	18800536 	bltu	r3,r2,80245d4 <_malloc_r+0x7e8>
 80245c0:	3804d4ba 	srli	r2,r7,18
 80245c4:	11401f44 	addi	r5,r2,125
 80245c8:	10c01f04 	addi	r3,r2,124
 80245cc:	294b883a 	add	r5,r5,r5
 80245d0:	003f4f06 	br	8024310 <__alt_data_end+0xfffe4f10>
 80245d4:	01403f84 	movi	r5,254
 80245d8:	00c01f84 	movi	r3,126
 80245dc:	003f4c06 	br	8024310 <__alt_data_end+0xfffe4f10>
 80245e0:	98800117 	ldw	r2,4(r19)
 80245e4:	003fa006 	br	8024468 <__alt_data_end+0xfffe5068>
 80245e8:	8808d0fa 	srli	r4,r17,3
 80245ec:	20800044 	addi	r2,r4,1
 80245f0:	1085883a 	add	r2,r2,r2
 80245f4:	003e9006 	br	8024038 <__alt_data_end+0xfffe4c38>

080245f8 <memchr>:
 80245f8:	208000cc 	andi	r2,r4,3
 80245fc:	280f883a 	mov	r7,r5
 8024600:	10003426 	beq	r2,zero,80246d4 <memchr+0xdc>
 8024604:	30bfffc4 	addi	r2,r6,-1
 8024608:	30001a26 	beq	r6,zero,8024674 <memchr+0x7c>
 802460c:	20c00003 	ldbu	r3,0(r4)
 8024610:	29803fcc 	andi	r6,r5,255
 8024614:	30c0051e 	bne	r6,r3,802462c <memchr+0x34>
 8024618:	00001806 	br	802467c <memchr+0x84>
 802461c:	10001526 	beq	r2,zero,8024674 <memchr+0x7c>
 8024620:	20c00003 	ldbu	r3,0(r4)
 8024624:	10bfffc4 	addi	r2,r2,-1
 8024628:	30c01426 	beq	r6,r3,802467c <memchr+0x84>
 802462c:	21000044 	addi	r4,r4,1
 8024630:	20c000cc 	andi	r3,r4,3
 8024634:	183ff91e 	bne	r3,zero,802461c <__alt_data_end+0xfffe521c>
 8024638:	020000c4 	movi	r8,3
 802463c:	40801136 	bltu	r8,r2,8024684 <memchr+0x8c>
 8024640:	10000c26 	beq	r2,zero,8024674 <memchr+0x7c>
 8024644:	20c00003 	ldbu	r3,0(r4)
 8024648:	29403fcc 	andi	r5,r5,255
 802464c:	28c00b26 	beq	r5,r3,802467c <memchr+0x84>
 8024650:	20c00044 	addi	r3,r4,1
 8024654:	39803fcc 	andi	r6,r7,255
 8024658:	2089883a 	add	r4,r4,r2
 802465c:	00000306 	br	802466c <memchr+0x74>
 8024660:	18c00044 	addi	r3,r3,1
 8024664:	197fffc3 	ldbu	r5,-1(r3)
 8024668:	31400526 	beq	r6,r5,8024680 <memchr+0x88>
 802466c:	1805883a 	mov	r2,r3
 8024670:	20fffb1e 	bne	r4,r3,8024660 <__alt_data_end+0xfffe5260>
 8024674:	0005883a 	mov	r2,zero
 8024678:	f800283a 	ret
 802467c:	2005883a 	mov	r2,r4
 8024680:	f800283a 	ret
 8024684:	28c03fcc 	andi	r3,r5,255
 8024688:	1812923a 	slli	r9,r3,8
 802468c:	02ffbff4 	movhi	r11,65279
 8024690:	02a02074 	movhi	r10,32897
 8024694:	48d2b03a 	or	r9,r9,r3
 8024698:	4806943a 	slli	r3,r9,16
 802469c:	5affbfc4 	addi	r11,r11,-257
 80246a0:	52a02004 	addi	r10,r10,-32640
 80246a4:	48d2b03a 	or	r9,r9,r3
 80246a8:	20c00017 	ldw	r3,0(r4)
 80246ac:	48c6f03a 	xor	r3,r9,r3
 80246b0:	1acd883a 	add	r6,r3,r11
 80246b4:	00c6303a 	nor	r3,zero,r3
 80246b8:	30c6703a 	and	r3,r6,r3
 80246bc:	1a86703a 	and	r3,r3,r10
 80246c0:	183fe01e 	bne	r3,zero,8024644 <__alt_data_end+0xfffe5244>
 80246c4:	10bfff04 	addi	r2,r2,-4
 80246c8:	21000104 	addi	r4,r4,4
 80246cc:	40bff636 	bltu	r8,r2,80246a8 <__alt_data_end+0xfffe52a8>
 80246d0:	003fdb06 	br	8024640 <__alt_data_end+0xfffe5240>
 80246d4:	3005883a 	mov	r2,r6
 80246d8:	003fd706 	br	8024638 <__alt_data_end+0xfffe5238>

080246dc <memcpy>:
 80246dc:	defffd04 	addi	sp,sp,-12
 80246e0:	dfc00215 	stw	ra,8(sp)
 80246e4:	dc400115 	stw	r17,4(sp)
 80246e8:	dc000015 	stw	r16,0(sp)
 80246ec:	00c003c4 	movi	r3,15
 80246f0:	2005883a 	mov	r2,r4
 80246f4:	1980452e 	bgeu	r3,r6,802480c <memcpy+0x130>
 80246f8:	2906b03a 	or	r3,r5,r4
 80246fc:	18c000cc 	andi	r3,r3,3
 8024700:	1800441e 	bne	r3,zero,8024814 <memcpy+0x138>
 8024704:	347ffc04 	addi	r17,r6,-16
 8024708:	8822d13a 	srli	r17,r17,4
 802470c:	28c00104 	addi	r3,r5,4
 8024710:	23400104 	addi	r13,r4,4
 8024714:	8820913a 	slli	r16,r17,4
 8024718:	2b000204 	addi	r12,r5,8
 802471c:	22c00204 	addi	r11,r4,8
 8024720:	84000504 	addi	r16,r16,20
 8024724:	2a800304 	addi	r10,r5,12
 8024728:	22400304 	addi	r9,r4,12
 802472c:	2c21883a 	add	r16,r5,r16
 8024730:	2811883a 	mov	r8,r5
 8024734:	200f883a 	mov	r7,r4
 8024738:	41000017 	ldw	r4,0(r8)
 802473c:	1fc00017 	ldw	ra,0(r3)
 8024740:	63c00017 	ldw	r15,0(r12)
 8024744:	39000015 	stw	r4,0(r7)
 8024748:	53800017 	ldw	r14,0(r10)
 802474c:	6fc00015 	stw	ra,0(r13)
 8024750:	5bc00015 	stw	r15,0(r11)
 8024754:	4b800015 	stw	r14,0(r9)
 8024758:	18c00404 	addi	r3,r3,16
 802475c:	39c00404 	addi	r7,r7,16
 8024760:	42000404 	addi	r8,r8,16
 8024764:	6b400404 	addi	r13,r13,16
 8024768:	63000404 	addi	r12,r12,16
 802476c:	5ac00404 	addi	r11,r11,16
 8024770:	52800404 	addi	r10,r10,16
 8024774:	4a400404 	addi	r9,r9,16
 8024778:	1c3fef1e 	bne	r3,r16,8024738 <__alt_data_end+0xfffe5338>
 802477c:	89c00044 	addi	r7,r17,1
 8024780:	380e913a 	slli	r7,r7,4
 8024784:	310003cc 	andi	r4,r6,15
 8024788:	02c000c4 	movi	r11,3
 802478c:	11c7883a 	add	r3,r2,r7
 8024790:	29cb883a 	add	r5,r5,r7
 8024794:	5900212e 	bgeu	r11,r4,802481c <memcpy+0x140>
 8024798:	1813883a 	mov	r9,r3
 802479c:	2811883a 	mov	r8,r5
 80247a0:	200f883a 	mov	r7,r4
 80247a4:	42800017 	ldw	r10,0(r8)
 80247a8:	4a400104 	addi	r9,r9,4
 80247ac:	39ffff04 	addi	r7,r7,-4
 80247b0:	4abfff15 	stw	r10,-4(r9)
 80247b4:	42000104 	addi	r8,r8,4
 80247b8:	59fffa36 	bltu	r11,r7,80247a4 <__alt_data_end+0xfffe53a4>
 80247bc:	213fff04 	addi	r4,r4,-4
 80247c0:	2008d0ba 	srli	r4,r4,2
 80247c4:	318000cc 	andi	r6,r6,3
 80247c8:	21000044 	addi	r4,r4,1
 80247cc:	2109883a 	add	r4,r4,r4
 80247d0:	2109883a 	add	r4,r4,r4
 80247d4:	1907883a 	add	r3,r3,r4
 80247d8:	290b883a 	add	r5,r5,r4
 80247dc:	30000626 	beq	r6,zero,80247f8 <memcpy+0x11c>
 80247e0:	198d883a 	add	r6,r3,r6
 80247e4:	29c00003 	ldbu	r7,0(r5)
 80247e8:	18c00044 	addi	r3,r3,1
 80247ec:	29400044 	addi	r5,r5,1
 80247f0:	19ffffc5 	stb	r7,-1(r3)
 80247f4:	19bffb1e 	bne	r3,r6,80247e4 <__alt_data_end+0xfffe53e4>
 80247f8:	dfc00217 	ldw	ra,8(sp)
 80247fc:	dc400117 	ldw	r17,4(sp)
 8024800:	dc000017 	ldw	r16,0(sp)
 8024804:	dec00304 	addi	sp,sp,12
 8024808:	f800283a 	ret
 802480c:	2007883a 	mov	r3,r4
 8024810:	003ff206 	br	80247dc <__alt_data_end+0xfffe53dc>
 8024814:	2007883a 	mov	r3,r4
 8024818:	003ff106 	br	80247e0 <__alt_data_end+0xfffe53e0>
 802481c:	200d883a 	mov	r6,r4
 8024820:	003fee06 	br	80247dc <__alt_data_end+0xfffe53dc>

08024824 <memmove>:
 8024824:	2005883a 	mov	r2,r4
 8024828:	29000b2e 	bgeu	r5,r4,8024858 <memmove+0x34>
 802482c:	298f883a 	add	r7,r5,r6
 8024830:	21c0092e 	bgeu	r4,r7,8024858 <memmove+0x34>
 8024834:	2187883a 	add	r3,r4,r6
 8024838:	198bc83a 	sub	r5,r3,r6
 802483c:	30004826 	beq	r6,zero,8024960 <memmove+0x13c>
 8024840:	39ffffc4 	addi	r7,r7,-1
 8024844:	39000003 	ldbu	r4,0(r7)
 8024848:	18ffffc4 	addi	r3,r3,-1
 802484c:	19000005 	stb	r4,0(r3)
 8024850:	28fffb1e 	bne	r5,r3,8024840 <__alt_data_end+0xfffe5440>
 8024854:	f800283a 	ret
 8024858:	00c003c4 	movi	r3,15
 802485c:	1980412e 	bgeu	r3,r6,8024964 <memmove+0x140>
 8024860:	2886b03a 	or	r3,r5,r2
 8024864:	18c000cc 	andi	r3,r3,3
 8024868:	1800401e 	bne	r3,zero,802496c <memmove+0x148>
 802486c:	33fffc04 	addi	r15,r6,-16
 8024870:	781ed13a 	srli	r15,r15,4
 8024874:	28c00104 	addi	r3,r5,4
 8024878:	13400104 	addi	r13,r2,4
 802487c:	781c913a 	slli	r14,r15,4
 8024880:	2b000204 	addi	r12,r5,8
 8024884:	12c00204 	addi	r11,r2,8
 8024888:	73800504 	addi	r14,r14,20
 802488c:	2a800304 	addi	r10,r5,12
 8024890:	12400304 	addi	r9,r2,12
 8024894:	2b9d883a 	add	r14,r5,r14
 8024898:	2811883a 	mov	r8,r5
 802489c:	100f883a 	mov	r7,r2
 80248a0:	41000017 	ldw	r4,0(r8)
 80248a4:	39c00404 	addi	r7,r7,16
 80248a8:	18c00404 	addi	r3,r3,16
 80248ac:	393ffc15 	stw	r4,-16(r7)
 80248b0:	193ffc17 	ldw	r4,-16(r3)
 80248b4:	6b400404 	addi	r13,r13,16
 80248b8:	5ac00404 	addi	r11,r11,16
 80248bc:	693ffc15 	stw	r4,-16(r13)
 80248c0:	61000017 	ldw	r4,0(r12)
 80248c4:	4a400404 	addi	r9,r9,16
 80248c8:	42000404 	addi	r8,r8,16
 80248cc:	593ffc15 	stw	r4,-16(r11)
 80248d0:	51000017 	ldw	r4,0(r10)
 80248d4:	63000404 	addi	r12,r12,16
 80248d8:	52800404 	addi	r10,r10,16
 80248dc:	493ffc15 	stw	r4,-16(r9)
 80248e0:	1bbfef1e 	bne	r3,r14,80248a0 <__alt_data_end+0xfffe54a0>
 80248e4:	79000044 	addi	r4,r15,1
 80248e8:	2008913a 	slli	r4,r4,4
 80248ec:	328003cc 	andi	r10,r6,15
 80248f0:	02c000c4 	movi	r11,3
 80248f4:	1107883a 	add	r3,r2,r4
 80248f8:	290b883a 	add	r5,r5,r4
 80248fc:	5a801e2e 	bgeu	r11,r10,8024978 <memmove+0x154>
 8024900:	1813883a 	mov	r9,r3
 8024904:	2811883a 	mov	r8,r5
 8024908:	500f883a 	mov	r7,r10
 802490c:	41000017 	ldw	r4,0(r8)
 8024910:	4a400104 	addi	r9,r9,4
 8024914:	39ffff04 	addi	r7,r7,-4
 8024918:	493fff15 	stw	r4,-4(r9)
 802491c:	42000104 	addi	r8,r8,4
 8024920:	59fffa36 	bltu	r11,r7,802490c <__alt_data_end+0xfffe550c>
 8024924:	513fff04 	addi	r4,r10,-4
 8024928:	2008d0ba 	srli	r4,r4,2
 802492c:	318000cc 	andi	r6,r6,3
 8024930:	21000044 	addi	r4,r4,1
 8024934:	2109883a 	add	r4,r4,r4
 8024938:	2109883a 	add	r4,r4,r4
 802493c:	1907883a 	add	r3,r3,r4
 8024940:	290b883a 	add	r5,r5,r4
 8024944:	30000b26 	beq	r6,zero,8024974 <memmove+0x150>
 8024948:	198d883a 	add	r6,r3,r6
 802494c:	29c00003 	ldbu	r7,0(r5)
 8024950:	18c00044 	addi	r3,r3,1
 8024954:	29400044 	addi	r5,r5,1
 8024958:	19ffffc5 	stb	r7,-1(r3)
 802495c:	19bffb1e 	bne	r3,r6,802494c <__alt_data_end+0xfffe554c>
 8024960:	f800283a 	ret
 8024964:	1007883a 	mov	r3,r2
 8024968:	003ff606 	br	8024944 <__alt_data_end+0xfffe5544>
 802496c:	1007883a 	mov	r3,r2
 8024970:	003ff506 	br	8024948 <__alt_data_end+0xfffe5548>
 8024974:	f800283a 	ret
 8024978:	500d883a 	mov	r6,r10
 802497c:	003ff106 	br	8024944 <__alt_data_end+0xfffe5544>

08024980 <memset>:
 8024980:	20c000cc 	andi	r3,r4,3
 8024984:	2005883a 	mov	r2,r4
 8024988:	18004426 	beq	r3,zero,8024a9c <memset+0x11c>
 802498c:	31ffffc4 	addi	r7,r6,-1
 8024990:	30004026 	beq	r6,zero,8024a94 <memset+0x114>
 8024994:	2813883a 	mov	r9,r5
 8024998:	200d883a 	mov	r6,r4
 802499c:	2007883a 	mov	r3,r4
 80249a0:	00000406 	br	80249b4 <memset+0x34>
 80249a4:	3a3fffc4 	addi	r8,r7,-1
 80249a8:	31800044 	addi	r6,r6,1
 80249ac:	38003926 	beq	r7,zero,8024a94 <memset+0x114>
 80249b0:	400f883a 	mov	r7,r8
 80249b4:	18c00044 	addi	r3,r3,1
 80249b8:	32400005 	stb	r9,0(r6)
 80249bc:	1a0000cc 	andi	r8,r3,3
 80249c0:	403ff81e 	bne	r8,zero,80249a4 <__alt_data_end+0xfffe55a4>
 80249c4:	010000c4 	movi	r4,3
 80249c8:	21c02d2e 	bgeu	r4,r7,8024a80 <memset+0x100>
 80249cc:	29003fcc 	andi	r4,r5,255
 80249d0:	200c923a 	slli	r6,r4,8
 80249d4:	3108b03a 	or	r4,r6,r4
 80249d8:	200c943a 	slli	r6,r4,16
 80249dc:	218cb03a 	or	r6,r4,r6
 80249e0:	010003c4 	movi	r4,15
 80249e4:	21c0182e 	bgeu	r4,r7,8024a48 <memset+0xc8>
 80249e8:	3b3ffc04 	addi	r12,r7,-16
 80249ec:	6018d13a 	srli	r12,r12,4
 80249f0:	1a000104 	addi	r8,r3,4
 80249f4:	1ac00204 	addi	r11,r3,8
 80249f8:	6008913a 	slli	r4,r12,4
 80249fc:	1a800304 	addi	r10,r3,12
 8024a00:	1813883a 	mov	r9,r3
 8024a04:	21000504 	addi	r4,r4,20
 8024a08:	1909883a 	add	r4,r3,r4
 8024a0c:	49800015 	stw	r6,0(r9)
 8024a10:	41800015 	stw	r6,0(r8)
 8024a14:	59800015 	stw	r6,0(r11)
 8024a18:	51800015 	stw	r6,0(r10)
 8024a1c:	42000404 	addi	r8,r8,16
 8024a20:	4a400404 	addi	r9,r9,16
 8024a24:	5ac00404 	addi	r11,r11,16
 8024a28:	52800404 	addi	r10,r10,16
 8024a2c:	413ff71e 	bne	r8,r4,8024a0c <__alt_data_end+0xfffe560c>
 8024a30:	63000044 	addi	r12,r12,1
 8024a34:	6018913a 	slli	r12,r12,4
 8024a38:	39c003cc 	andi	r7,r7,15
 8024a3c:	010000c4 	movi	r4,3
 8024a40:	1b07883a 	add	r3,r3,r12
 8024a44:	21c00e2e 	bgeu	r4,r7,8024a80 <memset+0x100>
 8024a48:	1813883a 	mov	r9,r3
 8024a4c:	3811883a 	mov	r8,r7
 8024a50:	010000c4 	movi	r4,3
 8024a54:	49800015 	stw	r6,0(r9)
 8024a58:	423fff04 	addi	r8,r8,-4
 8024a5c:	4a400104 	addi	r9,r9,4
 8024a60:	223ffc36 	bltu	r4,r8,8024a54 <__alt_data_end+0xfffe5654>
 8024a64:	393fff04 	addi	r4,r7,-4
 8024a68:	2008d0ba 	srli	r4,r4,2
 8024a6c:	39c000cc 	andi	r7,r7,3
 8024a70:	21000044 	addi	r4,r4,1
 8024a74:	2109883a 	add	r4,r4,r4
 8024a78:	2109883a 	add	r4,r4,r4
 8024a7c:	1907883a 	add	r3,r3,r4
 8024a80:	38000526 	beq	r7,zero,8024a98 <memset+0x118>
 8024a84:	19cf883a 	add	r7,r3,r7
 8024a88:	19400005 	stb	r5,0(r3)
 8024a8c:	18c00044 	addi	r3,r3,1
 8024a90:	38fffd1e 	bne	r7,r3,8024a88 <__alt_data_end+0xfffe5688>
 8024a94:	f800283a 	ret
 8024a98:	f800283a 	ret
 8024a9c:	2007883a 	mov	r3,r4
 8024aa0:	300f883a 	mov	r7,r6
 8024aa4:	003fc706 	br	80249c4 <__alt_data_end+0xfffe55c4>

08024aa8 <_realloc_r>:
 8024aa8:	defff604 	addi	sp,sp,-40
 8024aac:	dc800215 	stw	r18,8(sp)
 8024ab0:	dfc00915 	stw	ra,36(sp)
 8024ab4:	df000815 	stw	fp,32(sp)
 8024ab8:	ddc00715 	stw	r23,28(sp)
 8024abc:	dd800615 	stw	r22,24(sp)
 8024ac0:	dd400515 	stw	r21,20(sp)
 8024ac4:	dd000415 	stw	r20,16(sp)
 8024ac8:	dcc00315 	stw	r19,12(sp)
 8024acc:	dc400115 	stw	r17,4(sp)
 8024ad0:	dc000015 	stw	r16,0(sp)
 8024ad4:	3025883a 	mov	r18,r6
 8024ad8:	2800b726 	beq	r5,zero,8024db8 <_realloc_r+0x310>
 8024adc:	282b883a 	mov	r21,r5
 8024ae0:	2029883a 	mov	r20,r4
 8024ae4:	80265780 	call	8026578 <__malloc_lock>
 8024ae8:	a8bfff17 	ldw	r2,-4(r21)
 8024aec:	043fff04 	movi	r16,-4
 8024af0:	90c002c4 	addi	r3,r18,11
 8024af4:	01000584 	movi	r4,22
 8024af8:	acfffe04 	addi	r19,r21,-8
 8024afc:	1420703a 	and	r16,r2,r16
 8024b00:	20c0332e 	bgeu	r4,r3,8024bd0 <_realloc_r+0x128>
 8024b04:	047ffe04 	movi	r17,-8
 8024b08:	1c62703a 	and	r17,r3,r17
 8024b0c:	8807883a 	mov	r3,r17
 8024b10:	88005816 	blt	r17,zero,8024c74 <_realloc_r+0x1cc>
 8024b14:	8c805736 	bltu	r17,r18,8024c74 <_realloc_r+0x1cc>
 8024b18:	80c0300e 	bge	r16,r3,8024bdc <_realloc_r+0x134>
 8024b1c:	070200f4 	movhi	fp,2051
 8024b20:	e7293a04 	addi	fp,fp,-23320
 8024b24:	e1c00217 	ldw	r7,8(fp)
 8024b28:	9c09883a 	add	r4,r19,r16
 8024b2c:	22000117 	ldw	r8,4(r4)
 8024b30:	21c06326 	beq	r4,r7,8024cc0 <_realloc_r+0x218>
 8024b34:	017fff84 	movi	r5,-2
 8024b38:	414a703a 	and	r5,r8,r5
 8024b3c:	214b883a 	add	r5,r4,r5
 8024b40:	29800117 	ldw	r6,4(r5)
 8024b44:	3180004c 	andi	r6,r6,1
 8024b48:	30003f26 	beq	r6,zero,8024c48 <_realloc_r+0x1a0>
 8024b4c:	1080004c 	andi	r2,r2,1
 8024b50:	10008326 	beq	r2,zero,8024d60 <_realloc_r+0x2b8>
 8024b54:	900b883a 	mov	r5,r18
 8024b58:	a009883a 	mov	r4,r20
 8024b5c:	8023dec0 	call	8023dec <_malloc_r>
 8024b60:	1025883a 	mov	r18,r2
 8024b64:	10011e26 	beq	r2,zero,8024fe0 <_realloc_r+0x538>
 8024b68:	a93fff17 	ldw	r4,-4(r21)
 8024b6c:	10fffe04 	addi	r3,r2,-8
 8024b70:	00bfff84 	movi	r2,-2
 8024b74:	2084703a 	and	r2,r4,r2
 8024b78:	9885883a 	add	r2,r19,r2
 8024b7c:	1880ee26 	beq	r3,r2,8024f38 <_realloc_r+0x490>
 8024b80:	81bfff04 	addi	r6,r16,-4
 8024b84:	00800904 	movi	r2,36
 8024b88:	1180b836 	bltu	r2,r6,8024e6c <_realloc_r+0x3c4>
 8024b8c:	00c004c4 	movi	r3,19
 8024b90:	19809636 	bltu	r3,r6,8024dec <_realloc_r+0x344>
 8024b94:	9005883a 	mov	r2,r18
 8024b98:	a807883a 	mov	r3,r21
 8024b9c:	19000017 	ldw	r4,0(r3)
 8024ba0:	11000015 	stw	r4,0(r2)
 8024ba4:	19000117 	ldw	r4,4(r3)
 8024ba8:	11000115 	stw	r4,4(r2)
 8024bac:	18c00217 	ldw	r3,8(r3)
 8024bb0:	10c00215 	stw	r3,8(r2)
 8024bb4:	a80b883a 	mov	r5,r21
 8024bb8:	a009883a 	mov	r4,r20
 8024bbc:	80258740 	call	8025874 <_free_r>
 8024bc0:	a009883a 	mov	r4,r20
 8024bc4:	802659c0 	call	802659c <__malloc_unlock>
 8024bc8:	9005883a 	mov	r2,r18
 8024bcc:	00001206 	br	8024c18 <_realloc_r+0x170>
 8024bd0:	00c00404 	movi	r3,16
 8024bd4:	1823883a 	mov	r17,r3
 8024bd8:	003fce06 	br	8024b14 <__alt_data_end+0xfffe5714>
 8024bdc:	a825883a 	mov	r18,r21
 8024be0:	8445c83a 	sub	r2,r16,r17
 8024be4:	00c003c4 	movi	r3,15
 8024be8:	18802636 	bltu	r3,r2,8024c84 <_realloc_r+0x1dc>
 8024bec:	99800117 	ldw	r6,4(r19)
 8024bf0:	9c07883a 	add	r3,r19,r16
 8024bf4:	3180004c 	andi	r6,r6,1
 8024bf8:	3420b03a 	or	r16,r6,r16
 8024bfc:	9c000115 	stw	r16,4(r19)
 8024c00:	18800117 	ldw	r2,4(r3)
 8024c04:	10800054 	ori	r2,r2,1
 8024c08:	18800115 	stw	r2,4(r3)
 8024c0c:	a009883a 	mov	r4,r20
 8024c10:	802659c0 	call	802659c <__malloc_unlock>
 8024c14:	9005883a 	mov	r2,r18
 8024c18:	dfc00917 	ldw	ra,36(sp)
 8024c1c:	df000817 	ldw	fp,32(sp)
 8024c20:	ddc00717 	ldw	r23,28(sp)
 8024c24:	dd800617 	ldw	r22,24(sp)
 8024c28:	dd400517 	ldw	r21,20(sp)
 8024c2c:	dd000417 	ldw	r20,16(sp)
 8024c30:	dcc00317 	ldw	r19,12(sp)
 8024c34:	dc800217 	ldw	r18,8(sp)
 8024c38:	dc400117 	ldw	r17,4(sp)
 8024c3c:	dc000017 	ldw	r16,0(sp)
 8024c40:	dec00a04 	addi	sp,sp,40
 8024c44:	f800283a 	ret
 8024c48:	017fff04 	movi	r5,-4
 8024c4c:	414a703a 	and	r5,r8,r5
 8024c50:	814d883a 	add	r6,r16,r5
 8024c54:	30c01f16 	blt	r6,r3,8024cd4 <_realloc_r+0x22c>
 8024c58:	20800317 	ldw	r2,12(r4)
 8024c5c:	20c00217 	ldw	r3,8(r4)
 8024c60:	a825883a 	mov	r18,r21
 8024c64:	3021883a 	mov	r16,r6
 8024c68:	18800315 	stw	r2,12(r3)
 8024c6c:	10c00215 	stw	r3,8(r2)
 8024c70:	003fdb06 	br	8024be0 <__alt_data_end+0xfffe57e0>
 8024c74:	00800304 	movi	r2,12
 8024c78:	a0800015 	stw	r2,0(r20)
 8024c7c:	0005883a 	mov	r2,zero
 8024c80:	003fe506 	br	8024c18 <__alt_data_end+0xfffe5818>
 8024c84:	98c00117 	ldw	r3,4(r19)
 8024c88:	9c4b883a 	add	r5,r19,r17
 8024c8c:	11000054 	ori	r4,r2,1
 8024c90:	18c0004c 	andi	r3,r3,1
 8024c94:	1c62b03a 	or	r17,r3,r17
 8024c98:	9c400115 	stw	r17,4(r19)
 8024c9c:	29000115 	stw	r4,4(r5)
 8024ca0:	2885883a 	add	r2,r5,r2
 8024ca4:	10c00117 	ldw	r3,4(r2)
 8024ca8:	29400204 	addi	r5,r5,8
 8024cac:	a009883a 	mov	r4,r20
 8024cb0:	18c00054 	ori	r3,r3,1
 8024cb4:	10c00115 	stw	r3,4(r2)
 8024cb8:	80258740 	call	8025874 <_free_r>
 8024cbc:	003fd306 	br	8024c0c <__alt_data_end+0xfffe580c>
 8024cc0:	017fff04 	movi	r5,-4
 8024cc4:	414a703a 	and	r5,r8,r5
 8024cc8:	89800404 	addi	r6,r17,16
 8024ccc:	8151883a 	add	r8,r16,r5
 8024cd0:	4180590e 	bge	r8,r6,8024e38 <_realloc_r+0x390>
 8024cd4:	1080004c 	andi	r2,r2,1
 8024cd8:	103f9e1e 	bne	r2,zero,8024b54 <__alt_data_end+0xfffe5754>
 8024cdc:	adbffe17 	ldw	r22,-8(r21)
 8024ce0:	00bfff04 	movi	r2,-4
 8024ce4:	9dadc83a 	sub	r22,r19,r22
 8024ce8:	b1800117 	ldw	r6,4(r22)
 8024cec:	3084703a 	and	r2,r6,r2
 8024cf0:	20002026 	beq	r4,zero,8024d74 <_realloc_r+0x2cc>
 8024cf4:	80af883a 	add	r23,r16,r2
 8024cf8:	b96f883a 	add	r23,r23,r5
 8024cfc:	21c05f26 	beq	r4,r7,8024e7c <_realloc_r+0x3d4>
 8024d00:	b8c01c16 	blt	r23,r3,8024d74 <_realloc_r+0x2cc>
 8024d04:	20800317 	ldw	r2,12(r4)
 8024d08:	20c00217 	ldw	r3,8(r4)
 8024d0c:	81bfff04 	addi	r6,r16,-4
 8024d10:	01000904 	movi	r4,36
 8024d14:	18800315 	stw	r2,12(r3)
 8024d18:	10c00215 	stw	r3,8(r2)
 8024d1c:	b0c00217 	ldw	r3,8(r22)
 8024d20:	b0800317 	ldw	r2,12(r22)
 8024d24:	b4800204 	addi	r18,r22,8
 8024d28:	18800315 	stw	r2,12(r3)
 8024d2c:	10c00215 	stw	r3,8(r2)
 8024d30:	21801b36 	bltu	r4,r6,8024da0 <_realloc_r+0x2f8>
 8024d34:	008004c4 	movi	r2,19
 8024d38:	1180352e 	bgeu	r2,r6,8024e10 <_realloc_r+0x368>
 8024d3c:	a8800017 	ldw	r2,0(r21)
 8024d40:	b0800215 	stw	r2,8(r22)
 8024d44:	a8800117 	ldw	r2,4(r21)
 8024d48:	b0800315 	stw	r2,12(r22)
 8024d4c:	008006c4 	movi	r2,27
 8024d50:	11807f36 	bltu	r2,r6,8024f50 <_realloc_r+0x4a8>
 8024d54:	b0800404 	addi	r2,r22,16
 8024d58:	ad400204 	addi	r21,r21,8
 8024d5c:	00002d06 	br	8024e14 <_realloc_r+0x36c>
 8024d60:	adbffe17 	ldw	r22,-8(r21)
 8024d64:	00bfff04 	movi	r2,-4
 8024d68:	9dadc83a 	sub	r22,r19,r22
 8024d6c:	b1000117 	ldw	r4,4(r22)
 8024d70:	2084703a 	and	r2,r4,r2
 8024d74:	b03f7726 	beq	r22,zero,8024b54 <__alt_data_end+0xfffe5754>
 8024d78:	80af883a 	add	r23,r16,r2
 8024d7c:	b8ff7516 	blt	r23,r3,8024b54 <__alt_data_end+0xfffe5754>
 8024d80:	b0800317 	ldw	r2,12(r22)
 8024d84:	b0c00217 	ldw	r3,8(r22)
 8024d88:	81bfff04 	addi	r6,r16,-4
 8024d8c:	01000904 	movi	r4,36
 8024d90:	18800315 	stw	r2,12(r3)
 8024d94:	10c00215 	stw	r3,8(r2)
 8024d98:	b4800204 	addi	r18,r22,8
 8024d9c:	21bfe52e 	bgeu	r4,r6,8024d34 <__alt_data_end+0xfffe5934>
 8024da0:	a80b883a 	mov	r5,r21
 8024da4:	9009883a 	mov	r4,r18
 8024da8:	80248240 	call	8024824 <memmove>
 8024dac:	b821883a 	mov	r16,r23
 8024db0:	b027883a 	mov	r19,r22
 8024db4:	003f8a06 	br	8024be0 <__alt_data_end+0xfffe57e0>
 8024db8:	300b883a 	mov	r5,r6
 8024dbc:	dfc00917 	ldw	ra,36(sp)
 8024dc0:	df000817 	ldw	fp,32(sp)
 8024dc4:	ddc00717 	ldw	r23,28(sp)
 8024dc8:	dd800617 	ldw	r22,24(sp)
 8024dcc:	dd400517 	ldw	r21,20(sp)
 8024dd0:	dd000417 	ldw	r20,16(sp)
 8024dd4:	dcc00317 	ldw	r19,12(sp)
 8024dd8:	dc800217 	ldw	r18,8(sp)
 8024ddc:	dc400117 	ldw	r17,4(sp)
 8024de0:	dc000017 	ldw	r16,0(sp)
 8024de4:	dec00a04 	addi	sp,sp,40
 8024de8:	8023dec1 	jmpi	8023dec <_malloc_r>
 8024dec:	a8c00017 	ldw	r3,0(r21)
 8024df0:	90c00015 	stw	r3,0(r18)
 8024df4:	a8c00117 	ldw	r3,4(r21)
 8024df8:	90c00115 	stw	r3,4(r18)
 8024dfc:	00c006c4 	movi	r3,27
 8024e00:	19804536 	bltu	r3,r6,8024f18 <_realloc_r+0x470>
 8024e04:	90800204 	addi	r2,r18,8
 8024e08:	a8c00204 	addi	r3,r21,8
 8024e0c:	003f6306 	br	8024b9c <__alt_data_end+0xfffe579c>
 8024e10:	9005883a 	mov	r2,r18
 8024e14:	a8c00017 	ldw	r3,0(r21)
 8024e18:	b821883a 	mov	r16,r23
 8024e1c:	b027883a 	mov	r19,r22
 8024e20:	10c00015 	stw	r3,0(r2)
 8024e24:	a8c00117 	ldw	r3,4(r21)
 8024e28:	10c00115 	stw	r3,4(r2)
 8024e2c:	a8c00217 	ldw	r3,8(r21)
 8024e30:	10c00215 	stw	r3,8(r2)
 8024e34:	003f6a06 	br	8024be0 <__alt_data_end+0xfffe57e0>
 8024e38:	9c67883a 	add	r19,r19,r17
 8024e3c:	4445c83a 	sub	r2,r8,r17
 8024e40:	e4c00215 	stw	r19,8(fp)
 8024e44:	10800054 	ori	r2,r2,1
 8024e48:	98800115 	stw	r2,4(r19)
 8024e4c:	a8bfff17 	ldw	r2,-4(r21)
 8024e50:	a009883a 	mov	r4,r20
 8024e54:	1080004c 	andi	r2,r2,1
 8024e58:	1462b03a 	or	r17,r2,r17
 8024e5c:	ac7fff15 	stw	r17,-4(r21)
 8024e60:	802659c0 	call	802659c <__malloc_unlock>
 8024e64:	a805883a 	mov	r2,r21
 8024e68:	003f6b06 	br	8024c18 <__alt_data_end+0xfffe5818>
 8024e6c:	a80b883a 	mov	r5,r21
 8024e70:	9009883a 	mov	r4,r18
 8024e74:	80248240 	call	8024824 <memmove>
 8024e78:	003f4e06 	br	8024bb4 <__alt_data_end+0xfffe57b4>
 8024e7c:	89000404 	addi	r4,r17,16
 8024e80:	b93fbc16 	blt	r23,r4,8024d74 <__alt_data_end+0xfffe5974>
 8024e84:	b0800317 	ldw	r2,12(r22)
 8024e88:	b0c00217 	ldw	r3,8(r22)
 8024e8c:	81bfff04 	addi	r6,r16,-4
 8024e90:	01000904 	movi	r4,36
 8024e94:	18800315 	stw	r2,12(r3)
 8024e98:	10c00215 	stw	r3,8(r2)
 8024e9c:	b4800204 	addi	r18,r22,8
 8024ea0:	21804336 	bltu	r4,r6,8024fb0 <_realloc_r+0x508>
 8024ea4:	008004c4 	movi	r2,19
 8024ea8:	11803f2e 	bgeu	r2,r6,8024fa8 <_realloc_r+0x500>
 8024eac:	a8800017 	ldw	r2,0(r21)
 8024eb0:	b0800215 	stw	r2,8(r22)
 8024eb4:	a8800117 	ldw	r2,4(r21)
 8024eb8:	b0800315 	stw	r2,12(r22)
 8024ebc:	008006c4 	movi	r2,27
 8024ec0:	11803f36 	bltu	r2,r6,8024fc0 <_realloc_r+0x518>
 8024ec4:	b0800404 	addi	r2,r22,16
 8024ec8:	ad400204 	addi	r21,r21,8
 8024ecc:	a8c00017 	ldw	r3,0(r21)
 8024ed0:	10c00015 	stw	r3,0(r2)
 8024ed4:	a8c00117 	ldw	r3,4(r21)
 8024ed8:	10c00115 	stw	r3,4(r2)
 8024edc:	a8c00217 	ldw	r3,8(r21)
 8024ee0:	10c00215 	stw	r3,8(r2)
 8024ee4:	b447883a 	add	r3,r22,r17
 8024ee8:	bc45c83a 	sub	r2,r23,r17
 8024eec:	e0c00215 	stw	r3,8(fp)
 8024ef0:	10800054 	ori	r2,r2,1
 8024ef4:	18800115 	stw	r2,4(r3)
 8024ef8:	b0800117 	ldw	r2,4(r22)
 8024efc:	a009883a 	mov	r4,r20
 8024f00:	1080004c 	andi	r2,r2,1
 8024f04:	1462b03a 	or	r17,r2,r17
 8024f08:	b4400115 	stw	r17,4(r22)
 8024f0c:	802659c0 	call	802659c <__malloc_unlock>
 8024f10:	9005883a 	mov	r2,r18
 8024f14:	003f4006 	br	8024c18 <__alt_data_end+0xfffe5818>
 8024f18:	a8c00217 	ldw	r3,8(r21)
 8024f1c:	90c00215 	stw	r3,8(r18)
 8024f20:	a8c00317 	ldw	r3,12(r21)
 8024f24:	90c00315 	stw	r3,12(r18)
 8024f28:	30801126 	beq	r6,r2,8024f70 <_realloc_r+0x4c8>
 8024f2c:	90800404 	addi	r2,r18,16
 8024f30:	a8c00404 	addi	r3,r21,16
 8024f34:	003f1906 	br	8024b9c <__alt_data_end+0xfffe579c>
 8024f38:	90ffff17 	ldw	r3,-4(r18)
 8024f3c:	00bfff04 	movi	r2,-4
 8024f40:	a825883a 	mov	r18,r21
 8024f44:	1884703a 	and	r2,r3,r2
 8024f48:	80a1883a 	add	r16,r16,r2
 8024f4c:	003f2406 	br	8024be0 <__alt_data_end+0xfffe57e0>
 8024f50:	a8800217 	ldw	r2,8(r21)
 8024f54:	b0800415 	stw	r2,16(r22)
 8024f58:	a8800317 	ldw	r2,12(r21)
 8024f5c:	b0800515 	stw	r2,20(r22)
 8024f60:	31000a26 	beq	r6,r4,8024f8c <_realloc_r+0x4e4>
 8024f64:	b0800604 	addi	r2,r22,24
 8024f68:	ad400404 	addi	r21,r21,16
 8024f6c:	003fa906 	br	8024e14 <__alt_data_end+0xfffe5a14>
 8024f70:	a9000417 	ldw	r4,16(r21)
 8024f74:	90800604 	addi	r2,r18,24
 8024f78:	a8c00604 	addi	r3,r21,24
 8024f7c:	91000415 	stw	r4,16(r18)
 8024f80:	a9000517 	ldw	r4,20(r21)
 8024f84:	91000515 	stw	r4,20(r18)
 8024f88:	003f0406 	br	8024b9c <__alt_data_end+0xfffe579c>
 8024f8c:	a8c00417 	ldw	r3,16(r21)
 8024f90:	ad400604 	addi	r21,r21,24
 8024f94:	b0800804 	addi	r2,r22,32
 8024f98:	b0c00615 	stw	r3,24(r22)
 8024f9c:	a8ffff17 	ldw	r3,-4(r21)
 8024fa0:	b0c00715 	stw	r3,28(r22)
 8024fa4:	003f9b06 	br	8024e14 <__alt_data_end+0xfffe5a14>
 8024fa8:	9005883a 	mov	r2,r18
 8024fac:	003fc706 	br	8024ecc <__alt_data_end+0xfffe5acc>
 8024fb0:	a80b883a 	mov	r5,r21
 8024fb4:	9009883a 	mov	r4,r18
 8024fb8:	80248240 	call	8024824 <memmove>
 8024fbc:	003fc906 	br	8024ee4 <__alt_data_end+0xfffe5ae4>
 8024fc0:	a8800217 	ldw	r2,8(r21)
 8024fc4:	b0800415 	stw	r2,16(r22)
 8024fc8:	a8800317 	ldw	r2,12(r21)
 8024fcc:	b0800515 	stw	r2,20(r22)
 8024fd0:	31000726 	beq	r6,r4,8024ff0 <_realloc_r+0x548>
 8024fd4:	b0800604 	addi	r2,r22,24
 8024fd8:	ad400404 	addi	r21,r21,16
 8024fdc:	003fbb06 	br	8024ecc <__alt_data_end+0xfffe5acc>
 8024fe0:	a009883a 	mov	r4,r20
 8024fe4:	802659c0 	call	802659c <__malloc_unlock>
 8024fe8:	0005883a 	mov	r2,zero
 8024fec:	003f0a06 	br	8024c18 <__alt_data_end+0xfffe5818>
 8024ff0:	a8c00417 	ldw	r3,16(r21)
 8024ff4:	ad400604 	addi	r21,r21,24
 8024ff8:	b0800804 	addi	r2,r22,32
 8024ffc:	b0c00615 	stw	r3,24(r22)
 8025000:	a8ffff17 	ldw	r3,-4(r21)
 8025004:	b0c00715 	stw	r3,28(r22)
 8025008:	003fb006 	br	8024ecc <__alt_data_end+0xfffe5acc>

0802500c <_sbrk_r>:
 802500c:	defffd04 	addi	sp,sp,-12
 8025010:	dc000015 	stw	r16,0(sp)
 8025014:	040200f4 	movhi	r16,2051
 8025018:	dc400115 	stw	r17,4(sp)
 802501c:	8435b604 	addi	r16,r16,-10536
 8025020:	2023883a 	mov	r17,r4
 8025024:	2809883a 	mov	r4,r5
 8025028:	dfc00215 	stw	ra,8(sp)
 802502c:	80000015 	stw	zero,0(r16)
 8025030:	80267840 	call	8026784 <sbrk>
 8025034:	00ffffc4 	movi	r3,-1
 8025038:	10c00526 	beq	r2,r3,8025050 <_sbrk_r+0x44>
 802503c:	dfc00217 	ldw	ra,8(sp)
 8025040:	dc400117 	ldw	r17,4(sp)
 8025044:	dc000017 	ldw	r16,0(sp)
 8025048:	dec00304 	addi	sp,sp,12
 802504c:	f800283a 	ret
 8025050:	80c00017 	ldw	r3,0(r16)
 8025054:	183ff926 	beq	r3,zero,802503c <__alt_data_end+0xfffe5c3c>
 8025058:	88c00015 	stw	r3,0(r17)
 802505c:	003ff706 	br	802503c <__alt_data_end+0xfffe5c3c>

08025060 <__sread>:
 8025060:	defffe04 	addi	sp,sp,-8
 8025064:	dc000015 	stw	r16,0(sp)
 8025068:	2821883a 	mov	r16,r5
 802506c:	2940038f 	ldh	r5,14(r5)
 8025070:	dfc00115 	stw	ra,4(sp)
 8025074:	8025da00 	call	8025da0 <_read_r>
 8025078:	10000716 	blt	r2,zero,8025098 <__sread+0x38>
 802507c:	80c01417 	ldw	r3,80(r16)
 8025080:	1887883a 	add	r3,r3,r2
 8025084:	80c01415 	stw	r3,80(r16)
 8025088:	dfc00117 	ldw	ra,4(sp)
 802508c:	dc000017 	ldw	r16,0(sp)
 8025090:	dec00204 	addi	sp,sp,8
 8025094:	f800283a 	ret
 8025098:	80c0030b 	ldhu	r3,12(r16)
 802509c:	18fbffcc 	andi	r3,r3,61439
 80250a0:	80c0030d 	sth	r3,12(r16)
 80250a4:	dfc00117 	ldw	ra,4(sp)
 80250a8:	dc000017 	ldw	r16,0(sp)
 80250ac:	dec00204 	addi	sp,sp,8
 80250b0:	f800283a 	ret

080250b4 <__seofread>:
 80250b4:	0005883a 	mov	r2,zero
 80250b8:	f800283a 	ret

080250bc <__swrite>:
 80250bc:	2880030b 	ldhu	r2,12(r5)
 80250c0:	defffb04 	addi	sp,sp,-20
 80250c4:	dcc00315 	stw	r19,12(sp)
 80250c8:	dc800215 	stw	r18,8(sp)
 80250cc:	dc400115 	stw	r17,4(sp)
 80250d0:	dc000015 	stw	r16,0(sp)
 80250d4:	dfc00415 	stw	ra,16(sp)
 80250d8:	10c0400c 	andi	r3,r2,256
 80250dc:	2821883a 	mov	r16,r5
 80250e0:	2023883a 	mov	r17,r4
 80250e4:	3025883a 	mov	r18,r6
 80250e8:	3827883a 	mov	r19,r7
 80250ec:	18000526 	beq	r3,zero,8025104 <__swrite+0x48>
 80250f0:	2940038f 	ldh	r5,14(r5)
 80250f4:	01c00084 	movi	r7,2
 80250f8:	000d883a 	mov	r6,zero
 80250fc:	8025b840 	call	8025b84 <_lseek_r>
 8025100:	8080030b 	ldhu	r2,12(r16)
 8025104:	8140038f 	ldh	r5,14(r16)
 8025108:	10bbffcc 	andi	r2,r2,61439
 802510c:	980f883a 	mov	r7,r19
 8025110:	900d883a 	mov	r6,r18
 8025114:	8809883a 	mov	r4,r17
 8025118:	8080030d 	sth	r2,12(r16)
 802511c:	dfc00417 	ldw	ra,16(sp)
 8025120:	dcc00317 	ldw	r19,12(sp)
 8025124:	dc800217 	ldw	r18,8(sp)
 8025128:	dc400117 	ldw	r17,4(sp)
 802512c:	dc000017 	ldw	r16,0(sp)
 8025130:	dec00504 	addi	sp,sp,20
 8025134:	802519c1 	jmpi	802519c <_write_r>

08025138 <__sseek>:
 8025138:	defffe04 	addi	sp,sp,-8
 802513c:	dc000015 	stw	r16,0(sp)
 8025140:	2821883a 	mov	r16,r5
 8025144:	2940038f 	ldh	r5,14(r5)
 8025148:	dfc00115 	stw	ra,4(sp)
 802514c:	8025b840 	call	8025b84 <_lseek_r>
 8025150:	00ffffc4 	movi	r3,-1
 8025154:	10c00826 	beq	r2,r3,8025178 <__sseek+0x40>
 8025158:	80c0030b 	ldhu	r3,12(r16)
 802515c:	80801415 	stw	r2,80(r16)
 8025160:	18c40014 	ori	r3,r3,4096
 8025164:	80c0030d 	sth	r3,12(r16)
 8025168:	dfc00117 	ldw	ra,4(sp)
 802516c:	dc000017 	ldw	r16,0(sp)
 8025170:	dec00204 	addi	sp,sp,8
 8025174:	f800283a 	ret
 8025178:	80c0030b 	ldhu	r3,12(r16)
 802517c:	18fbffcc 	andi	r3,r3,61439
 8025180:	80c0030d 	sth	r3,12(r16)
 8025184:	dfc00117 	ldw	ra,4(sp)
 8025188:	dc000017 	ldw	r16,0(sp)
 802518c:	dec00204 	addi	sp,sp,8
 8025190:	f800283a 	ret

08025194 <__sclose>:
 8025194:	2940038f 	ldh	r5,14(r5)
 8025198:	80253501 	jmpi	8025350 <_close_r>

0802519c <_write_r>:
 802519c:	defffd04 	addi	sp,sp,-12
 80251a0:	2805883a 	mov	r2,r5
 80251a4:	dc000015 	stw	r16,0(sp)
 80251a8:	040200f4 	movhi	r16,2051
 80251ac:	dc400115 	stw	r17,4(sp)
 80251b0:	300b883a 	mov	r5,r6
 80251b4:	8435b604 	addi	r16,r16,-10536
 80251b8:	2023883a 	mov	r17,r4
 80251bc:	380d883a 	mov	r6,r7
 80251c0:	1009883a 	mov	r4,r2
 80251c4:	dfc00215 	stw	ra,8(sp)
 80251c8:	80000015 	stw	zero,0(r16)
 80251cc:	8026a440 	call	8026a44 <write>
 80251d0:	00ffffc4 	movi	r3,-1
 80251d4:	10c00526 	beq	r2,r3,80251ec <_write_r+0x50>
 80251d8:	dfc00217 	ldw	ra,8(sp)
 80251dc:	dc400117 	ldw	r17,4(sp)
 80251e0:	dc000017 	ldw	r16,0(sp)
 80251e4:	dec00304 	addi	sp,sp,12
 80251e8:	f800283a 	ret
 80251ec:	80c00017 	ldw	r3,0(r16)
 80251f0:	183ff926 	beq	r3,zero,80251d8 <__alt_data_end+0xfffe5dd8>
 80251f4:	88c00015 	stw	r3,0(r17)
 80251f8:	003ff706 	br	80251d8 <__alt_data_end+0xfffe5dd8>

080251fc <__swsetup_r>:
 80251fc:	008200f4 	movhi	r2,2051
 8025200:	defffd04 	addi	sp,sp,-12
 8025204:	10aee304 	addi	r2,r2,-17524
 8025208:	dc400115 	stw	r17,4(sp)
 802520c:	2023883a 	mov	r17,r4
 8025210:	11000017 	ldw	r4,0(r2)
 8025214:	dc000015 	stw	r16,0(sp)
 8025218:	dfc00215 	stw	ra,8(sp)
 802521c:	2821883a 	mov	r16,r5
 8025220:	20000226 	beq	r4,zero,802522c <__swsetup_r+0x30>
 8025224:	20800e17 	ldw	r2,56(r4)
 8025228:	10003126 	beq	r2,zero,80252f0 <__swsetup_r+0xf4>
 802522c:	8080030b 	ldhu	r2,12(r16)
 8025230:	10c0020c 	andi	r3,r2,8
 8025234:	1009883a 	mov	r4,r2
 8025238:	18000f26 	beq	r3,zero,8025278 <__swsetup_r+0x7c>
 802523c:	80c00417 	ldw	r3,16(r16)
 8025240:	18001526 	beq	r3,zero,8025298 <__swsetup_r+0x9c>
 8025244:	1100004c 	andi	r4,r2,1
 8025248:	20001c1e 	bne	r4,zero,80252bc <__swsetup_r+0xc0>
 802524c:	1080008c 	andi	r2,r2,2
 8025250:	1000291e 	bne	r2,zero,80252f8 <__swsetup_r+0xfc>
 8025254:	80800517 	ldw	r2,20(r16)
 8025258:	80800215 	stw	r2,8(r16)
 802525c:	18001c26 	beq	r3,zero,80252d0 <__swsetup_r+0xd4>
 8025260:	0005883a 	mov	r2,zero
 8025264:	dfc00217 	ldw	ra,8(sp)
 8025268:	dc400117 	ldw	r17,4(sp)
 802526c:	dc000017 	ldw	r16,0(sp)
 8025270:	dec00304 	addi	sp,sp,12
 8025274:	f800283a 	ret
 8025278:	2080040c 	andi	r2,r4,16
 802527c:	10002e26 	beq	r2,zero,8025338 <__swsetup_r+0x13c>
 8025280:	2080010c 	andi	r2,r4,4
 8025284:	10001e1e 	bne	r2,zero,8025300 <__swsetup_r+0x104>
 8025288:	80c00417 	ldw	r3,16(r16)
 802528c:	20800214 	ori	r2,r4,8
 8025290:	8080030d 	sth	r2,12(r16)
 8025294:	183feb1e 	bne	r3,zero,8025244 <__alt_data_end+0xfffe5e44>
 8025298:	1100a00c 	andi	r4,r2,640
 802529c:	01408004 	movi	r5,512
 80252a0:	217fe826 	beq	r4,r5,8025244 <__alt_data_end+0xfffe5e44>
 80252a4:	800b883a 	mov	r5,r16
 80252a8:	8809883a 	mov	r4,r17
 80252ac:	8025be40 	call	8025be4 <__smakebuf_r>
 80252b0:	8080030b 	ldhu	r2,12(r16)
 80252b4:	80c00417 	ldw	r3,16(r16)
 80252b8:	003fe206 	br	8025244 <__alt_data_end+0xfffe5e44>
 80252bc:	80800517 	ldw	r2,20(r16)
 80252c0:	80000215 	stw	zero,8(r16)
 80252c4:	0085c83a 	sub	r2,zero,r2
 80252c8:	80800615 	stw	r2,24(r16)
 80252cc:	183fe41e 	bne	r3,zero,8025260 <__alt_data_end+0xfffe5e60>
 80252d0:	80c0030b 	ldhu	r3,12(r16)
 80252d4:	0005883a 	mov	r2,zero
 80252d8:	1900200c 	andi	r4,r3,128
 80252dc:	203fe126 	beq	r4,zero,8025264 <__alt_data_end+0xfffe5e64>
 80252e0:	18c01014 	ori	r3,r3,64
 80252e4:	80c0030d 	sth	r3,12(r16)
 80252e8:	00bfffc4 	movi	r2,-1
 80252ec:	003fdd06 	br	8025264 <__alt_data_end+0xfffe5e64>
 80252f0:	802374c0 	call	802374c <__sinit>
 80252f4:	003fcd06 	br	802522c <__alt_data_end+0xfffe5e2c>
 80252f8:	0005883a 	mov	r2,zero
 80252fc:	003fd606 	br	8025258 <__alt_data_end+0xfffe5e58>
 8025300:	81400c17 	ldw	r5,48(r16)
 8025304:	28000626 	beq	r5,zero,8025320 <__swsetup_r+0x124>
 8025308:	80801004 	addi	r2,r16,64
 802530c:	28800326 	beq	r5,r2,802531c <__swsetup_r+0x120>
 8025310:	8809883a 	mov	r4,r17
 8025314:	80258740 	call	8025874 <_free_r>
 8025318:	8100030b 	ldhu	r4,12(r16)
 802531c:	80000c15 	stw	zero,48(r16)
 8025320:	80c00417 	ldw	r3,16(r16)
 8025324:	00bff6c4 	movi	r2,-37
 8025328:	1108703a 	and	r4,r2,r4
 802532c:	80000115 	stw	zero,4(r16)
 8025330:	80c00015 	stw	r3,0(r16)
 8025334:	003fd506 	br	802528c <__alt_data_end+0xfffe5e8c>
 8025338:	00800244 	movi	r2,9
 802533c:	88800015 	stw	r2,0(r17)
 8025340:	20801014 	ori	r2,r4,64
 8025344:	8080030d 	sth	r2,12(r16)
 8025348:	00bfffc4 	movi	r2,-1
 802534c:	003fc506 	br	8025264 <__alt_data_end+0xfffe5e64>

08025350 <_close_r>:
 8025350:	defffd04 	addi	sp,sp,-12
 8025354:	dc000015 	stw	r16,0(sp)
 8025358:	040200f4 	movhi	r16,2051
 802535c:	dc400115 	stw	r17,4(sp)
 8025360:	8435b604 	addi	r16,r16,-10536
 8025364:	2023883a 	mov	r17,r4
 8025368:	2809883a 	mov	r4,r5
 802536c:	dfc00215 	stw	ra,8(sp)
 8025370:	80000015 	stw	zero,0(r16)
 8025374:	80260180 	call	8026018 <close>
 8025378:	00ffffc4 	movi	r3,-1
 802537c:	10c00526 	beq	r2,r3,8025394 <_close_r+0x44>
 8025380:	dfc00217 	ldw	ra,8(sp)
 8025384:	dc400117 	ldw	r17,4(sp)
 8025388:	dc000017 	ldw	r16,0(sp)
 802538c:	dec00304 	addi	sp,sp,12
 8025390:	f800283a 	ret
 8025394:	80c00017 	ldw	r3,0(r16)
 8025398:	183ff926 	beq	r3,zero,8025380 <__alt_data_end+0xfffe5f80>
 802539c:	88c00015 	stw	r3,0(r17)
 80253a0:	003ff706 	br	8025380 <__alt_data_end+0xfffe5f80>

080253a4 <_fclose_r>:
 80253a4:	28003926 	beq	r5,zero,802548c <_fclose_r+0xe8>
 80253a8:	defffc04 	addi	sp,sp,-16
 80253ac:	dc400115 	stw	r17,4(sp)
 80253b0:	dc000015 	stw	r16,0(sp)
 80253b4:	dfc00315 	stw	ra,12(sp)
 80253b8:	dc800215 	stw	r18,8(sp)
 80253bc:	2023883a 	mov	r17,r4
 80253c0:	2821883a 	mov	r16,r5
 80253c4:	20000226 	beq	r4,zero,80253d0 <_fclose_r+0x2c>
 80253c8:	20800e17 	ldw	r2,56(r4)
 80253cc:	10002726 	beq	r2,zero,802546c <_fclose_r+0xc8>
 80253d0:	8080030f 	ldh	r2,12(r16)
 80253d4:	1000071e 	bne	r2,zero,80253f4 <_fclose_r+0x50>
 80253d8:	0005883a 	mov	r2,zero
 80253dc:	dfc00317 	ldw	ra,12(sp)
 80253e0:	dc800217 	ldw	r18,8(sp)
 80253e4:	dc400117 	ldw	r17,4(sp)
 80253e8:	dc000017 	ldw	r16,0(sp)
 80253ec:	dec00404 	addi	sp,sp,16
 80253f0:	f800283a 	ret
 80253f4:	800b883a 	mov	r5,r16
 80253f8:	8809883a 	mov	r4,r17
 80253fc:	80254a80 	call	80254a8 <__sflush_r>
 8025400:	1025883a 	mov	r18,r2
 8025404:	80800b17 	ldw	r2,44(r16)
 8025408:	10000426 	beq	r2,zero,802541c <_fclose_r+0x78>
 802540c:	81400717 	ldw	r5,28(r16)
 8025410:	8809883a 	mov	r4,r17
 8025414:	103ee83a 	callr	r2
 8025418:	10001616 	blt	r2,zero,8025474 <_fclose_r+0xd0>
 802541c:	8080030b 	ldhu	r2,12(r16)
 8025420:	1080200c 	andi	r2,r2,128
 8025424:	1000151e 	bne	r2,zero,802547c <_fclose_r+0xd8>
 8025428:	81400c17 	ldw	r5,48(r16)
 802542c:	28000526 	beq	r5,zero,8025444 <_fclose_r+0xa0>
 8025430:	80801004 	addi	r2,r16,64
 8025434:	28800226 	beq	r5,r2,8025440 <_fclose_r+0x9c>
 8025438:	8809883a 	mov	r4,r17
 802543c:	80258740 	call	8025874 <_free_r>
 8025440:	80000c15 	stw	zero,48(r16)
 8025444:	81401117 	ldw	r5,68(r16)
 8025448:	28000326 	beq	r5,zero,8025458 <_fclose_r+0xb4>
 802544c:	8809883a 	mov	r4,r17
 8025450:	80258740 	call	8025874 <_free_r>
 8025454:	80001115 	stw	zero,68(r16)
 8025458:	802375c0 	call	802375c <__sfp_lock_acquire>
 802545c:	8000030d 	sth	zero,12(r16)
 8025460:	80237600 	call	8023760 <__sfp_lock_release>
 8025464:	9005883a 	mov	r2,r18
 8025468:	003fdc06 	br	80253dc <__alt_data_end+0xfffe5fdc>
 802546c:	802374c0 	call	802374c <__sinit>
 8025470:	003fd706 	br	80253d0 <__alt_data_end+0xfffe5fd0>
 8025474:	04bfffc4 	movi	r18,-1
 8025478:	003fe806 	br	802541c <__alt_data_end+0xfffe601c>
 802547c:	81400417 	ldw	r5,16(r16)
 8025480:	8809883a 	mov	r4,r17
 8025484:	80258740 	call	8025874 <_free_r>
 8025488:	003fe706 	br	8025428 <__alt_data_end+0xfffe6028>
 802548c:	0005883a 	mov	r2,zero
 8025490:	f800283a 	ret

08025494 <fclose>:
 8025494:	008200f4 	movhi	r2,2051
 8025498:	10aee304 	addi	r2,r2,-17524
 802549c:	200b883a 	mov	r5,r4
 80254a0:	11000017 	ldw	r4,0(r2)
 80254a4:	80253a41 	jmpi	80253a4 <_fclose_r>

080254a8 <__sflush_r>:
 80254a8:	2880030b 	ldhu	r2,12(r5)
 80254ac:	defffb04 	addi	sp,sp,-20
 80254b0:	dcc00315 	stw	r19,12(sp)
 80254b4:	dc400115 	stw	r17,4(sp)
 80254b8:	dfc00415 	stw	ra,16(sp)
 80254bc:	dc800215 	stw	r18,8(sp)
 80254c0:	dc000015 	stw	r16,0(sp)
 80254c4:	10c0020c 	andi	r3,r2,8
 80254c8:	2823883a 	mov	r17,r5
 80254cc:	2027883a 	mov	r19,r4
 80254d0:	1800311e 	bne	r3,zero,8025598 <__sflush_r+0xf0>
 80254d4:	28c00117 	ldw	r3,4(r5)
 80254d8:	10820014 	ori	r2,r2,2048
 80254dc:	2880030d 	sth	r2,12(r5)
 80254e0:	00c04b0e 	bge	zero,r3,8025610 <__sflush_r+0x168>
 80254e4:	8a000a17 	ldw	r8,40(r17)
 80254e8:	40002326 	beq	r8,zero,8025578 <__sflush_r+0xd0>
 80254ec:	9c000017 	ldw	r16,0(r19)
 80254f0:	10c4000c 	andi	r3,r2,4096
 80254f4:	98000015 	stw	zero,0(r19)
 80254f8:	18004826 	beq	r3,zero,802561c <__sflush_r+0x174>
 80254fc:	89801417 	ldw	r6,80(r17)
 8025500:	10c0010c 	andi	r3,r2,4
 8025504:	18000626 	beq	r3,zero,8025520 <__sflush_r+0x78>
 8025508:	88c00117 	ldw	r3,4(r17)
 802550c:	88800c17 	ldw	r2,48(r17)
 8025510:	30cdc83a 	sub	r6,r6,r3
 8025514:	10000226 	beq	r2,zero,8025520 <__sflush_r+0x78>
 8025518:	88800f17 	ldw	r2,60(r17)
 802551c:	308dc83a 	sub	r6,r6,r2
 8025520:	89400717 	ldw	r5,28(r17)
 8025524:	000f883a 	mov	r7,zero
 8025528:	9809883a 	mov	r4,r19
 802552c:	403ee83a 	callr	r8
 8025530:	00ffffc4 	movi	r3,-1
 8025534:	10c04426 	beq	r2,r3,8025648 <__sflush_r+0x1a0>
 8025538:	88c0030b 	ldhu	r3,12(r17)
 802553c:	89000417 	ldw	r4,16(r17)
 8025540:	88000115 	stw	zero,4(r17)
 8025544:	197dffcc 	andi	r5,r3,63487
 8025548:	8940030d 	sth	r5,12(r17)
 802554c:	89000015 	stw	r4,0(r17)
 8025550:	18c4000c 	andi	r3,r3,4096
 8025554:	18002c1e 	bne	r3,zero,8025608 <__sflush_r+0x160>
 8025558:	89400c17 	ldw	r5,48(r17)
 802555c:	9c000015 	stw	r16,0(r19)
 8025560:	28000526 	beq	r5,zero,8025578 <__sflush_r+0xd0>
 8025564:	88801004 	addi	r2,r17,64
 8025568:	28800226 	beq	r5,r2,8025574 <__sflush_r+0xcc>
 802556c:	9809883a 	mov	r4,r19
 8025570:	80258740 	call	8025874 <_free_r>
 8025574:	88000c15 	stw	zero,48(r17)
 8025578:	0005883a 	mov	r2,zero
 802557c:	dfc00417 	ldw	ra,16(sp)
 8025580:	dcc00317 	ldw	r19,12(sp)
 8025584:	dc800217 	ldw	r18,8(sp)
 8025588:	dc400117 	ldw	r17,4(sp)
 802558c:	dc000017 	ldw	r16,0(sp)
 8025590:	dec00504 	addi	sp,sp,20
 8025594:	f800283a 	ret
 8025598:	2c800417 	ldw	r18,16(r5)
 802559c:	903ff626 	beq	r18,zero,8025578 <__alt_data_end+0xfffe6178>
 80255a0:	2c000017 	ldw	r16,0(r5)
 80255a4:	108000cc 	andi	r2,r2,3
 80255a8:	2c800015 	stw	r18,0(r5)
 80255ac:	84a1c83a 	sub	r16,r16,r18
 80255b0:	1000131e 	bne	r2,zero,8025600 <__sflush_r+0x158>
 80255b4:	28800517 	ldw	r2,20(r5)
 80255b8:	88800215 	stw	r2,8(r17)
 80255bc:	04000316 	blt	zero,r16,80255cc <__sflush_r+0x124>
 80255c0:	003fed06 	br	8025578 <__alt_data_end+0xfffe6178>
 80255c4:	90a5883a 	add	r18,r18,r2
 80255c8:	043feb0e 	bge	zero,r16,8025578 <__alt_data_end+0xfffe6178>
 80255cc:	88800917 	ldw	r2,36(r17)
 80255d0:	89400717 	ldw	r5,28(r17)
 80255d4:	800f883a 	mov	r7,r16
 80255d8:	900d883a 	mov	r6,r18
 80255dc:	9809883a 	mov	r4,r19
 80255e0:	103ee83a 	callr	r2
 80255e4:	80a1c83a 	sub	r16,r16,r2
 80255e8:	00bff616 	blt	zero,r2,80255c4 <__alt_data_end+0xfffe61c4>
 80255ec:	88c0030b 	ldhu	r3,12(r17)
 80255f0:	00bfffc4 	movi	r2,-1
 80255f4:	18c01014 	ori	r3,r3,64
 80255f8:	88c0030d 	sth	r3,12(r17)
 80255fc:	003fdf06 	br	802557c <__alt_data_end+0xfffe617c>
 8025600:	0005883a 	mov	r2,zero
 8025604:	003fec06 	br	80255b8 <__alt_data_end+0xfffe61b8>
 8025608:	88801415 	stw	r2,80(r17)
 802560c:	003fd206 	br	8025558 <__alt_data_end+0xfffe6158>
 8025610:	28c00f17 	ldw	r3,60(r5)
 8025614:	00ffb316 	blt	zero,r3,80254e4 <__alt_data_end+0xfffe60e4>
 8025618:	003fd706 	br	8025578 <__alt_data_end+0xfffe6178>
 802561c:	89400717 	ldw	r5,28(r17)
 8025620:	000d883a 	mov	r6,zero
 8025624:	01c00044 	movi	r7,1
 8025628:	9809883a 	mov	r4,r19
 802562c:	403ee83a 	callr	r8
 8025630:	100d883a 	mov	r6,r2
 8025634:	00bfffc4 	movi	r2,-1
 8025638:	30801426 	beq	r6,r2,802568c <__sflush_r+0x1e4>
 802563c:	8880030b 	ldhu	r2,12(r17)
 8025640:	8a000a17 	ldw	r8,40(r17)
 8025644:	003fae06 	br	8025500 <__alt_data_end+0xfffe6100>
 8025648:	98c00017 	ldw	r3,0(r19)
 802564c:	183fba26 	beq	r3,zero,8025538 <__alt_data_end+0xfffe6138>
 8025650:	01000744 	movi	r4,29
 8025654:	19000626 	beq	r3,r4,8025670 <__sflush_r+0x1c8>
 8025658:	01000584 	movi	r4,22
 802565c:	19000426 	beq	r3,r4,8025670 <__sflush_r+0x1c8>
 8025660:	88c0030b 	ldhu	r3,12(r17)
 8025664:	18c01014 	ori	r3,r3,64
 8025668:	88c0030d 	sth	r3,12(r17)
 802566c:	003fc306 	br	802557c <__alt_data_end+0xfffe617c>
 8025670:	8880030b 	ldhu	r2,12(r17)
 8025674:	88c00417 	ldw	r3,16(r17)
 8025678:	88000115 	stw	zero,4(r17)
 802567c:	10bdffcc 	andi	r2,r2,63487
 8025680:	8880030d 	sth	r2,12(r17)
 8025684:	88c00015 	stw	r3,0(r17)
 8025688:	003fb306 	br	8025558 <__alt_data_end+0xfffe6158>
 802568c:	98800017 	ldw	r2,0(r19)
 8025690:	103fea26 	beq	r2,zero,802563c <__alt_data_end+0xfffe623c>
 8025694:	00c00744 	movi	r3,29
 8025698:	10c00226 	beq	r2,r3,80256a4 <__sflush_r+0x1fc>
 802569c:	00c00584 	movi	r3,22
 80256a0:	10c0031e 	bne	r2,r3,80256b0 <__sflush_r+0x208>
 80256a4:	9c000015 	stw	r16,0(r19)
 80256a8:	0005883a 	mov	r2,zero
 80256ac:	003fb306 	br	802557c <__alt_data_end+0xfffe617c>
 80256b0:	88c0030b 	ldhu	r3,12(r17)
 80256b4:	3005883a 	mov	r2,r6
 80256b8:	18c01014 	ori	r3,r3,64
 80256bc:	88c0030d 	sth	r3,12(r17)
 80256c0:	003fae06 	br	802557c <__alt_data_end+0xfffe617c>

080256c4 <_fflush_r>:
 80256c4:	defffd04 	addi	sp,sp,-12
 80256c8:	dc000115 	stw	r16,4(sp)
 80256cc:	dfc00215 	stw	ra,8(sp)
 80256d0:	2021883a 	mov	r16,r4
 80256d4:	20000226 	beq	r4,zero,80256e0 <_fflush_r+0x1c>
 80256d8:	20800e17 	ldw	r2,56(r4)
 80256dc:	10000c26 	beq	r2,zero,8025710 <_fflush_r+0x4c>
 80256e0:	2880030f 	ldh	r2,12(r5)
 80256e4:	1000051e 	bne	r2,zero,80256fc <_fflush_r+0x38>
 80256e8:	0005883a 	mov	r2,zero
 80256ec:	dfc00217 	ldw	ra,8(sp)
 80256f0:	dc000117 	ldw	r16,4(sp)
 80256f4:	dec00304 	addi	sp,sp,12
 80256f8:	f800283a 	ret
 80256fc:	8009883a 	mov	r4,r16
 8025700:	dfc00217 	ldw	ra,8(sp)
 8025704:	dc000117 	ldw	r16,4(sp)
 8025708:	dec00304 	addi	sp,sp,12
 802570c:	80254a81 	jmpi	80254a8 <__sflush_r>
 8025710:	d9400015 	stw	r5,0(sp)
 8025714:	802374c0 	call	802374c <__sinit>
 8025718:	d9400017 	ldw	r5,0(sp)
 802571c:	003ff006 	br	80256e0 <__alt_data_end+0xfffe62e0>

08025720 <fflush>:
 8025720:	20000526 	beq	r4,zero,8025738 <fflush+0x18>
 8025724:	008200f4 	movhi	r2,2051
 8025728:	10aee304 	addi	r2,r2,-17524
 802572c:	200b883a 	mov	r5,r4
 8025730:	11000017 	ldw	r4,0(r2)
 8025734:	80256c41 	jmpi	80256c4 <_fflush_r>
 8025738:	008200f4 	movhi	r2,2051
 802573c:	10aee204 	addi	r2,r2,-17528
 8025740:	11000017 	ldw	r4,0(r2)
 8025744:	014200b4 	movhi	r5,2050
 8025748:	2955b104 	addi	r5,r5,22212
 802574c:	8023d281 	jmpi	8023d28 <_fwalk_reent>

08025750 <_malloc_trim_r>:
 8025750:	defffb04 	addi	sp,sp,-20
 8025754:	dcc00315 	stw	r19,12(sp)
 8025758:	04c200f4 	movhi	r19,2051
 802575c:	dc800215 	stw	r18,8(sp)
 8025760:	dc400115 	stw	r17,4(sp)
 8025764:	dc000015 	stw	r16,0(sp)
 8025768:	dfc00415 	stw	ra,16(sp)
 802576c:	2821883a 	mov	r16,r5
 8025770:	9ce93a04 	addi	r19,r19,-23320
 8025774:	2025883a 	mov	r18,r4
 8025778:	80265780 	call	8026578 <__malloc_lock>
 802577c:	98800217 	ldw	r2,8(r19)
 8025780:	14400117 	ldw	r17,4(r2)
 8025784:	00bfff04 	movi	r2,-4
 8025788:	88a2703a 	and	r17,r17,r2
 802578c:	8c21c83a 	sub	r16,r17,r16
 8025790:	8403fbc4 	addi	r16,r16,4079
 8025794:	8020d33a 	srli	r16,r16,12
 8025798:	0083ffc4 	movi	r2,4095
 802579c:	843fffc4 	addi	r16,r16,-1
 80257a0:	8020933a 	slli	r16,r16,12
 80257a4:	1400060e 	bge	r2,r16,80257c0 <_malloc_trim_r+0x70>
 80257a8:	000b883a 	mov	r5,zero
 80257ac:	9009883a 	mov	r4,r18
 80257b0:	802500c0 	call	802500c <_sbrk_r>
 80257b4:	98c00217 	ldw	r3,8(r19)
 80257b8:	1c47883a 	add	r3,r3,r17
 80257bc:	10c00a26 	beq	r2,r3,80257e8 <_malloc_trim_r+0x98>
 80257c0:	9009883a 	mov	r4,r18
 80257c4:	802659c0 	call	802659c <__malloc_unlock>
 80257c8:	0005883a 	mov	r2,zero
 80257cc:	dfc00417 	ldw	ra,16(sp)
 80257d0:	dcc00317 	ldw	r19,12(sp)
 80257d4:	dc800217 	ldw	r18,8(sp)
 80257d8:	dc400117 	ldw	r17,4(sp)
 80257dc:	dc000017 	ldw	r16,0(sp)
 80257e0:	dec00504 	addi	sp,sp,20
 80257e4:	f800283a 	ret
 80257e8:	040bc83a 	sub	r5,zero,r16
 80257ec:	9009883a 	mov	r4,r18
 80257f0:	802500c0 	call	802500c <_sbrk_r>
 80257f4:	00ffffc4 	movi	r3,-1
 80257f8:	10c00d26 	beq	r2,r3,8025830 <_malloc_trim_r+0xe0>
 80257fc:	00c200f4 	movhi	r3,2051
 8025800:	18f5c404 	addi	r3,r3,-10480
 8025804:	18800017 	ldw	r2,0(r3)
 8025808:	99000217 	ldw	r4,8(r19)
 802580c:	8c23c83a 	sub	r17,r17,r16
 8025810:	8c400054 	ori	r17,r17,1
 8025814:	1421c83a 	sub	r16,r2,r16
 8025818:	24400115 	stw	r17,4(r4)
 802581c:	9009883a 	mov	r4,r18
 8025820:	1c000015 	stw	r16,0(r3)
 8025824:	802659c0 	call	802659c <__malloc_unlock>
 8025828:	00800044 	movi	r2,1
 802582c:	003fe706 	br	80257cc <__alt_data_end+0xfffe63cc>
 8025830:	000b883a 	mov	r5,zero
 8025834:	9009883a 	mov	r4,r18
 8025838:	802500c0 	call	802500c <_sbrk_r>
 802583c:	99000217 	ldw	r4,8(r19)
 8025840:	014003c4 	movi	r5,15
 8025844:	1107c83a 	sub	r3,r2,r4
 8025848:	28ffdd0e 	bge	r5,r3,80257c0 <__alt_data_end+0xfffe63c0>
 802584c:	014200f4 	movhi	r5,2051
 8025850:	296ee404 	addi	r5,r5,-17520
 8025854:	29400017 	ldw	r5,0(r5)
 8025858:	18c00054 	ori	r3,r3,1
 802585c:	20c00115 	stw	r3,4(r4)
 8025860:	00c200f4 	movhi	r3,2051
 8025864:	1145c83a 	sub	r2,r2,r5
 8025868:	18f5c404 	addi	r3,r3,-10480
 802586c:	18800015 	stw	r2,0(r3)
 8025870:	003fd306 	br	80257c0 <__alt_data_end+0xfffe63c0>

08025874 <_free_r>:
 8025874:	28004126 	beq	r5,zero,802597c <_free_r+0x108>
 8025878:	defffd04 	addi	sp,sp,-12
 802587c:	dc400115 	stw	r17,4(sp)
 8025880:	dc000015 	stw	r16,0(sp)
 8025884:	2023883a 	mov	r17,r4
 8025888:	2821883a 	mov	r16,r5
 802588c:	dfc00215 	stw	ra,8(sp)
 8025890:	80265780 	call	8026578 <__malloc_lock>
 8025894:	81ffff17 	ldw	r7,-4(r16)
 8025898:	00bfff84 	movi	r2,-2
 802589c:	010200f4 	movhi	r4,2051
 80258a0:	81bffe04 	addi	r6,r16,-8
 80258a4:	3884703a 	and	r2,r7,r2
 80258a8:	21293a04 	addi	r4,r4,-23320
 80258ac:	308b883a 	add	r5,r6,r2
 80258b0:	2a400117 	ldw	r9,4(r5)
 80258b4:	22000217 	ldw	r8,8(r4)
 80258b8:	00ffff04 	movi	r3,-4
 80258bc:	48c6703a 	and	r3,r9,r3
 80258c0:	2a005726 	beq	r5,r8,8025a20 <_free_r+0x1ac>
 80258c4:	28c00115 	stw	r3,4(r5)
 80258c8:	39c0004c 	andi	r7,r7,1
 80258cc:	3800091e 	bne	r7,zero,80258f4 <_free_r+0x80>
 80258d0:	823ffe17 	ldw	r8,-8(r16)
 80258d4:	22400204 	addi	r9,r4,8
 80258d8:	320dc83a 	sub	r6,r6,r8
 80258dc:	31c00217 	ldw	r7,8(r6)
 80258e0:	1205883a 	add	r2,r2,r8
 80258e4:	3a406526 	beq	r7,r9,8025a7c <_free_r+0x208>
 80258e8:	32000317 	ldw	r8,12(r6)
 80258ec:	3a000315 	stw	r8,12(r7)
 80258f0:	41c00215 	stw	r7,8(r8)
 80258f4:	28cf883a 	add	r7,r5,r3
 80258f8:	39c00117 	ldw	r7,4(r7)
 80258fc:	39c0004c 	andi	r7,r7,1
 8025900:	38003a26 	beq	r7,zero,80259ec <_free_r+0x178>
 8025904:	10c00054 	ori	r3,r2,1
 8025908:	30c00115 	stw	r3,4(r6)
 802590c:	3087883a 	add	r3,r6,r2
 8025910:	18800015 	stw	r2,0(r3)
 8025914:	00c07fc4 	movi	r3,511
 8025918:	18801936 	bltu	r3,r2,8025980 <_free_r+0x10c>
 802591c:	1004d0fa 	srli	r2,r2,3
 8025920:	01c00044 	movi	r7,1
 8025924:	21400117 	ldw	r5,4(r4)
 8025928:	10c00044 	addi	r3,r2,1
 802592c:	18c7883a 	add	r3,r3,r3
 8025930:	1005d0ba 	srai	r2,r2,2
 8025934:	18c7883a 	add	r3,r3,r3
 8025938:	18c7883a 	add	r3,r3,r3
 802593c:	1907883a 	add	r3,r3,r4
 8025940:	3884983a 	sll	r2,r7,r2
 8025944:	19c00017 	ldw	r7,0(r3)
 8025948:	1a3ffe04 	addi	r8,r3,-8
 802594c:	1144b03a 	or	r2,r2,r5
 8025950:	32000315 	stw	r8,12(r6)
 8025954:	31c00215 	stw	r7,8(r6)
 8025958:	20800115 	stw	r2,4(r4)
 802595c:	19800015 	stw	r6,0(r3)
 8025960:	39800315 	stw	r6,12(r7)
 8025964:	8809883a 	mov	r4,r17
 8025968:	dfc00217 	ldw	ra,8(sp)
 802596c:	dc400117 	ldw	r17,4(sp)
 8025970:	dc000017 	ldw	r16,0(sp)
 8025974:	dec00304 	addi	sp,sp,12
 8025978:	802659c1 	jmpi	802659c <__malloc_unlock>
 802597c:	f800283a 	ret
 8025980:	100ad27a 	srli	r5,r2,9
 8025984:	00c00104 	movi	r3,4
 8025988:	19404a36 	bltu	r3,r5,8025ab4 <_free_r+0x240>
 802598c:	100ad1ba 	srli	r5,r2,6
 8025990:	28c00e44 	addi	r3,r5,57
 8025994:	18c7883a 	add	r3,r3,r3
 8025998:	29400e04 	addi	r5,r5,56
 802599c:	18c7883a 	add	r3,r3,r3
 80259a0:	18c7883a 	add	r3,r3,r3
 80259a4:	1909883a 	add	r4,r3,r4
 80259a8:	20c00017 	ldw	r3,0(r4)
 80259ac:	01c200f4 	movhi	r7,2051
 80259b0:	213ffe04 	addi	r4,r4,-8
 80259b4:	39e93a04 	addi	r7,r7,-23320
 80259b8:	20c04426 	beq	r4,r3,8025acc <_free_r+0x258>
 80259bc:	01ffff04 	movi	r7,-4
 80259c0:	19400117 	ldw	r5,4(r3)
 80259c4:	29ca703a 	and	r5,r5,r7
 80259c8:	1140022e 	bgeu	r2,r5,80259d4 <_free_r+0x160>
 80259cc:	18c00217 	ldw	r3,8(r3)
 80259d0:	20fffb1e 	bne	r4,r3,80259c0 <__alt_data_end+0xfffe65c0>
 80259d4:	19000317 	ldw	r4,12(r3)
 80259d8:	31000315 	stw	r4,12(r6)
 80259dc:	30c00215 	stw	r3,8(r6)
 80259e0:	21800215 	stw	r6,8(r4)
 80259e4:	19800315 	stw	r6,12(r3)
 80259e8:	003fde06 	br	8025964 <__alt_data_end+0xfffe6564>
 80259ec:	29c00217 	ldw	r7,8(r5)
 80259f0:	10c5883a 	add	r2,r2,r3
 80259f4:	00c200f4 	movhi	r3,2051
 80259f8:	18e93c04 	addi	r3,r3,-23312
 80259fc:	38c03b26 	beq	r7,r3,8025aec <_free_r+0x278>
 8025a00:	2a000317 	ldw	r8,12(r5)
 8025a04:	11400054 	ori	r5,r2,1
 8025a08:	3087883a 	add	r3,r6,r2
 8025a0c:	3a000315 	stw	r8,12(r7)
 8025a10:	41c00215 	stw	r7,8(r8)
 8025a14:	31400115 	stw	r5,4(r6)
 8025a18:	18800015 	stw	r2,0(r3)
 8025a1c:	003fbd06 	br	8025914 <__alt_data_end+0xfffe6514>
 8025a20:	39c0004c 	andi	r7,r7,1
 8025a24:	10c5883a 	add	r2,r2,r3
 8025a28:	3800071e 	bne	r7,zero,8025a48 <_free_r+0x1d4>
 8025a2c:	81fffe17 	ldw	r7,-8(r16)
 8025a30:	31cdc83a 	sub	r6,r6,r7
 8025a34:	30c00317 	ldw	r3,12(r6)
 8025a38:	31400217 	ldw	r5,8(r6)
 8025a3c:	11c5883a 	add	r2,r2,r7
 8025a40:	28c00315 	stw	r3,12(r5)
 8025a44:	19400215 	stw	r5,8(r3)
 8025a48:	10c00054 	ori	r3,r2,1
 8025a4c:	30c00115 	stw	r3,4(r6)
 8025a50:	00c200f4 	movhi	r3,2051
 8025a54:	18eee504 	addi	r3,r3,-17516
 8025a58:	18c00017 	ldw	r3,0(r3)
 8025a5c:	21800215 	stw	r6,8(r4)
 8025a60:	10ffc036 	bltu	r2,r3,8025964 <__alt_data_end+0xfffe6564>
 8025a64:	008200f4 	movhi	r2,2051
 8025a68:	10b5b504 	addi	r2,r2,-10540
 8025a6c:	11400017 	ldw	r5,0(r2)
 8025a70:	8809883a 	mov	r4,r17
 8025a74:	80257500 	call	8025750 <_malloc_trim_r>
 8025a78:	003fba06 	br	8025964 <__alt_data_end+0xfffe6564>
 8025a7c:	28c9883a 	add	r4,r5,r3
 8025a80:	21000117 	ldw	r4,4(r4)
 8025a84:	2100004c 	andi	r4,r4,1
 8025a88:	2000391e 	bne	r4,zero,8025b70 <_free_r+0x2fc>
 8025a8c:	29c00217 	ldw	r7,8(r5)
 8025a90:	29000317 	ldw	r4,12(r5)
 8025a94:	1885883a 	add	r2,r3,r2
 8025a98:	10c00054 	ori	r3,r2,1
 8025a9c:	39000315 	stw	r4,12(r7)
 8025aa0:	21c00215 	stw	r7,8(r4)
 8025aa4:	30c00115 	stw	r3,4(r6)
 8025aa8:	308d883a 	add	r6,r6,r2
 8025aac:	30800015 	stw	r2,0(r6)
 8025ab0:	003fac06 	br	8025964 <__alt_data_end+0xfffe6564>
 8025ab4:	00c00504 	movi	r3,20
 8025ab8:	19401536 	bltu	r3,r5,8025b10 <_free_r+0x29c>
 8025abc:	28c01704 	addi	r3,r5,92
 8025ac0:	18c7883a 	add	r3,r3,r3
 8025ac4:	294016c4 	addi	r5,r5,91
 8025ac8:	003fb406 	br	802599c <__alt_data_end+0xfffe659c>
 8025acc:	280bd0ba 	srai	r5,r5,2
 8025ad0:	00c00044 	movi	r3,1
 8025ad4:	38800117 	ldw	r2,4(r7)
 8025ad8:	194a983a 	sll	r5,r3,r5
 8025adc:	2007883a 	mov	r3,r4
 8025ae0:	2884b03a 	or	r2,r5,r2
 8025ae4:	38800115 	stw	r2,4(r7)
 8025ae8:	003fbb06 	br	80259d8 <__alt_data_end+0xfffe65d8>
 8025aec:	21800515 	stw	r6,20(r4)
 8025af0:	21800415 	stw	r6,16(r4)
 8025af4:	10c00054 	ori	r3,r2,1
 8025af8:	31c00315 	stw	r7,12(r6)
 8025afc:	31c00215 	stw	r7,8(r6)
 8025b00:	30c00115 	stw	r3,4(r6)
 8025b04:	308d883a 	add	r6,r6,r2
 8025b08:	30800015 	stw	r2,0(r6)
 8025b0c:	003f9506 	br	8025964 <__alt_data_end+0xfffe6564>
 8025b10:	00c01504 	movi	r3,84
 8025b14:	19400536 	bltu	r3,r5,8025b2c <_free_r+0x2b8>
 8025b18:	100ad33a 	srli	r5,r2,12
 8025b1c:	28c01bc4 	addi	r3,r5,111
 8025b20:	18c7883a 	add	r3,r3,r3
 8025b24:	29401b84 	addi	r5,r5,110
 8025b28:	003f9c06 	br	802599c <__alt_data_end+0xfffe659c>
 8025b2c:	00c05504 	movi	r3,340
 8025b30:	19400536 	bltu	r3,r5,8025b48 <_free_r+0x2d4>
 8025b34:	100ad3fa 	srli	r5,r2,15
 8025b38:	28c01e04 	addi	r3,r5,120
 8025b3c:	18c7883a 	add	r3,r3,r3
 8025b40:	29401dc4 	addi	r5,r5,119
 8025b44:	003f9506 	br	802599c <__alt_data_end+0xfffe659c>
 8025b48:	00c15504 	movi	r3,1364
 8025b4c:	19400536 	bltu	r3,r5,8025b64 <_free_r+0x2f0>
 8025b50:	100ad4ba 	srli	r5,r2,18
 8025b54:	28c01f44 	addi	r3,r5,125
 8025b58:	18c7883a 	add	r3,r3,r3
 8025b5c:	29401f04 	addi	r5,r5,124
 8025b60:	003f8e06 	br	802599c <__alt_data_end+0xfffe659c>
 8025b64:	00c03f84 	movi	r3,254
 8025b68:	01401f84 	movi	r5,126
 8025b6c:	003f8b06 	br	802599c <__alt_data_end+0xfffe659c>
 8025b70:	10c00054 	ori	r3,r2,1
 8025b74:	30c00115 	stw	r3,4(r6)
 8025b78:	308d883a 	add	r6,r6,r2
 8025b7c:	30800015 	stw	r2,0(r6)
 8025b80:	003f7806 	br	8025964 <__alt_data_end+0xfffe6564>

08025b84 <_lseek_r>:
 8025b84:	defffd04 	addi	sp,sp,-12
 8025b88:	2805883a 	mov	r2,r5
 8025b8c:	dc000015 	stw	r16,0(sp)
 8025b90:	040200f4 	movhi	r16,2051
 8025b94:	dc400115 	stw	r17,4(sp)
 8025b98:	300b883a 	mov	r5,r6
 8025b9c:	8435b604 	addi	r16,r16,-10536
 8025ba0:	2023883a 	mov	r17,r4
 8025ba4:	380d883a 	mov	r6,r7
 8025ba8:	1009883a 	mov	r4,r2
 8025bac:	dfc00215 	stw	ra,8(sp)
 8025bb0:	80000015 	stw	zero,0(r16)
 8025bb4:	80264200 	call	8026420 <lseek>
 8025bb8:	00ffffc4 	movi	r3,-1
 8025bbc:	10c00526 	beq	r2,r3,8025bd4 <_lseek_r+0x50>
 8025bc0:	dfc00217 	ldw	ra,8(sp)
 8025bc4:	dc400117 	ldw	r17,4(sp)
 8025bc8:	dc000017 	ldw	r16,0(sp)
 8025bcc:	dec00304 	addi	sp,sp,12
 8025bd0:	f800283a 	ret
 8025bd4:	80c00017 	ldw	r3,0(r16)
 8025bd8:	183ff926 	beq	r3,zero,8025bc0 <__alt_data_end+0xfffe67c0>
 8025bdc:	88c00015 	stw	r3,0(r17)
 8025be0:	003ff706 	br	8025bc0 <__alt_data_end+0xfffe67c0>

08025be4 <__smakebuf_r>:
 8025be4:	2880030b 	ldhu	r2,12(r5)
 8025be8:	10c0008c 	andi	r3,r2,2
 8025bec:	1800411e 	bne	r3,zero,8025cf4 <__smakebuf_r+0x110>
 8025bf0:	deffec04 	addi	sp,sp,-80
 8025bf4:	dc000f15 	stw	r16,60(sp)
 8025bf8:	2821883a 	mov	r16,r5
 8025bfc:	2940038f 	ldh	r5,14(r5)
 8025c00:	dc401015 	stw	r17,64(sp)
 8025c04:	dfc01315 	stw	ra,76(sp)
 8025c08:	dcc01215 	stw	r19,72(sp)
 8025c0c:	dc801115 	stw	r18,68(sp)
 8025c10:	2023883a 	mov	r17,r4
 8025c14:	28001c16 	blt	r5,zero,8025c88 <__smakebuf_r+0xa4>
 8025c18:	d80d883a 	mov	r6,sp
 8025c1c:	8025e000 	call	8025e00 <_fstat_r>
 8025c20:	10001816 	blt	r2,zero,8025c84 <__smakebuf_r+0xa0>
 8025c24:	d8800117 	ldw	r2,4(sp)
 8025c28:	00e00014 	movui	r3,32768
 8025c2c:	10bc000c 	andi	r2,r2,61440
 8025c30:	14c80020 	cmpeqi	r19,r2,8192
 8025c34:	10c03726 	beq	r2,r3,8025d14 <__smakebuf_r+0x130>
 8025c38:	80c0030b 	ldhu	r3,12(r16)
 8025c3c:	18c20014 	ori	r3,r3,2048
 8025c40:	80c0030d 	sth	r3,12(r16)
 8025c44:	00c80004 	movi	r3,8192
 8025c48:	10c0521e 	bne	r2,r3,8025d94 <__smakebuf_r+0x1b0>
 8025c4c:	8140038f 	ldh	r5,14(r16)
 8025c50:	8809883a 	mov	r4,r17
 8025c54:	8025e5c0 	call	8025e5c <_isatty_r>
 8025c58:	10004c26 	beq	r2,zero,8025d8c <__smakebuf_r+0x1a8>
 8025c5c:	8080030b 	ldhu	r2,12(r16)
 8025c60:	80c010c4 	addi	r3,r16,67
 8025c64:	80c00015 	stw	r3,0(r16)
 8025c68:	10800054 	ori	r2,r2,1
 8025c6c:	8080030d 	sth	r2,12(r16)
 8025c70:	00800044 	movi	r2,1
 8025c74:	80c00415 	stw	r3,16(r16)
 8025c78:	80800515 	stw	r2,20(r16)
 8025c7c:	04810004 	movi	r18,1024
 8025c80:	00000706 	br	8025ca0 <__smakebuf_r+0xbc>
 8025c84:	8080030b 	ldhu	r2,12(r16)
 8025c88:	10c0200c 	andi	r3,r2,128
 8025c8c:	18001f1e 	bne	r3,zero,8025d0c <__smakebuf_r+0x128>
 8025c90:	04810004 	movi	r18,1024
 8025c94:	10820014 	ori	r2,r2,2048
 8025c98:	8080030d 	sth	r2,12(r16)
 8025c9c:	0027883a 	mov	r19,zero
 8025ca0:	900b883a 	mov	r5,r18
 8025ca4:	8809883a 	mov	r4,r17
 8025ca8:	8023dec0 	call	8023dec <_malloc_r>
 8025cac:	10002c26 	beq	r2,zero,8025d60 <__smakebuf_r+0x17c>
 8025cb0:	80c0030b 	ldhu	r3,12(r16)
 8025cb4:	010200b4 	movhi	r4,2050
 8025cb8:	210cfd04 	addi	r4,r4,13300
 8025cbc:	89000f15 	stw	r4,60(r17)
 8025cc0:	18c02014 	ori	r3,r3,128
 8025cc4:	80c0030d 	sth	r3,12(r16)
 8025cc8:	80800015 	stw	r2,0(r16)
 8025ccc:	80800415 	stw	r2,16(r16)
 8025cd0:	84800515 	stw	r18,20(r16)
 8025cd4:	98001a1e 	bne	r19,zero,8025d40 <__smakebuf_r+0x15c>
 8025cd8:	dfc01317 	ldw	ra,76(sp)
 8025cdc:	dcc01217 	ldw	r19,72(sp)
 8025ce0:	dc801117 	ldw	r18,68(sp)
 8025ce4:	dc401017 	ldw	r17,64(sp)
 8025ce8:	dc000f17 	ldw	r16,60(sp)
 8025cec:	dec01404 	addi	sp,sp,80
 8025cf0:	f800283a 	ret
 8025cf4:	288010c4 	addi	r2,r5,67
 8025cf8:	28800015 	stw	r2,0(r5)
 8025cfc:	28800415 	stw	r2,16(r5)
 8025d00:	00800044 	movi	r2,1
 8025d04:	28800515 	stw	r2,20(r5)
 8025d08:	f800283a 	ret
 8025d0c:	04801004 	movi	r18,64
 8025d10:	003fe006 	br	8025c94 <__alt_data_end+0xfffe6894>
 8025d14:	81000a17 	ldw	r4,40(r16)
 8025d18:	00c200b4 	movhi	r3,2050
 8025d1c:	18d44e04 	addi	r3,r3,20792
 8025d20:	20ffc51e 	bne	r4,r3,8025c38 <__alt_data_end+0xfffe6838>
 8025d24:	8080030b 	ldhu	r2,12(r16)
 8025d28:	04810004 	movi	r18,1024
 8025d2c:	84801315 	stw	r18,76(r16)
 8025d30:	1484b03a 	or	r2,r2,r18
 8025d34:	8080030d 	sth	r2,12(r16)
 8025d38:	0027883a 	mov	r19,zero
 8025d3c:	003fd806 	br	8025ca0 <__alt_data_end+0xfffe68a0>
 8025d40:	8140038f 	ldh	r5,14(r16)
 8025d44:	8809883a 	mov	r4,r17
 8025d48:	8025e5c0 	call	8025e5c <_isatty_r>
 8025d4c:	103fe226 	beq	r2,zero,8025cd8 <__alt_data_end+0xfffe68d8>
 8025d50:	8080030b 	ldhu	r2,12(r16)
 8025d54:	10800054 	ori	r2,r2,1
 8025d58:	8080030d 	sth	r2,12(r16)
 8025d5c:	003fde06 	br	8025cd8 <__alt_data_end+0xfffe68d8>
 8025d60:	8080030b 	ldhu	r2,12(r16)
 8025d64:	10c0800c 	andi	r3,r2,512
 8025d68:	183fdb1e 	bne	r3,zero,8025cd8 <__alt_data_end+0xfffe68d8>
 8025d6c:	10800094 	ori	r2,r2,2
 8025d70:	80c010c4 	addi	r3,r16,67
 8025d74:	8080030d 	sth	r2,12(r16)
 8025d78:	00800044 	movi	r2,1
 8025d7c:	80c00015 	stw	r3,0(r16)
 8025d80:	80c00415 	stw	r3,16(r16)
 8025d84:	80800515 	stw	r2,20(r16)
 8025d88:	003fd306 	br	8025cd8 <__alt_data_end+0xfffe68d8>
 8025d8c:	04810004 	movi	r18,1024
 8025d90:	003fc306 	br	8025ca0 <__alt_data_end+0xfffe68a0>
 8025d94:	0027883a 	mov	r19,zero
 8025d98:	04810004 	movi	r18,1024
 8025d9c:	003fc006 	br	8025ca0 <__alt_data_end+0xfffe68a0>

08025da0 <_read_r>:
 8025da0:	defffd04 	addi	sp,sp,-12
 8025da4:	2805883a 	mov	r2,r5
 8025da8:	dc000015 	stw	r16,0(sp)
 8025dac:	040200f4 	movhi	r16,2051
 8025db0:	dc400115 	stw	r17,4(sp)
 8025db4:	300b883a 	mov	r5,r6
 8025db8:	8435b604 	addi	r16,r16,-10536
 8025dbc:	2023883a 	mov	r17,r4
 8025dc0:	380d883a 	mov	r6,r7
 8025dc4:	1009883a 	mov	r4,r2
 8025dc8:	dfc00215 	stw	ra,8(sp)
 8025dcc:	80000015 	stw	zero,0(r16)
 8025dd0:	80265fc0 	call	80265fc <read>
 8025dd4:	00ffffc4 	movi	r3,-1
 8025dd8:	10c00526 	beq	r2,r3,8025df0 <_read_r+0x50>
 8025ddc:	dfc00217 	ldw	ra,8(sp)
 8025de0:	dc400117 	ldw	r17,4(sp)
 8025de4:	dc000017 	ldw	r16,0(sp)
 8025de8:	dec00304 	addi	sp,sp,12
 8025dec:	f800283a 	ret
 8025df0:	80c00017 	ldw	r3,0(r16)
 8025df4:	183ff926 	beq	r3,zero,8025ddc <__alt_data_end+0xfffe69dc>
 8025df8:	88c00015 	stw	r3,0(r17)
 8025dfc:	003ff706 	br	8025ddc <__alt_data_end+0xfffe69dc>

08025e00 <_fstat_r>:
 8025e00:	defffd04 	addi	sp,sp,-12
 8025e04:	2805883a 	mov	r2,r5
 8025e08:	dc000015 	stw	r16,0(sp)
 8025e0c:	040200f4 	movhi	r16,2051
 8025e10:	dc400115 	stw	r17,4(sp)
 8025e14:	8435b604 	addi	r16,r16,-10536
 8025e18:	2023883a 	mov	r17,r4
 8025e1c:	300b883a 	mov	r5,r6
 8025e20:	1009883a 	mov	r4,r2
 8025e24:	dfc00215 	stw	ra,8(sp)
 8025e28:	80000015 	stw	zero,0(r16)
 8025e2c:	80261580 	call	8026158 <fstat>
 8025e30:	00ffffc4 	movi	r3,-1
 8025e34:	10c00526 	beq	r2,r3,8025e4c <_fstat_r+0x4c>
 8025e38:	dfc00217 	ldw	ra,8(sp)
 8025e3c:	dc400117 	ldw	r17,4(sp)
 8025e40:	dc000017 	ldw	r16,0(sp)
 8025e44:	dec00304 	addi	sp,sp,12
 8025e48:	f800283a 	ret
 8025e4c:	80c00017 	ldw	r3,0(r16)
 8025e50:	183ff926 	beq	r3,zero,8025e38 <__alt_data_end+0xfffe6a38>
 8025e54:	88c00015 	stw	r3,0(r17)
 8025e58:	003ff706 	br	8025e38 <__alt_data_end+0xfffe6a38>

08025e5c <_isatty_r>:
 8025e5c:	defffd04 	addi	sp,sp,-12
 8025e60:	dc000015 	stw	r16,0(sp)
 8025e64:	040200f4 	movhi	r16,2051
 8025e68:	dc400115 	stw	r17,4(sp)
 8025e6c:	8435b604 	addi	r16,r16,-10536
 8025e70:	2023883a 	mov	r17,r4
 8025e74:	2809883a 	mov	r4,r5
 8025e78:	dfc00215 	stw	ra,8(sp)
 8025e7c:	80000015 	stw	zero,0(r16)
 8025e80:	802624c0 	call	802624c <isatty>
 8025e84:	00ffffc4 	movi	r3,-1
 8025e88:	10c00526 	beq	r2,r3,8025ea0 <_isatty_r+0x44>
 8025e8c:	dfc00217 	ldw	ra,8(sp)
 8025e90:	dc400117 	ldw	r17,4(sp)
 8025e94:	dc000017 	ldw	r16,0(sp)
 8025e98:	dec00304 	addi	sp,sp,12
 8025e9c:	f800283a 	ret
 8025ea0:	80c00017 	ldw	r3,0(r16)
 8025ea4:	183ff926 	beq	r3,zero,8025e8c <__alt_data_end+0xfffe6a8c>
 8025ea8:	88c00015 	stw	r3,0(r17)
 8025eac:	003ff706 	br	8025e8c <__alt_data_end+0xfffe6a8c>

08025eb0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8025eb0:	defff504 	addi	sp,sp,-44
 8025eb4:	df000a15 	stw	fp,40(sp)
 8025eb8:	df000a04 	addi	fp,sp,40
 8025ebc:	e13ffc15 	stw	r4,-16(fp)
 8025ec0:	e17ffd15 	stw	r5,-12(fp)
 8025ec4:	e1bffe15 	stw	r6,-8(fp)
 8025ec8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8025ecc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8025ed0:	d0a6d817 	ldw	r2,-25760(gp)
  
  if (alt_ticks_per_second ())
 8025ed4:	10003c26 	beq	r2,zero,8025fc8 <alt_alarm_start+0x118>
  {
    if (alarm)
 8025ed8:	e0bffc17 	ldw	r2,-16(fp)
 8025edc:	10003826 	beq	r2,zero,8025fc0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8025ee0:	e0bffc17 	ldw	r2,-16(fp)
 8025ee4:	e0fffe17 	ldw	r3,-8(fp)
 8025ee8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8025eec:	e0bffc17 	ldw	r2,-16(fp)
 8025ef0:	e0ffff17 	ldw	r3,-4(fp)
 8025ef4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8025ef8:	0005303a 	rdctl	r2,status
 8025efc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8025f00:	e0fff917 	ldw	r3,-28(fp)
 8025f04:	00bfff84 	movi	r2,-2
 8025f08:	1884703a 	and	r2,r3,r2
 8025f0c:	1001703a 	wrctl	status,r2
  
  return context;
 8025f10:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8025f14:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8025f18:	d0a6d917 	ldw	r2,-25756(gp)
      
      current_nticks = alt_nticks();
 8025f1c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8025f20:	e0fffd17 	ldw	r3,-12(fp)
 8025f24:	e0bff617 	ldw	r2,-40(fp)
 8025f28:	1885883a 	add	r2,r3,r2
 8025f2c:	10c00044 	addi	r3,r2,1
 8025f30:	e0bffc17 	ldw	r2,-16(fp)
 8025f34:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8025f38:	e0bffc17 	ldw	r2,-16(fp)
 8025f3c:	10c00217 	ldw	r3,8(r2)
 8025f40:	e0bff617 	ldw	r2,-40(fp)
 8025f44:	1880042e 	bgeu	r3,r2,8025f58 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8025f48:	e0bffc17 	ldw	r2,-16(fp)
 8025f4c:	00c00044 	movi	r3,1
 8025f50:	10c00405 	stb	r3,16(r2)
 8025f54:	00000206 	br	8025f60 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8025f58:	e0bffc17 	ldw	r2,-16(fp)
 8025f5c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8025f60:	e0bffc17 	ldw	r2,-16(fp)
 8025f64:	d0e00b04 	addi	r3,gp,-32724
 8025f68:	e0fffa15 	stw	r3,-24(fp)
 8025f6c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8025f70:	e0bffb17 	ldw	r2,-20(fp)
 8025f74:	e0fffa17 	ldw	r3,-24(fp)
 8025f78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8025f7c:	e0bffa17 	ldw	r2,-24(fp)
 8025f80:	10c00017 	ldw	r3,0(r2)
 8025f84:	e0bffb17 	ldw	r2,-20(fp)
 8025f88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8025f8c:	e0bffa17 	ldw	r2,-24(fp)
 8025f90:	10800017 	ldw	r2,0(r2)
 8025f94:	e0fffb17 	ldw	r3,-20(fp)
 8025f98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8025f9c:	e0bffa17 	ldw	r2,-24(fp)
 8025fa0:	e0fffb17 	ldw	r3,-20(fp)
 8025fa4:	10c00015 	stw	r3,0(r2)
 8025fa8:	e0bff817 	ldw	r2,-32(fp)
 8025fac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8025fb0:	e0bff717 	ldw	r2,-36(fp)
 8025fb4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8025fb8:	0005883a 	mov	r2,zero
 8025fbc:	00000306 	br	8025fcc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8025fc0:	00bffa84 	movi	r2,-22
 8025fc4:	00000106 	br	8025fcc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8025fc8:	00bfde84 	movi	r2,-134
  }
}
 8025fcc:	e037883a 	mov	sp,fp
 8025fd0:	df000017 	ldw	fp,0(sp)
 8025fd4:	dec00104 	addi	sp,sp,4
 8025fd8:	f800283a 	ret

08025fdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8025fdc:	defffe04 	addi	sp,sp,-8
 8025fe0:	dfc00115 	stw	ra,4(sp)
 8025fe4:	df000015 	stw	fp,0(sp)
 8025fe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8025fec:	d0a00917 	ldw	r2,-32732(gp)
 8025ff0:	10000326 	beq	r2,zero,8026000 <alt_get_errno+0x24>
 8025ff4:	d0a00917 	ldw	r2,-32732(gp)
 8025ff8:	103ee83a 	callr	r2
 8025ffc:	00000106 	br	8026004 <alt_get_errno+0x28>
 8026000:	d0a6d404 	addi	r2,gp,-25776
}
 8026004:	e037883a 	mov	sp,fp
 8026008:	dfc00117 	ldw	ra,4(sp)
 802600c:	df000017 	ldw	fp,0(sp)
 8026010:	dec00204 	addi	sp,sp,8
 8026014:	f800283a 	ret

08026018 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8026018:	defffb04 	addi	sp,sp,-20
 802601c:	dfc00415 	stw	ra,16(sp)
 8026020:	df000315 	stw	fp,12(sp)
 8026024:	df000304 	addi	fp,sp,12
 8026028:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 802602c:	e0bfff17 	ldw	r2,-4(fp)
 8026030:	10000816 	blt	r2,zero,8026054 <close+0x3c>
 8026034:	01400304 	movi	r5,12
 8026038:	e13fff17 	ldw	r4,-4(fp)
 802603c:	80212ac0 	call	80212ac <__mulsi3>
 8026040:	1007883a 	mov	r3,r2
 8026044:	008200f4 	movhi	r2,2051
 8026048:	10aa4604 	addi	r2,r2,-22248
 802604c:	1885883a 	add	r2,r3,r2
 8026050:	00000106 	br	8026058 <close+0x40>
 8026054:	0005883a 	mov	r2,zero
 8026058:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 802605c:	e0bffd17 	ldw	r2,-12(fp)
 8026060:	10001926 	beq	r2,zero,80260c8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8026064:	e0bffd17 	ldw	r2,-12(fp)
 8026068:	10800017 	ldw	r2,0(r2)
 802606c:	10800417 	ldw	r2,16(r2)
 8026070:	10000626 	beq	r2,zero,802608c <close+0x74>
 8026074:	e0bffd17 	ldw	r2,-12(fp)
 8026078:	10800017 	ldw	r2,0(r2)
 802607c:	10800417 	ldw	r2,16(r2)
 8026080:	e13ffd17 	ldw	r4,-12(fp)
 8026084:	103ee83a 	callr	r2
 8026088:	00000106 	br	8026090 <close+0x78>
 802608c:	0005883a 	mov	r2,zero
 8026090:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8026094:	e13fff17 	ldw	r4,-4(fp)
 8026098:	80267000 	call	8026700 <alt_release_fd>
    if (rval < 0)
 802609c:	e0bffe17 	ldw	r2,-8(fp)
 80260a0:	1000070e 	bge	r2,zero,80260c0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80260a4:	8025fdc0 	call	8025fdc <alt_get_errno>
 80260a8:	1007883a 	mov	r3,r2
 80260ac:	e0bffe17 	ldw	r2,-8(fp)
 80260b0:	0085c83a 	sub	r2,zero,r2
 80260b4:	18800015 	stw	r2,0(r3)
      return -1;
 80260b8:	00bfffc4 	movi	r2,-1
 80260bc:	00000706 	br	80260dc <close+0xc4>
    }
    return 0;
 80260c0:	0005883a 	mov	r2,zero
 80260c4:	00000506 	br	80260dc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80260c8:	8025fdc0 	call	8025fdc <alt_get_errno>
 80260cc:	1007883a 	mov	r3,r2
 80260d0:	00801444 	movi	r2,81
 80260d4:	18800015 	stw	r2,0(r3)
    return -1;
 80260d8:	00bfffc4 	movi	r2,-1
  }
}
 80260dc:	e037883a 	mov	sp,fp
 80260e0:	dfc00117 	ldw	ra,4(sp)
 80260e4:	df000017 	ldw	fp,0(sp)
 80260e8:	dec00204 	addi	sp,sp,8
 80260ec:	f800283a 	ret

080260f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80260f0:	defffc04 	addi	sp,sp,-16
 80260f4:	df000315 	stw	fp,12(sp)
 80260f8:	df000304 	addi	fp,sp,12
 80260fc:	e13ffd15 	stw	r4,-12(fp)
 8026100:	e17ffe15 	stw	r5,-8(fp)
 8026104:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8026108:	e0bfff17 	ldw	r2,-4(fp)
}
 802610c:	e037883a 	mov	sp,fp
 8026110:	df000017 	ldw	fp,0(sp)
 8026114:	dec00104 	addi	sp,sp,4
 8026118:	f800283a 	ret

0802611c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802611c:	defffe04 	addi	sp,sp,-8
 8026120:	dfc00115 	stw	ra,4(sp)
 8026124:	df000015 	stw	fp,0(sp)
 8026128:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802612c:	d0a00917 	ldw	r2,-32732(gp)
 8026130:	10000326 	beq	r2,zero,8026140 <alt_get_errno+0x24>
 8026134:	d0a00917 	ldw	r2,-32732(gp)
 8026138:	103ee83a 	callr	r2
 802613c:	00000106 	br	8026144 <alt_get_errno+0x28>
 8026140:	d0a6d404 	addi	r2,gp,-25776
}
 8026144:	e037883a 	mov	sp,fp
 8026148:	dfc00117 	ldw	ra,4(sp)
 802614c:	df000017 	ldw	fp,0(sp)
 8026150:	dec00204 	addi	sp,sp,8
 8026154:	f800283a 	ret

08026158 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8026158:	defffb04 	addi	sp,sp,-20
 802615c:	dfc00415 	stw	ra,16(sp)
 8026160:	df000315 	stw	fp,12(sp)
 8026164:	df000304 	addi	fp,sp,12
 8026168:	e13ffe15 	stw	r4,-8(fp)
 802616c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8026170:	e0bffe17 	ldw	r2,-8(fp)
 8026174:	10000816 	blt	r2,zero,8026198 <fstat+0x40>
 8026178:	01400304 	movi	r5,12
 802617c:	e13ffe17 	ldw	r4,-8(fp)
 8026180:	80212ac0 	call	80212ac <__mulsi3>
 8026184:	1007883a 	mov	r3,r2
 8026188:	008200f4 	movhi	r2,2051
 802618c:	10aa4604 	addi	r2,r2,-22248
 8026190:	1885883a 	add	r2,r3,r2
 8026194:	00000106 	br	802619c <fstat+0x44>
 8026198:	0005883a 	mov	r2,zero
 802619c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80261a0:	e0bffd17 	ldw	r2,-12(fp)
 80261a4:	10001026 	beq	r2,zero,80261e8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80261a8:	e0bffd17 	ldw	r2,-12(fp)
 80261ac:	10800017 	ldw	r2,0(r2)
 80261b0:	10800817 	ldw	r2,32(r2)
 80261b4:	10000726 	beq	r2,zero,80261d4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 80261b8:	e0bffd17 	ldw	r2,-12(fp)
 80261bc:	10800017 	ldw	r2,0(r2)
 80261c0:	10800817 	ldw	r2,32(r2)
 80261c4:	e17fff17 	ldw	r5,-4(fp)
 80261c8:	e13ffd17 	ldw	r4,-12(fp)
 80261cc:	103ee83a 	callr	r2
 80261d0:	00000a06 	br	80261fc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80261d4:	e0bfff17 	ldw	r2,-4(fp)
 80261d8:	00c80004 	movi	r3,8192
 80261dc:	10c00115 	stw	r3,4(r2)
      return 0;
 80261e0:	0005883a 	mov	r2,zero
 80261e4:	00000506 	br	80261fc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80261e8:	802611c0 	call	802611c <alt_get_errno>
 80261ec:	1007883a 	mov	r3,r2
 80261f0:	00801444 	movi	r2,81
 80261f4:	18800015 	stw	r2,0(r3)
    return -1;
 80261f8:	00bfffc4 	movi	r2,-1
  }
}
 80261fc:	e037883a 	mov	sp,fp
 8026200:	dfc00117 	ldw	ra,4(sp)
 8026204:	df000017 	ldw	fp,0(sp)
 8026208:	dec00204 	addi	sp,sp,8
 802620c:	f800283a 	ret

08026210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8026210:	defffe04 	addi	sp,sp,-8
 8026214:	dfc00115 	stw	ra,4(sp)
 8026218:	df000015 	stw	fp,0(sp)
 802621c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8026220:	d0a00917 	ldw	r2,-32732(gp)
 8026224:	10000326 	beq	r2,zero,8026234 <alt_get_errno+0x24>
 8026228:	d0a00917 	ldw	r2,-32732(gp)
 802622c:	103ee83a 	callr	r2
 8026230:	00000106 	br	8026238 <alt_get_errno+0x28>
 8026234:	d0a6d404 	addi	r2,gp,-25776
}
 8026238:	e037883a 	mov	sp,fp
 802623c:	dfc00117 	ldw	ra,4(sp)
 8026240:	df000017 	ldw	fp,0(sp)
 8026244:	dec00204 	addi	sp,sp,8
 8026248:	f800283a 	ret

0802624c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 802624c:	deffed04 	addi	sp,sp,-76
 8026250:	dfc01215 	stw	ra,72(sp)
 8026254:	df001115 	stw	fp,68(sp)
 8026258:	df001104 	addi	fp,sp,68
 802625c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8026260:	e0bfff17 	ldw	r2,-4(fp)
 8026264:	10000816 	blt	r2,zero,8026288 <isatty+0x3c>
 8026268:	01400304 	movi	r5,12
 802626c:	e13fff17 	ldw	r4,-4(fp)
 8026270:	80212ac0 	call	80212ac <__mulsi3>
 8026274:	1007883a 	mov	r3,r2
 8026278:	008200f4 	movhi	r2,2051
 802627c:	10aa4604 	addi	r2,r2,-22248
 8026280:	1885883a 	add	r2,r3,r2
 8026284:	00000106 	br	802628c <isatty+0x40>
 8026288:	0005883a 	mov	r2,zero
 802628c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8026290:	e0bfef17 	ldw	r2,-68(fp)
 8026294:	10000e26 	beq	r2,zero,80262d0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8026298:	e0bfef17 	ldw	r2,-68(fp)
 802629c:	10800017 	ldw	r2,0(r2)
 80262a0:	10800817 	ldw	r2,32(r2)
 80262a4:	1000021e 	bne	r2,zero,80262b0 <isatty+0x64>
    {
      return 1;
 80262a8:	00800044 	movi	r2,1
 80262ac:	00000d06 	br	80262e4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80262b0:	e0bff004 	addi	r2,fp,-64
 80262b4:	100b883a 	mov	r5,r2
 80262b8:	e13fff17 	ldw	r4,-4(fp)
 80262bc:	80261580 	call	8026158 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80262c0:	e0bff117 	ldw	r2,-60(fp)
 80262c4:	10880020 	cmpeqi	r2,r2,8192
 80262c8:	10803fcc 	andi	r2,r2,255
 80262cc:	00000506 	br	80262e4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80262d0:	80262100 	call	8026210 <alt_get_errno>
 80262d4:	1007883a 	mov	r3,r2
 80262d8:	00801444 	movi	r2,81
 80262dc:	18800015 	stw	r2,0(r3)
    return 0;
 80262e0:	0005883a 	mov	r2,zero
  }
}
 80262e4:	e037883a 	mov	sp,fp
 80262e8:	dfc00117 	ldw	ra,4(sp)
 80262ec:	df000017 	ldw	fp,0(sp)
 80262f0:	dec00204 	addi	sp,sp,8
 80262f4:	f800283a 	ret

080262f8 <alt_load_section>:
 80262f8:	defffc04 	addi	sp,sp,-16
 80262fc:	df000315 	stw	fp,12(sp)
 8026300:	df000304 	addi	fp,sp,12
 8026304:	e13ffd15 	stw	r4,-12(fp)
 8026308:	e17ffe15 	stw	r5,-8(fp)
 802630c:	e1bfff15 	stw	r6,-4(fp)
 8026310:	e0fffe17 	ldw	r3,-8(fp)
 8026314:	e0bffd17 	ldw	r2,-12(fp)
 8026318:	18800c26 	beq	r3,r2,802634c <alt_load_section+0x54>
 802631c:	00000806 	br	8026340 <alt_load_section+0x48>
 8026320:	e0bffe17 	ldw	r2,-8(fp)
 8026324:	10c00104 	addi	r3,r2,4
 8026328:	e0fffe15 	stw	r3,-8(fp)
 802632c:	e0fffd17 	ldw	r3,-12(fp)
 8026330:	19000104 	addi	r4,r3,4
 8026334:	e13ffd15 	stw	r4,-12(fp)
 8026338:	18c00017 	ldw	r3,0(r3)
 802633c:	10c00015 	stw	r3,0(r2)
 8026340:	e0fffe17 	ldw	r3,-8(fp)
 8026344:	e0bfff17 	ldw	r2,-4(fp)
 8026348:	18bff51e 	bne	r3,r2,8026320 <__alt_data_end+0xfffe6f20>
 802634c:	0001883a 	nop
 8026350:	e037883a 	mov	sp,fp
 8026354:	df000017 	ldw	fp,0(sp)
 8026358:	dec00104 	addi	sp,sp,4
 802635c:	f800283a 	ret

08026360 <alt_load>:
 8026360:	defffe04 	addi	sp,sp,-8
 8026364:	dfc00115 	stw	ra,4(sp)
 8026368:	df000015 	stw	fp,0(sp)
 802636c:	d839883a 	mov	fp,sp
 8026370:	018200f4 	movhi	r6,2051
 8026374:	31aef204 	addi	r6,r6,-17464
 8026378:	014200f4 	movhi	r5,2051
 802637c:	29683104 	addi	r5,r5,-24380
 8026380:	010200f4 	movhi	r4,2051
 8026384:	212ef204 	addi	r4,r4,-17464
 8026388:	80262f80 	call	80262f8 <alt_load_section>
 802638c:	018200b4 	movhi	r6,2050
 8026390:	31808c04 	addi	r6,r6,560
 8026394:	014200b4 	movhi	r5,2050
 8026398:	29400804 	addi	r5,r5,32
 802639c:	010200b4 	movhi	r4,2050
 80263a0:	21000804 	addi	r4,r4,32
 80263a4:	80262f80 	call	80262f8 <alt_load_section>
 80263a8:	018200f4 	movhi	r6,2051
 80263ac:	31a83104 	addi	r6,r6,-24380
 80263b0:	014200f4 	movhi	r5,2051
 80263b4:	2967ac04 	addi	r5,r5,-24912
 80263b8:	010200f4 	movhi	r4,2051
 80263bc:	2127ac04 	addi	r4,r4,-24912
 80263c0:	80262f80 	call	80262f8 <alt_load_section>
 80263c4:	8028f9c0 	call	8028f9c <alt_dcache_flush_all>
 80263c8:	80291ec0 	call	80291ec <alt_icache_flush_all>
 80263cc:	0001883a 	nop
 80263d0:	e037883a 	mov	sp,fp
 80263d4:	dfc00117 	ldw	ra,4(sp)
 80263d8:	df000017 	ldw	fp,0(sp)
 80263dc:	dec00204 	addi	sp,sp,8
 80263e0:	f800283a 	ret

080263e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80263e4:	defffe04 	addi	sp,sp,-8
 80263e8:	dfc00115 	stw	ra,4(sp)
 80263ec:	df000015 	stw	fp,0(sp)
 80263f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80263f4:	d0a00917 	ldw	r2,-32732(gp)
 80263f8:	10000326 	beq	r2,zero,8026408 <alt_get_errno+0x24>
 80263fc:	d0a00917 	ldw	r2,-32732(gp)
 8026400:	103ee83a 	callr	r2
 8026404:	00000106 	br	802640c <alt_get_errno+0x28>
 8026408:	d0a6d404 	addi	r2,gp,-25776
}
 802640c:	e037883a 	mov	sp,fp
 8026410:	dfc00117 	ldw	ra,4(sp)
 8026414:	df000017 	ldw	fp,0(sp)
 8026418:	dec00204 	addi	sp,sp,8
 802641c:	f800283a 	ret

08026420 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8026420:	defff904 	addi	sp,sp,-28
 8026424:	dfc00615 	stw	ra,24(sp)
 8026428:	df000515 	stw	fp,20(sp)
 802642c:	df000504 	addi	fp,sp,20
 8026430:	e13ffd15 	stw	r4,-12(fp)
 8026434:	e17ffe15 	stw	r5,-8(fp)
 8026438:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 802643c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8026440:	e0bffd17 	ldw	r2,-12(fp)
 8026444:	10000816 	blt	r2,zero,8026468 <lseek+0x48>
 8026448:	01400304 	movi	r5,12
 802644c:	e13ffd17 	ldw	r4,-12(fp)
 8026450:	80212ac0 	call	80212ac <__mulsi3>
 8026454:	1007883a 	mov	r3,r2
 8026458:	008200f4 	movhi	r2,2051
 802645c:	10aa4604 	addi	r2,r2,-22248
 8026460:	1885883a 	add	r2,r3,r2
 8026464:	00000106 	br	802646c <lseek+0x4c>
 8026468:	0005883a 	mov	r2,zero
 802646c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8026470:	e0bffc17 	ldw	r2,-16(fp)
 8026474:	10001026 	beq	r2,zero,80264b8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8026478:	e0bffc17 	ldw	r2,-16(fp)
 802647c:	10800017 	ldw	r2,0(r2)
 8026480:	10800717 	ldw	r2,28(r2)
 8026484:	10000926 	beq	r2,zero,80264ac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8026488:	e0bffc17 	ldw	r2,-16(fp)
 802648c:	10800017 	ldw	r2,0(r2)
 8026490:	10800717 	ldw	r2,28(r2)
 8026494:	e1bfff17 	ldw	r6,-4(fp)
 8026498:	e17ffe17 	ldw	r5,-8(fp)
 802649c:	e13ffc17 	ldw	r4,-16(fp)
 80264a0:	103ee83a 	callr	r2
 80264a4:	e0bffb15 	stw	r2,-20(fp)
 80264a8:	00000506 	br	80264c0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80264ac:	00bfde84 	movi	r2,-134
 80264b0:	e0bffb15 	stw	r2,-20(fp)
 80264b4:	00000206 	br	80264c0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80264b8:	00bfebc4 	movi	r2,-81
 80264bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80264c0:	e0bffb17 	ldw	r2,-20(fp)
 80264c4:	1000070e 	bge	r2,zero,80264e4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80264c8:	80263e40 	call	80263e4 <alt_get_errno>
 80264cc:	1007883a 	mov	r3,r2
 80264d0:	e0bffb17 	ldw	r2,-20(fp)
 80264d4:	0085c83a 	sub	r2,zero,r2
 80264d8:	18800015 	stw	r2,0(r3)
    rc = -1;
 80264dc:	00bfffc4 	movi	r2,-1
 80264e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80264e4:	e0bffb17 	ldw	r2,-20(fp)
}
 80264e8:	e037883a 	mov	sp,fp
 80264ec:	dfc00117 	ldw	ra,4(sp)
 80264f0:	df000017 	ldw	fp,0(sp)
 80264f4:	dec00204 	addi	sp,sp,8
 80264f8:	f800283a 	ret

080264fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80264fc:	defffd04 	addi	sp,sp,-12
 8026500:	dfc00215 	stw	ra,8(sp)
 8026504:	df000115 	stw	fp,4(sp)
 8026508:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 802650c:	0009883a 	mov	r4,zero
 8026510:	8026b780 	call	8026b78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8026514:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8026518:	8026bb00 	call	8026bb0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 802651c:	018200f4 	movhi	r6,2051
 8026520:	31a81604 	addi	r6,r6,-24488
 8026524:	014200f4 	movhi	r5,2051
 8026528:	29681604 	addi	r5,r5,-24488
 802652c:	010200f4 	movhi	r4,2051
 8026530:	21281604 	addi	r4,r4,-24488
 8026534:	80295900 	call	8029590 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8026538:	802909c0 	call	802909c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 802653c:	010200f4 	movhi	r4,2051
 8026540:	21243f04 	addi	r4,r4,-28420
 8026544:	8029b1c0 	call	8029b1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8026548:	d0a6d517 	ldw	r2,-25772(gp)
 802654c:	d0e6d617 	ldw	r3,-25768(gp)
 8026550:	d126d717 	ldw	r4,-25764(gp)
 8026554:	200d883a 	mov	r6,r4
 8026558:	180b883a 	mov	r5,r3
 802655c:	1009883a 	mov	r4,r2
 8026560:	8020fbc0 	call	8020fbc <main>
 8026564:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8026568:	01000044 	movi	r4,1
 802656c:	80260180 	call	8026018 <close>
  exit (result);
 8026570:	e13fff17 	ldw	r4,-4(fp)
 8026574:	8029b300 	call	8029b30 <exit>

08026578 <__malloc_lock>:
 8026578:	defffe04 	addi	sp,sp,-8
 802657c:	df000115 	stw	fp,4(sp)
 8026580:	df000104 	addi	fp,sp,4
 8026584:	e13fff15 	stw	r4,-4(fp)
 8026588:	0001883a 	nop
 802658c:	e037883a 	mov	sp,fp
 8026590:	df000017 	ldw	fp,0(sp)
 8026594:	dec00104 	addi	sp,sp,4
 8026598:	f800283a 	ret

0802659c <__malloc_unlock>:
 802659c:	defffe04 	addi	sp,sp,-8
 80265a0:	df000115 	stw	fp,4(sp)
 80265a4:	df000104 	addi	fp,sp,4
 80265a8:	e13fff15 	stw	r4,-4(fp)
 80265ac:	0001883a 	nop
 80265b0:	e037883a 	mov	sp,fp
 80265b4:	df000017 	ldw	fp,0(sp)
 80265b8:	dec00104 	addi	sp,sp,4
 80265bc:	f800283a 	ret

080265c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80265c0:	defffe04 	addi	sp,sp,-8
 80265c4:	dfc00115 	stw	ra,4(sp)
 80265c8:	df000015 	stw	fp,0(sp)
 80265cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80265d0:	d0a00917 	ldw	r2,-32732(gp)
 80265d4:	10000326 	beq	r2,zero,80265e4 <alt_get_errno+0x24>
 80265d8:	d0a00917 	ldw	r2,-32732(gp)
 80265dc:	103ee83a 	callr	r2
 80265e0:	00000106 	br	80265e8 <alt_get_errno+0x28>
 80265e4:	d0a6d404 	addi	r2,gp,-25776
}
 80265e8:	e037883a 	mov	sp,fp
 80265ec:	dfc00117 	ldw	ra,4(sp)
 80265f0:	df000017 	ldw	fp,0(sp)
 80265f4:	dec00204 	addi	sp,sp,8
 80265f8:	f800283a 	ret

080265fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80265fc:	defff904 	addi	sp,sp,-28
 8026600:	dfc00615 	stw	ra,24(sp)
 8026604:	df000515 	stw	fp,20(sp)
 8026608:	df000504 	addi	fp,sp,20
 802660c:	e13ffd15 	stw	r4,-12(fp)
 8026610:	e17ffe15 	stw	r5,-8(fp)
 8026614:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8026618:	e0bffd17 	ldw	r2,-12(fp)
 802661c:	10000816 	blt	r2,zero,8026640 <read+0x44>
 8026620:	01400304 	movi	r5,12
 8026624:	e13ffd17 	ldw	r4,-12(fp)
 8026628:	80212ac0 	call	80212ac <__mulsi3>
 802662c:	1007883a 	mov	r3,r2
 8026630:	008200f4 	movhi	r2,2051
 8026634:	10aa4604 	addi	r2,r2,-22248
 8026638:	1885883a 	add	r2,r3,r2
 802663c:	00000106 	br	8026644 <read+0x48>
 8026640:	0005883a 	mov	r2,zero
 8026644:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8026648:	e0bffb17 	ldw	r2,-20(fp)
 802664c:	10002226 	beq	r2,zero,80266d8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8026650:	e0bffb17 	ldw	r2,-20(fp)
 8026654:	10800217 	ldw	r2,8(r2)
 8026658:	108000cc 	andi	r2,r2,3
 802665c:	10800060 	cmpeqi	r2,r2,1
 8026660:	1000181e 	bne	r2,zero,80266c4 <read+0xc8>
        (fd->dev->read))
 8026664:	e0bffb17 	ldw	r2,-20(fp)
 8026668:	10800017 	ldw	r2,0(r2)
 802666c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8026670:	10001426 	beq	r2,zero,80266c4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8026674:	e0bffb17 	ldw	r2,-20(fp)
 8026678:	10800017 	ldw	r2,0(r2)
 802667c:	10800517 	ldw	r2,20(r2)
 8026680:	e0ffff17 	ldw	r3,-4(fp)
 8026684:	180d883a 	mov	r6,r3
 8026688:	e17ffe17 	ldw	r5,-8(fp)
 802668c:	e13ffb17 	ldw	r4,-20(fp)
 8026690:	103ee83a 	callr	r2
 8026694:	e0bffc15 	stw	r2,-16(fp)
 8026698:	e0bffc17 	ldw	r2,-16(fp)
 802669c:	1000070e 	bge	r2,zero,80266bc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 80266a0:	80265c00 	call	80265c0 <alt_get_errno>
 80266a4:	1007883a 	mov	r3,r2
 80266a8:	e0bffc17 	ldw	r2,-16(fp)
 80266ac:	0085c83a 	sub	r2,zero,r2
 80266b0:	18800015 	stw	r2,0(r3)
          return -1;
 80266b4:	00bfffc4 	movi	r2,-1
 80266b8:	00000c06 	br	80266ec <read+0xf0>
        }
        return rval;
 80266bc:	e0bffc17 	ldw	r2,-16(fp)
 80266c0:	00000a06 	br	80266ec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80266c4:	80265c00 	call	80265c0 <alt_get_errno>
 80266c8:	1007883a 	mov	r3,r2
 80266cc:	00800344 	movi	r2,13
 80266d0:	18800015 	stw	r2,0(r3)
 80266d4:	00000406 	br	80266e8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80266d8:	80265c00 	call	80265c0 <alt_get_errno>
 80266dc:	1007883a 	mov	r3,r2
 80266e0:	00801444 	movi	r2,81
 80266e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80266e8:	00bfffc4 	movi	r2,-1
}
 80266ec:	e037883a 	mov	sp,fp
 80266f0:	dfc00117 	ldw	ra,4(sp)
 80266f4:	df000017 	ldw	fp,0(sp)
 80266f8:	dec00204 	addi	sp,sp,8
 80266fc:	f800283a 	ret

08026700 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8026700:	defffc04 	addi	sp,sp,-16
 8026704:	dfc00315 	stw	ra,12(sp)
 8026708:	df000215 	stw	fp,8(sp)
 802670c:	dc000115 	stw	r16,4(sp)
 8026710:	df000204 	addi	fp,sp,8
 8026714:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8026718:	e0bffe17 	ldw	r2,-8(fp)
 802671c:	108000d0 	cmplti	r2,r2,3
 8026720:	1000111e 	bne	r2,zero,8026768 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8026724:	040200f4 	movhi	r16,2051
 8026728:	842a4604 	addi	r16,r16,-22248
 802672c:	e0bffe17 	ldw	r2,-8(fp)
 8026730:	01400304 	movi	r5,12
 8026734:	1009883a 	mov	r4,r2
 8026738:	80212ac0 	call	80212ac <__mulsi3>
 802673c:	8085883a 	add	r2,r16,r2
 8026740:	10800204 	addi	r2,r2,8
 8026744:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8026748:	040200f4 	movhi	r16,2051
 802674c:	842a4604 	addi	r16,r16,-22248
 8026750:	e0bffe17 	ldw	r2,-8(fp)
 8026754:	01400304 	movi	r5,12
 8026758:	1009883a 	mov	r4,r2
 802675c:	80212ac0 	call	80212ac <__mulsi3>
 8026760:	8085883a 	add	r2,r16,r2
 8026764:	10000015 	stw	zero,0(r2)
  }
}
 8026768:	0001883a 	nop
 802676c:	e6ffff04 	addi	sp,fp,-4
 8026770:	dfc00217 	ldw	ra,8(sp)
 8026774:	df000117 	ldw	fp,4(sp)
 8026778:	dc000017 	ldw	r16,0(sp)
 802677c:	dec00304 	addi	sp,sp,12
 8026780:	f800283a 	ret

08026784 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8026784:	defff904 	addi	sp,sp,-28
 8026788:	df000615 	stw	fp,24(sp)
 802678c:	df000604 	addi	fp,sp,24
 8026790:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026794:	0005303a 	rdctl	r2,status
 8026798:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802679c:	e0fffe17 	ldw	r3,-8(fp)
 80267a0:	00bfff84 	movi	r2,-2
 80267a4:	1884703a 	and	r2,r3,r2
 80267a8:	1001703a 	wrctl	status,r2
  
  return context;
 80267ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80267b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80267b4:	d0a00a17 	ldw	r2,-32728(gp)
 80267b8:	10c000c4 	addi	r3,r2,3
 80267bc:	00bfff04 	movi	r2,-4
 80267c0:	1884703a 	and	r2,r3,r2
 80267c4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80267c8:	d0e00a17 	ldw	r3,-32728(gp)
 80267cc:	e0bfff17 	ldw	r2,-4(fp)
 80267d0:	1887883a 	add	r3,r3,r2
 80267d4:	00820134 	movhi	r2,2052
 80267d8:	10bd0004 	addi	r2,r2,-3072
 80267dc:	10c0062e 	bgeu	r2,r3,80267f8 <sbrk+0x74>
 80267e0:	e0bffb17 	ldw	r2,-20(fp)
 80267e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80267e8:	e0bffa17 	ldw	r2,-24(fp)
 80267ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80267f0:	00bfffc4 	movi	r2,-1
 80267f4:	00000b06 	br	8026824 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80267f8:	d0a00a17 	ldw	r2,-32728(gp)
 80267fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8026800:	d0e00a17 	ldw	r3,-32728(gp)
 8026804:	e0bfff17 	ldw	r2,-4(fp)
 8026808:	1885883a 	add	r2,r3,r2
 802680c:	d0a00a15 	stw	r2,-32728(gp)
 8026810:	e0bffb17 	ldw	r2,-20(fp)
 8026814:	e0bffc15 	stw	r2,-16(fp)
 8026818:	e0bffc17 	ldw	r2,-16(fp)
 802681c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8026820:	e0bffd17 	ldw	r2,-12(fp)
} 
 8026824:	e037883a 	mov	sp,fp
 8026828:	df000017 	ldw	fp,0(sp)
 802682c:	dec00104 	addi	sp,sp,4
 8026830:	f800283a 	ret

08026834 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8026834:	defffa04 	addi	sp,sp,-24
 8026838:	df000515 	stw	fp,20(sp)
 802683c:	df000504 	addi	fp,sp,20
 8026840:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026844:	0005303a 	rdctl	r2,status
 8026848:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802684c:	e0fffc17 	ldw	r3,-16(fp)
 8026850:	00bfff84 	movi	r2,-2
 8026854:	1884703a 	and	r2,r3,r2
 8026858:	1001703a 	wrctl	status,r2
  
  return context;
 802685c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8026860:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8026864:	e0bfff17 	ldw	r2,-4(fp)
 8026868:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 802686c:	e0bffd17 	ldw	r2,-12(fp)
 8026870:	10800017 	ldw	r2,0(r2)
 8026874:	e0fffd17 	ldw	r3,-12(fp)
 8026878:	18c00117 	ldw	r3,4(r3)
 802687c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8026880:	e0bffd17 	ldw	r2,-12(fp)
 8026884:	10800117 	ldw	r2,4(r2)
 8026888:	e0fffd17 	ldw	r3,-12(fp)
 802688c:	18c00017 	ldw	r3,0(r3)
 8026890:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8026894:	e0bffd17 	ldw	r2,-12(fp)
 8026898:	e0fffd17 	ldw	r3,-12(fp)
 802689c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80268a0:	e0bffd17 	ldw	r2,-12(fp)
 80268a4:	e0fffd17 	ldw	r3,-12(fp)
 80268a8:	10c00015 	stw	r3,0(r2)
 80268ac:	e0bffb17 	ldw	r2,-20(fp)
 80268b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80268b4:	e0bffe17 	ldw	r2,-8(fp)
 80268b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80268bc:	0001883a 	nop
 80268c0:	e037883a 	mov	sp,fp
 80268c4:	df000017 	ldw	fp,0(sp)
 80268c8:	dec00104 	addi	sp,sp,4
 80268cc:	f800283a 	ret

080268d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80268d0:	defffb04 	addi	sp,sp,-20
 80268d4:	dfc00415 	stw	ra,16(sp)
 80268d8:	df000315 	stw	fp,12(sp)
 80268dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80268e0:	d0a00b17 	ldw	r2,-32724(gp)
 80268e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80268e8:	d0a6d917 	ldw	r2,-25756(gp)
 80268ec:	10800044 	addi	r2,r2,1
 80268f0:	d0a6d915 	stw	r2,-25756(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80268f4:	00002e06 	br	80269b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80268f8:	e0bffd17 	ldw	r2,-12(fp)
 80268fc:	10800017 	ldw	r2,0(r2)
 8026900:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8026904:	e0bffd17 	ldw	r2,-12(fp)
 8026908:	10800403 	ldbu	r2,16(r2)
 802690c:	10803fcc 	andi	r2,r2,255
 8026910:	10000426 	beq	r2,zero,8026924 <alt_tick+0x54>
 8026914:	d0a6d917 	ldw	r2,-25756(gp)
 8026918:	1000021e 	bne	r2,zero,8026924 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 802691c:	e0bffd17 	ldw	r2,-12(fp)
 8026920:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8026924:	e0bffd17 	ldw	r2,-12(fp)
 8026928:	10800217 	ldw	r2,8(r2)
 802692c:	d0e6d917 	ldw	r3,-25756(gp)
 8026930:	18801d36 	bltu	r3,r2,80269a8 <alt_tick+0xd8>
 8026934:	e0bffd17 	ldw	r2,-12(fp)
 8026938:	10800403 	ldbu	r2,16(r2)
 802693c:	10803fcc 	andi	r2,r2,255
 8026940:	1000191e 	bne	r2,zero,80269a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8026944:	e0bffd17 	ldw	r2,-12(fp)
 8026948:	10800317 	ldw	r2,12(r2)
 802694c:	e0fffd17 	ldw	r3,-12(fp)
 8026950:	18c00517 	ldw	r3,20(r3)
 8026954:	1809883a 	mov	r4,r3
 8026958:	103ee83a 	callr	r2
 802695c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8026960:	e0bfff17 	ldw	r2,-4(fp)
 8026964:	1000031e 	bne	r2,zero,8026974 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8026968:	e13ffd17 	ldw	r4,-12(fp)
 802696c:	80268340 	call	8026834 <alt_alarm_stop>
 8026970:	00000d06 	br	80269a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8026974:	e0bffd17 	ldw	r2,-12(fp)
 8026978:	10c00217 	ldw	r3,8(r2)
 802697c:	e0bfff17 	ldw	r2,-4(fp)
 8026980:	1887883a 	add	r3,r3,r2
 8026984:	e0bffd17 	ldw	r2,-12(fp)
 8026988:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 802698c:	e0bffd17 	ldw	r2,-12(fp)
 8026990:	10c00217 	ldw	r3,8(r2)
 8026994:	d0a6d917 	ldw	r2,-25756(gp)
 8026998:	1880032e 	bgeu	r3,r2,80269a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 802699c:	e0bffd17 	ldw	r2,-12(fp)
 80269a0:	00c00044 	movi	r3,1
 80269a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80269a8:	e0bffe17 	ldw	r2,-8(fp)
 80269ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80269b0:	e0fffd17 	ldw	r3,-12(fp)
 80269b4:	d0a00b04 	addi	r2,gp,-32724
 80269b8:	18bfcf1e 	bne	r3,r2,80268f8 <__alt_data_end+0xfffe74f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80269bc:	0001883a 	nop
}
 80269c0:	0001883a 	nop
 80269c4:	e037883a 	mov	sp,fp
 80269c8:	dfc00117 	ldw	ra,4(sp)
 80269cc:	df000017 	ldw	fp,0(sp)
 80269d0:	dec00204 	addi	sp,sp,8
 80269d4:	f800283a 	ret

080269d8 <usleep>:
 80269d8:	defffd04 	addi	sp,sp,-12
 80269dc:	dfc00215 	stw	ra,8(sp)
 80269e0:	df000115 	stw	fp,4(sp)
 80269e4:	df000104 	addi	fp,sp,4
 80269e8:	e13fff15 	stw	r4,-4(fp)
 80269ec:	e13fff17 	ldw	r4,-4(fp)
 80269f0:	8028e440 	call	8028e44 <alt_busy_sleep>
 80269f4:	e037883a 	mov	sp,fp
 80269f8:	dfc00117 	ldw	ra,4(sp)
 80269fc:	df000017 	ldw	fp,0(sp)
 8026a00:	dec00204 	addi	sp,sp,8
 8026a04:	f800283a 	ret

08026a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8026a08:	defffe04 	addi	sp,sp,-8
 8026a0c:	dfc00115 	stw	ra,4(sp)
 8026a10:	df000015 	stw	fp,0(sp)
 8026a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8026a18:	d0a00917 	ldw	r2,-32732(gp)
 8026a1c:	10000326 	beq	r2,zero,8026a2c <alt_get_errno+0x24>
 8026a20:	d0a00917 	ldw	r2,-32732(gp)
 8026a24:	103ee83a 	callr	r2
 8026a28:	00000106 	br	8026a30 <alt_get_errno+0x28>
 8026a2c:	d0a6d404 	addi	r2,gp,-25776
}
 8026a30:	e037883a 	mov	sp,fp
 8026a34:	dfc00117 	ldw	ra,4(sp)
 8026a38:	df000017 	ldw	fp,0(sp)
 8026a3c:	dec00204 	addi	sp,sp,8
 8026a40:	f800283a 	ret

08026a44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8026a44:	defff904 	addi	sp,sp,-28
 8026a48:	dfc00615 	stw	ra,24(sp)
 8026a4c:	df000515 	stw	fp,20(sp)
 8026a50:	df000504 	addi	fp,sp,20
 8026a54:	e13ffd15 	stw	r4,-12(fp)
 8026a58:	e17ffe15 	stw	r5,-8(fp)
 8026a5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8026a60:	e0bffd17 	ldw	r2,-12(fp)
 8026a64:	10000816 	blt	r2,zero,8026a88 <write+0x44>
 8026a68:	01400304 	movi	r5,12
 8026a6c:	e13ffd17 	ldw	r4,-12(fp)
 8026a70:	80212ac0 	call	80212ac <__mulsi3>
 8026a74:	1007883a 	mov	r3,r2
 8026a78:	008200f4 	movhi	r2,2051
 8026a7c:	10aa4604 	addi	r2,r2,-22248
 8026a80:	1885883a 	add	r2,r3,r2
 8026a84:	00000106 	br	8026a8c <write+0x48>
 8026a88:	0005883a 	mov	r2,zero
 8026a8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8026a90:	e0bffb17 	ldw	r2,-20(fp)
 8026a94:	10002126 	beq	r2,zero,8026b1c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8026a98:	e0bffb17 	ldw	r2,-20(fp)
 8026a9c:	10800217 	ldw	r2,8(r2)
 8026aa0:	108000cc 	andi	r2,r2,3
 8026aa4:	10001826 	beq	r2,zero,8026b08 <write+0xc4>
 8026aa8:	e0bffb17 	ldw	r2,-20(fp)
 8026aac:	10800017 	ldw	r2,0(r2)
 8026ab0:	10800617 	ldw	r2,24(r2)
 8026ab4:	10001426 	beq	r2,zero,8026b08 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8026ab8:	e0bffb17 	ldw	r2,-20(fp)
 8026abc:	10800017 	ldw	r2,0(r2)
 8026ac0:	10800617 	ldw	r2,24(r2)
 8026ac4:	e0ffff17 	ldw	r3,-4(fp)
 8026ac8:	180d883a 	mov	r6,r3
 8026acc:	e17ffe17 	ldw	r5,-8(fp)
 8026ad0:	e13ffb17 	ldw	r4,-20(fp)
 8026ad4:	103ee83a 	callr	r2
 8026ad8:	e0bffc15 	stw	r2,-16(fp)
 8026adc:	e0bffc17 	ldw	r2,-16(fp)
 8026ae0:	1000070e 	bge	r2,zero,8026b00 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8026ae4:	8026a080 	call	8026a08 <alt_get_errno>
 8026ae8:	1007883a 	mov	r3,r2
 8026aec:	e0bffc17 	ldw	r2,-16(fp)
 8026af0:	0085c83a 	sub	r2,zero,r2
 8026af4:	18800015 	stw	r2,0(r3)
        return -1;
 8026af8:	00bfffc4 	movi	r2,-1
 8026afc:	00000c06 	br	8026b30 <write+0xec>
      }
      return rval;
 8026b00:	e0bffc17 	ldw	r2,-16(fp)
 8026b04:	00000a06 	br	8026b30 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8026b08:	8026a080 	call	8026a08 <alt_get_errno>
 8026b0c:	1007883a 	mov	r3,r2
 8026b10:	00800344 	movi	r2,13
 8026b14:	18800015 	stw	r2,0(r3)
 8026b18:	00000406 	br	8026b2c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8026b1c:	8026a080 	call	8026a08 <alt_get_errno>
 8026b20:	1007883a 	mov	r3,r2
 8026b24:	00801444 	movi	r2,81
 8026b28:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8026b2c:	00bfffc4 	movi	r2,-1
}
 8026b30:	e037883a 	mov	sp,fp
 8026b34:	dfc00117 	ldw	ra,4(sp)
 8026b38:	df000017 	ldw	fp,0(sp)
 8026b3c:	dec00204 	addi	sp,sp,8
 8026b40:	f800283a 	ret

08026b44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8026b44:	defffd04 	addi	sp,sp,-12
 8026b48:	dfc00215 	stw	ra,8(sp)
 8026b4c:	df000115 	stw	fp,4(sp)
 8026b50:	df000104 	addi	fp,sp,4
 8026b54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8026b58:	d1600604 	addi	r5,gp,-32744
 8026b5c:	e13fff17 	ldw	r4,-4(fp)
 8026b60:	8028ff80 	call	8028ff8 <alt_dev_llist_insert>
}
 8026b64:	e037883a 	mov	sp,fp
 8026b68:	dfc00117 	ldw	ra,4(sp)
 8026b6c:	df000017 	ldw	fp,0(sp)
 8026b70:	dec00204 	addi	sp,sp,8
 8026b74:	f800283a 	ret

08026b78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8026b78:	defffd04 	addi	sp,sp,-12
 8026b7c:	dfc00215 	stw	ra,8(sp)
 8026b80:	df000115 	stw	fp,4(sp)
 8026b84:	df000104 	addi	fp,sp,4
 8026b88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( TOP_LEVEL, top_level);
 8026b8c:	80298900 	call	8029890 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8026b90:	00800044 	movi	r2,1
 8026b94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8026b98:	0001883a 	nop
 8026b9c:	e037883a 	mov	sp,fp
 8026ba0:	dfc00117 	ldw	ra,4(sp)
 8026ba4:	df000017 	ldw	fp,0(sp)
 8026ba8:	dec00204 	addi	sp,sp,8
 8026bac:	f800283a 	ret

08026bb0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8026bb0:	defffd04 	addi	sp,sp,-12
 8026bb4:	dfc00215 	stw	ra,8(sp)
 8026bb8:	df000115 	stw	fp,4(sp)
 8026bbc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8026bc0:	01c0fa04 	movi	r7,1000
 8026bc4:	01800044 	movi	r6,1
 8026bc8:	000b883a 	mov	r5,zero
 8026bcc:	01020134 	movhi	r4,2052
 8026bd0:	21048804 	addi	r4,r4,4640
 8026bd4:	80278e40 	call	80278e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8026bd8:	000d883a 	mov	r6,zero
 8026bdc:	000b883a 	mov	r5,zero
 8026be0:	010200f4 	movhi	r4,2051
 8026be4:	212ab004 	addi	r4,r4,-21824
 8026be8:	8026f680 	call	8026f68 <altera_avalon_jtag_uart_init>
 8026bec:	010200f4 	movhi	r4,2051
 8026bf0:	212aa604 	addi	r4,r4,-21864
 8026bf4:	8026b440 	call	8026b44 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8026bf8:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 8026bfc:	01bfffc4 	movi	r6,-1
 8026c00:	017fffc4 	movi	r5,-1
 8026c04:	010200f4 	movhi	r4,2051
 8026c08:	212ebe04 	addi	r4,r4,-17672
 8026c0c:	8027ab40 	call	8027ab4 <altera_modular_adc_init>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8026c10:	008200f4 	movhi	r2,2051
 8026c14:	10aecd04 	addi	r2,r2,-17612
 8026c18:	10800a17 	ldw	r2,40(r2)
 8026c1c:	10800017 	ldw	r2,0(r2)
 8026c20:	1007883a 	mov	r3,r2
 8026c24:	008200f4 	movhi	r2,2051
 8026c28:	10aecd04 	addi	r2,r2,-17612
 8026c2c:	10c00b15 	stw	r3,44(r2)
 8026c30:	008200f4 	movhi	r2,2051
 8026c34:	10aecd04 	addi	r2,r2,-17612
 8026c38:	10800a17 	ldw	r2,40(r2)
 8026c3c:	10800104 	addi	r2,r2,4
 8026c40:	10800017 	ldw	r2,0(r2)
 8026c44:	1007883a 	mov	r3,r2
 8026c48:	008200f4 	movhi	r2,2051
 8026c4c:	10aecd04 	addi	r2,r2,-17612
 8026c50:	10c00c15 	stw	r3,48(r2)
 8026c54:	008200f4 	movhi	r2,2051
 8026c58:	10aecd04 	addi	r2,r2,-17612
 8026c5c:	10800a17 	ldw	r2,40(r2)
 8026c60:	10800204 	addi	r2,r2,8
 8026c64:	10800017 	ldw	r2,0(r2)
 8026c68:	10ffffcc 	andi	r3,r2,65535
 8026c6c:	008200f4 	movhi	r2,2051
 8026c70:	10aecd04 	addi	r2,r2,-17612
 8026c74:	10c00f15 	stw	r3,60(r2)
 8026c78:	008200f4 	movhi	r2,2051
 8026c7c:	10aecd04 	addi	r2,r2,-17612
 8026c80:	10800a17 	ldw	r2,40(r2)
 8026c84:	10800204 	addi	r2,r2,8
 8026c88:	10800017 	ldw	r2,0(r2)
 8026c8c:	1006d43a 	srli	r3,r2,16
 8026c90:	008200f4 	movhi	r2,2051
 8026c94:	10aecd04 	addi	r2,r2,-17612
 8026c98:	10c01015 	stw	r3,64(r2)
 8026c9c:	008200f4 	movhi	r2,2051
 8026ca0:	10aecd04 	addi	r2,r2,-17612
 8026ca4:	10800a17 	ldw	r2,40(r2)
 8026ca8:	10800304 	addi	r2,r2,12
 8026cac:	10800017 	ldw	r2,0(r2)
 8026cb0:	1005d07a 	srai	r2,r2,1
 8026cb4:	10c0004c 	andi	r3,r2,1
 8026cb8:	008200f4 	movhi	r2,2051
 8026cbc:	10aecd04 	addi	r2,r2,-17612
 8026cc0:	10c00d15 	stw	r3,52(r2)
 8026cc4:	008200f4 	movhi	r2,2051
 8026cc8:	10aecd04 	addi	r2,r2,-17612
 8026ccc:	10800a17 	ldw	r2,40(r2)
 8026cd0:	10800304 	addi	r2,r2,12
 8026cd4:	10800017 	ldw	r2,0(r2)
 8026cd8:	1005d13a 	srai	r2,r2,4
 8026cdc:	10c003cc 	andi	r3,r2,15
 8026ce0:	008200f4 	movhi	r2,2051
 8026ce4:	10aecd04 	addi	r2,r2,-17612
 8026ce8:	10c00e15 	stw	r3,56(r2)
 8026cec:	008200f4 	movhi	r2,2051
 8026cf0:	10aecd04 	addi	r2,r2,-17612
 8026cf4:	10800a17 	ldw	r2,40(r2)
 8026cf8:	10800304 	addi	r2,r2,12
 8026cfc:	10800017 	ldw	r2,0(r2)
 8026d00:	1005d43a 	srai	r2,r2,16
 8026d04:	e0bfff05 	stb	r2,-4(fp)
 8026d08:	008200f4 	movhi	r2,2051
 8026d0c:	10aecd04 	addi	r2,r2,-17612
 8026d10:	10800a17 	ldw	r2,40(r2)
 8026d14:	10800304 	addi	r2,r2,12
 8026d18:	10800017 	ldw	r2,0(r2)
 8026d1c:	1004d63a 	srli	r2,r2,24
 8026d20:	e0bfff45 	stb	r2,-3(fp)
 8026d24:	008200f4 	movhi	r2,2051
 8026d28:	10aecd04 	addi	r2,r2,-17612
 8026d2c:	10800e17 	ldw	r2,56(r2)
 8026d30:	10800058 	cmpnei	r2,r2,1
 8026d34:	1000041e 	bne	r2,zero,8026d48 <alt_sys_init+0x198>
 8026d38:	008200f4 	movhi	r2,2051
 8026d3c:	10aecd04 	addi	r2,r2,-17612
 8026d40:	10001115 	stw	zero,68(r2)
 8026d44:	00000e06 	br	8026d80 <alt_sys_init+0x1d0>
 8026d48:	008200f4 	movhi	r2,2051
 8026d4c:	10aecd04 	addi	r2,r2,-17612
 8026d50:	10800e17 	ldw	r2,56(r2)
 8026d54:	10800098 	cmpnei	r2,r2,2
 8026d58:	1000051e 	bne	r2,zero,8026d70 <alt_sys_init+0x1c0>
 8026d5c:	008200f4 	movhi	r2,2051
 8026d60:	10aecd04 	addi	r2,r2,-17612
 8026d64:	00c00044 	movi	r3,1
 8026d68:	10c01115 	stw	r3,68(r2)
 8026d6c:	00000406 	br	8026d80 <alt_sys_init+0x1d0>
 8026d70:	008200f4 	movhi	r2,2051
 8026d74:	10aecd04 	addi	r2,r2,-17612
 8026d78:	00c00084 	movi	r3,2
 8026d7c:	10c01115 	stw	r3,68(r2)
 8026d80:	e0bfff03 	ldbu	r2,-4(fp)
 8026d84:	00c00804 	movi	r3,32
 8026d88:	1885c83a 	sub	r2,r3,r2
 8026d8c:	00ffffc4 	movi	r3,-1
 8026d90:	1886d83a 	srl	r3,r3,r2
 8026d94:	008200f4 	movhi	r2,2051
 8026d98:	10aecd04 	addi	r2,r2,-17612
 8026d9c:	10c01215 	stw	r3,72(r2)
 8026da0:	e0ffff03 	ldbu	r3,-4(fp)
 8026da4:	008200f4 	movhi	r2,2051
 8026da8:	10aecd04 	addi	r2,r2,-17612
 8026dac:	10801117 	ldw	r2,68(r2)
 8026db0:	1887883a 	add	r3,r3,r2
 8026db4:	008200f4 	movhi	r2,2051
 8026db8:	10aecd04 	addi	r2,r2,-17612
 8026dbc:	10c01315 	stw	r3,76(r2)
 8026dc0:	e0bfff43 	ldbu	r2,-3(fp)
 8026dc4:	00c00804 	movi	r3,32
 8026dc8:	1885c83a 	sub	r2,r3,r2
 8026dcc:	00ffffc4 	movi	r3,-1
 8026dd0:	1886d83a 	srl	r3,r3,r2
 8026dd4:	008200f4 	movhi	r2,2051
 8026dd8:	10aecd04 	addi	r2,r2,-17612
 8026ddc:	10c01415 	stw	r3,80(r2)
 8026de0:	010200f4 	movhi	r4,2051
 8026de4:	212ecd04 	addi	r4,r4,-17612
 8026de8:	8026b440 	call	8026b44 <alt_dev_reg>
}
 8026dec:	0001883a 	nop
 8026df0:	e037883a 	mov	sp,fp
 8026df4:	dfc00117 	ldw	ra,4(sp)
 8026df8:	df000017 	ldw	fp,0(sp)
 8026dfc:	dec00204 	addi	sp,sp,8
 8026e00:	f800283a 	ret

08026e04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8026e04:	defffa04 	addi	sp,sp,-24
 8026e08:	dfc00515 	stw	ra,20(sp)
 8026e0c:	df000415 	stw	fp,16(sp)
 8026e10:	df000404 	addi	fp,sp,16
 8026e14:	e13ffd15 	stw	r4,-12(fp)
 8026e18:	e17ffe15 	stw	r5,-8(fp)
 8026e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8026e20:	e0bffd17 	ldw	r2,-12(fp)
 8026e24:	10800017 	ldw	r2,0(r2)
 8026e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8026e2c:	e0bffc17 	ldw	r2,-16(fp)
 8026e30:	10c00a04 	addi	r3,r2,40
 8026e34:	e0bffd17 	ldw	r2,-12(fp)
 8026e38:	10800217 	ldw	r2,8(r2)
 8026e3c:	100f883a 	mov	r7,r2
 8026e40:	e1bfff17 	ldw	r6,-4(fp)
 8026e44:	e17ffe17 	ldw	r5,-8(fp)
 8026e48:	1809883a 	mov	r4,r3
 8026e4c:	802742c0 	call	802742c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8026e50:	e037883a 	mov	sp,fp
 8026e54:	dfc00117 	ldw	ra,4(sp)
 8026e58:	df000017 	ldw	fp,0(sp)
 8026e5c:	dec00204 	addi	sp,sp,8
 8026e60:	f800283a 	ret

08026e64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8026e64:	defffa04 	addi	sp,sp,-24
 8026e68:	dfc00515 	stw	ra,20(sp)
 8026e6c:	df000415 	stw	fp,16(sp)
 8026e70:	df000404 	addi	fp,sp,16
 8026e74:	e13ffd15 	stw	r4,-12(fp)
 8026e78:	e17ffe15 	stw	r5,-8(fp)
 8026e7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8026e80:	e0bffd17 	ldw	r2,-12(fp)
 8026e84:	10800017 	ldw	r2,0(r2)
 8026e88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8026e8c:	e0bffc17 	ldw	r2,-16(fp)
 8026e90:	10c00a04 	addi	r3,r2,40
 8026e94:	e0bffd17 	ldw	r2,-12(fp)
 8026e98:	10800217 	ldw	r2,8(r2)
 8026e9c:	100f883a 	mov	r7,r2
 8026ea0:	e1bfff17 	ldw	r6,-4(fp)
 8026ea4:	e17ffe17 	ldw	r5,-8(fp)
 8026ea8:	1809883a 	mov	r4,r3
 8026eac:	80276480 	call	8027648 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8026eb0:	e037883a 	mov	sp,fp
 8026eb4:	dfc00117 	ldw	ra,4(sp)
 8026eb8:	df000017 	ldw	fp,0(sp)
 8026ebc:	dec00204 	addi	sp,sp,8
 8026ec0:	f800283a 	ret

08026ec4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8026ec4:	defffc04 	addi	sp,sp,-16
 8026ec8:	dfc00315 	stw	ra,12(sp)
 8026ecc:	df000215 	stw	fp,8(sp)
 8026ed0:	df000204 	addi	fp,sp,8
 8026ed4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8026ed8:	e0bfff17 	ldw	r2,-4(fp)
 8026edc:	10800017 	ldw	r2,0(r2)
 8026ee0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8026ee4:	e0bffe17 	ldw	r2,-8(fp)
 8026ee8:	10c00a04 	addi	r3,r2,40
 8026eec:	e0bfff17 	ldw	r2,-4(fp)
 8026ef0:	10800217 	ldw	r2,8(r2)
 8026ef4:	100b883a 	mov	r5,r2
 8026ef8:	1809883a 	mov	r4,r3
 8026efc:	80272d40 	call	80272d4 <altera_avalon_jtag_uart_close>
}
 8026f00:	e037883a 	mov	sp,fp
 8026f04:	dfc00117 	ldw	ra,4(sp)
 8026f08:	df000017 	ldw	fp,0(sp)
 8026f0c:	dec00204 	addi	sp,sp,8
 8026f10:	f800283a 	ret

08026f14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8026f14:	defffa04 	addi	sp,sp,-24
 8026f18:	dfc00515 	stw	ra,20(sp)
 8026f1c:	df000415 	stw	fp,16(sp)
 8026f20:	df000404 	addi	fp,sp,16
 8026f24:	e13ffd15 	stw	r4,-12(fp)
 8026f28:	e17ffe15 	stw	r5,-8(fp)
 8026f2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8026f30:	e0bffd17 	ldw	r2,-12(fp)
 8026f34:	10800017 	ldw	r2,0(r2)
 8026f38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8026f3c:	e0bffc17 	ldw	r2,-16(fp)
 8026f40:	10800a04 	addi	r2,r2,40
 8026f44:	e1bfff17 	ldw	r6,-4(fp)
 8026f48:	e17ffe17 	ldw	r5,-8(fp)
 8026f4c:	1009883a 	mov	r4,r2
 8026f50:	802733c0 	call	802733c <altera_avalon_jtag_uart_ioctl>
}
 8026f54:	e037883a 	mov	sp,fp
 8026f58:	dfc00117 	ldw	ra,4(sp)
 8026f5c:	df000017 	ldw	fp,0(sp)
 8026f60:	dec00204 	addi	sp,sp,8
 8026f64:	f800283a 	ret

08026f68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8026f68:	defffa04 	addi	sp,sp,-24
 8026f6c:	dfc00515 	stw	ra,20(sp)
 8026f70:	df000415 	stw	fp,16(sp)
 8026f74:	df000404 	addi	fp,sp,16
 8026f78:	e13ffd15 	stw	r4,-12(fp)
 8026f7c:	e17ffe15 	stw	r5,-8(fp)
 8026f80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8026f84:	e0bffd17 	ldw	r2,-12(fp)
 8026f88:	00c00044 	movi	r3,1
 8026f8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8026f90:	e0bffd17 	ldw	r2,-12(fp)
 8026f94:	10800017 	ldw	r2,0(r2)
 8026f98:	10800104 	addi	r2,r2,4
 8026f9c:	1007883a 	mov	r3,r2
 8026fa0:	e0bffd17 	ldw	r2,-12(fp)
 8026fa4:	10800817 	ldw	r2,32(r2)
 8026fa8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8026fac:	e0bffe17 	ldw	r2,-8(fp)
 8026fb0:	e0ffff17 	ldw	r3,-4(fp)
 8026fb4:	d8000015 	stw	zero,0(sp)
 8026fb8:	e1fffd17 	ldw	r7,-12(fp)
 8026fbc:	018200b4 	movhi	r6,2050
 8026fc0:	319c0a04 	addi	r6,r6,28712
 8026fc4:	180b883a 	mov	r5,r3
 8026fc8:	1009883a 	mov	r4,r2
 8026fcc:	802920c0 	call	802920c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8026fd0:	e0bffd17 	ldw	r2,-12(fp)
 8026fd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8026fd8:	e0bffd17 	ldw	r2,-12(fp)
 8026fdc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8026fe0:	d0e6d817 	ldw	r3,-25760(gp)
 8026fe4:	e1fffd17 	ldw	r7,-12(fp)
 8026fe8:	018200b4 	movhi	r6,2050
 8026fec:	319c8d04 	addi	r6,r6,29236
 8026ff0:	180b883a 	mov	r5,r3
 8026ff4:	1009883a 	mov	r4,r2
 8026ff8:	8025eb00 	call	8025eb0 <alt_alarm_start>
 8026ffc:	1000040e 	bge	r2,zero,8027010 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8027000:	e0fffd17 	ldw	r3,-12(fp)
 8027004:	00a00034 	movhi	r2,32768
 8027008:	10bfffc4 	addi	r2,r2,-1
 802700c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8027010:	0001883a 	nop
 8027014:	e037883a 	mov	sp,fp
 8027018:	dfc00117 	ldw	ra,4(sp)
 802701c:	df000017 	ldw	fp,0(sp)
 8027020:	dec00204 	addi	sp,sp,8
 8027024:	f800283a 	ret

08027028 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8027028:	defff804 	addi	sp,sp,-32
 802702c:	df000715 	stw	fp,28(sp)
 8027030:	df000704 	addi	fp,sp,28
 8027034:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8027038:	e0bfff17 	ldw	r2,-4(fp)
 802703c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8027040:	e0bffb17 	ldw	r2,-20(fp)
 8027044:	10800017 	ldw	r2,0(r2)
 8027048:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 802704c:	e0bffc17 	ldw	r2,-16(fp)
 8027050:	10800104 	addi	r2,r2,4
 8027054:	10800037 	ldwio	r2,0(r2)
 8027058:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 802705c:	e0bffd17 	ldw	r2,-12(fp)
 8027060:	1080c00c 	andi	r2,r2,768
 8027064:	10006d26 	beq	r2,zero,802721c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8027068:	e0bffd17 	ldw	r2,-12(fp)
 802706c:	1080400c 	andi	r2,r2,256
 8027070:	10003526 	beq	r2,zero,8027148 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8027074:	00800074 	movhi	r2,1
 8027078:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802707c:	e0bffb17 	ldw	r2,-20(fp)
 8027080:	10800a17 	ldw	r2,40(r2)
 8027084:	10800044 	addi	r2,r2,1
 8027088:	1081ffcc 	andi	r2,r2,2047
 802708c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8027090:	e0bffb17 	ldw	r2,-20(fp)
 8027094:	10c00b17 	ldw	r3,44(r2)
 8027098:	e0bffe17 	ldw	r2,-8(fp)
 802709c:	18801526 	beq	r3,r2,80270f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80270a0:	e0bffc17 	ldw	r2,-16(fp)
 80270a4:	10800037 	ldwio	r2,0(r2)
 80270a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80270ac:	e0bff917 	ldw	r2,-28(fp)
 80270b0:	10a0000c 	andi	r2,r2,32768
 80270b4:	10001126 	beq	r2,zero,80270fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80270b8:	e0bffb17 	ldw	r2,-20(fp)
 80270bc:	10800a17 	ldw	r2,40(r2)
 80270c0:	e0fff917 	ldw	r3,-28(fp)
 80270c4:	1809883a 	mov	r4,r3
 80270c8:	e0fffb17 	ldw	r3,-20(fp)
 80270cc:	1885883a 	add	r2,r3,r2
 80270d0:	10800e04 	addi	r2,r2,56
 80270d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80270d8:	e0bffb17 	ldw	r2,-20(fp)
 80270dc:	10800a17 	ldw	r2,40(r2)
 80270e0:	10800044 	addi	r2,r2,1
 80270e4:	10c1ffcc 	andi	r3,r2,2047
 80270e8:	e0bffb17 	ldw	r2,-20(fp)
 80270ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80270f0:	003fe206 	br	802707c <__alt_data_end+0xfffe7c7c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80270f4:	0001883a 	nop
 80270f8:	00000106 	br	8027100 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80270fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8027100:	e0bff917 	ldw	r2,-28(fp)
 8027104:	10bfffec 	andhi	r2,r2,65535
 8027108:	10000f26 	beq	r2,zero,8027148 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 802710c:	e0bffb17 	ldw	r2,-20(fp)
 8027110:	10c00817 	ldw	r3,32(r2)
 8027114:	00bfff84 	movi	r2,-2
 8027118:	1886703a 	and	r3,r3,r2
 802711c:	e0bffb17 	ldw	r2,-20(fp)
 8027120:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8027124:	e0bffc17 	ldw	r2,-16(fp)
 8027128:	10800104 	addi	r2,r2,4
 802712c:	1007883a 	mov	r3,r2
 8027130:	e0bffb17 	ldw	r2,-20(fp)
 8027134:	10800817 	ldw	r2,32(r2)
 8027138:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 802713c:	e0bffc17 	ldw	r2,-16(fp)
 8027140:	10800104 	addi	r2,r2,4
 8027144:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8027148:	e0bffd17 	ldw	r2,-12(fp)
 802714c:	1080800c 	andi	r2,r2,512
 8027150:	103fbe26 	beq	r2,zero,802704c <__alt_data_end+0xfffe7c4c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8027154:	e0bffd17 	ldw	r2,-12(fp)
 8027158:	1004d43a 	srli	r2,r2,16
 802715c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8027160:	00001406 	br	80271b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8027164:	e0bffc17 	ldw	r2,-16(fp)
 8027168:	e0fffb17 	ldw	r3,-20(fp)
 802716c:	18c00d17 	ldw	r3,52(r3)
 8027170:	e13ffb17 	ldw	r4,-20(fp)
 8027174:	20c7883a 	add	r3,r4,r3
 8027178:	18c20e04 	addi	r3,r3,2104
 802717c:	18c00003 	ldbu	r3,0(r3)
 8027180:	18c03fcc 	andi	r3,r3,255
 8027184:	18c0201c 	xori	r3,r3,128
 8027188:	18ffe004 	addi	r3,r3,-128
 802718c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8027190:	e0bffb17 	ldw	r2,-20(fp)
 8027194:	10800d17 	ldw	r2,52(r2)
 8027198:	10800044 	addi	r2,r2,1
 802719c:	10c1ffcc 	andi	r3,r2,2047
 80271a0:	e0bffb17 	ldw	r2,-20(fp)
 80271a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80271a8:	e0bffa17 	ldw	r2,-24(fp)
 80271ac:	10bfffc4 	addi	r2,r2,-1
 80271b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80271b4:	e0bffa17 	ldw	r2,-24(fp)
 80271b8:	10000526 	beq	r2,zero,80271d0 <altera_avalon_jtag_uart_irq+0x1a8>
 80271bc:	e0bffb17 	ldw	r2,-20(fp)
 80271c0:	10c00d17 	ldw	r3,52(r2)
 80271c4:	e0bffb17 	ldw	r2,-20(fp)
 80271c8:	10800c17 	ldw	r2,48(r2)
 80271cc:	18bfe51e 	bne	r3,r2,8027164 <__alt_data_end+0xfffe7d64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80271d0:	e0bffa17 	ldw	r2,-24(fp)
 80271d4:	103f9d26 	beq	r2,zero,802704c <__alt_data_end+0xfffe7c4c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80271d8:	e0bffb17 	ldw	r2,-20(fp)
 80271dc:	10c00817 	ldw	r3,32(r2)
 80271e0:	00bfff44 	movi	r2,-3
 80271e4:	1886703a 	and	r3,r3,r2
 80271e8:	e0bffb17 	ldw	r2,-20(fp)
 80271ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80271f0:	e0bffb17 	ldw	r2,-20(fp)
 80271f4:	10800017 	ldw	r2,0(r2)
 80271f8:	10800104 	addi	r2,r2,4
 80271fc:	1007883a 	mov	r3,r2
 8027200:	e0bffb17 	ldw	r2,-20(fp)
 8027204:	10800817 	ldw	r2,32(r2)
 8027208:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 802720c:	e0bffc17 	ldw	r2,-16(fp)
 8027210:	10800104 	addi	r2,r2,4
 8027214:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8027218:	003f8c06 	br	802704c <__alt_data_end+0xfffe7c4c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 802721c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8027220:	0001883a 	nop
 8027224:	e037883a 	mov	sp,fp
 8027228:	df000017 	ldw	fp,0(sp)
 802722c:	dec00104 	addi	sp,sp,4
 8027230:	f800283a 	ret

08027234 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8027234:	defff804 	addi	sp,sp,-32
 8027238:	df000715 	stw	fp,28(sp)
 802723c:	df000704 	addi	fp,sp,28
 8027240:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8027244:	e0bffb17 	ldw	r2,-20(fp)
 8027248:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 802724c:	e0bff917 	ldw	r2,-28(fp)
 8027250:	10800017 	ldw	r2,0(r2)
 8027254:	10800104 	addi	r2,r2,4
 8027258:	10800037 	ldwio	r2,0(r2)
 802725c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8027260:	e0bffa17 	ldw	r2,-24(fp)
 8027264:	1081000c 	andi	r2,r2,1024
 8027268:	10000b26 	beq	r2,zero,8027298 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 802726c:	e0bff917 	ldw	r2,-28(fp)
 8027270:	10800017 	ldw	r2,0(r2)
 8027274:	10800104 	addi	r2,r2,4
 8027278:	1007883a 	mov	r3,r2
 802727c:	e0bff917 	ldw	r2,-28(fp)
 8027280:	10800817 	ldw	r2,32(r2)
 8027284:	10810014 	ori	r2,r2,1024
 8027288:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 802728c:	e0bff917 	ldw	r2,-28(fp)
 8027290:	10000915 	stw	zero,36(r2)
 8027294:	00000a06 	br	80272c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8027298:	e0bff917 	ldw	r2,-28(fp)
 802729c:	10c00917 	ldw	r3,36(r2)
 80272a0:	00a00034 	movhi	r2,32768
 80272a4:	10bfff04 	addi	r2,r2,-4
 80272a8:	10c00536 	bltu	r2,r3,80272c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80272ac:	e0bff917 	ldw	r2,-28(fp)
 80272b0:	10800917 	ldw	r2,36(r2)
 80272b4:	10c00044 	addi	r3,r2,1
 80272b8:	e0bff917 	ldw	r2,-28(fp)
 80272bc:	10c00915 	stw	r3,36(r2)
 80272c0:	d0a6d817 	ldw	r2,-25760(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80272c4:	e037883a 	mov	sp,fp
 80272c8:	df000017 	ldw	fp,0(sp)
 80272cc:	dec00104 	addi	sp,sp,4
 80272d0:	f800283a 	ret

080272d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80272d4:	defffd04 	addi	sp,sp,-12
 80272d8:	df000215 	stw	fp,8(sp)
 80272dc:	df000204 	addi	fp,sp,8
 80272e0:	e13ffe15 	stw	r4,-8(fp)
 80272e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80272e8:	00000506 	br	8027300 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80272ec:	e0bfff17 	ldw	r2,-4(fp)
 80272f0:	1090000c 	andi	r2,r2,16384
 80272f4:	10000226 	beq	r2,zero,8027300 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80272f8:	00bffd44 	movi	r2,-11
 80272fc:	00000b06 	br	802732c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8027300:	e0bffe17 	ldw	r2,-8(fp)
 8027304:	10c00d17 	ldw	r3,52(r2)
 8027308:	e0bffe17 	ldw	r2,-8(fp)
 802730c:	10800c17 	ldw	r2,48(r2)
 8027310:	18800526 	beq	r3,r2,8027328 <altera_avalon_jtag_uart_close+0x54>
 8027314:	e0bffe17 	ldw	r2,-8(fp)
 8027318:	10c00917 	ldw	r3,36(r2)
 802731c:	e0bffe17 	ldw	r2,-8(fp)
 8027320:	10800117 	ldw	r2,4(r2)
 8027324:	18bff136 	bltu	r3,r2,80272ec <__alt_data_end+0xfffe7eec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8027328:	0005883a 	mov	r2,zero
}
 802732c:	e037883a 	mov	sp,fp
 8027330:	df000017 	ldw	fp,0(sp)
 8027334:	dec00104 	addi	sp,sp,4
 8027338:	f800283a 	ret

0802733c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 802733c:	defffa04 	addi	sp,sp,-24
 8027340:	df000515 	stw	fp,20(sp)
 8027344:	df000504 	addi	fp,sp,20
 8027348:	e13ffd15 	stw	r4,-12(fp)
 802734c:	e17ffe15 	stw	r5,-8(fp)
 8027350:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8027354:	00bff9c4 	movi	r2,-25
 8027358:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 802735c:	e0bffe17 	ldw	r2,-8(fp)
 8027360:	10da8060 	cmpeqi	r3,r2,27137
 8027364:	1800031e 	bne	r3,zero,8027374 <altera_avalon_jtag_uart_ioctl+0x38>
 8027368:	109a80a0 	cmpeqi	r2,r2,27138
 802736c:	1000181e 	bne	r2,zero,80273d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8027370:	00002906 	br	8027418 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8027374:	e0bffd17 	ldw	r2,-12(fp)
 8027378:	10c00117 	ldw	r3,4(r2)
 802737c:	00a00034 	movhi	r2,32768
 8027380:	10bfffc4 	addi	r2,r2,-1
 8027384:	18802126 	beq	r3,r2,802740c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8027388:	e0bfff17 	ldw	r2,-4(fp)
 802738c:	10800017 	ldw	r2,0(r2)
 8027390:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8027394:	e0bffc17 	ldw	r2,-16(fp)
 8027398:	10800090 	cmplti	r2,r2,2
 802739c:	1000061e 	bne	r2,zero,80273b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 80273a0:	e0fffc17 	ldw	r3,-16(fp)
 80273a4:	00a00034 	movhi	r2,32768
 80273a8:	10bfffc4 	addi	r2,r2,-1
 80273ac:	18800226 	beq	r3,r2,80273b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 80273b0:	e0bffc17 	ldw	r2,-16(fp)
 80273b4:	00000206 	br	80273c0 <altera_avalon_jtag_uart_ioctl+0x84>
 80273b8:	00a00034 	movhi	r2,32768
 80273bc:	10bfff84 	addi	r2,r2,-2
 80273c0:	e0fffd17 	ldw	r3,-12(fp)
 80273c4:	18800115 	stw	r2,4(r3)
      rc = 0;
 80273c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80273cc:	00000f06 	br	802740c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80273d0:	e0bffd17 	ldw	r2,-12(fp)
 80273d4:	10c00117 	ldw	r3,4(r2)
 80273d8:	00a00034 	movhi	r2,32768
 80273dc:	10bfffc4 	addi	r2,r2,-1
 80273e0:	18800c26 	beq	r3,r2,8027414 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80273e4:	e0bffd17 	ldw	r2,-12(fp)
 80273e8:	10c00917 	ldw	r3,36(r2)
 80273ec:	e0bffd17 	ldw	r2,-12(fp)
 80273f0:	10800117 	ldw	r2,4(r2)
 80273f4:	1885803a 	cmpltu	r2,r3,r2
 80273f8:	10c03fcc 	andi	r3,r2,255
 80273fc:	e0bfff17 	ldw	r2,-4(fp)
 8027400:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8027404:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8027408:	00000206 	br	8027414 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 802740c:	0001883a 	nop
 8027410:	00000106 	br	8027418 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8027414:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8027418:	e0bffb17 	ldw	r2,-20(fp)
}
 802741c:	e037883a 	mov	sp,fp
 8027420:	df000017 	ldw	fp,0(sp)
 8027424:	dec00104 	addi	sp,sp,4
 8027428:	f800283a 	ret

0802742c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 802742c:	defff304 	addi	sp,sp,-52
 8027430:	dfc00c15 	stw	ra,48(sp)
 8027434:	df000b15 	stw	fp,44(sp)
 8027438:	df000b04 	addi	fp,sp,44
 802743c:	e13ffc15 	stw	r4,-16(fp)
 8027440:	e17ffd15 	stw	r5,-12(fp)
 8027444:	e1bffe15 	stw	r6,-8(fp)
 8027448:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 802744c:	e0bffd17 	ldw	r2,-12(fp)
 8027450:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8027454:	00004706 	br	8027574 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8027458:	e0bffc17 	ldw	r2,-16(fp)
 802745c:	10800a17 	ldw	r2,40(r2)
 8027460:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8027464:	e0bffc17 	ldw	r2,-16(fp)
 8027468:	10800b17 	ldw	r2,44(r2)
 802746c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8027470:	e0fff717 	ldw	r3,-36(fp)
 8027474:	e0bff817 	ldw	r2,-32(fp)
 8027478:	18800536 	bltu	r3,r2,8027490 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 802747c:	e0fff717 	ldw	r3,-36(fp)
 8027480:	e0bff817 	ldw	r2,-32(fp)
 8027484:	1885c83a 	sub	r2,r3,r2
 8027488:	e0bff615 	stw	r2,-40(fp)
 802748c:	00000406 	br	80274a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8027490:	00c20004 	movi	r3,2048
 8027494:	e0bff817 	ldw	r2,-32(fp)
 8027498:	1885c83a 	sub	r2,r3,r2
 802749c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80274a0:	e0bff617 	ldw	r2,-40(fp)
 80274a4:	10001e26 	beq	r2,zero,8027520 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80274a8:	e0fffe17 	ldw	r3,-8(fp)
 80274ac:	e0bff617 	ldw	r2,-40(fp)
 80274b0:	1880022e 	bgeu	r3,r2,80274bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80274b4:	e0bffe17 	ldw	r2,-8(fp)
 80274b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80274bc:	e0bffc17 	ldw	r2,-16(fp)
 80274c0:	10c00e04 	addi	r3,r2,56
 80274c4:	e0bff817 	ldw	r2,-32(fp)
 80274c8:	1885883a 	add	r2,r3,r2
 80274cc:	e1bff617 	ldw	r6,-40(fp)
 80274d0:	100b883a 	mov	r5,r2
 80274d4:	e13ff517 	ldw	r4,-44(fp)
 80274d8:	80246dc0 	call	80246dc <memcpy>
      ptr   += n;
 80274dc:	e0fff517 	ldw	r3,-44(fp)
 80274e0:	e0bff617 	ldw	r2,-40(fp)
 80274e4:	1885883a 	add	r2,r3,r2
 80274e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80274ec:	e0fffe17 	ldw	r3,-8(fp)
 80274f0:	e0bff617 	ldw	r2,-40(fp)
 80274f4:	1885c83a 	sub	r2,r3,r2
 80274f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80274fc:	e0fff817 	ldw	r3,-32(fp)
 8027500:	e0bff617 	ldw	r2,-40(fp)
 8027504:	1885883a 	add	r2,r3,r2
 8027508:	10c1ffcc 	andi	r3,r2,2047
 802750c:	e0bffc17 	ldw	r2,-16(fp)
 8027510:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8027514:	e0bffe17 	ldw	r2,-8(fp)
 8027518:	00bfcf16 	blt	zero,r2,8027458 <__alt_data_end+0xfffe8058>
 802751c:	00000106 	br	8027524 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8027520:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8027524:	e0fff517 	ldw	r3,-44(fp)
 8027528:	e0bffd17 	ldw	r2,-12(fp)
 802752c:	1880141e 	bne	r3,r2,8027580 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8027530:	e0bfff17 	ldw	r2,-4(fp)
 8027534:	1090000c 	andi	r2,r2,16384
 8027538:	1000131e 	bne	r2,zero,8027588 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 802753c:	0001883a 	nop
 8027540:	e0bffc17 	ldw	r2,-16(fp)
 8027544:	10c00a17 	ldw	r3,40(r2)
 8027548:	e0bff717 	ldw	r2,-36(fp)
 802754c:	1880051e 	bne	r3,r2,8027564 <altera_avalon_jtag_uart_read+0x138>
 8027550:	e0bffc17 	ldw	r2,-16(fp)
 8027554:	10c00917 	ldw	r3,36(r2)
 8027558:	e0bffc17 	ldw	r2,-16(fp)
 802755c:	10800117 	ldw	r2,4(r2)
 8027560:	18bff736 	bltu	r3,r2,8027540 <__alt_data_end+0xfffe8140>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8027564:	e0bffc17 	ldw	r2,-16(fp)
 8027568:	10c00a17 	ldw	r3,40(r2)
 802756c:	e0bff717 	ldw	r2,-36(fp)
 8027570:	18800726 	beq	r3,r2,8027590 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8027574:	e0bffe17 	ldw	r2,-8(fp)
 8027578:	00bfb716 	blt	zero,r2,8027458 <__alt_data_end+0xfffe8058>
 802757c:	00000506 	br	8027594 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8027580:	0001883a 	nop
 8027584:	00000306 	br	8027594 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8027588:	0001883a 	nop
 802758c:	00000106 	br	8027594 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8027590:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8027594:	e0fff517 	ldw	r3,-44(fp)
 8027598:	e0bffd17 	ldw	r2,-12(fp)
 802759c:	18801826 	beq	r3,r2,8027600 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80275a0:	0005303a 	rdctl	r2,status
 80275a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80275a8:	e0fffb17 	ldw	r3,-20(fp)
 80275ac:	00bfff84 	movi	r2,-2
 80275b0:	1884703a 	and	r2,r3,r2
 80275b4:	1001703a 	wrctl	status,r2
  
  return context;
 80275b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80275bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80275c0:	e0bffc17 	ldw	r2,-16(fp)
 80275c4:	10800817 	ldw	r2,32(r2)
 80275c8:	10c00054 	ori	r3,r2,1
 80275cc:	e0bffc17 	ldw	r2,-16(fp)
 80275d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80275d4:	e0bffc17 	ldw	r2,-16(fp)
 80275d8:	10800017 	ldw	r2,0(r2)
 80275dc:	10800104 	addi	r2,r2,4
 80275e0:	1007883a 	mov	r3,r2
 80275e4:	e0bffc17 	ldw	r2,-16(fp)
 80275e8:	10800817 	ldw	r2,32(r2)
 80275ec:	18800035 	stwio	r2,0(r3)
 80275f0:	e0bffa17 	ldw	r2,-24(fp)
 80275f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80275f8:	e0bff917 	ldw	r2,-28(fp)
 80275fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8027600:	e0fff517 	ldw	r3,-44(fp)
 8027604:	e0bffd17 	ldw	r2,-12(fp)
 8027608:	18800426 	beq	r3,r2,802761c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 802760c:	e0fff517 	ldw	r3,-44(fp)
 8027610:	e0bffd17 	ldw	r2,-12(fp)
 8027614:	1885c83a 	sub	r2,r3,r2
 8027618:	00000606 	br	8027634 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 802761c:	e0bfff17 	ldw	r2,-4(fp)
 8027620:	1090000c 	andi	r2,r2,16384
 8027624:	10000226 	beq	r2,zero,8027630 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8027628:	00bffd44 	movi	r2,-11
 802762c:	00000106 	br	8027634 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8027630:	00bffec4 	movi	r2,-5
}
 8027634:	e037883a 	mov	sp,fp
 8027638:	dfc00117 	ldw	ra,4(sp)
 802763c:	df000017 	ldw	fp,0(sp)
 8027640:	dec00204 	addi	sp,sp,8
 8027644:	f800283a 	ret

08027648 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8027648:	defff304 	addi	sp,sp,-52
 802764c:	dfc00c15 	stw	ra,48(sp)
 8027650:	df000b15 	stw	fp,44(sp)
 8027654:	df000b04 	addi	fp,sp,44
 8027658:	e13ffc15 	stw	r4,-16(fp)
 802765c:	e17ffd15 	stw	r5,-12(fp)
 8027660:	e1bffe15 	stw	r6,-8(fp)
 8027664:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8027668:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 802766c:	e0bffd17 	ldw	r2,-12(fp)
 8027670:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8027674:	00003706 	br	8027754 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8027678:	e0bffc17 	ldw	r2,-16(fp)
 802767c:	10800c17 	ldw	r2,48(r2)
 8027680:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8027684:	e0bffc17 	ldw	r2,-16(fp)
 8027688:	10800d17 	ldw	r2,52(r2)
 802768c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8027690:	e0fff917 	ldw	r3,-28(fp)
 8027694:	e0bff517 	ldw	r2,-44(fp)
 8027698:	1880062e 	bgeu	r3,r2,80276b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 802769c:	e0fff517 	ldw	r3,-44(fp)
 80276a0:	e0bff917 	ldw	r2,-28(fp)
 80276a4:	1885c83a 	sub	r2,r3,r2
 80276a8:	10bfffc4 	addi	r2,r2,-1
 80276ac:	e0bff615 	stw	r2,-40(fp)
 80276b0:	00000b06 	br	80276e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80276b4:	e0bff517 	ldw	r2,-44(fp)
 80276b8:	10000526 	beq	r2,zero,80276d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80276bc:	00c20004 	movi	r3,2048
 80276c0:	e0bff917 	ldw	r2,-28(fp)
 80276c4:	1885c83a 	sub	r2,r3,r2
 80276c8:	e0bff615 	stw	r2,-40(fp)
 80276cc:	00000406 	br	80276e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80276d0:	00c1ffc4 	movi	r3,2047
 80276d4:	e0bff917 	ldw	r2,-28(fp)
 80276d8:	1885c83a 	sub	r2,r3,r2
 80276dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80276e0:	e0bff617 	ldw	r2,-40(fp)
 80276e4:	10001e26 	beq	r2,zero,8027760 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80276e8:	e0fffe17 	ldw	r3,-8(fp)
 80276ec:	e0bff617 	ldw	r2,-40(fp)
 80276f0:	1880022e 	bgeu	r3,r2,80276fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80276f4:	e0bffe17 	ldw	r2,-8(fp)
 80276f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80276fc:	e0bffc17 	ldw	r2,-16(fp)
 8027700:	10c20e04 	addi	r3,r2,2104
 8027704:	e0bff917 	ldw	r2,-28(fp)
 8027708:	1885883a 	add	r2,r3,r2
 802770c:	e1bff617 	ldw	r6,-40(fp)
 8027710:	e17ffd17 	ldw	r5,-12(fp)
 8027714:	1009883a 	mov	r4,r2
 8027718:	80246dc0 	call	80246dc <memcpy>
      ptr   += n;
 802771c:	e0fffd17 	ldw	r3,-12(fp)
 8027720:	e0bff617 	ldw	r2,-40(fp)
 8027724:	1885883a 	add	r2,r3,r2
 8027728:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 802772c:	e0fffe17 	ldw	r3,-8(fp)
 8027730:	e0bff617 	ldw	r2,-40(fp)
 8027734:	1885c83a 	sub	r2,r3,r2
 8027738:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 802773c:	e0fff917 	ldw	r3,-28(fp)
 8027740:	e0bff617 	ldw	r2,-40(fp)
 8027744:	1885883a 	add	r2,r3,r2
 8027748:	10c1ffcc 	andi	r3,r2,2047
 802774c:	e0bffc17 	ldw	r2,-16(fp)
 8027750:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8027754:	e0bffe17 	ldw	r2,-8(fp)
 8027758:	00bfc716 	blt	zero,r2,8027678 <__alt_data_end+0xfffe8278>
 802775c:	00000106 	br	8027764 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8027760:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8027764:	0005303a 	rdctl	r2,status
 8027768:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802776c:	e0fffb17 	ldw	r3,-20(fp)
 8027770:	00bfff84 	movi	r2,-2
 8027774:	1884703a 	and	r2,r3,r2
 8027778:	1001703a 	wrctl	status,r2
  
  return context;
 802777c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8027780:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8027784:	e0bffc17 	ldw	r2,-16(fp)
 8027788:	10800817 	ldw	r2,32(r2)
 802778c:	10c00094 	ori	r3,r2,2
 8027790:	e0bffc17 	ldw	r2,-16(fp)
 8027794:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8027798:	e0bffc17 	ldw	r2,-16(fp)
 802779c:	10800017 	ldw	r2,0(r2)
 80277a0:	10800104 	addi	r2,r2,4
 80277a4:	1007883a 	mov	r3,r2
 80277a8:	e0bffc17 	ldw	r2,-16(fp)
 80277ac:	10800817 	ldw	r2,32(r2)
 80277b0:	18800035 	stwio	r2,0(r3)
 80277b4:	e0bffa17 	ldw	r2,-24(fp)
 80277b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80277bc:	e0bff817 	ldw	r2,-32(fp)
 80277c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80277c4:	e0bffe17 	ldw	r2,-8(fp)
 80277c8:	0080100e 	bge	zero,r2,802780c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80277cc:	e0bfff17 	ldw	r2,-4(fp)
 80277d0:	1090000c 	andi	r2,r2,16384
 80277d4:	1000101e 	bne	r2,zero,8027818 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80277d8:	0001883a 	nop
 80277dc:	e0bffc17 	ldw	r2,-16(fp)
 80277e0:	10c00d17 	ldw	r3,52(r2)
 80277e4:	e0bff517 	ldw	r2,-44(fp)
 80277e8:	1880051e 	bne	r3,r2,8027800 <altera_avalon_jtag_uart_write+0x1b8>
 80277ec:	e0bffc17 	ldw	r2,-16(fp)
 80277f0:	10c00917 	ldw	r3,36(r2)
 80277f4:	e0bffc17 	ldw	r2,-16(fp)
 80277f8:	10800117 	ldw	r2,4(r2)
 80277fc:	18bff736 	bltu	r3,r2,80277dc <__alt_data_end+0xfffe83dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8027800:	e0bffc17 	ldw	r2,-16(fp)
 8027804:	10800917 	ldw	r2,36(r2)
 8027808:	1000051e 	bne	r2,zero,8027820 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 802780c:	e0bffe17 	ldw	r2,-8(fp)
 8027810:	00bfd016 	blt	zero,r2,8027754 <__alt_data_end+0xfffe8354>
 8027814:	00000306 	br	8027824 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8027818:	0001883a 	nop
 802781c:	00000106 	br	8027824 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8027820:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8027824:	e0fffd17 	ldw	r3,-12(fp)
 8027828:	e0bff717 	ldw	r2,-36(fp)
 802782c:	18800426 	beq	r3,r2,8027840 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8027830:	e0fffd17 	ldw	r3,-12(fp)
 8027834:	e0bff717 	ldw	r2,-36(fp)
 8027838:	1885c83a 	sub	r2,r3,r2
 802783c:	00000606 	br	8027858 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8027840:	e0bfff17 	ldw	r2,-4(fp)
 8027844:	1090000c 	andi	r2,r2,16384
 8027848:	10000226 	beq	r2,zero,8027854 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 802784c:	00bffd44 	movi	r2,-11
 8027850:	00000106 	br	8027858 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8027854:	00bffec4 	movi	r2,-5
}
 8027858:	e037883a 	mov	sp,fp
 802785c:	dfc00117 	ldw	ra,4(sp)
 8027860:	df000017 	ldw	fp,0(sp)
 8027864:	dec00204 	addi	sp,sp,8
 8027868:	f800283a 	ret

0802786c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 802786c:	defffa04 	addi	sp,sp,-24
 8027870:	dfc00515 	stw	ra,20(sp)
 8027874:	df000415 	stw	fp,16(sp)
 8027878:	df000404 	addi	fp,sp,16
 802787c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8027880:	0007883a 	mov	r3,zero
 8027884:	e0bfff17 	ldw	r2,-4(fp)
 8027888:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 802788c:	e0bfff17 	ldw	r2,-4(fp)
 8027890:	10800104 	addi	r2,r2,4
 8027894:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8027898:	0005303a 	rdctl	r2,status
 802789c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80278a0:	e0fffd17 	ldw	r3,-12(fp)
 80278a4:	00bfff84 	movi	r2,-2
 80278a8:	1884703a 	and	r2,r3,r2
 80278ac:	1001703a 	wrctl	status,r2
  
  return context;
 80278b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80278b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80278b8:	80268d00 	call	80268d0 <alt_tick>
 80278bc:	e0bffc17 	ldw	r2,-16(fp)
 80278c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80278c4:	e0bffe17 	ldw	r2,-8(fp)
 80278c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80278cc:	0001883a 	nop
 80278d0:	e037883a 	mov	sp,fp
 80278d4:	dfc00117 	ldw	ra,4(sp)
 80278d8:	df000017 	ldw	fp,0(sp)
 80278dc:	dec00204 	addi	sp,sp,8
 80278e0:	f800283a 	ret

080278e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80278e4:	defff804 	addi	sp,sp,-32
 80278e8:	dfc00715 	stw	ra,28(sp)
 80278ec:	df000615 	stw	fp,24(sp)
 80278f0:	df000604 	addi	fp,sp,24
 80278f4:	e13ffc15 	stw	r4,-16(fp)
 80278f8:	e17ffd15 	stw	r5,-12(fp)
 80278fc:	e1bffe15 	stw	r6,-8(fp)
 8027900:	e1ffff15 	stw	r7,-4(fp)
 8027904:	e0bfff17 	ldw	r2,-4(fp)
 8027908:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 802790c:	d0a6d817 	ldw	r2,-25760(gp)
 8027910:	1000021e 	bne	r2,zero,802791c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8027914:	e0bffb17 	ldw	r2,-20(fp)
 8027918:	d0a6d815 	stw	r2,-25760(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 802791c:	e0bffc17 	ldw	r2,-16(fp)
 8027920:	10800104 	addi	r2,r2,4
 8027924:	00c001c4 	movi	r3,7
 8027928:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 802792c:	d8000015 	stw	zero,0(sp)
 8027930:	e1fffc17 	ldw	r7,-16(fp)
 8027934:	018200b4 	movhi	r6,2050
 8027938:	319e1b04 	addi	r6,r6,30828
 802793c:	e17ffe17 	ldw	r5,-8(fp)
 8027940:	e13ffd17 	ldw	r4,-12(fp)
 8027944:	802920c0 	call	802920c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8027948:	0001883a 	nop
 802794c:	e037883a 	mov	sp,fp
 8027950:	dfc00117 	ldw	ra,4(sp)
 8027954:	df000017 	ldw	fp,0(sp)
 8027958:	dec00204 	addi	sp,sp,8
 802795c:	f800283a 	ret

08027960 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 8027960:	defff904 	addi	sp,sp,-28
 8027964:	dfc00615 	stw	ra,24(sp)
 8027968:	df000515 	stw	fp,20(sp)
 802796c:	df000504 	addi	fp,sp,20
 8027970:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
 8027974:	e0bfff17 	ldw	r2,-4(fp)
 8027978:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
 802797c:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
 8027980:	e0bffb17 	ldw	r2,-20(fp)
 8027984:	10001a26 	beq	r2,zero,80279f0 <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8027988:	0005303a 	rdctl	r2,status
 802798c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8027990:	e0fffe17 	ldw	r3,-8(fp)
 8027994:	00bfff84 	movi	r2,-2
 8027998:	1884703a 	and	r2,r3,r2
 802799c:	1001703a 	wrctl	status,r2
  
  return context;
 80279a0:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
 80279a4:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 80279a8:	e0bffb17 	ldw	r2,-20(fp)
 80279ac:	10800a17 	ldw	r2,40(r2)
 80279b0:	10000626 	beq	r2,zero,80279cc <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
 80279b4:	e0bffb17 	ldw	r2,-20(fp)
 80279b8:	10800a17 	ldw	r2,40(r2)
 80279bc:	e0fffb17 	ldw	r3,-20(fp)
 80279c0:	18c00b17 	ldw	r3,44(r3)
 80279c4:	1809883a 	mov	r4,r3
 80279c8:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
 80279cc:	e0bffb17 	ldw	r2,-20(fp)
 80279d0:	10800c17 	ldw	r2,48(r2)
 80279d4:	1009883a 	mov	r4,r2
 80279d8:	8027e0c0 	call	8027e0c <adc_clear_interrupt_status>
 80279dc:	e0bffc17 	ldw	r2,-16(fp)
 80279e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80279e4:	e0bffd17 	ldw	r2,-12(fp)
 80279e8:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
 80279ec:	0001883a 	nop
 80279f0:	0001883a 	nop
}
 80279f4:	e037883a 	mov	sp,fp
 80279f8:	dfc00117 	ldw	ra,4(sp)
 80279fc:	df000017 	ldw	fp,0(sp)
 8027a00:	dec00204 	addi	sp,sp,8
 8027a04:	f800283a 	ret

08027a08 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
 8027a08:	defff804 	addi	sp,sp,-32
 8027a0c:	df000715 	stw	fp,28(sp)
 8027a10:	df000704 	addi	fp,sp,28
 8027a14:	e13ffd15 	stw	r4,-12(fp)
 8027a18:	e17ffe15 	stw	r5,-8(fp)
 8027a1c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
 8027a20:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
 8027a24:	e0bfff17 	ldw	r2,-4(fp)
 8027a28:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
 8027a2c:	e0bffe17 	ldw	r2,-8(fp)
 8027a30:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
 8027a34:	e0bffd17 	ldw	r2,-12(fp)
 8027a38:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 8027a3c:	e0bffa17 	ldw	r2,-24(fp)
 8027a40:	1000021e 	bne	r2,zero,8027a4c <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
 8027a44:	00bffa84 	movi	r2,-22
 8027a48:	00001606 	br	8027aa4 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
 8027a4c:	e03ff915 	stw	zero,-28(fp)
 8027a50:	00001006 	br	8027a94 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 8027a54:	e0bff917 	ldw	r2,-28(fp)
 8027a58:	1085883a 	add	r2,r2,r2
 8027a5c:	1085883a 	add	r2,r2,r2
 8027a60:	1007883a 	mov	r3,r2
 8027a64:	e0bffc17 	ldw	r2,-16(fp)
 8027a68:	1885883a 	add	r2,r3,r2
 8027a6c:	10800037 	ldwio	r2,0(r2)
 8027a70:	1007883a 	mov	r3,r2
 8027a74:	e0bffa17 	ldw	r2,-24(fp)
 8027a78:	10c00015 	stw	r3,0(r2)

       dest_buf++;
 8027a7c:	e0bffa17 	ldw	r2,-24(fp)
 8027a80:	10800104 	addi	r2,r2,4
 8027a84:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 8027a88:	e0bff917 	ldw	r2,-28(fp)
 8027a8c:	10800044 	addi	r2,r2,1
 8027a90:	e0bff915 	stw	r2,-28(fp)
 8027a94:	e0fff917 	ldw	r3,-28(fp)
 8027a98:	e0bffb17 	ldw	r2,-20(fp)
 8027a9c:	18bfed36 	bltu	r3,r2,8027a54 <__alt_data_end+0xfffe8654>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 8027aa0:	0005883a 	mov	r2,zero

}
 8027aa4:	e037883a 	mov	sp,fp
 8027aa8:	df000017 	ldw	fp,0(sp)
 8027aac:	dec00104 	addi	sp,sp,4
 8027ab0:	f800283a 	ret

08027ab4 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 8027ab4:	defffa04 	addi	sp,sp,-24
 8027ab8:	dfc00515 	stw	ra,20(sp)
 8027abc:	df000415 	stw	fp,16(sp)
 8027ac0:	df000404 	addi	fp,sp,16
 8027ac4:	e13ffd15 	stw	r4,-12(fp)
 8027ac8:	e17ffe15 	stw	r5,-8(fp)
 8027acc:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 8027ad0:	d1600d04 	addi	r5,gp,-32716
 8027ad4:	e13ffd17 	ldw	r4,-12(fp)
 8027ad8:	8028ff80 	call	8028ff8 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 8027adc:	e0bffe17 	ldw	r2,-8(fp)
 8027ae0:	10000b16 	blt	r2,zero,8027b10 <altera_modular_adc_init+0x5c>
 8027ae4:	e0bfff17 	ldw	r2,-4(fp)
 8027ae8:	10000916 	blt	r2,zero,8027b10 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 8027aec:	e0bffe17 	ldw	r2,-8(fp)
 8027af0:	e0ffff17 	ldw	r3,-4(fp)
 8027af4:	d8000015 	stw	zero,0(sp)
 8027af8:	e1fffd17 	ldw	r7,-12(fp)
 8027afc:	018200b4 	movhi	r6,2050
 8027b00:	319e5804 	addi	r6,r6,31072
 8027b04:	180b883a 	mov	r5,r3
 8027b08:	1009883a 	mov	r4,r2
 8027b0c:	802920c0 	call	802920c <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 8027b10:	0001883a 	nop
 8027b14:	e037883a 	mov	sp,fp
 8027b18:	dfc00117 	ldw	ra,4(sp)
 8027b1c:	df000017 	ldw	fp,0(sp)
 8027b20:	dec00204 	addi	sp,sp,8
 8027b24:	f800283a 	ret

08027b28 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
 8027b28:	defffa04 	addi	sp,sp,-24
 8027b2c:	dfc00515 	stw	ra,20(sp)
 8027b30:	df000415 	stw	fp,16(sp)
 8027b34:	df000404 	addi	fp,sp,16
 8027b38:	e13ffc15 	stw	r4,-16(fp)
 8027b3c:	e17ffd15 	stw	r5,-12(fp)
 8027b40:	e1bffe15 	stw	r6,-8(fp)
 8027b44:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 8027b48:	e0bffc17 	ldw	r2,-16(fp)
 8027b4c:	e0fffd17 	ldw	r3,-12(fp)
 8027b50:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
 8027b54:	e0bffc17 	ldw	r2,-16(fp)
 8027b58:	e0fffe17 	ldw	r3,-8(fp)
 8027b5c:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
 8027b60:	e0bffc17 	ldw	r2,-16(fp)
 8027b64:	e0ffff17 	ldw	r3,-4(fp)
 8027b68:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
 8027b6c:	e0bffd17 	ldw	r2,-12(fp)
 8027b70:	10000726 	beq	r2,zero,8027b90 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
 8027b74:	e0bfff17 	ldw	r2,-4(fp)
 8027b78:	1009883a 	mov	r4,r2
 8027b7c:	8027e0c0 	call	8027e0c <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
 8027b80:	e0bfff17 	ldw	r2,-4(fp)
 8027b84:	1009883a 	mov	r4,r2
 8027b88:	8027d800 	call	8027d80 <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
 8027b8c:	00000706 	br	8027bac <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
 8027b90:	e0bfff17 	ldw	r2,-4(fp)
 8027b94:	1009883a 	mov	r4,r2
 8027b98:	8027dc40 	call	8027dc4 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
 8027b9c:	e0bfff17 	ldw	r2,-4(fp)
 8027ba0:	1009883a 	mov	r4,r2
 8027ba4:	8027e0c0 	call	8027e0c <adc_clear_interrupt_status>
	}
	
    
	
    return ;
 8027ba8:	0001883a 	nop
}
 8027bac:	e037883a 	mov	sp,fp
 8027bb0:	dfc00117 	ldw	ra,4(sp)
 8027bb4:	df000017 	ldw	fp,0(sp)
 8027bb8:	dec00204 	addi	sp,sp,8
 8027bbc:	f800283a 	ret

08027bc0 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
 8027bc0:	defffc04 	addi	sp,sp,-16
 8027bc4:	dfc00315 	stw	ra,12(sp)
 8027bc8:	df000215 	stw	fp,8(sp)
 8027bcc:	df000204 	addi	fp,sp,8
 8027bd0:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
 8027bd4:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 8027bd8:	d1600d04 	addi	r5,gp,-32716
 8027bdc:	e13fff17 	ldw	r4,-4(fp)
 8027be0:	802915c0 	call	802915c <alt_find_dev>
 8027be4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 8027be8:	e0bffe17 	ldw	r2,-8(fp)
}
 8027bec:	e037883a 	mov	sp,fp
 8027bf0:	dfc00117 	ldw	ra,4(sp)
 8027bf4:	df000017 	ldw	fp,0(sp)
 8027bf8:	dec00204 	addi	sp,sp,8
 8027bfc:	f800283a 	ret

08027c00 <adc_stop>:

void adc_stop(int sequencer_base)
{
 8027c00:	defffe04 	addi	sp,sp,-8
 8027c04:	df000115 	stw	fp,4(sp)
 8027c08:	df000104 	addi	fp,sp,4
 8027c0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 8027c10:	e0bfff17 	ldw	r2,-4(fp)
 8027c14:	e0ffff17 	ldw	r3,-4(fp)
 8027c18:	19000037 	ldwio	r4,0(r3)
 8027c1c:	00ffff84 	movi	r3,-2
 8027c20:	20c6703a 	and	r3,r4,r3
 8027c24:	10c00035 	stwio	r3,0(r2)
 8027c28:	0001883a 	nop
 8027c2c:	e0bfff17 	ldw	r2,-4(fp)
 8027c30:	10800037 	ldwio	r2,0(r2)
 8027c34:	1080004c 	andi	r2,r2,1
 8027c38:	103ffc1e 	bne	r2,zero,8027c2c <__alt_data_end+0xfffe882c>
}
 8027c3c:	0001883a 	nop
 8027c40:	e037883a 	mov	sp,fp
 8027c44:	df000017 	ldw	fp,0(sp)
 8027c48:	dec00104 	addi	sp,sp,4
 8027c4c:	f800283a 	ret

08027c50 <adc_start>:

void adc_start(int sequencer_base)
{
 8027c50:	defffe04 	addi	sp,sp,-8
 8027c54:	df000115 	stw	fp,4(sp)
 8027c58:	df000104 	addi	fp,sp,4
 8027c5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 8027c60:	e0bfff17 	ldw	r2,-4(fp)
 8027c64:	e0ffff17 	ldw	r3,-4(fp)
 8027c68:	18c00037 	ldwio	r3,0(r3)
 8027c6c:	18c00054 	ori	r3,r3,1
 8027c70:	10c00035 	stwio	r3,0(r2)
}
 8027c74:	0001883a 	nop
 8027c78:	e037883a 	mov	sp,fp
 8027c7c:	df000017 	ldw	fp,0(sp)
 8027c80:	dec00104 	addi	sp,sp,4
 8027c84:	f800283a 	ret

08027c88 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
 8027c88:	defffe04 	addi	sp,sp,-8
 8027c8c:	df000115 	stw	fp,4(sp)
 8027c90:	df000104 	addi	fp,sp,4
 8027c94:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 8027c98:	e0bfff17 	ldw	r2,-4(fp)
 8027c9c:	e0ffff17 	ldw	r3,-4(fp)
 8027ca0:	19000037 	ldwio	r4,0(r3)
 8027ca4:	00fffc44 	movi	r3,-15
 8027ca8:	20c6703a 	and	r3,r4,r3
 8027cac:	18c00094 	ori	r3,r3,2
 8027cb0:	10c00035 	stwio	r3,0(r2)
}
 8027cb4:	0001883a 	nop
 8027cb8:	e037883a 	mov	sp,fp
 8027cbc:	df000017 	ldw	fp,0(sp)
 8027cc0:	dec00104 	addi	sp,sp,4
 8027cc4:	f800283a 	ret

08027cc8 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
 8027cc8:	defffe04 	addi	sp,sp,-8
 8027ccc:	df000115 	stw	fp,4(sp)
 8027cd0:	df000104 	addi	fp,sp,4
 8027cd4:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 8027cd8:	e0bfff17 	ldw	r2,-4(fp)
 8027cdc:	e0ffff17 	ldw	r3,-4(fp)
 8027ce0:	19000037 	ldwio	r4,0(r3)
 8027ce4:	00fffc44 	movi	r3,-15
 8027ce8:	20c6703a 	and	r3,r4,r3
 8027cec:	10c00035 	stwio	r3,0(r2)
}
 8027cf0:	0001883a 	nop
 8027cf4:	e037883a 	mov	sp,fp
 8027cf8:	df000017 	ldw	fp,0(sp)
 8027cfc:	dec00104 	addi	sp,sp,4
 8027d00:	f800283a 	ret

08027d04 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
 8027d04:	defffc04 	addi	sp,sp,-16
 8027d08:	dfc00315 	stw	ra,12(sp)
 8027d0c:	df000215 	stw	fp,8(sp)
 8027d10:	df000204 	addi	fp,sp,8
 8027d14:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 8027d18:	e0bfff17 	ldw	r2,-4(fp)
 8027d1c:	10800037 	ldwio	r2,0(r2)
 8027d20:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
 8027d24:	e13fff17 	ldw	r4,-4(fp)
 8027d28:	8027c000 	call	8027c00 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 8027d2c:	e0bfff17 	ldw	r2,-4(fp)
 8027d30:	e0ffff17 	ldw	r3,-4(fp)
 8027d34:	18c00037 	ldwio	r3,0(r3)
 8027d38:	18c00394 	ori	r3,r3,14
 8027d3c:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
 8027d40:	e13fff17 	ldw	r4,-4(fp)
 8027d44:	8027c500 	call	8027c50 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 8027d48:	0001883a 	nop
 8027d4c:	e0bfff17 	ldw	r2,-4(fp)
 8027d50:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
 8027d54:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 8027d58:	103ffc1e 	bne	r2,zero,8027d4c <__alt_data_end+0xfffe894c>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 8027d5c:	e0bfff17 	ldw	r2,-4(fp)
 8027d60:	e0fffe17 	ldw	r3,-8(fp)
 8027d64:	10c00035 	stwio	r3,0(r2)
}
 8027d68:	0001883a 	nop
 8027d6c:	e037883a 	mov	sp,fp
 8027d70:	dfc00117 	ldw	ra,4(sp)
 8027d74:	df000017 	ldw	fp,0(sp)
 8027d78:	dec00204 	addi	sp,sp,8
 8027d7c:	f800283a 	ret

08027d80 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
 8027d80:	defffe04 	addi	sp,sp,-8
 8027d84:	df000115 	stw	fp,4(sp)
 8027d88:	df000104 	addi	fp,sp,4
 8027d8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 8027d90:	e0bfff17 	ldw	r2,-4(fp)
 8027d94:	10804004 	addi	r2,r2,256
 8027d98:	1007883a 	mov	r3,r2
 8027d9c:	e0bfff17 	ldw	r2,-4(fp)
 8027da0:	10804004 	addi	r2,r2,256
 8027da4:	10800037 	ldwio	r2,0(r2)
 8027da8:	10800054 	ori	r2,r2,1
 8027dac:	18800035 	stwio	r2,0(r3)
}
 8027db0:	0001883a 	nop
 8027db4:	e037883a 	mov	sp,fp
 8027db8:	df000017 	ldw	fp,0(sp)
 8027dbc:	dec00104 	addi	sp,sp,4
 8027dc0:	f800283a 	ret

08027dc4 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
 8027dc4:	defffe04 	addi	sp,sp,-8
 8027dc8:	df000115 	stw	fp,4(sp)
 8027dcc:	df000104 	addi	fp,sp,4
 8027dd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 8027dd4:	e0bfff17 	ldw	r2,-4(fp)
 8027dd8:	10804004 	addi	r2,r2,256
 8027ddc:	1009883a 	mov	r4,r2
 8027de0:	e0bfff17 	ldw	r2,-4(fp)
 8027de4:	10804004 	addi	r2,r2,256
 8027de8:	10c00037 	ldwio	r3,0(r2)
 8027dec:	00bfff84 	movi	r2,-2
 8027df0:	1884703a 	and	r2,r3,r2
 8027df4:	20800035 	stwio	r2,0(r4)
}
 8027df8:	0001883a 	nop
 8027dfc:	e037883a 	mov	sp,fp
 8027e00:	df000017 	ldw	fp,0(sp)
 8027e04:	dec00104 	addi	sp,sp,4
 8027e08:	f800283a 	ret

08027e0c <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
 8027e0c:	defffe04 	addi	sp,sp,-8
 8027e10:	df000115 	stw	fp,4(sp)
 8027e14:	df000104 	addi	fp,sp,4
 8027e18:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 8027e1c:	e0bfff17 	ldw	r2,-4(fp)
 8027e20:	10804104 	addi	r2,r2,260
 8027e24:	1007883a 	mov	r3,r2
 8027e28:	e0bfff17 	ldw	r2,-4(fp)
 8027e2c:	10804104 	addi	r2,r2,260
 8027e30:	10800037 	ldwio	r2,0(r2)
 8027e34:	10800054 	ori	r2,r2,1
 8027e38:	18800035 	stwio	r2,0(r3)
}
 8027e3c:	0001883a 	nop
 8027e40:	e037883a 	mov	sp,fp
 8027e44:	df000017 	ldw	fp,0(sp)
 8027e48:	dec00104 	addi	sp,sp,4
 8027e4c:	f800283a 	ret

08027e50 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
 8027e50:	defffe04 	addi	sp,sp,-8
 8027e54:	df000115 	stw	fp,4(sp)
 8027e58:	df000104 	addi	fp,sp,4
 8027e5c:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 8027e60:	e0bfff17 	ldw	r2,-4(fp)
 8027e64:	10804104 	addi	r2,r2,260
 8027e68:	10800037 	ldwio	r2,0(r2)
 8027e6c:	1080004c 	andi	r2,r2,1
 8027e70:	10000226 	beq	r2,zero,8027e7c <adc_interrupt_asserted+0x2c>
 8027e74:	00bfffc4 	movi	r2,-1
 8027e78:	00000106 	br	8027e80 <adc_interrupt_asserted+0x30>
 8027e7c:	0005883a 	mov	r2,zero
}
 8027e80:	e037883a 	mov	sp,fp
 8027e84:	df000017 	ldw	fp,0(sp)
 8027e88:	dec00104 	addi	sp,sp,4
 8027e8c:	f800283a 	ret

08027e90 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 8027e90:	defffe04 	addi	sp,sp,-8
 8027e94:	df000115 	stw	fp,4(sp)
 8027e98:	df000104 	addi	fp,sp,4
 8027e9c:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 8027ea0:	0001883a 	nop
 8027ea4:	e0bfff17 	ldw	r2,-4(fp)
 8027ea8:	10804104 	addi	r2,r2,260
 8027eac:	10800037 	ldwio	r2,0(r2)
 8027eb0:	1080004c 	andi	r2,r2,1
 8027eb4:	103ffb26 	beq	r2,zero,8027ea4 <__alt_data_end+0xfffe8aa4>
}
 8027eb8:	0001883a 	nop
 8027ebc:	e037883a 	mov	sp,fp
 8027ec0:	df000017 	ldw	fp,0(sp)
 8027ec4:	dec00104 	addi	sp,sp,4
 8027ec8:	f800283a 	ret

08027ecc <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8027ecc:	defffc04 	addi	sp,sp,-16
 8027ed0:	dfc00315 	stw	ra,12(sp)
 8027ed4:	df000215 	stw	fp,8(sp)
 8027ed8:	df000204 	addi	fp,sp,8
 8027edc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8027ee0:	d1600604 	addi	r5,gp,-32744
 8027ee4:	e13fff17 	ldw	r4,-4(fp)
 8027ee8:	802915c0 	call	802915c <alt_find_dev>
 8027eec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8027ef0:	e0bffe17 	ldw	r2,-8(fp)
}
 8027ef4:	e037883a 	mov	sp,fp
 8027ef8:	dfc00117 	ldw	ra,4(sp)
 8027efc:	df000017 	ldw	fp,0(sp)
 8027f00:	dec00204 	addi	sp,sp,8
 8027f04:	f800283a 	ret

08027f08 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8027f08:	defff904 	addi	sp,sp,-28
 8027f0c:	dfc00615 	stw	ra,24(sp)
 8027f10:	df000515 	stw	fp,20(sp)
 8027f14:	df000504 	addi	fp,sp,20
 8027f18:	e13ffc15 	stw	r4,-16(fp)
 8027f1c:	e17ffd15 	stw	r5,-12(fp)
 8027f20:	e1bffe15 	stw	r6,-8(fp)
 8027f24:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8027f28:	e0bffc17 	ldw	r2,-16(fp)
 8027f2c:	10800f17 	ldw	r2,60(r2)
 8027f30:	e0fffe17 	ldw	r3,-8(fp)
 8027f34:	1880042e 	bgeu	r3,r2,8027f48 <alt_up_pixel_buffer_dma_draw+0x40>
 8027f38:	e0bffc17 	ldw	r2,-16(fp)
 8027f3c:	10801017 	ldw	r2,64(r2)
 8027f40:	e0ffff17 	ldw	r3,-4(fp)
 8027f44:	18800236 	bltu	r3,r2,8027f50 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 8027f48:	00bfffc4 	movi	r2,-1
 8027f4c:	00005306 	br	802809c <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 8027f50:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8027f54:	e0bffc17 	ldw	r2,-16(fp)
 8027f58:	10800d17 	ldw	r2,52(r2)
 8027f5c:	1000151e 	bne	r2,zero,8027fb4 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8027f60:	e0bffc17 	ldw	r2,-16(fp)
 8027f64:	10c01217 	ldw	r3,72(r2)
 8027f68:	e0bffe17 	ldw	r2,-8(fp)
 8027f6c:	1886703a 	and	r3,r3,r2
 8027f70:	e0bffc17 	ldw	r2,-16(fp)
 8027f74:	10801117 	ldw	r2,68(r2)
 8027f78:	1884983a 	sll	r2,r3,r2
 8027f7c:	e0fffb17 	ldw	r3,-20(fp)
 8027f80:	1885883a 	add	r2,r3,r2
 8027f84:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8027f88:	e0bffc17 	ldw	r2,-16(fp)
 8027f8c:	10c01417 	ldw	r3,80(r2)
 8027f90:	e0bfff17 	ldw	r2,-4(fp)
 8027f94:	1886703a 	and	r3,r3,r2
 8027f98:	e0bffc17 	ldw	r2,-16(fp)
 8027f9c:	10801317 	ldw	r2,76(r2)
 8027fa0:	1884983a 	sll	r2,r3,r2
 8027fa4:	e0fffb17 	ldw	r3,-20(fp)
 8027fa8:	1885883a 	add	r2,r3,r2
 8027fac:	e0bffb15 	stw	r2,-20(fp)
 8027fb0:	00001a06 	br	802801c <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8027fb4:	e0bffc17 	ldw	r2,-16(fp)
 8027fb8:	10c01217 	ldw	r3,72(r2)
 8027fbc:	e0bffe17 	ldw	r2,-8(fp)
 8027fc0:	1886703a 	and	r3,r3,r2
 8027fc4:	e0bffc17 	ldw	r2,-16(fp)
 8027fc8:	10801117 	ldw	r2,68(r2)
 8027fcc:	1884983a 	sll	r2,r3,r2
 8027fd0:	e0fffb17 	ldw	r3,-20(fp)
 8027fd4:	1885883a 	add	r2,r3,r2
 8027fd8:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8027fdc:	e0bffc17 	ldw	r2,-16(fp)
 8027fe0:	10c01417 	ldw	r3,80(r2)
 8027fe4:	e0bfff17 	ldw	r2,-4(fp)
 8027fe8:	1886703a 	and	r3,r3,r2
 8027fec:	e0bffc17 	ldw	r2,-16(fp)
 8027ff0:	10800f17 	ldw	r2,60(r2)
 8027ff4:	100b883a 	mov	r5,r2
 8027ff8:	1809883a 	mov	r4,r3
 8027ffc:	80212ac0 	call	80212ac <__mulsi3>
 8028000:	1007883a 	mov	r3,r2
 8028004:	e0bffc17 	ldw	r2,-16(fp)
 8028008:	10801117 	ldw	r2,68(r2)
 802800c:	1884983a 	sll	r2,r3,r2
 8028010:	e0fffb17 	ldw	r3,-20(fp)
 8028014:	1885883a 	add	r2,r3,r2
 8028018:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 802801c:	e0bffc17 	ldw	r2,-16(fp)
 8028020:	10800e17 	ldw	r2,56(r2)
 8028024:	10800058 	cmpnei	r2,r2,1
 8028028:	1000081e 	bne	r2,zero,802804c <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 802802c:	e0bffc17 	ldw	r2,-16(fp)
 8028030:	10c00c17 	ldw	r3,48(r2)
 8028034:	e0bffb17 	ldw	r2,-20(fp)
 8028038:	1885883a 	add	r2,r3,r2
 802803c:	1007883a 	mov	r3,r2
 8028040:	e0bffd17 	ldw	r2,-12(fp)
 8028044:	18800025 	stbio	r2,0(r3)
 8028048:	00001306 	br	8028098 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 802804c:	e0bffc17 	ldw	r2,-16(fp)
 8028050:	10800e17 	ldw	r2,56(r2)
 8028054:	10800098 	cmpnei	r2,r2,2
 8028058:	1000081e 	bne	r2,zero,802807c <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 802805c:	e0bffc17 	ldw	r2,-16(fp)
 8028060:	10c00c17 	ldw	r3,48(r2)
 8028064:	e0bffb17 	ldw	r2,-20(fp)
 8028068:	1885883a 	add	r2,r3,r2
 802806c:	1007883a 	mov	r3,r2
 8028070:	e0bffd17 	ldw	r2,-12(fp)
 8028074:	1880002d 	sthio	r2,0(r3)
 8028078:	00000706 	br	8028098 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 802807c:	e0bffc17 	ldw	r2,-16(fp)
 8028080:	10c00c17 	ldw	r3,48(r2)
 8028084:	e0bffb17 	ldw	r2,-20(fp)
 8028088:	1885883a 	add	r2,r3,r2
 802808c:	1007883a 	mov	r3,r2
 8028090:	e0bffd17 	ldw	r2,-12(fp)
 8028094:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 8028098:	0005883a 	mov	r2,zero
}
 802809c:	e037883a 	mov	sp,fp
 80280a0:	dfc00117 	ldw	ra,4(sp)
 80280a4:	df000017 	ldw	fp,0(sp)
 80280a8:	dec00204 	addi	sp,sp,8
 80280ac:	f800283a 	ret

080280b0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 80280b0:	defffd04 	addi	sp,sp,-12
 80280b4:	df000215 	stw	fp,8(sp)
 80280b8:	df000204 	addi	fp,sp,8
 80280bc:	e13ffe15 	stw	r4,-8(fp)
 80280c0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 80280c4:	e0bffe17 	ldw	r2,-8(fp)
 80280c8:	10800a17 	ldw	r2,40(r2)
 80280cc:	10800104 	addi	r2,r2,4
 80280d0:	1007883a 	mov	r3,r2
 80280d4:	e0bfff17 	ldw	r2,-4(fp)
 80280d8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 80280dc:	e0bffe17 	ldw	r2,-8(fp)
 80280e0:	10800a17 	ldw	r2,40(r2)
 80280e4:	10800104 	addi	r2,r2,4
 80280e8:	10800037 	ldwio	r2,0(r2)
 80280ec:	1007883a 	mov	r3,r2
 80280f0:	e0bffe17 	ldw	r2,-8(fp)
 80280f4:	10c00c15 	stw	r3,48(r2)
	return 0;
 80280f8:	0005883a 	mov	r2,zero
}
 80280fc:	e037883a 	mov	sp,fp
 8028100:	df000017 	ldw	fp,0(sp)
 8028104:	dec00104 	addi	sp,sp,4
 8028108:	f800283a 	ret

0802810c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 802810c:	defffd04 	addi	sp,sp,-12
 8028110:	df000215 	stw	fp,8(sp)
 8028114:	dc000115 	stw	r16,4(sp)
 8028118:	df000204 	addi	fp,sp,8
 802811c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8028120:	e0bffe17 	ldw	r2,-8(fp)
 8028124:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8028128:	e0bffe17 	ldw	r2,-8(fp)
 802812c:	10800a17 	ldw	r2,40(r2)
 8028130:	1007883a 	mov	r3,r2
 8028134:	00800044 	movi	r2,1
 8028138:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 802813c:	e0bffe17 	ldw	r2,-8(fp)
 8028140:	10c00b17 	ldw	r3,44(r2)
 8028144:	e0bffe17 	ldw	r2,-8(fp)
 8028148:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 802814c:	e0bffe17 	ldw	r2,-8(fp)
 8028150:	14000b15 	stw	r16,44(r2)
	return 0;
 8028154:	0005883a 	mov	r2,zero
}
 8028158:	e6ffff04 	addi	sp,fp,-4
 802815c:	df000117 	ldw	fp,4(sp)
 8028160:	dc000017 	ldw	r16,0(sp)
 8028164:	dec00204 	addi	sp,sp,8
 8028168:	f800283a 	ret

0802816c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 802816c:	defffe04 	addi	sp,sp,-8
 8028170:	df000115 	stw	fp,4(sp)
 8028174:	df000104 	addi	fp,sp,4
 8028178:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 802817c:	e0bfff17 	ldw	r2,-4(fp)
 8028180:	10800a17 	ldw	r2,40(r2)
 8028184:	10800304 	addi	r2,r2,12
 8028188:	10800037 	ldwio	r2,0(r2)
 802818c:	1080004c 	andi	r2,r2,1
}
 8028190:	e037883a 	mov	sp,fp
 8028194:	df000017 	ldw	fp,0(sp)
 8028198:	dec00104 	addi	sp,sp,4
 802819c:	f800283a 	ret

080281a0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 80281a0:	defff604 	addi	sp,sp,-40
 80281a4:	dfc00915 	stw	ra,36(sp)
 80281a8:	df000815 	stw	fp,32(sp)
 80281ac:	dd400715 	stw	r21,28(sp)
 80281b0:	dd000615 	stw	r20,24(sp)
 80281b4:	dcc00515 	stw	r19,20(sp)
 80281b8:	dc800415 	stw	r18,16(sp)
 80281bc:	dc400315 	stw	r17,12(sp)
 80281c0:	dc000215 	stw	r16,8(sp)
 80281c4:	df000804 	addi	fp,sp,32
 80281c8:	e13ff815 	stw	r4,-32(fp)
 80281cc:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 80281d0:	e0bff917 	ldw	r2,-28(fp)
 80281d4:	10800058 	cmpnei	r2,r2,1
 80281d8:	1000031e 	bne	r2,zero,80281e8 <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 80281dc:	e0bff817 	ldw	r2,-32(fp)
 80281e0:	14400c17 	ldw	r17,48(r2)
 80281e4:	00000206 	br	80281f0 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 80281e8:	e0bff817 	ldw	r2,-32(fp)
 80281ec:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 80281f0:	e0bff817 	ldw	r2,-32(fp)
 80281f4:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80281f8:	e0bff817 	ldw	r2,-32(fp)
 80281fc:	10800e17 	ldw	r2,56(r2)
 8028200:	10800098 	cmpnei	r2,r2,2
 8028204:	1000031e 	bne	r2,zero,8028214 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 8028208:	8405883a 	add	r2,r16,r16
 802820c:	1021883a 	mov	r16,r2
 8028210:	00000306 	br	8028220 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8028214:	8405883a 	add	r2,r16,r16
 8028218:	1085883a 	add	r2,r2,r2
 802821c:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 8028220:	e0bff817 	ldw	r2,-32(fp)
 8028224:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8028228:	e0bff817 	ldw	r2,-32(fp)
 802822c:	10800d17 	ldw	r2,52(r2)
 8028230:	1000111e 	bne	r2,zero,8028278 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8028234:	e0bff817 	ldw	r2,-32(fp)
 8028238:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 802823c:	0029883a 	mov	r20,zero
 8028240:	00000b06 	br	8028270 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8028244:	0025883a 	mov	r18,zero
 8028248:	00000406 	br	802825c <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 802824c:	9445883a 	add	r2,r18,r17
 8028250:	0007883a 	mov	r3,zero
 8028254:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8028258:	94800104 	addi	r18,r18,4
 802825c:	943ffb36 	bltu	r18,r16,802824c <__alt_data_end+0xfffe8e4c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8028260:	00800044 	movi	r2,1
 8028264:	1544983a 	sll	r2,r2,r21
 8028268:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 802826c:	a5000044 	addi	r20,r20,1
 8028270:	a4fff436 	bltu	r20,r19,8028244 <__alt_data_end+0xfffe8e44>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8028274:	00000d06 	br	80282ac <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8028278:	800b883a 	mov	r5,r16
 802827c:	9809883a 	mov	r4,r19
 8028280:	80212ac0 	call	80212ac <__mulsi3>
 8028284:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 8028288:	0021883a 	mov	r16,zero
 802828c:	00000506 	br	80282a4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 8028290:	8005883a 	mov	r2,r16
 8028294:	1445883a 	add	r2,r2,r17
 8028298:	0007883a 	mov	r3,zero
 802829c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 80282a0:	84000104 	addi	r16,r16,4
 80282a4:	8005883a 	mov	r2,r16
 80282a8:	14fff936 	bltu	r2,r19,8028290 <__alt_data_end+0xfffe8e90>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 80282ac:	0001883a 	nop
 80282b0:	e6fffa04 	addi	sp,fp,-24
 80282b4:	dfc00717 	ldw	ra,28(sp)
 80282b8:	df000617 	ldw	fp,24(sp)
 80282bc:	dd400517 	ldw	r21,20(sp)
 80282c0:	dd000417 	ldw	r20,16(sp)
 80282c4:	dcc00317 	ldw	r19,12(sp)
 80282c8:	dc800217 	ldw	r18,8(sp)
 80282cc:	dc400117 	ldw	r17,4(sp)
 80282d0:	dc000017 	ldw	r16,0(sp)
 80282d4:	dec00804 	addi	sp,sp,32
 80282d8:	f800283a 	ret

080282dc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 80282dc:	defff204 	addi	sp,sp,-56
 80282e0:	dfc00d15 	stw	ra,52(sp)
 80282e4:	df000c15 	stw	fp,48(sp)
 80282e8:	ddc00b15 	stw	r23,44(sp)
 80282ec:	dd800a15 	stw	r22,40(sp)
 80282f0:	dd400915 	stw	r21,36(sp)
 80282f4:	dd000815 	stw	r20,32(sp)
 80282f8:	dcc00715 	stw	r19,28(sp)
 80282fc:	dc800615 	stw	r18,24(sp)
 8028300:	dc400515 	stw	r17,20(sp)
 8028304:	dc000415 	stw	r16,16(sp)
 8028308:	df000c04 	addi	fp,sp,48
 802830c:	e13ff415 	stw	r4,-48(fp)
 8028310:	e17ff515 	stw	r5,-44(fp)
 8028314:	e1bff615 	stw	r6,-40(fp)
 8028318:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 802831c:	e0bff417 	ldw	r2,-48(fp)
 8028320:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8028324:	e0bff417 	ldw	r2,-48(fp)
 8028328:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 802832c:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 8028330:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 8028334:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 8028338:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 802833c:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8028340:	a580032e 	bgeu	r20,r22,8028350 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 8028344:	b02b883a 	mov	r21,r22
		l_x = r_x;
 8028348:	a02d883a 	mov	r22,r20
		r_x = temp;
 802834c:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 8028350:	9c40032e 	bgeu	r19,r17,8028360 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 8028354:	882b883a 	mov	r21,r17
		t_y = b_y;
 8028358:	9823883a 	mov	r17,r19
		b_y = temp;
 802835c:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8028360:	b4808f2e 	bgeu	r22,r18,80285a0 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 8028364:	8c008e2e 	bgeu	r17,r16,80285a0 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8028368:	a4800136 	bltu	r20,r18,8028370 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 802836c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8028370:	9c000136 	bltu	r19,r16,8028378 <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8028374:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8028378:	e0800417 	ldw	r2,16(fp)
 802837c:	10800058 	cmpnei	r2,r2,1
 8028380:	1000031e 	bne	r2,zero,8028390 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 8028384:	e0bff417 	ldw	r2,-48(fp)
 8028388:	14000c17 	ldw	r16,48(r2)
 802838c:	00000206 	br	8028398 <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 8028390:	e0bff417 	ldw	r2,-48(fp)
 8028394:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8028398:	e0bff417 	ldw	r2,-48(fp)
 802839c:	10800d17 	ldw	r2,52(r2)
 80283a0:	10003c1e 	bne	r2,zero,8028494 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80283a4:	e0bff417 	ldw	r2,-48(fp)
 80283a8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 80283ac:	8d44983a 	sll	r2,r17,r21
 80283b0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80283b4:	e0bff417 	ldw	r2,-48(fp)
 80283b8:	10800e17 	ldw	r2,56(r2)
 80283bc:	10800058 	cmpnei	r2,r2,1
 80283c0:	10000f1e 	bne	r2,zero,8028400 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 80283c4:	8825883a 	mov	r18,r17
 80283c8:	00000b06 	br	80283f8 <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 80283cc:	b023883a 	mov	r17,r22
 80283d0:	00000406 	br	80283e4 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80283d4:	8c05883a 	add	r2,r17,r16
 80283d8:	b807883a 	mov	r3,r23
 80283dc:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80283e0:	8c400044 	addi	r17,r17,1
 80283e4:	a47ffb2e 	bgeu	r20,r17,80283d4 <__alt_data_end+0xfffe8fd4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 80283e8:	00800044 	movi	r2,1
 80283ec:	1544983a 	sll	r2,r2,r21
 80283f0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80283f4:	94800044 	addi	r18,r18,1
 80283f8:	9cbff42e 	bgeu	r19,r18,80283cc <__alt_data_end+0xfffe8fcc>
 80283fc:	00006906 	br	80285a4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8028400:	e0bff417 	ldw	r2,-48(fp)
 8028404:	10800e17 	ldw	r2,56(r2)
 8028408:	10800098 	cmpnei	r2,r2,2
 802840c:	1000101e 	bne	r2,zero,8028450 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 8028410:	8825883a 	mov	r18,r17
 8028414:	00000c06 	br	8028448 <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 8028418:	b023883a 	mov	r17,r22
 802841c:	00000506 	br	8028434 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8028420:	8c45883a 	add	r2,r17,r17
 8028424:	1405883a 	add	r2,r2,r16
 8028428:	b807883a 	mov	r3,r23
 802842c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8028430:	8c400044 	addi	r17,r17,1
 8028434:	a47ffa2e 	bgeu	r20,r17,8028420 <__alt_data_end+0xfffe9020>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 8028438:	00800044 	movi	r2,1
 802843c:	1544983a 	sll	r2,r2,r21
 8028440:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8028444:	94800044 	addi	r18,r18,1
 8028448:	9cbff32e 	bgeu	r19,r18,8028418 <__alt_data_end+0xfffe9018>
 802844c:	00005506 	br	80285a4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8028450:	8825883a 	mov	r18,r17
 8028454:	00000d06 	br	802848c <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 8028458:	b023883a 	mov	r17,r22
 802845c:	00000606 	br	8028478 <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8028460:	8c45883a 	add	r2,r17,r17
 8028464:	1085883a 	add	r2,r2,r2
 8028468:	1405883a 	add	r2,r2,r16
 802846c:	b807883a 	mov	r3,r23
 8028470:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8028474:	8c400044 	addi	r17,r17,1
 8028478:	a47ff92e 	bgeu	r20,r17,8028460 <__alt_data_end+0xfffe9060>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 802847c:	00800044 	movi	r2,1
 8028480:	1544983a 	sll	r2,r2,r21
 8028484:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8028488:	94800044 	addi	r18,r18,1
 802848c:	9cbff22e 	bgeu	r19,r18,8028458 <__alt_data_end+0xfffe9058>
 8028490:	00004406 	br	80285a4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8028494:	e0bff417 	ldw	r2,-48(fp)
 8028498:	10800e17 	ldw	r2,56(r2)
 802849c:	10800058 	cmpnei	r2,r2,1
 80284a0:	1000111e 	bne	r2,zero,80284e8 <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 80284a4:	900b883a 	mov	r5,r18
 80284a8:	8809883a 	mov	r4,r17
 80284ac:	80212ac0 	call	80212ac <__mulsi3>
 80284b0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80284b4:	882b883a 	mov	r21,r17
 80284b8:	00000906 	br	80284e0 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 80284bc:	b023883a 	mov	r17,r22
 80284c0:	00000406 	br	80284d4 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80284c4:	8c05883a 	add	r2,r17,r16
 80284c8:	b807883a 	mov	r3,r23
 80284cc:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80284d0:	8c400044 	addi	r17,r17,1
 80284d4:	a47ffb2e 	bgeu	r20,r17,80284c4 <__alt_data_end+0xfffe90c4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 80284d8:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80284dc:	ad400044 	addi	r21,r21,1
 80284e0:	9d7ff62e 	bgeu	r19,r21,80284bc <__alt_data_end+0xfffe90bc>
 80284e4:	00002f06 	br	80285a4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80284e8:	e0bff417 	ldw	r2,-48(fp)
 80284ec:	10800e17 	ldw	r2,56(r2)
 80284f0:	10800098 	cmpnei	r2,r2,2
 80284f4:	1000141e 	bne	r2,zero,8028548 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 80284f8:	9485883a 	add	r2,r18,r18
 80284fc:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8028500:	900b883a 	mov	r5,r18
 8028504:	8809883a 	mov	r4,r17
 8028508:	80212ac0 	call	80212ac <__mulsi3>
 802850c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8028510:	882b883a 	mov	r21,r17
 8028514:	00000a06 	br	8028540 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 8028518:	b023883a 	mov	r17,r22
 802851c:	00000506 	br	8028534 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8028520:	8c45883a 	add	r2,r17,r17
 8028524:	1405883a 	add	r2,r2,r16
 8028528:	b807883a 	mov	r3,r23
 802852c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8028530:	8c400044 	addi	r17,r17,1
 8028534:	a47ffa2e 	bgeu	r20,r17,8028520 <__alt_data_end+0xfffe9120>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 8028538:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 802853c:	ad400044 	addi	r21,r21,1
 8028540:	9d7ff52e 	bgeu	r19,r21,8028518 <__alt_data_end+0xfffe9118>
 8028544:	00001706 	br	80285a4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8028548:	9485883a 	add	r2,r18,r18
 802854c:	1085883a 	add	r2,r2,r2
 8028550:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8028554:	900b883a 	mov	r5,r18
 8028558:	8809883a 	mov	r4,r17
 802855c:	80212ac0 	call	80212ac <__mulsi3>
 8028560:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8028564:	882b883a 	mov	r21,r17
 8028568:	00000b06 	br	8028598 <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 802856c:	b023883a 	mov	r17,r22
 8028570:	00000606 	br	802858c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8028574:	8c45883a 	add	r2,r17,r17
 8028578:	1085883a 	add	r2,r2,r2
 802857c:	1405883a 	add	r2,r2,r16
 8028580:	b807883a 	mov	r3,r23
 8028584:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8028588:	8c400044 	addi	r17,r17,1
 802858c:	a47ff92e 	bgeu	r20,r17,8028574 <__alt_data_end+0xfffe9174>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8028590:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8028594:	ad400044 	addi	r21,r21,1
 8028598:	9d7ff42e 	bgeu	r19,r21,802856c <__alt_data_end+0xfffe916c>
 802859c:	00000106 	br	80285a4 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 80285a0:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 80285a4:	e6fff804 	addi	sp,fp,-32
 80285a8:	dfc00917 	ldw	ra,36(sp)
 80285ac:	df000817 	ldw	fp,32(sp)
 80285b0:	ddc00717 	ldw	r23,28(sp)
 80285b4:	dd800617 	ldw	r22,24(sp)
 80285b8:	dd400517 	ldw	r21,20(sp)
 80285bc:	dd000417 	ldw	r20,16(sp)
 80285c0:	dcc00317 	ldw	r19,12(sp)
 80285c4:	dc800217 	ldw	r18,8(sp)
 80285c8:	dc400117 	ldw	r17,4(sp)
 80285cc:	dc000017 	ldw	r16,0(sp)
 80285d0:	dec00a04 	addi	sp,sp,40
 80285d4:	f800283a 	ret

080285d8 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 80285d8:	defff304 	addi	sp,sp,-52
 80285dc:	dfc00c15 	stw	ra,48(sp)
 80285e0:	df000b15 	stw	fp,44(sp)
 80285e4:	dd800a15 	stw	r22,40(sp)
 80285e8:	dd400915 	stw	r21,36(sp)
 80285ec:	dd000815 	stw	r20,32(sp)
 80285f0:	dcc00715 	stw	r19,28(sp)
 80285f4:	dc800615 	stw	r18,24(sp)
 80285f8:	dc400515 	stw	r17,20(sp)
 80285fc:	dc000415 	stw	r16,16(sp)
 8028600:	df000b04 	addi	fp,sp,44
 8028604:	e13ff515 	stw	r4,-44(fp)
 8028608:	e17ff615 	stw	r5,-40(fp)
 802860c:	e1bff715 	stw	r6,-36(fp)
 8028610:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8028614:	e0bff517 	ldw	r2,-44(fp)
 8028618:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 802861c:	e0bff517 	ldw	r2,-44(fp)
 8028620:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8028624:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 8028628:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 802862c:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 8028630:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8028634:	9440032e 	bgeu	r18,r17,8028644 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 8028638:	882d883a 	mov	r22,r17
		l_x = r_x;
 802863c:	9023883a 	mov	r17,r18
		r_x = temp;
 8028640:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8028644:	8cc0632e 	bgeu	r17,r19,80287d4 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 8028648:	a400622e 	bgeu	r20,r16,80287d4 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 802864c:	94c00136 	bltu	r18,r19,8028654 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 8028650:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8028654:	e0800317 	ldw	r2,12(fp)
 8028658:	10800058 	cmpnei	r2,r2,1
 802865c:	1000031e 	bne	r2,zero,802866c <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8028660:	e0bff517 	ldw	r2,-44(fp)
 8028664:	14000c17 	ldw	r16,48(r2)
 8028668:	00000206 	br	8028674 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 802866c:	e0bff517 	ldw	r2,-44(fp)
 8028670:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8028674:	e0bff517 	ldw	r2,-44(fp)
 8028678:	10800d17 	ldw	r2,52(r2)
 802867c:	1000231e 	bne	r2,zero,802870c <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8028680:	e0bff517 	ldw	r2,-44(fp)
 8028684:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 8028688:	a4c4983a 	sll	r2,r20,r19
 802868c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8028690:	e0bff517 	ldw	r2,-44(fp)
 8028694:	10800e17 	ldw	r2,56(r2)
 8028698:	10800058 	cmpnei	r2,r2,1
 802869c:	1000071e 	bne	r2,zero,80286bc <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 80286a0:	00000406 	br	80286b4 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 80286a4:	8c05883a 	add	r2,r17,r16
 80286a8:	a807883a 	mov	r3,r21
 80286ac:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80286b0:	8c400044 	addi	r17,r17,1
 80286b4:	947ffb2e 	bgeu	r18,r17,80286a4 <__alt_data_end+0xfffe92a4>
 80286b8:	00004706 	br	80287d8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80286bc:	e0bff517 	ldw	r2,-44(fp)
 80286c0:	10800e17 	ldw	r2,56(r2)
 80286c4:	10800098 	cmpnei	r2,r2,2
 80286c8:	10000e1e 	bne	r2,zero,8028704 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 80286cc:	00000506 	br	80286e4 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 80286d0:	8c45883a 	add	r2,r17,r17
 80286d4:	1405883a 	add	r2,r2,r16
 80286d8:	a807883a 	mov	r3,r21
 80286dc:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80286e0:	8c400044 	addi	r17,r17,1
 80286e4:	947ffa2e 	bgeu	r18,r17,80286d0 <__alt_data_end+0xfffe92d0>
 80286e8:	00003b06 	br	80287d8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 80286ec:	8c45883a 	add	r2,r17,r17
 80286f0:	1085883a 	add	r2,r2,r2
 80286f4:	1405883a 	add	r2,r2,r16
 80286f8:	a807883a 	mov	r3,r21
 80286fc:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8028700:	8c400044 	addi	r17,r17,1
 8028704:	947ff92e 	bgeu	r18,r17,80286ec <__alt_data_end+0xfffe92ec>
 8028708:	00003306 	br	80287d8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 802870c:	e0bff517 	ldw	r2,-44(fp)
 8028710:	10800e17 	ldw	r2,56(r2)
 8028714:	10800058 	cmpnei	r2,r2,1
 8028718:	10000b1e 	bne	r2,zero,8028748 <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 802871c:	980b883a 	mov	r5,r19
 8028720:	a009883a 	mov	r4,r20
 8028724:	80212ac0 	call	80212ac <__mulsi3>
 8028728:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 802872c:	00000406 	br	8028740 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8028730:	8c05883a 	add	r2,r17,r16
 8028734:	a807883a 	mov	r3,r21
 8028738:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 802873c:	8c400044 	addi	r17,r17,1
 8028740:	947ffb2e 	bgeu	r18,r17,8028730 <__alt_data_end+0xfffe9330>
 8028744:	00002406 	br	80287d8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8028748:	e0bff517 	ldw	r2,-44(fp)
 802874c:	10800e17 	ldw	r2,56(r2)
 8028750:	10800098 	cmpnei	r2,r2,2
 8028754:	10000e1e 	bne	r2,zero,8028790 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 8028758:	9cc5883a 	add	r2,r19,r19
 802875c:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8028760:	980b883a 	mov	r5,r19
 8028764:	a009883a 	mov	r4,r20
 8028768:	80212ac0 	call	80212ac <__mulsi3>
 802876c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8028770:	00000506 	br	8028788 <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8028774:	8c45883a 	add	r2,r17,r17
 8028778:	1405883a 	add	r2,r2,r16
 802877c:	a807883a 	mov	r3,r21
 8028780:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8028784:	8c400044 	addi	r17,r17,1
 8028788:	947ffa2e 	bgeu	r18,r17,8028774 <__alt_data_end+0xfffe9374>
 802878c:	00001206 	br	80287d8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8028790:	9cc5883a 	add	r2,r19,r19
 8028794:	1085883a 	add	r2,r2,r2
 8028798:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 802879c:	980b883a 	mov	r5,r19
 80287a0:	a009883a 	mov	r4,r20
 80287a4:	80212ac0 	call	80212ac <__mulsi3>
 80287a8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 80287ac:	00000606 	br	80287c8 <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 80287b0:	8c45883a 	add	r2,r17,r17
 80287b4:	1085883a 	add	r2,r2,r2
 80287b8:	1405883a 	add	r2,r2,r16
 80287bc:	a807883a 	mov	r3,r21
 80287c0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 80287c4:	8c400044 	addi	r17,r17,1
 80287c8:	947ff92e 	bgeu	r18,r17,80287b0 <__alt_data_end+0xfffe93b0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 80287cc:	84e1883a 	add	r16,r16,r19
 80287d0:	00000106 	br	80287d8 <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 80287d4:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 80287d8:	e6fff904 	addi	sp,fp,-28
 80287dc:	dfc00817 	ldw	ra,32(sp)
 80287e0:	df000717 	ldw	fp,28(sp)
 80287e4:	dd800617 	ldw	r22,24(sp)
 80287e8:	dd400517 	ldw	r21,20(sp)
 80287ec:	dd000417 	ldw	r20,16(sp)
 80287f0:	dcc00317 	ldw	r19,12(sp)
 80287f4:	dc800217 	ldw	r18,8(sp)
 80287f8:	dc400117 	ldw	r17,4(sp)
 80287fc:	dc000017 	ldw	r16,0(sp)
 8028800:	dec00904 	addi	sp,sp,36
 8028804:	f800283a 	ret

08028808 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8028808:	defff304 	addi	sp,sp,-52
 802880c:	dfc00c15 	stw	ra,48(sp)
 8028810:	df000b15 	stw	fp,44(sp)
 8028814:	dd800a15 	stw	r22,40(sp)
 8028818:	dd400915 	stw	r21,36(sp)
 802881c:	dd000815 	stw	r20,32(sp)
 8028820:	dcc00715 	stw	r19,28(sp)
 8028824:	dc800615 	stw	r18,24(sp)
 8028828:	dc400515 	stw	r17,20(sp)
 802882c:	dc000415 	stw	r16,16(sp)
 8028830:	df000b04 	addi	fp,sp,44
 8028834:	e13ff515 	stw	r4,-44(fp)
 8028838:	e17ff615 	stw	r5,-40(fp)
 802883c:	e1bff715 	stw	r6,-36(fp)
 8028840:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8028844:	e0bff517 	ldw	r2,-44(fp)
 8028848:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 802884c:	e0bff517 	ldw	r2,-44(fp)
 8028850:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8028854:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 8028858:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 802885c:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 8028860:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8028864:	9500032e 	bgeu	r18,r20,8028874 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 8028868:	a02b883a 	mov	r21,r20
		t_y = b_y;
 802886c:	9029883a 	mov	r20,r18
		b_y = temp;
 8028870:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8028874:	8cc0722e 	bgeu	r17,r19,8028a40 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 8028878:	a400712e 	bgeu	r20,r16,8028a40 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 802887c:	94000136 	bltu	r18,r16,8028884 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 8028880:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8028884:	e0800317 	ldw	r2,12(fp)
 8028888:	10800058 	cmpnei	r2,r2,1
 802888c:	1000031e 	bne	r2,zero,802889c <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8028890:	e0bff517 	ldw	r2,-44(fp)
 8028894:	14000c17 	ldw	r16,48(r2)
 8028898:	00000206 	br	80288a4 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 802889c:	e0bff517 	ldw	r2,-44(fp)
 80288a0:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80288a4:	e0bff517 	ldw	r2,-44(fp)
 80288a8:	10800d17 	ldw	r2,52(r2)
 80288ac:	1000301e 	bne	r2,zero,8028970 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80288b0:	e0bff517 	ldw	r2,-44(fp)
 80288b4:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 80288b8:	a544983a 	sll	r2,r20,r21
 80288bc:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80288c0:	e0bff517 	ldw	r2,-44(fp)
 80288c4:	10800e17 	ldw	r2,56(r2)
 80288c8:	10800058 	cmpnei	r2,r2,1
 80288cc:	10000b1e 	bne	r2,zero,80288fc <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 80288d0:	a027883a 	mov	r19,r20
 80288d4:	00000706 	br	80288f4 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80288d8:	8c05883a 	add	r2,r17,r16
 80288dc:	b007883a 	mov	r3,r22
 80288e0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80288e4:	00800044 	movi	r2,1
 80288e8:	1544983a 	sll	r2,r2,r21
 80288ec:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80288f0:	9cc00044 	addi	r19,r19,1
 80288f4:	94fff82e 	bgeu	r18,r19,80288d8 <__alt_data_end+0xfffe94d8>
 80288f8:	00005206 	br	8028a44 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80288fc:	e0bff517 	ldw	r2,-44(fp)
 8028900:	10800e17 	ldw	r2,56(r2)
 8028904:	10800098 	cmpnei	r2,r2,2
 8028908:	10000c1e 	bne	r2,zero,802893c <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 802890c:	a027883a 	mov	r19,r20
 8028910:	00000806 	br	8028934 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8028914:	8c45883a 	add	r2,r17,r17
 8028918:	1405883a 	add	r2,r2,r16
 802891c:	b007883a 	mov	r3,r22
 8028920:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8028924:	00800044 	movi	r2,1
 8028928:	1544983a 	sll	r2,r2,r21
 802892c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8028930:	9cc00044 	addi	r19,r19,1
 8028934:	94fff72e 	bgeu	r18,r19,8028914 <__alt_data_end+0xfffe9514>
 8028938:	00004206 	br	8028a44 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 802893c:	a027883a 	mov	r19,r20
 8028940:	00000906 	br	8028968 <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8028944:	8c45883a 	add	r2,r17,r17
 8028948:	1085883a 	add	r2,r2,r2
 802894c:	1405883a 	add	r2,r2,r16
 8028950:	b007883a 	mov	r3,r22
 8028954:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8028958:	00800044 	movi	r2,1
 802895c:	1544983a 	sll	r2,r2,r21
 8028960:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8028964:	9cc00044 	addi	r19,r19,1
 8028968:	94fff62e 	bgeu	r18,r19,8028944 <__alt_data_end+0xfffe9544>
 802896c:	00003506 	br	8028a44 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8028970:	e0bff517 	ldw	r2,-44(fp)
 8028974:	10800e17 	ldw	r2,56(r2)
 8028978:	10800058 	cmpnei	r2,r2,1
 802897c:	10000c1e 	bne	r2,zero,80289b0 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 8028980:	980b883a 	mov	r5,r19
 8028984:	a009883a 	mov	r4,r20
 8028988:	80212ac0 	call	80212ac <__mulsi3>
 802898c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8028990:	00000506 	br	80289a8 <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8028994:	8c05883a 	add	r2,r17,r16
 8028998:	b007883a 	mov	r3,r22
 802899c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 80289a0:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80289a4:	a5000044 	addi	r20,r20,1
 80289a8:	953ffa2e 	bgeu	r18,r20,8028994 <__alt_data_end+0xfffe9594>
 80289ac:	00002506 	br	8028a44 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80289b0:	e0bff517 	ldw	r2,-44(fp)
 80289b4:	10800e17 	ldw	r2,56(r2)
 80289b8:	10800098 	cmpnei	r2,r2,2
 80289bc:	10000f1e 	bne	r2,zero,80289fc <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 80289c0:	9cc5883a 	add	r2,r19,r19
 80289c4:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 80289c8:	980b883a 	mov	r5,r19
 80289cc:	a009883a 	mov	r4,r20
 80289d0:	80212ac0 	call	80212ac <__mulsi3>
 80289d4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80289d8:	00000606 	br	80289f4 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 80289dc:	8c45883a 	add	r2,r17,r17
 80289e0:	1405883a 	add	r2,r2,r16
 80289e4:	b007883a 	mov	r3,r22
 80289e8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 80289ec:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80289f0:	a5000044 	addi	r20,r20,1
 80289f4:	953ff92e 	bgeu	r18,r20,80289dc <__alt_data_end+0xfffe95dc>
 80289f8:	00001206 	br	8028a44 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80289fc:	9cc5883a 	add	r2,r19,r19
 8028a00:	1085883a 	add	r2,r2,r2
 8028a04:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 8028a08:	980b883a 	mov	r5,r19
 8028a0c:	a009883a 	mov	r4,r20
 8028a10:	80212ac0 	call	80212ac <__mulsi3>
 8028a14:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8028a18:	00000706 	br	8028a38 <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8028a1c:	8c45883a 	add	r2,r17,r17
 8028a20:	1085883a 	add	r2,r2,r2
 8028a24:	1405883a 	add	r2,r2,r16
 8028a28:	b007883a 	mov	r3,r22
 8028a2c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8028a30:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8028a34:	a5000044 	addi	r20,r20,1
 8028a38:	953ff82e 	bgeu	r18,r20,8028a1c <__alt_data_end+0xfffe961c>
 8028a3c:	00000106 	br	8028a44 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8028a40:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8028a44:	e6fff904 	addi	sp,fp,-28
 8028a48:	dfc00817 	ldw	ra,32(sp)
 8028a4c:	df000717 	ldw	fp,28(sp)
 8028a50:	dd800617 	ldw	r22,24(sp)
 8028a54:	dd400517 	ldw	r21,20(sp)
 8028a58:	dd000417 	ldw	r20,16(sp)
 8028a5c:	dcc00317 	ldw	r19,12(sp)
 8028a60:	dc800217 	ldw	r18,8(sp)
 8028a64:	dc400117 	ldw	r17,4(sp)
 8028a68:	dc000017 	ldw	r16,0(sp)
 8028a6c:	dec00904 	addi	sp,sp,36
 8028a70:	f800283a 	ret

08028a74 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8028a74:	defff804 	addi	sp,sp,-32
 8028a78:	dfc00715 	stw	ra,28(sp)
 8028a7c:	df000615 	stw	fp,24(sp)
 8028a80:	df000604 	addi	fp,sp,24
 8028a84:	e13ffc15 	stw	r4,-16(fp)
 8028a88:	e17ffd15 	stw	r5,-12(fp)
 8028a8c:	e1bffe15 	stw	r6,-8(fp)
 8028a90:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8028a94:	e0800417 	ldw	r2,16(fp)
 8028a98:	d8800115 	stw	r2,4(sp)
 8028a9c:	e0800317 	ldw	r2,12(fp)
 8028aa0:	d8800015 	stw	r2,0(sp)
 8028aa4:	e1fffe17 	ldw	r7,-8(fp)
 8028aa8:	e1bfff17 	ldw	r6,-4(fp)
 8028aac:	e17ffd17 	ldw	r5,-12(fp)
 8028ab0:	e13ffc17 	ldw	r4,-16(fp)
 8028ab4:	80285d80 	call	80285d8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8028ab8:	e0800417 	ldw	r2,16(fp)
 8028abc:	d8800115 	stw	r2,4(sp)
 8028ac0:	e0800317 	ldw	r2,12(fp)
 8028ac4:	d8800015 	stw	r2,0(sp)
 8028ac8:	e1c00217 	ldw	r7,8(fp)
 8028acc:	e1bfff17 	ldw	r6,-4(fp)
 8028ad0:	e17ffd17 	ldw	r5,-12(fp)
 8028ad4:	e13ffc17 	ldw	r4,-16(fp)
 8028ad8:	80285d80 	call	80285d8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8028adc:	e0800417 	ldw	r2,16(fp)
 8028ae0:	d8800115 	stw	r2,4(sp)
 8028ae4:	e0800317 	ldw	r2,12(fp)
 8028ae8:	d8800015 	stw	r2,0(sp)
 8028aec:	e1c00217 	ldw	r7,8(fp)
 8028af0:	e1bffe17 	ldw	r6,-8(fp)
 8028af4:	e17ffd17 	ldw	r5,-12(fp)
 8028af8:	e13ffc17 	ldw	r4,-16(fp)
 8028afc:	80288080 	call	8028808 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8028b00:	e0800417 	ldw	r2,16(fp)
 8028b04:	d8800115 	stw	r2,4(sp)
 8028b08:	e0800317 	ldw	r2,12(fp)
 8028b0c:	d8800015 	stw	r2,0(sp)
 8028b10:	e1c00217 	ldw	r7,8(fp)
 8028b14:	e1bffe17 	ldw	r6,-8(fp)
 8028b18:	e17fff17 	ldw	r5,-4(fp)
 8028b1c:	e13ffc17 	ldw	r4,-16(fp)
 8028b20:	80288080 	call	8028808 <alt_up_pixel_buffer_dma_draw_vline>
}
 8028b24:	0001883a 	nop
 8028b28:	e037883a 	mov	sp,fp
 8028b2c:	dfc00117 	ldw	ra,4(sp)
 8028b30:	df000017 	ldw	fp,0(sp)
 8028b34:	dec00204 	addi	sp,sp,8
 8028b38:	f800283a 	ret

08028b3c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8028b3c:	defffb04 	addi	sp,sp,-20
 8028b40:	dfc00415 	stw	ra,16(sp)
 8028b44:	df000315 	stw	fp,12(sp)
 8028b48:	dc800215 	stw	r18,8(sp)
 8028b4c:	dc400115 	stw	r17,4(sp)
 8028b50:	dc000015 	stw	r16,0(sp)
 8028b54:	df000304 	addi	fp,sp,12
 8028b58:	2021883a 	mov	r16,r4
 8028b5c:	2807883a 	mov	r3,r5
 8028b60:	3023883a 	mov	r17,r6
 8028b64:	3809883a 	mov	r4,r7
 8028b68:	e4800217 	ldw	r18,8(fp)
 8028b6c:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 8028b70:	1000071e 	bne	r2,zero,8028b90 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8028b74:	200b883a 	mov	r5,r4
 8028b78:	1809883a 	mov	r4,r3
 8028b7c:	80212ac0 	call	80212ac <__mulsi3>
 8028b80:	1445883a 	add	r2,r2,r17
 8028b84:	1405883a 	add	r2,r2,r16
 8028b88:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8028b8c:	00001206 	br	8028bd8 <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 8028b90:	10800058 	cmpnei	r2,r2,1
 8028b94:	1000081e 	bne	r2,zero,8028bb8 <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8028b98:	200b883a 	mov	r5,r4
 8028b9c:	1809883a 	mov	r4,r3
 8028ba0:	80212ac0 	call	80212ac <__mulsi3>
 8028ba4:	1445883a 	add	r2,r2,r17
 8028ba8:	1085883a 	add	r2,r2,r2
 8028bac:	1405883a 	add	r2,r2,r16
 8028bb0:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8028bb4:	00000806 	br	8028bd8 <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8028bb8:	200b883a 	mov	r5,r4
 8028bbc:	1809883a 	mov	r4,r3
 8028bc0:	80212ac0 	call	80212ac <__mulsi3>
 8028bc4:	1445883a 	add	r2,r2,r17
 8028bc8:	1085883a 	add	r2,r2,r2
 8028bcc:	1085883a 	add	r2,r2,r2
 8028bd0:	1405883a 	add	r2,r2,r16
 8028bd4:	14800035 	stwio	r18,0(r2)
}
 8028bd8:	0001883a 	nop
 8028bdc:	e6fffd04 	addi	sp,fp,-12
 8028be0:	dfc00417 	ldw	ra,16(sp)
 8028be4:	df000317 	ldw	fp,12(sp)
 8028be8:	dc800217 	ldw	r18,8(sp)
 8028bec:	dc400117 	ldw	r17,4(sp)
 8028bf0:	dc000017 	ldw	r16,0(sp)
 8028bf4:	dec00504 	addi	sp,sp,20
 8028bf8:	f800283a 	ret

08028bfc <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8028bfc:	deffeb04 	addi	sp,sp,-84
 8028c00:	dfc01415 	stw	ra,80(sp)
 8028c04:	df001315 	stw	fp,76(sp)
 8028c08:	ddc01215 	stw	r23,72(sp)
 8028c0c:	dd801115 	stw	r22,68(sp)
 8028c10:	dd401015 	stw	r21,64(sp)
 8028c14:	dd000f15 	stw	r20,60(sp)
 8028c18:	dcc00e15 	stw	r19,56(sp)
 8028c1c:	dc800d15 	stw	r18,52(sp)
 8028c20:	dc400c15 	stw	r17,48(sp)
 8028c24:	dc000b15 	stw	r16,44(sp)
 8028c28:	df001304 	addi	fp,sp,76
 8028c2c:	e13fef15 	stw	r4,-68(fp)
 8028c30:	e17ff015 	stw	r5,-64(fp)
 8028c34:	e1bff115 	stw	r6,-60(fp)
 8028c38:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8028c3c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8028c40:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 8028c44:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 8028c48:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8028c4c:	a4c5c83a 	sub	r2,r20,r19
 8028c50:	1000010e 	bge	r2,zero,8028c58 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 8028c54:	0085c83a 	sub	r2,zero,r2
 8028c58:	1007883a 	mov	r3,r2
 8028c5c:	9445c83a 	sub	r2,r18,r17
 8028c60:	1000010e 	bge	r2,zero,8028c68 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 8028c64:	0085c83a 	sub	r2,zero,r2
 8028c68:	10c4803a 	cmplt	r2,r2,r3
 8028c6c:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8028c70:	e0bfef17 	ldw	r2,-68(fp)
 8028c74:	10800e17 	ldw	r2,56(r2)
 8028c78:	10800060 	cmpeqi	r2,r2,1
 8028c7c:	1000081e 	bne	r2,zero,8028ca0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8028c80:	e0bfef17 	ldw	r2,-68(fp)
 8028c84:	10800e17 	ldw	r2,56(r2)
 8028c88:	10800098 	cmpnei	r2,r2,2
 8028c8c:	1000021e 	bne	r2,zero,8028c98 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8028c90:	00800044 	movi	r2,1
 8028c94:	00000306 	br	8028ca4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 8028c98:	00800084 	movi	r2,2
 8028c9c:	00000106 	br	8028ca4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8028ca0:	0005883a 	mov	r2,zero
 8028ca4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 8028ca8:	e0800317 	ldw	r2,12(fp)
 8028cac:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8028cb0:	e0bfef17 	ldw	r2,-68(fp)
 8028cb4:	10800d17 	ldw	r2,52(r2)
 8028cb8:	1000071e 	bne	r2,zero,8028cd8 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 8028cbc:	e0bfef17 	ldw	r2,-68(fp)
 8028cc0:	10801317 	ldw	r2,76(r2)
 8028cc4:	e0fff417 	ldw	r3,-48(fp)
 8028cc8:	10c5c83a 	sub	r2,r2,r3
 8028ccc:	00c00044 	movi	r3,1
 8028cd0:	1884983a 	sll	r2,r3,r2
 8028cd4:	00000206 	br	8028ce0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8028cd8:	e0bfef17 	ldw	r2,-68(fp)
 8028cdc:	10800f17 	ldw	r2,60(r2)
 8028ce0:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 8028ce4:	e0800417 	ldw	r2,16(fp)
 8028ce8:	10800058 	cmpnei	r2,r2,1
 8028cec:	1000031e 	bne	r2,zero,8028cfc <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8028cf0:	e0bfef17 	ldw	r2,-68(fp)
 8028cf4:	15c00c17 	ldw	r23,48(r2)
 8028cf8:	00000206 	br	8028d04 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8028cfc:	e0bfef17 	ldw	r2,-68(fp)
 8028d00:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 8028d04:	e0bff307 	ldb	r2,-52(fp)
 8028d08:	0080060e 	bge	zero,r2,8028d24 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8028d0c:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8028d10:	9823883a 	mov	r17,r19
		y_0 = error;
 8028d14:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 8028d18:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8028d1c:	a025883a 	mov	r18,r20
		y_1 = error;
 8028d20:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 8028d24:	9440060e 	bge	r18,r17,8028d40 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 8028d28:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8028d2c:	9023883a 	mov	r17,r18
		x_1 = error;
 8028d30:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 8028d34:	9821883a 	mov	r16,r19
		y_0 = y_1;
 8028d38:	a027883a 	mov	r19,r20
		y_1 = error;
 8028d3c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8028d40:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 8028d44:	a4c5c83a 	sub	r2,r20,r19
 8028d48:	1000010e 	bge	r2,zero,8028d50 <alt_up_pixel_buffer_dma_draw_line+0x154>
 8028d4c:	0085c83a 	sub	r2,zero,r2
 8028d50:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 8028d54:	a804d7fa 	srli	r2,r21,31
 8028d58:	1545883a 	add	r2,r2,r21
 8028d5c:	1005d07a 	srai	r2,r2,1
 8028d60:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8028d64:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8028d68:	9d00020e 	bge	r19,r20,8028d74 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8028d6c:	04c00044 	movi	r19,1
 8028d70:	00000106 	br	8028d78 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 8028d74:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8028d78:	e0bff307 	ldb	r2,-52(fp)
 8028d7c:	10800058 	cmpnei	r2,r2,1
 8028d80:	1000211e 	bne	r2,zero,8028e08 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 8028d84:	00000f06 	br	8028dc4 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8028d88:	e0bff417 	ldw	r2,-48(fp)
 8028d8c:	d8800115 	stw	r2,4(sp)
 8028d90:	e0bff517 	ldw	r2,-44(fp)
 8028d94:	d8800015 	stw	r2,0(sp)
 8028d98:	880f883a 	mov	r7,r17
 8028d9c:	b00d883a 	mov	r6,r22
 8028da0:	e17ff617 	ldw	r5,-40(fp)
 8028da4:	b809883a 	mov	r4,r23
 8028da8:	8028b3c0 	call	8028b3c <helper_plot_pixel>
			error = error + deltay;
 8028dac:	e0bff717 	ldw	r2,-36(fp)
 8028db0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8028db4:	0400020e 	bge	zero,r16,8028dc0 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 8028db8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8028dbc:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8028dc0:	8c400044 	addi	r17,r17,1
 8028dc4:	947ff00e 	bge	r18,r17,8028d88 <__alt_data_end+0xfffe9988>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8028dc8:	00001006 	br	8028e0c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8028dcc:	e0bff417 	ldw	r2,-48(fp)
 8028dd0:	d8800115 	stw	r2,4(sp)
 8028dd4:	e0bff517 	ldw	r2,-44(fp)
 8028dd8:	d8800015 	stw	r2,0(sp)
 8028ddc:	b00f883a 	mov	r7,r22
 8028de0:	880d883a 	mov	r6,r17
 8028de4:	e17ff617 	ldw	r5,-40(fp)
 8028de8:	b809883a 	mov	r4,r23
 8028dec:	8028b3c0 	call	8028b3c <helper_plot_pixel>
			error = error + deltay;
 8028df0:	e0bff717 	ldw	r2,-36(fp)
 8028df4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8028df8:	0400020e 	bge	zero,r16,8028e04 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8028dfc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8028e00:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8028e04:	8c400044 	addi	r17,r17,1
 8028e08:	947ff00e 	bge	r18,r17,8028dcc <__alt_data_end+0xfffe99cc>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8028e0c:	0001883a 	nop
 8028e10:	e6fff804 	addi	sp,fp,-32
 8028e14:	dfc00917 	ldw	ra,36(sp)
 8028e18:	df000817 	ldw	fp,32(sp)
 8028e1c:	ddc00717 	ldw	r23,28(sp)
 8028e20:	dd800617 	ldw	r22,24(sp)
 8028e24:	dd400517 	ldw	r21,20(sp)
 8028e28:	dd000417 	ldw	r20,16(sp)
 8028e2c:	dcc00317 	ldw	r19,12(sp)
 8028e30:	dc800217 	ldw	r18,8(sp)
 8028e34:	dc400117 	ldw	r17,4(sp)
 8028e38:	dc000017 	ldw	r16,0(sp)
 8028e3c:	dec00a04 	addi	sp,sp,40
 8028e40:	f800283a 	ret

08028e44 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8028e44:	defffa04 	addi	sp,sp,-24
 8028e48:	dfc00515 	stw	ra,20(sp)
 8028e4c:	df000415 	stw	fp,16(sp)
 8028e50:	df000404 	addi	fp,sp,16
 8028e54:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8028e58:	00800244 	movi	r2,9
 8028e5c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8028e60:	014003f4 	movhi	r5,15
 8028e64:	29509004 	addi	r5,r5,16960
 8028e68:	e13ffd17 	ldw	r4,-12(fp)
 8028e6c:	80212ac0 	call	80212ac <__mulsi3>
 8028e70:	100b883a 	mov	r5,r2
 8028e74:	0100bef4 	movhi	r4,763
 8028e78:	213c2004 	addi	r4,r4,-3968
 8028e7c:	80231c40 	call	80231c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8028e80:	100b883a 	mov	r5,r2
 8028e84:	01200034 	movhi	r4,32768
 8028e88:	213fffc4 	addi	r4,r4,-1
 8028e8c:	80231c40 	call	80231c4 <__udivsi3>
 8028e90:	100b883a 	mov	r5,r2
 8028e94:	e13fff17 	ldw	r4,-4(fp)
 8028e98:	80231c40 	call	80231c4 <__udivsi3>
 8028e9c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8028ea0:	e0bffe17 	ldw	r2,-8(fp)
 8028ea4:	10002a26 	beq	r2,zero,8028f50 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8028ea8:	e03ffc15 	stw	zero,-16(fp)
 8028eac:	00001706 	br	8028f0c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8028eb0:	00a00034 	movhi	r2,32768
 8028eb4:	10bfffc4 	addi	r2,r2,-1
 8028eb8:	10bfffc4 	addi	r2,r2,-1
 8028ebc:	103ffe1e 	bne	r2,zero,8028eb8 <__alt_data_end+0xfffe9ab8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8028ec0:	014003f4 	movhi	r5,15
 8028ec4:	29509004 	addi	r5,r5,16960
 8028ec8:	e13ffd17 	ldw	r4,-12(fp)
 8028ecc:	80212ac0 	call	80212ac <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8028ed0:	100b883a 	mov	r5,r2
 8028ed4:	0100bef4 	movhi	r4,763
 8028ed8:	213c2004 	addi	r4,r4,-3968
 8028edc:	80231c40 	call	80231c4 <__udivsi3>
 8028ee0:	100b883a 	mov	r5,r2
 8028ee4:	01200034 	movhi	r4,32768
 8028ee8:	213fffc4 	addi	r4,r4,-1
 8028eec:	80231c40 	call	80231c4 <__udivsi3>
 8028ef0:	1007883a 	mov	r3,r2
 8028ef4:	e0bfff17 	ldw	r2,-4(fp)
 8028ef8:	10c5c83a 	sub	r2,r2,r3
 8028efc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8028f00:	e0bffc17 	ldw	r2,-16(fp)
 8028f04:	10800044 	addi	r2,r2,1
 8028f08:	e0bffc15 	stw	r2,-16(fp)
 8028f0c:	e0fffc17 	ldw	r3,-16(fp)
 8028f10:	e0bffe17 	ldw	r2,-8(fp)
 8028f14:	18bfe616 	blt	r3,r2,8028eb0 <__alt_data_end+0xfffe9ab0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8028f18:	014003f4 	movhi	r5,15
 8028f1c:	29509004 	addi	r5,r5,16960
 8028f20:	e13ffd17 	ldw	r4,-12(fp)
 8028f24:	80212ac0 	call	80212ac <__mulsi3>
 8028f28:	100b883a 	mov	r5,r2
 8028f2c:	0100bef4 	movhi	r4,763
 8028f30:	213c2004 	addi	r4,r4,-3968
 8028f34:	80231c40 	call	80231c4 <__udivsi3>
 8028f38:	e17fff17 	ldw	r5,-4(fp)
 8028f3c:	1009883a 	mov	r4,r2
 8028f40:	80212ac0 	call	80212ac <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8028f44:	10bfffc4 	addi	r2,r2,-1
 8028f48:	103ffe1e 	bne	r2,zero,8028f44 <__alt_data_end+0xfffe9b44>
 8028f4c:	00000d06 	br	8028f84 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8028f50:	014003f4 	movhi	r5,15
 8028f54:	29509004 	addi	r5,r5,16960
 8028f58:	e13ffd17 	ldw	r4,-12(fp)
 8028f5c:	80212ac0 	call	80212ac <__mulsi3>
 8028f60:	100b883a 	mov	r5,r2
 8028f64:	0100bef4 	movhi	r4,763
 8028f68:	213c2004 	addi	r4,r4,-3968
 8028f6c:	80231c40 	call	80231c4 <__udivsi3>
 8028f70:	e17fff17 	ldw	r5,-4(fp)
 8028f74:	1009883a 	mov	r4,r2
 8028f78:	80212ac0 	call	80212ac <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8028f7c:	10bfffc4 	addi	r2,r2,-1
 8028f80:	00bffe16 	blt	zero,r2,8028f7c <__alt_data_end+0xfffe9b7c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8028f84:	0005883a 	mov	r2,zero
}
 8028f88:	e037883a 	mov	sp,fp
 8028f8c:	dfc00117 	ldw	ra,4(sp)
 8028f90:	df000017 	ldw	fp,0(sp)
 8028f94:	dec00204 	addi	sp,sp,8
 8028f98:	f800283a 	ret

08028f9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8028f9c:	deffff04 	addi	sp,sp,-4
 8028fa0:	df000015 	stw	fp,0(sp)
 8028fa4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8028fa8:	0001883a 	nop
 8028fac:	e037883a 	mov	sp,fp
 8028fb0:	df000017 	ldw	fp,0(sp)
 8028fb4:	dec00104 	addi	sp,sp,4
 8028fb8:	f800283a 	ret

08028fbc <alt_get_errno>:
 8028fbc:	defffe04 	addi	sp,sp,-8
 8028fc0:	dfc00115 	stw	ra,4(sp)
 8028fc4:	df000015 	stw	fp,0(sp)
 8028fc8:	d839883a 	mov	fp,sp
 8028fcc:	d0a00917 	ldw	r2,-32732(gp)
 8028fd0:	10000326 	beq	r2,zero,8028fe0 <alt_get_errno+0x24>
 8028fd4:	d0a00917 	ldw	r2,-32732(gp)
 8028fd8:	103ee83a 	callr	r2
 8028fdc:	00000106 	br	8028fe4 <alt_get_errno+0x28>
 8028fe0:	d0a6d404 	addi	r2,gp,-25776
 8028fe4:	e037883a 	mov	sp,fp
 8028fe8:	dfc00117 	ldw	ra,4(sp)
 8028fec:	df000017 	ldw	fp,0(sp)
 8028ff0:	dec00204 	addi	sp,sp,8
 8028ff4:	f800283a 	ret

08028ff8 <alt_dev_llist_insert>:
 8028ff8:	defffa04 	addi	sp,sp,-24
 8028ffc:	dfc00515 	stw	ra,20(sp)
 8029000:	df000415 	stw	fp,16(sp)
 8029004:	df000404 	addi	fp,sp,16
 8029008:	e13ffe15 	stw	r4,-8(fp)
 802900c:	e17fff15 	stw	r5,-4(fp)
 8029010:	e0bffe17 	ldw	r2,-8(fp)
 8029014:	10000326 	beq	r2,zero,8029024 <alt_dev_llist_insert+0x2c>
 8029018:	e0bffe17 	ldw	r2,-8(fp)
 802901c:	10800217 	ldw	r2,8(r2)
 8029020:	1000061e 	bne	r2,zero,802903c <alt_dev_llist_insert+0x44>
 8029024:	8028fbc0 	call	8028fbc <alt_get_errno>
 8029028:	1007883a 	mov	r3,r2
 802902c:	00800584 	movi	r2,22
 8029030:	18800015 	stw	r2,0(r3)
 8029034:	00bffa84 	movi	r2,-22
 8029038:	00001306 	br	8029088 <alt_dev_llist_insert+0x90>
 802903c:	e0bffe17 	ldw	r2,-8(fp)
 8029040:	e0ffff17 	ldw	r3,-4(fp)
 8029044:	e0fffc15 	stw	r3,-16(fp)
 8029048:	e0bffd15 	stw	r2,-12(fp)
 802904c:	e0bffd17 	ldw	r2,-12(fp)
 8029050:	e0fffc17 	ldw	r3,-16(fp)
 8029054:	10c00115 	stw	r3,4(r2)
 8029058:	e0bffc17 	ldw	r2,-16(fp)
 802905c:	10c00017 	ldw	r3,0(r2)
 8029060:	e0bffd17 	ldw	r2,-12(fp)
 8029064:	10c00015 	stw	r3,0(r2)
 8029068:	e0bffc17 	ldw	r2,-16(fp)
 802906c:	10800017 	ldw	r2,0(r2)
 8029070:	e0fffd17 	ldw	r3,-12(fp)
 8029074:	10c00115 	stw	r3,4(r2)
 8029078:	e0bffc17 	ldw	r2,-16(fp)
 802907c:	e0fffd17 	ldw	r3,-12(fp)
 8029080:	10c00015 	stw	r3,0(r2)
 8029084:	0005883a 	mov	r2,zero
 8029088:	e037883a 	mov	sp,fp
 802908c:	dfc00117 	ldw	ra,4(sp)
 8029090:	df000017 	ldw	fp,0(sp)
 8029094:	dec00204 	addi	sp,sp,8
 8029098:	f800283a 	ret

0802909c <_do_ctors>:
 802909c:	defffd04 	addi	sp,sp,-12
 80290a0:	dfc00215 	stw	ra,8(sp)
 80290a4:	df000115 	stw	fp,4(sp)
 80290a8:	df000104 	addi	fp,sp,4
 80290ac:	008200f4 	movhi	r2,2051
 80290b0:	10a7ab04 	addi	r2,r2,-24916
 80290b4:	e0bfff15 	stw	r2,-4(fp)
 80290b8:	00000606 	br	80290d4 <_do_ctors+0x38>
 80290bc:	e0bfff17 	ldw	r2,-4(fp)
 80290c0:	10800017 	ldw	r2,0(r2)
 80290c4:	103ee83a 	callr	r2
 80290c8:	e0bfff17 	ldw	r2,-4(fp)
 80290cc:	10bfff04 	addi	r2,r2,-4
 80290d0:	e0bfff15 	stw	r2,-4(fp)
 80290d4:	e0ffff17 	ldw	r3,-4(fp)
 80290d8:	008200f4 	movhi	r2,2051
 80290dc:	10a7ac04 	addi	r2,r2,-24912
 80290e0:	18bff62e 	bgeu	r3,r2,80290bc <__alt_data_end+0xfffe9cbc>
 80290e4:	0001883a 	nop
 80290e8:	e037883a 	mov	sp,fp
 80290ec:	dfc00117 	ldw	ra,4(sp)
 80290f0:	df000017 	ldw	fp,0(sp)
 80290f4:	dec00204 	addi	sp,sp,8
 80290f8:	f800283a 	ret

080290fc <_do_dtors>:
 80290fc:	defffd04 	addi	sp,sp,-12
 8029100:	dfc00215 	stw	ra,8(sp)
 8029104:	df000115 	stw	fp,4(sp)
 8029108:	df000104 	addi	fp,sp,4
 802910c:	008200f4 	movhi	r2,2051
 8029110:	10a7ab04 	addi	r2,r2,-24916
 8029114:	e0bfff15 	stw	r2,-4(fp)
 8029118:	00000606 	br	8029134 <_do_dtors+0x38>
 802911c:	e0bfff17 	ldw	r2,-4(fp)
 8029120:	10800017 	ldw	r2,0(r2)
 8029124:	103ee83a 	callr	r2
 8029128:	e0bfff17 	ldw	r2,-4(fp)
 802912c:	10bfff04 	addi	r2,r2,-4
 8029130:	e0bfff15 	stw	r2,-4(fp)
 8029134:	e0ffff17 	ldw	r3,-4(fp)
 8029138:	008200f4 	movhi	r2,2051
 802913c:	10a7ac04 	addi	r2,r2,-24912
 8029140:	18bff62e 	bgeu	r3,r2,802911c <__alt_data_end+0xfffe9d1c>
 8029144:	0001883a 	nop
 8029148:	e037883a 	mov	sp,fp
 802914c:	dfc00117 	ldw	ra,4(sp)
 8029150:	df000017 	ldw	fp,0(sp)
 8029154:	dec00204 	addi	sp,sp,8
 8029158:	f800283a 	ret

0802915c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 802915c:	defffa04 	addi	sp,sp,-24
 8029160:	dfc00515 	stw	ra,20(sp)
 8029164:	df000415 	stw	fp,16(sp)
 8029168:	df000404 	addi	fp,sp,16
 802916c:	e13ffe15 	stw	r4,-8(fp)
 8029170:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8029174:	e0bfff17 	ldw	r2,-4(fp)
 8029178:	10800017 	ldw	r2,0(r2)
 802917c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8029180:	e13ffe17 	ldw	r4,-8(fp)
 8029184:	80233540 	call	8023354 <strlen>
 8029188:	10800044 	addi	r2,r2,1
 802918c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8029190:	00000d06 	br	80291c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8029194:	e0bffc17 	ldw	r2,-16(fp)
 8029198:	10800217 	ldw	r2,8(r2)
 802919c:	e0fffd17 	ldw	r3,-12(fp)
 80291a0:	180d883a 	mov	r6,r3
 80291a4:	e17ffe17 	ldw	r5,-8(fp)
 80291a8:	1009883a 	mov	r4,r2
 80291ac:	8029b680 	call	8029b68 <memcmp>
 80291b0:	1000021e 	bne	r2,zero,80291bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80291b4:	e0bffc17 	ldw	r2,-16(fp)
 80291b8:	00000706 	br	80291d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80291bc:	e0bffc17 	ldw	r2,-16(fp)
 80291c0:	10800017 	ldw	r2,0(r2)
 80291c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80291c8:	e0fffc17 	ldw	r3,-16(fp)
 80291cc:	e0bfff17 	ldw	r2,-4(fp)
 80291d0:	18bff01e 	bne	r3,r2,8029194 <__alt_data_end+0xfffe9d94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80291d4:	0005883a 	mov	r2,zero
}
 80291d8:	e037883a 	mov	sp,fp
 80291dc:	dfc00117 	ldw	ra,4(sp)
 80291e0:	df000017 	ldw	fp,0(sp)
 80291e4:	dec00204 	addi	sp,sp,8
 80291e8:	f800283a 	ret

080291ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80291ec:	deffff04 	addi	sp,sp,-4
 80291f0:	df000015 	stw	fp,0(sp)
 80291f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80291f8:	0001883a 	nop
 80291fc:	e037883a 	mov	sp,fp
 8029200:	df000017 	ldw	fp,0(sp)
 8029204:	dec00104 	addi	sp,sp,4
 8029208:	f800283a 	ret

0802920c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 802920c:	defff904 	addi	sp,sp,-28
 8029210:	dfc00615 	stw	ra,24(sp)
 8029214:	df000515 	stw	fp,20(sp)
 8029218:	df000504 	addi	fp,sp,20
 802921c:	e13ffc15 	stw	r4,-16(fp)
 8029220:	e17ffd15 	stw	r5,-12(fp)
 8029224:	e1bffe15 	stw	r6,-8(fp)
 8029228:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 802922c:	e0800217 	ldw	r2,8(fp)
 8029230:	d8800015 	stw	r2,0(sp)
 8029234:	e1ffff17 	ldw	r7,-4(fp)
 8029238:	e1bffe17 	ldw	r6,-8(fp)
 802923c:	e17ffd17 	ldw	r5,-12(fp)
 8029240:	e13ffc17 	ldw	r4,-16(fp)
 8029244:	80293bc0 	call	80293bc <alt_iic_isr_register>
}  
 8029248:	e037883a 	mov	sp,fp
 802924c:	dfc00117 	ldw	ra,4(sp)
 8029250:	df000017 	ldw	fp,0(sp)
 8029254:	dec00204 	addi	sp,sp,8
 8029258:	f800283a 	ret

0802925c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 802925c:	defff904 	addi	sp,sp,-28
 8029260:	df000615 	stw	fp,24(sp)
 8029264:	df000604 	addi	fp,sp,24
 8029268:	e13ffe15 	stw	r4,-8(fp)
 802926c:	e17fff15 	stw	r5,-4(fp)
 8029270:	e0bfff17 	ldw	r2,-4(fp)
 8029274:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8029278:	0005303a 	rdctl	r2,status
 802927c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8029280:	e0fffb17 	ldw	r3,-20(fp)
 8029284:	00bfff84 	movi	r2,-2
 8029288:	1884703a 	and	r2,r3,r2
 802928c:	1001703a 	wrctl	status,r2
  
  return context;
 8029290:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8029294:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8029298:	00c00044 	movi	r3,1
 802929c:	e0bffa17 	ldw	r2,-24(fp)
 80292a0:	1884983a 	sll	r2,r3,r2
 80292a4:	1007883a 	mov	r3,r2
 80292a8:	d0a6da17 	ldw	r2,-25752(gp)
 80292ac:	1884b03a 	or	r2,r3,r2
 80292b0:	d0a6da15 	stw	r2,-25752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80292b4:	d0a6da17 	ldw	r2,-25752(gp)
 80292b8:	100170fa 	wrctl	ienable,r2
 80292bc:	e0bffc17 	ldw	r2,-16(fp)
 80292c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80292c4:	e0bffd17 	ldw	r2,-12(fp)
 80292c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80292cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80292d0:	0001883a 	nop
}
 80292d4:	e037883a 	mov	sp,fp
 80292d8:	df000017 	ldw	fp,0(sp)
 80292dc:	dec00104 	addi	sp,sp,4
 80292e0:	f800283a 	ret

080292e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80292e4:	defff904 	addi	sp,sp,-28
 80292e8:	df000615 	stw	fp,24(sp)
 80292ec:	df000604 	addi	fp,sp,24
 80292f0:	e13ffe15 	stw	r4,-8(fp)
 80292f4:	e17fff15 	stw	r5,-4(fp)
 80292f8:	e0bfff17 	ldw	r2,-4(fp)
 80292fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8029300:	0005303a 	rdctl	r2,status
 8029304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8029308:	e0fffb17 	ldw	r3,-20(fp)
 802930c:	00bfff84 	movi	r2,-2
 8029310:	1884703a 	and	r2,r3,r2
 8029314:	1001703a 	wrctl	status,r2
  
  return context;
 8029318:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 802931c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8029320:	00c00044 	movi	r3,1
 8029324:	e0bffa17 	ldw	r2,-24(fp)
 8029328:	1884983a 	sll	r2,r3,r2
 802932c:	0084303a 	nor	r2,zero,r2
 8029330:	1007883a 	mov	r3,r2
 8029334:	d0a6da17 	ldw	r2,-25752(gp)
 8029338:	1884703a 	and	r2,r3,r2
 802933c:	d0a6da15 	stw	r2,-25752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8029340:	d0a6da17 	ldw	r2,-25752(gp)
 8029344:	100170fa 	wrctl	ienable,r2
 8029348:	e0bffc17 	ldw	r2,-16(fp)
 802934c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8029350:	e0bffd17 	ldw	r2,-12(fp)
 8029354:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8029358:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 802935c:	0001883a 	nop
}
 8029360:	e037883a 	mov	sp,fp
 8029364:	df000017 	ldw	fp,0(sp)
 8029368:	dec00104 	addi	sp,sp,4
 802936c:	f800283a 	ret

08029370 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8029370:	defffc04 	addi	sp,sp,-16
 8029374:	df000315 	stw	fp,12(sp)
 8029378:	df000304 	addi	fp,sp,12
 802937c:	e13ffe15 	stw	r4,-8(fp)
 8029380:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8029384:	000530fa 	rdctl	r2,ienable
 8029388:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 802938c:	00c00044 	movi	r3,1
 8029390:	e0bfff17 	ldw	r2,-4(fp)
 8029394:	1884983a 	sll	r2,r3,r2
 8029398:	1007883a 	mov	r3,r2
 802939c:	e0bffd17 	ldw	r2,-12(fp)
 80293a0:	1884703a 	and	r2,r3,r2
 80293a4:	1004c03a 	cmpne	r2,r2,zero
 80293a8:	10803fcc 	andi	r2,r2,255
}
 80293ac:	e037883a 	mov	sp,fp
 80293b0:	df000017 	ldw	fp,0(sp)
 80293b4:	dec00104 	addi	sp,sp,4
 80293b8:	f800283a 	ret

080293bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80293bc:	defff504 	addi	sp,sp,-44
 80293c0:	dfc00a15 	stw	ra,40(sp)
 80293c4:	df000915 	stw	fp,36(sp)
 80293c8:	df000904 	addi	fp,sp,36
 80293cc:	e13ffc15 	stw	r4,-16(fp)
 80293d0:	e17ffd15 	stw	r5,-12(fp)
 80293d4:	e1bffe15 	stw	r6,-8(fp)
 80293d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80293dc:	00bffa84 	movi	r2,-22
 80293e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80293e4:	e0bffd17 	ldw	r2,-12(fp)
 80293e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80293ec:	e0bff817 	ldw	r2,-32(fp)
 80293f0:	10800808 	cmpgei	r2,r2,32
 80293f4:	1000271e 	bne	r2,zero,8029494 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80293f8:	0005303a 	rdctl	r2,status
 80293fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8029400:	e0fffb17 	ldw	r3,-20(fp)
 8029404:	00bfff84 	movi	r2,-2
 8029408:	1884703a 	and	r2,r3,r2
 802940c:	1001703a 	wrctl	status,r2
  
  return context;
 8029410:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8029414:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8029418:	008200f4 	movhi	r2,2051
 802941c:	10b5ce04 	addi	r2,r2,-10440
 8029420:	e0fff817 	ldw	r3,-32(fp)
 8029424:	180690fa 	slli	r3,r3,3
 8029428:	10c5883a 	add	r2,r2,r3
 802942c:	e0fffe17 	ldw	r3,-8(fp)
 8029430:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8029434:	008200f4 	movhi	r2,2051
 8029438:	10b5ce04 	addi	r2,r2,-10440
 802943c:	e0fff817 	ldw	r3,-32(fp)
 8029440:	180690fa 	slli	r3,r3,3
 8029444:	10c5883a 	add	r2,r2,r3
 8029448:	10800104 	addi	r2,r2,4
 802944c:	e0ffff17 	ldw	r3,-4(fp)
 8029450:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8029454:	e0bffe17 	ldw	r2,-8(fp)
 8029458:	10000526 	beq	r2,zero,8029470 <alt_iic_isr_register+0xb4>
 802945c:	e0bff817 	ldw	r2,-32(fp)
 8029460:	100b883a 	mov	r5,r2
 8029464:	e13ffc17 	ldw	r4,-16(fp)
 8029468:	802925c0 	call	802925c <alt_ic_irq_enable>
 802946c:	00000406 	br	8029480 <alt_iic_isr_register+0xc4>
 8029470:	e0bff817 	ldw	r2,-32(fp)
 8029474:	100b883a 	mov	r5,r2
 8029478:	e13ffc17 	ldw	r4,-16(fp)
 802947c:	80292e40 	call	80292e4 <alt_ic_irq_disable>
 8029480:	e0bff715 	stw	r2,-36(fp)
 8029484:	e0bffa17 	ldw	r2,-24(fp)
 8029488:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 802948c:	e0bff917 	ldw	r2,-28(fp)
 8029490:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8029494:	e0bff717 	ldw	r2,-36(fp)
}
 8029498:	e037883a 	mov	sp,fp
 802949c:	dfc00117 	ldw	ra,4(sp)
 80294a0:	df000017 	ldw	fp,0(sp)
 80294a4:	dec00204 	addi	sp,sp,8
 80294a8:	f800283a 	ret

080294ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80294ac:	defff804 	addi	sp,sp,-32
 80294b0:	dfc00715 	stw	ra,28(sp)
 80294b4:	df000615 	stw	fp,24(sp)
 80294b8:	dc000515 	stw	r16,20(sp)
 80294bc:	df000604 	addi	fp,sp,24
 80294c0:	e13ffb15 	stw	r4,-20(fp)
 80294c4:	e17ffc15 	stw	r5,-16(fp)
 80294c8:	e1bffd15 	stw	r6,-12(fp)
 80294cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80294d0:	e1bffe17 	ldw	r6,-8(fp)
 80294d4:	e17ffd17 	ldw	r5,-12(fp)
 80294d8:	e13ffc17 	ldw	r4,-16(fp)
 80294dc:	80297340 	call	8029734 <open>
 80294e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80294e4:	e0bffa17 	ldw	r2,-24(fp)
 80294e8:	10002216 	blt	r2,zero,8029574 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80294ec:	040200f4 	movhi	r16,2051
 80294f0:	842a4604 	addi	r16,r16,-22248
 80294f4:	e0bffa17 	ldw	r2,-24(fp)
 80294f8:	01400304 	movi	r5,12
 80294fc:	1009883a 	mov	r4,r2
 8029500:	80212ac0 	call	80212ac <__mulsi3>
 8029504:	8085883a 	add	r2,r16,r2
 8029508:	10c00017 	ldw	r3,0(r2)
 802950c:	e0bffb17 	ldw	r2,-20(fp)
 8029510:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8029514:	040200f4 	movhi	r16,2051
 8029518:	842a4604 	addi	r16,r16,-22248
 802951c:	e0bffa17 	ldw	r2,-24(fp)
 8029520:	01400304 	movi	r5,12
 8029524:	1009883a 	mov	r4,r2
 8029528:	80212ac0 	call	80212ac <__mulsi3>
 802952c:	8085883a 	add	r2,r16,r2
 8029530:	10800104 	addi	r2,r2,4
 8029534:	10c00017 	ldw	r3,0(r2)
 8029538:	e0bffb17 	ldw	r2,-20(fp)
 802953c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8029540:	040200f4 	movhi	r16,2051
 8029544:	842a4604 	addi	r16,r16,-22248
 8029548:	e0bffa17 	ldw	r2,-24(fp)
 802954c:	01400304 	movi	r5,12
 8029550:	1009883a 	mov	r4,r2
 8029554:	80212ac0 	call	80212ac <__mulsi3>
 8029558:	8085883a 	add	r2,r16,r2
 802955c:	10800204 	addi	r2,r2,8
 8029560:	10c00017 	ldw	r3,0(r2)
 8029564:	e0bffb17 	ldw	r2,-20(fp)
 8029568:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 802956c:	e13ffa17 	ldw	r4,-24(fp)
 8029570:	80267000 	call	8026700 <alt_release_fd>
  }
} 
 8029574:	0001883a 	nop
 8029578:	e6ffff04 	addi	sp,fp,-4
 802957c:	dfc00217 	ldw	ra,8(sp)
 8029580:	df000117 	ldw	fp,4(sp)
 8029584:	dc000017 	ldw	r16,0(sp)
 8029588:	dec00304 	addi	sp,sp,12
 802958c:	f800283a 	ret

08029590 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8029590:	defffb04 	addi	sp,sp,-20
 8029594:	dfc00415 	stw	ra,16(sp)
 8029598:	df000315 	stw	fp,12(sp)
 802959c:	df000304 	addi	fp,sp,12
 80295a0:	e13ffd15 	stw	r4,-12(fp)
 80295a4:	e17ffe15 	stw	r5,-8(fp)
 80295a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80295ac:	01c07fc4 	movi	r7,511
 80295b0:	01800044 	movi	r6,1
 80295b4:	e17ffd17 	ldw	r5,-12(fp)
 80295b8:	010200f4 	movhi	r4,2051
 80295bc:	212a4904 	addi	r4,r4,-22236
 80295c0:	80294ac0 	call	80294ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80295c4:	01c07fc4 	movi	r7,511
 80295c8:	000d883a 	mov	r6,zero
 80295cc:	e17ffe17 	ldw	r5,-8(fp)
 80295d0:	010200f4 	movhi	r4,2051
 80295d4:	212a4604 	addi	r4,r4,-22248
 80295d8:	80294ac0 	call	80294ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80295dc:	01c07fc4 	movi	r7,511
 80295e0:	01800044 	movi	r6,1
 80295e4:	e17fff17 	ldw	r5,-4(fp)
 80295e8:	010200f4 	movhi	r4,2051
 80295ec:	212a4c04 	addi	r4,r4,-22224
 80295f0:	80294ac0 	call	80294ac <alt_open_fd>
}  
 80295f4:	0001883a 	nop
 80295f8:	e037883a 	mov	sp,fp
 80295fc:	dfc00117 	ldw	ra,4(sp)
 8029600:	df000017 	ldw	fp,0(sp)
 8029604:	dec00204 	addi	sp,sp,8
 8029608:	f800283a 	ret

0802960c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 802960c:	defffe04 	addi	sp,sp,-8
 8029610:	dfc00115 	stw	ra,4(sp)
 8029614:	df000015 	stw	fp,0(sp)
 8029618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 802961c:	d0a00917 	ldw	r2,-32732(gp)
 8029620:	10000326 	beq	r2,zero,8029630 <alt_get_errno+0x24>
 8029624:	d0a00917 	ldw	r2,-32732(gp)
 8029628:	103ee83a 	callr	r2
 802962c:	00000106 	br	8029634 <alt_get_errno+0x28>
 8029630:	d0a6d404 	addi	r2,gp,-25776
}
 8029634:	e037883a 	mov	sp,fp
 8029638:	dfc00117 	ldw	ra,4(sp)
 802963c:	df000017 	ldw	fp,0(sp)
 8029640:	dec00204 	addi	sp,sp,8
 8029644:	f800283a 	ret

08029648 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8029648:	defffb04 	addi	sp,sp,-20
 802964c:	dfc00415 	stw	ra,16(sp)
 8029650:	df000315 	stw	fp,12(sp)
 8029654:	dc000215 	stw	r16,8(sp)
 8029658:	df000304 	addi	fp,sp,12
 802965c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8029660:	e0bffe17 	ldw	r2,-8(fp)
 8029664:	10800217 	ldw	r2,8(r2)
 8029668:	10d00034 	orhi	r3,r2,16384
 802966c:	e0bffe17 	ldw	r2,-8(fp)
 8029670:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8029674:	e03ffd15 	stw	zero,-12(fp)
 8029678:	00002306 	br	8029708 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 802967c:	040200f4 	movhi	r16,2051
 8029680:	842a4604 	addi	r16,r16,-22248
 8029684:	e0bffd17 	ldw	r2,-12(fp)
 8029688:	01400304 	movi	r5,12
 802968c:	1009883a 	mov	r4,r2
 8029690:	80212ac0 	call	80212ac <__mulsi3>
 8029694:	8085883a 	add	r2,r16,r2
 8029698:	10c00017 	ldw	r3,0(r2)
 802969c:	e0bffe17 	ldw	r2,-8(fp)
 80296a0:	10800017 	ldw	r2,0(r2)
 80296a4:	1880151e 	bne	r3,r2,80296fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80296a8:	040200f4 	movhi	r16,2051
 80296ac:	842a4604 	addi	r16,r16,-22248
 80296b0:	e0bffd17 	ldw	r2,-12(fp)
 80296b4:	01400304 	movi	r5,12
 80296b8:	1009883a 	mov	r4,r2
 80296bc:	80212ac0 	call	80212ac <__mulsi3>
 80296c0:	8085883a 	add	r2,r16,r2
 80296c4:	10800204 	addi	r2,r2,8
 80296c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80296cc:	10000b0e 	bge	r2,zero,80296fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80296d0:	01400304 	movi	r5,12
 80296d4:	e13ffd17 	ldw	r4,-12(fp)
 80296d8:	80212ac0 	call	80212ac <__mulsi3>
 80296dc:	1007883a 	mov	r3,r2
 80296e0:	008200f4 	movhi	r2,2051
 80296e4:	10aa4604 	addi	r2,r2,-22248
 80296e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80296ec:	e0bffe17 	ldw	r2,-8(fp)
 80296f0:	18800226 	beq	r3,r2,80296fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80296f4:	00bffcc4 	movi	r2,-13
 80296f8:	00000806 	br	802971c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80296fc:	e0bffd17 	ldw	r2,-12(fp)
 8029700:	10800044 	addi	r2,r2,1
 8029704:	e0bffd15 	stw	r2,-12(fp)
 8029708:	d0a00817 	ldw	r2,-32736(gp)
 802970c:	1007883a 	mov	r3,r2
 8029710:	e0bffd17 	ldw	r2,-12(fp)
 8029714:	18bfd92e 	bgeu	r3,r2,802967c <__alt_data_end+0xfffea27c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8029718:	0005883a 	mov	r2,zero
}
 802971c:	e6ffff04 	addi	sp,fp,-4
 8029720:	dfc00217 	ldw	ra,8(sp)
 8029724:	df000117 	ldw	fp,4(sp)
 8029728:	dc000017 	ldw	r16,0(sp)
 802972c:	dec00304 	addi	sp,sp,12
 8029730:	f800283a 	ret

08029734 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8029734:	defff604 	addi	sp,sp,-40
 8029738:	dfc00915 	stw	ra,36(sp)
 802973c:	df000815 	stw	fp,32(sp)
 8029740:	df000804 	addi	fp,sp,32
 8029744:	e13ffd15 	stw	r4,-12(fp)
 8029748:	e17ffe15 	stw	r5,-8(fp)
 802974c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8029750:	00bfffc4 	movi	r2,-1
 8029754:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8029758:	00bffb44 	movi	r2,-19
 802975c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8029760:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8029764:	d1600604 	addi	r5,gp,-32744
 8029768:	e13ffd17 	ldw	r4,-12(fp)
 802976c:	802915c0 	call	802915c <alt_find_dev>
 8029770:	e0bff815 	stw	r2,-32(fp)
 8029774:	e0bff817 	ldw	r2,-32(fp)
 8029778:	1000051e 	bne	r2,zero,8029790 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 802977c:	e13ffd17 	ldw	r4,-12(fp)
 8029780:	80298b40 	call	80298b4 <alt_find_file>
 8029784:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8029788:	00800044 	movi	r2,1
 802978c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8029790:	e0bff817 	ldw	r2,-32(fp)
 8029794:	10002b26 	beq	r2,zero,8029844 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8029798:	e13ff817 	ldw	r4,-32(fp)
 802979c:	80299bc0 	call	80299bc <alt_get_fd>
 80297a0:	e0bff915 	stw	r2,-28(fp)
 80297a4:	e0bff917 	ldw	r2,-28(fp)
 80297a8:	1000030e 	bge	r2,zero,80297b8 <open+0x84>
    {
      status = index;
 80297ac:	e0bff917 	ldw	r2,-28(fp)
 80297b0:	e0bffa15 	stw	r2,-24(fp)
 80297b4:	00002506 	br	802984c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80297b8:	01400304 	movi	r5,12
 80297bc:	e13ff917 	ldw	r4,-28(fp)
 80297c0:	80212ac0 	call	80212ac <__mulsi3>
 80297c4:	1007883a 	mov	r3,r2
 80297c8:	008200f4 	movhi	r2,2051
 80297cc:	10aa4604 	addi	r2,r2,-22248
 80297d0:	1885883a 	add	r2,r3,r2
 80297d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80297d8:	e0fffe17 	ldw	r3,-8(fp)
 80297dc:	00900034 	movhi	r2,16384
 80297e0:	10bfffc4 	addi	r2,r2,-1
 80297e4:	1886703a 	and	r3,r3,r2
 80297e8:	e0bffc17 	ldw	r2,-16(fp)
 80297ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80297f0:	e0bffb17 	ldw	r2,-20(fp)
 80297f4:	1000051e 	bne	r2,zero,802980c <open+0xd8>
 80297f8:	e13ffc17 	ldw	r4,-16(fp)
 80297fc:	80296480 	call	8029648 <alt_file_locked>
 8029800:	e0bffa15 	stw	r2,-24(fp)
 8029804:	e0bffa17 	ldw	r2,-24(fp)
 8029808:	10001016 	blt	r2,zero,802984c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 802980c:	e0bff817 	ldw	r2,-32(fp)
 8029810:	10800317 	ldw	r2,12(r2)
 8029814:	10000826 	beq	r2,zero,8029838 <open+0x104>
 8029818:	e0bff817 	ldw	r2,-32(fp)
 802981c:	10800317 	ldw	r2,12(r2)
 8029820:	e1ffff17 	ldw	r7,-4(fp)
 8029824:	e1bffe17 	ldw	r6,-8(fp)
 8029828:	e17ffd17 	ldw	r5,-12(fp)
 802982c:	e13ffc17 	ldw	r4,-16(fp)
 8029830:	103ee83a 	callr	r2
 8029834:	00000106 	br	802983c <open+0x108>
 8029838:	0005883a 	mov	r2,zero
 802983c:	e0bffa15 	stw	r2,-24(fp)
 8029840:	00000206 	br	802984c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8029844:	00bffb44 	movi	r2,-19
 8029848:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 802984c:	e0bffa17 	ldw	r2,-24(fp)
 8029850:	1000090e 	bge	r2,zero,8029878 <open+0x144>
  {
    alt_release_fd (index);  
 8029854:	e13ff917 	ldw	r4,-28(fp)
 8029858:	80267000 	call	8026700 <alt_release_fd>
    ALT_ERRNO = -status;
 802985c:	802960c0 	call	802960c <alt_get_errno>
 8029860:	1007883a 	mov	r3,r2
 8029864:	e0bffa17 	ldw	r2,-24(fp)
 8029868:	0085c83a 	sub	r2,zero,r2
 802986c:	18800015 	stw	r2,0(r3)
    return -1;
 8029870:	00bfffc4 	movi	r2,-1
 8029874:	00000106 	br	802987c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8029878:	e0bff917 	ldw	r2,-28(fp)
}
 802987c:	e037883a 	mov	sp,fp
 8029880:	dfc00117 	ldw	ra,4(sp)
 8029884:	df000017 	ldw	fp,0(sp)
 8029888:	dec00204 	addi	sp,sp,8
 802988c:	f800283a 	ret

08029890 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8029890:	deffff04 	addi	sp,sp,-4
 8029894:	df000015 	stw	fp,0(sp)
 8029898:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 802989c:	000170fa 	wrctl	ienable,zero
}
 80298a0:	0001883a 	nop
 80298a4:	e037883a 	mov	sp,fp
 80298a8:	df000017 	ldw	fp,0(sp)
 80298ac:	dec00104 	addi	sp,sp,4
 80298b0:	f800283a 	ret

080298b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80298b4:	defffb04 	addi	sp,sp,-20
 80298b8:	dfc00415 	stw	ra,16(sp)
 80298bc:	df000315 	stw	fp,12(sp)
 80298c0:	df000304 	addi	fp,sp,12
 80298c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80298c8:	d0a00417 	ldw	r2,-32752(gp)
 80298cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80298d0:	00003106 	br	8029998 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80298d4:	e0bffd17 	ldw	r2,-12(fp)
 80298d8:	10800217 	ldw	r2,8(r2)
 80298dc:	1009883a 	mov	r4,r2
 80298e0:	80233540 	call	8023354 <strlen>
 80298e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80298e8:	e0bffd17 	ldw	r2,-12(fp)
 80298ec:	10c00217 	ldw	r3,8(r2)
 80298f0:	e0bffe17 	ldw	r2,-8(fp)
 80298f4:	10bfffc4 	addi	r2,r2,-1
 80298f8:	1885883a 	add	r2,r3,r2
 80298fc:	10800003 	ldbu	r2,0(r2)
 8029900:	10803fcc 	andi	r2,r2,255
 8029904:	1080201c 	xori	r2,r2,128
 8029908:	10bfe004 	addi	r2,r2,-128
 802990c:	10800bd8 	cmpnei	r2,r2,47
 8029910:	1000031e 	bne	r2,zero,8029920 <alt_find_file+0x6c>
    {
      len -= 1;
 8029914:	e0bffe17 	ldw	r2,-8(fp)
 8029918:	10bfffc4 	addi	r2,r2,-1
 802991c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8029920:	e0bffe17 	ldw	r2,-8(fp)
 8029924:	e0ffff17 	ldw	r3,-4(fp)
 8029928:	1885883a 	add	r2,r3,r2
 802992c:	10800003 	ldbu	r2,0(r2)
 8029930:	10803fcc 	andi	r2,r2,255
 8029934:	1080201c 	xori	r2,r2,128
 8029938:	10bfe004 	addi	r2,r2,-128
 802993c:	10800be0 	cmpeqi	r2,r2,47
 8029940:	1000081e 	bne	r2,zero,8029964 <alt_find_file+0xb0>
 8029944:	e0bffe17 	ldw	r2,-8(fp)
 8029948:	e0ffff17 	ldw	r3,-4(fp)
 802994c:	1885883a 	add	r2,r3,r2
 8029950:	10800003 	ldbu	r2,0(r2)
 8029954:	10803fcc 	andi	r2,r2,255
 8029958:	1080201c 	xori	r2,r2,128
 802995c:	10bfe004 	addi	r2,r2,-128
 8029960:	10000a1e 	bne	r2,zero,802998c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8029964:	e0bffd17 	ldw	r2,-12(fp)
 8029968:	10800217 	ldw	r2,8(r2)
 802996c:	e0fffe17 	ldw	r3,-8(fp)
 8029970:	180d883a 	mov	r6,r3
 8029974:	e17fff17 	ldw	r5,-4(fp)
 8029978:	1009883a 	mov	r4,r2
 802997c:	8029b680 	call	8029b68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8029980:	1000021e 	bne	r2,zero,802998c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8029984:	e0bffd17 	ldw	r2,-12(fp)
 8029988:	00000706 	br	80299a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 802998c:	e0bffd17 	ldw	r2,-12(fp)
 8029990:	10800017 	ldw	r2,0(r2)
 8029994:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8029998:	e0fffd17 	ldw	r3,-12(fp)
 802999c:	d0a00404 	addi	r2,gp,-32752
 80299a0:	18bfcc1e 	bne	r3,r2,80298d4 <__alt_data_end+0xfffea4d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80299a4:	0005883a 	mov	r2,zero
}
 80299a8:	e037883a 	mov	sp,fp
 80299ac:	dfc00117 	ldw	ra,4(sp)
 80299b0:	df000017 	ldw	fp,0(sp)
 80299b4:	dec00204 	addi	sp,sp,8
 80299b8:	f800283a 	ret

080299bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80299bc:	defffa04 	addi	sp,sp,-24
 80299c0:	dfc00515 	stw	ra,20(sp)
 80299c4:	df000415 	stw	fp,16(sp)
 80299c8:	dc000315 	stw	r16,12(sp)
 80299cc:	df000404 	addi	fp,sp,16
 80299d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80299d4:	00bffa04 	movi	r2,-24
 80299d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80299dc:	e03ffc15 	stw	zero,-16(fp)
 80299e0:	00001d06 	br	8029a58 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80299e4:	040200f4 	movhi	r16,2051
 80299e8:	842a4604 	addi	r16,r16,-22248
 80299ec:	e0bffc17 	ldw	r2,-16(fp)
 80299f0:	01400304 	movi	r5,12
 80299f4:	1009883a 	mov	r4,r2
 80299f8:	80212ac0 	call	80212ac <__mulsi3>
 80299fc:	8085883a 	add	r2,r16,r2
 8029a00:	10800017 	ldw	r2,0(r2)
 8029a04:	1000111e 	bne	r2,zero,8029a4c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8029a08:	040200f4 	movhi	r16,2051
 8029a0c:	842a4604 	addi	r16,r16,-22248
 8029a10:	e0bffc17 	ldw	r2,-16(fp)
 8029a14:	01400304 	movi	r5,12
 8029a18:	1009883a 	mov	r4,r2
 8029a1c:	80212ac0 	call	80212ac <__mulsi3>
 8029a20:	8085883a 	add	r2,r16,r2
 8029a24:	e0fffe17 	ldw	r3,-8(fp)
 8029a28:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8029a2c:	d0e00817 	ldw	r3,-32736(gp)
 8029a30:	e0bffc17 	ldw	r2,-16(fp)
 8029a34:	1880020e 	bge	r3,r2,8029a40 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8029a38:	e0bffc17 	ldw	r2,-16(fp)
 8029a3c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8029a40:	e0bffc17 	ldw	r2,-16(fp)
 8029a44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8029a48:	00000606 	br	8029a64 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8029a4c:	e0bffc17 	ldw	r2,-16(fp)
 8029a50:	10800044 	addi	r2,r2,1
 8029a54:	e0bffc15 	stw	r2,-16(fp)
 8029a58:	e0bffc17 	ldw	r2,-16(fp)
 8029a5c:	10800810 	cmplti	r2,r2,32
 8029a60:	103fe01e 	bne	r2,zero,80299e4 <__alt_data_end+0xfffea5e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8029a64:	e0bffd17 	ldw	r2,-12(fp)
}
 8029a68:	e6ffff04 	addi	sp,fp,-4
 8029a6c:	dfc00217 	ldw	ra,8(sp)
 8029a70:	df000117 	ldw	fp,4(sp)
 8029a74:	dc000017 	ldw	r16,0(sp)
 8029a78:	dec00304 	addi	sp,sp,12
 8029a7c:	f800283a 	ret

08029a80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8029a80:	defffe04 	addi	sp,sp,-8
 8029a84:	df000115 	stw	fp,4(sp)
 8029a88:	df000104 	addi	fp,sp,4
 8029a8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8029a90:	e0bfff17 	ldw	r2,-4(fp)
 8029a94:	10bffe84 	addi	r2,r2,-6
 8029a98:	10c00428 	cmpgeui	r3,r2,16
 8029a9c:	18001a1e 	bne	r3,zero,8029b08 <alt_exception_cause_generated_bad_addr+0x88>
 8029aa0:	100690ba 	slli	r3,r2,2
 8029aa4:	008200f4 	movhi	r2,2051
 8029aa8:	10a6ae04 	addi	r2,r2,-25928
 8029aac:	1885883a 	add	r2,r3,r2
 8029ab0:	10800017 	ldw	r2,0(r2)
 8029ab4:	1000683a 	jmp	r2
 8029ab8:	08029af8 	rdprs	zero,at,2667
 8029abc:	08029af8 	rdprs	zero,at,2667
 8029ac0:	08029b08 	cmpgei	zero,at,2668
 8029ac4:	08029b08 	cmpgei	zero,at,2668
 8029ac8:	08029b08 	cmpgei	zero,at,2668
 8029acc:	08029af8 	rdprs	zero,at,2667
 8029ad0:	08029b00 	call	8029b0 <__alt_mem_new_sdram_controller_0-0x37fd650>
 8029ad4:	08029b08 	cmpgei	zero,at,2668
 8029ad8:	08029af8 	rdprs	zero,at,2667
 8029adc:	08029af8 	rdprs	zero,at,2667
 8029ae0:	08029b08 	cmpgei	zero,at,2668
 8029ae4:	08029af8 	rdprs	zero,at,2667
 8029ae8:	08029b00 	call	8029b0 <__alt_mem_new_sdram_controller_0-0x37fd650>
 8029aec:	08029b08 	cmpgei	zero,at,2668
 8029af0:	08029b08 	cmpgei	zero,at,2668
 8029af4:	08029af8 	rdprs	zero,at,2667
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8029af8:	00800044 	movi	r2,1
 8029afc:	00000306 	br	8029b0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8029b00:	0005883a 	mov	r2,zero
 8029b04:	00000106 	br	8029b0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8029b08:	0005883a 	mov	r2,zero
  }
}
 8029b0c:	e037883a 	mov	sp,fp
 8029b10:	df000017 	ldw	fp,0(sp)
 8029b14:	dec00104 	addi	sp,sp,4
 8029b18:	f800283a 	ret

08029b1c <atexit>:
 8029b1c:	200b883a 	mov	r5,r4
 8029b20:	000f883a 	mov	r7,zero
 8029b24:	000d883a 	mov	r6,zero
 8029b28:	0009883a 	mov	r4,zero
 8029b2c:	8029be41 	jmpi	8029be4 <__register_exitproc>

08029b30 <exit>:
 8029b30:	defffe04 	addi	sp,sp,-8
 8029b34:	000b883a 	mov	r5,zero
 8029b38:	dc000015 	stw	r16,0(sp)
 8029b3c:	dfc00115 	stw	ra,4(sp)
 8029b40:	2021883a 	mov	r16,r4
 8029b44:	8029cfc0 	call	8029cfc <__call_exitprocs>
 8029b48:	008200f4 	movhi	r2,2051
 8029b4c:	10aee204 	addi	r2,r2,-17528
 8029b50:	11000017 	ldw	r4,0(r2)
 8029b54:	20800f17 	ldw	r2,60(r4)
 8029b58:	10000126 	beq	r2,zero,8029b60 <exit+0x30>
 8029b5c:	103ee83a 	callr	r2
 8029b60:	8009883a 	mov	r4,r16
 8029b64:	8029e7c0 	call	8029e7c <_exit>

08029b68 <memcmp>:
 8029b68:	01c000c4 	movi	r7,3
 8029b6c:	3980192e 	bgeu	r7,r6,8029bd4 <memcmp+0x6c>
 8029b70:	2144b03a 	or	r2,r4,r5
 8029b74:	11c4703a 	and	r2,r2,r7
 8029b78:	10000f26 	beq	r2,zero,8029bb8 <memcmp+0x50>
 8029b7c:	20800003 	ldbu	r2,0(r4)
 8029b80:	28c00003 	ldbu	r3,0(r5)
 8029b84:	10c0151e 	bne	r2,r3,8029bdc <memcmp+0x74>
 8029b88:	31bfff84 	addi	r6,r6,-2
 8029b8c:	01ffffc4 	movi	r7,-1
 8029b90:	00000406 	br	8029ba4 <memcmp+0x3c>
 8029b94:	20800003 	ldbu	r2,0(r4)
 8029b98:	28c00003 	ldbu	r3,0(r5)
 8029b9c:	31bfffc4 	addi	r6,r6,-1
 8029ba0:	10c00e1e 	bne	r2,r3,8029bdc <memcmp+0x74>
 8029ba4:	21000044 	addi	r4,r4,1
 8029ba8:	29400044 	addi	r5,r5,1
 8029bac:	31fff91e 	bne	r6,r7,8029b94 <__alt_data_end+0xfffea794>
 8029bb0:	0005883a 	mov	r2,zero
 8029bb4:	f800283a 	ret
 8029bb8:	20c00017 	ldw	r3,0(r4)
 8029bbc:	28800017 	ldw	r2,0(r5)
 8029bc0:	18bfee1e 	bne	r3,r2,8029b7c <__alt_data_end+0xfffea77c>
 8029bc4:	31bfff04 	addi	r6,r6,-4
 8029bc8:	21000104 	addi	r4,r4,4
 8029bcc:	29400104 	addi	r5,r5,4
 8029bd0:	39bff936 	bltu	r7,r6,8029bb8 <__alt_data_end+0xfffea7b8>
 8029bd4:	303fe91e 	bne	r6,zero,8029b7c <__alt_data_end+0xfffea77c>
 8029bd8:	003ff506 	br	8029bb0 <__alt_data_end+0xfffea7b0>
 8029bdc:	10c5c83a 	sub	r2,r2,r3
 8029be0:	f800283a 	ret

08029be4 <__register_exitproc>:
 8029be4:	defffa04 	addi	sp,sp,-24
 8029be8:	dc000315 	stw	r16,12(sp)
 8029bec:	040200f4 	movhi	r16,2051
 8029bf0:	842ee204 	addi	r16,r16,-17528
 8029bf4:	80c00017 	ldw	r3,0(r16)
 8029bf8:	dc400415 	stw	r17,16(sp)
 8029bfc:	dfc00515 	stw	ra,20(sp)
 8029c00:	18805217 	ldw	r2,328(r3)
 8029c04:	2023883a 	mov	r17,r4
 8029c08:	10003726 	beq	r2,zero,8029ce8 <__register_exitproc+0x104>
 8029c0c:	10c00117 	ldw	r3,4(r2)
 8029c10:	010007c4 	movi	r4,31
 8029c14:	20c00e16 	blt	r4,r3,8029c50 <__register_exitproc+0x6c>
 8029c18:	1a000044 	addi	r8,r3,1
 8029c1c:	8800221e 	bne	r17,zero,8029ca8 <__register_exitproc+0xc4>
 8029c20:	18c00084 	addi	r3,r3,2
 8029c24:	18c7883a 	add	r3,r3,r3
 8029c28:	18c7883a 	add	r3,r3,r3
 8029c2c:	12000115 	stw	r8,4(r2)
 8029c30:	10c7883a 	add	r3,r2,r3
 8029c34:	19400015 	stw	r5,0(r3)
 8029c38:	0005883a 	mov	r2,zero
 8029c3c:	dfc00517 	ldw	ra,20(sp)
 8029c40:	dc400417 	ldw	r17,16(sp)
 8029c44:	dc000317 	ldw	r16,12(sp)
 8029c48:	dec00604 	addi	sp,sp,24
 8029c4c:	f800283a 	ret
 8029c50:	00800034 	movhi	r2,0
 8029c54:	10800004 	addi	r2,r2,0
 8029c58:	10002626 	beq	r2,zero,8029cf4 <__register_exitproc+0x110>
 8029c5c:	01006404 	movi	r4,400
 8029c60:	d9400015 	stw	r5,0(sp)
 8029c64:	d9800115 	stw	r6,4(sp)
 8029c68:	d9c00215 	stw	r7,8(sp)
 8029c6c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8029c70:	d9400017 	ldw	r5,0(sp)
 8029c74:	d9800117 	ldw	r6,4(sp)
 8029c78:	d9c00217 	ldw	r7,8(sp)
 8029c7c:	10001d26 	beq	r2,zero,8029cf4 <__register_exitproc+0x110>
 8029c80:	81000017 	ldw	r4,0(r16)
 8029c84:	10000115 	stw	zero,4(r2)
 8029c88:	02000044 	movi	r8,1
 8029c8c:	22405217 	ldw	r9,328(r4)
 8029c90:	0007883a 	mov	r3,zero
 8029c94:	12400015 	stw	r9,0(r2)
 8029c98:	20805215 	stw	r2,328(r4)
 8029c9c:	10006215 	stw	zero,392(r2)
 8029ca0:	10006315 	stw	zero,396(r2)
 8029ca4:	883fde26 	beq	r17,zero,8029c20 <__alt_data_end+0xfffea820>
 8029ca8:	18c9883a 	add	r4,r3,r3
 8029cac:	2109883a 	add	r4,r4,r4
 8029cb0:	1109883a 	add	r4,r2,r4
 8029cb4:	21802215 	stw	r6,136(r4)
 8029cb8:	01800044 	movi	r6,1
 8029cbc:	12406217 	ldw	r9,392(r2)
 8029cc0:	30cc983a 	sll	r6,r6,r3
 8029cc4:	4992b03a 	or	r9,r9,r6
 8029cc8:	12406215 	stw	r9,392(r2)
 8029ccc:	21c04215 	stw	r7,264(r4)
 8029cd0:	01000084 	movi	r4,2
 8029cd4:	893fd21e 	bne	r17,r4,8029c20 <__alt_data_end+0xfffea820>
 8029cd8:	11006317 	ldw	r4,396(r2)
 8029cdc:	218cb03a 	or	r6,r4,r6
 8029ce0:	11806315 	stw	r6,396(r2)
 8029ce4:	003fce06 	br	8029c20 <__alt_data_end+0xfffea820>
 8029ce8:	18805304 	addi	r2,r3,332
 8029cec:	18805215 	stw	r2,328(r3)
 8029cf0:	003fc606 	br	8029c0c <__alt_data_end+0xfffea80c>
 8029cf4:	00bfffc4 	movi	r2,-1
 8029cf8:	003fd006 	br	8029c3c <__alt_data_end+0xfffea83c>

08029cfc <__call_exitprocs>:
 8029cfc:	defff504 	addi	sp,sp,-44
 8029d00:	df000915 	stw	fp,36(sp)
 8029d04:	dd400615 	stw	r21,24(sp)
 8029d08:	dc800315 	stw	r18,12(sp)
 8029d0c:	dfc00a15 	stw	ra,40(sp)
 8029d10:	ddc00815 	stw	r23,32(sp)
 8029d14:	dd800715 	stw	r22,28(sp)
 8029d18:	dd000515 	stw	r20,20(sp)
 8029d1c:	dcc00415 	stw	r19,16(sp)
 8029d20:	dc400215 	stw	r17,8(sp)
 8029d24:	dc000115 	stw	r16,4(sp)
 8029d28:	d9000015 	stw	r4,0(sp)
 8029d2c:	2839883a 	mov	fp,r5
 8029d30:	04800044 	movi	r18,1
 8029d34:	057fffc4 	movi	r21,-1
 8029d38:	008200f4 	movhi	r2,2051
 8029d3c:	10aee204 	addi	r2,r2,-17528
 8029d40:	12000017 	ldw	r8,0(r2)
 8029d44:	45005217 	ldw	r20,328(r8)
 8029d48:	44c05204 	addi	r19,r8,328
 8029d4c:	a0001c26 	beq	r20,zero,8029dc0 <__call_exitprocs+0xc4>
 8029d50:	a0800117 	ldw	r2,4(r20)
 8029d54:	15ffffc4 	addi	r23,r2,-1
 8029d58:	b8000d16 	blt	r23,zero,8029d90 <__call_exitprocs+0x94>
 8029d5c:	14000044 	addi	r16,r2,1
 8029d60:	8421883a 	add	r16,r16,r16
 8029d64:	8421883a 	add	r16,r16,r16
 8029d68:	84402004 	addi	r17,r16,128
 8029d6c:	a463883a 	add	r17,r20,r17
 8029d70:	a421883a 	add	r16,r20,r16
 8029d74:	e0001e26 	beq	fp,zero,8029df0 <__call_exitprocs+0xf4>
 8029d78:	80804017 	ldw	r2,256(r16)
 8029d7c:	e0801c26 	beq	fp,r2,8029df0 <__call_exitprocs+0xf4>
 8029d80:	bdffffc4 	addi	r23,r23,-1
 8029d84:	843fff04 	addi	r16,r16,-4
 8029d88:	8c7fff04 	addi	r17,r17,-4
 8029d8c:	bd7ff91e 	bne	r23,r21,8029d74 <__alt_data_end+0xfffea974>
 8029d90:	00800034 	movhi	r2,0
 8029d94:	10800004 	addi	r2,r2,0
 8029d98:	10000926 	beq	r2,zero,8029dc0 <__call_exitprocs+0xc4>
 8029d9c:	a0800117 	ldw	r2,4(r20)
 8029da0:	1000301e 	bne	r2,zero,8029e64 <__call_exitprocs+0x168>
 8029da4:	a0800017 	ldw	r2,0(r20)
 8029da8:	10003226 	beq	r2,zero,8029e74 <__call_exitprocs+0x178>
 8029dac:	a009883a 	mov	r4,r20
 8029db0:	98800015 	stw	r2,0(r19)
 8029db4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8029db8:	9d000017 	ldw	r20,0(r19)
 8029dbc:	a03fe41e 	bne	r20,zero,8029d50 <__alt_data_end+0xfffea950>
 8029dc0:	dfc00a17 	ldw	ra,40(sp)
 8029dc4:	df000917 	ldw	fp,36(sp)
 8029dc8:	ddc00817 	ldw	r23,32(sp)
 8029dcc:	dd800717 	ldw	r22,28(sp)
 8029dd0:	dd400617 	ldw	r21,24(sp)
 8029dd4:	dd000517 	ldw	r20,20(sp)
 8029dd8:	dcc00417 	ldw	r19,16(sp)
 8029ddc:	dc800317 	ldw	r18,12(sp)
 8029de0:	dc400217 	ldw	r17,8(sp)
 8029de4:	dc000117 	ldw	r16,4(sp)
 8029de8:	dec00b04 	addi	sp,sp,44
 8029dec:	f800283a 	ret
 8029df0:	a0800117 	ldw	r2,4(r20)
 8029df4:	80c00017 	ldw	r3,0(r16)
 8029df8:	10bfffc4 	addi	r2,r2,-1
 8029dfc:	15c01426 	beq	r2,r23,8029e50 <__call_exitprocs+0x154>
 8029e00:	80000015 	stw	zero,0(r16)
 8029e04:	183fde26 	beq	r3,zero,8029d80 <__alt_data_end+0xfffea980>
 8029e08:	95c8983a 	sll	r4,r18,r23
 8029e0c:	a0806217 	ldw	r2,392(r20)
 8029e10:	a5800117 	ldw	r22,4(r20)
 8029e14:	2084703a 	and	r2,r4,r2
 8029e18:	10000b26 	beq	r2,zero,8029e48 <__call_exitprocs+0x14c>
 8029e1c:	a0806317 	ldw	r2,396(r20)
 8029e20:	2088703a 	and	r4,r4,r2
 8029e24:	20000c1e 	bne	r4,zero,8029e58 <__call_exitprocs+0x15c>
 8029e28:	89400017 	ldw	r5,0(r17)
 8029e2c:	d9000017 	ldw	r4,0(sp)
 8029e30:	183ee83a 	callr	r3
 8029e34:	a0800117 	ldw	r2,4(r20)
 8029e38:	15bfbf1e 	bne	r2,r22,8029d38 <__alt_data_end+0xfffea938>
 8029e3c:	98800017 	ldw	r2,0(r19)
 8029e40:	153fcf26 	beq	r2,r20,8029d80 <__alt_data_end+0xfffea980>
 8029e44:	003fbc06 	br	8029d38 <__alt_data_end+0xfffea938>
 8029e48:	183ee83a 	callr	r3
 8029e4c:	003ff906 	br	8029e34 <__alt_data_end+0xfffeaa34>
 8029e50:	a5c00115 	stw	r23,4(r20)
 8029e54:	003feb06 	br	8029e04 <__alt_data_end+0xfffeaa04>
 8029e58:	89000017 	ldw	r4,0(r17)
 8029e5c:	183ee83a 	callr	r3
 8029e60:	003ff406 	br	8029e34 <__alt_data_end+0xfffeaa34>
 8029e64:	a0800017 	ldw	r2,0(r20)
 8029e68:	a027883a 	mov	r19,r20
 8029e6c:	1029883a 	mov	r20,r2
 8029e70:	003fb606 	br	8029d4c <__alt_data_end+0xfffea94c>
 8029e74:	0005883a 	mov	r2,zero
 8029e78:	003ffb06 	br	8029e68 <__alt_data_end+0xfffeaa68>

08029e7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8029e7c:	defffd04 	addi	sp,sp,-12
 8029e80:	df000215 	stw	fp,8(sp)
 8029e84:	df000204 	addi	fp,sp,8
 8029e88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8029e8c:	0001883a 	nop
 8029e90:	e0bfff17 	ldw	r2,-4(fp)
 8029e94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8029e98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8029e9c:	10000226 	beq	r2,zero,8029ea8 <_exit+0x2c>
    ALT_SIM_FAIL();
 8029ea0:	002af070 	cmpltui	zero,zero,43969
 8029ea4:	00000106 	br	8029eac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8029ea8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8029eac:	003fff06 	br	8029eac <__alt_data_end+0xfffeaaac>
