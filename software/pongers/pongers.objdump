
pongers.elf:     file format elf32-littlenios2
pongers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08040230

Program Header:
    LOAD off    0x00001000 vaddr 0x08040000 paddr 0x08040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08040020 paddr 0x08040020 align 2**12
         filesz 0x00013314 memsz 0x00013314 flags r-x
    LOAD off    0x00014334 vaddr 0x08053334 paddr 0x08054efc align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x00016ac4 vaddr 0x08056ac4 paddr 0x08056ac4 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08040000  08040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08040020  08040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012ba4  08040230  08040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000560  08052dd4  08052dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  08053334  08054efc  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  08056ac4  08056ac4  00016ac4  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  00015efc  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08056c44  08056c44  00015efc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015efc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f48  00000000  00000000  00015f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023548  00000000  00000000  00016e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000930f  00000000  00000000  0003a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be18  00000000  00000000  000436bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002894  00000000  00000000  0004f4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000041cc  00000000  00000000  00051d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017c68  00000000  00000000  00055f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006dba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e0  00000000  00000000  0006dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00072f46  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00072f49  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00072f52  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00072f53  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00072f54  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00072f58  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00072f5c  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00072f60  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00072f6b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00072f76  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00072f81  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000016  00000000  00000000  00072f8a  2**0
                  CONTENTS, READONLY
 30 .jdi          00003d27  00000000  00000000  00072fa0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a858f  00000000  00000000  00076cc7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08040000 l    d  .entry	00000000 .entry
08040020 l    d  .exceptions	00000000 .exceptions
08040230 l    d  .text	00000000 .text
08052dd4 l    d  .rodata	00000000 .rodata
08053334 l    d  .rwdata	00000000 .rwdata
08056ac4 l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08056c44 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pongers_bsp//obj/HAL/src/crt0.o
08040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SPI_test.c
00000000 l    df *ABS*	00000000 pongers.c
0804026c l     F .text	00000048 pio_isr
08040318 l     F .text	00000060 alarm_callback.3080
08056b04 l     O .bss	00000018 alarm.3082
0804132c l     F .text	0000004c clear.3121
08041828 l     F .text	0000005c pause_menu.3167
08041884 l     F .text	0000005c clear_pause_menu.3170
08041674 l     F .text	0000014c run_game_tick.3155
08040648 l     F .text	000000c8 cheat_code.3084
08040710 l     F .text	00000338 update_paddle.3089
08040a48 l     F .text	00000038 sign.3103
08040a80 l     F .text	00000054 collision_sound.3105
08040ad4 l     F .text	00000858 update_ball.3108
08041378 l     F .text	00000174 draw.3128
080414ec l     F .text	00000094 get_user_input.3135
08041580 l     F .text	0000007c reset_game.3144
080415fc l     F .text	00000078 check_win.3148
080417c0 l     F .text	00000034 music_on.3162
080417f4 l     F .text	00000034 music_off.3164
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 tramp.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080530da l     O .rodata	00000010 zeroes.4389
080530ea l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
08045ee8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 findfp.c
08047798 l     F .text	00000008 __fp_unlock
080477ac l     F .text	0000019c __sinit.part.1
08047948 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08053334 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08053778 l     O .rwdata	00000020 lc_ctype_charset
08053758 l     O .rwdata	00000020 lc_message_charset
08053798 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0805311c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08053240 l     O .rodata	00000010 zeroes.4333
08053250 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0804eb64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0804ec78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0804eca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0804f038 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0804f120 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0804f20c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0804f3e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08054ee8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0804f830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0804f96c l     F .text	00000034 alt_dev_reg
08053d80 l     O .rwdata	00001060 jtag_uart_0
08054de0 l     O .rwdata	0000003c modular_adc_0
08054e1c l     O .rwdata	00000048 video_character_buffer_with_dma_0
08054e64 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0804ff0c l     F .text	0000020c altera_avalon_jtag_uart_irq
08050118 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08050750 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
08050844 l     F .text	000000a8 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08052180 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0805246c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
080525cc l     F .text	0000003c alt_get_errno
08052608 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08056b00 g     O .bss	00000004 alt_instruction_exception_handler
08049d28 g     F .text	00000074 _mprec_log10
08050ae4 g     F .text	00000050 adc_stop
08049e14 g     F .text	0000008c __any_on
0804c9f0 g     F .text	00000054 _isatty_r
08053128 g     O .rodata	00000028 __mprec_tinytens
0804f324 g     F .text	0000007c alt_main
080519cc g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
080439fc g     F .text	000000c0 _puts_r
08056b44 g     O .bss	00000100 alt_irq
0804c718 g     F .text	00000060 _lseek_r
08054efc g       *ABS*	00000000 __flash_rwdata_start
0804deb0 g     F .text	00000088 .hidden __eqdf2
08056c44 g       *ABS*	00000000 __alt_heap_start
0804a5a4 g     F .text	0000005c __sseek
08047af8 g     F .text	00000010 __sinit
08050f38 g     F .text	000000fc alt_up_char_buffer_string
08048198 g     F .text	0000007c _setlocale_r
08047950 g     F .text	00000078 __sfmoreglue
0804f3c4 g     F .text	00000024 __malloc_unlock
08050e6c g     F .text	000000cc alt_up_char_buffer_draw
08048b64 g     F .text	0000015c memmove
08047ae0 g     F .text	00000018 _cleanup
08048de8 g     F .text	000000a8 _Balloc
08041e78 g     F .text	00000070 .hidden __fixsfsi
080510cc g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
080429a8 g     F .text	000000dc .hidden __gtdf2
08052850 g     F .text	00000024 altera_nios2_gen2_irq_init
08051090 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08040000 g     F .entry	0000000c __reset
08050ca8 g     F .text	00000048 adc_interrupt_disable
08040020 g       *ABS*	00000000 __flash_exceptions_start
0804c994 g     F .text	0000005c _fstat_r
08056ae4 g     O .bss	00000004 errno
0804a520 g     F .text	00000008 __seofread
0804a8b4 g     F .text	000013a0 ___svfiprintf_internal_r
08050998 g     F .text	00000074 altera_modular_adc_init
08056af0 g     O .bss	00000004 alt_argv
0805ceb8 g       *ABS*	00000000 _gp
0804f800 g     F .text	00000030 usleep
08041994 g     F .text	000004e4 .hidden __subsf3
08051274 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
08053c00 g     O .rwdata	00000180 alt_fd_list
08052320 g     F .text	00000090 alt_find_dev
080438b4 g     F .text	00000148 memcpy
08051034 g     F .text	0000005c alt_up_char_buffer_clear
080477a0 g     F .text	0000000c _cleanup_r
0804e8b4 g     F .text	000000dc .hidden __floatsidf
08050bac g     F .text	0000003c adc_set_mode_run_continuously
08052550 g     F .text	0000007c alt_io_redirect
08042a84 g     F .text	000000f4 .hidden __ltdf2
08052dd4 g       *ABS*	00000000 __DTOR_END__
08043abc g     F .text	00000014 puts
080523d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0804a404 g     F .text	00000074 __fpclassifyd
08049c84 g     F .text	000000a4 __ratio
08051330 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08050310 g     F .text	0000021c altera_avalon_jtag_uart_read
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080437f8 g     F .text	00000064 .hidden __udivsi3
0804f074 g     F .text	000000ac isatty
08053178 g     O .rodata	000000c8 __mprec_tens
0805179c g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
08048214 g     F .text	0000000c __locale_charset
08056ac8 g     O .bss	00000004 main_menu_flag
08056ae0 g     O .bss	00000004 __malloc_top_pad
08054ec0 g     O .rwdata	00000004 __mb_cur_max
08048244 g     F .text	0000000c _localeconv_r
0804921c g     F .text	0000003c __i2b
08047b48 g     F .text	000004c8 __sfvwrite_r
0804a478 g     F .text	00000054 _sbrk_r
08051d00 g     F .text	000000c0 helper_plot_pixel
0804c934 g     F .text	00000060 _read_r
08054ef4 g     O .rwdata	00000008 altera_modular_adc_list
08054edc g     O .rwdata	00000004 alt_max_fd
0804bf38 g     F .text	000000f0 _fclose_r
0804c2b4 g     F .text	00000030 fflush
08056adc g     O .bss	00000004 __malloc_max_sbrked_mem
080433e4 g     F .text	00000110 .hidden __extendsfdf2
0804d604 g     F .text	000008ac .hidden __adddf3
08049a2c g     F .text	0000010c __b2d
08051364 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
0804d040 g     F .text	000005c4 .hidden __umoddi3
0804f248 g     F .text	000000dc lseek
08054eb8 g     O .rwdata	00000004 _global_impure_ptr
08049ea0 g     F .text	00000564 _realloc_r
08056c44 g       *ABS*	00000000 __bss_end
0804ef48 g     F .text	000000f0 alt_iic_isr_register
080514a0 g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
0804f6f8 g     F .text	00000108 alt_tick
0804ca44 g     F .text	000005fc .hidden __udivdi3
08050d74 g     F .text	0000003c adc_wait_for_interrupt
08053150 g     O .rodata	00000028 __mprec_bigtens
08049000 g     F .text	00000104 __s2b
0804e990 g     F .text	000000a8 .hidden __floatunsidf
0804976c g     F .text	00000060 __mcmp
08047b18 g     F .text	00000018 __fp_lock_all
0804eefc g     F .text	0000004c alt_ic_irq_enabled
0804f65c g     F .text	0000009c alt_alarm_stop
08056ae8 g     O .bss	00000004 alt_irq_active
080400fc g     F .exceptions	000000d4 alt_irq_handler
08053bd8 g     O .rwdata	00000028 alt_dev_null
08050b6c g     F .text	00000040 adc_set_mode_run_once
08052160 g     F .text	00000020 alt_dcache_flush_all
08049104 g     F .text	00000068 __hi0bits
08051c38 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0804e834 g     F .text	00000080 .hidden __fixdfsi
08054efc g       *ABS*	00000000 __ram_rwdata_end
08054ed4 g     O .rwdata	00000008 alt_dev_list
0804f86c g     F .text	00000100 write
08051dc0 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
08053334 g       *ABS*	00000000 __ram_rodata_end
0804ece0 g     F .text	000000b8 fstat
08042a84 g     F .text	000000f4 .hidden __ledf2
080494e4 g     F .text	00000140 __pow5mult
08050b34 g     F .text	00000038 adc_start
08056ad4 g     O .bss	00000004 __nlocale_changed
0804385c g     F .text	00000058 .hidden __umodsi3
08056c44 g       *ABS*	00000000 end
08050db0 g     F .text	00000080 alt_up_char_buffer_init
0804fe4c g     F .text	000000c0 altera_avalon_jtag_uart_init
080401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08041908 g     F .text	0000008c .hidden __trampoline_setup
08052dd4 g       *ABS*	00000000 __CTOR_LIST__
080680a0 g       *ABS*	00000000 __alt_stack_pointer
080507c8 g     F .text	0000007c alt_avalon_timer_sc_init
0804369c g     F .text	00000064 .hidden __clzsi2
0805052c g     F .text	00000224 altera_avalon_jtag_uart_write
08047b08 g     F .text	00000004 __sfp_lock_acquire
08048a80 g     F .text	000000e4 memchr
08043ad0 g     F .text	00000058 _sprintf_r
0804c408 g     F .text	00000310 _free_r
08048220 g     F .text	00000010 __locale_mb_cur_max
08052c20 g     F .text	00000180 __call_exitprocs
08056ad0 g     O .bss	00000004 __mlocale_changed
08054ec4 g     O .rwdata	00000004 __malloc_sbrk_base
08040230 g     F .text	0000003c _start
08056af8 g     O .bss	00000004 _alt_tick_rate
08049624 g     F .text	00000148 __lshift
08056afc g     O .bss	00000004 _alt_nticks
0804f424 g     F .text	00000104 read
0804f9d8 g     F .text	00000310 alt_sys_init
0804a6e4 g     F .text	000001d0 __ssprint_r
08052b08 g     F .text	00000118 __register_exitproc
08049258 g     F .text	0000028c __multiply
080501b8 g     F .text	00000068 altera_avalon_jtag_uart_close
080418e0 g     F .text	00000028 .hidden __mulsi3
08053334 g       *ABS*	00000000 __ram_rwdata_start
08052dd4 g       *ABS*	00000000 __ram_rodata_start
08056b1c g     O .bss	00000028 __malloc_current_mallinfo
08049b38 g     F .text	0000014c __d2b
0804fce8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0805297c g     F .text	000000c4 alt_get_fd
08052008 g     F .text	00000158 alt_busy_sleep
0804be08 g     F .text	00000054 _close_r
08052a8c g     F .text	0000007c memcmp
0804fda8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08056c44 g       *ABS*	00000000 __alt_stack_base
0804fdf8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0804bcb4 g     F .text	00000154 __swsetup_r
08050c64 g     F .text	00000044 adc_interrupt_enable
08041fd8 g     F .text	000009d0 .hidden __divdf3
080479c8 g     F .text	00000118 __sfp
08049d9c g     F .text	00000078 __copybits
08056ac4 g     O .bss	00000004 pause_flag
080537d0 g     O .rwdata	00000408 __malloc_av_
08047b14 g     F .text	00000004 __sinit_lock_release
08042b78 g     F .text	0000086c .hidden __muldf3
0804a4cc g     F .text	00000054 __sread
08052874 g     F .text	00000108 alt_find_file
080521bc g     F .text	000000a4 alt_dev_llist_insert
0804f3a0 g     F .text	00000024 __malloc_lock
0804f5ac g     F .text	000000b0 sbrk
08043c2c g     F .text	000022bc ___svfprintf_internal_r
0804c258 g     F .text	0000005c _fflush_r
0804be5c g     F .text	000000dc _calloc_r
08056ac4 g       *ABS*	00000000 __bss_start
08048cc0 g     F .text	00000128 memset
08040378 g     F .text	000002d0 main
08056af4 g     O .bss	00000004 alt_envp
08056ad8 g     O .bss	00000004 __malloc_max_total_mem
080512d0 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08050e30 g     F .text	0000003c alt_up_char_buffer_open_dev
0804fd48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080508ec g     F .text	000000ac alt_adc_word_read
0804a600 g     F .text	00000008 __sclose
080680a0 g       *ABS*	00000000 __alt_heap_limit
0804c028 g     F .text	00000014 fclose
080434f4 g     F .text	000001a8 .hidden __truncdfsf2
08046110 g     F .text	00001688 _dtoa_r
08048274 g     F .text	0000080c _malloc_r
08054ee0 g     O .rwdata	00000004 alt_errno
08048010 g     F .text	000000c4 _fwalk
08043700 g     F .text	00000084 .hidden __divsi3
0804c2e4 g     F .text	00000124 _malloc_trim_r
08052dd4 g       *ABS*	00000000 __CTOR_END__
0804a608 g     F .text	000000dc strcmp
08052dd4 g       *ABS*	00000000 __flash_rodata_start
08052dd4 g       *ABS*	00000000 __DTOR_LIST__
080402b4 g     F .text	00000064 init_pio_interrupt
0804deb0 g     F .text	00000088 .hidden __nedf2
0804f9a0 g     F .text	00000038 alt_irq_init
0804f528 g     F .text	00000084 alt_release_fd
08043b28 g     F .text	0000006c sprintf
08052f92 g     O .rodata	00000100 .hidden __clz_tab
08056acc g     O .bss	00000004 _PathLocale
08052a40 g     F .text	00000014 atexit
0804bc54 g     F .text	00000060 _write_r
08048250 g     F .text	00000018 setlocale
08054ebc g     O .rwdata	00000004 _impure_ptr
08056aec g     O .bss	00000004 alt_argc
0804c03c g     F .text	0000021c __sflush_r
080522c0 g     F .text	00000060 _do_dtors
0804823c g     F .text	00000008 __locale_cjk_lang
08040020 g       .exceptions	00000000 alt_irq_entry
080499c8 g     F .text	00000064 __ulp
08047b30 g     F .text	00000018 __fp_unlock_all
08054ecc g     O .rwdata	00000008 alt_fs_list
08040020 g       *ABS*	00000000 __ram_exceptions_start
08048268 g     F .text	0000000c localeconv
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0804ed98 g     F .text	00000050 alt_ic_isr_register
08054efc g       *ABS*	00000000 _edata
08056c44 g       *ABS*	00000000 _end
08050d34 g     F .text	00000040 adc_interrupt_asserted
08040230 g       *ABS*	00000000 __ram_exceptions_end
08050220 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0804ee70 g     F .text	0000008c alt_ic_irq_disable
0804a528 g     F .text	0000007c __swrite
08054ec8 g     O .rwdata	00000004 __malloc_trim_threshold
08050cf0 g     F .text	00000044 adc_clear_interrupt_status
08048230 g     F .text	0000000c __locale_msgcharset
08052a54 g     F .text	00000038 exit
080480d4 g     F .text	000000c4 _fwalk_reent
08041ee8 g     F .text	000000f0 .hidden __floatunsisf
080497cc g     F .text	000001fc __mdiff
08043784 g     F .text	00000074 .hidden __modsi3
080680a0 g       *ABS*	00000000 __alt_data_end
08040020 g     F .exceptions	00000000 alt_exception
08047b0c g     F .text	00000004 __sfp_lock_release
08050aa4 g     F .text	00000040 altera_modular_adc_open
08052da0 g     F .text	00000034 _exit
0804ea38 g     F .text	0000012c alt_alarm_start
0804c778 g     F .text	000001bc __smakebuf_r
08043b94 g     F .text	00000098 strlen
080526f4 g     F .text	0000015c open
080429a8 g     F .text	000000dc .hidden __gedf2
08050be8 g     F .text	0000007c adc_recalibrate
080523b0 g     F .text	00000020 alt_icache_flush_all
08054ee4 g     O .rwdata	00000004 alt_priority_mask
0804ede8 g     F .text	00000088 alt_ic_irq_enable
0804df38 g     F .text	000008fc .hidden __subdf3
0804916c g     F .text	000000b0 __lo0bits
08054eec g     O .rwdata	00000008 alt_alarm_list
08052260 g     F .text	00000060 _do_ctors
0804eba0 g     F .text	000000d8 close
0804f188 g     F .text	00000084 alt_load
08050a0c g     F .text	00000098 alt_adc_register_callback
08047b10 g     F .text	00000004 __sinit_lock_acquire
08048eb8 g     F .text	00000148 __multadd
08048e90 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8040000:	00420134 	movhi	at,2052
    ori r1, r1, %lo(_start)
 8040004:	08408c14 	ori	at,at,560
    jmp r1
 8040008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 804002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 804003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 804004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 804005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 804006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 804007c:	10000326 	beq	r2,zero,804008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8040080:	20000226 	beq	r4,zero,804008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8040084:	80400fc0 	call	80400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8040088:	00000706 	br	80400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 804008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8040098:	80401d00 	call	80401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 804009c:	1000021e 	bne	r2,zero,80400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80400f8:	ef80083a 	eret

080400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80400fc:	defff904 	addi	sp,sp,-28
 8040100:	dfc00615 	stw	ra,24(sp)
 8040104:	df000515 	stw	fp,20(sp)
 8040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 804010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040110:	0005313a 	rdctl	r2,ipending
 8040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 804011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8040124:	00800044 	movi	r2,1
 8040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 804012c:	e0fffb17 	ldw	r3,-20(fp)
 8040130:	e0bffc17 	ldw	r2,-16(fp)
 8040134:	1884703a 	and	r2,r3,r2
 8040138:	10001426 	beq	r2,zero,804018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 804013c:	00820174 	movhi	r2,2053
 8040140:	109ad104 	addi	r2,r2,27460
 8040144:	e0fffd17 	ldw	r3,-12(fp)
 8040148:	180690fa 	slli	r3,r3,3
 804014c:	10c5883a 	add	r2,r2,r3
 8040150:	10c00017 	ldw	r3,0(r2)
 8040154:	00820174 	movhi	r2,2053
 8040158:	109ad104 	addi	r2,r2,27460
 804015c:	e13ffd17 	ldw	r4,-12(fp)
 8040160:	200890fa 	slli	r4,r4,3
 8040164:	1105883a 	add	r2,r2,r4
 8040168:	10800104 	addi	r2,r2,4
 804016c:	10800017 	ldw	r2,0(r2)
 8040170:	1009883a 	mov	r4,r2
 8040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 804017c:	0005313a 	rdctl	r2,ipending
 8040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8040184:	e0bfff17 	ldw	r2,-4(fp)
 8040188:	00000706 	br	80401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 804018c:	e0bffc17 	ldw	r2,-16(fp)
 8040190:	1085883a 	add	r2,r2,r2
 8040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8040198:	e0bffd17 	ldw	r2,-12(fp)
 804019c:	10800044 	addi	r2,r2,1
 80401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80401a4:	003fe106 	br	804012c <__alt_data_end+0xfffd808c>

    active = alt_irq_pending ();
 80401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80401ac:	e0bffb17 	ldw	r2,-20(fp)
 80401b0:	103fdb1e 	bne	r2,zero,8040120 <__alt_data_end+0xfffd8080>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80401b4:	0001883a 	nop
}
 80401b8:	0001883a 	nop
 80401bc:	e037883a 	mov	sp,fp
 80401c0:	dfc00117 	ldw	ra,4(sp)
 80401c4:	df000017 	ldw	fp,0(sp)
 80401c8:	dec00204 	addi	sp,sp,8
 80401cc:	f800283a 	ret

080401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80401d0:	defffb04 	addi	sp,sp,-20
 80401d4:	dfc00415 	stw	ra,16(sp)
 80401d8:	df000315 	stw	fp,12(sp)
 80401dc:	df000304 	addi	fp,sp,12
 80401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80401e4:	00bfffc4 	movi	r2,-1
 80401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80401f0:	d0a71217 	ldw	r2,-25528(gp)
 80401f4:	10000726 	beq	r2,zero,8040214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80401f8:	d0a71217 	ldw	r2,-25528(gp)
 80401fc:	e0fffd17 	ldw	r3,-12(fp)
 8040200:	e1bffe17 	ldw	r6,-8(fp)
 8040204:	e17fff17 	ldw	r5,-4(fp)
 8040208:	1809883a 	mov	r4,r3
 804020c:	103ee83a 	callr	r2
 8040210:	00000206 	br	804021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8040214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8040218:	0005883a 	mov	r2,zero
}
 804021c:	e037883a 	mov	sp,fp
 8040220:	dfc00117 	ldw	ra,4(sp)
 8040224:	df000017 	ldw	fp,0(sp)
 8040228:	dec00204 	addi	sp,sp,8
 804022c:	f800283a 	ret

Disassembly of section .text:

08040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8040230:	06c201b4 	movhi	sp,2054
    ori sp, sp, %lo(__alt_stack_pointer)
 8040234:	dee02814 	ori	sp,sp,32928
    movhi gp, %hi(_gp)
 8040238:	06820174 	movhi	gp,2053
    ori gp, gp, %lo(_gp)
 804023c:	d6b3ae14 	ori	gp,gp,52920
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8040240:	00820174 	movhi	r2,2053
    ori r2, r2, %lo(__bss_start)
 8040244:	109ab114 	ori	r2,r2,27332

    movhi r3, %hi(__bss_end)
 8040248:	00c20174 	movhi	r3,2053
    ori r3, r3, %lo(__bss_end)
 804024c:	18db1114 	ori	r3,r3,27716

    beq r2, r3, 1f
 8040250:	10c00326 	beq	r2,r3,8040260 <_start+0x30>

0:
    stw zero, (r2)
 8040254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8040258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 804025c:	10fffd36 	bltu	r2,r3,8040254 <__alt_data_end+0xfffd81b4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8040260:	804f1880 	call	804f188 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8040264:	804f3240 	call	804f324 <alt_main>

08040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8040268:	003fff06 	br	8040268 <__alt_data_end+0xfffd81c8>

0804026c <pio_isr>:

int pause_flag = 0;
int main_menu_flag = 0;
// Interrupt setup for PIO
static void pio_isr(void * context, alt_u32 id)    //this is the ISR
{
 804026c:	defffd04 	addi	sp,sp,-12
 8040270:	df000215 	stw	fp,8(sp)
 8040274:	df000204 	addi	fp,sp,8
 8040278:	e13ffe15 	stw	r4,-8(fp)
 804027c:	e17fff15 	stw	r5,-4(fp)
	pause_flag = !pause_flag;
 8040280:	d0a70317 	ldw	r2,-25588(gp)
 8040284:	1005003a 	cmpeq	r2,r2,zero
 8040288:	10803fcc 	andi	r2,r2,255
 804028c:	d0a70315 	stw	r2,-25588(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SW_BASE, 0x0);    //resets edge capture register so interrupt can be triggered again
 8040290:	0007883a 	mov	r3,zero
 8040294:	00820234 	movhi	r2,2056
 8040298:	108c9b04 	addi	r2,r2,12908
 804029c:	10c00035 	stwio	r3,0(r2)
	                                                    //can write anything to the register to reset it, does not have to be 0x0
}
 80402a0:	0001883a 	nop
 80402a4:	e037883a 	mov	sp,fp
 80402a8:	df000017 	ldw	fp,0(sp)
 80402ac:	dec00104 	addi	sp,sp,4
 80402b0:	f800283a 	ret

080402b4 <init_pio_interrupt>:
void init_pio_interrupt()
{
 80402b4:	defffd04 	addi	sp,sp,-12
 80402b8:	dfc00215 	stw	ra,8(sp)
 80402bc:	df000115 	stw	fp,4(sp)
 80402c0:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(SW_IRQ_INTERRUPT_CONTROLLER_ID, SW_IRQ, (void *)pio_isr, NULL, 0x0);    //connects the ISR with the IRQ. Also requires *context and can choose a flag?
 80402c4:	d8000015 	stw	zero,0(sp)
 80402c8:	000f883a 	mov	r7,zero
 80402cc:	01820134 	movhi	r6,2052
 80402d0:	31809b04 	addi	r6,r6,620
 80402d4:	01400084 	movi	r5,2
 80402d8:	0009883a 	mov	r4,zero
 80402dc:	804ed980 	call	804ed98 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SW_BASE, 0x20);    //0x20 = 0b0010_0000, so this will trigger an interrupt on rising edge of sw[2]
 80402e0:	00c00804 	movi	r3,32
 80402e4:	00820234 	movhi	r2,2056
 80402e8:	108c9a04 	addi	r2,r2,12904
 80402ec:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SW_BASE, 0x0);    //resets edge capture register
 80402f0:	0007883a 	mov	r3,zero
 80402f4:	00820234 	movhi	r2,2056
 80402f8:	108c9b04 	addi	r2,r2,12908
 80402fc:	10c00035 	stwio	r3,0(r2)
}
 8040300:	0001883a 	nop
 8040304:	e037883a 	mov	sp,fp
 8040308:	dfc00117 	ldw	ra,4(sp)
 804030c:	df000017 	ldw	fp,0(sp)
 8040310:	dec00204 	addi	sp,sp,8
 8040314:	f800283a 	ret

08040318 <alarm_callback.3080>:
	char time_str[10];
	sprintf(time_str, "Time: %u", game.time);
	char score_str[20];

	// Alarm setup - executes the callback function periodically (every second)
	alt_u32 alarm_callback(void *context) {
 8040318:	defffc04 	addi	sp,sp,-16
 804031c:	dfc00315 	stw	ra,12(sp)
 8040320:	df000215 	stw	fp,8(sp)
 8040324:	df000204 	addi	fp,sp,8
 8040328:	e13ffe15 	stw	r4,-8(fp)
 804032c:	6005883a 	mov	r2,r12
 8040330:	e33fff15 	stw	r12,-4(fp)
		game.time += 1;
 8040334:	10c02717 	ldw	r3,156(r2)
 8040338:	18c00044 	addi	r3,r3,1
 804033c:	10c02715 	stw	r3,156(r2)
		sprintf(time_str, "Time: %u", game.time);
 8040340:	10c02804 	addi	r3,r2,160
 8040344:	10802717 	ldw	r2,156(r2)
 8040348:	100d883a 	mov	r6,r2
 804034c:	01420174 	movhi	r5,2053
 8040350:	294b7504 	addi	r5,r5,11732
 8040354:	1809883a 	mov	r4,r3
 8040358:	8043b280 	call	8043b28 <sprintf>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 804035c:	d0a71017 	ldw	r2,-25536(gp)
		return alt_ticks_per_second();
 8040360:	0001883a 	nop
	}
 8040364:	e037883a 	mov	sp,fp
 8040368:	dfc00117 	ldw	ra,4(sp)
 804036c:	df000017 	ldw	fp,0(sp)
 8040370:	dec00204 	addi	sp,sp,8
 8040374:	f800283a 	ret

08040378 <main>:
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SW_BASE, 0x20);    //0x20 = 0b0010_0000, so this will trigger an interrupt on rising edge of sw[2]
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SW_BASE, 0x0);    //resets edge capture register
}

int main()
{
 8040378:	deff9804 	addi	sp,sp,-416
 804037c:	dfc06715 	stw	ra,412(sp)
 8040380:	df006615 	stw	fp,408(sp)
 8040384:	df006604 	addi	fp,sp,408
	alt_ic_isr_register(SW_IRQ_INTERRUPT_CONTROLLER_ID, SW_IRQ, (void *)pio_isr, NULL, 0x0);    //connects the ISR with the IRQ. Also requires *context and can choose a flag?
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SW_BASE, 0x20);    //0x20 = 0b0010_0000, so this will trigger an interrupt on rising edge of sw[2]
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SW_BASE, 0x0);    //resets edge capture register
}

int main()
 8040388:	e0bfa004 	addi	r2,fp,-384
 804038c:	10802b04 	addi	r2,r2,172
 8040390:	e0ffa004 	addi	r3,fp,-384
 8040394:	180d883a 	mov	r6,r3
 8040398:	01420134 	movhi	r5,2052
 804039c:	2940c604 	addi	r5,r5,792
 80403a0:	1009883a 	mov	r4,r2
 80403a4:	80419080 	call	8041908 <__trampoline_setup>
{
	// Have to set up these pointers to open the device
	// Reference : https://faculty-web.msoe.edu/johnsontimoj/EE3921/files3921/nios_pixel_sw.pdf
	alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev;
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_0_NAME);
 80403a8:	01020174 	movhi	r4,2053
 80403ac:	210b7804 	addi	r4,r4,11744
 80403b0:	80510900 	call	8051090 <alt_up_pixel_buffer_dma_open_dev>
 80403b4:	e0bf9a15 	stw	r2,-408(fp)
	// Check for error
	if ( pixel_buf_dma_dev == NULL)
 80403b8:	e0bf9a17 	ldw	r2,-408(fp)
 80403bc:	1000041e 	bne	r2,zero,80403d0 <main+0x58>
		printf ("Error: could not open pixel buffer device \n");
 80403c0:	01020174 	movhi	r4,2053
 80403c4:	210b8004 	addi	r4,r4,11776
 80403c8:	8043abc0 	call	8043abc <puts>
 80403cc:	00000306 	br	80403dc <main+0x64>
	else
		printf ("Opened pixel buffer device \n");
 80403d0:	01020174 	movhi	r4,2053
 80403d4:	210b8b04 	addi	r4,r4,11820
 80403d8:	8043abc0 	call	8043abc <puts>
	alt_up_char_buffer_dev * char_buf_dev;
	char_buf_dev = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
 80403dc:	01020174 	movhi	r4,2053
 80403e0:	210b9204 	addi	r4,r4,11848
 80403e4:	8050e300 	call	8050e30 <alt_up_char_buffer_open_dev>
 80403e8:	e0bf9b15 	stw	r2,-404(fp)
	if ( char_buf_dev == NULL)
 80403ec:	e0bf9b17 	ldw	r2,-404(fp)
 80403f0:	1000041e 	bne	r2,zero,8040404 <main+0x8c>
		printf ("Error: could not open char buffer device \n");
 80403f4:	01020174 	movhi	r4,2053
 80403f8:	210b9c04 	addi	r4,r4,11888
 80403fc:	8043abc0 	call	8043abc <puts>
 8040400:	00000306 	br	8040410 <main+0x98>
	else
		printf ("Opened char buffer device \n");
 8040404:	01020174 	movhi	r4,2053
 8040408:	210ba704 	addi	r4,r4,11932
 804040c:	8043abc0 	call	8043abc <puts>

	alt_up_char_buffer_init(char_buf_dev);
 8040410:	e13f9b17 	ldw	r4,-404(fp)
 8040414:	8050db00 	call	8050db0 <alt_up_char_buffer_init>
	alt_up_char_buffer_init(char_buf_dev);
 8040418:	e13f9b17 	ldw	r4,-404(fp)
 804041c:	8050db00 	call	8050db0 <alt_up_char_buffer_init>

	// Game objects
	Game game = {SCREEN_WIDTH, SCREEN_HEIGHT, {0,0}, NUM_BALLS, NUM_PADDLES,
 8040420:	00820174 	movhi	r2,2053
 8040424:	108bb704 	addi	r2,r2,11996
 8040428:	e0ffa004 	addi	r3,fp,-384
 804042c:	1009883a 	mov	r4,r2
 8040430:	00802804 	movi	r2,160
 8040434:	100d883a 	mov	r6,r2
 8040438:	200b883a 	mov	r5,r4
 804043c:	1809883a 	mov	r4,r3
 8040440:	80438b40 	call	80438b4 <memcpy>
			{0,0,0,0,0,0,0,0}, //User input
			0 // Game time in s
	};
	//Display strings
	char time_str[10];
	sprintf(time_str, "Time: %u", game.time);
 8040444:	e0ffc717 	ldw	r3,-228(fp)
 8040448:	e0bfa004 	addi	r2,fp,-384
 804044c:	10802804 	addi	r2,r2,160
 8040450:	180d883a 	mov	r6,r3
 8040454:	01420174 	movhi	r5,2053
 8040458:	294b7504 	addi	r5,r5,11732
 804045c:	1009883a 	mov	r4,r2
 8040460:	8043b280 	call	8043b28 <sprintf>
 8040464:	d0e71017 	ldw	r3,-25536(gp)
		sprintf(time_str, "Time: %u", game.time);
		return alt_ticks_per_second();
	}
	static alt_alarm alarm;
	// Setup alarm to call the callback function every N_TICKS
	if (alt_alarm_start(&alarm, alt_ticks_per_second(), alarm_callback, NULL) < 0){
 8040468:	e0bfa004 	addi	r2,fp,-384
 804046c:	10802b04 	addi	r2,r2,172
 8040470:	000f883a 	mov	r7,zero
 8040474:	100d883a 	mov	r6,r2
 8040478:	180b883a 	mov	r5,r3
 804047c:	01020174 	movhi	r4,2053
 8040480:	211ac104 	addi	r4,r4,27396
 8040484:	804ea380 	call	804ea38 <alt_alarm_start>
 8040488:	1000030e 	bge	r2,zero,8040498 <main+0x120>
		printf ("No System Clock Available\n");
 804048c:	01020174 	movhi	r4,2053
 8040490:	210bae04 	addi	r4,r4,11960
 8040494:	8043abc0 	call	8043abc <puts>

	}
	// ****************

	// Clear screen
	clear(pixel_buf_dma_dev, char_buf_dev,0); // Current screen
 8040498:	e0bfa004 	addi	r2,fp,-384
 804049c:	1019883a 	mov	r12,r2
 80404a0:	000d883a 	mov	r6,zero
 80404a4:	e17f9b17 	ldw	r5,-404(fp)
 80404a8:	e13f9a17 	ldw	r4,-408(fp)
 80404ac:	804132c0 	call	804132c <clear.3121>
	//clear(pixel_buf_dma_dev, 0, char_buf_dev); // Char buffer

	// Initialize interrupts
	init_pio_interrupt();
 80404b0:	80402b40 	call	80402b4 <init_pio_interrupt>

	// ADC setup
	adc_stop(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
 80404b4:	01020234 	movhi	r4,2056
 80404b8:	210ca404 	addi	r4,r4,12944
 80404bc:	8050ae40 	call	8050ae4 <adc_stop>
	adc_set_mode_run_once(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
 80404c0:	01020234 	movhi	r4,2056
 80404c4:	210ca404 	addi	r4,r4,12944
 80404c8:	8050b6c0 	call	8050b6c <adc_set_mode_run_once>

	while(1) {
		if(pause_flag) { // Pause menu
 80404cc:	d0a70317 	ldw	r2,-25588(gp)
 80404d0:	10000526 	beq	r2,zero,80404e8 <main+0x170>
			pause_menu(char_buf_dev);
 80404d4:	e0bfa004 	addi	r2,fp,-384
 80404d8:	1019883a 	mov	r12,r2
 80404dc:	e13f9b17 	ldw	r4,-404(fp)
 80404e0:	80418280 	call	8041828 <pause_menu.3167>
 80404e4:	003ff906 	br	80404cc <__alt_data_end+0xfffd842c>
		}
		else {
			clear_pause_menu(char_buf_dev);
 80404e8:	e0bfa004 	addi	r2,fp,-384
 80404ec:	1019883a 	mov	r12,r2
 80404f0:	e13f9b17 	ldw	r4,-404(fp)
 80404f4:	80418840 	call	8041884 <clear_pause_menu.3170>
			// Run Pong game
			// ADC
			adc_start(MODULAR_ADC_0_SEQUENCER_CSR_BASE);
 80404f8:	01020234 	movhi	r4,2056
 80404fc:	210ca404 	addi	r4,r4,12944
 8040500:	8050b340 	call	8050b34 <adc_start>
			//usleep(10000);
			alt_u32* adc_val_left = &(game.adc_val_left);
 8040504:	e0bfa004 	addi	r2,fp,-384
 8040508:	10801b04 	addi	r2,r2,108
 804050c:	e0bf9c15 	stw	r2,-400(fp)
			alt_u32* adc_val_right = &(game.adc_val_right);
 8040510:	e0bfa004 	addi	r2,fp,-384
 8040514:	10801c04 	addi	r2,r2,112
 8040518:	e0bf9d15 	stw	r2,-396(fp)
			float* adc_volt_left = &(game.adc_volt_left);
 804051c:	e0bfa004 	addi	r2,fp,-384
 8040520:	10801d04 	addi	r2,r2,116
 8040524:	e0bf9e15 	stw	r2,-392(fp)
			float* adc_volt_right = &(game.adc_volt_right);
 8040528:	e0bfa004 	addi	r2,fp,-384
 804052c:	10801e04 	addi	r2,r2,120
 8040530:	e0bf9f15 	stw	r2,-388(fp)
			// Read joystick values
			// TODO: implement right joystick
			alt_adc_word_read(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE, adc_val_left, 1);
 8040534:	01800044 	movi	r6,1
 8040538:	e17f9c17 	ldw	r5,-400(fp)
 804053c:	01020234 	movhi	r4,2056
 8040540:	210c0004 	addi	r4,r4,12288
 8040544:	80508ec0 	call	80508ec <alt_adc_word_read>
	//		alt_adc_word_read(MODULAR_ADC_0_SAMPLE_STORE_CSR_BASE + 32 * 1, adc_val_right, 1);
			*adc_volt_left = (float)*adc_val_left * 5.0 / 4096.0;
 8040548:	e0bf9c17 	ldw	r2,-400(fp)
 804054c:	10800017 	ldw	r2,0(r2)
 8040550:	1009883a 	mov	r4,r2
 8040554:	8041ee80 	call	8041ee8 <__floatunsisf>
 8040558:	1007883a 	mov	r3,r2
 804055c:	1809883a 	mov	r4,r3
 8040560:	80433e40 	call	80433e4 <__extendsfdf2>
 8040564:	1011883a 	mov	r8,r2
 8040568:	1813883a 	mov	r9,r3
 804056c:	000d883a 	mov	r6,zero
 8040570:	01d00534 	movhi	r7,16404
 8040574:	4009883a 	mov	r4,r8
 8040578:	480b883a 	mov	r5,r9
 804057c:	8042b780 	call	8042b78 <__muldf3>
 8040580:	1009883a 	mov	r4,r2
 8040584:	180b883a 	mov	r5,r3
 8040588:	2005883a 	mov	r2,r4
 804058c:	2807883a 	mov	r3,r5
 8040590:	000d883a 	mov	r6,zero
 8040594:	01d02c34 	movhi	r7,16560
 8040598:	1009883a 	mov	r4,r2
 804059c:	180b883a 	mov	r5,r3
 80405a0:	8041fd80 	call	8041fd8 <__divdf3>
 80405a4:	1009883a 	mov	r4,r2
 80405a8:	180b883a 	mov	r5,r3
 80405ac:	2005883a 	mov	r2,r4
 80405b0:	2807883a 	mov	r3,r5
 80405b4:	1009883a 	mov	r4,r2
 80405b8:	180b883a 	mov	r5,r3
 80405bc:	80434f40 	call	80434f4 <__truncdfsf2>
 80405c0:	1007883a 	mov	r3,r2
 80405c4:	e0bf9e17 	ldw	r2,-392(fp)
 80405c8:	10c00015 	stw	r3,0(r2)
			// ADC - end
			run_game_tick(pixel_buf_dma_dev, char_buf_dev, 0, &game);
 80405cc:	e0bfa004 	addi	r2,fp,-384
 80405d0:	e0ffa004 	addi	r3,fp,-384
 80405d4:	1819883a 	mov	r12,r3
 80405d8:	100f883a 	mov	r7,r2
 80405dc:	000d883a 	mov	r6,zero
 80405e0:	e17f9b17 	ldw	r5,-404(fp)
 80405e4:	e13f9a17 	ldw	r4,-408(fp)
 80405e8:	80416740 	call	8041674 <run_game_tick.3155>
			sprintf(score_str, "%u - %u", game.scores[0], game.scores[1]);
 80405ec:	e0ffa217 	ldw	r3,-376(fp)
 80405f0:	e13fa317 	ldw	r4,-372(fp)
 80405f4:	e0bffa84 	addi	r2,fp,-22
 80405f8:	200f883a 	mov	r7,r4
 80405fc:	180d883a 	mov	r6,r3
 8040600:	01420174 	movhi	r5,2053
 8040604:	294bb504 	addi	r5,r5,11988
 8040608:	1009883a 	mov	r4,r2
 804060c:	8043b280 	call	8043b28 <sprintf>
			alt_up_char_buffer_string(char_buf_dev, score_str, 37, 2);
 8040610:	e0bffa84 	addi	r2,fp,-22
 8040614:	01c00084 	movi	r7,2
 8040618:	01800944 	movi	r6,37
 804061c:	100b883a 	mov	r5,r2
 8040620:	e13f9b17 	ldw	r4,-404(fp)
 8040624:	8050f380 	call	8050f38 <alt_up_char_buffer_string>
			alt_up_char_buffer_string(char_buf_dev, time_str, 65, 2);
 8040628:	e0bfa004 	addi	r2,fp,-384
 804062c:	10802804 	addi	r2,r2,160
 8040630:	01c00084 	movi	r7,2
 8040634:	01801044 	movi	r6,65
 8040638:	100b883a 	mov	r5,r2
 804063c:	e13f9b17 	ldw	r4,-404(fp)
 8040640:	8050f380 	call	8050f38 <alt_up_char_buffer_string>
		}
	}
 8040644:	003fa106 	br	80404cc <__alt_data_end+0xfffd842c>

08040648 <cheat_code.3084>:
	}


	// The makefile is not working as intended so the linker is unable to link the dependencies.
	// As a result, we have to manually include the functions here ********
	void cheat_code(Game* game) {
 8040648:	defffb04 	addi	sp,sp,-20
 804064c:	df000415 	stw	fp,16(sp)
 8040650:	df000404 	addi	fp,sp,16
 8040654:	e13ffe15 	stw	r4,-8(fp)
 8040658:	e33fff15 	stw	r12,-4(fp)
		int* user_input = game->user_input;
 804065c:	e0bffe17 	ldw	r2,-8(fp)
 8040660:	10801f04 	addi	r2,r2,124
 8040664:	e0bffc15 	stw	r2,-16(fp)
		Rectangle* paddles = game ->paddles;
 8040668:	e0bffe17 	ldw	r2,-8(fp)
 804066c:	10800d04 	addi	r2,r2,52
 8040670:	e0bffd15 	stw	r2,-12(fp)
		if(user_input[3]) {
 8040674:	e0bffc17 	ldw	r2,-16(fp)
 8040678:	10800304 	addi	r2,r2,12
 804067c:	10800017 	ldw	r2,0(r2)
 8040680:	10000826 	beq	r2,zero,80406a4 <cheat_code.3084+0x5c>
			paddles[0].height=SCREEN_HEIGHT-1;
 8040684:	e0bffd17 	ldw	r2,-12(fp)
 8040688:	00c03bc4 	movi	r3,239
 804068c:	10c00515 	stw	r3,20(r2)
			paddles[0].y=0;
 8040690:	e0bffd17 	ldw	r2,-12(fp)
 8040694:	10000115 	stw	zero,4(r2)
			paddles[0].yspeed=0;
 8040698:	e0bffd17 	ldw	r2,-12(fp)
 804069c:	10000315 	stw	zero,12(r2)
 80406a0:	00000306 	br	80406b0 <cheat_code.3084+0x68>
		} else { paddles[0].height=PADDLE_HEIGHT-1;}
 80406a4:	e0bffd17 	ldw	r2,-12(fp)
 80406a8:	00c00c44 	movi	r3,49
 80406ac:	10c00515 	stw	r3,20(r2)
		if(user_input[4]) {
 80406b0:	e0bffc17 	ldw	r2,-16(fp)
 80406b4:	10800404 	addi	r2,r2,16
 80406b8:	10800017 	ldw	r2,0(r2)
 80406bc:	10000b26 	beq	r2,zero,80406ec <cheat_code.3084+0xa4>
			paddles[1].height=SCREEN_HEIGHT-1;
 80406c0:	e0bffd17 	ldw	r2,-12(fp)
 80406c4:	10800704 	addi	r2,r2,28
 80406c8:	00c03bc4 	movi	r3,239
 80406cc:	10c00515 	stw	r3,20(r2)
			paddles[1].y=0;
 80406d0:	e0bffd17 	ldw	r2,-12(fp)
 80406d4:	10800704 	addi	r2,r2,28
 80406d8:	10000115 	stw	zero,4(r2)
			paddles[1].yspeed=0;
 80406dc:	e0bffd17 	ldw	r2,-12(fp)
 80406e0:	10800704 	addi	r2,r2,28
 80406e4:	10000315 	stw	zero,12(r2)
		} else {paddles[1].height=PADDLE_HEIGHT-1;}
	}
 80406e8:	00000406 	br	80406fc <cheat_code.3084+0xb4>
		} else { paddles[0].height=PADDLE_HEIGHT-1;}
		if(user_input[4]) {
			paddles[1].height=SCREEN_HEIGHT-1;
			paddles[1].y=0;
			paddles[1].yspeed=0;
		} else {paddles[1].height=PADDLE_HEIGHT-1;}
 80406ec:	e0bffd17 	ldw	r2,-12(fp)
 80406f0:	10800704 	addi	r2,r2,28
 80406f4:	00c00c44 	movi	r3,49
 80406f8:	10c00515 	stw	r3,20(r2)
	}
 80406fc:	0001883a 	nop
 8040700:	e037883a 	mov	sp,fp
 8040704:	df000017 	ldw	fp,0(sp)
 8040708:	dec00104 	addi	sp,sp,4
 804070c:	f800283a 	ret

08040710 <update_paddle.3089>:
	// Updates paddle positions
	void update_paddle(Game* game) {
 8040710:	defff204 	addi	sp,sp,-56
 8040714:	dfc00d15 	stw	ra,52(sp)
 8040718:	df000c15 	stw	fp,48(sp)
 804071c:	dc400b15 	stw	r17,44(sp)
 8040720:	dc000a15 	stw	r16,40(sp)
 8040724:	df000c04 	addi	fp,sp,48
 8040728:	e13ffc15 	stw	r4,-16(fp)
 804072c:	e33ffd15 	stw	r12,-12(fp)
		int* user_input = (game -> user_input);
 8040730:	e0bffc17 	ldw	r2,-16(fp)
 8040734:	10801f04 	addi	r2,r2,124
 8040738:	e0bff515 	stw	r2,-44(fp)
		int len = (game->paddles_len);
 804073c:	e0bffc17 	ldw	r2,-16(fp)
 8040740:	10800517 	ldw	r2,20(r2)
 8040744:	e0bff615 	stw	r2,-40(fp)
		Rectangle* paddle = (game -> paddles);
 8040748:	e0bffc17 	ldw	r2,-16(fp)
 804074c:	10800d04 	addi	r2,r2,52
 8040750:	e0bff715 	stw	r2,-36(fp)
		float adc_volt_left = game->adc_volt_left;
 8040754:	e0bffc17 	ldw	r2,-16(fp)
 8040758:	10801d17 	ldw	r2,116(r2)
 804075c:	e0bff815 	stw	r2,-32(fp)
		float adc_volt_right = game->adc_volt_right;
 8040760:	e0bffc17 	ldw	r2,-16(fp)
 8040764:	10801e17 	ldw	r2,120(r2)
 8040768:	e0bff915 	stw	r2,-28(fp)
		// Adjust speed according to user input
		int SW_0 = user_input[0];
 804076c:	e0bff517 	ldw	r2,-44(fp)
 8040770:	10800017 	ldw	r2,0(r2)
 8040774:	e0bffa15 	stw	r2,-24(fp)
		int SW_1 = user_input[1];
 8040778:	e0bff517 	ldw	r2,-44(fp)
 804077c:	10800117 	ldw	r2,4(r2)
 8040780:	e0bffb15 	stw	r2,-20(fp)
		if(adc_volt_left >=2.6) {
 8040784:	e13ff817 	ldw	r4,-32(fp)
 8040788:	80433e40 	call	80433e4 <__extendsfdf2>
 804078c:	1011883a 	mov	r8,r2
 8040790:	1813883a 	mov	r9,r3
 8040794:	01b33374 	movhi	r6,52429
 8040798:	31b33344 	addi	r6,r6,-13107
 804079c:	01d00174 	movhi	r7,16389
 80407a0:	39f33304 	addi	r7,r7,-13108
 80407a4:	4009883a 	mov	r4,r8
 80407a8:	480b883a 	mov	r5,r9
 80407ac:	80429a80 	call	80429a8 <__gedf2>
 80407b0:	10000616 	blt	r2,zero,80407cc <update_paddle.3089+0xbc>
			paddle[0].yspeed = adc_volt_left;
 80407b4:	e13ff817 	ldw	r4,-32(fp)
 80407b8:	8041e780 	call	8041e78 <__fixsfsi>
 80407bc:	1007883a 	mov	r3,r2
 80407c0:	e0bff717 	ldw	r2,-36(fp)
 80407c4:	10c00315 	stw	r3,12(r2)
 80407c8:	00001a06 	br	8040834 <update_paddle.3089+0x124>
		}
		else if(adc_volt_left <=2.4) {
 80407cc:	e13ff817 	ldw	r4,-32(fp)
 80407d0:	80433e40 	call	80433e4 <__extendsfdf2>
 80407d4:	1011883a 	mov	r8,r2
 80407d8:	1813883a 	mov	r9,r3
 80407dc:	018cccf4 	movhi	r6,13107
 80407e0:	318cccc4 	addi	r6,r6,13107
 80407e4:	01d000f4 	movhi	r7,16387
 80407e8:	39ccccc4 	addi	r7,r7,13107
 80407ec:	4009883a 	mov	r4,r8
 80407f0:	480b883a 	mov	r5,r9
 80407f4:	8042a840 	call	8042a84 <__ledf2>
 80407f8:	00800c16 	blt	zero,r2,804082c <update_paddle.3089+0x11c>
			paddle[0].yspeed = -(5-adc_volt_left);
 80407fc:	e17ff817 	ldw	r5,-32(fp)
 8040800:	01102834 	movhi	r4,16544
 8040804:	80419940 	call	8041994 <__subsf3>
 8040808:	1007883a 	mov	r3,r2
 804080c:	1805883a 	mov	r2,r3
 8040810:	10a0003c 	xorhi	r2,r2,32768
 8040814:	1009883a 	mov	r4,r2
 8040818:	8041e780 	call	8041e78 <__fixsfsi>
 804081c:	1007883a 	mov	r3,r2
 8040820:	e0bff717 	ldw	r2,-36(fp)
 8040824:	10c00315 	stw	r3,12(r2)
 8040828:	00000206 	br	8040834 <update_paddle.3089+0x124>
		}
		else {
			paddle[0].yspeed = 0;
 804082c:	e0bff717 	ldw	r2,-36(fp)
 8040830:	10000315 	stw	zero,12(r2)
		}
		if(SW_1) // SW_1 is on (right paddle)
 8040834:	e0bffb17 	ldw	r2,-20(fp)
 8040838:	10000526 	beq	r2,zero,8040850 <update_paddle.3089+0x140>
			paddle[1].yspeed = -PADDLE_SPEED;
 804083c:	e0bff717 	ldw	r2,-36(fp)
 8040840:	10800704 	addi	r2,r2,28
 8040844:	00ffff84 	movi	r3,-2
 8040848:	10c00315 	stw	r3,12(r2)
 804084c:	00000406 	br	8040860 <update_paddle.3089+0x150>
		else
			paddle[1].yspeed = PADDLE_SPEED;
 8040850:	e0bff717 	ldw	r2,-36(fp)
 8040854:	10800704 	addi	r2,r2,28
 8040858:	00c00084 	movi	r3,2
 804085c:	10c00315 	stw	r3,12(r2)
		// Adjust paddle positions
		for(int i = 0; i< len; i++) {
 8040860:	e03ff415 	stw	zero,-48(fp)
 8040864:	00006d06 	br	8040a1c <update_paddle.3089+0x30c>
			// Update position
			paddle[i].y += paddle[i].yspeed;
 8040868:	e0bff417 	ldw	r2,-48(fp)
 804086c:	01400704 	movi	r5,28
 8040870:	1009883a 	mov	r4,r2
 8040874:	80418e00 	call	80418e0 <__mulsi3>
 8040878:	1007883a 	mov	r3,r2
 804087c:	e0bff717 	ldw	r2,-36(fp)
 8040880:	10e1883a 	add	r16,r2,r3
 8040884:	e0bff417 	ldw	r2,-48(fp)
 8040888:	01400704 	movi	r5,28
 804088c:	1009883a 	mov	r4,r2
 8040890:	80418e00 	call	80418e0 <__mulsi3>
 8040894:	1007883a 	mov	r3,r2
 8040898:	e0bff717 	ldw	r2,-36(fp)
 804089c:	10c5883a 	add	r2,r2,r3
 80408a0:	14400117 	ldw	r17,4(r2)
 80408a4:	e0bff417 	ldw	r2,-48(fp)
 80408a8:	01400704 	movi	r5,28
 80408ac:	1009883a 	mov	r4,r2
 80408b0:	80418e00 	call	80418e0 <__mulsi3>
 80408b4:	1007883a 	mov	r3,r2
 80408b8:	e0bff717 	ldw	r2,-36(fp)
 80408bc:	10c5883a 	add	r2,r2,r3
 80408c0:	10800317 	ldw	r2,12(r2)
 80408c4:	8885883a 	add	r2,r17,r2
 80408c8:	80800115 	stw	r2,4(r16)
			paddle[0].x = 0;
 80408cc:	e0bff717 	ldw	r2,-36(fp)
 80408d0:	10000015 	stw	zero,0(r2)
			paddle[1].x = SCREEN_WIDTH - paddle[1].width;
 80408d4:	e0bff717 	ldw	r2,-36(fp)
 80408d8:	10800704 	addi	r2,r2,28
 80408dc:	e0fff717 	ldw	r3,-36(fp)
 80408e0:	18c00704 	addi	r3,r3,28
 80408e4:	18c00417 	ldw	r3,16(r3)
 80408e8:	01005004 	movi	r4,320
 80408ec:	20c7c83a 	sub	r3,r4,r3
 80408f0:	10c00015 	stw	r3,0(r2)
			// Check for collisions
			if (paddle[i].y + paddle[i].height >= SCREEN_HEIGHT) {
 80408f4:	e0bff417 	ldw	r2,-48(fp)
 80408f8:	01400704 	movi	r5,28
 80408fc:	1009883a 	mov	r4,r2
 8040900:	80418e00 	call	80418e0 <__mulsi3>
 8040904:	1007883a 	mov	r3,r2
 8040908:	e0bff717 	ldw	r2,-36(fp)
 804090c:	10c5883a 	add	r2,r2,r3
 8040910:	14000117 	ldw	r16,4(r2)
 8040914:	e0bff417 	ldw	r2,-48(fp)
 8040918:	01400704 	movi	r5,28
 804091c:	1009883a 	mov	r4,r2
 8040920:	80418e00 	call	80418e0 <__mulsi3>
 8040924:	1007883a 	mov	r3,r2
 8040928:	e0bff717 	ldw	r2,-36(fp)
 804092c:	10c5883a 	add	r2,r2,r3
 8040930:	10800517 	ldw	r2,20(r2)
 8040934:	8085883a 	add	r2,r16,r2
 8040938:	10803c10 	cmplti	r2,r2,240
 804093c:	10001b1e 	bne	r2,zero,80409ac <update_paddle.3089+0x29c>
				paddle[i].y = SCREEN_HEIGHT - paddle[i].height;
 8040940:	e0bff417 	ldw	r2,-48(fp)
 8040944:	01400704 	movi	r5,28
 8040948:	1009883a 	mov	r4,r2
 804094c:	80418e00 	call	80418e0 <__mulsi3>
 8040950:	1007883a 	mov	r3,r2
 8040954:	e0bff717 	ldw	r2,-36(fp)
 8040958:	10e1883a 	add	r16,r2,r3
 804095c:	e0bff417 	ldw	r2,-48(fp)
 8040960:	01400704 	movi	r5,28
 8040964:	1009883a 	mov	r4,r2
 8040968:	80418e00 	call	80418e0 <__mulsi3>
 804096c:	1007883a 	mov	r3,r2
 8040970:	e0bff717 	ldw	r2,-36(fp)
 8040974:	10c5883a 	add	r2,r2,r3
 8040978:	10800517 	ldw	r2,20(r2)
 804097c:	00c03c04 	movi	r3,240
 8040980:	1885c83a 	sub	r2,r3,r2
 8040984:	80800115 	stw	r2,4(r16)
				paddle[i].yspeed = 0;
 8040988:	e0bff417 	ldw	r2,-48(fp)
 804098c:	01400704 	movi	r5,28
 8040990:	1009883a 	mov	r4,r2
 8040994:	80418e00 	call	80418e0 <__mulsi3>
 8040998:	1007883a 	mov	r3,r2
 804099c:	e0bff717 	ldw	r2,-36(fp)
 80409a0:	10c5883a 	add	r2,r2,r3
 80409a4:	10000315 	stw	zero,12(r2)
 80409a8:	00001906 	br	8040a10 <update_paddle.3089+0x300>
			}
			else if (paddle[i].y <= 0) {
 80409ac:	e0bff417 	ldw	r2,-48(fp)
 80409b0:	01400704 	movi	r5,28
 80409b4:	1009883a 	mov	r4,r2
 80409b8:	80418e00 	call	80418e0 <__mulsi3>
 80409bc:	1007883a 	mov	r3,r2
 80409c0:	e0bff717 	ldw	r2,-36(fp)
 80409c4:	10c5883a 	add	r2,r2,r3
 80409c8:	10800117 	ldw	r2,4(r2)
 80409cc:	00801016 	blt	zero,r2,8040a10 <update_paddle.3089+0x300>
				paddle[i].y = 0;
 80409d0:	e0bff417 	ldw	r2,-48(fp)
 80409d4:	01400704 	movi	r5,28
 80409d8:	1009883a 	mov	r4,r2
 80409dc:	80418e00 	call	80418e0 <__mulsi3>
 80409e0:	1007883a 	mov	r3,r2
 80409e4:	e0bff717 	ldw	r2,-36(fp)
 80409e8:	10c5883a 	add	r2,r2,r3
 80409ec:	10000115 	stw	zero,4(r2)
				paddle[i].yspeed = 0;
 80409f0:	e0bff417 	ldw	r2,-48(fp)
 80409f4:	01400704 	movi	r5,28
 80409f8:	1009883a 	mov	r4,r2
 80409fc:	80418e00 	call	80418e0 <__mulsi3>
 8040a00:	1007883a 	mov	r3,r2
 8040a04:	e0bff717 	ldw	r2,-36(fp)
 8040a08:	10c5883a 	add	r2,r2,r3
 8040a0c:	10000315 	stw	zero,12(r2)
		if(SW_1) // SW_1 is on (right paddle)
			paddle[1].yspeed = -PADDLE_SPEED;
		else
			paddle[1].yspeed = PADDLE_SPEED;
		// Adjust paddle positions
		for(int i = 0; i< len; i++) {
 8040a10:	e0bff417 	ldw	r2,-48(fp)
 8040a14:	10800044 	addi	r2,r2,1
 8040a18:	e0bff415 	stw	r2,-48(fp)
 8040a1c:	e0fff417 	ldw	r3,-48(fp)
 8040a20:	e0bff617 	ldw	r2,-40(fp)
 8040a24:	18bf9016 	blt	r3,r2,8040868 <__alt_data_end+0xfffd87c8>
			else if (paddle[i].y <= 0) {
				paddle[i].y = 0;
				paddle[i].yspeed = 0;
			}
		}
	}
 8040a28:	0001883a 	nop
 8040a2c:	e6fffe04 	addi	sp,fp,-8
 8040a30:	dfc00317 	ldw	ra,12(sp)
 8040a34:	df000217 	ldw	fp,8(sp)
 8040a38:	dc400117 	ldw	r17,4(sp)
 8040a3c:	dc000017 	ldw	r16,0(sp)
 8040a40:	dec00404 	addi	sp,sp,16
 8040a44:	f800283a 	ret

08040a48 <sign.3103>:
	// Updates the position of each Rectangle object
	// "bounces" each object upon collision with screen top/bottom edges
	// or paddle objects
	int sign(int n) {
 8040a48:	defffd04 	addi	sp,sp,-12
 8040a4c:	df000215 	stw	fp,8(sp)
 8040a50:	df000204 	addi	fp,sp,8
 8040a54:	e13ffe15 	stw	r4,-8(fp)
 8040a58:	e33fff15 	stw	r12,-4(fp)
		if(n<0)
 8040a5c:	e0bffe17 	ldw	r2,-8(fp)
 8040a60:	1000020e 	bge	r2,zero,8040a6c <sign.3103+0x24>
			return -1;
 8040a64:	00bfffc4 	movi	r2,-1
 8040a68:	00000106 	br	8040a70 <sign.3103+0x28>
		return 1;
 8040a6c:	00800044 	movi	r2,1
	}
 8040a70:	e037883a 	mov	sp,fp
 8040a74:	df000017 	ldw	fp,0(sp)
 8040a78:	dec00104 	addi	sp,sp,4
 8040a7c:	f800283a 	ret

08040a80 <collision_sound.3105>:

	void collision_sound(){
 8040a80:	defffd04 	addi	sp,sp,-12
 8040a84:	dfc00215 	stw	ra,8(sp)
 8040a88:	df000115 	stw	fp,4(sp)
 8040a8c:	df000104 	addi	fp,sp,4
 8040a90:	e33fff15 	stw	r12,-4(fp)
			//play the some audio for 100us then stop playing it to make a 'beep' sound
			IOWR(AUDIO_MODULE_0_BASE, 0, 0x1);
 8040a94:	00c00044 	movi	r3,1
 8040a98:	00820234 	movhi	r2,2056
 8040a9c:	108cac04 	addi	r2,r2,12976
 8040aa0:	10c00035 	stwio	r3,0(r2)
			usleep(1000);
 8040aa4:	0100fa04 	movi	r4,1000
 8040aa8:	804f8000 	call	804f800 <usleep>
			IOWR(AUDIO_MODULE_0_BASE, 0, 0x0);
 8040aac:	0007883a 	mov	r3,zero
 8040ab0:	00820234 	movhi	r2,2056
 8040ab4:	108cac04 	addi	r2,r2,12976
 8040ab8:	10c00035 	stwio	r3,0(r2)
		};
 8040abc:	0001883a 	nop
 8040ac0:	e037883a 	mov	sp,fp
 8040ac4:	dfc00117 	ldw	ra,4(sp)
 8040ac8:	df000017 	ldw	fp,0(sp)
 8040acc:	dec00204 	addi	sp,sp,8
 8040ad0:	f800283a 	ret

08040ad4 <update_ball.3108>:

	void update_ball(Game* game) {
 8040ad4:	defff404 	addi	sp,sp,-48
 8040ad8:	dfc00b15 	stw	ra,44(sp)
 8040adc:	df000a15 	stw	fp,40(sp)
 8040ae0:	dc800915 	stw	r18,36(sp)
 8040ae4:	dc400815 	stw	r17,32(sp)
 8040ae8:	dc000715 	stw	r16,28(sp)
 8040aec:	df000a04 	addi	fp,sp,40
 8040af0:	e13ffb15 	stw	r4,-20(fp)
 8040af4:	6021883a 	mov	r16,r12
 8040af8:	e33ffc15 	stw	r12,-16(fp)
		int rect_len = (game -> balls_len);
 8040afc:	e0bffb17 	ldw	r2,-20(fp)
 8040b00:	10800417 	ldw	r2,16(r2)
 8040b04:	e0bff715 	stw	r2,-36(fp)
		Rectangle* rect = (game -> balls);
 8040b08:	e0bffb17 	ldw	r2,-20(fp)
 8040b0c:	10800604 	addi	r2,r2,24
 8040b10:	e0bff815 	stw	r2,-32(fp)
		Rectangle* paddles = (game -> paddles);
 8040b14:	e0bffb17 	ldw	r2,-20(fp)
 8040b18:	10800d04 	addi	r2,r2,52
 8040b1c:	e0bff915 	stw	r2,-28(fp)
		int* scores = (game -> scores);
 8040b20:	e0bffb17 	ldw	r2,-20(fp)
 8040b24:	10800204 	addi	r2,r2,8
 8040b28:	e0bffa15 	stw	r2,-24(fp)
		for(int i = 0; i< rect_len; i++) {
 8040b2c:	e03ff615 	stw	zero,-40(fp)
 8040b30:	0001f206 	br	80412fc <update_ball.3108+0x828>
			// Update position
			rect[i].x += rect[i].xspeed;
 8040b34:	e0bff617 	ldw	r2,-40(fp)
 8040b38:	01400704 	movi	r5,28
 8040b3c:	1009883a 	mov	r4,r2
 8040b40:	80418e00 	call	80418e0 <__mulsi3>
 8040b44:	1007883a 	mov	r3,r2
 8040b48:	e0bff817 	ldw	r2,-32(fp)
 8040b4c:	10e3883a 	add	r17,r2,r3
 8040b50:	e0bff617 	ldw	r2,-40(fp)
 8040b54:	01400704 	movi	r5,28
 8040b58:	1009883a 	mov	r4,r2
 8040b5c:	80418e00 	call	80418e0 <__mulsi3>
 8040b60:	1007883a 	mov	r3,r2
 8040b64:	e0bff817 	ldw	r2,-32(fp)
 8040b68:	10c5883a 	add	r2,r2,r3
 8040b6c:	14800017 	ldw	r18,0(r2)
 8040b70:	e0bff617 	ldw	r2,-40(fp)
 8040b74:	01400704 	movi	r5,28
 8040b78:	1009883a 	mov	r4,r2
 8040b7c:	80418e00 	call	80418e0 <__mulsi3>
 8040b80:	1007883a 	mov	r3,r2
 8040b84:	e0bff817 	ldw	r2,-32(fp)
 8040b88:	10c5883a 	add	r2,r2,r3
 8040b8c:	10800217 	ldw	r2,8(r2)
 8040b90:	9085883a 	add	r2,r18,r2
 8040b94:	88800015 	stw	r2,0(r17)
			rect[i].y += rect[i].yspeed;
 8040b98:	e0bff617 	ldw	r2,-40(fp)
 8040b9c:	01400704 	movi	r5,28
 8040ba0:	1009883a 	mov	r4,r2
 8040ba4:	80418e00 	call	80418e0 <__mulsi3>
 8040ba8:	1007883a 	mov	r3,r2
 8040bac:	e0bff817 	ldw	r2,-32(fp)
 8040bb0:	10e3883a 	add	r17,r2,r3
 8040bb4:	e0bff617 	ldw	r2,-40(fp)
 8040bb8:	01400704 	movi	r5,28
 8040bbc:	1009883a 	mov	r4,r2
 8040bc0:	80418e00 	call	80418e0 <__mulsi3>
 8040bc4:	1007883a 	mov	r3,r2
 8040bc8:	e0bff817 	ldw	r2,-32(fp)
 8040bcc:	10c5883a 	add	r2,r2,r3
 8040bd0:	14800117 	ldw	r18,4(r2)
 8040bd4:	e0bff617 	ldw	r2,-40(fp)
 8040bd8:	01400704 	movi	r5,28
 8040bdc:	1009883a 	mov	r4,r2
 8040be0:	80418e00 	call	80418e0 <__mulsi3>
 8040be4:	1007883a 	mov	r3,r2
 8040be8:	e0bff817 	ldw	r2,-32(fp)
 8040bec:	10c5883a 	add	r2,r2,r3
 8040bf0:	10800317 	ldw	r2,12(r2)
 8040bf4:	9085883a 	add	r2,r18,r2
 8040bf8:	88800115 	stw	r2,4(r17)
			// Check for collisions
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
 8040bfc:	e0bff617 	ldw	r2,-40(fp)
 8040c00:	01400704 	movi	r5,28
 8040c04:	1009883a 	mov	r4,r2
 8040c08:	80418e00 	call	80418e0 <__mulsi3>
 8040c0c:	1007883a 	mov	r3,r2
 8040c10:	e0bff817 	ldw	r2,-32(fp)
 8040c14:	10c5883a 	add	r2,r2,r3
 8040c18:	14400017 	ldw	r17,0(r2)
 8040c1c:	e0bff617 	ldw	r2,-40(fp)
 8040c20:	01400704 	movi	r5,28
 8040c24:	1009883a 	mov	r4,r2
 8040c28:	80418e00 	call	80418e0 <__mulsi3>
 8040c2c:	1007883a 	mov	r3,r2
 8040c30:	e0bff817 	ldw	r2,-32(fp)
 8040c34:	10c5883a 	add	r2,r2,r3
 8040c38:	10800417 	ldw	r2,16(r2)
 8040c3c:	8885883a 	add	r2,r17,r2
 8040c40:	10805008 	cmpgei	r2,r2,320
 8040c44:	1000151e 	bne	r2,zero,8040c9c <update_ball.3108+0x1c8>
 8040c48:	e0bff617 	ldw	r2,-40(fp)
 8040c4c:	01400704 	movi	r5,28
 8040c50:	1009883a 	mov	r4,r2
 8040c54:	80418e00 	call	80418e0 <__mulsi3>
 8040c58:	1007883a 	mov	r3,r2
 8040c5c:	e0bff817 	ldw	r2,-32(fp)
 8040c60:	10c5883a 	add	r2,r2,r3
 8040c64:	14400017 	ldw	r17,0(r2)
 8040c68:	e0bff617 	ldw	r2,-40(fp)
 8040c6c:	01400704 	movi	r5,28
 8040c70:	1009883a 	mov	r4,r2
 8040c74:	80418e00 	call	80418e0 <__mulsi3>
 8040c78:	1007883a 	mov	r3,r2
 8040c7c:	e0bff817 	ldw	r2,-32(fp)
 8040c80:	10c5883a 	add	r2,r2,r3
 8040c84:	10800417 	ldw	r2,16(r2)
 8040c88:	8887883a 	add	r3,r17,r2
 8040c8c:	e0bff917 	ldw	r2,-28(fp)
 8040c90:	10800704 	addi	r2,r2,28
 8040c94:	10800017 	ldw	r2,0(r2)
 8040c98:	18809716 	blt	r3,r2,8040ef8 <update_ball.3108+0x424>
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8040c9c:	e0bff617 	ldw	r2,-40(fp)
 8040ca0:	01400704 	movi	r5,28
 8040ca4:	1009883a 	mov	r4,r2
 8040ca8:	80418e00 	call	80418e0 <__mulsi3>
 8040cac:	1007883a 	mov	r3,r2
 8040cb0:	e0bff817 	ldw	r2,-32(fp)
 8040cb4:	10c5883a 	add	r2,r2,r3
 8040cb8:	14400117 	ldw	r17,4(r2)
 8040cbc:	e0bff617 	ldw	r2,-40(fp)
 8040cc0:	01400704 	movi	r5,28
 8040cc4:	1009883a 	mov	r4,r2
 8040cc8:	80418e00 	call	80418e0 <__mulsi3>
 8040ccc:	1007883a 	mov	r3,r2
 8040cd0:	e0bff817 	ldw	r2,-32(fp)
 8040cd4:	10c5883a 	add	r2,r2,r3
 8040cd8:	10800517 	ldw	r2,20(r2)
 8040cdc:	8887883a 	add	r3,r17,r2
 8040ce0:	e0bff917 	ldw	r2,-28(fp)
 8040ce4:	10800704 	addi	r2,r2,28
 8040ce8:	10800117 	ldw	r2,4(r2)
 8040cec:	18806016 	blt	r3,r2,8040e70 <update_ball.3108+0x39c>
 8040cf0:	e0bff617 	ldw	r2,-40(fp)
 8040cf4:	01400704 	movi	r5,28
 8040cf8:	1009883a 	mov	r4,r2
 8040cfc:	80418e00 	call	80418e0 <__mulsi3>
 8040d00:	1007883a 	mov	r3,r2
 8040d04:	e0bff817 	ldw	r2,-32(fp)
 8040d08:	10c5883a 	add	r2,r2,r3
 8040d0c:	10800117 	ldw	r2,4(r2)
 8040d10:	e0fff917 	ldw	r3,-28(fp)
 8040d14:	18c00704 	addi	r3,r3,28
 8040d18:	19000117 	ldw	r4,4(r3)
 8040d1c:	e0fff917 	ldw	r3,-28(fp)
 8040d20:	18c00704 	addi	r3,r3,28
 8040d24:	18c00517 	ldw	r3,20(r3)
 8040d28:	20c7883a 	add	r3,r4,r3
 8040d2c:	18805016 	blt	r3,r2,8040e70 <update_ball.3108+0x39c>
					collision_sound(); //play the collision sound
 8040d30:	8019883a 	mov	r12,r16
 8040d34:	8040a800 	call	8040a80 <collision_sound.3105>
					rect[i].x = paddles[1].x - rect[i].width;
 8040d38:	e0bff617 	ldw	r2,-40(fp)
 8040d3c:	01400704 	movi	r5,28
 8040d40:	1009883a 	mov	r4,r2
 8040d44:	80418e00 	call	80418e0 <__mulsi3>
 8040d48:	1007883a 	mov	r3,r2
 8040d4c:	e0bff817 	ldw	r2,-32(fp)
 8040d50:	10e3883a 	add	r17,r2,r3
 8040d54:	e0bff917 	ldw	r2,-28(fp)
 8040d58:	10800704 	addi	r2,r2,28
 8040d5c:	14800017 	ldw	r18,0(r2)
 8040d60:	e0bff617 	ldw	r2,-40(fp)
 8040d64:	01400704 	movi	r5,28
 8040d68:	1009883a 	mov	r4,r2
 8040d6c:	80418e00 	call	80418e0 <__mulsi3>
 8040d70:	1007883a 	mov	r3,r2
 8040d74:	e0bff817 	ldw	r2,-32(fp)
 8040d78:	10c5883a 	add	r2,r2,r3
 8040d7c:	10800417 	ldw	r2,16(r2)
 8040d80:	9085c83a 	sub	r2,r18,r2
 8040d84:	88800015 	stw	r2,0(r17)
					rect[i].xspeed*=-1; // Bounce
 8040d88:	e0bff617 	ldw	r2,-40(fp)
 8040d8c:	01400704 	movi	r5,28
 8040d90:	1009883a 	mov	r4,r2
 8040d94:	80418e00 	call	80418e0 <__mulsi3>
 8040d98:	1007883a 	mov	r3,r2
 8040d9c:	e0bff817 	ldw	r2,-32(fp)
 8040da0:	10e3883a 	add	r17,r2,r3
 8040da4:	e0bff617 	ldw	r2,-40(fp)
 8040da8:	01400704 	movi	r5,28
 8040dac:	1009883a 	mov	r4,r2
 8040db0:	80418e00 	call	80418e0 <__mulsi3>
 8040db4:	1007883a 	mov	r3,r2
 8040db8:	e0bff817 	ldw	r2,-32(fp)
 8040dbc:	10c5883a 	add	r2,r2,r3
 8040dc0:	10800217 	ldw	r2,8(r2)
 8040dc4:	0085c83a 	sub	r2,zero,r2
 8040dc8:	88800215 	stw	r2,8(r17)
					if(sign(rect[i].yspeed)!=sign(paddles[1].yspeed)&& paddles[1].yspeed!=0) // Ball bounces in direction of paddle movement
 8040dcc:	e0bff617 	ldw	r2,-40(fp)
 8040dd0:	01400704 	movi	r5,28
 8040dd4:	1009883a 	mov	r4,r2
 8040dd8:	80418e00 	call	80418e0 <__mulsi3>
 8040ddc:	1007883a 	mov	r3,r2
 8040de0:	e0bff817 	ldw	r2,-32(fp)
 8040de4:	10c5883a 	add	r2,r2,r3
 8040de8:	10800317 	ldw	r2,12(r2)
 8040dec:	8019883a 	mov	r12,r16
 8040df0:	1009883a 	mov	r4,r2
 8040df4:	8040a480 	call	8040a48 <sign.3103>
 8040df8:	1023883a 	mov	r17,r2
 8040dfc:	e0bff917 	ldw	r2,-28(fp)
 8040e00:	10800704 	addi	r2,r2,28
 8040e04:	10800317 	ldw	r2,12(r2)
 8040e08:	8019883a 	mov	r12,r16
 8040e0c:	1009883a 	mov	r4,r2
 8040e10:	8040a480 	call	8040a48 <sign.3103>
 8040e14:	88803626 	beq	r17,r2,8040ef0 <update_ball.3108+0x41c>
 8040e18:	e0bff917 	ldw	r2,-28(fp)
 8040e1c:	10800704 	addi	r2,r2,28
 8040e20:	10800317 	ldw	r2,12(r2)
 8040e24:	10003226 	beq	r2,zero,8040ef0 <update_ball.3108+0x41c>
						rect[i].yspeed*=-1;
 8040e28:	e0bff617 	ldw	r2,-40(fp)
 8040e2c:	01400704 	movi	r5,28
 8040e30:	1009883a 	mov	r4,r2
 8040e34:	80418e00 	call	80418e0 <__mulsi3>
 8040e38:	1007883a 	mov	r3,r2
 8040e3c:	e0bff817 	ldw	r2,-32(fp)
 8040e40:	10e3883a 	add	r17,r2,r3
 8040e44:	e0bff617 	ldw	r2,-40(fp)
 8040e48:	01400704 	movi	r5,28
 8040e4c:	1009883a 	mov	r4,r2
 8040e50:	80418e00 	call	80418e0 <__mulsi3>
 8040e54:	1007883a 	mov	r3,r2
 8040e58:	e0bff817 	ldw	r2,-32(fp)
 8040e5c:	10c5883a 	add	r2,r2,r3
 8040e60:	10800317 	ldw	r2,12(r2)
 8040e64:	0085c83a 	sub	r2,zero,r2
 8040e68:	88800315 	stw	r2,12(r17)
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
					collision_sound(); //play the collision sound
					rect[i].x = paddles[1].x - rect[i].width;
					rect[i].xspeed*=-1; // Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[1].yspeed)&& paddles[1].yspeed!=0) // Ball bounces in direction of paddle movement
 8040e6c:	00002006 	br	8040ef0 <update_ball.3108+0x41c>
						rect[i].yspeed*=-1;
				}
				else { // Goal - player 1 scored
					// Reset ball position
					rect[i].x = BALL_XDEFAULT;
 8040e70:	e0bff617 	ldw	r2,-40(fp)
 8040e74:	01400704 	movi	r5,28
 8040e78:	1009883a 	mov	r4,r2
 8040e7c:	80418e00 	call	80418e0 <__mulsi3>
 8040e80:	1007883a 	mov	r3,r2
 8040e84:	e0bff817 	ldw	r2,-32(fp)
 8040e88:	10c5883a 	add	r2,r2,r3
 8040e8c:	00c02804 	movi	r3,160
 8040e90:	10c00015 	stw	r3,0(r2)
					rect[i].xspeed*=-1;
 8040e94:	e0bff617 	ldw	r2,-40(fp)
 8040e98:	01400704 	movi	r5,28
 8040e9c:	1009883a 	mov	r4,r2
 8040ea0:	80418e00 	call	80418e0 <__mulsi3>
 8040ea4:	1007883a 	mov	r3,r2
 8040ea8:	e0bff817 	ldw	r2,-32(fp)
 8040eac:	10e3883a 	add	r17,r2,r3
 8040eb0:	e0bff617 	ldw	r2,-40(fp)
 8040eb4:	01400704 	movi	r5,28
 8040eb8:	1009883a 	mov	r4,r2
 8040ebc:	80418e00 	call	80418e0 <__mulsi3>
 8040ec0:	1007883a 	mov	r3,r2
 8040ec4:	e0bff817 	ldw	r2,-32(fp)
 8040ec8:	10c5883a 	add	r2,r2,r3
 8040ecc:	10800217 	ldw	r2,8(r2)
 8040ed0:	0085c83a 	sub	r2,zero,r2
 8040ed4:	88800215 	stw	r2,8(r17)
					// Add 1 to left player's score
					scores[0] += 1;
 8040ed8:	e0bffa17 	ldw	r2,-24(fp)
 8040edc:	10800017 	ldw	r2,0(r2)
 8040ee0:	10c00044 	addi	r3,r2,1
 8040ee4:	e0bffa17 	ldw	r2,-24(fp)
 8040ee8:	10c00015 	stw	r3,0(r2)
			rect[i].x += rect[i].xspeed;
			rect[i].y += rect[i].yspeed;
			// Check for collisions
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8040eec:	00010006 	br	80412f0 <update_ball.3108+0x81c>
					collision_sound(); //play the collision sound
					rect[i].x = paddles[1].x - rect[i].width;
					rect[i].xspeed*=-1; // Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[1].yspeed)&& paddles[1].yspeed!=0) // Ball bounces in direction of paddle movement
 8040ef0:	0001883a 	nop
			rect[i].x += rect[i].xspeed;
			rect[i].y += rect[i].yspeed;
			// Check for collisions
			if(rect[i].x + rect[i].width >= SCREEN_WIDTH || rect[i].x + rect[i].width >= paddles[1].x) {
				// Collision with right paddle
				if(rect[i].y + rect[i].height >= paddles[1].y && rect[i].y <= paddles[1].y + paddles[1].height) {
 8040ef4:	0000fe06 	br	80412f0 <update_ball.3108+0x81c>
					rect[i].xspeed*=-1;
					// Add 1 to left player's score
					scores[0] += 1;
				}
			}
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
 8040ef8:	e0bff617 	ldw	r2,-40(fp)
 8040efc:	01400704 	movi	r5,28
 8040f00:	1009883a 	mov	r4,r2
 8040f04:	80418e00 	call	80418e0 <__mulsi3>
 8040f08:	1007883a 	mov	r3,r2
 8040f0c:	e0bff817 	ldw	r2,-32(fp)
 8040f10:	10c5883a 	add	r2,r2,r3
 8040f14:	10800017 	ldw	r2,0(r2)
 8040f18:	00800b0e 	bge	zero,r2,8040f48 <update_ball.3108+0x474>
 8040f1c:	e0bff617 	ldw	r2,-40(fp)
 8040f20:	01400704 	movi	r5,28
 8040f24:	1009883a 	mov	r4,r2
 8040f28:	80418e00 	call	80418e0 <__mulsi3>
 8040f2c:	1007883a 	mov	r3,r2
 8040f30:	e0bff817 	ldw	r2,-32(fp)
 8040f34:	10c5883a 	add	r2,r2,r3
 8040f38:	10800017 	ldw	r2,0(r2)
 8040f3c:	e0fff917 	ldw	r3,-28(fp)
 8040f40:	18c00417 	ldw	r3,16(r3)
 8040f44:	18808d16 	blt	r3,r2,804117c <update_ball.3108+0x6a8>
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8040f48:	e0bff617 	ldw	r2,-40(fp)
 8040f4c:	01400704 	movi	r5,28
 8040f50:	1009883a 	mov	r4,r2
 8040f54:	80418e00 	call	80418e0 <__mulsi3>
 8040f58:	1007883a 	mov	r3,r2
 8040f5c:	e0bff817 	ldw	r2,-32(fp)
 8040f60:	10c5883a 	add	r2,r2,r3
 8040f64:	14400117 	ldw	r17,4(r2)
 8040f68:	e0bff617 	ldw	r2,-40(fp)
 8040f6c:	01400704 	movi	r5,28
 8040f70:	1009883a 	mov	r4,r2
 8040f74:	80418e00 	call	80418e0 <__mulsi3>
 8040f78:	1007883a 	mov	r3,r2
 8040f7c:	e0bff817 	ldw	r2,-32(fp)
 8040f80:	10c5883a 	add	r2,r2,r3
 8040f84:	10800517 	ldw	r2,20(r2)
 8040f88:	8887883a 	add	r3,r17,r2
 8040f8c:	e0bff917 	ldw	r2,-28(fp)
 8040f90:	10800117 	ldw	r2,4(r2)
 8040f94:	18805516 	blt	r3,r2,80410ec <update_ball.3108+0x618>
 8040f98:	e0bff617 	ldw	r2,-40(fp)
 8040f9c:	01400704 	movi	r5,28
 8040fa0:	1009883a 	mov	r4,r2
 8040fa4:	80418e00 	call	80418e0 <__mulsi3>
 8040fa8:	1007883a 	mov	r3,r2
 8040fac:	e0bff817 	ldw	r2,-32(fp)
 8040fb0:	10c5883a 	add	r2,r2,r3
 8040fb4:	10800117 	ldw	r2,4(r2)
 8040fb8:	e0fff917 	ldw	r3,-28(fp)
 8040fbc:	19000117 	ldw	r4,4(r3)
 8040fc0:	e0fff917 	ldw	r3,-28(fp)
 8040fc4:	18c00517 	ldw	r3,20(r3)
 8040fc8:	20c7883a 	add	r3,r4,r3
 8040fcc:	18804716 	blt	r3,r2,80410ec <update_ball.3108+0x618>
					collision_sound(); //play the collision sound
 8040fd0:	8019883a 	mov	r12,r16
 8040fd4:	8040a800 	call	8040a80 <collision_sound.3105>
					rect[i].x = paddles[0].x + paddles[0].width;
 8040fd8:	e0bff617 	ldw	r2,-40(fp)
 8040fdc:	01400704 	movi	r5,28
 8040fe0:	1009883a 	mov	r4,r2
 8040fe4:	80418e00 	call	80418e0 <__mulsi3>
 8040fe8:	1007883a 	mov	r3,r2
 8040fec:	e0bff817 	ldw	r2,-32(fp)
 8040ff0:	10c5883a 	add	r2,r2,r3
 8040ff4:	e0fff917 	ldw	r3,-28(fp)
 8040ff8:	19000017 	ldw	r4,0(r3)
 8040ffc:	e0fff917 	ldw	r3,-28(fp)
 8041000:	18c00417 	ldw	r3,16(r3)
 8041004:	20c7883a 	add	r3,r4,r3
 8041008:	10c00015 	stw	r3,0(r2)
					rect[i].xspeed*=-1; //Bounce
 804100c:	e0bff617 	ldw	r2,-40(fp)
 8041010:	01400704 	movi	r5,28
 8041014:	1009883a 	mov	r4,r2
 8041018:	80418e00 	call	80418e0 <__mulsi3>
 804101c:	1007883a 	mov	r3,r2
 8041020:	e0bff817 	ldw	r2,-32(fp)
 8041024:	10e3883a 	add	r17,r2,r3
 8041028:	e0bff617 	ldw	r2,-40(fp)
 804102c:	01400704 	movi	r5,28
 8041030:	1009883a 	mov	r4,r2
 8041034:	80418e00 	call	80418e0 <__mulsi3>
 8041038:	1007883a 	mov	r3,r2
 804103c:	e0bff817 	ldw	r2,-32(fp)
 8041040:	10c5883a 	add	r2,r2,r3
 8041044:	10800217 	ldw	r2,8(r2)
 8041048:	0085c83a 	sub	r2,zero,r2
 804104c:	88800215 	stw	r2,8(r17)
					if(sign(rect[i].yspeed)!=sign(paddles[0].yspeed) && paddles[0].yspeed!=0) // Ball bounces in direction of paddle movement
 8041050:	e0bff617 	ldw	r2,-40(fp)
 8041054:	01400704 	movi	r5,28
 8041058:	1009883a 	mov	r4,r2
 804105c:	80418e00 	call	80418e0 <__mulsi3>
 8041060:	1007883a 	mov	r3,r2
 8041064:	e0bff817 	ldw	r2,-32(fp)
 8041068:	10c5883a 	add	r2,r2,r3
 804106c:	10800317 	ldw	r2,12(r2)
 8041070:	8019883a 	mov	r12,r16
 8041074:	1009883a 	mov	r4,r2
 8041078:	8040a480 	call	8040a48 <sign.3103>
 804107c:	1023883a 	mov	r17,r2
 8041080:	e0bff917 	ldw	r2,-28(fp)
 8041084:	10800317 	ldw	r2,12(r2)
 8041088:	8019883a 	mov	r12,r16
 804108c:	1009883a 	mov	r4,r2
 8041090:	8040a480 	call	8040a48 <sign.3103>
 8041094:	88803726 	beq	r17,r2,8041174 <update_ball.3108+0x6a0>
 8041098:	e0bff917 	ldw	r2,-28(fp)
 804109c:	10800317 	ldw	r2,12(r2)
 80410a0:	10003426 	beq	r2,zero,8041174 <update_ball.3108+0x6a0>
						rect[i].yspeed*=-1;
 80410a4:	e0bff617 	ldw	r2,-40(fp)
 80410a8:	01400704 	movi	r5,28
 80410ac:	1009883a 	mov	r4,r2
 80410b0:	80418e00 	call	80418e0 <__mulsi3>
 80410b4:	1007883a 	mov	r3,r2
 80410b8:	e0bff817 	ldw	r2,-32(fp)
 80410bc:	10e3883a 	add	r17,r2,r3
 80410c0:	e0bff617 	ldw	r2,-40(fp)
 80410c4:	01400704 	movi	r5,28
 80410c8:	1009883a 	mov	r4,r2
 80410cc:	80418e00 	call	80418e0 <__mulsi3>
 80410d0:	1007883a 	mov	r3,r2
 80410d4:	e0bff817 	ldw	r2,-32(fp)
 80410d8:	10c5883a 	add	r2,r2,r3
 80410dc:	10800317 	ldw	r2,12(r2)
 80410e0:	0085c83a 	sub	r2,zero,r2
 80410e4:	88800315 	stw	r2,12(r17)
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
					collision_sound(); //play the collision sound
					rect[i].x = paddles[0].x + paddles[0].width;
					rect[i].xspeed*=-1; //Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[0].yspeed) && paddles[0].yspeed!=0) // Ball bounces in direction of paddle movement
 80410e8:	00002206 	br	8041174 <update_ball.3108+0x6a0>
						rect[i].yspeed*=-1;
				}
				else { // Goal - player 2 scored
					// Reset ball position
					rect[i].x = BALL_XDEFAULT;
 80410ec:	e0bff617 	ldw	r2,-40(fp)
 80410f0:	01400704 	movi	r5,28
 80410f4:	1009883a 	mov	r4,r2
 80410f8:	80418e00 	call	80418e0 <__mulsi3>
 80410fc:	1007883a 	mov	r3,r2
 8041100:	e0bff817 	ldw	r2,-32(fp)
 8041104:	10c5883a 	add	r2,r2,r3
 8041108:	00c02804 	movi	r3,160
 804110c:	10c00015 	stw	r3,0(r2)
					rect[i].xspeed*=-1;
 8041110:	e0bff617 	ldw	r2,-40(fp)
 8041114:	01400704 	movi	r5,28
 8041118:	1009883a 	mov	r4,r2
 804111c:	80418e00 	call	80418e0 <__mulsi3>
 8041120:	1007883a 	mov	r3,r2
 8041124:	e0bff817 	ldw	r2,-32(fp)
 8041128:	10e3883a 	add	r17,r2,r3
 804112c:	e0bff617 	ldw	r2,-40(fp)
 8041130:	01400704 	movi	r5,28
 8041134:	1009883a 	mov	r4,r2
 8041138:	80418e00 	call	80418e0 <__mulsi3>
 804113c:	1007883a 	mov	r3,r2
 8041140:	e0bff817 	ldw	r2,-32(fp)
 8041144:	10c5883a 	add	r2,r2,r3
 8041148:	10800217 	ldw	r2,8(r2)
 804114c:	0085c83a 	sub	r2,zero,r2
 8041150:	88800215 	stw	r2,8(r17)
					// Add 1 to right player's score
					scores[1] += 1;
 8041154:	e0bffa17 	ldw	r2,-24(fp)
 8041158:	10800104 	addi	r2,r2,4
 804115c:	e0fffa17 	ldw	r3,-24(fp)
 8041160:	18c00104 	addi	r3,r3,4
 8041164:	18c00017 	ldw	r3,0(r3)
 8041168:	18c00044 	addi	r3,r3,1
 804116c:	10c00015 	stw	r3,0(r2)
					scores[0] += 1;
				}
			}
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8041170:	00005f06 	br	80412f0 <update_ball.3108+0x81c>
					collision_sound(); //play the collision sound
					rect[i].x = paddles[0].x + paddles[0].width;
					rect[i].xspeed*=-1; //Bounce
					if(sign(rect[i].yspeed)!=sign(paddles[0].yspeed) && paddles[0].yspeed!=0) // Ball bounces in direction of paddle movement
 8041174:	0001883a 	nop
					scores[0] += 1;
				}
			}
			else if (rect[i].x <= 0 || rect[i].x <= paddles[0].width) {
				// Collision with left paddle
				if(rect[i].y + rect[i].height >= paddles[0].y && rect[i].y <= paddles[0].y + paddles[0].height) {
 8041178:	00005d06 	br	80412f0 <update_ball.3108+0x81c>
					rect[i].xspeed*=-1;
					// Add 1 to right player's score
					scores[1] += 1;
				}
			}
			else if (rect[i].y + rect[i].height >= SCREEN_HEIGHT) { // Collisions with top/bottom screen
 804117c:	e0bff617 	ldw	r2,-40(fp)
 8041180:	01400704 	movi	r5,28
 8041184:	1009883a 	mov	r4,r2
 8041188:	80418e00 	call	80418e0 <__mulsi3>
 804118c:	1007883a 	mov	r3,r2
 8041190:	e0bff817 	ldw	r2,-32(fp)
 8041194:	10c5883a 	add	r2,r2,r3
 8041198:	14400117 	ldw	r17,4(r2)
 804119c:	e0bff617 	ldw	r2,-40(fp)
 80411a0:	01400704 	movi	r5,28
 80411a4:	1009883a 	mov	r4,r2
 80411a8:	80418e00 	call	80418e0 <__mulsi3>
 80411ac:	1007883a 	mov	r3,r2
 80411b0:	e0bff817 	ldw	r2,-32(fp)
 80411b4:	10c5883a 	add	r2,r2,r3
 80411b8:	10800517 	ldw	r2,20(r2)
 80411bc:	8885883a 	add	r2,r17,r2
 80411c0:	10803c10 	cmplti	r2,r2,240
 80411c4:	1000261e 	bne	r2,zero,8041260 <update_ball.3108+0x78c>
				rect[i].y = SCREEN_HEIGHT - rect[i].height;
 80411c8:	e0bff617 	ldw	r2,-40(fp)
 80411cc:	01400704 	movi	r5,28
 80411d0:	1009883a 	mov	r4,r2
 80411d4:	80418e00 	call	80418e0 <__mulsi3>
 80411d8:	1007883a 	mov	r3,r2
 80411dc:	e0bff817 	ldw	r2,-32(fp)
 80411e0:	10e3883a 	add	r17,r2,r3
 80411e4:	e0bff617 	ldw	r2,-40(fp)
 80411e8:	01400704 	movi	r5,28
 80411ec:	1009883a 	mov	r4,r2
 80411f0:	80418e00 	call	80418e0 <__mulsi3>
 80411f4:	1007883a 	mov	r3,r2
 80411f8:	e0bff817 	ldw	r2,-32(fp)
 80411fc:	10c5883a 	add	r2,r2,r3
 8041200:	10800517 	ldw	r2,20(r2)
 8041204:	00c03c04 	movi	r3,240
 8041208:	1885c83a 	sub	r2,r3,r2
 804120c:	88800115 	stw	r2,4(r17)
				rect[i].yspeed *= -1;
 8041210:	e0bff617 	ldw	r2,-40(fp)
 8041214:	01400704 	movi	r5,28
 8041218:	1009883a 	mov	r4,r2
 804121c:	80418e00 	call	80418e0 <__mulsi3>
 8041220:	1007883a 	mov	r3,r2
 8041224:	e0bff817 	ldw	r2,-32(fp)
 8041228:	10e3883a 	add	r17,r2,r3
 804122c:	e0bff617 	ldw	r2,-40(fp)
 8041230:	01400704 	movi	r5,28
 8041234:	1009883a 	mov	r4,r2
 8041238:	80418e00 	call	80418e0 <__mulsi3>
 804123c:	1007883a 	mov	r3,r2
 8041240:	e0bff817 	ldw	r2,-32(fp)
 8041244:	10c5883a 	add	r2,r2,r3
 8041248:	10800317 	ldw	r2,12(r2)
 804124c:	0085c83a 	sub	r2,zero,r2
 8041250:	88800315 	stw	r2,12(r17)
				collision_sound();
 8041254:	8019883a 	mov	r12,r16
 8041258:	8040a800 	call	8040a80 <collision_sound.3105>
 804125c:	00002406 	br	80412f0 <update_ball.3108+0x81c>
			}
			else if (rect[i].y <= 0) {
 8041260:	e0bff617 	ldw	r2,-40(fp)
 8041264:	01400704 	movi	r5,28
 8041268:	1009883a 	mov	r4,r2
 804126c:	80418e00 	call	80418e0 <__mulsi3>
 8041270:	1007883a 	mov	r3,r2
 8041274:	e0bff817 	ldw	r2,-32(fp)
 8041278:	10c5883a 	add	r2,r2,r3
 804127c:	10800117 	ldw	r2,4(r2)
 8041280:	00801b16 	blt	zero,r2,80412f0 <update_ball.3108+0x81c>
				rect[i].y = 0;
 8041284:	e0bff617 	ldw	r2,-40(fp)
 8041288:	01400704 	movi	r5,28
 804128c:	1009883a 	mov	r4,r2
 8041290:	80418e00 	call	80418e0 <__mulsi3>
 8041294:	1007883a 	mov	r3,r2
 8041298:	e0bff817 	ldw	r2,-32(fp)
 804129c:	10c5883a 	add	r2,r2,r3
 80412a0:	10000115 	stw	zero,4(r2)
				rect[i].yspeed *= -1;
 80412a4:	e0bff617 	ldw	r2,-40(fp)
 80412a8:	01400704 	movi	r5,28
 80412ac:	1009883a 	mov	r4,r2
 80412b0:	80418e00 	call	80418e0 <__mulsi3>
 80412b4:	1007883a 	mov	r3,r2
 80412b8:	e0bff817 	ldw	r2,-32(fp)
 80412bc:	10e3883a 	add	r17,r2,r3
 80412c0:	e0bff617 	ldw	r2,-40(fp)
 80412c4:	01400704 	movi	r5,28
 80412c8:	1009883a 	mov	r4,r2
 80412cc:	80418e00 	call	80418e0 <__mulsi3>
 80412d0:	1007883a 	mov	r3,r2
 80412d4:	e0bff817 	ldw	r2,-32(fp)
 80412d8:	10c5883a 	add	r2,r2,r3
 80412dc:	10800317 	ldw	r2,12(r2)
 80412e0:	0085c83a 	sub	r2,zero,r2
 80412e4:	88800315 	stw	r2,12(r17)
				collision_sound();
 80412e8:	8019883a 	mov	r12,r16
 80412ec:	8040a800 	call	8040a80 <collision_sound.3105>
	void update_ball(Game* game) {
		int rect_len = (game -> balls_len);
		Rectangle* rect = (game -> balls);
		Rectangle* paddles = (game -> paddles);
		int* scores = (game -> scores);
		for(int i = 0; i< rect_len; i++) {
 80412f0:	e0bff617 	ldw	r2,-40(fp)
 80412f4:	10800044 	addi	r2,r2,1
 80412f8:	e0bff615 	stw	r2,-40(fp)
 80412fc:	e0fff617 	ldw	r3,-40(fp)
 8041300:	e0bff717 	ldw	r2,-36(fp)
 8041304:	18be0b16 	blt	r3,r2,8040b34 <__alt_data_end+0xfffd8a94>
				rect[i].y = 0;
				rect[i].yspeed *= -1;
				collision_sound();
			}
		}
	}
 8041308:	0001883a 	nop
 804130c:	e6fffd04 	addi	sp,fp,-12
 8041310:	dfc00417 	ldw	ra,16(sp)
 8041314:	df000317 	ldw	fp,12(sp)
 8041318:	dc800217 	ldw	r18,8(sp)
 804131c:	dc400117 	ldw	r17,4(sp)
 8041320:	dc000017 	ldw	r16,0(sp)
 8041324:	dec00504 	addi	sp,sp,20
 8041328:	f800283a 	ret

0804132c <clear.3121>:
	void clear(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, alt_up_char_buffer_dev * char_buf_dev,int buffer) {
 804132c:	defffa04 	addi	sp,sp,-24
 8041330:	dfc00515 	stw	ra,20(sp)
 8041334:	df000415 	stw	fp,16(sp)
 8041338:	df000404 	addi	fp,sp,16
 804133c:	e13ffc15 	stw	r4,-16(fp)
 8041340:	e17ffd15 	stw	r5,-12(fp)
 8041344:	e1bffe15 	stw	r6,-8(fp)
 8041348:	e33fff15 	stw	r12,-4(fp)
		// Clear the screen
		alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, buffer);
 804134c:	e17ffe17 	ldw	r5,-8(fp)
 8041350:	e13ffc17 	ldw	r4,-16(fp)
 8041354:	80513640 	call	8051364 <alt_up_pixel_buffer_dma_clear_screen>
		alt_up_char_buffer_clear(char_buf_dev);
 8041358:	e13ffd17 	ldw	r4,-12(fp)
 804135c:	80510340 	call	8051034 <alt_up_char_buffer_clear>
	}
 8041360:	0001883a 	nop
 8041364:	e037883a 	mov	sp,fp
 8041368:	dfc00117 	ldw	ra,4(sp)
 804136c:	df000017 	ldw	fp,0(sp)
 8041370:	dec00204 	addi	sp,sp,8
 8041374:	f800283a 	ret

08041378 <draw.3128>:
	// Renders game components on the screen
	void draw(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer, Rectangle rect[], int len) {
 8041378:	defff104 	addi	sp,sp,-60
 804137c:	dfc00e15 	stw	ra,56(sp)
 8041380:	df000d15 	stw	fp,52(sp)
 8041384:	dcc00c15 	stw	r19,48(sp)
 8041388:	dc800b15 	stw	r18,44(sp)
 804138c:	dc400a15 	stw	r17,40(sp)
 8041390:	dc000915 	stw	r16,36(sp)
 8041394:	df000d04 	addi	fp,sp,52
 8041398:	e13ff715 	stw	r4,-36(fp)
 804139c:	e17ff815 	stw	r5,-32(fp)
 80413a0:	e1bff915 	stw	r6,-28(fp)
 80413a4:	e1fffa15 	stw	r7,-24(fp)
 80413a8:	e33ffb15 	stw	r12,-20(fp)
		// Draw each rectangle
		for(int i = 0; i<len; i++) {
 80413ac:	e03ff615 	stw	zero,-40(fp)
 80413b0:	00004106 	br	80414b8 <draw.3128+0x140>
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80413b4:	e0bff617 	ldw	r2,-40(fp)
 80413b8:	01400704 	movi	r5,28
 80413bc:	1009883a 	mov	r4,r2
 80413c0:	80418e00 	call	80418e0 <__mulsi3>
 80413c4:	1007883a 	mov	r3,r2
 80413c8:	e0bffa17 	ldw	r2,-24(fp)
 80413cc:	10c5883a 	add	r2,r2,r3
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 80413d0:	14400017 	ldw	r17,0(r2)
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80413d4:	e0bff617 	ldw	r2,-40(fp)
 80413d8:	01400704 	movi	r5,28
 80413dc:	1009883a 	mov	r4,r2
 80413e0:	80418e00 	call	80418e0 <__mulsi3>
 80413e4:	1007883a 	mov	r3,r2
 80413e8:	e0bffa17 	ldw	r2,-24(fp)
 80413ec:	10c5883a 	add	r2,r2,r3
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 80413f0:	14800117 	ldw	r18,4(r2)
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
 80413f4:	e0bff617 	ldw	r2,-40(fp)
 80413f8:	01400704 	movi	r5,28
 80413fc:	1009883a 	mov	r4,r2
 8041400:	80418e00 	call	80418e0 <__mulsi3>
 8041404:	1007883a 	mov	r3,r2
 8041408:	e0bffa17 	ldw	r2,-24(fp)
 804140c:	10c5883a 	add	r2,r2,r3
 8041410:	14000017 	ldw	r16,0(r2)
 8041414:	e0bff617 	ldw	r2,-40(fp)
 8041418:	01400704 	movi	r5,28
 804141c:	1009883a 	mov	r4,r2
 8041420:	80418e00 	call	80418e0 <__mulsi3>
 8041424:	1007883a 	mov	r3,r2
 8041428:	e0bffa17 	ldw	r2,-24(fp)
 804142c:	10c5883a 	add	r2,r2,r3
 8041430:	10800417 	ldw	r2,16(r2)
 8041434:	8085883a 	add	r2,r16,r2
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8041438:	14ffffc4 	addi	r19,r2,-1
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
					rect[i].y + rect[i].height - 1,
 804143c:	e0bff617 	ldw	r2,-40(fp)
 8041440:	01400704 	movi	r5,28
 8041444:	1009883a 	mov	r4,r2
 8041448:	80418e00 	call	80418e0 <__mulsi3>
 804144c:	1007883a 	mov	r3,r2
 8041450:	e0bffa17 	ldw	r2,-24(fp)
 8041454:	10c5883a 	add	r2,r2,r3
 8041458:	14000117 	ldw	r16,4(r2)
 804145c:	e0bff617 	ldw	r2,-40(fp)
 8041460:	01400704 	movi	r5,28
 8041464:	1009883a 	mov	r4,r2
 8041468:	80418e00 	call	80418e0 <__mulsi3>
 804146c:	1007883a 	mov	r3,r2
 8041470:	e0bffa17 	ldw	r2,-24(fp)
 8041474:	10c5883a 	add	r2,r2,r3
 8041478:	10800517 	ldw	r2,20(r2)
 804147c:	8085883a 	add	r2,r16,r2
	//			for(int y = rect[i].y; y<rect[i].y + rect[i].height; y++) {
	//				alt_up_pixel_buffer_dma_draw(pixel_buf_dma_dev, colour, x, y);
	//			}
	//		}

			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
 8041480:	10bfffc4 	addi	r2,r2,-1
 8041484:	e0fff917 	ldw	r3,-28(fp)
 8041488:	d8c00215 	stw	r3,8(sp)
 804148c:	e0fff817 	ldw	r3,-32(fp)
 8041490:	d8c00115 	stw	r3,4(sp)
 8041494:	d8800015 	stw	r2,0(sp)
 8041498:	980f883a 	mov	r7,r19
 804149c:	900d883a 	mov	r6,r18
 80414a0:	880b883a 	mov	r5,r17
 80414a4:	e13ff717 	ldw	r4,-36(fp)
 80414a8:	80514a00 	call	80514a0 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_char_buffer_clear(char_buf_dev);
	}
	// Renders game components on the screen
	void draw(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev,int colour, int buffer, Rectangle rect[], int len) {
		// Draw each rectangle
		for(int i = 0; i<len; i++) {
 80414ac:	e0bff617 	ldw	r2,-40(fp)
 80414b0:	10800044 	addi	r2,r2,1
 80414b4:	e0bff615 	stw	r2,-40(fp)
 80414b8:	e0fff617 	ldw	r3,-40(fp)
 80414bc:	e0800217 	ldw	r2,8(fp)
 80414c0:	18bfbc16 	blt	r3,r2,80413b4 <__alt_data_end+0xfffd9314>
			alt_up_pixel_buffer_dma_draw_box (pixel_buf_dma_dev,
					rect[i].x, rect[i].y, rect[i].x + rect[i].width - 1,
					rect[i].y + rect[i].height - 1,
					colour, buffer);
		}
	}
 80414c4:	0001883a 	nop
 80414c8:	e6fffc04 	addi	sp,fp,-16
 80414cc:	dfc00517 	ldw	ra,20(sp)
 80414d0:	df000417 	ldw	fp,16(sp)
 80414d4:	dcc00317 	ldw	r19,12(sp)
 80414d8:	dc800217 	ldw	r18,8(sp)
 80414dc:	dc400117 	ldw	r17,4(sp)
 80414e0:	dc000017 	ldw	r16,0(sp)
 80414e4:	dec00604 	addi	sp,sp,24
 80414e8:	f800283a 	ret

080414ec <get_user_input.3135>:
	void get_user_input(Game* game) {
 80414ec:	defffa04 	addi	sp,sp,-24
 80414f0:	df000515 	stw	fp,20(sp)
 80414f4:	df000504 	addi	fp,sp,20
 80414f8:	e13ffe15 	stw	r4,-8(fp)
 80414fc:	e33fff15 	stw	r12,-4(fp)
		int SW = IORD(SW_BASE, 0);
 8041500:	00820234 	movhi	r2,2056
 8041504:	108c9804 	addi	r2,r2,12896
 8041508:	10800037 	ldwio	r2,0(r2)
 804150c:	e0bffc15 	stw	r2,-16(fp)
		int* user_input = game->user_input;
 8041510:	e0bffe17 	ldw	r2,-8(fp)
 8041514:	10801f04 	addi	r2,r2,124
 8041518:	e0bffd15 	stw	r2,-12(fp)
		for(int i = 0; i<8; i++) {
 804151c:	e03ffb15 	stw	zero,-20(fp)
 8041520:	00000f06 	br	8041560 <get_user_input.3135+0x74>
			user_input[i] = (0b1 << i) & SW;
 8041524:	e0bffb17 	ldw	r2,-20(fp)
 8041528:	1085883a 	add	r2,r2,r2
 804152c:	1085883a 	add	r2,r2,r2
 8041530:	1007883a 	mov	r3,r2
 8041534:	e0bffd17 	ldw	r2,-12(fp)
 8041538:	10c5883a 	add	r2,r2,r3
 804153c:	01000044 	movi	r4,1
 8041540:	e0fffb17 	ldw	r3,-20(fp)
 8041544:	20c8983a 	sll	r4,r4,r3
 8041548:	e0fffc17 	ldw	r3,-16(fp)
 804154c:	20c6703a 	and	r3,r4,r3
 8041550:	10c00015 	stw	r3,0(r2)
		}
	}
	void get_user_input(Game* game) {
		int SW = IORD(SW_BASE, 0);
		int* user_input = game->user_input;
		for(int i = 0; i<8; i++) {
 8041554:	e0bffb17 	ldw	r2,-20(fp)
 8041558:	10800044 	addi	r2,r2,1
 804155c:	e0bffb15 	stw	r2,-20(fp)
 8041560:	e0bffb17 	ldw	r2,-20(fp)
 8041564:	10800210 	cmplti	r2,r2,8
 8041568:	103fee1e 	bne	r2,zero,8041524 <__alt_data_end+0xfffd9484>
			user_input[i] = (0b1 << i) & SW;
		}
	}
 804156c:	0001883a 	nop
 8041570:	e037883a 	mov	sp,fp
 8041574:	df000017 	ldw	fp,0(sp)
 8041578:	dec00104 	addi	sp,sp,4
 804157c:	f800283a 	ret

08041580 <reset_game.3144>:
	void reset_game(Game* game) {
 8041580:	defffb04 	addi	sp,sp,-20
 8041584:	dfc00415 	stw	ra,16(sp)
 8041588:	df000315 	stw	fp,12(sp)
 804158c:	df000304 	addi	fp,sp,12
 8041590:	e13ffe15 	stw	r4,-8(fp)
 8041594:	6007883a 	mov	r3,r12
 8041598:	e33fff15 	stw	r12,-4(fp)
		// Reset score
		int* scores = game -> scores;
 804159c:	e0bffe17 	ldw	r2,-8(fp)
 80415a0:	10800204 	addi	r2,r2,8
 80415a4:	e0bffd15 	stw	r2,-12(fp)
		scores[0] = 0;
 80415a8:	e0bffd17 	ldw	r2,-12(fp)
 80415ac:	10000015 	stw	zero,0(r2)
		scores[1] = 0;
 80415b0:	e0bffd17 	ldw	r2,-12(fp)
 80415b4:	10800104 	addi	r2,r2,4
 80415b8:	10000015 	stw	zero,0(r2)
		// Reset game time
		game -> time = 0;
 80415bc:	e0bffe17 	ldw	r2,-8(fp)
 80415c0:	10002715 	stw	zero,156(r2)
		sprintf(time_str, "Time: %u", game->time);
 80415c4:	18c02804 	addi	r3,r3,160
 80415c8:	e0bffe17 	ldw	r2,-8(fp)
 80415cc:	10802717 	ldw	r2,156(r2)
 80415d0:	100d883a 	mov	r6,r2
 80415d4:	01420174 	movhi	r5,2053
 80415d8:	294b7504 	addi	r5,r5,11732
 80415dc:	1809883a 	mov	r4,r3
 80415e0:	8043b280 	call	8043b28 <sprintf>
	}
 80415e4:	0001883a 	nop
 80415e8:	e037883a 	mov	sp,fp
 80415ec:	dfc00117 	ldw	ra,4(sp)
 80415f0:	df000017 	ldw	fp,0(sp)
 80415f4:	dec00204 	addi	sp,sp,8
 80415f8:	f800283a 	ret

080415fc <check_win.3148>:
	int check_win(Game* game) {
 80415fc:	defffb04 	addi	sp,sp,-20
 8041600:	dfc00415 	stw	ra,16(sp)
 8041604:	df000315 	stw	fp,12(sp)
 8041608:	df000304 	addi	fp,sp,12
 804160c:	e13ffe15 	stw	r4,-8(fp)
 8041610:	6007883a 	mov	r3,r12
 8041614:	e33fff15 	stw	r12,-4(fp)
		int* scores = game->scores;
 8041618:	e0bffe17 	ldw	r2,-8(fp)
 804161c:	10800204 	addi	r2,r2,8
 8041620:	e0bffd15 	stw	r2,-12(fp)
		if(scores[0]>=MAX_SCORE || scores[1]>=MAX_SCORE){
 8041624:	e0bffd17 	ldw	r2,-12(fp)
 8041628:	10800017 	ldw	r2,0(r2)
 804162c:	10801148 	cmpgei	r2,r2,69
 8041630:	1000051e 	bne	r2,zero,8041648 <check_win.3148+0x4c>
 8041634:	e0bffd17 	ldw	r2,-12(fp)
 8041638:	10800104 	addi	r2,r2,4
 804163c:	10800017 	ldw	r2,0(r2)
 8041640:	10801150 	cmplti	r2,r2,69
 8041644:	1000051e 	bne	r2,zero,804165c <check_win.3148+0x60>
			reset_game(game);
 8041648:	1819883a 	mov	r12,r3
 804164c:	e13ffe17 	ldw	r4,-8(fp)
 8041650:	80415800 	call	8041580 <reset_game.3144>
			return 1;
 8041654:	00800044 	movi	r2,1
 8041658:	00000106 	br	8041660 <check_win.3148+0x64>
		}
		return 0;
 804165c:	0005883a 	mov	r2,zero

	}
 8041660:	e037883a 	mov	sp,fp
 8041664:	dfc00117 	ldw	ra,4(sp)
 8041668:	df000017 	ldw	fp,0(sp)
 804166c:	dec00204 	addi	sp,sp,8
 8041670:	f800283a 	ret

08041674 <run_game_tick.3155>:
	void run_game_tick(alt_up_pixel_buffer_dma_dev * pixel_buf_dma_dev, alt_up_char_buffer_dev * char_buf_dev, int buffer, Game* game) {
 8041674:	defff504 	addi	sp,sp,-44
 8041678:	dfc00a15 	stw	ra,40(sp)
 804167c:	df000915 	stw	fp,36(sp)
 8041680:	dc000815 	stw	r16,32(sp)
 8041684:	df000904 	addi	fp,sp,36
 8041688:	e13ffa15 	stw	r4,-24(fp)
 804168c:	e17ffb15 	stw	r5,-20(fp)
 8041690:	e1bffc15 	stw	r6,-16(fp)
 8041694:	e1fffd15 	stw	r7,-12(fp)
 8041698:	6021883a 	mov	r16,r12
 804169c:	e33ffe15 	stw	r12,-8(fp)
		// Check for winner
		if(check_win(game)) {
 80416a0:	8019883a 	mov	r12,r16
 80416a4:	e13ffd17 	ldw	r4,-12(fp)
 80416a8:	80415fc0 	call	80415fc <check_win.3148>
 80416ac:	10000526 	beq	r2,zero,80416c4 <run_game_tick.3155+0x50>
			clear(pixel_buf_dma_dev, char_buf_dev,0);
 80416b0:	8019883a 	mov	r12,r16
 80416b4:	000d883a 	mov	r6,zero
 80416b8:	e17ffb17 	ldw	r5,-20(fp)
 80416bc:	e13ffa17 	ldw	r4,-24(fp)
 80416c0:	804132c0 	call	804132c <clear.3121>
		}
		Rectangle* balls = (game -> balls);
 80416c4:	e0bffd17 	ldw	r2,-12(fp)
 80416c8:	10800604 	addi	r2,r2,24
 80416cc:	e0bff815 	stw	r2,-32(fp)
		Rectangle* paddles = (game -> paddles);
 80416d0:	e0bffd17 	ldw	r2,-12(fp)
 80416d4:	10800d04 	addi	r2,r2,52
 80416d8:	e0bff915 	stw	r2,-28(fp)
		// Wait for screen refresh
		alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dma_dev);
 80416dc:	e13ffa17 	ldw	r4,-24(fp)
 80416e0:	80512d00 	call	80512d0 <alt_up_pixel_buffer_dma_swap_buffers>
		while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buf_dma_dev));
 80416e4:	0001883a 	nop
 80416e8:	e13ffa17 	ldw	r4,-24(fp)
 80416ec:	80513300 	call	8051330 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 80416f0:	103ffd1e 	bne	r2,zero,80416e8 <__alt_data_end+0xfffd9648>

		// User input
		get_user_input(game);
 80416f4:	8019883a 	mov	r12,r16
 80416f8:	e13ffd17 	ldw	r4,-12(fp)
 80416fc:	80414ec0 	call	80414ec <get_user_input.3135>
		// Cleanup - erase old objects
		draw(pixel_buf_dma_dev, BACKGROUND_COLOUR,buffer, balls, NUM_BALLS);
 8041700:	00800044 	movi	r2,1
 8041704:	d8800015 	stw	r2,0(sp)
 8041708:	8019883a 	mov	r12,r16
 804170c:	e1fff817 	ldw	r7,-32(fp)
 8041710:	e1bffc17 	ldw	r6,-16(fp)
 8041714:	000b883a 	mov	r5,zero
 8041718:	e13ffa17 	ldw	r4,-24(fp)
 804171c:	80413780 	call	8041378 <draw.3128>
		draw(pixel_buf_dma_dev, BACKGROUND_COLOUR, buffer, paddles, NUM_PADDLES);
 8041720:	00800084 	movi	r2,2
 8041724:	d8800015 	stw	r2,0(sp)
 8041728:	8019883a 	mov	r12,r16
 804172c:	e1fff917 	ldw	r7,-28(fp)
 8041730:	e1bffc17 	ldw	r6,-16(fp)
 8041734:	000b883a 	mov	r5,zero
 8041738:	e13ffa17 	ldw	r4,-24(fp)
 804173c:	80413780 	call	8041378 <draw.3128>
		// Game logic
		cheat_code(game); // Checks for cheat code input
 8041740:	8019883a 	mov	r12,r16
 8041744:	e13ffd17 	ldw	r4,-12(fp)
 8041748:	80406480 	call	8040648 <cheat_code.3084>
		update_ball(game);
 804174c:	8019883a 	mov	r12,r16
 8041750:	e13ffd17 	ldw	r4,-12(fp)
 8041754:	8040ad40 	call	8040ad4 <update_ball.3108>
		update_paddle(game);
 8041758:	8019883a 	mov	r12,r16
 804175c:	e13ffd17 	ldw	r4,-12(fp)
 8041760:	80407100 	call	8040710 <update_paddle.3089>
		// Render the screen
		draw(pixel_buf_dma_dev, BALL_COLOUR, buffer, balls, NUM_BALLS);
 8041764:	00800044 	movi	r2,1
 8041768:	d8800015 	stw	r2,0(sp)
 804176c:	8019883a 	mov	r12,r16
 8041770:	e1fff817 	ldw	r7,-32(fp)
 8041774:	e1bffc17 	ldw	r6,-16(fp)
 8041778:	017fffd4 	movui	r5,65535
 804177c:	e13ffa17 	ldw	r4,-24(fp)
 8041780:	80413780 	call	8041378 <draw.3128>
		draw(pixel_buf_dma_dev, PADDLE_COLOUR, buffer, paddles, NUM_PADDLES);
 8041784:	00800084 	movi	r2,2
 8041788:	d8800015 	stw	r2,0(sp)
 804178c:	8019883a 	mov	r12,r16
 8041790:	e1fff917 	ldw	r7,-28(fp)
 8041794:	e1bffc17 	ldw	r6,-16(fp)
 8041798:	017fffd4 	movui	r5,65535
 804179c:	e13ffa17 	ldw	r4,-24(fp)
 80417a0:	80413780 	call	8041378 <draw.3128>
	}
 80417a4:	0001883a 	nop
 80417a8:	e6ffff04 	addi	sp,fp,-4
 80417ac:	dfc00217 	ldw	ra,8(sp)
 80417b0:	df000117 	ldw	fp,4(sp)
 80417b4:	dc000017 	ldw	r16,0(sp)
 80417b8:	dec00304 	addi	sp,sp,12
 80417bc:	f800283a 	ret

080417c0 <music_on.3162>:
	void music_on(){
 80417c0:	defffe04 	addi	sp,sp,-8
 80417c4:	df000115 	stw	fp,4(sp)
 80417c8:	df000104 	addi	fp,sp,4
 80417cc:	e33fff15 	stw	r12,-4(fp)
			IOWR(AUDIO_MODULE_0_BASE, 0, 0x1);
 80417d0:	00c00044 	movi	r3,1
 80417d4:	00820234 	movhi	r2,2056
 80417d8:	108cac04 	addi	r2,r2,12976
 80417dc:	10c00035 	stwio	r3,0(r2)
		}
 80417e0:	0001883a 	nop
 80417e4:	e037883a 	mov	sp,fp
 80417e8:	df000017 	ldw	fp,0(sp)
 80417ec:	dec00104 	addi	sp,sp,4
 80417f0:	f800283a 	ret

080417f4 <music_off.3164>:
	void music_off(){
 80417f4:	defffe04 	addi	sp,sp,-8
 80417f8:	df000115 	stw	fp,4(sp)
 80417fc:	df000104 	addi	fp,sp,4
 8041800:	e33fff15 	stw	r12,-4(fp)
			IOWR(AUDIO_MODULE_0_BASE, 0, 0x0);
 8041804:	0007883a 	mov	r3,zero
 8041808:	00820234 	movhi	r2,2056
 804180c:	108cac04 	addi	r2,r2,12976
 8041810:	10c00035 	stwio	r3,0(r2)
		}
 8041814:	0001883a 	nop
 8041818:	e037883a 	mov	sp,fp
 804181c:	df000017 	ldw	fp,0(sp)
 8041820:	dec00104 	addi	sp,sp,4
 8041824:	f800283a 	ret

08041828 <pause_menu.3167>:

	void pause_menu(alt_up_char_buffer_dev * char_buf_dev) {
 8041828:	defffb04 	addi	sp,sp,-20
 804182c:	dfc00415 	stw	ra,16(sp)
 8041830:	df000315 	stw	fp,12(sp)
 8041834:	dc000215 	stw	r16,8(sp)
 8041838:	df000304 	addi	fp,sp,12
 804183c:	e13ffd15 	stw	r4,-12(fp)
 8041840:	6021883a 	mov	r16,r12
 8041844:	e33ffe15 	stw	r12,-8(fp)
		alt_up_char_buffer_string(char_buf_dev, "Pain Pong", 37, 8);
 8041848:	01c00204 	movi	r7,8
 804184c:	01800944 	movi	r6,37
 8041850:	01420174 	movhi	r5,2053
 8041854:	294bdf04 	addi	r5,r5,12156
 8041858:	e13ffd17 	ldw	r4,-12(fp)
 804185c:	8050f380 	call	8050f38 <alt_up_char_buffer_string>
		//Play music
		music_on();
 8041860:	8019883a 	mov	r12,r16
 8041864:	80417c00 	call	80417c0 <music_on.3162>

	}
 8041868:	0001883a 	nop
 804186c:	e6ffff04 	addi	sp,fp,-4
 8041870:	dfc00217 	ldw	ra,8(sp)
 8041874:	df000117 	ldw	fp,4(sp)
 8041878:	dc000017 	ldw	r16,0(sp)
 804187c:	dec00304 	addi	sp,sp,12
 8041880:	f800283a 	ret

08041884 <clear_pause_menu.3170>:
	void clear_pause_menu(alt_up_char_buffer_dev * char_buf_dev) {
 8041884:	defffb04 	addi	sp,sp,-20
 8041888:	dfc00415 	stw	ra,16(sp)
 804188c:	df000315 	stw	fp,12(sp)
 8041890:	dc000215 	stw	r16,8(sp)
 8041894:	df000304 	addi	fp,sp,12
 8041898:	e13ffd15 	stw	r4,-12(fp)
 804189c:	6021883a 	mov	r16,r12
 80418a0:	e33ffe15 	stw	r12,-8(fp)
		alt_up_char_buffer_string(char_buf_dev, "         ", 37, 8);
 80418a4:	01c00204 	movi	r7,8
 80418a8:	01800944 	movi	r6,37
 80418ac:	01420174 	movhi	r5,2053
 80418b0:	294be204 	addi	r5,r5,12168
 80418b4:	e13ffd17 	ldw	r4,-12(fp)
 80418b8:	8050f380 	call	8050f38 <alt_up_char_buffer_string>
		//Stop Music
		music_off();
 80418bc:	8019883a 	mov	r12,r16
 80418c0:	80417f40 	call	80417f4 <music_off.3164>

	}
 80418c4:	0001883a 	nop
 80418c8:	e6ffff04 	addi	sp,fp,-4
 80418cc:	dfc00217 	ldw	ra,8(sp)
 80418d0:	df000117 	ldw	fp,4(sp)
 80418d4:	dc000017 	ldw	r16,0(sp)
 80418d8:	dec00304 	addi	sp,sp,12
 80418dc:	f800283a 	ret

080418e0 <__mulsi3>:
 80418e0:	0005883a 	mov	r2,zero
 80418e4:	20000726 	beq	r4,zero,8041904 <__mulsi3+0x24>
 80418e8:	20c0004c 	andi	r3,r4,1
 80418ec:	2008d07a 	srli	r4,r4,1
 80418f0:	18000126 	beq	r3,zero,80418f8 <__mulsi3+0x18>
 80418f4:	1145883a 	add	r2,r2,r5
 80418f8:	294b883a 	add	r5,r5,r5
 80418fc:	203ffa1e 	bne	r4,zero,80418e8 <__alt_data_end+0xfffd9848>
 8041900:	f800283a 	ret
 8041904:	f800283a 	ret

08041908 <__trampoline_setup>:
 8041908:	300ed43a 	srli	r7,r6,16
 804190c:	2806d43a 	srli	r3,r5,16
 8041910:	31bfffcc 	andi	r6,r6,65535
 8041914:	380e91ba 	slli	r7,r7,6
 8041918:	0080c034 	movhi	r2,768
 804191c:	10800d04 	addi	r2,r2,52
 8041920:	300c91ba 	slli	r6,r6,6
 8041924:	388eb03a 	or	r7,r7,r2
 8041928:	0098c034 	movhi	r2,25344
 804192c:	10800504 	addi	r2,r2,20
 8041930:	180691ba 	slli	r3,r3,6
 8041934:	308cb03a 	or	r6,r6,r2
 8041938:	297fffcc 	andi	r5,r5,65535
 804193c:	00802034 	movhi	r2,128
 8041940:	10800d04 	addi	r2,r2,52
 8041944:	280a91ba 	slli	r5,r5,6
 8041948:	1886b03a 	or	r3,r3,r2
 804194c:	00842034 	movhi	r2,4224
 8041950:	10800504 	addi	r2,r2,20
 8041954:	20c00215 	stw	r3,8(r4)
 8041958:	00c40034 	movhi	r3,4096
 804195c:	288ab03a 	or	r5,r5,r2
 8041960:	18da0e84 	addi	r3,r3,26682
 8041964:	20c00415 	stw	r3,16(r4)
 8041968:	2005883a 	mov	r2,r4
 804196c:	21c00015 	stw	r7,0(r4)
 8041970:	21800115 	stw	r6,4(r4)
 8041974:	21400315 	stw	r5,12(r4)
 8041978:	20c00504 	addi	r3,r4,20
 804197c:	1000003b 	flushd	0(r2)
 8041980:	1000603a 	flushi	r2
 8041984:	10800104 	addi	r2,r2,4
 8041988:	10fffc1e 	bne	r2,r3,804197c <__alt_data_end+0xfffd98dc>
 804198c:	0000203a 	flushp
 8041990:	f800283a 	ret

08041994 <__subsf3>:
 8041994:	defffc04 	addi	sp,sp,-16
 8041998:	280cd5fa 	srli	r6,r5,23
 804199c:	dc000015 	stw	r16,0(sp)
 80419a0:	01c02034 	movhi	r7,128
 80419a4:	2020d5fa 	srli	r16,r4,23
 80419a8:	39ffffc4 	addi	r7,r7,-1
 80419ac:	3906703a 	and	r3,r7,r4
 80419b0:	dc400115 	stw	r17,4(sp)
 80419b4:	394e703a 	and	r7,r7,r5
 80419b8:	2022d7fa 	srli	r17,r4,31
 80419bc:	dfc00315 	stw	ra,12(sp)
 80419c0:	dc800215 	stw	r18,8(sp)
 80419c4:	31803fcc 	andi	r6,r6,255
 80419c8:	01003fc4 	movi	r4,255
 80419cc:	84003fcc 	andi	r16,r16,255
 80419d0:	180690fa 	slli	r3,r3,3
 80419d4:	2804d7fa 	srli	r2,r5,31
 80419d8:	380e90fa 	slli	r7,r7,3
 80419dc:	31006d26 	beq	r6,r4,8041b94 <__subsf3+0x200>
 80419e0:	1080005c 	xori	r2,r2,1
 80419e4:	8189c83a 	sub	r4,r16,r6
 80419e8:	14404f26 	beq	r2,r17,8041b28 <__subsf3+0x194>
 80419ec:	0100770e 	bge	zero,r4,8041bcc <__subsf3+0x238>
 80419f0:	30001e1e 	bne	r6,zero,8041a6c <__subsf3+0xd8>
 80419f4:	38006a1e 	bne	r7,zero,8041ba0 <__subsf3+0x20c>
 80419f8:	188001cc 	andi	r2,r3,7
 80419fc:	10000426 	beq	r2,zero,8041a10 <__subsf3+0x7c>
 8041a00:	188003cc 	andi	r2,r3,15
 8041a04:	01000104 	movi	r4,4
 8041a08:	11000126 	beq	r2,r4,8041a10 <__subsf3+0x7c>
 8041a0c:	1907883a 	add	r3,r3,r4
 8041a10:	1881002c 	andhi	r2,r3,1024
 8041a14:	10003926 	beq	r2,zero,8041afc <__subsf3+0x168>
 8041a18:	84000044 	addi	r16,r16,1
 8041a1c:	00803fc4 	movi	r2,255
 8041a20:	80807526 	beq	r16,r2,8041bf8 <__subsf3+0x264>
 8041a24:	180691ba 	slli	r3,r3,6
 8041a28:	8880004c 	andi	r2,r17,1
 8041a2c:	180ad27a 	srli	r5,r3,9
 8041a30:	84003fcc 	andi	r16,r16,255
 8041a34:	800695fa 	slli	r3,r16,23
 8041a38:	10803fcc 	andi	r2,r2,255
 8041a3c:	01002034 	movhi	r4,128
 8041a40:	213fffc4 	addi	r4,r4,-1
 8041a44:	100497fa 	slli	r2,r2,31
 8041a48:	2920703a 	and	r16,r5,r4
 8041a4c:	80e0b03a 	or	r16,r16,r3
 8041a50:	8084b03a 	or	r2,r16,r2
 8041a54:	dfc00317 	ldw	ra,12(sp)
 8041a58:	dc800217 	ldw	r18,8(sp)
 8041a5c:	dc400117 	ldw	r17,4(sp)
 8041a60:	dc000017 	ldw	r16,0(sp)
 8041a64:	dec00404 	addi	sp,sp,16
 8041a68:	f800283a 	ret
 8041a6c:	00803fc4 	movi	r2,255
 8041a70:	80bfe126 	beq	r16,r2,80419f8 <__alt_data_end+0xfffd9958>
 8041a74:	39c10034 	orhi	r7,r7,1024
 8041a78:	008006c4 	movi	r2,27
 8041a7c:	11007416 	blt	r2,r4,8041c50 <__subsf3+0x2bc>
 8041a80:	00800804 	movi	r2,32
 8041a84:	1105c83a 	sub	r2,r2,r4
 8041a88:	3884983a 	sll	r2,r7,r2
 8041a8c:	390ed83a 	srl	r7,r7,r4
 8041a90:	1008c03a 	cmpne	r4,r2,zero
 8041a94:	390eb03a 	or	r7,r7,r4
 8041a98:	19c7c83a 	sub	r3,r3,r7
 8041a9c:	1881002c 	andhi	r2,r3,1024
 8041aa0:	10001426 	beq	r2,zero,8041af4 <__subsf3+0x160>
 8041aa4:	04810034 	movhi	r18,1024
 8041aa8:	94bfffc4 	addi	r18,r18,-1
 8041aac:	1ca4703a 	and	r18,r3,r18
 8041ab0:	9009883a 	mov	r4,r18
 8041ab4:	804369c0 	call	804369c <__clzsi2>
 8041ab8:	10bffec4 	addi	r2,r2,-5
 8041abc:	90a4983a 	sll	r18,r18,r2
 8041ac0:	14005116 	blt	r2,r16,8041c08 <__subsf3+0x274>
 8041ac4:	1405c83a 	sub	r2,r2,r16
 8041ac8:	10c00044 	addi	r3,r2,1
 8041acc:	00800804 	movi	r2,32
 8041ad0:	10c5c83a 	sub	r2,r2,r3
 8041ad4:	9084983a 	sll	r2,r18,r2
 8041ad8:	90e4d83a 	srl	r18,r18,r3
 8041adc:	0021883a 	mov	r16,zero
 8041ae0:	1006c03a 	cmpne	r3,r2,zero
 8041ae4:	90c6b03a 	or	r3,r18,r3
 8041ae8:	003fc306 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041aec:	2000e026 	beq	r4,zero,8041e70 <__subsf3+0x4dc>
 8041af0:	2007883a 	mov	r3,r4
 8041af4:	188001cc 	andi	r2,r3,7
 8041af8:	103fc11e 	bne	r2,zero,8041a00 <__alt_data_end+0xfffd9960>
 8041afc:	180ad0fa 	srli	r5,r3,3
 8041b00:	00c03fc4 	movi	r3,255
 8041b04:	8880004c 	andi	r2,r17,1
 8041b08:	80c0031e 	bne	r16,r3,8041b18 <__subsf3+0x184>
 8041b0c:	28006d26 	beq	r5,zero,8041cc4 <__subsf3+0x330>
 8041b10:	29401034 	orhi	r5,r5,64
 8041b14:	043fffc4 	movi	r16,-1
 8041b18:	00c02034 	movhi	r3,128
 8041b1c:	18ffffc4 	addi	r3,r3,-1
 8041b20:	28ca703a 	and	r5,r5,r3
 8041b24:	003fc206 	br	8041a30 <__alt_data_end+0xfffd9990>
 8041b28:	01003c0e 	bge	zero,r4,8041c1c <__subsf3+0x288>
 8041b2c:	30002126 	beq	r6,zero,8041bb4 <__subsf3+0x220>
 8041b30:	01403fc4 	movi	r5,255
 8041b34:	817fb026 	beq	r16,r5,80419f8 <__alt_data_end+0xfffd9958>
 8041b38:	39c10034 	orhi	r7,r7,1024
 8041b3c:	014006c4 	movi	r5,27
 8041b40:	29007416 	blt	r5,r4,8041d14 <__subsf3+0x380>
 8041b44:	01400804 	movi	r5,32
 8041b48:	290bc83a 	sub	r5,r5,r4
 8041b4c:	394a983a 	sll	r5,r7,r5
 8041b50:	390ed83a 	srl	r7,r7,r4
 8041b54:	2808c03a 	cmpne	r4,r5,zero
 8041b58:	390eb03a 	or	r7,r7,r4
 8041b5c:	19c7883a 	add	r3,r3,r7
 8041b60:	1901002c 	andhi	r4,r3,1024
 8041b64:	20003826 	beq	r4,zero,8041c48 <__subsf3+0x2b4>
 8041b68:	84000044 	addi	r16,r16,1
 8041b6c:	01003fc4 	movi	r4,255
 8041b70:	81005426 	beq	r16,r4,8041cc4 <__subsf3+0x330>
 8041b74:	1023883a 	mov	r17,r2
 8041b78:	00bf0034 	movhi	r2,64512
 8041b7c:	10bfffc4 	addi	r2,r2,-1
 8041b80:	1900004c 	andi	r4,r3,1
 8041b84:	1886703a 	and	r3,r3,r2
 8041b88:	1806d07a 	srli	r3,r3,1
 8041b8c:	1906b03a 	or	r3,r3,r4
 8041b90:	003f9906 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041b94:	383f9226 	beq	r7,zero,80419e0 <__alt_data_end+0xfffd9940>
 8041b98:	10803fcc 	andi	r2,r2,255
 8041b9c:	003f9106 	br	80419e4 <__alt_data_end+0xfffd9944>
 8041ba0:	213fffc4 	addi	r4,r4,-1
 8041ba4:	203fbc26 	beq	r4,zero,8041a98 <__alt_data_end+0xfffd99f8>
 8041ba8:	00803fc4 	movi	r2,255
 8041bac:	80bfb21e 	bne	r16,r2,8041a78 <__alt_data_end+0xfffd99d8>
 8041bb0:	003f9106 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041bb4:	383f9026 	beq	r7,zero,80419f8 <__alt_data_end+0xfffd9958>
 8041bb8:	213fffc4 	addi	r4,r4,-1
 8041bbc:	203fe726 	beq	r4,zero,8041b5c <__alt_data_end+0xfffd9abc>
 8041bc0:	01403fc4 	movi	r5,255
 8041bc4:	817fdd1e 	bne	r16,r5,8041b3c <__alt_data_end+0xfffd9a9c>
 8041bc8:	003f8b06 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041bcc:	2000221e 	bne	r4,zero,8041c58 <__subsf3+0x2c4>
 8041bd0:	81000044 	addi	r4,r16,1
 8041bd4:	21003fcc 	andi	r4,r4,255
 8041bd8:	01400044 	movi	r5,1
 8041bdc:	2900470e 	bge	r5,r4,8041cfc <__subsf3+0x368>
 8041be0:	19e5c83a 	sub	r18,r3,r7
 8041be4:	9141002c 	andhi	r5,r18,1024
 8041be8:	28002d26 	beq	r5,zero,8041ca0 <__subsf3+0x30c>
 8041bec:	38e5c83a 	sub	r18,r7,r3
 8041bf0:	1023883a 	mov	r17,r2
 8041bf4:	003fae06 	br	8041ab0 <__alt_data_end+0xfffd9a10>
 8041bf8:	8880004c 	andi	r2,r17,1
 8041bfc:	043fffc4 	movi	r16,-1
 8041c00:	000b883a 	mov	r5,zero
 8041c04:	003f8a06 	br	8041a30 <__alt_data_end+0xfffd9990>
 8041c08:	00ff0034 	movhi	r3,64512
 8041c0c:	18ffffc4 	addi	r3,r3,-1
 8041c10:	80a1c83a 	sub	r16,r16,r2
 8041c14:	90c6703a 	and	r3,r18,r3
 8041c18:	003f7706 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041c1c:	2000431e 	bne	r4,zero,8041d2c <__subsf3+0x398>
 8041c20:	81000044 	addi	r4,r16,1
 8041c24:	21803fcc 	andi	r6,r4,255
 8041c28:	01400044 	movi	r5,1
 8041c2c:	2980280e 	bge	r5,r6,8041cd0 <__subsf3+0x33c>
 8041c30:	01403fc4 	movi	r5,255
 8041c34:	21402326 	beq	r4,r5,8041cc4 <__subsf3+0x330>
 8041c38:	19c7883a 	add	r3,r3,r7
 8041c3c:	1806d07a 	srli	r3,r3,1
 8041c40:	2021883a 	mov	r16,r4
 8041c44:	003f6c06 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041c48:	1023883a 	mov	r17,r2
 8041c4c:	003fa906 	br	8041af4 <__alt_data_end+0xfffd9a54>
 8041c50:	01c00044 	movi	r7,1
 8041c54:	003f9006 	br	8041a98 <__alt_data_end+0xfffd99f8>
 8041c58:	8000151e 	bne	r16,zero,8041cb0 <__subsf3+0x31c>
 8041c5c:	18002f26 	beq	r3,zero,8041d1c <__subsf3+0x388>
 8041c60:	0108303a 	nor	r4,zero,r4
 8041c64:	20000a26 	beq	r4,zero,8041c90 <__subsf3+0x2fc>
 8041c68:	01403fc4 	movi	r5,255
 8041c6c:	31402b26 	beq	r6,r5,8041d1c <__subsf3+0x388>
 8041c70:	014006c4 	movi	r5,27
 8041c74:	29006e16 	blt	r5,r4,8041e30 <__subsf3+0x49c>
 8041c78:	01400804 	movi	r5,32
 8041c7c:	290bc83a 	sub	r5,r5,r4
 8041c80:	194a983a 	sll	r5,r3,r5
 8041c84:	1908d83a 	srl	r4,r3,r4
 8041c88:	2806c03a 	cmpne	r3,r5,zero
 8041c8c:	20c6b03a 	or	r3,r4,r3
 8041c90:	38c7c83a 	sub	r3,r7,r3
 8041c94:	3021883a 	mov	r16,r6
 8041c98:	1023883a 	mov	r17,r2
 8041c9c:	003f7f06 	br	8041a9c <__alt_data_end+0xfffd99fc>
 8041ca0:	903f831e 	bne	r18,zero,8041ab0 <__alt_data_end+0xfffd9a10>
 8041ca4:	0005883a 	mov	r2,zero
 8041ca8:	0021883a 	mov	r16,zero
 8041cac:	003f9a06 	br	8041b18 <__alt_data_end+0xfffd9a78>
 8041cb0:	01403fc4 	movi	r5,255
 8041cb4:	31401926 	beq	r6,r5,8041d1c <__subsf3+0x388>
 8041cb8:	0109c83a 	sub	r4,zero,r4
 8041cbc:	18c10034 	orhi	r3,r3,1024
 8041cc0:	003feb06 	br	8041c70 <__alt_data_end+0xfffd9bd0>
 8041cc4:	043fffc4 	movi	r16,-1
 8041cc8:	000b883a 	mov	r5,zero
 8041ccc:	003f5806 	br	8041a30 <__alt_data_end+0xfffd9990>
 8041cd0:	8000481e 	bne	r16,zero,8041df4 <__subsf3+0x460>
 8041cd4:	18006226 	beq	r3,zero,8041e60 <__subsf3+0x4cc>
 8041cd8:	383f4726 	beq	r7,zero,80419f8 <__alt_data_end+0xfffd9958>
 8041cdc:	19c7883a 	add	r3,r3,r7
 8041ce0:	1881002c 	andhi	r2,r3,1024
 8041ce4:	103f8326 	beq	r2,zero,8041af4 <__alt_data_end+0xfffd9a54>
 8041ce8:	00bf0034 	movhi	r2,64512
 8041cec:	10bfffc4 	addi	r2,r2,-1
 8041cf0:	2821883a 	mov	r16,r5
 8041cf4:	1886703a 	and	r3,r3,r2
 8041cf8:	003f3f06 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041cfc:	80001c1e 	bne	r16,zero,8041d70 <__subsf3+0x3dc>
 8041d00:	1800261e 	bne	r3,zero,8041d9c <__subsf3+0x408>
 8041d04:	38004c26 	beq	r7,zero,8041e38 <__subsf3+0x4a4>
 8041d08:	3807883a 	mov	r3,r7
 8041d0c:	1023883a 	mov	r17,r2
 8041d10:	003f3906 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041d14:	01c00044 	movi	r7,1
 8041d18:	003f9006 	br	8041b5c <__alt_data_end+0xfffd9abc>
 8041d1c:	3807883a 	mov	r3,r7
 8041d20:	3021883a 	mov	r16,r6
 8041d24:	1023883a 	mov	r17,r2
 8041d28:	003f3306 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041d2c:	8000161e 	bne	r16,zero,8041d88 <__subsf3+0x3f4>
 8041d30:	18002d26 	beq	r3,zero,8041de8 <__subsf3+0x454>
 8041d34:	0108303a 	nor	r4,zero,r4
 8041d38:	20000a26 	beq	r4,zero,8041d64 <__subsf3+0x3d0>
 8041d3c:	01403fc4 	movi	r5,255
 8041d40:	31402926 	beq	r6,r5,8041de8 <__subsf3+0x454>
 8041d44:	014006c4 	movi	r5,27
 8041d48:	29004716 	blt	r5,r4,8041e68 <__subsf3+0x4d4>
 8041d4c:	01400804 	movi	r5,32
 8041d50:	290bc83a 	sub	r5,r5,r4
 8041d54:	194a983a 	sll	r5,r3,r5
 8041d58:	1908d83a 	srl	r4,r3,r4
 8041d5c:	2806c03a 	cmpne	r3,r5,zero
 8041d60:	20c6b03a 	or	r3,r4,r3
 8041d64:	19c7883a 	add	r3,r3,r7
 8041d68:	3021883a 	mov	r16,r6
 8041d6c:	003f7c06 	br	8041b60 <__alt_data_end+0xfffd9ac0>
 8041d70:	1800111e 	bne	r3,zero,8041db8 <__subsf3+0x424>
 8041d74:	38003326 	beq	r7,zero,8041e44 <__subsf3+0x4b0>
 8041d78:	3807883a 	mov	r3,r7
 8041d7c:	1023883a 	mov	r17,r2
 8041d80:	04003fc4 	movi	r16,255
 8041d84:	003f1c06 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041d88:	01403fc4 	movi	r5,255
 8041d8c:	31401626 	beq	r6,r5,8041de8 <__subsf3+0x454>
 8041d90:	0109c83a 	sub	r4,zero,r4
 8041d94:	18c10034 	orhi	r3,r3,1024
 8041d98:	003fea06 	br	8041d44 <__alt_data_end+0xfffd9ca4>
 8041d9c:	383f1626 	beq	r7,zero,80419f8 <__alt_data_end+0xfffd9958>
 8041da0:	19c9c83a 	sub	r4,r3,r7
 8041da4:	2141002c 	andhi	r5,r4,1024
 8041da8:	283f5026 	beq	r5,zero,8041aec <__alt_data_end+0xfffd9a4c>
 8041dac:	38c7c83a 	sub	r3,r7,r3
 8041db0:	1023883a 	mov	r17,r2
 8041db4:	003f1006 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041db8:	38001b26 	beq	r7,zero,8041e28 <__subsf3+0x494>
 8041dbc:	1806d0fa 	srli	r3,r3,3
 8041dc0:	1900102c 	andhi	r4,r3,64
 8041dc4:	20000526 	beq	r4,zero,8041ddc <__subsf3+0x448>
 8041dc8:	380ed0fa 	srli	r7,r7,3
 8041dcc:	3900102c 	andhi	r4,r7,64
 8041dd0:	2000021e 	bne	r4,zero,8041ddc <__subsf3+0x448>
 8041dd4:	3807883a 	mov	r3,r7
 8041dd8:	1023883a 	mov	r17,r2
 8041ddc:	180690fa 	slli	r3,r3,3
 8041de0:	04003fc4 	movi	r16,255
 8041de4:	003f0406 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041de8:	3807883a 	mov	r3,r7
 8041dec:	3021883a 	mov	r16,r6
 8041df0:	003f0106 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041df4:	18001726 	beq	r3,zero,8041e54 <__subsf3+0x4c0>
 8041df8:	38000b26 	beq	r7,zero,8041e28 <__subsf3+0x494>
 8041dfc:	1806d0fa 	srli	r3,r3,3
 8041e00:	1900102c 	andhi	r4,r3,64
 8041e04:	20000426 	beq	r4,zero,8041e18 <__subsf3+0x484>
 8041e08:	380ed0fa 	srli	r7,r7,3
 8041e0c:	3900102c 	andhi	r4,r7,64
 8041e10:	2000011e 	bne	r4,zero,8041e18 <__subsf3+0x484>
 8041e14:	3807883a 	mov	r3,r7
 8041e18:	180690fa 	slli	r3,r3,3
 8041e1c:	1023883a 	mov	r17,r2
 8041e20:	04003fc4 	movi	r16,255
 8041e24:	003ef406 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041e28:	04003fc4 	movi	r16,255
 8041e2c:	003ef206 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041e30:	00c00044 	movi	r3,1
 8041e34:	003f9606 	br	8041c90 <__alt_data_end+0xfffd9bf0>
 8041e38:	000b883a 	mov	r5,zero
 8041e3c:	0005883a 	mov	r2,zero
 8041e40:	003f3506 	br	8041b18 <__alt_data_end+0xfffd9a78>
 8041e44:	01402034 	movhi	r5,128
 8041e48:	297fffc4 	addi	r5,r5,-1
 8041e4c:	0005883a 	mov	r2,zero
 8041e50:	003f2f06 	br	8041b10 <__alt_data_end+0xfffd9a70>
 8041e54:	3807883a 	mov	r3,r7
 8041e58:	04003fc4 	movi	r16,255
 8041e5c:	003ee606 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041e60:	3807883a 	mov	r3,r7
 8041e64:	003ee406 	br	80419f8 <__alt_data_end+0xfffd9958>
 8041e68:	00c00044 	movi	r3,1
 8041e6c:	003fbd06 	br	8041d64 <__alt_data_end+0xfffd9cc4>
 8041e70:	0005883a 	mov	r2,zero
 8041e74:	003f2806 	br	8041b18 <__alt_data_end+0xfffd9a78>

08041e78 <__fixsfsi>:
 8041e78:	200ad5fa 	srli	r5,r4,23
 8041e7c:	00c02034 	movhi	r3,128
 8041e80:	18ffffc4 	addi	r3,r3,-1
 8041e84:	29403fcc 	andi	r5,r5,255
 8041e88:	00801f84 	movi	r2,126
 8041e8c:	1906703a 	and	r3,r3,r4
 8041e90:	2008d7fa 	srli	r4,r4,31
 8041e94:	11400e0e 	bge	r2,r5,8041ed0 <__fixsfsi+0x58>
 8041e98:	00802744 	movi	r2,157
 8041e9c:	11400816 	blt	r2,r5,8041ec0 <__fixsfsi+0x48>
 8041ea0:	00802544 	movi	r2,149
 8041ea4:	18c02034 	orhi	r3,r3,128
 8041ea8:	11400b0e 	bge	r2,r5,8041ed8 <__fixsfsi+0x60>
 8041eac:	28bfda84 	addi	r2,r5,-150
 8041eb0:	1884983a 	sll	r2,r3,r2
 8041eb4:	20000726 	beq	r4,zero,8041ed4 <__fixsfsi+0x5c>
 8041eb8:	0085c83a 	sub	r2,zero,r2
 8041ebc:	f800283a 	ret
 8041ec0:	00a00034 	movhi	r2,32768
 8041ec4:	10bfffc4 	addi	r2,r2,-1
 8041ec8:	2085883a 	add	r2,r4,r2
 8041ecc:	f800283a 	ret
 8041ed0:	0005883a 	mov	r2,zero
 8041ed4:	f800283a 	ret
 8041ed8:	00802584 	movi	r2,150
 8041edc:	1145c83a 	sub	r2,r2,r5
 8041ee0:	1884d83a 	srl	r2,r3,r2
 8041ee4:	003ff306 	br	8041eb4 <__alt_data_end+0xfffd9e14>

08041ee8 <__floatunsisf>:
 8041ee8:	defffe04 	addi	sp,sp,-8
 8041eec:	dfc00115 	stw	ra,4(sp)
 8041ef0:	dc000015 	stw	r16,0(sp)
 8041ef4:	20002c26 	beq	r4,zero,8041fa8 <__floatunsisf+0xc0>
 8041ef8:	2021883a 	mov	r16,r4
 8041efc:	804369c0 	call	804369c <__clzsi2>
 8041f00:	00c02784 	movi	r3,158
 8041f04:	1887c83a 	sub	r3,r3,r2
 8041f08:	01002584 	movi	r4,150
 8041f0c:	20c00f16 	blt	r4,r3,8041f4c <__floatunsisf+0x64>
 8041f10:	20c9c83a 	sub	r4,r4,r3
 8041f14:	8108983a 	sll	r4,r16,r4
 8041f18:	00802034 	movhi	r2,128
 8041f1c:	10bfffc4 	addi	r2,r2,-1
 8041f20:	2088703a 	and	r4,r4,r2
 8041f24:	18803fcc 	andi	r2,r3,255
 8041f28:	100695fa 	slli	r3,r2,23
 8041f2c:	00802034 	movhi	r2,128
 8041f30:	10bfffc4 	addi	r2,r2,-1
 8041f34:	2084703a 	and	r2,r4,r2
 8041f38:	10c4b03a 	or	r2,r2,r3
 8041f3c:	dfc00117 	ldw	ra,4(sp)
 8041f40:	dc000017 	ldw	r16,0(sp)
 8041f44:	dec00204 	addi	sp,sp,8
 8041f48:	f800283a 	ret
 8041f4c:	01002644 	movi	r4,153
 8041f50:	20c01816 	blt	r4,r3,8041fb4 <__floatunsisf+0xcc>
 8041f54:	20c9c83a 	sub	r4,r4,r3
 8041f58:	8108983a 	sll	r4,r16,r4
 8041f5c:	017f0034 	movhi	r5,64512
 8041f60:	297fffc4 	addi	r5,r5,-1
 8041f64:	218001cc 	andi	r6,r4,7
 8041f68:	214a703a 	and	r5,r4,r5
 8041f6c:	30000426 	beq	r6,zero,8041f80 <__floatunsisf+0x98>
 8041f70:	210003cc 	andi	r4,r4,15
 8041f74:	01800104 	movi	r6,4
 8041f78:	21800126 	beq	r4,r6,8041f80 <__floatunsisf+0x98>
 8041f7c:	298b883a 	add	r5,r5,r6
 8041f80:	2901002c 	andhi	r4,r5,1024
 8041f84:	20000526 	beq	r4,zero,8041f9c <__floatunsisf+0xb4>
 8041f88:	00c027c4 	movi	r3,159
 8041f8c:	1887c83a 	sub	r3,r3,r2
 8041f90:	00bf0034 	movhi	r2,64512
 8041f94:	10bfffc4 	addi	r2,r2,-1
 8041f98:	288a703a 	and	r5,r5,r2
 8041f9c:	280891ba 	slli	r4,r5,6
 8041fa0:	2008d27a 	srli	r4,r4,9
 8041fa4:	003fdf06 	br	8041f24 <__alt_data_end+0xfffd9e84>
 8041fa8:	0007883a 	mov	r3,zero
 8041fac:	0009883a 	mov	r4,zero
 8041fb0:	003fdc06 	br	8041f24 <__alt_data_end+0xfffd9e84>
 8041fb4:	01402e44 	movi	r5,185
 8041fb8:	28cbc83a 	sub	r5,r5,r3
 8041fbc:	01000144 	movi	r4,5
 8041fc0:	2089c83a 	sub	r4,r4,r2
 8041fc4:	814a983a 	sll	r5,r16,r5
 8041fc8:	8108d83a 	srl	r4,r16,r4
 8041fcc:	2820c03a 	cmpne	r16,r5,zero
 8041fd0:	2408b03a 	or	r4,r4,r16
 8041fd4:	003fe106 	br	8041f5c <__alt_data_end+0xfffd9ebc>

08041fd8 <__divdf3>:
 8041fd8:	defff004 	addi	sp,sp,-64
 8041fdc:	dc800815 	stw	r18,32(sp)
 8041fe0:	2824d53a 	srli	r18,r5,20
 8041fe4:	dd800c15 	stw	r22,48(sp)
 8041fe8:	282cd7fa 	srli	r22,r5,31
 8041fec:	dc000615 	stw	r16,24(sp)
 8041ff0:	04000434 	movhi	r16,16
 8041ff4:	843fffc4 	addi	r16,r16,-1
 8041ff8:	dfc00f15 	stw	ra,60(sp)
 8041ffc:	df000e15 	stw	fp,56(sp)
 8042000:	ddc00d15 	stw	r23,52(sp)
 8042004:	dd400b15 	stw	r21,44(sp)
 8042008:	dd000a15 	stw	r20,40(sp)
 804200c:	dcc00915 	stw	r19,36(sp)
 8042010:	dc400715 	stw	r17,28(sp)
 8042014:	9481ffcc 	andi	r18,r18,2047
 8042018:	2c20703a 	and	r16,r5,r16
 804201c:	b2003fcc 	andi	r8,r22,255
 8042020:	90006126 	beq	r18,zero,80421a8 <__divdf3+0x1d0>
 8042024:	0081ffc4 	movi	r2,2047
 8042028:	202b883a 	mov	r21,r4
 804202c:	90803726 	beq	r18,r2,804210c <__divdf3+0x134>
 8042030:	80800434 	orhi	r2,r16,16
 8042034:	100490fa 	slli	r2,r2,3
 8042038:	2020d77a 	srli	r16,r4,29
 804203c:	202a90fa 	slli	r21,r4,3
 8042040:	94bf0044 	addi	r18,r18,-1023
 8042044:	80a0b03a 	or	r16,r16,r2
 8042048:	0013883a 	mov	r9,zero
 804204c:	000b883a 	mov	r5,zero
 8042050:	3806d53a 	srli	r3,r7,20
 8042054:	382ed7fa 	srli	r23,r7,31
 8042058:	04400434 	movhi	r17,16
 804205c:	8c7fffc4 	addi	r17,r17,-1
 8042060:	18c1ffcc 	andi	r3,r3,2047
 8042064:	3029883a 	mov	r20,r6
 8042068:	3c62703a 	and	r17,r7,r17
 804206c:	bf003fcc 	andi	fp,r23,255
 8042070:	18006e26 	beq	r3,zero,804222c <__divdf3+0x254>
 8042074:	0081ffc4 	movi	r2,2047
 8042078:	18806626 	beq	r3,r2,8042214 <__divdf3+0x23c>
 804207c:	88800434 	orhi	r2,r17,16
 8042080:	100490fa 	slli	r2,r2,3
 8042084:	3022d77a 	srli	r17,r6,29
 8042088:	302890fa 	slli	r20,r6,3
 804208c:	18ff0044 	addi	r3,r3,-1023
 8042090:	88a2b03a 	or	r17,r17,r2
 8042094:	000f883a 	mov	r7,zero
 8042098:	b5e6f03a 	xor	r19,r22,r23
 804209c:	3a4cb03a 	or	r6,r7,r9
 80420a0:	008003c4 	movi	r2,15
 80420a4:	9809883a 	mov	r4,r19
 80420a8:	90c7c83a 	sub	r3,r18,r3
 80420ac:	9cc03fcc 	andi	r19,r19,255
 80420b0:	11809636 	bltu	r2,r6,804230c <__divdf3+0x334>
 80420b4:	300c90ba 	slli	r6,r6,2
 80420b8:	00820134 	movhi	r2,2052
 80420bc:	10883304 	addi	r2,r2,8396
 80420c0:	308d883a 	add	r6,r6,r2
 80420c4:	30800017 	ldw	r2,0(r6)
 80420c8:	1000683a 	jmp	r2
 80420cc:	0804230c 	andi	zero,at,4236
 80420d0:	08042144 	addi	zero,at,4229
 80420d4:	080422fc 	xorhi	zero,at,4235
 80420d8:	08042138 	rdprs	zero,at,4228
 80420dc:	080422fc 	xorhi	zero,at,4235
 80420e0:	080422d0 	cmplti	zero,at,4235
 80420e4:	080422fc 	xorhi	zero,at,4235
 80420e8:	08042138 	rdprs	zero,at,4228
 80420ec:	08042144 	addi	zero,at,4229
 80420f0:	08042144 	addi	zero,at,4229
 80420f4:	080422d0 	cmplti	zero,at,4235
 80420f8:	08042138 	rdprs	zero,at,4228
 80420fc:	08042128 	cmpgeui	zero,at,4228
 8042100:	08042128 	cmpgeui	zero,at,4228
 8042104:	08042128 	cmpgeui	zero,at,4228
 8042108:	08042694 	ori	zero,at,4250
 804210c:	2404b03a 	or	r2,r4,r16
 8042110:	10006c1e 	bne	r2,zero,80422c4 <__divdf3+0x2ec>
 8042114:	02400204 	movi	r9,8
 8042118:	0021883a 	mov	r16,zero
 804211c:	002b883a 	mov	r21,zero
 8042120:	01400084 	movi	r5,2
 8042124:	003fca06 	br	8042050 <__alt_data_end+0xfffd9fb0>
 8042128:	8023883a 	mov	r17,r16
 804212c:	a829883a 	mov	r20,r21
 8042130:	4039883a 	mov	fp,r8
 8042134:	280f883a 	mov	r7,r5
 8042138:	00800084 	movi	r2,2
 804213c:	3881601e 	bne	r7,r2,80426c0 <__divdf3+0x6e8>
 8042140:	e027883a 	mov	r19,fp
 8042144:	9900004c 	andi	r4,r19,1
 8042148:	0081ffc4 	movi	r2,2047
 804214c:	0021883a 	mov	r16,zero
 8042150:	002b883a 	mov	r21,zero
 8042154:	1004953a 	slli	r2,r2,20
 8042158:	20c03fcc 	andi	r3,r4,255
 804215c:	01400434 	movhi	r5,16
 8042160:	297fffc4 	addi	r5,r5,-1
 8042164:	180697fa 	slli	r3,r3,31
 8042168:	8160703a 	and	r16,r16,r5
 804216c:	80a0b03a 	or	r16,r16,r2
 8042170:	80c6b03a 	or	r3,r16,r3
 8042174:	a805883a 	mov	r2,r21
 8042178:	dfc00f17 	ldw	ra,60(sp)
 804217c:	df000e17 	ldw	fp,56(sp)
 8042180:	ddc00d17 	ldw	r23,52(sp)
 8042184:	dd800c17 	ldw	r22,48(sp)
 8042188:	dd400b17 	ldw	r21,44(sp)
 804218c:	dd000a17 	ldw	r20,40(sp)
 8042190:	dcc00917 	ldw	r19,36(sp)
 8042194:	dc800817 	ldw	r18,32(sp)
 8042198:	dc400717 	ldw	r17,28(sp)
 804219c:	dc000617 	ldw	r16,24(sp)
 80421a0:	dec01004 	addi	sp,sp,64
 80421a4:	f800283a 	ret
 80421a8:	2404b03a 	or	r2,r4,r16
 80421ac:	2023883a 	mov	r17,r4
 80421b0:	10003f26 	beq	r2,zero,80422b0 <__divdf3+0x2d8>
 80421b4:	80015e26 	beq	r16,zero,8042730 <__divdf3+0x758>
 80421b8:	8009883a 	mov	r4,r16
 80421bc:	d9800215 	stw	r6,8(sp)
 80421c0:	d9c00515 	stw	r7,20(sp)
 80421c4:	da000415 	stw	r8,16(sp)
 80421c8:	804369c0 	call	804369c <__clzsi2>
 80421cc:	d9800217 	ldw	r6,8(sp)
 80421d0:	d9c00517 	ldw	r7,20(sp)
 80421d4:	da000417 	ldw	r8,16(sp)
 80421d8:	113ffd44 	addi	r4,r2,-11
 80421dc:	00c00704 	movi	r3,28
 80421e0:	19014f16 	blt	r3,r4,8042720 <__divdf3+0x748>
 80421e4:	00c00744 	movi	r3,29
 80421e8:	157ffe04 	addi	r21,r2,-8
 80421ec:	1907c83a 	sub	r3,r3,r4
 80421f0:	8560983a 	sll	r16,r16,r21
 80421f4:	88c6d83a 	srl	r3,r17,r3
 80421f8:	8d6a983a 	sll	r21,r17,r21
 80421fc:	1c20b03a 	or	r16,r3,r16
 8042200:	1080fcc4 	addi	r2,r2,1011
 8042204:	00a5c83a 	sub	r18,zero,r2
 8042208:	0013883a 	mov	r9,zero
 804220c:	000b883a 	mov	r5,zero
 8042210:	003f8f06 	br	8042050 <__alt_data_end+0xfffd9fb0>
 8042214:	3444b03a 	or	r2,r6,r17
 8042218:	1000231e 	bne	r2,zero,80422a8 <__divdf3+0x2d0>
 804221c:	0023883a 	mov	r17,zero
 8042220:	0029883a 	mov	r20,zero
 8042224:	01c00084 	movi	r7,2
 8042228:	003f9b06 	br	8042098 <__alt_data_end+0xfffd9ff8>
 804222c:	3444b03a 	or	r2,r6,r17
 8042230:	10001926 	beq	r2,zero,8042298 <__divdf3+0x2c0>
 8042234:	88014b26 	beq	r17,zero,8042764 <__divdf3+0x78c>
 8042238:	8809883a 	mov	r4,r17
 804223c:	d9400115 	stw	r5,4(sp)
 8042240:	d9800215 	stw	r6,8(sp)
 8042244:	da000415 	stw	r8,16(sp)
 8042248:	da400315 	stw	r9,12(sp)
 804224c:	804369c0 	call	804369c <__clzsi2>
 8042250:	d9400117 	ldw	r5,4(sp)
 8042254:	d9800217 	ldw	r6,8(sp)
 8042258:	da000417 	ldw	r8,16(sp)
 804225c:	da400317 	ldw	r9,12(sp)
 8042260:	113ffd44 	addi	r4,r2,-11
 8042264:	00c00704 	movi	r3,28
 8042268:	19013a16 	blt	r3,r4,8042754 <__divdf3+0x77c>
 804226c:	00c00744 	movi	r3,29
 8042270:	153ffe04 	addi	r20,r2,-8
 8042274:	1907c83a 	sub	r3,r3,r4
 8042278:	8d22983a 	sll	r17,r17,r20
 804227c:	30c6d83a 	srl	r3,r6,r3
 8042280:	3528983a 	sll	r20,r6,r20
 8042284:	1c62b03a 	or	r17,r3,r17
 8042288:	1080fcc4 	addi	r2,r2,1011
 804228c:	0087c83a 	sub	r3,zero,r2
 8042290:	000f883a 	mov	r7,zero
 8042294:	003f8006 	br	8042098 <__alt_data_end+0xfffd9ff8>
 8042298:	0023883a 	mov	r17,zero
 804229c:	0029883a 	mov	r20,zero
 80422a0:	01c00044 	movi	r7,1
 80422a4:	003f7c06 	br	8042098 <__alt_data_end+0xfffd9ff8>
 80422a8:	01c000c4 	movi	r7,3
 80422ac:	003f7a06 	br	8042098 <__alt_data_end+0xfffd9ff8>
 80422b0:	02400104 	movi	r9,4
 80422b4:	0021883a 	mov	r16,zero
 80422b8:	002b883a 	mov	r21,zero
 80422bc:	01400044 	movi	r5,1
 80422c0:	003f6306 	br	8042050 <__alt_data_end+0xfffd9fb0>
 80422c4:	02400304 	movi	r9,12
 80422c8:	014000c4 	movi	r5,3
 80422cc:	003f6006 	br	8042050 <__alt_data_end+0xfffd9fb0>
 80422d0:	04000434 	movhi	r16,16
 80422d4:	0009883a 	mov	r4,zero
 80422d8:	843fffc4 	addi	r16,r16,-1
 80422dc:	057fffc4 	movi	r21,-1
 80422e0:	0081ffc4 	movi	r2,2047
 80422e4:	003f9b06 	br	8042154 <__alt_data_end+0xfffda0b4>
 80422e8:	00c00044 	movi	r3,1
 80422ec:	1887c83a 	sub	r3,r3,r2
 80422f0:	01000e04 	movi	r4,56
 80422f4:	20c1530e 	bge	r4,r3,8042844 <__divdf3+0x86c>
 80422f8:	9900004c 	andi	r4,r19,1
 80422fc:	0005883a 	mov	r2,zero
 8042300:	0021883a 	mov	r16,zero
 8042304:	002b883a 	mov	r21,zero
 8042308:	003f9206 	br	8042154 <__alt_data_end+0xfffda0b4>
 804230c:	8c012e36 	bltu	r17,r16,80427c8 <__divdf3+0x7f0>
 8042310:	84412c26 	beq	r16,r17,80427c4 <__divdf3+0x7ec>
 8042314:	a82f883a 	mov	r23,r21
 8042318:	18ffffc4 	addi	r3,r3,-1
 804231c:	002b883a 	mov	r21,zero
 8042320:	a004d63a 	srli	r2,r20,24
 8042324:	8822923a 	slli	r17,r17,8
 8042328:	a028923a 	slli	r20,r20,8
 804232c:	8009883a 	mov	r4,r16
 8042330:	88acb03a 	or	r22,r17,r2
 8042334:	dd000015 	stw	r20,0(sp)
 8042338:	b028d43a 	srli	r20,r22,16
 804233c:	d8c00215 	stw	r3,8(sp)
 8042340:	b4bfffcc 	andi	r18,r22,65535
 8042344:	a00b883a 	mov	r5,r20
 8042348:	80437f80 	call	80437f8 <__udivsi3>
 804234c:	100b883a 	mov	r5,r2
 8042350:	9009883a 	mov	r4,r18
 8042354:	1023883a 	mov	r17,r2
 8042358:	80418e00 	call	80418e0 <__mulsi3>
 804235c:	8009883a 	mov	r4,r16
 8042360:	a00b883a 	mov	r5,r20
 8042364:	1039883a 	mov	fp,r2
 8042368:	804385c0 	call	804385c <__umodsi3>
 804236c:	1004943a 	slli	r2,r2,16
 8042370:	b808d43a 	srli	r4,r23,16
 8042374:	d8c00217 	ldw	r3,8(sp)
 8042378:	2084b03a 	or	r2,r4,r2
 804237c:	1700062e 	bgeu	r2,fp,8042398 <__divdf3+0x3c0>
 8042380:	1585883a 	add	r2,r2,r22
 8042384:	893fffc4 	addi	r4,r17,-1
 8042388:	15811d36 	bltu	r2,r22,8042800 <__divdf3+0x828>
 804238c:	17011c2e 	bgeu	r2,fp,8042800 <__divdf3+0x828>
 8042390:	8c7fff84 	addi	r17,r17,-2
 8042394:	1585883a 	add	r2,r2,r22
 8042398:	1739c83a 	sub	fp,r2,fp
 804239c:	a00b883a 	mov	r5,r20
 80423a0:	e009883a 	mov	r4,fp
 80423a4:	d8c00215 	stw	r3,8(sp)
 80423a8:	80437f80 	call	80437f8 <__udivsi3>
 80423ac:	100b883a 	mov	r5,r2
 80423b0:	9009883a 	mov	r4,r18
 80423b4:	1021883a 	mov	r16,r2
 80423b8:	80418e00 	call	80418e0 <__mulsi3>
 80423bc:	a00b883a 	mov	r5,r20
 80423c0:	e009883a 	mov	r4,fp
 80423c4:	d8800415 	stw	r2,16(sp)
 80423c8:	804385c0 	call	804385c <__umodsi3>
 80423cc:	1004943a 	slli	r2,r2,16
 80423d0:	da000417 	ldw	r8,16(sp)
 80423d4:	bdffffcc 	andi	r23,r23,65535
 80423d8:	b884b03a 	or	r2,r23,r2
 80423dc:	d8c00217 	ldw	r3,8(sp)
 80423e0:	1200062e 	bgeu	r2,r8,80423fc <__divdf3+0x424>
 80423e4:	1585883a 	add	r2,r2,r22
 80423e8:	813fffc4 	addi	r4,r16,-1
 80423ec:	15810236 	bltu	r2,r22,80427f8 <__divdf3+0x820>
 80423f0:	1201012e 	bgeu	r2,r8,80427f8 <__divdf3+0x820>
 80423f4:	843fff84 	addi	r16,r16,-2
 80423f8:	1585883a 	add	r2,r2,r22
 80423fc:	8822943a 	slli	r17,r17,16
 8042400:	d9800017 	ldw	r6,0(sp)
 8042404:	1211c83a 	sub	r8,r2,r8
 8042408:	8c22b03a 	or	r17,r17,r16
 804240c:	373fffcc 	andi	fp,r6,65535
 8042410:	8abfffcc 	andi	r10,r17,65535
 8042414:	8820d43a 	srli	r16,r17,16
 8042418:	5009883a 	mov	r4,r10
 804241c:	e00b883a 	mov	r5,fp
 8042420:	302ed43a 	srli	r23,r6,16
 8042424:	d8c00215 	stw	r3,8(sp)
 8042428:	da000415 	stw	r8,16(sp)
 804242c:	da800115 	stw	r10,4(sp)
 8042430:	80418e00 	call	80418e0 <__mulsi3>
 8042434:	800b883a 	mov	r5,r16
 8042438:	e009883a 	mov	r4,fp
 804243c:	d8800515 	stw	r2,20(sp)
 8042440:	80418e00 	call	80418e0 <__mulsi3>
 8042444:	8009883a 	mov	r4,r16
 8042448:	b80b883a 	mov	r5,r23
 804244c:	d8800315 	stw	r2,12(sp)
 8042450:	80418e00 	call	80418e0 <__mulsi3>
 8042454:	da800117 	ldw	r10,4(sp)
 8042458:	b80b883a 	mov	r5,r23
 804245c:	1021883a 	mov	r16,r2
 8042460:	5009883a 	mov	r4,r10
 8042464:	80418e00 	call	80418e0 <__mulsi3>
 8042468:	d9c00517 	ldw	r7,20(sp)
 804246c:	da400317 	ldw	r9,12(sp)
 8042470:	d8c00217 	ldw	r3,8(sp)
 8042474:	3808d43a 	srli	r4,r7,16
 8042478:	1245883a 	add	r2,r2,r9
 804247c:	da000417 	ldw	r8,16(sp)
 8042480:	2085883a 	add	r2,r4,r2
 8042484:	1240022e 	bgeu	r2,r9,8042490 <__divdf3+0x4b8>
 8042488:	01000074 	movhi	r4,1
 804248c:	8121883a 	add	r16,r16,r4
 8042490:	1008d43a 	srli	r4,r2,16
 8042494:	1004943a 	slli	r2,r2,16
 8042498:	39ffffcc 	andi	r7,r7,65535
 804249c:	2409883a 	add	r4,r4,r16
 80424a0:	11c5883a 	add	r2,r2,r7
 80424a4:	4100bb36 	bltu	r8,r4,8042794 <__divdf3+0x7bc>
 80424a8:	4100d726 	beq	r8,r4,8042808 <__divdf3+0x830>
 80424ac:	4109c83a 	sub	r4,r8,r4
 80424b0:	a8a1c83a 	sub	r16,r21,r2
 80424b4:	ac2b803a 	cmpltu	r21,r21,r16
 80424b8:	256bc83a 	sub	r21,r4,r21
 80424bc:	b540d926 	beq	r22,r21,8042824 <__divdf3+0x84c>
 80424c0:	a00b883a 	mov	r5,r20
 80424c4:	a809883a 	mov	r4,r21
 80424c8:	d8c00215 	stw	r3,8(sp)
 80424cc:	80437f80 	call	80437f8 <__udivsi3>
 80424d0:	100b883a 	mov	r5,r2
 80424d4:	9009883a 	mov	r4,r18
 80424d8:	d8800515 	stw	r2,20(sp)
 80424dc:	80418e00 	call	80418e0 <__mulsi3>
 80424e0:	a809883a 	mov	r4,r21
 80424e4:	a00b883a 	mov	r5,r20
 80424e8:	d8800415 	stw	r2,16(sp)
 80424ec:	804385c0 	call	804385c <__umodsi3>
 80424f0:	1004943a 	slli	r2,r2,16
 80424f4:	8008d43a 	srli	r4,r16,16
 80424f8:	da000417 	ldw	r8,16(sp)
 80424fc:	d8c00217 	ldw	r3,8(sp)
 8042500:	2084b03a 	or	r2,r4,r2
 8042504:	d9c00517 	ldw	r7,20(sp)
 8042508:	1200062e 	bgeu	r2,r8,8042524 <__divdf3+0x54c>
 804250c:	1585883a 	add	r2,r2,r22
 8042510:	393fffc4 	addi	r4,r7,-1
 8042514:	1580c536 	bltu	r2,r22,804282c <__divdf3+0x854>
 8042518:	1200c42e 	bgeu	r2,r8,804282c <__divdf3+0x854>
 804251c:	39ffff84 	addi	r7,r7,-2
 8042520:	1585883a 	add	r2,r2,r22
 8042524:	122bc83a 	sub	r21,r2,r8
 8042528:	a00b883a 	mov	r5,r20
 804252c:	a809883a 	mov	r4,r21
 8042530:	d8c00215 	stw	r3,8(sp)
 8042534:	d9c00515 	stw	r7,20(sp)
 8042538:	80437f80 	call	80437f8 <__udivsi3>
 804253c:	9009883a 	mov	r4,r18
 8042540:	100b883a 	mov	r5,r2
 8042544:	d8800415 	stw	r2,16(sp)
 8042548:	80418e00 	call	80418e0 <__mulsi3>
 804254c:	a809883a 	mov	r4,r21
 8042550:	a00b883a 	mov	r5,r20
 8042554:	1025883a 	mov	r18,r2
 8042558:	804385c0 	call	804385c <__umodsi3>
 804255c:	1004943a 	slli	r2,r2,16
 8042560:	813fffcc 	andi	r4,r16,65535
 8042564:	d8c00217 	ldw	r3,8(sp)
 8042568:	20a0b03a 	or	r16,r4,r2
 804256c:	d9c00517 	ldw	r7,20(sp)
 8042570:	da000417 	ldw	r8,16(sp)
 8042574:	8480062e 	bgeu	r16,r18,8042590 <__divdf3+0x5b8>
 8042578:	85a1883a 	add	r16,r16,r22
 804257c:	40bfffc4 	addi	r2,r8,-1
 8042580:	8580ac36 	bltu	r16,r22,8042834 <__divdf3+0x85c>
 8042584:	8480ab2e 	bgeu	r16,r18,8042834 <__divdf3+0x85c>
 8042588:	423fff84 	addi	r8,r8,-2
 804258c:	85a1883a 	add	r16,r16,r22
 8042590:	3804943a 	slli	r2,r7,16
 8042594:	84a1c83a 	sub	r16,r16,r18
 8042598:	e009883a 	mov	r4,fp
 804259c:	1228b03a 	or	r20,r2,r8
 80425a0:	a1ffffcc 	andi	r7,r20,65535
 80425a4:	a024d43a 	srli	r18,r20,16
 80425a8:	380b883a 	mov	r5,r7
 80425ac:	d8c00215 	stw	r3,8(sp)
 80425b0:	d9c00515 	stw	r7,20(sp)
 80425b4:	80418e00 	call	80418e0 <__mulsi3>
 80425b8:	900b883a 	mov	r5,r18
 80425bc:	e009883a 	mov	r4,fp
 80425c0:	102b883a 	mov	r21,r2
 80425c4:	80418e00 	call	80418e0 <__mulsi3>
 80425c8:	900b883a 	mov	r5,r18
 80425cc:	b809883a 	mov	r4,r23
 80425d0:	1039883a 	mov	fp,r2
 80425d4:	80418e00 	call	80418e0 <__mulsi3>
 80425d8:	d9c00517 	ldw	r7,20(sp)
 80425dc:	b80b883a 	mov	r5,r23
 80425e0:	1025883a 	mov	r18,r2
 80425e4:	3809883a 	mov	r4,r7
 80425e8:	80418e00 	call	80418e0 <__mulsi3>
 80425ec:	a808d43a 	srli	r4,r21,16
 80425f0:	1705883a 	add	r2,r2,fp
 80425f4:	d8c00217 	ldw	r3,8(sp)
 80425f8:	2085883a 	add	r2,r4,r2
 80425fc:	1700022e 	bgeu	r2,fp,8042608 <__divdf3+0x630>
 8042600:	01000074 	movhi	r4,1
 8042604:	9125883a 	add	r18,r18,r4
 8042608:	1008d43a 	srli	r4,r2,16
 804260c:	1004943a 	slli	r2,r2,16
 8042610:	ad7fffcc 	andi	r21,r21,65535
 8042614:	2489883a 	add	r4,r4,r18
 8042618:	1545883a 	add	r2,r2,r21
 804261c:	81003836 	bltu	r16,r4,8042700 <__divdf3+0x728>
 8042620:	81003626 	beq	r16,r4,80426fc <__divdf3+0x724>
 8042624:	a5000054 	ori	r20,r20,1
 8042628:	1880ffc4 	addi	r2,r3,1023
 804262c:	00bf2e0e 	bge	zero,r2,80422e8 <__alt_data_end+0xfffda248>
 8042630:	a10001cc 	andi	r4,r20,7
 8042634:	20000726 	beq	r4,zero,8042654 <__divdf3+0x67c>
 8042638:	a10003cc 	andi	r4,r20,15
 804263c:	01400104 	movi	r5,4
 8042640:	21400426 	beq	r4,r5,8042654 <__divdf3+0x67c>
 8042644:	a149883a 	add	r4,r20,r5
 8042648:	2529803a 	cmpltu	r20,r4,r20
 804264c:	8d23883a 	add	r17,r17,r20
 8042650:	2029883a 	mov	r20,r4
 8042654:	8900402c 	andhi	r4,r17,256
 8042658:	20000426 	beq	r4,zero,804266c <__divdf3+0x694>
 804265c:	18810004 	addi	r2,r3,1024
 8042660:	00ffc034 	movhi	r3,65280
 8042664:	18ffffc4 	addi	r3,r3,-1
 8042668:	88e2703a 	and	r17,r17,r3
 804266c:	00c1ff84 	movi	r3,2046
 8042670:	18beb416 	blt	r3,r2,8042144 <__alt_data_end+0xfffda0a4>
 8042674:	a028d0fa 	srli	r20,r20,3
 8042678:	882a977a 	slli	r21,r17,29
 804267c:	8820927a 	slli	r16,r17,9
 8042680:	1081ffcc 	andi	r2,r2,2047
 8042684:	ad2ab03a 	or	r21,r21,r20
 8042688:	8020d33a 	srli	r16,r16,12
 804268c:	9900004c 	andi	r4,r19,1
 8042690:	003eb006 	br	8042154 <__alt_data_end+0xfffda0b4>
 8042694:	8080022c 	andhi	r2,r16,8
 8042698:	10001226 	beq	r2,zero,80426e4 <__divdf3+0x70c>
 804269c:	8880022c 	andhi	r2,r17,8
 80426a0:	1000101e 	bne	r2,zero,80426e4 <__divdf3+0x70c>
 80426a4:	00800434 	movhi	r2,16
 80426a8:	8c000234 	orhi	r16,r17,8
 80426ac:	10bfffc4 	addi	r2,r2,-1
 80426b0:	b809883a 	mov	r4,r23
 80426b4:	80a0703a 	and	r16,r16,r2
 80426b8:	a02b883a 	mov	r21,r20
 80426bc:	003f0806 	br	80422e0 <__alt_data_end+0xfffda240>
 80426c0:	008000c4 	movi	r2,3
 80426c4:	3880b126 	beq	r7,r2,804298c <__divdf3+0x9b4>
 80426c8:	00800044 	movi	r2,1
 80426cc:	38805b1e 	bne	r7,r2,804283c <__divdf3+0x864>
 80426d0:	e009883a 	mov	r4,fp
 80426d4:	0005883a 	mov	r2,zero
 80426d8:	0021883a 	mov	r16,zero
 80426dc:	002b883a 	mov	r21,zero
 80426e0:	003e9c06 	br	8042154 <__alt_data_end+0xfffda0b4>
 80426e4:	00800434 	movhi	r2,16
 80426e8:	84000234 	orhi	r16,r16,8
 80426ec:	10bfffc4 	addi	r2,r2,-1
 80426f0:	b009883a 	mov	r4,r22
 80426f4:	80a0703a 	and	r16,r16,r2
 80426f8:	003ef906 	br	80422e0 <__alt_data_end+0xfffda240>
 80426fc:	103fca26 	beq	r2,zero,8042628 <__alt_data_end+0xfffda588>
 8042700:	b421883a 	add	r16,r22,r16
 8042704:	a17fffc4 	addi	r5,r20,-1
 8042708:	8580422e 	bgeu	r16,r22,8042814 <__divdf3+0x83c>
 804270c:	2829883a 	mov	r20,r5
 8042710:	813fc41e 	bne	r16,r4,8042624 <__alt_data_end+0xfffda584>
 8042714:	d9800017 	ldw	r6,0(sp)
 8042718:	30bfc21e 	bne	r6,r2,8042624 <__alt_data_end+0xfffda584>
 804271c:	003fc206 	br	8042628 <__alt_data_end+0xfffda588>
 8042720:	143ff604 	addi	r16,r2,-40
 8042724:	8c20983a 	sll	r16,r17,r16
 8042728:	002b883a 	mov	r21,zero
 804272c:	003eb406 	br	8042200 <__alt_data_end+0xfffda160>
 8042730:	d9800215 	stw	r6,8(sp)
 8042734:	d9c00515 	stw	r7,20(sp)
 8042738:	da000415 	stw	r8,16(sp)
 804273c:	804369c0 	call	804369c <__clzsi2>
 8042740:	10800804 	addi	r2,r2,32
 8042744:	da000417 	ldw	r8,16(sp)
 8042748:	d9c00517 	ldw	r7,20(sp)
 804274c:	d9800217 	ldw	r6,8(sp)
 8042750:	003ea106 	br	80421d8 <__alt_data_end+0xfffda138>
 8042754:	147ff604 	addi	r17,r2,-40
 8042758:	3462983a 	sll	r17,r6,r17
 804275c:	0029883a 	mov	r20,zero
 8042760:	003ec906 	br	8042288 <__alt_data_end+0xfffda1e8>
 8042764:	3009883a 	mov	r4,r6
 8042768:	d9400115 	stw	r5,4(sp)
 804276c:	d9800215 	stw	r6,8(sp)
 8042770:	da000415 	stw	r8,16(sp)
 8042774:	da400315 	stw	r9,12(sp)
 8042778:	804369c0 	call	804369c <__clzsi2>
 804277c:	10800804 	addi	r2,r2,32
 8042780:	da400317 	ldw	r9,12(sp)
 8042784:	da000417 	ldw	r8,16(sp)
 8042788:	d9800217 	ldw	r6,8(sp)
 804278c:	d9400117 	ldw	r5,4(sp)
 8042790:	003eb306 	br	8042260 <__alt_data_end+0xfffda1c0>
 8042794:	d9800017 	ldw	r6,0(sp)
 8042798:	a9ab883a 	add	r21,r21,r6
 804279c:	a98b803a 	cmpltu	r5,r21,r6
 80427a0:	2d8b883a 	add	r5,r5,r22
 80427a4:	2a11883a 	add	r8,r5,r8
 80427a8:	897fffc4 	addi	r5,r17,-1
 80427ac:	b2000c2e 	bgeu	r22,r8,80427e0 <__divdf3+0x808>
 80427b0:	41003f36 	bltu	r8,r4,80428b0 <__divdf3+0x8d8>
 80427b4:	22006c26 	beq	r4,r8,8042968 <__divdf3+0x990>
 80427b8:	4109c83a 	sub	r4,r8,r4
 80427bc:	2823883a 	mov	r17,r5
 80427c0:	003f3b06 	br	80424b0 <__alt_data_end+0xfffda410>
 80427c4:	ad3ed336 	bltu	r21,r20,8042314 <__alt_data_end+0xfffda274>
 80427c8:	a804d07a 	srli	r2,r21,1
 80427cc:	802e97fa 	slli	r23,r16,31
 80427d0:	a82a97fa 	slli	r21,r21,31
 80427d4:	8020d07a 	srli	r16,r16,1
 80427d8:	b8aeb03a 	or	r23,r23,r2
 80427dc:	003ed006 	br	8042320 <__alt_data_end+0xfffda280>
 80427e0:	b23ff51e 	bne	r22,r8,80427b8 <__alt_data_end+0xfffda718>
 80427e4:	d9800017 	ldw	r6,0(sp)
 80427e8:	a9bff12e 	bgeu	r21,r6,80427b0 <__alt_data_end+0xfffda710>
 80427ec:	b109c83a 	sub	r4,r22,r4
 80427f0:	2823883a 	mov	r17,r5
 80427f4:	003f2e06 	br	80424b0 <__alt_data_end+0xfffda410>
 80427f8:	2021883a 	mov	r16,r4
 80427fc:	003eff06 	br	80423fc <__alt_data_end+0xfffda35c>
 8042800:	2023883a 	mov	r17,r4
 8042804:	003ee406 	br	8042398 <__alt_data_end+0xfffda2f8>
 8042808:	a8bfe236 	bltu	r21,r2,8042794 <__alt_data_end+0xfffda6f4>
 804280c:	0009883a 	mov	r4,zero
 8042810:	003f2706 	br	80424b0 <__alt_data_end+0xfffda410>
 8042814:	81002d36 	bltu	r16,r4,80428cc <__divdf3+0x8f4>
 8042818:	24005626 	beq	r4,r16,8042974 <__divdf3+0x99c>
 804281c:	2829883a 	mov	r20,r5
 8042820:	003f8006 	br	8042624 <__alt_data_end+0xfffda584>
 8042824:	053fffc4 	movi	r20,-1
 8042828:	003f7f06 	br	8042628 <__alt_data_end+0xfffda588>
 804282c:	200f883a 	mov	r7,r4
 8042830:	003f3c06 	br	8042524 <__alt_data_end+0xfffda484>
 8042834:	1011883a 	mov	r8,r2
 8042838:	003f5506 	br	8042590 <__alt_data_end+0xfffda4f0>
 804283c:	e027883a 	mov	r19,fp
 8042840:	003f7906 	br	8042628 <__alt_data_end+0xfffda588>
 8042844:	010007c4 	movi	r4,31
 8042848:	20c02816 	blt	r4,r3,80428ec <__divdf3+0x914>
 804284c:	00800804 	movi	r2,32
 8042850:	10c5c83a 	sub	r2,r2,r3
 8042854:	888a983a 	sll	r5,r17,r2
 8042858:	a0c8d83a 	srl	r4,r20,r3
 804285c:	a084983a 	sll	r2,r20,r2
 8042860:	88e2d83a 	srl	r17,r17,r3
 8042864:	2906b03a 	or	r3,r5,r4
 8042868:	1004c03a 	cmpne	r2,r2,zero
 804286c:	1886b03a 	or	r3,r3,r2
 8042870:	188001cc 	andi	r2,r3,7
 8042874:	10000726 	beq	r2,zero,8042894 <__divdf3+0x8bc>
 8042878:	188003cc 	andi	r2,r3,15
 804287c:	01000104 	movi	r4,4
 8042880:	11000426 	beq	r2,r4,8042894 <__divdf3+0x8bc>
 8042884:	1805883a 	mov	r2,r3
 8042888:	10c00104 	addi	r3,r2,4
 804288c:	1885803a 	cmpltu	r2,r3,r2
 8042890:	88a3883a 	add	r17,r17,r2
 8042894:	8880202c 	andhi	r2,r17,128
 8042898:	10002926 	beq	r2,zero,8042940 <__divdf3+0x968>
 804289c:	9900004c 	andi	r4,r19,1
 80428a0:	00800044 	movi	r2,1
 80428a4:	0021883a 	mov	r16,zero
 80428a8:	002b883a 	mov	r21,zero
 80428ac:	003e2906 	br	8042154 <__alt_data_end+0xfffda0b4>
 80428b0:	d9800017 	ldw	r6,0(sp)
 80428b4:	8c7fff84 	addi	r17,r17,-2
 80428b8:	a9ab883a 	add	r21,r21,r6
 80428bc:	a98b803a 	cmpltu	r5,r21,r6
 80428c0:	2d8b883a 	add	r5,r5,r22
 80428c4:	2a11883a 	add	r8,r5,r8
 80428c8:	003ef806 	br	80424ac <__alt_data_end+0xfffda40c>
 80428cc:	d9800017 	ldw	r6,0(sp)
 80428d0:	318f883a 	add	r7,r6,r6
 80428d4:	398b803a 	cmpltu	r5,r7,r6
 80428d8:	2d8d883a 	add	r6,r5,r22
 80428dc:	81a1883a 	add	r16,r16,r6
 80428e0:	a17fff84 	addi	r5,r20,-2
 80428e4:	d9c00015 	stw	r7,0(sp)
 80428e8:	003f8806 	br	804270c <__alt_data_end+0xfffda66c>
 80428ec:	013ff844 	movi	r4,-31
 80428f0:	2085c83a 	sub	r2,r4,r2
 80428f4:	8888d83a 	srl	r4,r17,r2
 80428f8:	00800804 	movi	r2,32
 80428fc:	18802126 	beq	r3,r2,8042984 <__divdf3+0x9ac>
 8042900:	04001004 	movi	r16,64
 8042904:	80c7c83a 	sub	r3,r16,r3
 8042908:	88e0983a 	sll	r16,r17,r3
 804290c:	8504b03a 	or	r2,r16,r20
 8042910:	1004c03a 	cmpne	r2,r2,zero
 8042914:	2084b03a 	or	r2,r4,r2
 8042918:	144001cc 	andi	r17,r2,7
 804291c:	88000d1e 	bne	r17,zero,8042954 <__divdf3+0x97c>
 8042920:	0021883a 	mov	r16,zero
 8042924:	102ad0fa 	srli	r21,r2,3
 8042928:	9900004c 	andi	r4,r19,1
 804292c:	0005883a 	mov	r2,zero
 8042930:	ac6ab03a 	or	r21,r21,r17
 8042934:	003e0706 	br	8042154 <__alt_data_end+0xfffda0b4>
 8042938:	1007883a 	mov	r3,r2
 804293c:	0023883a 	mov	r17,zero
 8042940:	8820927a 	slli	r16,r17,9
 8042944:	1805883a 	mov	r2,r3
 8042948:	8822977a 	slli	r17,r17,29
 804294c:	8020d33a 	srli	r16,r16,12
 8042950:	003ff406 	br	8042924 <__alt_data_end+0xfffda884>
 8042954:	10c003cc 	andi	r3,r2,15
 8042958:	01000104 	movi	r4,4
 804295c:	193ff626 	beq	r3,r4,8042938 <__alt_data_end+0xfffda898>
 8042960:	0023883a 	mov	r17,zero
 8042964:	003fc806 	br	8042888 <__alt_data_end+0xfffda7e8>
 8042968:	a8bfd136 	bltu	r21,r2,80428b0 <__alt_data_end+0xfffda810>
 804296c:	2823883a 	mov	r17,r5
 8042970:	003fa606 	br	804280c <__alt_data_end+0xfffda76c>
 8042974:	d9800017 	ldw	r6,0(sp)
 8042978:	30bfd436 	bltu	r6,r2,80428cc <__alt_data_end+0xfffda82c>
 804297c:	2829883a 	mov	r20,r5
 8042980:	003f6406 	br	8042714 <__alt_data_end+0xfffda674>
 8042984:	0021883a 	mov	r16,zero
 8042988:	003fe006 	br	804290c <__alt_data_end+0xfffda86c>
 804298c:	00800434 	movhi	r2,16
 8042990:	8c000234 	orhi	r16,r17,8
 8042994:	10bfffc4 	addi	r2,r2,-1
 8042998:	e009883a 	mov	r4,fp
 804299c:	80a0703a 	and	r16,r16,r2
 80429a0:	a02b883a 	mov	r21,r20
 80429a4:	003e4e06 	br	80422e0 <__alt_data_end+0xfffda240>

080429a8 <__gedf2>:
 80429a8:	2804d53a 	srli	r2,r5,20
 80429ac:	3806d53a 	srli	r3,r7,20
 80429b0:	02000434 	movhi	r8,16
 80429b4:	423fffc4 	addi	r8,r8,-1
 80429b8:	1081ffcc 	andi	r2,r2,2047
 80429bc:	0241ffc4 	movi	r9,2047
 80429c0:	2a14703a 	and	r10,r5,r8
 80429c4:	18c1ffcc 	andi	r3,r3,2047
 80429c8:	3a10703a 	and	r8,r7,r8
 80429cc:	280ad7fa 	srli	r5,r5,31
 80429d0:	380ed7fa 	srli	r7,r7,31
 80429d4:	12401d26 	beq	r2,r9,8042a4c <__gedf2+0xa4>
 80429d8:	0241ffc4 	movi	r9,2047
 80429dc:	1a401226 	beq	r3,r9,8042a28 <__gedf2+0x80>
 80429e0:	1000081e 	bne	r2,zero,8042a04 <__gedf2+0x5c>
 80429e4:	2296b03a 	or	r11,r4,r10
 80429e8:	5813003a 	cmpeq	r9,r11,zero
 80429ec:	1800091e 	bne	r3,zero,8042a14 <__gedf2+0x6c>
 80429f0:	3218b03a 	or	r12,r6,r8
 80429f4:	6000071e 	bne	r12,zero,8042a14 <__gedf2+0x6c>
 80429f8:	0005883a 	mov	r2,zero
 80429fc:	5800101e 	bne	r11,zero,8042a40 <__gedf2+0x98>
 8042a00:	f800283a 	ret
 8042a04:	18000c1e 	bne	r3,zero,8042a38 <__gedf2+0x90>
 8042a08:	3212b03a 	or	r9,r6,r8
 8042a0c:	48000c26 	beq	r9,zero,8042a40 <__gedf2+0x98>
 8042a10:	0013883a 	mov	r9,zero
 8042a14:	39c03fcc 	andi	r7,r7,255
 8042a18:	48000826 	beq	r9,zero,8042a3c <__gedf2+0x94>
 8042a1c:	38000926 	beq	r7,zero,8042a44 <__gedf2+0x9c>
 8042a20:	00800044 	movi	r2,1
 8042a24:	f800283a 	ret
 8042a28:	3212b03a 	or	r9,r6,r8
 8042a2c:	483fec26 	beq	r9,zero,80429e0 <__alt_data_end+0xfffda940>
 8042a30:	00bfff84 	movi	r2,-2
 8042a34:	f800283a 	ret
 8042a38:	39c03fcc 	andi	r7,r7,255
 8042a3c:	29c00626 	beq	r5,r7,8042a58 <__gedf2+0xb0>
 8042a40:	283ff726 	beq	r5,zero,8042a20 <__alt_data_end+0xfffda980>
 8042a44:	00bfffc4 	movi	r2,-1
 8042a48:	f800283a 	ret
 8042a4c:	2292b03a 	or	r9,r4,r10
 8042a50:	483fe126 	beq	r9,zero,80429d8 <__alt_data_end+0xfffda938>
 8042a54:	003ff606 	br	8042a30 <__alt_data_end+0xfffda990>
 8042a58:	18bff916 	blt	r3,r2,8042a40 <__alt_data_end+0xfffda9a0>
 8042a5c:	10c00316 	blt	r2,r3,8042a6c <__gedf2+0xc4>
 8042a60:	42bff736 	bltu	r8,r10,8042a40 <__alt_data_end+0xfffda9a0>
 8042a64:	52000326 	beq	r10,r8,8042a74 <__gedf2+0xcc>
 8042a68:	5200042e 	bgeu	r10,r8,8042a7c <__gedf2+0xd4>
 8042a6c:	283fec1e 	bne	r5,zero,8042a20 <__alt_data_end+0xfffda980>
 8042a70:	003ff406 	br	8042a44 <__alt_data_end+0xfffda9a4>
 8042a74:	313ff236 	bltu	r6,r4,8042a40 <__alt_data_end+0xfffda9a0>
 8042a78:	21bffc36 	bltu	r4,r6,8042a6c <__alt_data_end+0xfffda9cc>
 8042a7c:	0005883a 	mov	r2,zero
 8042a80:	f800283a 	ret

08042a84 <__ledf2>:
 8042a84:	2804d53a 	srli	r2,r5,20
 8042a88:	3810d53a 	srli	r8,r7,20
 8042a8c:	00c00434 	movhi	r3,16
 8042a90:	18ffffc4 	addi	r3,r3,-1
 8042a94:	1081ffcc 	andi	r2,r2,2047
 8042a98:	0241ffc4 	movi	r9,2047
 8042a9c:	28d4703a 	and	r10,r5,r3
 8042aa0:	4201ffcc 	andi	r8,r8,2047
 8042aa4:	38c6703a 	and	r3,r7,r3
 8042aa8:	280ad7fa 	srli	r5,r5,31
 8042aac:	380ed7fa 	srli	r7,r7,31
 8042ab0:	12401f26 	beq	r2,r9,8042b30 <__ledf2+0xac>
 8042ab4:	0241ffc4 	movi	r9,2047
 8042ab8:	42401426 	beq	r8,r9,8042b0c <__ledf2+0x88>
 8042abc:	1000091e 	bne	r2,zero,8042ae4 <__ledf2+0x60>
 8042ac0:	2296b03a 	or	r11,r4,r10
 8042ac4:	5813003a 	cmpeq	r9,r11,zero
 8042ac8:	29403fcc 	andi	r5,r5,255
 8042acc:	40000a1e 	bne	r8,zero,8042af8 <__ledf2+0x74>
 8042ad0:	30d8b03a 	or	r12,r6,r3
 8042ad4:	6000081e 	bne	r12,zero,8042af8 <__ledf2+0x74>
 8042ad8:	0005883a 	mov	r2,zero
 8042adc:	5800111e 	bne	r11,zero,8042b24 <__ledf2+0xa0>
 8042ae0:	f800283a 	ret
 8042ae4:	29403fcc 	andi	r5,r5,255
 8042ae8:	40000c1e 	bne	r8,zero,8042b1c <__ledf2+0x98>
 8042aec:	30d2b03a 	or	r9,r6,r3
 8042af0:	48000c26 	beq	r9,zero,8042b24 <__ledf2+0xa0>
 8042af4:	0013883a 	mov	r9,zero
 8042af8:	39c03fcc 	andi	r7,r7,255
 8042afc:	48000826 	beq	r9,zero,8042b20 <__ledf2+0x9c>
 8042b00:	38001126 	beq	r7,zero,8042b48 <__ledf2+0xc4>
 8042b04:	00800044 	movi	r2,1
 8042b08:	f800283a 	ret
 8042b0c:	30d2b03a 	or	r9,r6,r3
 8042b10:	483fea26 	beq	r9,zero,8042abc <__alt_data_end+0xfffdaa1c>
 8042b14:	00800084 	movi	r2,2
 8042b18:	f800283a 	ret
 8042b1c:	39c03fcc 	andi	r7,r7,255
 8042b20:	39400726 	beq	r7,r5,8042b40 <__ledf2+0xbc>
 8042b24:	2800081e 	bne	r5,zero,8042b48 <__ledf2+0xc4>
 8042b28:	00800044 	movi	r2,1
 8042b2c:	f800283a 	ret
 8042b30:	2292b03a 	or	r9,r4,r10
 8042b34:	483fdf26 	beq	r9,zero,8042ab4 <__alt_data_end+0xfffdaa14>
 8042b38:	00800084 	movi	r2,2
 8042b3c:	f800283a 	ret
 8042b40:	4080030e 	bge	r8,r2,8042b50 <__ledf2+0xcc>
 8042b44:	383fef26 	beq	r7,zero,8042b04 <__alt_data_end+0xfffdaa64>
 8042b48:	00bfffc4 	movi	r2,-1
 8042b4c:	f800283a 	ret
 8042b50:	123feb16 	blt	r2,r8,8042b00 <__alt_data_end+0xfffdaa60>
 8042b54:	1abff336 	bltu	r3,r10,8042b24 <__alt_data_end+0xfffdaa84>
 8042b58:	50c00326 	beq	r10,r3,8042b68 <__ledf2+0xe4>
 8042b5c:	50c0042e 	bgeu	r10,r3,8042b70 <__ledf2+0xec>
 8042b60:	283fe81e 	bne	r5,zero,8042b04 <__alt_data_end+0xfffdaa64>
 8042b64:	003ff806 	br	8042b48 <__alt_data_end+0xfffdaaa8>
 8042b68:	313fee36 	bltu	r6,r4,8042b24 <__alt_data_end+0xfffdaa84>
 8042b6c:	21bffc36 	bltu	r4,r6,8042b60 <__alt_data_end+0xfffdaac0>
 8042b70:	0005883a 	mov	r2,zero
 8042b74:	f800283a 	ret

08042b78 <__muldf3>:
 8042b78:	deffee04 	addi	sp,sp,-72
 8042b7c:	dd000c15 	stw	r20,48(sp)
 8042b80:	2828d53a 	srli	r20,r5,20
 8042b84:	ddc00f15 	stw	r23,60(sp)
 8042b88:	282ed7fa 	srli	r23,r5,31
 8042b8c:	dc000815 	stw	r16,32(sp)
 8042b90:	04000434 	movhi	r16,16
 8042b94:	dcc00b15 	stw	r19,44(sp)
 8042b98:	843fffc4 	addi	r16,r16,-1
 8042b9c:	dfc01115 	stw	ra,68(sp)
 8042ba0:	df001015 	stw	fp,64(sp)
 8042ba4:	dd800e15 	stw	r22,56(sp)
 8042ba8:	dd400d15 	stw	r21,52(sp)
 8042bac:	dc800a15 	stw	r18,40(sp)
 8042bb0:	dc400915 	stw	r17,36(sp)
 8042bb4:	a501ffcc 	andi	r20,r20,2047
 8042bb8:	2c20703a 	and	r16,r5,r16
 8042bbc:	b827883a 	mov	r19,r23
 8042bc0:	ba403fcc 	andi	r9,r23,255
 8042bc4:	a0006026 	beq	r20,zero,8042d48 <__muldf3+0x1d0>
 8042bc8:	0081ffc4 	movi	r2,2047
 8042bcc:	202d883a 	mov	r22,r4
 8042bd0:	a0803626 	beq	r20,r2,8042cac <__muldf3+0x134>
 8042bd4:	84000434 	orhi	r16,r16,16
 8042bd8:	200ad77a 	srli	r5,r4,29
 8042bdc:	800490fa 	slli	r2,r16,3
 8042be0:	202c90fa 	slli	r22,r4,3
 8042be4:	a53f0044 	addi	r20,r20,-1023
 8042be8:	28a0b03a 	or	r16,r5,r2
 8042bec:	002b883a 	mov	r21,zero
 8042bf0:	000b883a 	mov	r5,zero
 8042bf4:	3804d53a 	srli	r2,r7,20
 8042bf8:	3838d7fa 	srli	fp,r7,31
 8042bfc:	04400434 	movhi	r17,16
 8042c00:	8c7fffc4 	addi	r17,r17,-1
 8042c04:	1081ffcc 	andi	r2,r2,2047
 8042c08:	3025883a 	mov	r18,r6
 8042c0c:	3c62703a 	and	r17,r7,r17
 8042c10:	e2803fcc 	andi	r10,fp,255
 8042c14:	10006d26 	beq	r2,zero,8042dcc <__muldf3+0x254>
 8042c18:	00c1ffc4 	movi	r3,2047
 8042c1c:	10c06526 	beq	r2,r3,8042db4 <__muldf3+0x23c>
 8042c20:	8c400434 	orhi	r17,r17,16
 8042c24:	300ed77a 	srli	r7,r6,29
 8042c28:	880690fa 	slli	r3,r17,3
 8042c2c:	302490fa 	slli	r18,r6,3
 8042c30:	10bf0044 	addi	r2,r2,-1023
 8042c34:	38e2b03a 	or	r17,r7,r3
 8042c38:	000f883a 	mov	r7,zero
 8042c3c:	a087883a 	add	r3,r20,r2
 8042c40:	010003c4 	movi	r4,15
 8042c44:	3d44b03a 	or	r2,r7,r21
 8042c48:	e5ccf03a 	xor	r6,fp,r23
 8042c4c:	1a000044 	addi	r8,r3,1
 8042c50:	20809b36 	bltu	r4,r2,8042ec0 <__muldf3+0x348>
 8042c54:	100490ba 	slli	r2,r2,2
 8042c58:	01020134 	movhi	r4,2052
 8042c5c:	210b1b04 	addi	r4,r4,11372
 8042c60:	1105883a 	add	r2,r2,r4
 8042c64:	10800017 	ldw	r2,0(r2)
 8042c68:	1000683a 	jmp	r2
 8042c6c:	08042ec0 	call	8042ec <__alt_mem_new_sdram_controller_0-0x37fbd14>
 8042c70:	08042ccc 	andi	zero,at,4275
 8042c74:	08042ccc 	andi	zero,at,4275
 8042c78:	08042cc8 	cmpgei	zero,at,4275
 8042c7c:	08042e9c 	xori	zero,at,4282
 8042c80:	08042e9c 	xori	zero,at,4282
 8042c84:	08042e84 	addi	zero,at,4282
 8042c88:	08042cc8 	cmpgei	zero,at,4275
 8042c8c:	08042e9c 	xori	zero,at,4282
 8042c90:	08042e84 	addi	zero,at,4282
 8042c94:	08042e9c 	xori	zero,at,4282
 8042c98:	08042cc8 	cmpgei	zero,at,4275
 8042c9c:	08042eac 	andhi	zero,at,4282
 8042ca0:	08042eac 	andhi	zero,at,4282
 8042ca4:	08042eac 	andhi	zero,at,4282
 8042ca8:	0804320c 	andi	zero,at,4296
 8042cac:	2404b03a 	or	r2,r4,r16
 8042cb0:	1000711e 	bne	r2,zero,8042e78 <__muldf3+0x300>
 8042cb4:	05400204 	movi	r21,8
 8042cb8:	0021883a 	mov	r16,zero
 8042cbc:	002d883a 	mov	r22,zero
 8042cc0:	01400084 	movi	r5,2
 8042cc4:	003fcb06 	br	8042bf4 <__alt_data_end+0xfffdab54>
 8042cc8:	500d883a 	mov	r6,r10
 8042ccc:	00800084 	movi	r2,2
 8042cd0:	38805926 	beq	r7,r2,8042e38 <__muldf3+0x2c0>
 8042cd4:	008000c4 	movi	r2,3
 8042cd8:	3881bb26 	beq	r7,r2,80433c8 <__muldf3+0x850>
 8042cdc:	00800044 	movi	r2,1
 8042ce0:	3881961e 	bne	r7,r2,804333c <__muldf3+0x7c4>
 8042ce4:	3027883a 	mov	r19,r6
 8042ce8:	0005883a 	mov	r2,zero
 8042cec:	0021883a 	mov	r16,zero
 8042cf0:	002d883a 	mov	r22,zero
 8042cf4:	1004953a 	slli	r2,r2,20
 8042cf8:	98c03fcc 	andi	r3,r19,255
 8042cfc:	04400434 	movhi	r17,16
 8042d00:	8c7fffc4 	addi	r17,r17,-1
 8042d04:	180697fa 	slli	r3,r3,31
 8042d08:	8460703a 	and	r16,r16,r17
 8042d0c:	80a0b03a 	or	r16,r16,r2
 8042d10:	80c6b03a 	or	r3,r16,r3
 8042d14:	b005883a 	mov	r2,r22
 8042d18:	dfc01117 	ldw	ra,68(sp)
 8042d1c:	df001017 	ldw	fp,64(sp)
 8042d20:	ddc00f17 	ldw	r23,60(sp)
 8042d24:	dd800e17 	ldw	r22,56(sp)
 8042d28:	dd400d17 	ldw	r21,52(sp)
 8042d2c:	dd000c17 	ldw	r20,48(sp)
 8042d30:	dcc00b17 	ldw	r19,44(sp)
 8042d34:	dc800a17 	ldw	r18,40(sp)
 8042d38:	dc400917 	ldw	r17,36(sp)
 8042d3c:	dc000817 	ldw	r16,32(sp)
 8042d40:	dec01204 	addi	sp,sp,72
 8042d44:	f800283a 	ret
 8042d48:	2404b03a 	or	r2,r4,r16
 8042d4c:	202b883a 	mov	r21,r4
 8042d50:	10004426 	beq	r2,zero,8042e64 <__muldf3+0x2ec>
 8042d54:	80015126 	beq	r16,zero,804329c <__muldf3+0x724>
 8042d58:	8009883a 	mov	r4,r16
 8042d5c:	d9800715 	stw	r6,28(sp)
 8042d60:	d9c00215 	stw	r7,8(sp)
 8042d64:	da400415 	stw	r9,16(sp)
 8042d68:	804369c0 	call	804369c <__clzsi2>
 8042d6c:	d9800717 	ldw	r6,28(sp)
 8042d70:	d9c00217 	ldw	r7,8(sp)
 8042d74:	da400417 	ldw	r9,16(sp)
 8042d78:	113ffd44 	addi	r4,r2,-11
 8042d7c:	00c00704 	movi	r3,28
 8042d80:	19014216 	blt	r3,r4,804328c <__muldf3+0x714>
 8042d84:	00c00744 	movi	r3,29
 8042d88:	15bffe04 	addi	r22,r2,-8
 8042d8c:	1907c83a 	sub	r3,r3,r4
 8042d90:	85a0983a 	sll	r16,r16,r22
 8042d94:	a8c6d83a 	srl	r3,r21,r3
 8042d98:	adac983a 	sll	r22,r21,r22
 8042d9c:	1c20b03a 	or	r16,r3,r16
 8042da0:	1080fcc4 	addi	r2,r2,1011
 8042da4:	00a9c83a 	sub	r20,zero,r2
 8042da8:	002b883a 	mov	r21,zero
 8042dac:	000b883a 	mov	r5,zero
 8042db0:	003f9006 	br	8042bf4 <__alt_data_end+0xfffdab54>
 8042db4:	3446b03a 	or	r3,r6,r17
 8042db8:	1800281e 	bne	r3,zero,8042e5c <__muldf3+0x2e4>
 8042dbc:	0023883a 	mov	r17,zero
 8042dc0:	0025883a 	mov	r18,zero
 8042dc4:	01c00084 	movi	r7,2
 8042dc8:	003f9c06 	br	8042c3c <__alt_data_end+0xfffdab9c>
 8042dcc:	3446b03a 	or	r3,r6,r17
 8042dd0:	18001e26 	beq	r3,zero,8042e4c <__muldf3+0x2d4>
 8042dd4:	88012126 	beq	r17,zero,804325c <__muldf3+0x6e4>
 8042dd8:	8809883a 	mov	r4,r17
 8042ddc:	d9400215 	stw	r5,8(sp)
 8042de0:	d9800715 	stw	r6,28(sp)
 8042de4:	da400415 	stw	r9,16(sp)
 8042de8:	da800315 	stw	r10,12(sp)
 8042dec:	804369c0 	call	804369c <__clzsi2>
 8042df0:	d9400217 	ldw	r5,8(sp)
 8042df4:	d9800717 	ldw	r6,28(sp)
 8042df8:	da400417 	ldw	r9,16(sp)
 8042dfc:	da800317 	ldw	r10,12(sp)
 8042e00:	113ffd44 	addi	r4,r2,-11
 8042e04:	00c00704 	movi	r3,28
 8042e08:	19011016 	blt	r3,r4,804324c <__muldf3+0x6d4>
 8042e0c:	00c00744 	movi	r3,29
 8042e10:	14bffe04 	addi	r18,r2,-8
 8042e14:	1907c83a 	sub	r3,r3,r4
 8042e18:	8ca2983a 	sll	r17,r17,r18
 8042e1c:	30c6d83a 	srl	r3,r6,r3
 8042e20:	34a4983a 	sll	r18,r6,r18
 8042e24:	1c62b03a 	or	r17,r3,r17
 8042e28:	1080fcc4 	addi	r2,r2,1011
 8042e2c:	0085c83a 	sub	r2,zero,r2
 8042e30:	000f883a 	mov	r7,zero
 8042e34:	003f8106 	br	8042c3c <__alt_data_end+0xfffdab9c>
 8042e38:	3027883a 	mov	r19,r6
 8042e3c:	0081ffc4 	movi	r2,2047
 8042e40:	0021883a 	mov	r16,zero
 8042e44:	002d883a 	mov	r22,zero
 8042e48:	003faa06 	br	8042cf4 <__alt_data_end+0xfffdac54>
 8042e4c:	0023883a 	mov	r17,zero
 8042e50:	0025883a 	mov	r18,zero
 8042e54:	01c00044 	movi	r7,1
 8042e58:	003f7806 	br	8042c3c <__alt_data_end+0xfffdab9c>
 8042e5c:	01c000c4 	movi	r7,3
 8042e60:	003f7606 	br	8042c3c <__alt_data_end+0xfffdab9c>
 8042e64:	05400104 	movi	r21,4
 8042e68:	0021883a 	mov	r16,zero
 8042e6c:	002d883a 	mov	r22,zero
 8042e70:	01400044 	movi	r5,1
 8042e74:	003f5f06 	br	8042bf4 <__alt_data_end+0xfffdab54>
 8042e78:	05400304 	movi	r21,12
 8042e7c:	014000c4 	movi	r5,3
 8042e80:	003f5c06 	br	8042bf4 <__alt_data_end+0xfffdab54>
 8042e84:	04000434 	movhi	r16,16
 8042e88:	0027883a 	mov	r19,zero
 8042e8c:	843fffc4 	addi	r16,r16,-1
 8042e90:	05bfffc4 	movi	r22,-1
 8042e94:	0081ffc4 	movi	r2,2047
 8042e98:	003f9606 	br	8042cf4 <__alt_data_end+0xfffdac54>
 8042e9c:	8023883a 	mov	r17,r16
 8042ea0:	b025883a 	mov	r18,r22
 8042ea4:	280f883a 	mov	r7,r5
 8042ea8:	003f8806 	br	8042ccc <__alt_data_end+0xfffdac2c>
 8042eac:	8023883a 	mov	r17,r16
 8042eb0:	b025883a 	mov	r18,r22
 8042eb4:	480d883a 	mov	r6,r9
 8042eb8:	280f883a 	mov	r7,r5
 8042ebc:	003f8306 	br	8042ccc <__alt_data_end+0xfffdac2c>
 8042ec0:	b026d43a 	srli	r19,r22,16
 8042ec4:	902ed43a 	srli	r23,r18,16
 8042ec8:	b5bfffcc 	andi	r22,r22,65535
 8042ecc:	94bfffcc 	andi	r18,r18,65535
 8042ed0:	b00b883a 	mov	r5,r22
 8042ed4:	9009883a 	mov	r4,r18
 8042ed8:	d8c00515 	stw	r3,20(sp)
 8042edc:	d9800715 	stw	r6,28(sp)
 8042ee0:	da000615 	stw	r8,24(sp)
 8042ee4:	80418e00 	call	80418e0 <__mulsi3>
 8042ee8:	980b883a 	mov	r5,r19
 8042eec:	9009883a 	mov	r4,r18
 8042ef0:	1029883a 	mov	r20,r2
 8042ef4:	80418e00 	call	80418e0 <__mulsi3>
 8042ef8:	b80b883a 	mov	r5,r23
 8042efc:	9809883a 	mov	r4,r19
 8042f00:	102b883a 	mov	r21,r2
 8042f04:	80418e00 	call	80418e0 <__mulsi3>
 8042f08:	b809883a 	mov	r4,r23
 8042f0c:	b00b883a 	mov	r5,r22
 8042f10:	1039883a 	mov	fp,r2
 8042f14:	80418e00 	call	80418e0 <__mulsi3>
 8042f18:	a008d43a 	srli	r4,r20,16
 8042f1c:	1545883a 	add	r2,r2,r21
 8042f20:	d8c00517 	ldw	r3,20(sp)
 8042f24:	2085883a 	add	r2,r4,r2
 8042f28:	d9800717 	ldw	r6,28(sp)
 8042f2c:	da000617 	ldw	r8,24(sp)
 8042f30:	1540022e 	bgeu	r2,r21,8042f3c <__muldf3+0x3c4>
 8042f34:	01000074 	movhi	r4,1
 8042f38:	e139883a 	add	fp,fp,r4
 8042f3c:	100e943a 	slli	r7,r2,16
 8042f40:	1004d43a 	srli	r2,r2,16
 8042f44:	882ad43a 	srli	r21,r17,16
 8042f48:	a53fffcc 	andi	r20,r20,65535
 8042f4c:	8c7fffcc 	andi	r17,r17,65535
 8042f50:	3d29883a 	add	r20,r7,r20
 8042f54:	b00b883a 	mov	r5,r22
 8042f58:	8809883a 	mov	r4,r17
 8042f5c:	d8c00515 	stw	r3,20(sp)
 8042f60:	d9800715 	stw	r6,28(sp)
 8042f64:	da000615 	stw	r8,24(sp)
 8042f68:	dd000115 	stw	r20,4(sp)
 8042f6c:	d8800015 	stw	r2,0(sp)
 8042f70:	80418e00 	call	80418e0 <__mulsi3>
 8042f74:	980b883a 	mov	r5,r19
 8042f78:	8809883a 	mov	r4,r17
 8042f7c:	d8800215 	stw	r2,8(sp)
 8042f80:	80418e00 	call	80418e0 <__mulsi3>
 8042f84:	9809883a 	mov	r4,r19
 8042f88:	a80b883a 	mov	r5,r21
 8042f8c:	1029883a 	mov	r20,r2
 8042f90:	80418e00 	call	80418e0 <__mulsi3>
 8042f94:	b00b883a 	mov	r5,r22
 8042f98:	a809883a 	mov	r4,r21
 8042f9c:	d8800415 	stw	r2,16(sp)
 8042fa0:	80418e00 	call	80418e0 <__mulsi3>
 8042fa4:	d9c00217 	ldw	r7,8(sp)
 8042fa8:	1505883a 	add	r2,r2,r20
 8042fac:	d8c00517 	ldw	r3,20(sp)
 8042fb0:	3826d43a 	srli	r19,r7,16
 8042fb4:	d9800717 	ldw	r6,28(sp)
 8042fb8:	da000617 	ldw	r8,24(sp)
 8042fbc:	9885883a 	add	r2,r19,r2
 8042fc0:	da400417 	ldw	r9,16(sp)
 8042fc4:	1500022e 	bgeu	r2,r20,8042fd0 <__muldf3+0x458>
 8042fc8:	01000074 	movhi	r4,1
 8042fcc:	4913883a 	add	r9,r9,r4
 8042fd0:	1028d43a 	srli	r20,r2,16
 8042fd4:	1004943a 	slli	r2,r2,16
 8042fd8:	802cd43a 	srli	r22,r16,16
 8042fdc:	843fffcc 	andi	r16,r16,65535
 8042fe0:	3cffffcc 	andi	r19,r7,65535
 8042fe4:	9009883a 	mov	r4,r18
 8042fe8:	800b883a 	mov	r5,r16
 8042fec:	a269883a 	add	r20,r20,r9
 8042ff0:	d8c00515 	stw	r3,20(sp)
 8042ff4:	d9800715 	stw	r6,28(sp)
 8042ff8:	da000615 	stw	r8,24(sp)
 8042ffc:	14e7883a 	add	r19,r2,r19
 8043000:	80418e00 	call	80418e0 <__mulsi3>
 8043004:	9009883a 	mov	r4,r18
 8043008:	b00b883a 	mov	r5,r22
 804300c:	d8800315 	stw	r2,12(sp)
 8043010:	80418e00 	call	80418e0 <__mulsi3>
 8043014:	b809883a 	mov	r4,r23
 8043018:	b00b883a 	mov	r5,r22
 804301c:	d8800215 	stw	r2,8(sp)
 8043020:	80418e00 	call	80418e0 <__mulsi3>
 8043024:	b80b883a 	mov	r5,r23
 8043028:	8009883a 	mov	r4,r16
 804302c:	d8800415 	stw	r2,16(sp)
 8043030:	80418e00 	call	80418e0 <__mulsi3>
 8043034:	da800317 	ldw	r10,12(sp)
 8043038:	d9c00217 	ldw	r7,8(sp)
 804303c:	d9000017 	ldw	r4,0(sp)
 8043040:	502ed43a 	srli	r23,r10,16
 8043044:	11c5883a 	add	r2,r2,r7
 8043048:	24e5883a 	add	r18,r4,r19
 804304c:	b885883a 	add	r2,r23,r2
 8043050:	d8c00517 	ldw	r3,20(sp)
 8043054:	d9800717 	ldw	r6,28(sp)
 8043058:	da000617 	ldw	r8,24(sp)
 804305c:	da400417 	ldw	r9,16(sp)
 8043060:	11c0022e 	bgeu	r2,r7,804306c <__muldf3+0x4f4>
 8043064:	01000074 	movhi	r4,1
 8043068:	4913883a 	add	r9,r9,r4
 804306c:	100ed43a 	srli	r7,r2,16
 8043070:	1004943a 	slli	r2,r2,16
 8043074:	55ffffcc 	andi	r23,r10,65535
 8043078:	3a53883a 	add	r9,r7,r9
 804307c:	8809883a 	mov	r4,r17
 8043080:	800b883a 	mov	r5,r16
 8043084:	d8c00515 	stw	r3,20(sp)
 8043088:	d9800715 	stw	r6,28(sp)
 804308c:	da000615 	stw	r8,24(sp)
 8043090:	da400415 	stw	r9,16(sp)
 8043094:	15ef883a 	add	r23,r2,r23
 8043098:	80418e00 	call	80418e0 <__mulsi3>
 804309c:	8809883a 	mov	r4,r17
 80430a0:	b00b883a 	mov	r5,r22
 80430a4:	d8800215 	stw	r2,8(sp)
 80430a8:	80418e00 	call	80418e0 <__mulsi3>
 80430ac:	b00b883a 	mov	r5,r22
 80430b0:	a809883a 	mov	r4,r21
 80430b4:	d8800315 	stw	r2,12(sp)
 80430b8:	80418e00 	call	80418e0 <__mulsi3>
 80430bc:	8009883a 	mov	r4,r16
 80430c0:	a80b883a 	mov	r5,r21
 80430c4:	1023883a 	mov	r17,r2
 80430c8:	80418e00 	call	80418e0 <__mulsi3>
 80430cc:	d9c00217 	ldw	r7,8(sp)
 80430d0:	da800317 	ldw	r10,12(sp)
 80430d4:	d8c00517 	ldw	r3,20(sp)
 80430d8:	3808d43a 	srli	r4,r7,16
 80430dc:	1285883a 	add	r2,r2,r10
 80430e0:	d9800717 	ldw	r6,28(sp)
 80430e4:	2085883a 	add	r2,r4,r2
 80430e8:	da000617 	ldw	r8,24(sp)
 80430ec:	da400417 	ldw	r9,16(sp)
 80430f0:	1280022e 	bgeu	r2,r10,80430fc <__muldf3+0x584>
 80430f4:	01000074 	movhi	r4,1
 80430f8:	8923883a 	add	r17,r17,r4
 80430fc:	1008943a 	slli	r4,r2,16
 8043100:	39ffffcc 	andi	r7,r7,65535
 8043104:	e4b9883a 	add	fp,fp,r18
 8043108:	21cf883a 	add	r7,r4,r7
 804310c:	e4e7803a 	cmpltu	r19,fp,r19
 8043110:	3d0f883a 	add	r7,r7,r20
 8043114:	bf39883a 	add	fp,r23,fp
 8043118:	99c9883a 	add	r4,r19,r7
 804311c:	e5ef803a 	cmpltu	r23,fp,r23
 8043120:	490b883a 	add	r5,r9,r4
 8043124:	1004d43a 	srli	r2,r2,16
 8043128:	b965883a 	add	r18,r23,r5
 804312c:	24c9803a 	cmpltu	r4,r4,r19
 8043130:	3d29803a 	cmpltu	r20,r7,r20
 8043134:	a128b03a 	or	r20,r20,r4
 8043138:	95ef803a 	cmpltu	r23,r18,r23
 804313c:	2a53803a 	cmpltu	r9,r5,r9
 8043140:	a0a9883a 	add	r20,r20,r2
 8043144:	4deeb03a 	or	r23,r9,r23
 8043148:	a5ef883a 	add	r23,r20,r23
 804314c:	bc63883a 	add	r17,r23,r17
 8043150:	e004927a 	slli	r2,fp,9
 8043154:	d9000117 	ldw	r4,4(sp)
 8043158:	882e927a 	slli	r23,r17,9
 804315c:	9022d5fa 	srli	r17,r18,23
 8043160:	e038d5fa 	srli	fp,fp,23
 8043164:	1104b03a 	or	r2,r2,r4
 8043168:	9024927a 	slli	r18,r18,9
 804316c:	1004c03a 	cmpne	r2,r2,zero
 8043170:	bc62b03a 	or	r17,r23,r17
 8043174:	1738b03a 	or	fp,r2,fp
 8043178:	8880402c 	andhi	r2,r17,256
 804317c:	e4a4b03a 	or	r18,fp,r18
 8043180:	10000726 	beq	r2,zero,80431a0 <__muldf3+0x628>
 8043184:	9006d07a 	srli	r3,r18,1
 8043188:	880497fa 	slli	r2,r17,31
 804318c:	9480004c 	andi	r18,r18,1
 8043190:	8822d07a 	srli	r17,r17,1
 8043194:	1ca4b03a 	or	r18,r3,r18
 8043198:	14a4b03a 	or	r18,r2,r18
 804319c:	4007883a 	mov	r3,r8
 80431a0:	1880ffc4 	addi	r2,r3,1023
 80431a4:	0080460e 	bge	zero,r2,80432c0 <__muldf3+0x748>
 80431a8:	910001cc 	andi	r4,r18,7
 80431ac:	20000726 	beq	r4,zero,80431cc <__muldf3+0x654>
 80431b0:	910003cc 	andi	r4,r18,15
 80431b4:	01400104 	movi	r5,4
 80431b8:	21400426 	beq	r4,r5,80431cc <__muldf3+0x654>
 80431bc:	9149883a 	add	r4,r18,r5
 80431c0:	24a5803a 	cmpltu	r18,r4,r18
 80431c4:	8ca3883a 	add	r17,r17,r18
 80431c8:	2025883a 	mov	r18,r4
 80431cc:	8900402c 	andhi	r4,r17,256
 80431d0:	20000426 	beq	r4,zero,80431e4 <__muldf3+0x66c>
 80431d4:	18810004 	addi	r2,r3,1024
 80431d8:	00ffc034 	movhi	r3,65280
 80431dc:	18ffffc4 	addi	r3,r3,-1
 80431e0:	88e2703a 	and	r17,r17,r3
 80431e4:	00c1ff84 	movi	r3,2046
 80431e8:	18bf1316 	blt	r3,r2,8042e38 <__alt_data_end+0xfffdad98>
 80431ec:	882c977a 	slli	r22,r17,29
 80431f0:	9024d0fa 	srli	r18,r18,3
 80431f4:	8822927a 	slli	r17,r17,9
 80431f8:	1081ffcc 	andi	r2,r2,2047
 80431fc:	b4acb03a 	or	r22,r22,r18
 8043200:	8820d33a 	srli	r16,r17,12
 8043204:	3027883a 	mov	r19,r6
 8043208:	003eba06 	br	8042cf4 <__alt_data_end+0xfffdac54>
 804320c:	8080022c 	andhi	r2,r16,8
 8043210:	10000926 	beq	r2,zero,8043238 <__muldf3+0x6c0>
 8043214:	8880022c 	andhi	r2,r17,8
 8043218:	1000071e 	bne	r2,zero,8043238 <__muldf3+0x6c0>
 804321c:	00800434 	movhi	r2,16
 8043220:	8c000234 	orhi	r16,r17,8
 8043224:	10bfffc4 	addi	r2,r2,-1
 8043228:	e027883a 	mov	r19,fp
 804322c:	80a0703a 	and	r16,r16,r2
 8043230:	902d883a 	mov	r22,r18
 8043234:	003f1706 	br	8042e94 <__alt_data_end+0xfffdadf4>
 8043238:	00800434 	movhi	r2,16
 804323c:	84000234 	orhi	r16,r16,8
 8043240:	10bfffc4 	addi	r2,r2,-1
 8043244:	80a0703a 	and	r16,r16,r2
 8043248:	003f1206 	br	8042e94 <__alt_data_end+0xfffdadf4>
 804324c:	147ff604 	addi	r17,r2,-40
 8043250:	3462983a 	sll	r17,r6,r17
 8043254:	0025883a 	mov	r18,zero
 8043258:	003ef306 	br	8042e28 <__alt_data_end+0xfffdad88>
 804325c:	3009883a 	mov	r4,r6
 8043260:	d9400215 	stw	r5,8(sp)
 8043264:	d9800715 	stw	r6,28(sp)
 8043268:	da400415 	stw	r9,16(sp)
 804326c:	da800315 	stw	r10,12(sp)
 8043270:	804369c0 	call	804369c <__clzsi2>
 8043274:	10800804 	addi	r2,r2,32
 8043278:	da800317 	ldw	r10,12(sp)
 804327c:	da400417 	ldw	r9,16(sp)
 8043280:	d9800717 	ldw	r6,28(sp)
 8043284:	d9400217 	ldw	r5,8(sp)
 8043288:	003edd06 	br	8042e00 <__alt_data_end+0xfffdad60>
 804328c:	143ff604 	addi	r16,r2,-40
 8043290:	ac20983a 	sll	r16,r21,r16
 8043294:	002d883a 	mov	r22,zero
 8043298:	003ec106 	br	8042da0 <__alt_data_end+0xfffdad00>
 804329c:	d9800715 	stw	r6,28(sp)
 80432a0:	d9c00215 	stw	r7,8(sp)
 80432a4:	da400415 	stw	r9,16(sp)
 80432a8:	804369c0 	call	804369c <__clzsi2>
 80432ac:	10800804 	addi	r2,r2,32
 80432b0:	da400417 	ldw	r9,16(sp)
 80432b4:	d9c00217 	ldw	r7,8(sp)
 80432b8:	d9800717 	ldw	r6,28(sp)
 80432bc:	003eae06 	br	8042d78 <__alt_data_end+0xfffdacd8>
 80432c0:	00c00044 	movi	r3,1
 80432c4:	1887c83a 	sub	r3,r3,r2
 80432c8:	01000e04 	movi	r4,56
 80432cc:	20fe8516 	blt	r4,r3,8042ce4 <__alt_data_end+0xfffdac44>
 80432d0:	010007c4 	movi	r4,31
 80432d4:	20c01b16 	blt	r4,r3,8043344 <__muldf3+0x7cc>
 80432d8:	00800804 	movi	r2,32
 80432dc:	10c5c83a 	sub	r2,r2,r3
 80432e0:	888a983a 	sll	r5,r17,r2
 80432e4:	90c8d83a 	srl	r4,r18,r3
 80432e8:	9084983a 	sll	r2,r18,r2
 80432ec:	88e2d83a 	srl	r17,r17,r3
 80432f0:	2906b03a 	or	r3,r5,r4
 80432f4:	1004c03a 	cmpne	r2,r2,zero
 80432f8:	1886b03a 	or	r3,r3,r2
 80432fc:	188001cc 	andi	r2,r3,7
 8043300:	10000726 	beq	r2,zero,8043320 <__muldf3+0x7a8>
 8043304:	188003cc 	andi	r2,r3,15
 8043308:	01000104 	movi	r4,4
 804330c:	11000426 	beq	r2,r4,8043320 <__muldf3+0x7a8>
 8043310:	1805883a 	mov	r2,r3
 8043314:	10c00104 	addi	r3,r2,4
 8043318:	1885803a 	cmpltu	r2,r3,r2
 804331c:	88a3883a 	add	r17,r17,r2
 8043320:	8880202c 	andhi	r2,r17,128
 8043324:	10001c26 	beq	r2,zero,8043398 <__muldf3+0x820>
 8043328:	3027883a 	mov	r19,r6
 804332c:	00800044 	movi	r2,1
 8043330:	0021883a 	mov	r16,zero
 8043334:	002d883a 	mov	r22,zero
 8043338:	003e6e06 	br	8042cf4 <__alt_data_end+0xfffdac54>
 804333c:	4007883a 	mov	r3,r8
 8043340:	003f9706 	br	80431a0 <__alt_data_end+0xfffdb100>
 8043344:	017ff844 	movi	r5,-31
 8043348:	2885c83a 	sub	r2,r5,r2
 804334c:	888ad83a 	srl	r5,r17,r2
 8043350:	00800804 	movi	r2,32
 8043354:	18801a26 	beq	r3,r2,80433c0 <__muldf3+0x848>
 8043358:	01001004 	movi	r4,64
 804335c:	20c7c83a 	sub	r3,r4,r3
 8043360:	88e2983a 	sll	r17,r17,r3
 8043364:	8ca4b03a 	or	r18,r17,r18
 8043368:	9004c03a 	cmpne	r2,r18,zero
 804336c:	2884b03a 	or	r2,r5,r2
 8043370:	144001cc 	andi	r17,r2,7
 8043374:	88000d1e 	bne	r17,zero,80433ac <__muldf3+0x834>
 8043378:	0021883a 	mov	r16,zero
 804337c:	102cd0fa 	srli	r22,r2,3
 8043380:	3027883a 	mov	r19,r6
 8043384:	0005883a 	mov	r2,zero
 8043388:	b46cb03a 	or	r22,r22,r17
 804338c:	003e5906 	br	8042cf4 <__alt_data_end+0xfffdac54>
 8043390:	1007883a 	mov	r3,r2
 8043394:	0023883a 	mov	r17,zero
 8043398:	8820927a 	slli	r16,r17,9
 804339c:	1805883a 	mov	r2,r3
 80433a0:	8822977a 	slli	r17,r17,29
 80433a4:	8020d33a 	srli	r16,r16,12
 80433a8:	003ff406 	br	804337c <__alt_data_end+0xfffdb2dc>
 80433ac:	10c003cc 	andi	r3,r2,15
 80433b0:	01000104 	movi	r4,4
 80433b4:	193ff626 	beq	r3,r4,8043390 <__alt_data_end+0xfffdb2f0>
 80433b8:	0023883a 	mov	r17,zero
 80433bc:	003fd506 	br	8043314 <__alt_data_end+0xfffdb274>
 80433c0:	0023883a 	mov	r17,zero
 80433c4:	003fe706 	br	8043364 <__alt_data_end+0xfffdb2c4>
 80433c8:	00800434 	movhi	r2,16
 80433cc:	8c000234 	orhi	r16,r17,8
 80433d0:	10bfffc4 	addi	r2,r2,-1
 80433d4:	3027883a 	mov	r19,r6
 80433d8:	80a0703a 	and	r16,r16,r2
 80433dc:	902d883a 	mov	r22,r18
 80433e0:	003eac06 	br	8042e94 <__alt_data_end+0xfffdadf4>

080433e4 <__extendsfdf2>:
 80433e4:	200ad5fa 	srli	r5,r4,23
 80433e8:	defffd04 	addi	sp,sp,-12
 80433ec:	dc400115 	stw	r17,4(sp)
 80433f0:	29403fcc 	andi	r5,r5,255
 80433f4:	29800044 	addi	r6,r5,1
 80433f8:	04402034 	movhi	r17,128
 80433fc:	dc000015 	stw	r16,0(sp)
 8043400:	8c7fffc4 	addi	r17,r17,-1
 8043404:	dfc00215 	stw	ra,8(sp)
 8043408:	31803fcc 	andi	r6,r6,255
 804340c:	00800044 	movi	r2,1
 8043410:	8922703a 	and	r17,r17,r4
 8043414:	2020d7fa 	srli	r16,r4,31
 8043418:	1180110e 	bge	r2,r6,8043460 <__extendsfdf2+0x7c>
 804341c:	880cd0fa 	srli	r6,r17,3
 8043420:	8822977a 	slli	r17,r17,29
 8043424:	2940e004 	addi	r5,r5,896
 8043428:	2941ffcc 	andi	r5,r5,2047
 804342c:	2804953a 	slli	r2,r5,20
 8043430:	01400434 	movhi	r5,16
 8043434:	800697fa 	slli	r3,r16,31
 8043438:	297fffc4 	addi	r5,r5,-1
 804343c:	314a703a 	and	r5,r6,r5
 8043440:	288ab03a 	or	r5,r5,r2
 8043444:	28c6b03a 	or	r3,r5,r3
 8043448:	8805883a 	mov	r2,r17
 804344c:	dfc00217 	ldw	ra,8(sp)
 8043450:	dc400117 	ldw	r17,4(sp)
 8043454:	dc000017 	ldw	r16,0(sp)
 8043458:	dec00304 	addi	sp,sp,12
 804345c:	f800283a 	ret
 8043460:	2800111e 	bne	r5,zero,80434a8 <__extendsfdf2+0xc4>
 8043464:	88001c26 	beq	r17,zero,80434d8 <__extendsfdf2+0xf4>
 8043468:	8809883a 	mov	r4,r17
 804346c:	804369c0 	call	804369c <__clzsi2>
 8043470:	00c00284 	movi	r3,10
 8043474:	18801b16 	blt	r3,r2,80434e4 <__extendsfdf2+0x100>
 8043478:	018002c4 	movi	r6,11
 804347c:	308dc83a 	sub	r6,r6,r2
 8043480:	11000544 	addi	r4,r2,21
 8043484:	8986d83a 	srl	r3,r17,r6
 8043488:	8922983a 	sll	r17,r17,r4
 804348c:	0180e244 	movi	r6,905
 8043490:	01400434 	movhi	r5,16
 8043494:	3085c83a 	sub	r2,r6,r2
 8043498:	297fffc4 	addi	r5,r5,-1
 804349c:	194c703a 	and	r6,r3,r5
 80434a0:	1141ffcc 	andi	r5,r2,2047
 80434a4:	003fe006 	br	8043428 <__alt_data_end+0xfffdb388>
 80434a8:	88000826 	beq	r17,zero,80434cc <__extendsfdf2+0xe8>
 80434ac:	880cd0fa 	srli	r6,r17,3
 80434b0:	00800434 	movhi	r2,16
 80434b4:	10bfffc4 	addi	r2,r2,-1
 80434b8:	31800234 	orhi	r6,r6,8
 80434bc:	8822977a 	slli	r17,r17,29
 80434c0:	308c703a 	and	r6,r6,r2
 80434c4:	0141ffc4 	movi	r5,2047
 80434c8:	003fd706 	br	8043428 <__alt_data_end+0xfffdb388>
 80434cc:	0141ffc4 	movi	r5,2047
 80434d0:	000d883a 	mov	r6,zero
 80434d4:	003fd406 	br	8043428 <__alt_data_end+0xfffdb388>
 80434d8:	000b883a 	mov	r5,zero
 80434dc:	000d883a 	mov	r6,zero
 80434e0:	003fd106 	br	8043428 <__alt_data_end+0xfffdb388>
 80434e4:	11bffd44 	addi	r6,r2,-11
 80434e8:	8986983a 	sll	r3,r17,r6
 80434ec:	0023883a 	mov	r17,zero
 80434f0:	003fe606 	br	804348c <__alt_data_end+0xfffdb3ec>

080434f4 <__truncdfsf2>:
 80434f4:	2810d53a 	srli	r8,r5,20
 80434f8:	01c00434 	movhi	r7,16
 80434fc:	39ffffc4 	addi	r7,r7,-1
 8043500:	29ce703a 	and	r7,r5,r7
 8043504:	4201ffcc 	andi	r8,r8,2047
 8043508:	380e90fa 	slli	r7,r7,3
 804350c:	200cd77a 	srli	r6,r4,29
 8043510:	42400044 	addi	r9,r8,1
 8043514:	4a41ffcc 	andi	r9,r9,2047
 8043518:	00c00044 	movi	r3,1
 804351c:	280ad7fa 	srli	r5,r5,31
 8043520:	31ceb03a 	or	r7,r6,r7
 8043524:	200490fa 	slli	r2,r4,3
 8043528:	1a40230e 	bge	r3,r9,80435b8 <__truncdfsf2+0xc4>
 804352c:	40ff2004 	addi	r3,r8,-896
 8043530:	01803f84 	movi	r6,254
 8043534:	30c01516 	blt	r6,r3,804358c <__truncdfsf2+0x98>
 8043538:	00c0380e 	bge	zero,r3,804361c <__truncdfsf2+0x128>
 804353c:	200c91ba 	slli	r6,r4,6
 8043540:	380e90fa 	slli	r7,r7,3
 8043544:	1004d77a 	srli	r2,r2,29
 8043548:	300cc03a 	cmpne	r6,r6,zero
 804354c:	31ccb03a 	or	r6,r6,r7
 8043550:	308cb03a 	or	r6,r6,r2
 8043554:	308001cc 	andi	r2,r6,7
 8043558:	10000426 	beq	r2,zero,804356c <__truncdfsf2+0x78>
 804355c:	308003cc 	andi	r2,r6,15
 8043560:	01000104 	movi	r4,4
 8043564:	11000126 	beq	r2,r4,804356c <__truncdfsf2+0x78>
 8043568:	31800104 	addi	r6,r6,4
 804356c:	3081002c 	andhi	r2,r6,1024
 8043570:	10001626 	beq	r2,zero,80435cc <__truncdfsf2+0xd8>
 8043574:	18c00044 	addi	r3,r3,1
 8043578:	00803fc4 	movi	r2,255
 804357c:	18800326 	beq	r3,r2,804358c <__truncdfsf2+0x98>
 8043580:	300c91ba 	slli	r6,r6,6
 8043584:	300cd27a 	srli	r6,r6,9
 8043588:	00000206 	br	8043594 <__truncdfsf2+0xa0>
 804358c:	00ffffc4 	movi	r3,-1
 8043590:	000d883a 	mov	r6,zero
 8043594:	18c03fcc 	andi	r3,r3,255
 8043598:	180895fa 	slli	r4,r3,23
 804359c:	00c02034 	movhi	r3,128
 80435a0:	280a97fa 	slli	r5,r5,31
 80435a4:	18ffffc4 	addi	r3,r3,-1
 80435a8:	30c6703a 	and	r3,r6,r3
 80435ac:	1906b03a 	or	r3,r3,r4
 80435b0:	1944b03a 	or	r2,r3,r5
 80435b4:	f800283a 	ret
 80435b8:	40000b1e 	bne	r8,zero,80435e8 <__truncdfsf2+0xf4>
 80435bc:	388cb03a 	or	r6,r7,r2
 80435c0:	0007883a 	mov	r3,zero
 80435c4:	30000426 	beq	r6,zero,80435d8 <__truncdfsf2+0xe4>
 80435c8:	01800144 	movi	r6,5
 80435cc:	00803fc4 	movi	r2,255
 80435d0:	300cd0fa 	srli	r6,r6,3
 80435d4:	18800a26 	beq	r3,r2,8043600 <__truncdfsf2+0x10c>
 80435d8:	00802034 	movhi	r2,128
 80435dc:	10bfffc4 	addi	r2,r2,-1
 80435e0:	308c703a 	and	r6,r6,r2
 80435e4:	003feb06 	br	8043594 <__alt_data_end+0xfffdb4f4>
 80435e8:	3888b03a 	or	r4,r7,r2
 80435ec:	203fe726 	beq	r4,zero,804358c <__alt_data_end+0xfffdb4ec>
 80435f0:	380c90fa 	slli	r6,r7,3
 80435f4:	00c03fc4 	movi	r3,255
 80435f8:	31808034 	orhi	r6,r6,512
 80435fc:	003fd506 	br	8043554 <__alt_data_end+0xfffdb4b4>
 8043600:	303fe226 	beq	r6,zero,804358c <__alt_data_end+0xfffdb4ec>
 8043604:	00802034 	movhi	r2,128
 8043608:	31801034 	orhi	r6,r6,64
 804360c:	10bfffc4 	addi	r2,r2,-1
 8043610:	00ffffc4 	movi	r3,-1
 8043614:	308c703a 	and	r6,r6,r2
 8043618:	003fde06 	br	8043594 <__alt_data_end+0xfffdb4f4>
 804361c:	013ffa44 	movi	r4,-23
 8043620:	19000e16 	blt	r3,r4,804365c <__truncdfsf2+0x168>
 8043624:	01000784 	movi	r4,30
 8043628:	20c9c83a 	sub	r4,r4,r3
 804362c:	018007c4 	movi	r6,31
 8043630:	39c02034 	orhi	r7,r7,128
 8043634:	31000b16 	blt	r6,r4,8043664 <__truncdfsf2+0x170>
 8043638:	423f2084 	addi	r8,r8,-894
 804363c:	120c983a 	sll	r6,r2,r8
 8043640:	3a0e983a 	sll	r7,r7,r8
 8043644:	1104d83a 	srl	r2,r2,r4
 8043648:	300cc03a 	cmpne	r6,r6,zero
 804364c:	31ceb03a 	or	r7,r6,r7
 8043650:	388cb03a 	or	r6,r7,r2
 8043654:	0007883a 	mov	r3,zero
 8043658:	003fbe06 	br	8043554 <__alt_data_end+0xfffdb4b4>
 804365c:	0007883a 	mov	r3,zero
 8043660:	003fd906 	br	80435c8 <__alt_data_end+0xfffdb528>
 8043664:	01bfff84 	movi	r6,-2
 8043668:	30cdc83a 	sub	r6,r6,r3
 804366c:	00c00804 	movi	r3,32
 8043670:	398cd83a 	srl	r6,r7,r6
 8043674:	20c00726 	beq	r4,r3,8043694 <__truncdfsf2+0x1a0>
 8043678:	423f2884 	addi	r8,r8,-862
 804367c:	3a0e983a 	sll	r7,r7,r8
 8043680:	3884b03a 	or	r2,r7,r2
 8043684:	1004c03a 	cmpne	r2,r2,zero
 8043688:	118cb03a 	or	r6,r2,r6
 804368c:	0007883a 	mov	r3,zero
 8043690:	003fb006 	br	8043554 <__alt_data_end+0xfffdb4b4>
 8043694:	000f883a 	mov	r7,zero
 8043698:	003ff906 	br	8043680 <__alt_data_end+0xfffdb5e0>

0804369c <__clzsi2>:
 804369c:	00bfffd4 	movui	r2,65535
 80436a0:	11000536 	bltu	r2,r4,80436b8 <__clzsi2+0x1c>
 80436a4:	00803fc4 	movi	r2,255
 80436a8:	11000f36 	bltu	r2,r4,80436e8 <__clzsi2+0x4c>
 80436ac:	00800804 	movi	r2,32
 80436b0:	0007883a 	mov	r3,zero
 80436b4:	00000506 	br	80436cc <__clzsi2+0x30>
 80436b8:	00804034 	movhi	r2,256
 80436bc:	10bfffc4 	addi	r2,r2,-1
 80436c0:	11000c2e 	bgeu	r2,r4,80436f4 <__clzsi2+0x58>
 80436c4:	00800204 	movi	r2,8
 80436c8:	00c00604 	movi	r3,24
 80436cc:	20c8d83a 	srl	r4,r4,r3
 80436d0:	00c20174 	movhi	r3,2053
 80436d4:	18cbe484 	addi	r3,r3,12178
 80436d8:	1909883a 	add	r4,r3,r4
 80436dc:	20c00003 	ldbu	r3,0(r4)
 80436e0:	10c5c83a 	sub	r2,r2,r3
 80436e4:	f800283a 	ret
 80436e8:	00800604 	movi	r2,24
 80436ec:	00c00204 	movi	r3,8
 80436f0:	003ff606 	br	80436cc <__alt_data_end+0xfffdb62c>
 80436f4:	00800404 	movi	r2,16
 80436f8:	1007883a 	mov	r3,r2
 80436fc:	003ff306 	br	80436cc <__alt_data_end+0xfffdb62c>

08043700 <__divsi3>:
 8043700:	20001b16 	blt	r4,zero,8043770 <__divsi3+0x70>
 8043704:	000f883a 	mov	r7,zero
 8043708:	28001616 	blt	r5,zero,8043764 <__divsi3+0x64>
 804370c:	200d883a 	mov	r6,r4
 8043710:	29001a2e 	bgeu	r5,r4,804377c <__divsi3+0x7c>
 8043714:	00800804 	movi	r2,32
 8043718:	00c00044 	movi	r3,1
 804371c:	00000106 	br	8043724 <__divsi3+0x24>
 8043720:	10000d26 	beq	r2,zero,8043758 <__divsi3+0x58>
 8043724:	294b883a 	add	r5,r5,r5
 8043728:	10bfffc4 	addi	r2,r2,-1
 804372c:	18c7883a 	add	r3,r3,r3
 8043730:	293ffb36 	bltu	r5,r4,8043720 <__alt_data_end+0xfffdb680>
 8043734:	0005883a 	mov	r2,zero
 8043738:	18000726 	beq	r3,zero,8043758 <__divsi3+0x58>
 804373c:	0005883a 	mov	r2,zero
 8043740:	31400236 	bltu	r6,r5,804374c <__divsi3+0x4c>
 8043744:	314dc83a 	sub	r6,r6,r5
 8043748:	10c4b03a 	or	r2,r2,r3
 804374c:	1806d07a 	srli	r3,r3,1
 8043750:	280ad07a 	srli	r5,r5,1
 8043754:	183ffa1e 	bne	r3,zero,8043740 <__alt_data_end+0xfffdb6a0>
 8043758:	38000126 	beq	r7,zero,8043760 <__divsi3+0x60>
 804375c:	0085c83a 	sub	r2,zero,r2
 8043760:	f800283a 	ret
 8043764:	014bc83a 	sub	r5,zero,r5
 8043768:	39c0005c 	xori	r7,r7,1
 804376c:	003fe706 	br	804370c <__alt_data_end+0xfffdb66c>
 8043770:	0109c83a 	sub	r4,zero,r4
 8043774:	01c00044 	movi	r7,1
 8043778:	003fe306 	br	8043708 <__alt_data_end+0xfffdb668>
 804377c:	00c00044 	movi	r3,1
 8043780:	003fee06 	br	804373c <__alt_data_end+0xfffdb69c>

08043784 <__modsi3>:
 8043784:	20001716 	blt	r4,zero,80437e4 <__modsi3+0x60>
 8043788:	000f883a 	mov	r7,zero
 804378c:	2005883a 	mov	r2,r4
 8043790:	28001216 	blt	r5,zero,80437dc <__modsi3+0x58>
 8043794:	2900162e 	bgeu	r5,r4,80437f0 <__modsi3+0x6c>
 8043798:	01800804 	movi	r6,32
 804379c:	00c00044 	movi	r3,1
 80437a0:	00000106 	br	80437a8 <__modsi3+0x24>
 80437a4:	30000a26 	beq	r6,zero,80437d0 <__modsi3+0x4c>
 80437a8:	294b883a 	add	r5,r5,r5
 80437ac:	31bfffc4 	addi	r6,r6,-1
 80437b0:	18c7883a 	add	r3,r3,r3
 80437b4:	293ffb36 	bltu	r5,r4,80437a4 <__alt_data_end+0xfffdb704>
 80437b8:	18000526 	beq	r3,zero,80437d0 <__modsi3+0x4c>
 80437bc:	1806d07a 	srli	r3,r3,1
 80437c0:	11400136 	bltu	r2,r5,80437c8 <__modsi3+0x44>
 80437c4:	1145c83a 	sub	r2,r2,r5
 80437c8:	280ad07a 	srli	r5,r5,1
 80437cc:	183ffb1e 	bne	r3,zero,80437bc <__alt_data_end+0xfffdb71c>
 80437d0:	38000126 	beq	r7,zero,80437d8 <__modsi3+0x54>
 80437d4:	0085c83a 	sub	r2,zero,r2
 80437d8:	f800283a 	ret
 80437dc:	014bc83a 	sub	r5,zero,r5
 80437e0:	003fec06 	br	8043794 <__alt_data_end+0xfffdb6f4>
 80437e4:	0109c83a 	sub	r4,zero,r4
 80437e8:	01c00044 	movi	r7,1
 80437ec:	003fe706 	br	804378c <__alt_data_end+0xfffdb6ec>
 80437f0:	00c00044 	movi	r3,1
 80437f4:	003ff106 	br	80437bc <__alt_data_end+0xfffdb71c>

080437f8 <__udivsi3>:
 80437f8:	200d883a 	mov	r6,r4
 80437fc:	2900152e 	bgeu	r5,r4,8043854 <__udivsi3+0x5c>
 8043800:	28001416 	blt	r5,zero,8043854 <__udivsi3+0x5c>
 8043804:	00800804 	movi	r2,32
 8043808:	00c00044 	movi	r3,1
 804380c:	00000206 	br	8043818 <__udivsi3+0x20>
 8043810:	10000e26 	beq	r2,zero,804384c <__udivsi3+0x54>
 8043814:	28000516 	blt	r5,zero,804382c <__udivsi3+0x34>
 8043818:	294b883a 	add	r5,r5,r5
 804381c:	10bfffc4 	addi	r2,r2,-1
 8043820:	18c7883a 	add	r3,r3,r3
 8043824:	293ffa36 	bltu	r5,r4,8043810 <__alt_data_end+0xfffdb770>
 8043828:	18000826 	beq	r3,zero,804384c <__udivsi3+0x54>
 804382c:	0005883a 	mov	r2,zero
 8043830:	31400236 	bltu	r6,r5,804383c <__udivsi3+0x44>
 8043834:	314dc83a 	sub	r6,r6,r5
 8043838:	10c4b03a 	or	r2,r2,r3
 804383c:	1806d07a 	srli	r3,r3,1
 8043840:	280ad07a 	srli	r5,r5,1
 8043844:	183ffa1e 	bne	r3,zero,8043830 <__alt_data_end+0xfffdb790>
 8043848:	f800283a 	ret
 804384c:	0005883a 	mov	r2,zero
 8043850:	f800283a 	ret
 8043854:	00c00044 	movi	r3,1
 8043858:	003ff406 	br	804382c <__alt_data_end+0xfffdb78c>

0804385c <__umodsi3>:
 804385c:	2005883a 	mov	r2,r4
 8043860:	2900122e 	bgeu	r5,r4,80438ac <__umodsi3+0x50>
 8043864:	28001116 	blt	r5,zero,80438ac <__umodsi3+0x50>
 8043868:	01800804 	movi	r6,32
 804386c:	00c00044 	movi	r3,1
 8043870:	00000206 	br	804387c <__umodsi3+0x20>
 8043874:	30000c26 	beq	r6,zero,80438a8 <__umodsi3+0x4c>
 8043878:	28000516 	blt	r5,zero,8043890 <__umodsi3+0x34>
 804387c:	294b883a 	add	r5,r5,r5
 8043880:	31bfffc4 	addi	r6,r6,-1
 8043884:	18c7883a 	add	r3,r3,r3
 8043888:	293ffa36 	bltu	r5,r4,8043874 <__alt_data_end+0xfffdb7d4>
 804388c:	18000626 	beq	r3,zero,80438a8 <__umodsi3+0x4c>
 8043890:	1806d07a 	srli	r3,r3,1
 8043894:	11400136 	bltu	r2,r5,804389c <__umodsi3+0x40>
 8043898:	1145c83a 	sub	r2,r2,r5
 804389c:	280ad07a 	srli	r5,r5,1
 80438a0:	183ffb1e 	bne	r3,zero,8043890 <__alt_data_end+0xfffdb7f0>
 80438a4:	f800283a 	ret
 80438a8:	f800283a 	ret
 80438ac:	00c00044 	movi	r3,1
 80438b0:	003ff706 	br	8043890 <__alt_data_end+0xfffdb7f0>

080438b4 <memcpy>:
 80438b4:	defffd04 	addi	sp,sp,-12
 80438b8:	dfc00215 	stw	ra,8(sp)
 80438bc:	dc400115 	stw	r17,4(sp)
 80438c0:	dc000015 	stw	r16,0(sp)
 80438c4:	00c003c4 	movi	r3,15
 80438c8:	2005883a 	mov	r2,r4
 80438cc:	1980452e 	bgeu	r3,r6,80439e4 <memcpy+0x130>
 80438d0:	2906b03a 	or	r3,r5,r4
 80438d4:	18c000cc 	andi	r3,r3,3
 80438d8:	1800441e 	bne	r3,zero,80439ec <memcpy+0x138>
 80438dc:	347ffc04 	addi	r17,r6,-16
 80438e0:	8822d13a 	srli	r17,r17,4
 80438e4:	28c00104 	addi	r3,r5,4
 80438e8:	23400104 	addi	r13,r4,4
 80438ec:	8820913a 	slli	r16,r17,4
 80438f0:	2b000204 	addi	r12,r5,8
 80438f4:	22c00204 	addi	r11,r4,8
 80438f8:	84000504 	addi	r16,r16,20
 80438fc:	2a800304 	addi	r10,r5,12
 8043900:	22400304 	addi	r9,r4,12
 8043904:	2c21883a 	add	r16,r5,r16
 8043908:	2811883a 	mov	r8,r5
 804390c:	200f883a 	mov	r7,r4
 8043910:	41000017 	ldw	r4,0(r8)
 8043914:	1fc00017 	ldw	ra,0(r3)
 8043918:	63c00017 	ldw	r15,0(r12)
 804391c:	39000015 	stw	r4,0(r7)
 8043920:	53800017 	ldw	r14,0(r10)
 8043924:	6fc00015 	stw	ra,0(r13)
 8043928:	5bc00015 	stw	r15,0(r11)
 804392c:	4b800015 	stw	r14,0(r9)
 8043930:	18c00404 	addi	r3,r3,16
 8043934:	39c00404 	addi	r7,r7,16
 8043938:	42000404 	addi	r8,r8,16
 804393c:	6b400404 	addi	r13,r13,16
 8043940:	63000404 	addi	r12,r12,16
 8043944:	5ac00404 	addi	r11,r11,16
 8043948:	52800404 	addi	r10,r10,16
 804394c:	4a400404 	addi	r9,r9,16
 8043950:	1c3fef1e 	bne	r3,r16,8043910 <__alt_data_end+0xfffdb870>
 8043954:	89c00044 	addi	r7,r17,1
 8043958:	380e913a 	slli	r7,r7,4
 804395c:	310003cc 	andi	r4,r6,15
 8043960:	02c000c4 	movi	r11,3
 8043964:	11c7883a 	add	r3,r2,r7
 8043968:	29cb883a 	add	r5,r5,r7
 804396c:	5900212e 	bgeu	r11,r4,80439f4 <memcpy+0x140>
 8043970:	1813883a 	mov	r9,r3
 8043974:	2811883a 	mov	r8,r5
 8043978:	200f883a 	mov	r7,r4
 804397c:	42800017 	ldw	r10,0(r8)
 8043980:	4a400104 	addi	r9,r9,4
 8043984:	39ffff04 	addi	r7,r7,-4
 8043988:	4abfff15 	stw	r10,-4(r9)
 804398c:	42000104 	addi	r8,r8,4
 8043990:	59fffa36 	bltu	r11,r7,804397c <__alt_data_end+0xfffdb8dc>
 8043994:	213fff04 	addi	r4,r4,-4
 8043998:	2008d0ba 	srli	r4,r4,2
 804399c:	318000cc 	andi	r6,r6,3
 80439a0:	21000044 	addi	r4,r4,1
 80439a4:	2109883a 	add	r4,r4,r4
 80439a8:	2109883a 	add	r4,r4,r4
 80439ac:	1907883a 	add	r3,r3,r4
 80439b0:	290b883a 	add	r5,r5,r4
 80439b4:	30000626 	beq	r6,zero,80439d0 <memcpy+0x11c>
 80439b8:	198d883a 	add	r6,r3,r6
 80439bc:	29c00003 	ldbu	r7,0(r5)
 80439c0:	18c00044 	addi	r3,r3,1
 80439c4:	29400044 	addi	r5,r5,1
 80439c8:	19ffffc5 	stb	r7,-1(r3)
 80439cc:	19bffb1e 	bne	r3,r6,80439bc <__alt_data_end+0xfffdb91c>
 80439d0:	dfc00217 	ldw	ra,8(sp)
 80439d4:	dc400117 	ldw	r17,4(sp)
 80439d8:	dc000017 	ldw	r16,0(sp)
 80439dc:	dec00304 	addi	sp,sp,12
 80439e0:	f800283a 	ret
 80439e4:	2007883a 	mov	r3,r4
 80439e8:	003ff206 	br	80439b4 <__alt_data_end+0xfffdb914>
 80439ec:	2007883a 	mov	r3,r4
 80439f0:	003ff106 	br	80439b8 <__alt_data_end+0xfffdb918>
 80439f4:	200d883a 	mov	r6,r4
 80439f8:	003fee06 	br	80439b4 <__alt_data_end+0xfffdb914>

080439fc <_puts_r>:
 80439fc:	defff604 	addi	sp,sp,-40
 8043a00:	dc000715 	stw	r16,28(sp)
 8043a04:	2021883a 	mov	r16,r4
 8043a08:	2809883a 	mov	r4,r5
 8043a0c:	dc400815 	stw	r17,32(sp)
 8043a10:	dfc00915 	stw	ra,36(sp)
 8043a14:	2823883a 	mov	r17,r5
 8043a18:	8043b940 	call	8043b94 <strlen>
 8043a1c:	10c00044 	addi	r3,r2,1
 8043a20:	d8800115 	stw	r2,4(sp)
 8043a24:	00820174 	movhi	r2,2053
 8043a28:	108c2504 	addi	r2,r2,12436
 8043a2c:	d8800215 	stw	r2,8(sp)
 8043a30:	00800044 	movi	r2,1
 8043a34:	d8800315 	stw	r2,12(sp)
 8043a38:	00800084 	movi	r2,2
 8043a3c:	dc400015 	stw	r17,0(sp)
 8043a40:	d8c00615 	stw	r3,24(sp)
 8043a44:	dec00415 	stw	sp,16(sp)
 8043a48:	d8800515 	stw	r2,20(sp)
 8043a4c:	80000226 	beq	r16,zero,8043a58 <_puts_r+0x5c>
 8043a50:	80800e17 	ldw	r2,56(r16)
 8043a54:	10001426 	beq	r2,zero,8043aa8 <_puts_r+0xac>
 8043a58:	81400217 	ldw	r5,8(r16)
 8043a5c:	2880030b 	ldhu	r2,12(r5)
 8043a60:	10c8000c 	andi	r3,r2,8192
 8043a64:	1800061e 	bne	r3,zero,8043a80 <_puts_r+0x84>
 8043a68:	29001917 	ldw	r4,100(r5)
 8043a6c:	00f7ffc4 	movi	r3,-8193
 8043a70:	10880014 	ori	r2,r2,8192
 8043a74:	20c6703a 	and	r3,r4,r3
 8043a78:	2880030d 	sth	r2,12(r5)
 8043a7c:	28c01915 	stw	r3,100(r5)
 8043a80:	d9800404 	addi	r6,sp,16
 8043a84:	8009883a 	mov	r4,r16
 8043a88:	8047b480 	call	8047b48 <__sfvwrite_r>
 8043a8c:	1000091e 	bne	r2,zero,8043ab4 <_puts_r+0xb8>
 8043a90:	00800284 	movi	r2,10
 8043a94:	dfc00917 	ldw	ra,36(sp)
 8043a98:	dc400817 	ldw	r17,32(sp)
 8043a9c:	dc000717 	ldw	r16,28(sp)
 8043aa0:	dec00a04 	addi	sp,sp,40
 8043aa4:	f800283a 	ret
 8043aa8:	8009883a 	mov	r4,r16
 8043aac:	8047af80 	call	8047af8 <__sinit>
 8043ab0:	003fe906 	br	8043a58 <__alt_data_end+0xfffdb9b8>
 8043ab4:	00bfffc4 	movi	r2,-1
 8043ab8:	003ff606 	br	8043a94 <__alt_data_end+0xfffdb9f4>

08043abc <puts>:
 8043abc:	00820174 	movhi	r2,2053
 8043ac0:	1093af04 	addi	r2,r2,20156
 8043ac4:	200b883a 	mov	r5,r4
 8043ac8:	11000017 	ldw	r4,0(r2)
 8043acc:	80439fc1 	jmpi	80439fc <_puts_r>

08043ad0 <_sprintf_r>:
 8043ad0:	deffe404 	addi	sp,sp,-112
 8043ad4:	2807883a 	mov	r3,r5
 8043ad8:	dfc01a15 	stw	ra,104(sp)
 8043adc:	d9c01b15 	stw	r7,108(sp)
 8043ae0:	00a00034 	movhi	r2,32768
 8043ae4:	10bfffc4 	addi	r2,r2,-1
 8043ae8:	02008204 	movi	r8,520
 8043aec:	d8800215 	stw	r2,8(sp)
 8043af0:	d8800515 	stw	r2,20(sp)
 8043af4:	d9c01b04 	addi	r7,sp,108
 8043af8:	d80b883a 	mov	r5,sp
 8043afc:	00bfffc4 	movi	r2,-1
 8043b00:	d8c00015 	stw	r3,0(sp)
 8043b04:	d8c00415 	stw	r3,16(sp)
 8043b08:	da00030d 	sth	r8,12(sp)
 8043b0c:	d880038d 	sth	r2,14(sp)
 8043b10:	8043c2c0 	call	8043c2c <___svfprintf_internal_r>
 8043b14:	d8c00017 	ldw	r3,0(sp)
 8043b18:	18000005 	stb	zero,0(r3)
 8043b1c:	dfc01a17 	ldw	ra,104(sp)
 8043b20:	dec01c04 	addi	sp,sp,112
 8043b24:	f800283a 	ret

08043b28 <sprintf>:
 8043b28:	deffe304 	addi	sp,sp,-116
 8043b2c:	2007883a 	mov	r3,r4
 8043b30:	dfc01a15 	stw	ra,104(sp)
 8043b34:	d9801b15 	stw	r6,108(sp)
 8043b38:	d9c01c15 	stw	r7,112(sp)
 8043b3c:	01020174 	movhi	r4,2053
 8043b40:	2113af04 	addi	r4,r4,20156
 8043b44:	21000017 	ldw	r4,0(r4)
 8043b48:	00a00034 	movhi	r2,32768
 8043b4c:	10bfffc4 	addi	r2,r2,-1
 8043b50:	280d883a 	mov	r6,r5
 8043b54:	02008204 	movi	r8,520
 8043b58:	d8800215 	stw	r2,8(sp)
 8043b5c:	d8800515 	stw	r2,20(sp)
 8043b60:	d9c01b04 	addi	r7,sp,108
 8043b64:	d80b883a 	mov	r5,sp
 8043b68:	00bfffc4 	movi	r2,-1
 8043b6c:	d8c00015 	stw	r3,0(sp)
 8043b70:	d8c00415 	stw	r3,16(sp)
 8043b74:	da00030d 	sth	r8,12(sp)
 8043b78:	d880038d 	sth	r2,14(sp)
 8043b7c:	8043c2c0 	call	8043c2c <___svfprintf_internal_r>
 8043b80:	d8c00017 	ldw	r3,0(sp)
 8043b84:	18000005 	stb	zero,0(r3)
 8043b88:	dfc01a17 	ldw	ra,104(sp)
 8043b8c:	dec01d04 	addi	sp,sp,116
 8043b90:	f800283a 	ret

08043b94 <strlen>:
 8043b94:	208000cc 	andi	r2,r4,3
 8043b98:	10002026 	beq	r2,zero,8043c1c <strlen+0x88>
 8043b9c:	20800007 	ldb	r2,0(r4)
 8043ba0:	10002026 	beq	r2,zero,8043c24 <strlen+0x90>
 8043ba4:	2005883a 	mov	r2,r4
 8043ba8:	00000206 	br	8043bb4 <strlen+0x20>
 8043bac:	10c00007 	ldb	r3,0(r2)
 8043bb0:	18001826 	beq	r3,zero,8043c14 <strlen+0x80>
 8043bb4:	10800044 	addi	r2,r2,1
 8043bb8:	10c000cc 	andi	r3,r2,3
 8043bbc:	183ffb1e 	bne	r3,zero,8043bac <__alt_data_end+0xfffdbb0c>
 8043bc0:	10c00017 	ldw	r3,0(r2)
 8043bc4:	01ffbff4 	movhi	r7,65279
 8043bc8:	39ffbfc4 	addi	r7,r7,-257
 8043bcc:	00ca303a 	nor	r5,zero,r3
 8043bd0:	01a02074 	movhi	r6,32897
 8043bd4:	19c7883a 	add	r3,r3,r7
 8043bd8:	31a02004 	addi	r6,r6,-32640
 8043bdc:	1946703a 	and	r3,r3,r5
 8043be0:	1986703a 	and	r3,r3,r6
 8043be4:	1800091e 	bne	r3,zero,8043c0c <strlen+0x78>
 8043be8:	10800104 	addi	r2,r2,4
 8043bec:	10c00017 	ldw	r3,0(r2)
 8043bf0:	19cb883a 	add	r5,r3,r7
 8043bf4:	00c6303a 	nor	r3,zero,r3
 8043bf8:	28c6703a 	and	r3,r5,r3
 8043bfc:	1986703a 	and	r3,r3,r6
 8043c00:	183ff926 	beq	r3,zero,8043be8 <__alt_data_end+0xfffdbb48>
 8043c04:	00000106 	br	8043c0c <strlen+0x78>
 8043c08:	10800044 	addi	r2,r2,1
 8043c0c:	10c00007 	ldb	r3,0(r2)
 8043c10:	183ffd1e 	bne	r3,zero,8043c08 <__alt_data_end+0xfffdbb68>
 8043c14:	1105c83a 	sub	r2,r2,r4
 8043c18:	f800283a 	ret
 8043c1c:	2005883a 	mov	r2,r4
 8043c20:	003fe706 	br	8043bc0 <__alt_data_end+0xfffdbb20>
 8043c24:	0005883a 	mov	r2,zero
 8043c28:	f800283a 	ret

08043c2c <___svfprintf_internal_r>:
 8043c2c:	deffb704 	addi	sp,sp,-292
 8043c30:	dfc04815 	stw	ra,288(sp)
 8043c34:	ddc04615 	stw	r23,280(sp)
 8043c38:	d9402d15 	stw	r5,180(sp)
 8043c3c:	d9003915 	stw	r4,228(sp)
 8043c40:	302f883a 	mov	r23,r6
 8043c44:	d9c02e15 	stw	r7,184(sp)
 8043c48:	df004715 	stw	fp,284(sp)
 8043c4c:	dd804515 	stw	r22,276(sp)
 8043c50:	dd404415 	stw	r21,272(sp)
 8043c54:	dd004315 	stw	r20,268(sp)
 8043c58:	dcc04215 	stw	r19,264(sp)
 8043c5c:	dc804115 	stw	r18,260(sp)
 8043c60:	dc404015 	stw	r17,256(sp)
 8043c64:	dc003f15 	stw	r16,252(sp)
 8043c68:	80482440 	call	8048244 <_localeconv_r>
 8043c6c:	10800017 	ldw	r2,0(r2)
 8043c70:	1009883a 	mov	r4,r2
 8043c74:	d8803415 	stw	r2,208(sp)
 8043c78:	8043b940 	call	8043b94 <strlen>
 8043c7c:	d8c02d17 	ldw	r3,180(sp)
 8043c80:	d8803815 	stw	r2,224(sp)
 8043c84:	1880030b 	ldhu	r2,12(r3)
 8043c88:	1080200c 	andi	r2,r2,128
 8043c8c:	10000226 	beq	r2,zero,8043c98 <___svfprintf_internal_r+0x6c>
 8043c90:	18800417 	ldw	r2,16(r3)
 8043c94:	1006b126 	beq	r2,zero,804575c <___svfprintf_internal_r+0x1b30>
 8043c98:	dcc03917 	ldw	r19,228(sp)
 8043c9c:	d8c00404 	addi	r3,sp,16
 8043ca0:	05420174 	movhi	r21,2053
 8043ca4:	d9001e04 	addi	r4,sp,120
 8043ca8:	ad4c3684 	addi	r21,r21,12506
 8043cac:	d8c01e15 	stw	r3,120(sp)
 8043cb0:	d8002015 	stw	zero,128(sp)
 8043cb4:	d8001f15 	stw	zero,124(sp)
 8043cb8:	d8003315 	stw	zero,204(sp)
 8043cbc:	d8003615 	stw	zero,216(sp)
 8043cc0:	d8003715 	stw	zero,220(sp)
 8043cc4:	1811883a 	mov	r8,r3
 8043cc8:	d8003a15 	stw	zero,232(sp)
 8043ccc:	d8003b15 	stw	zero,236(sp)
 8043cd0:	d8002f15 	stw	zero,188(sp)
 8043cd4:	d9002815 	stw	r4,160(sp)
 8043cd8:	b8800007 	ldb	r2,0(r23)
 8043cdc:	10027726 	beq	r2,zero,80446bc <___svfprintf_internal_r+0xa90>
 8043ce0:	00c00944 	movi	r3,37
 8043ce4:	b823883a 	mov	r17,r23
 8043ce8:	10c0021e 	bne	r2,r3,8043cf4 <___svfprintf_internal_r+0xc8>
 8043cec:	00001406 	br	8043d40 <___svfprintf_internal_r+0x114>
 8043cf0:	10c00326 	beq	r2,r3,8043d00 <___svfprintf_internal_r+0xd4>
 8043cf4:	8c400044 	addi	r17,r17,1
 8043cf8:	88800007 	ldb	r2,0(r17)
 8043cfc:	103ffc1e 	bne	r2,zero,8043cf0 <__alt_data_end+0xfffdbc50>
 8043d00:	8de1c83a 	sub	r16,r17,r23
 8043d04:	80000e26 	beq	r16,zero,8043d40 <___svfprintf_internal_r+0x114>
 8043d08:	d8c02017 	ldw	r3,128(sp)
 8043d0c:	d8801f17 	ldw	r2,124(sp)
 8043d10:	45c00015 	stw	r23,0(r8)
 8043d14:	1c07883a 	add	r3,r3,r16
 8043d18:	10800044 	addi	r2,r2,1
 8043d1c:	d8c02015 	stw	r3,128(sp)
 8043d20:	44000115 	stw	r16,4(r8)
 8043d24:	d8801f15 	stw	r2,124(sp)
 8043d28:	00c001c4 	movi	r3,7
 8043d2c:	18809916 	blt	r3,r2,8043f94 <___svfprintf_internal_r+0x368>
 8043d30:	42000204 	addi	r8,r8,8
 8043d34:	d9402f17 	ldw	r5,188(sp)
 8043d38:	2c0b883a 	add	r5,r5,r16
 8043d3c:	d9402f15 	stw	r5,188(sp)
 8043d40:	88800007 	ldb	r2,0(r17)
 8043d44:	10009a26 	beq	r2,zero,8043fb0 <___svfprintf_internal_r+0x384>
 8043d48:	8dc00044 	addi	r23,r17,1
 8043d4c:	8c400047 	ldb	r17,1(r17)
 8043d50:	0021883a 	mov	r16,zero
 8043d54:	00bfffc4 	movi	r2,-1
 8043d58:	0025883a 	mov	r18,zero
 8043d5c:	dc002905 	stb	r16,164(sp)
 8043d60:	d8002785 	stb	zero,158(sp)
 8043d64:	d8002b05 	stb	zero,172(sp)
 8043d68:	d8802a15 	stw	r2,168(sp)
 8043d6c:	d8003115 	stw	zero,196(sp)
 8043d70:	05001604 	movi	r20,88
 8043d74:	05800244 	movi	r22,9
 8043d78:	4039883a 	mov	fp,r8
 8043d7c:	9021883a 	mov	r16,r18
 8043d80:	bdc00044 	addi	r23,r23,1
 8043d84:	88bff804 	addi	r2,r17,-32
 8043d88:	a0831e36 	bltu	r20,r2,8044a04 <___svfprintf_internal_r+0xdd8>
 8043d8c:	100490ba 	slli	r2,r2,2
 8043d90:	00c20134 	movhi	r3,2052
 8043d94:	18cf6904 	addi	r3,r3,15780
 8043d98:	10c5883a 	add	r2,r2,r3
 8043d9c:	10800017 	ldw	r2,0(r2)
 8043da0:	1000683a 	jmp	r2
 8043da4:	0804494c 	andi	zero,at,4389
 8043da8:	08044a04 	addi	zero,at,4392
 8043dac:	08044a04 	addi	zero,at,4392
 8043db0:	08044940 	call	804494 <__alt_mem_new_sdram_controller_0-0x37fbb6c>
 8043db4:	08044a04 	addi	zero,at,4392
 8043db8:	08044a04 	addi	zero,at,4392
 8043dbc:	08044a04 	addi	zero,at,4392
 8043dc0:	08044a04 	addi	zero,at,4392
 8043dc4:	08044a04 	addi	zero,at,4392
 8043dc8:	08044a04 	addi	zero,at,4392
 8043dcc:	0804400c 	andi	zero,at,4352
 8043dd0:	08044850 	cmplti	zero,at,4385
 8043dd4:	08044a04 	addi	zero,at,4392
 8043dd8:	08043f18 	cmpnei	zero,at,4348
 8043ddc:	08044030 	cmpltui	zero,at,4352
 8043de0:	08044a04 	addi	zero,at,4392
 8043de4:	080440bc 	xorhi	zero,at,4354
 8043de8:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043dec:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043df0:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043df4:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043df8:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043dfc:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043e00:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043e04:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043e08:	08044080 	call	804408 <__alt_mem_new_sdram_controller_0-0x37fbbf8>
 8043e0c:	08044a04 	addi	zero,at,4392
 8043e10:	08044a04 	addi	zero,at,4392
 8043e14:	08044a04 	addi	zero,at,4392
 8043e18:	08044a04 	addi	zero,at,4392
 8043e1c:	08044a04 	addi	zero,at,4392
 8043e20:	08044a04 	addi	zero,at,4392
 8043e24:	08044a04 	addi	zero,at,4392
 8043e28:	08044a04 	addi	zero,at,4392
 8043e2c:	08044a04 	addi	zero,at,4392
 8043e30:	08044a04 	addi	zero,at,4392
 8043e34:	08044180 	call	804418 <__alt_mem_new_sdram_controller_0-0x37fbbe8>
 8043e38:	080440c8 	cmpgei	zero,at,4355
 8043e3c:	08044a04 	addi	zero,at,4392
 8043e40:	080440c8 	cmpgei	zero,at,4355
 8043e44:	08044a04 	addi	zero,at,4392
 8043e48:	08044a04 	addi	zero,at,4392
 8043e4c:	08044a04 	addi	zero,at,4392
 8043e50:	08044a04 	addi	zero,at,4392
 8043e54:	08044174 	orhi	zero,at,4357
 8043e58:	08044a04 	addi	zero,at,4392
 8043e5c:	08044a04 	addi	zero,at,4392
 8043e60:	08044248 	cmpgei	zero,at,4361
 8043e64:	08044a04 	addi	zero,at,4392
 8043e68:	08044a04 	addi	zero,at,4392
 8043e6c:	08044a04 	addi	zero,at,4392
 8043e70:	08044a04 	addi	zero,at,4392
 8043e74:	08044a04 	addi	zero,at,4392
 8043e78:	080446c4 	addi	zero,at,4379
 8043e7c:	08044a04 	addi	zero,at,4392
 8043e80:	08044a04 	addi	zero,at,4392
 8043e84:	08044730 	cmpltui	zero,at,4380
 8043e88:	08044a04 	addi	zero,at,4392
 8043e8c:	08044a04 	addi	zero,at,4392
 8043e90:	08044a04 	addi	zero,at,4392
 8043e94:	08044a04 	addi	zero,at,4392
 8043e98:	08044a04 	addi	zero,at,4392
 8043e9c:	08044a04 	addi	zero,at,4392
 8043ea0:	08044a04 	addi	zero,at,4392
 8043ea4:	08044a04 	addi	zero,at,4392
 8043ea8:	08044a04 	addi	zero,at,4392
 8043eac:	08044a04 	addi	zero,at,4392
 8043eb0:	080447ec 	andhi	zero,at,4383
 8043eb4:	0804496c 	andhi	zero,at,4389
 8043eb8:	080440c8 	cmpgei	zero,at,4355
 8043ebc:	080440c8 	cmpgei	zero,at,4355
 8043ec0:	080440c8 	cmpgei	zero,at,4355
 8043ec4:	080449e0 	cmpeqi	zero,at,4391
 8043ec8:	0804496c 	andhi	zero,at,4389
 8043ecc:	08044a04 	addi	zero,at,4392
 8043ed0:	08044a04 	addi	zero,at,4392
 8043ed4:	0804498c 	andi	zero,at,4390
 8043ed8:	08044a04 	addi	zero,at,4392
 8043edc:	080449a0 	cmpeqi	zero,at,4390
 8043ee0:	08044830 	cmpltui	zero,at,4384
 8043ee4:	08043f24 	muli	zero,at,4348
 8043ee8:	08044868 	cmpgeui	zero,at,4385
 8043eec:	08044a04 	addi	zero,at,4392
 8043ef0:	08044874 	orhi	zero,at,4385
 8043ef4:	08044a04 	addi	zero,at,4392
 8043ef8:	080448d8 	cmpnei	zero,at,4387
 8043efc:	08044a04 	addi	zero,at,4392
 8043f00:	08044a04 	addi	zero,at,4392
 8043f04:	080448f8 	rdprs	zero,at,4387
 8043f08:	d8c03117 	ldw	r3,196(sp)
 8043f0c:	d8802e15 	stw	r2,184(sp)
 8043f10:	00c7c83a 	sub	r3,zero,r3
 8043f14:	d8c03115 	stw	r3,196(sp)
 8043f18:	84000114 	ori	r16,r16,4
 8043f1c:	bc400007 	ldb	r17,0(r23)
 8043f20:	003f9706 	br	8043d80 <__alt_data_end+0xfffdbce0>
 8043f24:	00800c04 	movi	r2,48
 8043f28:	d8802705 	stb	r2,156(sp)
 8043f2c:	00801e04 	movi	r2,120
 8043f30:	d8802745 	stb	r2,157(sp)
 8043f34:	d9002a17 	ldw	r4,168(sp)
 8043f38:	d8802e17 	ldw	r2,184(sp)
 8043f3c:	d8002785 	stb	zero,158(sp)
 8043f40:	e011883a 	mov	r8,fp
 8043f44:	10c00104 	addi	r3,r2,4
 8043f48:	15000017 	ldw	r20,0(r2)
 8043f4c:	002d883a 	mov	r22,zero
 8043f50:	80800094 	ori	r2,r16,2
 8043f54:	2002b616 	blt	r4,zero,8044a30 <___svfprintf_internal_r+0xe04>
 8043f58:	00bfdfc4 	movi	r2,-129
 8043f5c:	80a4703a 	and	r18,r16,r2
 8043f60:	d8c02e15 	stw	r3,184(sp)
 8043f64:	94800094 	ori	r18,r18,2
 8043f68:	a002a01e 	bne	r20,zero,80449ec <___svfprintf_internal_r+0xdc0>
 8043f6c:	01420174 	movhi	r5,2053
 8043f70:	294c2f04 	addi	r5,r5,12476
 8043f74:	d9403a15 	stw	r5,232(sp)
 8043f78:	04401e04 	movi	r17,120
 8043f7c:	d8c02a17 	ldw	r3,168(sp)
 8043f80:	0039883a 	mov	fp,zero
 8043f84:	1801e626 	beq	r3,zero,8044720 <___svfprintf_internal_r+0xaf4>
 8043f88:	0029883a 	mov	r20,zero
 8043f8c:	002d883a 	mov	r22,zero
 8043f90:	00020506 	br	80447a8 <___svfprintf_internal_r+0xb7c>
 8043f94:	d9402d17 	ldw	r5,180(sp)
 8043f98:	d9801e04 	addi	r6,sp,120
 8043f9c:	9809883a 	mov	r4,r19
 8043fa0:	804a6e40 	call	804a6e4 <__ssprint_r>
 8043fa4:	1000081e 	bne	r2,zero,8043fc8 <___svfprintf_internal_r+0x39c>
 8043fa8:	da000404 	addi	r8,sp,16
 8043fac:	003f6106 	br	8043d34 <__alt_data_end+0xfffdbc94>
 8043fb0:	d8802017 	ldw	r2,128(sp)
 8043fb4:	10000426 	beq	r2,zero,8043fc8 <___svfprintf_internal_r+0x39c>
 8043fb8:	d9402d17 	ldw	r5,180(sp)
 8043fbc:	d9003917 	ldw	r4,228(sp)
 8043fc0:	d9801e04 	addi	r6,sp,120
 8043fc4:	804a6e40 	call	804a6e4 <__ssprint_r>
 8043fc8:	d8802d17 	ldw	r2,180(sp)
 8043fcc:	10c0030b 	ldhu	r3,12(r2)
 8043fd0:	d8802f17 	ldw	r2,188(sp)
 8043fd4:	18c0100c 	andi	r3,r3,64
 8043fd8:	1806251e 	bne	r3,zero,8045870 <___svfprintf_internal_r+0x1c44>
 8043fdc:	dfc04817 	ldw	ra,288(sp)
 8043fe0:	df004717 	ldw	fp,284(sp)
 8043fe4:	ddc04617 	ldw	r23,280(sp)
 8043fe8:	dd804517 	ldw	r22,276(sp)
 8043fec:	dd404417 	ldw	r21,272(sp)
 8043ff0:	dd004317 	ldw	r20,268(sp)
 8043ff4:	dcc04217 	ldw	r19,264(sp)
 8043ff8:	dc804117 	ldw	r18,260(sp)
 8043ffc:	dc404017 	ldw	r17,256(sp)
 8044000:	dc003f17 	ldw	r16,252(sp)
 8044004:	dec04904 	addi	sp,sp,292
 8044008:	f800283a 	ret
 804400c:	d9002e17 	ldw	r4,184(sp)
 8044010:	d9402e17 	ldw	r5,184(sp)
 8044014:	21000017 	ldw	r4,0(r4)
 8044018:	28800104 	addi	r2,r5,4
 804401c:	d9003115 	stw	r4,196(sp)
 8044020:	203fb916 	blt	r4,zero,8043f08 <__alt_data_end+0xfffdbe68>
 8044024:	d8802e15 	stw	r2,184(sp)
 8044028:	bc400007 	ldb	r17,0(r23)
 804402c:	003f5406 	br	8043d80 <__alt_data_end+0xfffdbce0>
 8044030:	bc400007 	ldb	r17,0(r23)
 8044034:	01000a84 	movi	r4,42
 8044038:	b8c00044 	addi	r3,r23,1
 804403c:	89076926 	beq	r17,r4,8045de4 <___svfprintf_internal_r+0x21b8>
 8044040:	8cbff404 	addi	r18,r17,-48
 8044044:	b486b936 	bltu	r22,r18,8045b2c <___svfprintf_internal_r+0x1f00>
 8044048:	0009883a 	mov	r4,zero
 804404c:	1823883a 	mov	r17,r3
 8044050:	01400284 	movi	r5,10
 8044054:	80418e00 	call	80418e0 <__mulsi3>
 8044058:	88c00007 	ldb	r3,0(r17)
 804405c:	1489883a 	add	r4,r2,r18
 8044060:	8dc00044 	addi	r23,r17,1
 8044064:	1cbff404 	addi	r18,r3,-48
 8044068:	b823883a 	mov	r17,r23
 804406c:	b4bff82e 	bgeu	r22,r18,8044050 <__alt_data_end+0xfffdbfb0>
 8044070:	1823883a 	mov	r17,r3
 8044074:	20060416 	blt	r4,zero,8045888 <___svfprintf_internal_r+0x1c5c>
 8044078:	d9002a15 	stw	r4,168(sp)
 804407c:	003f4106 	br	8043d84 <__alt_data_end+0xfffdbce4>
 8044080:	8cbff404 	addi	r18,r17,-48
 8044084:	d8003115 	stw	zero,196(sp)
 8044088:	0009883a 	mov	r4,zero
 804408c:	b823883a 	mov	r17,r23
 8044090:	01400284 	movi	r5,10
 8044094:	80418e00 	call	80418e0 <__mulsi3>
 8044098:	88c00007 	ldb	r3,0(r17)
 804409c:	9089883a 	add	r4,r18,r2
 80440a0:	bdc00044 	addi	r23,r23,1
 80440a4:	1cbff404 	addi	r18,r3,-48
 80440a8:	b823883a 	mov	r17,r23
 80440ac:	b4bff82e 	bgeu	r22,r18,8044090 <__alt_data_end+0xfffdbff0>
 80440b0:	1823883a 	mov	r17,r3
 80440b4:	d9003115 	stw	r4,196(sp)
 80440b8:	003f3206 	br	8043d84 <__alt_data_end+0xfffdbce4>
 80440bc:	84002014 	ori	r16,r16,128
 80440c0:	bc400007 	ldb	r17,0(r23)
 80440c4:	003f2e06 	br	8043d80 <__alt_data_end+0xfffdbce0>
 80440c8:	8025883a 	mov	r18,r16
 80440cc:	dc002903 	ldbu	r16,164(sp)
 80440d0:	e011883a 	mov	r8,fp
 80440d4:	84003fcc 	andi	r16,r16,255
 80440d8:	8007721e 	bne	r16,zero,8045ea4 <___svfprintf_internal_r+0x2278>
 80440dc:	9080020c 	andi	r2,r18,8
 80440e0:	1004a526 	beq	r2,zero,8045378 <___svfprintf_internal_r+0x174c>
 80440e4:	d9002e17 	ldw	r4,184(sp)
 80440e8:	d9402e17 	ldw	r5,184(sp)
 80440ec:	d8802e17 	ldw	r2,184(sp)
 80440f0:	21000017 	ldw	r4,0(r4)
 80440f4:	29400117 	ldw	r5,4(r5)
 80440f8:	10800204 	addi	r2,r2,8
 80440fc:	d9003615 	stw	r4,216(sp)
 8044100:	d9403715 	stw	r5,220(sp)
 8044104:	d8802e15 	stw	r2,184(sp)
 8044108:	d9003617 	ldw	r4,216(sp)
 804410c:	d9403717 	ldw	r5,220(sp)
 8044110:	da003e15 	stw	r8,248(sp)
 8044114:	04000044 	movi	r16,1
 8044118:	804a4040 	call	804a404 <__fpclassifyd>
 804411c:	da003e17 	ldw	r8,248(sp)
 8044120:	1404731e 	bne	r2,r16,80452f0 <___svfprintf_internal_r+0x16c4>
 8044124:	d9003617 	ldw	r4,216(sp)
 8044128:	d9403717 	ldw	r5,220(sp)
 804412c:	000d883a 	mov	r6,zero
 8044130:	000f883a 	mov	r7,zero
 8044134:	8042a840 	call	8042a84 <__ledf2>
 8044138:	da003e17 	ldw	r8,248(sp)
 804413c:	10061b16 	blt	r2,zero,80459ac <___svfprintf_internal_r+0x1d80>
 8044140:	df002783 	ldbu	fp,158(sp)
 8044144:	008011c4 	movi	r2,71
 8044148:	1445810e 	bge	r2,r17,8045750 <___svfprintf_internal_r+0x1b24>
 804414c:	04020174 	movhi	r16,2053
 8044150:	840c2704 	addi	r16,r16,12444
 8044154:	00c000c4 	movi	r3,3
 8044158:	00bfdfc4 	movi	r2,-129
 804415c:	d8c02915 	stw	r3,164(sp)
 8044160:	90a4703a 	and	r18,r18,r2
 8044164:	d8c02b15 	stw	r3,172(sp)
 8044168:	d8002a15 	stw	zero,168(sp)
 804416c:	d8003215 	stw	zero,200(sp)
 8044170:	00006c06 	br	8044324 <___svfprintf_internal_r+0x6f8>
 8044174:	84000214 	ori	r16,r16,8
 8044178:	bc400007 	ldb	r17,0(r23)
 804417c:	003f0006 	br	8043d80 <__alt_data_end+0xfffdbce0>
 8044180:	8025883a 	mov	r18,r16
 8044184:	dc002903 	ldbu	r16,164(sp)
 8044188:	e011883a 	mov	r8,fp
 804418c:	84003fcc 	andi	r16,r16,255
 8044190:	80073f1e 	bne	r16,zero,8045e90 <___svfprintf_internal_r+0x2264>
 8044194:	94800414 	ori	r18,r18,16
 8044198:	9080080c 	andi	r2,r18,32
 804419c:	1003bb26 	beq	r2,zero,804508c <___svfprintf_internal_r+0x1460>
 80441a0:	d9002e17 	ldw	r4,184(sp)
 80441a4:	20800117 	ldw	r2,4(r4)
 80441a8:	25000017 	ldw	r20,0(r4)
 80441ac:	21000204 	addi	r4,r4,8
 80441b0:	d9002e15 	stw	r4,184(sp)
 80441b4:	102d883a 	mov	r22,r2
 80441b8:	1003bd16 	blt	r2,zero,80450b0 <___svfprintf_internal_r+0x1484>
 80441bc:	d9002a17 	ldw	r4,168(sp)
 80441c0:	df002783 	ldbu	fp,158(sp)
 80441c4:	2003d016 	blt	r4,zero,8045108 <___svfprintf_internal_r+0x14dc>
 80441c8:	00ffdfc4 	movi	r3,-129
 80441cc:	a584b03a 	or	r2,r20,r22
 80441d0:	90e4703a 	and	r18,r18,r3
 80441d4:	10015026 	beq	r2,zero,8044718 <___svfprintf_internal_r+0xaec>
 80441d8:	b0037026 	beq	r22,zero,8044f9c <___svfprintf_internal_r+0x1370>
 80441dc:	dc402915 	stw	r17,164(sp)
 80441e0:	dc001e04 	addi	r16,sp,120
 80441e4:	b023883a 	mov	r17,r22
 80441e8:	402d883a 	mov	r22,r8
 80441ec:	a009883a 	mov	r4,r20
 80441f0:	880b883a 	mov	r5,r17
 80441f4:	01800284 	movi	r6,10
 80441f8:	000f883a 	mov	r7,zero
 80441fc:	804d0400 	call	804d040 <__umoddi3>
 8044200:	10800c04 	addi	r2,r2,48
 8044204:	843fffc4 	addi	r16,r16,-1
 8044208:	a009883a 	mov	r4,r20
 804420c:	880b883a 	mov	r5,r17
 8044210:	80800005 	stb	r2,0(r16)
 8044214:	01800284 	movi	r6,10
 8044218:	000f883a 	mov	r7,zero
 804421c:	804ca440 	call	804ca44 <__udivdi3>
 8044220:	1029883a 	mov	r20,r2
 8044224:	10c4b03a 	or	r2,r2,r3
 8044228:	1823883a 	mov	r17,r3
 804422c:	103fef1e 	bne	r2,zero,80441ec <__alt_data_end+0xfffdc14c>
 8044230:	d8c02817 	ldw	r3,160(sp)
 8044234:	dc402917 	ldw	r17,164(sp)
 8044238:	b011883a 	mov	r8,r22
 804423c:	1c07c83a 	sub	r3,r3,r16
 8044240:	d8c02b15 	stw	r3,172(sp)
 8044244:	00003106 	br	804430c <___svfprintf_internal_r+0x6e0>
 8044248:	8025883a 	mov	r18,r16
 804424c:	dc002903 	ldbu	r16,164(sp)
 8044250:	e011883a 	mov	r8,fp
 8044254:	84003fcc 	andi	r16,r16,255
 8044258:	80070a1e 	bne	r16,zero,8045e84 <___svfprintf_internal_r+0x2258>
 804425c:	94800414 	ori	r18,r18,16
 8044260:	9080080c 	andi	r2,r18,32
 8044264:	1002f626 	beq	r2,zero,8044e40 <___svfprintf_internal_r+0x1214>
 8044268:	d9002e17 	ldw	r4,184(sp)
 804426c:	d9402a17 	ldw	r5,168(sp)
 8044270:	d8002785 	stb	zero,158(sp)
 8044274:	20800204 	addi	r2,r4,8
 8044278:	25000017 	ldw	r20,0(r4)
 804427c:	25800117 	ldw	r22,4(r4)
 8044280:	28043716 	blt	r5,zero,8045360 <___svfprintf_internal_r+0x1734>
 8044284:	013fdfc4 	movi	r4,-129
 8044288:	a586b03a 	or	r3,r20,r22
 804428c:	d8802e15 	stw	r2,184(sp)
 8044290:	9124703a 	and	r18,r18,r4
 8044294:	1802f71e 	bne	r3,zero,8044e74 <___svfprintf_internal_r+0x1248>
 8044298:	d9402a17 	ldw	r5,168(sp)
 804429c:	0039883a 	mov	fp,zero
 80442a0:	2806df26 	beq	r5,zero,8045e20 <___svfprintf_internal_r+0x21f4>
 80442a4:	0029883a 	mov	r20,zero
 80442a8:	002d883a 	mov	r22,zero
 80442ac:	dc001e04 	addi	r16,sp,120
 80442b0:	a006d0fa 	srli	r3,r20,3
 80442b4:	b008977a 	slli	r4,r22,29
 80442b8:	b02cd0fa 	srli	r22,r22,3
 80442bc:	a50001cc 	andi	r20,r20,7
 80442c0:	a0800c04 	addi	r2,r20,48
 80442c4:	843fffc4 	addi	r16,r16,-1
 80442c8:	20e8b03a 	or	r20,r4,r3
 80442cc:	80800005 	stb	r2,0(r16)
 80442d0:	a586b03a 	or	r3,r20,r22
 80442d4:	183ff61e 	bne	r3,zero,80442b0 <__alt_data_end+0xfffdc210>
 80442d8:	90c0004c 	andi	r3,r18,1
 80442dc:	18013f26 	beq	r3,zero,80447dc <___svfprintf_internal_r+0xbb0>
 80442e0:	10803fcc 	andi	r2,r2,255
 80442e4:	1080201c 	xori	r2,r2,128
 80442e8:	10bfe004 	addi	r2,r2,-128
 80442ec:	00c00c04 	movi	r3,48
 80442f0:	10c13a26 	beq	r2,r3,80447dc <___svfprintf_internal_r+0xbb0>
 80442f4:	80ffffc5 	stb	r3,-1(r16)
 80442f8:	d8c02817 	ldw	r3,160(sp)
 80442fc:	80bfffc4 	addi	r2,r16,-1
 8044300:	1021883a 	mov	r16,r2
 8044304:	1887c83a 	sub	r3,r3,r2
 8044308:	d8c02b15 	stw	r3,172(sp)
 804430c:	d8802b17 	ldw	r2,172(sp)
 8044310:	d9002a17 	ldw	r4,168(sp)
 8044314:	1100010e 	bge	r2,r4,804431c <___svfprintf_internal_r+0x6f0>
 8044318:	2005883a 	mov	r2,r4
 804431c:	d8802915 	stw	r2,164(sp)
 8044320:	d8003215 	stw	zero,200(sp)
 8044324:	e7003fcc 	andi	fp,fp,255
 8044328:	e700201c 	xori	fp,fp,128
 804432c:	e73fe004 	addi	fp,fp,-128
 8044330:	e0000326 	beq	fp,zero,8044340 <___svfprintf_internal_r+0x714>
 8044334:	d8c02917 	ldw	r3,164(sp)
 8044338:	18c00044 	addi	r3,r3,1
 804433c:	d8c02915 	stw	r3,164(sp)
 8044340:	90c0008c 	andi	r3,r18,2
 8044344:	d8c02c15 	stw	r3,176(sp)
 8044348:	18000326 	beq	r3,zero,8044358 <___svfprintf_internal_r+0x72c>
 804434c:	d8c02917 	ldw	r3,164(sp)
 8044350:	18c00084 	addi	r3,r3,2
 8044354:	d8c02915 	stw	r3,164(sp)
 8044358:	90c0210c 	andi	r3,r18,132
 804435c:	d8c03015 	stw	r3,192(sp)
 8044360:	1801c31e 	bne	r3,zero,8044a70 <___svfprintf_internal_r+0xe44>
 8044364:	d9003117 	ldw	r4,196(sp)
 8044368:	d8c02917 	ldw	r3,164(sp)
 804436c:	20e9c83a 	sub	r20,r4,r3
 8044370:	0501bf0e 	bge	zero,r20,8044a70 <___svfprintf_internal_r+0xe44>
 8044374:	02400404 	movi	r9,16
 8044378:	d8c02017 	ldw	r3,128(sp)
 804437c:	d8801f17 	ldw	r2,124(sp)
 8044380:	4d053d0e 	bge	r9,r20,8045878 <___svfprintf_internal_r+0x1c4c>
 8044384:	01420174 	movhi	r5,2053
 8044388:	294c3a84 	addi	r5,r5,12522
 804438c:	dc403c15 	stw	r17,240(sp)
 8044390:	d9403515 	stw	r5,212(sp)
 8044394:	a023883a 	mov	r17,r20
 8044398:	482d883a 	mov	r22,r9
 804439c:	9029883a 	mov	r20,r18
 80443a0:	070001c4 	movi	fp,7
 80443a4:	8025883a 	mov	r18,r16
 80443a8:	dc002d17 	ldw	r16,180(sp)
 80443ac:	00000306 	br	80443bc <___svfprintf_internal_r+0x790>
 80443b0:	8c7ffc04 	addi	r17,r17,-16
 80443b4:	42000204 	addi	r8,r8,8
 80443b8:	b440130e 	bge	r22,r17,8044408 <___svfprintf_internal_r+0x7dc>
 80443bc:	01020174 	movhi	r4,2053
 80443c0:	18c00404 	addi	r3,r3,16
 80443c4:	10800044 	addi	r2,r2,1
 80443c8:	210c3a84 	addi	r4,r4,12522
 80443cc:	41000015 	stw	r4,0(r8)
 80443d0:	45800115 	stw	r22,4(r8)
 80443d4:	d8c02015 	stw	r3,128(sp)
 80443d8:	d8801f15 	stw	r2,124(sp)
 80443dc:	e0bff40e 	bge	fp,r2,80443b0 <__alt_data_end+0xfffdc310>
 80443e0:	d9801e04 	addi	r6,sp,120
 80443e4:	800b883a 	mov	r5,r16
 80443e8:	9809883a 	mov	r4,r19
 80443ec:	804a6e40 	call	804a6e4 <__ssprint_r>
 80443f0:	103ef51e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 80443f4:	8c7ffc04 	addi	r17,r17,-16
 80443f8:	d8c02017 	ldw	r3,128(sp)
 80443fc:	d8801f17 	ldw	r2,124(sp)
 8044400:	da000404 	addi	r8,sp,16
 8044404:	b47fed16 	blt	r22,r17,80443bc <__alt_data_end+0xfffdc31c>
 8044408:	9021883a 	mov	r16,r18
 804440c:	a025883a 	mov	r18,r20
 8044410:	8829883a 	mov	r20,r17
 8044414:	dc403c17 	ldw	r17,240(sp)
 8044418:	d9403517 	ldw	r5,212(sp)
 804441c:	a0c7883a 	add	r3,r20,r3
 8044420:	10800044 	addi	r2,r2,1
 8044424:	41400015 	stw	r5,0(r8)
 8044428:	45000115 	stw	r20,4(r8)
 804442c:	d8c02015 	stw	r3,128(sp)
 8044430:	d8801f15 	stw	r2,124(sp)
 8044434:	010001c4 	movi	r4,7
 8044438:	2082c116 	blt	r4,r2,8044f40 <___svfprintf_internal_r+0x1314>
 804443c:	df002787 	ldb	fp,158(sp)
 8044440:	42000204 	addi	r8,r8,8
 8044444:	e0000c26 	beq	fp,zero,8044478 <___svfprintf_internal_r+0x84c>
 8044448:	d8801f17 	ldw	r2,124(sp)
 804444c:	d9002784 	addi	r4,sp,158
 8044450:	18c00044 	addi	r3,r3,1
 8044454:	10800044 	addi	r2,r2,1
 8044458:	41000015 	stw	r4,0(r8)
 804445c:	01000044 	movi	r4,1
 8044460:	41000115 	stw	r4,4(r8)
 8044464:	d8c02015 	stw	r3,128(sp)
 8044468:	d8801f15 	stw	r2,124(sp)
 804446c:	010001c4 	movi	r4,7
 8044470:	20825a16 	blt	r4,r2,8044ddc <___svfprintf_internal_r+0x11b0>
 8044474:	42000204 	addi	r8,r8,8
 8044478:	d8802c17 	ldw	r2,176(sp)
 804447c:	10000c26 	beq	r2,zero,80444b0 <___svfprintf_internal_r+0x884>
 8044480:	d8801f17 	ldw	r2,124(sp)
 8044484:	d9002704 	addi	r4,sp,156
 8044488:	18c00084 	addi	r3,r3,2
 804448c:	10800044 	addi	r2,r2,1
 8044490:	41000015 	stw	r4,0(r8)
 8044494:	01000084 	movi	r4,2
 8044498:	41000115 	stw	r4,4(r8)
 804449c:	d8c02015 	stw	r3,128(sp)
 80444a0:	d8801f15 	stw	r2,124(sp)
 80444a4:	010001c4 	movi	r4,7
 80444a8:	20825416 	blt	r4,r2,8044dfc <___svfprintf_internal_r+0x11d0>
 80444ac:	42000204 	addi	r8,r8,8
 80444b0:	d9003017 	ldw	r4,192(sp)
 80444b4:	00802004 	movi	r2,128
 80444b8:	2081b926 	beq	r4,r2,8044ba0 <___svfprintf_internal_r+0xf74>
 80444bc:	d9402a17 	ldw	r5,168(sp)
 80444c0:	d8802b17 	ldw	r2,172(sp)
 80444c4:	28adc83a 	sub	r22,r5,r2
 80444c8:	05802f0e 	bge	zero,r22,8044588 <___svfprintf_internal_r+0x95c>
 80444cc:	07000404 	movi	fp,16
 80444d0:	d8801f17 	ldw	r2,124(sp)
 80444d4:	e583e20e 	bge	fp,r22,8045460 <___svfprintf_internal_r+0x1834>
 80444d8:	01420174 	movhi	r5,2053
 80444dc:	294c3684 	addi	r5,r5,12506
 80444e0:	dc402a15 	stw	r17,168(sp)
 80444e4:	d9402c15 	stw	r5,176(sp)
 80444e8:	b023883a 	mov	r17,r22
 80444ec:	050001c4 	movi	r20,7
 80444f0:	902d883a 	mov	r22,r18
 80444f4:	8025883a 	mov	r18,r16
 80444f8:	dc002d17 	ldw	r16,180(sp)
 80444fc:	00000306 	br	804450c <___svfprintf_internal_r+0x8e0>
 8044500:	8c7ffc04 	addi	r17,r17,-16
 8044504:	42000204 	addi	r8,r8,8
 8044508:	e440110e 	bge	fp,r17,8044550 <___svfprintf_internal_r+0x924>
 804450c:	18c00404 	addi	r3,r3,16
 8044510:	10800044 	addi	r2,r2,1
 8044514:	45400015 	stw	r21,0(r8)
 8044518:	47000115 	stw	fp,4(r8)
 804451c:	d8c02015 	stw	r3,128(sp)
 8044520:	d8801f15 	stw	r2,124(sp)
 8044524:	a0bff60e 	bge	r20,r2,8044500 <__alt_data_end+0xfffdc460>
 8044528:	d9801e04 	addi	r6,sp,120
 804452c:	800b883a 	mov	r5,r16
 8044530:	9809883a 	mov	r4,r19
 8044534:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044538:	103ea31e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 804453c:	8c7ffc04 	addi	r17,r17,-16
 8044540:	d8c02017 	ldw	r3,128(sp)
 8044544:	d8801f17 	ldw	r2,124(sp)
 8044548:	da000404 	addi	r8,sp,16
 804454c:	e47fef16 	blt	fp,r17,804450c <__alt_data_end+0xfffdc46c>
 8044550:	9021883a 	mov	r16,r18
 8044554:	b025883a 	mov	r18,r22
 8044558:	882d883a 	mov	r22,r17
 804455c:	dc402a17 	ldw	r17,168(sp)
 8044560:	d9002c17 	ldw	r4,176(sp)
 8044564:	1d87883a 	add	r3,r3,r22
 8044568:	10800044 	addi	r2,r2,1
 804456c:	41000015 	stw	r4,0(r8)
 8044570:	45800115 	stw	r22,4(r8)
 8044574:	d8c02015 	stw	r3,128(sp)
 8044578:	d8801f15 	stw	r2,124(sp)
 804457c:	010001c4 	movi	r4,7
 8044580:	20820e16 	blt	r4,r2,8044dbc <___svfprintf_internal_r+0x1190>
 8044584:	42000204 	addi	r8,r8,8
 8044588:	9080400c 	andi	r2,r18,256
 804458c:	10013a1e 	bne	r2,zero,8044a78 <___svfprintf_internal_r+0xe4c>
 8044590:	d9402b17 	ldw	r5,172(sp)
 8044594:	d8801f17 	ldw	r2,124(sp)
 8044598:	44000015 	stw	r16,0(r8)
 804459c:	1947883a 	add	r3,r3,r5
 80445a0:	10800044 	addi	r2,r2,1
 80445a4:	41400115 	stw	r5,4(r8)
 80445a8:	d8c02015 	stw	r3,128(sp)
 80445ac:	d8801f15 	stw	r2,124(sp)
 80445b0:	010001c4 	movi	r4,7
 80445b4:	2081f316 	blt	r4,r2,8044d84 <___svfprintf_internal_r+0x1158>
 80445b8:	42000204 	addi	r8,r8,8
 80445bc:	9480010c 	andi	r18,r18,4
 80445c0:	90003226 	beq	r18,zero,804468c <___svfprintf_internal_r+0xa60>
 80445c4:	d9403117 	ldw	r5,196(sp)
 80445c8:	d8802917 	ldw	r2,164(sp)
 80445cc:	28a1c83a 	sub	r16,r5,r2
 80445d0:	04002e0e 	bge	zero,r16,804468c <___svfprintf_internal_r+0xa60>
 80445d4:	04400404 	movi	r17,16
 80445d8:	d8801f17 	ldw	r2,124(sp)
 80445dc:	8c04db0e 	bge	r17,r16,804594c <___svfprintf_internal_r+0x1d20>
 80445e0:	01420174 	movhi	r5,2053
 80445e4:	294c3a84 	addi	r5,r5,12522
 80445e8:	d9403515 	stw	r5,212(sp)
 80445ec:	048001c4 	movi	r18,7
 80445f0:	dd002d17 	ldw	r20,180(sp)
 80445f4:	00000306 	br	8044604 <___svfprintf_internal_r+0x9d8>
 80445f8:	843ffc04 	addi	r16,r16,-16
 80445fc:	42000204 	addi	r8,r8,8
 8044600:	8c00130e 	bge	r17,r16,8044650 <___svfprintf_internal_r+0xa24>
 8044604:	01020174 	movhi	r4,2053
 8044608:	18c00404 	addi	r3,r3,16
 804460c:	10800044 	addi	r2,r2,1
 8044610:	210c3a84 	addi	r4,r4,12522
 8044614:	41000015 	stw	r4,0(r8)
 8044618:	44400115 	stw	r17,4(r8)
 804461c:	d8c02015 	stw	r3,128(sp)
 8044620:	d8801f15 	stw	r2,124(sp)
 8044624:	90bff40e 	bge	r18,r2,80445f8 <__alt_data_end+0xfffdc558>
 8044628:	d9801e04 	addi	r6,sp,120
 804462c:	a00b883a 	mov	r5,r20
 8044630:	9809883a 	mov	r4,r19
 8044634:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044638:	103e631e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 804463c:	843ffc04 	addi	r16,r16,-16
 8044640:	d8c02017 	ldw	r3,128(sp)
 8044644:	d8801f17 	ldw	r2,124(sp)
 8044648:	da000404 	addi	r8,sp,16
 804464c:	8c3fed16 	blt	r17,r16,8044604 <__alt_data_end+0xfffdc564>
 8044650:	d9403517 	ldw	r5,212(sp)
 8044654:	1c07883a 	add	r3,r3,r16
 8044658:	10800044 	addi	r2,r2,1
 804465c:	41400015 	stw	r5,0(r8)
 8044660:	44000115 	stw	r16,4(r8)
 8044664:	d8c02015 	stw	r3,128(sp)
 8044668:	d8801f15 	stw	r2,124(sp)
 804466c:	010001c4 	movi	r4,7
 8044670:	2080060e 	bge	r4,r2,804468c <___svfprintf_internal_r+0xa60>
 8044674:	d9402d17 	ldw	r5,180(sp)
 8044678:	d9801e04 	addi	r6,sp,120
 804467c:	9809883a 	mov	r4,r19
 8044680:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044684:	103e501e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044688:	d8c02017 	ldw	r3,128(sp)
 804468c:	d8803117 	ldw	r2,196(sp)
 8044690:	d9002917 	ldw	r4,164(sp)
 8044694:	1100010e 	bge	r2,r4,804469c <___svfprintf_internal_r+0xa70>
 8044698:	2005883a 	mov	r2,r4
 804469c:	d9402f17 	ldw	r5,188(sp)
 80446a0:	288b883a 	add	r5,r5,r2
 80446a4:	d9402f15 	stw	r5,188(sp)
 80446a8:	1801be1e 	bne	r3,zero,8044da4 <___svfprintf_internal_r+0x1178>
 80446ac:	b8800007 	ldb	r2,0(r23)
 80446b0:	d8001f15 	stw	zero,124(sp)
 80446b4:	da000404 	addi	r8,sp,16
 80446b8:	103d891e 	bne	r2,zero,8043ce0 <__alt_data_end+0xfffdbc40>
 80446bc:	b823883a 	mov	r17,r23
 80446c0:	003d9f06 	br	8043d40 <__alt_data_end+0xfffdbca0>
 80446c4:	8025883a 	mov	r18,r16
 80446c8:	dc002903 	ldbu	r16,164(sp)
 80446cc:	e011883a 	mov	r8,fp
 80446d0:	84003fcc 	andi	r16,r16,255
 80446d4:	8005e61e 	bne	r16,zero,8045e70 <___svfprintf_internal_r+0x2244>
 80446d8:	94800414 	ori	r18,r18,16
 80446dc:	9080080c 	andi	r2,r18,32
 80446e0:	10022026 	beq	r2,zero,8044f64 <___svfprintf_internal_r+0x1338>
 80446e4:	d9002e17 	ldw	r4,184(sp)
 80446e8:	d9402a17 	ldw	r5,168(sp)
 80446ec:	d8002785 	stb	zero,158(sp)
 80446f0:	20c00204 	addi	r3,r4,8
 80446f4:	25000017 	ldw	r20,0(r4)
 80446f8:	25800117 	ldw	r22,4(r4)
 80446fc:	2803ad16 	blt	r5,zero,80455b4 <___svfprintf_internal_r+0x1988>
 8044700:	013fdfc4 	movi	r4,-129
 8044704:	a584b03a 	or	r2,r20,r22
 8044708:	d8c02e15 	stw	r3,184(sp)
 804470c:	9124703a 	and	r18,r18,r4
 8044710:	0039883a 	mov	fp,zero
 8044714:	103eb01e 	bne	r2,zero,80441d8 <__alt_data_end+0xfffdc138>
 8044718:	d8802a17 	ldw	r2,168(sp)
 804471c:	1002e71e 	bne	r2,zero,80452bc <___svfprintf_internal_r+0x1690>
 8044720:	d8002a15 	stw	zero,168(sp)
 8044724:	d8002b15 	stw	zero,172(sp)
 8044728:	dc001e04 	addi	r16,sp,120
 804472c:	003ef706 	br	804430c <__alt_data_end+0xfffdc26c>
 8044730:	8025883a 	mov	r18,r16
 8044734:	dc002903 	ldbu	r16,164(sp)
 8044738:	e011883a 	mov	r8,fp
 804473c:	84003fcc 	andi	r16,r16,255
 8044740:	8005c81e 	bne	r16,zero,8045e64 <___svfprintf_internal_r+0x2238>
 8044744:	01020174 	movhi	r4,2053
 8044748:	210c2a04 	addi	r4,r4,12456
 804474c:	d9003a15 	stw	r4,232(sp)
 8044750:	9080080c 	andi	r2,r18,32
 8044754:	10007226 	beq	r2,zero,8044920 <___svfprintf_internal_r+0xcf4>
 8044758:	d9402e17 	ldw	r5,184(sp)
 804475c:	2d000017 	ldw	r20,0(r5)
 8044760:	2d800117 	ldw	r22,4(r5)
 8044764:	29400204 	addi	r5,r5,8
 8044768:	d9402e15 	stw	r5,184(sp)
 804476c:	9080004c 	andi	r2,r18,1
 8044770:	1001aa26 	beq	r2,zero,8044e1c <___svfprintf_internal_r+0x11f0>
 8044774:	a584b03a 	or	r2,r20,r22
 8044778:	10032526 	beq	r2,zero,8045410 <___svfprintf_internal_r+0x17e4>
 804477c:	d8c02a17 	ldw	r3,168(sp)
 8044780:	00800c04 	movi	r2,48
 8044784:	d8802705 	stb	r2,156(sp)
 8044788:	dc402745 	stb	r17,157(sp)
 804478c:	d8002785 	stb	zero,158(sp)
 8044790:	90800094 	ori	r2,r18,2
 8044794:	1804a316 	blt	r3,zero,8045a24 <___svfprintf_internal_r+0x1df8>
 8044798:	00bfdfc4 	movi	r2,-129
 804479c:	90a4703a 	and	r18,r18,r2
 80447a0:	94800094 	ori	r18,r18,2
 80447a4:	0039883a 	mov	fp,zero
 80447a8:	d9003a17 	ldw	r4,232(sp)
 80447ac:	dc001e04 	addi	r16,sp,120
 80447b0:	a08003cc 	andi	r2,r20,15
 80447b4:	b006973a 	slli	r3,r22,28
 80447b8:	2085883a 	add	r2,r4,r2
 80447bc:	a028d13a 	srli	r20,r20,4
 80447c0:	10800003 	ldbu	r2,0(r2)
 80447c4:	b02cd13a 	srli	r22,r22,4
 80447c8:	843fffc4 	addi	r16,r16,-1
 80447cc:	1d28b03a 	or	r20,r3,r20
 80447d0:	80800005 	stb	r2,0(r16)
 80447d4:	a584b03a 	or	r2,r20,r22
 80447d8:	103ff51e 	bne	r2,zero,80447b0 <__alt_data_end+0xfffdc710>
 80447dc:	d8c02817 	ldw	r3,160(sp)
 80447e0:	1c07c83a 	sub	r3,r3,r16
 80447e4:	d8c02b15 	stw	r3,172(sp)
 80447e8:	003ec806 	br	804430c <__alt_data_end+0xfffdc26c>
 80447ec:	d8c02e17 	ldw	r3,184(sp)
 80447f0:	d9002e17 	ldw	r4,184(sp)
 80447f4:	8025883a 	mov	r18,r16
 80447f8:	18800017 	ldw	r2,0(r3)
 80447fc:	21000104 	addi	r4,r4,4
 8044800:	00c00044 	movi	r3,1
 8044804:	e011883a 	mov	r8,fp
 8044808:	d8c02915 	stw	r3,164(sp)
 804480c:	d8002785 	stb	zero,158(sp)
 8044810:	d8801405 	stb	r2,80(sp)
 8044814:	d9002e15 	stw	r4,184(sp)
 8044818:	d8c02b15 	stw	r3,172(sp)
 804481c:	d8002a15 	stw	zero,168(sp)
 8044820:	d8003215 	stw	zero,200(sp)
 8044824:	dc001404 	addi	r16,sp,80
 8044828:	0039883a 	mov	fp,zero
 804482c:	003ec406 	br	8044340 <__alt_data_end+0xfffdc2a0>
 8044830:	8025883a 	mov	r18,r16
 8044834:	dc002903 	ldbu	r16,164(sp)
 8044838:	e011883a 	mov	r8,fp
 804483c:	84003fcc 	andi	r16,r16,255
 8044840:	803e8726 	beq	r16,zero,8044260 <__alt_data_end+0xfffdc1c0>
 8044844:	d8c02b03 	ldbu	r3,172(sp)
 8044848:	d8c02785 	stb	r3,158(sp)
 804484c:	003e8406 	br	8044260 <__alt_data_end+0xfffdc1c0>
 8044850:	00c00044 	movi	r3,1
 8044854:	d8c02905 	stb	r3,164(sp)
 8044858:	00c00ac4 	movi	r3,43
 804485c:	d8c02b05 	stb	r3,172(sp)
 8044860:	bc400007 	ldb	r17,0(r23)
 8044864:	003d4606 	br	8043d80 <__alt_data_end+0xfffdbce0>
 8044868:	84000814 	ori	r16,r16,32
 804486c:	bc400007 	ldb	r17,0(r23)
 8044870:	003d4306 	br	8043d80 <__alt_data_end+0xfffdbce0>
 8044874:	d8802e17 	ldw	r2,184(sp)
 8044878:	8025883a 	mov	r18,r16
 804487c:	d8002785 	stb	zero,158(sp)
 8044880:	14000017 	ldw	r16,0(r2)
 8044884:	e011883a 	mov	r8,fp
 8044888:	15000104 	addi	r20,r2,4
 804488c:	80042126 	beq	r16,zero,8045914 <___svfprintf_internal_r+0x1ce8>
 8044890:	d8c02a17 	ldw	r3,168(sp)
 8044894:	1803ee16 	blt	r3,zero,8045850 <___svfprintf_internal_r+0x1c24>
 8044898:	180d883a 	mov	r6,r3
 804489c:	000b883a 	mov	r5,zero
 80448a0:	8009883a 	mov	r4,r16
 80448a4:	df003e15 	stw	fp,248(sp)
 80448a8:	8048a800 	call	8048a80 <memchr>
 80448ac:	da003e17 	ldw	r8,248(sp)
 80448b0:	10046a26 	beq	r2,zero,8045a5c <___svfprintf_internal_r+0x1e30>
 80448b4:	1405c83a 	sub	r2,r2,r16
 80448b8:	d8802b15 	stw	r2,172(sp)
 80448bc:	1003ea16 	blt	r2,zero,8045868 <___svfprintf_internal_r+0x1c3c>
 80448c0:	df002783 	ldbu	fp,158(sp)
 80448c4:	d8802915 	stw	r2,164(sp)
 80448c8:	dd002e15 	stw	r20,184(sp)
 80448cc:	d8002a15 	stw	zero,168(sp)
 80448d0:	d8003215 	stw	zero,200(sp)
 80448d4:	003e9306 	br	8044324 <__alt_data_end+0xfffdc284>
 80448d8:	8025883a 	mov	r18,r16
 80448dc:	dc002903 	ldbu	r16,164(sp)
 80448e0:	e011883a 	mov	r8,fp
 80448e4:	84003fcc 	andi	r16,r16,255
 80448e8:	803f7c26 	beq	r16,zero,80446dc <__alt_data_end+0xfffdc63c>
 80448ec:	d8c02b03 	ldbu	r3,172(sp)
 80448f0:	d8c02785 	stb	r3,158(sp)
 80448f4:	003f7906 	br	80446dc <__alt_data_end+0xfffdc63c>
 80448f8:	8025883a 	mov	r18,r16
 80448fc:	dc002903 	ldbu	r16,164(sp)
 8044900:	e011883a 	mov	r8,fp
 8044904:	84003fcc 	andi	r16,r16,255
 8044908:	8005741e 	bne	r16,zero,8045edc <___svfprintf_internal_r+0x22b0>
 804490c:	01020174 	movhi	r4,2053
 8044910:	210c2f04 	addi	r4,r4,12476
 8044914:	d9003a15 	stw	r4,232(sp)
 8044918:	9080080c 	andi	r2,r18,32
 804491c:	103f8e1e 	bne	r2,zero,8044758 <__alt_data_end+0xfffdc6b8>
 8044920:	9080040c 	andi	r2,r18,16
 8044924:	1002a726 	beq	r2,zero,80453c4 <___svfprintf_internal_r+0x1798>
 8044928:	d8802e17 	ldw	r2,184(sp)
 804492c:	002d883a 	mov	r22,zero
 8044930:	15000017 	ldw	r20,0(r2)
 8044934:	10800104 	addi	r2,r2,4
 8044938:	d8802e15 	stw	r2,184(sp)
 804493c:	003f8b06 	br	804476c <__alt_data_end+0xfffdc6cc>
 8044940:	84000054 	ori	r16,r16,1
 8044944:	bc400007 	ldb	r17,0(r23)
 8044948:	003d0d06 	br	8043d80 <__alt_data_end+0xfffdbce0>
 804494c:	d8802b07 	ldb	r2,172(sp)
 8044950:	1002a41e 	bne	r2,zero,80453e4 <___svfprintf_internal_r+0x17b8>
 8044954:	00c00044 	movi	r3,1
 8044958:	d8c02905 	stb	r3,164(sp)
 804495c:	00c00804 	movi	r3,32
 8044960:	d8c02b05 	stb	r3,172(sp)
 8044964:	bc400007 	ldb	r17,0(r23)
 8044968:	003d0506 	br	8043d80 <__alt_data_end+0xfffdbce0>
 804496c:	8025883a 	mov	r18,r16
 8044970:	dc002903 	ldbu	r16,164(sp)
 8044974:	e011883a 	mov	r8,fp
 8044978:	84003fcc 	andi	r16,r16,255
 804497c:	803e0626 	beq	r16,zero,8044198 <__alt_data_end+0xfffdc0f8>
 8044980:	d8c02b03 	ldbu	r3,172(sp)
 8044984:	d8c02785 	stb	r3,158(sp)
 8044988:	003e0306 	br	8044198 <__alt_data_end+0xfffdc0f8>
 804498c:	bc400007 	ldb	r17,0(r23)
 8044990:	00801b04 	movi	r2,108
 8044994:	88830a26 	beq	r17,r2,80455c0 <___svfprintf_internal_r+0x1994>
 8044998:	84000414 	ori	r16,r16,16
 804499c:	003cf806 	br	8043d80 <__alt_data_end+0xfffdbce0>
 80449a0:	8025883a 	mov	r18,r16
 80449a4:	dc002903 	ldbu	r16,164(sp)
 80449a8:	e011883a 	mov	r8,fp
 80449ac:	84003fcc 	andi	r16,r16,255
 80449b0:	8005471e 	bne	r16,zero,8045ed0 <___svfprintf_internal_r+0x22a4>
 80449b4:	9080080c 	andi	r2,r18,32
 80449b8:	10028c26 	beq	r2,zero,80453ec <___svfprintf_internal_r+0x17c0>
 80449bc:	d9002e17 	ldw	r4,184(sp)
 80449c0:	d9402f17 	ldw	r5,188(sp)
 80449c4:	20800017 	ldw	r2,0(r4)
 80449c8:	2807d7fa 	srai	r3,r5,31
 80449cc:	21000104 	addi	r4,r4,4
 80449d0:	d9002e15 	stw	r4,184(sp)
 80449d4:	11400015 	stw	r5,0(r2)
 80449d8:	10c00115 	stw	r3,4(r2)
 80449dc:	003cbe06 	br	8043cd8 <__alt_data_end+0xfffdbc38>
 80449e0:	84001014 	ori	r16,r16,64
 80449e4:	bc400007 	ldb	r17,0(r23)
 80449e8:	003ce506 	br	8043d80 <__alt_data_end+0xfffdbce0>
 80449ec:	01020174 	movhi	r4,2053
 80449f0:	210c2f04 	addi	r4,r4,12476
 80449f4:	0039883a 	mov	fp,zero
 80449f8:	d9003a15 	stw	r4,232(sp)
 80449fc:	04401e04 	movi	r17,120
 8044a00:	003f6906 	br	80447a8 <__alt_data_end+0xfffdc708>
 8044a04:	8025883a 	mov	r18,r16
 8044a08:	dc002903 	ldbu	r16,164(sp)
 8044a0c:	e011883a 	mov	r8,fp
 8044a10:	84003fcc 	andi	r16,r16,255
 8044a14:	8005261e 	bne	r16,zero,8045eb0 <___svfprintf_internal_r+0x2284>
 8044a18:	883d6526 	beq	r17,zero,8043fb0 <__alt_data_end+0xfffdbf10>
 8044a1c:	00c00044 	movi	r3,1
 8044a20:	d8c02915 	stw	r3,164(sp)
 8044a24:	dc401405 	stb	r17,80(sp)
 8044a28:	d8002785 	stb	zero,158(sp)
 8044a2c:	003f7a06 	br	8044818 <__alt_data_end+0xfffdc778>
 8044a30:	01020174 	movhi	r4,2053
 8044a34:	210c2f04 	addi	r4,r4,12476
 8044a38:	d9003a15 	stw	r4,232(sp)
 8044a3c:	d8c02e15 	stw	r3,184(sp)
 8044a40:	1025883a 	mov	r18,r2
 8044a44:	04401e04 	movi	r17,120
 8044a48:	a584b03a 	or	r2,r20,r22
 8044a4c:	1000fa1e 	bne	r2,zero,8044e38 <___svfprintf_internal_r+0x120c>
 8044a50:	0039883a 	mov	fp,zero
 8044a54:	00800084 	movi	r2,2
 8044a58:	10803fcc 	andi	r2,r2,255
 8044a5c:	00c00044 	movi	r3,1
 8044a60:	10c21626 	beq	r2,r3,80452bc <___svfprintf_internal_r+0x1690>
 8044a64:	00c00084 	movi	r3,2
 8044a68:	10fe0e1e 	bne	r2,r3,80442a4 <__alt_data_end+0xfffdc204>
 8044a6c:	003d4606 	br	8043f88 <__alt_data_end+0xfffdbee8>
 8044a70:	d8c02017 	ldw	r3,128(sp)
 8044a74:	003e7306 	br	8044444 <__alt_data_end+0xfffdc3a4>
 8044a78:	00801944 	movi	r2,101
 8044a7c:	14407c0e 	bge	r2,r17,8044c70 <___svfprintf_internal_r+0x1044>
 8044a80:	d9003617 	ldw	r4,216(sp)
 8044a84:	d9403717 	ldw	r5,220(sp)
 8044a88:	000d883a 	mov	r6,zero
 8044a8c:	000f883a 	mov	r7,zero
 8044a90:	d8c03d15 	stw	r3,244(sp)
 8044a94:	da003e15 	stw	r8,248(sp)
 8044a98:	804deb00 	call	804deb0 <__eqdf2>
 8044a9c:	d8c03d17 	ldw	r3,244(sp)
 8044aa0:	da003e17 	ldw	r8,248(sp)
 8044aa4:	1000f51e 	bne	r2,zero,8044e7c <___svfprintf_internal_r+0x1250>
 8044aa8:	d8801f17 	ldw	r2,124(sp)
 8044aac:	01020174 	movhi	r4,2053
 8044ab0:	210c3604 	addi	r4,r4,12504
 8044ab4:	18c00044 	addi	r3,r3,1
 8044ab8:	10800044 	addi	r2,r2,1
 8044abc:	41000015 	stw	r4,0(r8)
 8044ac0:	01000044 	movi	r4,1
 8044ac4:	41000115 	stw	r4,4(r8)
 8044ac8:	d8c02015 	stw	r3,128(sp)
 8044acc:	d8801f15 	stw	r2,124(sp)
 8044ad0:	010001c4 	movi	r4,7
 8044ad4:	20826616 	blt	r4,r2,8045470 <___svfprintf_internal_r+0x1844>
 8044ad8:	42000204 	addi	r8,r8,8
 8044adc:	d8802617 	ldw	r2,152(sp)
 8044ae0:	d9403317 	ldw	r5,204(sp)
 8044ae4:	11400216 	blt	r2,r5,8044af0 <___svfprintf_internal_r+0xec4>
 8044ae8:	9080004c 	andi	r2,r18,1
 8044aec:	103eb326 	beq	r2,zero,80445bc <__alt_data_end+0xfffdc51c>
 8044af0:	d8803817 	ldw	r2,224(sp)
 8044af4:	d9003417 	ldw	r4,208(sp)
 8044af8:	d9403817 	ldw	r5,224(sp)
 8044afc:	1887883a 	add	r3,r3,r2
 8044b00:	d8801f17 	ldw	r2,124(sp)
 8044b04:	41000015 	stw	r4,0(r8)
 8044b08:	41400115 	stw	r5,4(r8)
 8044b0c:	10800044 	addi	r2,r2,1
 8044b10:	d8c02015 	stw	r3,128(sp)
 8044b14:	d8801f15 	stw	r2,124(sp)
 8044b18:	010001c4 	movi	r4,7
 8044b1c:	2082af16 	blt	r4,r2,80455dc <___svfprintf_internal_r+0x19b0>
 8044b20:	42000204 	addi	r8,r8,8
 8044b24:	d8803317 	ldw	r2,204(sp)
 8044b28:	143fffc4 	addi	r16,r2,-1
 8044b2c:	043ea30e 	bge	zero,r16,80445bc <__alt_data_end+0xfffdc51c>
 8044b30:	04400404 	movi	r17,16
 8044b34:	d8801f17 	ldw	r2,124(sp)
 8044b38:	8c00860e 	bge	r17,r16,8044d54 <___svfprintf_internal_r+0x1128>
 8044b3c:	01420174 	movhi	r5,2053
 8044b40:	294c3684 	addi	r5,r5,12506
 8044b44:	d9402c15 	stw	r5,176(sp)
 8044b48:	058001c4 	movi	r22,7
 8044b4c:	dd002d17 	ldw	r20,180(sp)
 8044b50:	00000306 	br	8044b60 <___svfprintf_internal_r+0xf34>
 8044b54:	42000204 	addi	r8,r8,8
 8044b58:	843ffc04 	addi	r16,r16,-16
 8044b5c:	8c00800e 	bge	r17,r16,8044d60 <___svfprintf_internal_r+0x1134>
 8044b60:	18c00404 	addi	r3,r3,16
 8044b64:	10800044 	addi	r2,r2,1
 8044b68:	45400015 	stw	r21,0(r8)
 8044b6c:	44400115 	stw	r17,4(r8)
 8044b70:	d8c02015 	stw	r3,128(sp)
 8044b74:	d8801f15 	stw	r2,124(sp)
 8044b78:	b0bff60e 	bge	r22,r2,8044b54 <__alt_data_end+0xfffdcab4>
 8044b7c:	d9801e04 	addi	r6,sp,120
 8044b80:	a00b883a 	mov	r5,r20
 8044b84:	9809883a 	mov	r4,r19
 8044b88:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044b8c:	103d0e1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044b90:	d8c02017 	ldw	r3,128(sp)
 8044b94:	d8801f17 	ldw	r2,124(sp)
 8044b98:	da000404 	addi	r8,sp,16
 8044b9c:	003fee06 	br	8044b58 <__alt_data_end+0xfffdcab8>
 8044ba0:	d9403117 	ldw	r5,196(sp)
 8044ba4:	d8802917 	ldw	r2,164(sp)
 8044ba8:	28adc83a 	sub	r22,r5,r2
 8044bac:	05be430e 	bge	zero,r22,80444bc <__alt_data_end+0xfffdc41c>
 8044bb0:	07000404 	movi	fp,16
 8044bb4:	d8801f17 	ldw	r2,124(sp)
 8044bb8:	e583a20e 	bge	fp,r22,8045a44 <___svfprintf_internal_r+0x1e18>
 8044bbc:	01420174 	movhi	r5,2053
 8044bc0:	294c3684 	addi	r5,r5,12506
 8044bc4:	dc403015 	stw	r17,192(sp)
 8044bc8:	d9402c15 	stw	r5,176(sp)
 8044bcc:	b023883a 	mov	r17,r22
 8044bd0:	050001c4 	movi	r20,7
 8044bd4:	902d883a 	mov	r22,r18
 8044bd8:	8025883a 	mov	r18,r16
 8044bdc:	dc002d17 	ldw	r16,180(sp)
 8044be0:	00000306 	br	8044bf0 <___svfprintf_internal_r+0xfc4>
 8044be4:	8c7ffc04 	addi	r17,r17,-16
 8044be8:	42000204 	addi	r8,r8,8
 8044bec:	e440110e 	bge	fp,r17,8044c34 <___svfprintf_internal_r+0x1008>
 8044bf0:	18c00404 	addi	r3,r3,16
 8044bf4:	10800044 	addi	r2,r2,1
 8044bf8:	45400015 	stw	r21,0(r8)
 8044bfc:	47000115 	stw	fp,4(r8)
 8044c00:	d8c02015 	stw	r3,128(sp)
 8044c04:	d8801f15 	stw	r2,124(sp)
 8044c08:	a0bff60e 	bge	r20,r2,8044be4 <__alt_data_end+0xfffdcb44>
 8044c0c:	d9801e04 	addi	r6,sp,120
 8044c10:	800b883a 	mov	r5,r16
 8044c14:	9809883a 	mov	r4,r19
 8044c18:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044c1c:	103cea1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044c20:	8c7ffc04 	addi	r17,r17,-16
 8044c24:	d8c02017 	ldw	r3,128(sp)
 8044c28:	d8801f17 	ldw	r2,124(sp)
 8044c2c:	da000404 	addi	r8,sp,16
 8044c30:	e47fef16 	blt	fp,r17,8044bf0 <__alt_data_end+0xfffdcb50>
 8044c34:	9021883a 	mov	r16,r18
 8044c38:	b025883a 	mov	r18,r22
 8044c3c:	882d883a 	mov	r22,r17
 8044c40:	dc403017 	ldw	r17,192(sp)
 8044c44:	d9002c17 	ldw	r4,176(sp)
 8044c48:	1d87883a 	add	r3,r3,r22
 8044c4c:	10800044 	addi	r2,r2,1
 8044c50:	41000015 	stw	r4,0(r8)
 8044c54:	45800115 	stw	r22,4(r8)
 8044c58:	d8c02015 	stw	r3,128(sp)
 8044c5c:	d8801f15 	stw	r2,124(sp)
 8044c60:	010001c4 	movi	r4,7
 8044c64:	20819a16 	blt	r4,r2,80452d0 <___svfprintf_internal_r+0x16a4>
 8044c68:	42000204 	addi	r8,r8,8
 8044c6c:	003e1306 	br	80444bc <__alt_data_end+0xfffdc41c>
 8044c70:	d9403317 	ldw	r5,204(sp)
 8044c74:	00800044 	movi	r2,1
 8044c78:	18c00044 	addi	r3,r3,1
 8044c7c:	1141710e 	bge	r2,r5,8045244 <___svfprintf_internal_r+0x1618>
 8044c80:	dc401f17 	ldw	r17,124(sp)
 8044c84:	00800044 	movi	r2,1
 8044c88:	40800115 	stw	r2,4(r8)
 8044c8c:	8c400044 	addi	r17,r17,1
 8044c90:	44000015 	stw	r16,0(r8)
 8044c94:	d8c02015 	stw	r3,128(sp)
 8044c98:	dc401f15 	stw	r17,124(sp)
 8044c9c:	008001c4 	movi	r2,7
 8044ca0:	14417416 	blt	r2,r17,8045274 <___svfprintf_internal_r+0x1648>
 8044ca4:	42000204 	addi	r8,r8,8
 8044ca8:	d8803817 	ldw	r2,224(sp)
 8044cac:	d9003417 	ldw	r4,208(sp)
 8044cb0:	8c400044 	addi	r17,r17,1
 8044cb4:	10c7883a 	add	r3,r2,r3
 8044cb8:	40800115 	stw	r2,4(r8)
 8044cbc:	41000015 	stw	r4,0(r8)
 8044cc0:	d8c02015 	stw	r3,128(sp)
 8044cc4:	dc401f15 	stw	r17,124(sp)
 8044cc8:	008001c4 	movi	r2,7
 8044ccc:	14417216 	blt	r2,r17,8045298 <___svfprintf_internal_r+0x166c>
 8044cd0:	45800204 	addi	r22,r8,8
 8044cd4:	d9003617 	ldw	r4,216(sp)
 8044cd8:	d9403717 	ldw	r5,220(sp)
 8044cdc:	000d883a 	mov	r6,zero
 8044ce0:	000f883a 	mov	r7,zero
 8044ce4:	d8c03d15 	stw	r3,244(sp)
 8044ce8:	804deb00 	call	804deb0 <__eqdf2>
 8044cec:	d8c03d17 	ldw	r3,244(sp)
 8044cf0:	1000b326 	beq	r2,zero,8044fc0 <___svfprintf_internal_r+0x1394>
 8044cf4:	d9403317 	ldw	r5,204(sp)
 8044cf8:	84000044 	addi	r16,r16,1
 8044cfc:	8c400044 	addi	r17,r17,1
 8044d00:	28bfffc4 	addi	r2,r5,-1
 8044d04:	1887883a 	add	r3,r3,r2
 8044d08:	b0800115 	stw	r2,4(r22)
 8044d0c:	b4000015 	stw	r16,0(r22)
 8044d10:	d8c02015 	stw	r3,128(sp)
 8044d14:	dc401f15 	stw	r17,124(sp)
 8044d18:	008001c4 	movi	r2,7
 8044d1c:	1440d216 	blt	r2,r17,8045068 <___svfprintf_internal_r+0x143c>
 8044d20:	b5800204 	addi	r22,r22,8
 8044d24:	d9003b17 	ldw	r4,236(sp)
 8044d28:	df0022c4 	addi	fp,sp,139
 8044d2c:	8c400044 	addi	r17,r17,1
 8044d30:	20c7883a 	add	r3,r4,r3
 8044d34:	b7000015 	stw	fp,0(r22)
 8044d38:	b1000115 	stw	r4,4(r22)
 8044d3c:	d8c02015 	stw	r3,128(sp)
 8044d40:	dc401f15 	stw	r17,124(sp)
 8044d44:	008001c4 	movi	r2,7
 8044d48:	14400e16 	blt	r2,r17,8044d84 <___svfprintf_internal_r+0x1158>
 8044d4c:	b2000204 	addi	r8,r22,8
 8044d50:	003e1a06 	br	80445bc <__alt_data_end+0xfffdc51c>
 8044d54:	01020174 	movhi	r4,2053
 8044d58:	210c3684 	addi	r4,r4,12506
 8044d5c:	d9002c15 	stw	r4,176(sp)
 8044d60:	d9002c17 	ldw	r4,176(sp)
 8044d64:	1c07883a 	add	r3,r3,r16
 8044d68:	44000115 	stw	r16,4(r8)
 8044d6c:	41000015 	stw	r4,0(r8)
 8044d70:	10800044 	addi	r2,r2,1
 8044d74:	d8c02015 	stw	r3,128(sp)
 8044d78:	d8801f15 	stw	r2,124(sp)
 8044d7c:	010001c4 	movi	r4,7
 8044d80:	20be0d0e 	bge	r4,r2,80445b8 <__alt_data_end+0xfffdc518>
 8044d84:	d9402d17 	ldw	r5,180(sp)
 8044d88:	d9801e04 	addi	r6,sp,120
 8044d8c:	9809883a 	mov	r4,r19
 8044d90:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044d94:	103c8c1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044d98:	d8c02017 	ldw	r3,128(sp)
 8044d9c:	da000404 	addi	r8,sp,16
 8044da0:	003e0606 	br	80445bc <__alt_data_end+0xfffdc51c>
 8044da4:	d9402d17 	ldw	r5,180(sp)
 8044da8:	d9801e04 	addi	r6,sp,120
 8044dac:	9809883a 	mov	r4,r19
 8044db0:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044db4:	103e3d26 	beq	r2,zero,80446ac <__alt_data_end+0xfffdc60c>
 8044db8:	003c8306 	br	8043fc8 <__alt_data_end+0xfffdbf28>
 8044dbc:	d9402d17 	ldw	r5,180(sp)
 8044dc0:	d9801e04 	addi	r6,sp,120
 8044dc4:	9809883a 	mov	r4,r19
 8044dc8:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044dcc:	103c7e1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044dd0:	d8c02017 	ldw	r3,128(sp)
 8044dd4:	da000404 	addi	r8,sp,16
 8044dd8:	003deb06 	br	8044588 <__alt_data_end+0xfffdc4e8>
 8044ddc:	d9402d17 	ldw	r5,180(sp)
 8044de0:	d9801e04 	addi	r6,sp,120
 8044de4:	9809883a 	mov	r4,r19
 8044de8:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044dec:	103c761e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044df0:	d8c02017 	ldw	r3,128(sp)
 8044df4:	da000404 	addi	r8,sp,16
 8044df8:	003d9f06 	br	8044478 <__alt_data_end+0xfffdc3d8>
 8044dfc:	d9402d17 	ldw	r5,180(sp)
 8044e00:	d9801e04 	addi	r6,sp,120
 8044e04:	9809883a 	mov	r4,r19
 8044e08:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044e0c:	103c6e1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044e10:	d8c02017 	ldw	r3,128(sp)
 8044e14:	da000404 	addi	r8,sp,16
 8044e18:	003da506 	br	80444b0 <__alt_data_end+0xfffdc410>
 8044e1c:	d9402a17 	ldw	r5,168(sp)
 8044e20:	d8002785 	stb	zero,158(sp)
 8044e24:	283f0816 	blt	r5,zero,8044a48 <__alt_data_end+0xfffdc9a8>
 8044e28:	00ffdfc4 	movi	r3,-129
 8044e2c:	a584b03a 	or	r2,r20,r22
 8044e30:	90e4703a 	and	r18,r18,r3
 8044e34:	103c5126 	beq	r2,zero,8043f7c <__alt_data_end+0xfffdbedc>
 8044e38:	0039883a 	mov	fp,zero
 8044e3c:	003e5a06 	br	80447a8 <__alt_data_end+0xfffdc708>
 8044e40:	9080040c 	andi	r2,r18,16
 8044e44:	10013d26 	beq	r2,zero,804533c <___svfprintf_internal_r+0x1710>
 8044e48:	d8c02e17 	ldw	r3,184(sp)
 8044e4c:	d9002a17 	ldw	r4,168(sp)
 8044e50:	d8002785 	stb	zero,158(sp)
 8044e54:	18800104 	addi	r2,r3,4
 8044e58:	1d000017 	ldw	r20,0(r3)
 8044e5c:	002d883a 	mov	r22,zero
 8044e60:	20013f16 	blt	r4,zero,8045360 <___svfprintf_internal_r+0x1734>
 8044e64:	00ffdfc4 	movi	r3,-129
 8044e68:	d8802e15 	stw	r2,184(sp)
 8044e6c:	90e4703a 	and	r18,r18,r3
 8044e70:	a03d0926 	beq	r20,zero,8044298 <__alt_data_end+0xfffdc1f8>
 8044e74:	0039883a 	mov	fp,zero
 8044e78:	003d0c06 	br	80442ac <__alt_data_end+0xfffdc20c>
 8044e7c:	dc402617 	ldw	r17,152(sp)
 8044e80:	0441830e 	bge	zero,r17,8045490 <___svfprintf_internal_r+0x1864>
 8044e84:	dc403217 	ldw	r17,200(sp)
 8044e88:	d8803317 	ldw	r2,204(sp)
 8044e8c:	1440010e 	bge	r2,r17,8044e94 <___svfprintf_internal_r+0x1268>
 8044e90:	1023883a 	mov	r17,r2
 8044e94:	04400a0e 	bge	zero,r17,8044ec0 <___svfprintf_internal_r+0x1294>
 8044e98:	d8801f17 	ldw	r2,124(sp)
 8044e9c:	1c47883a 	add	r3,r3,r17
 8044ea0:	44000015 	stw	r16,0(r8)
 8044ea4:	10800044 	addi	r2,r2,1
 8044ea8:	44400115 	stw	r17,4(r8)
 8044eac:	d8c02015 	stw	r3,128(sp)
 8044eb0:	d8801f15 	stw	r2,124(sp)
 8044eb4:	010001c4 	movi	r4,7
 8044eb8:	20827516 	blt	r4,r2,8045890 <___svfprintf_internal_r+0x1c64>
 8044ebc:	42000204 	addi	r8,r8,8
 8044ec0:	88027b16 	blt	r17,zero,80458b0 <___svfprintf_internal_r+0x1c84>
 8044ec4:	d9003217 	ldw	r4,200(sp)
 8044ec8:	2463c83a 	sub	r17,r4,r17
 8044ecc:	0440990e 	bge	zero,r17,8045134 <___svfprintf_internal_r+0x1508>
 8044ed0:	05800404 	movi	r22,16
 8044ed4:	d8801f17 	ldw	r2,124(sp)
 8044ed8:	b441530e 	bge	r22,r17,8045428 <___svfprintf_internal_r+0x17fc>
 8044edc:	01020174 	movhi	r4,2053
 8044ee0:	210c3684 	addi	r4,r4,12506
 8044ee4:	d9002c15 	stw	r4,176(sp)
 8044ee8:	070001c4 	movi	fp,7
 8044eec:	dd002d17 	ldw	r20,180(sp)
 8044ef0:	00000306 	br	8044f00 <___svfprintf_internal_r+0x12d4>
 8044ef4:	42000204 	addi	r8,r8,8
 8044ef8:	8c7ffc04 	addi	r17,r17,-16
 8044efc:	b4414d0e 	bge	r22,r17,8045434 <___svfprintf_internal_r+0x1808>
 8044f00:	18c00404 	addi	r3,r3,16
 8044f04:	10800044 	addi	r2,r2,1
 8044f08:	45400015 	stw	r21,0(r8)
 8044f0c:	45800115 	stw	r22,4(r8)
 8044f10:	d8c02015 	stw	r3,128(sp)
 8044f14:	d8801f15 	stw	r2,124(sp)
 8044f18:	e0bff60e 	bge	fp,r2,8044ef4 <__alt_data_end+0xfffdce54>
 8044f1c:	d9801e04 	addi	r6,sp,120
 8044f20:	a00b883a 	mov	r5,r20
 8044f24:	9809883a 	mov	r4,r19
 8044f28:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044f2c:	103c261e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044f30:	d8c02017 	ldw	r3,128(sp)
 8044f34:	d8801f17 	ldw	r2,124(sp)
 8044f38:	da000404 	addi	r8,sp,16
 8044f3c:	003fee06 	br	8044ef8 <__alt_data_end+0xfffdce58>
 8044f40:	d9402d17 	ldw	r5,180(sp)
 8044f44:	d9801e04 	addi	r6,sp,120
 8044f48:	9809883a 	mov	r4,r19
 8044f4c:	804a6e40 	call	804a6e4 <__ssprint_r>
 8044f50:	103c1d1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8044f54:	d8c02017 	ldw	r3,128(sp)
 8044f58:	df002787 	ldb	fp,158(sp)
 8044f5c:	da000404 	addi	r8,sp,16
 8044f60:	003d3806 	br	8044444 <__alt_data_end+0xfffdc3a4>
 8044f64:	9080040c 	andi	r2,r18,16
 8044f68:	10005c26 	beq	r2,zero,80450dc <___svfprintf_internal_r+0x14b0>
 8044f6c:	d8c02e17 	ldw	r3,184(sp)
 8044f70:	d9002a17 	ldw	r4,168(sp)
 8044f74:	d8002785 	stb	zero,158(sp)
 8044f78:	18800104 	addi	r2,r3,4
 8044f7c:	1d000017 	ldw	r20,0(r3)
 8044f80:	002d883a 	mov	r22,zero
 8044f84:	20005e16 	blt	r4,zero,8045100 <___svfprintf_internal_r+0x14d4>
 8044f88:	00ffdfc4 	movi	r3,-129
 8044f8c:	d8802e15 	stw	r2,184(sp)
 8044f90:	90e4703a 	and	r18,r18,r3
 8044f94:	0039883a 	mov	fp,zero
 8044f98:	a03ddf26 	beq	r20,zero,8044718 <__alt_data_end+0xfffdc678>
 8044f9c:	00800244 	movi	r2,9
 8044fa0:	153c8e36 	bltu	r2,r20,80441dc <__alt_data_end+0xfffdc13c>
 8044fa4:	a5000c04 	addi	r20,r20,48
 8044fa8:	dc001dc4 	addi	r16,sp,119
 8044fac:	dd001dc5 	stb	r20,119(sp)
 8044fb0:	d8c02817 	ldw	r3,160(sp)
 8044fb4:	1c07c83a 	sub	r3,r3,r16
 8044fb8:	d8c02b15 	stw	r3,172(sp)
 8044fbc:	003cd306 	br	804430c <__alt_data_end+0xfffdc26c>
 8044fc0:	d8803317 	ldw	r2,204(sp)
 8044fc4:	143fffc4 	addi	r16,r2,-1
 8044fc8:	043f560e 	bge	zero,r16,8044d24 <__alt_data_end+0xfffdcc84>
 8044fcc:	07000404 	movi	fp,16
 8044fd0:	e403530e 	bge	fp,r16,8045d20 <___svfprintf_internal_r+0x20f4>
 8044fd4:	01420174 	movhi	r5,2053
 8044fd8:	294c3684 	addi	r5,r5,12506
 8044fdc:	d9402c15 	stw	r5,176(sp)
 8044fe0:	01c001c4 	movi	r7,7
 8044fe4:	dd002d17 	ldw	r20,180(sp)
 8044fe8:	00000306 	br	8044ff8 <___svfprintf_internal_r+0x13cc>
 8044fec:	843ffc04 	addi	r16,r16,-16
 8044ff0:	b5800204 	addi	r22,r22,8
 8044ff4:	e400130e 	bge	fp,r16,8045044 <___svfprintf_internal_r+0x1418>
 8044ff8:	18c00404 	addi	r3,r3,16
 8044ffc:	8c400044 	addi	r17,r17,1
 8045000:	b5400015 	stw	r21,0(r22)
 8045004:	b7000115 	stw	fp,4(r22)
 8045008:	d8c02015 	stw	r3,128(sp)
 804500c:	dc401f15 	stw	r17,124(sp)
 8045010:	3c7ff60e 	bge	r7,r17,8044fec <__alt_data_end+0xfffdcf4c>
 8045014:	d9801e04 	addi	r6,sp,120
 8045018:	a00b883a 	mov	r5,r20
 804501c:	9809883a 	mov	r4,r19
 8045020:	d9c03d15 	stw	r7,244(sp)
 8045024:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045028:	d9c03d17 	ldw	r7,244(sp)
 804502c:	103be61e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045030:	843ffc04 	addi	r16,r16,-16
 8045034:	d8c02017 	ldw	r3,128(sp)
 8045038:	dc401f17 	ldw	r17,124(sp)
 804503c:	dd800404 	addi	r22,sp,16
 8045040:	e43fed16 	blt	fp,r16,8044ff8 <__alt_data_end+0xfffdcf58>
 8045044:	d8802c17 	ldw	r2,176(sp)
 8045048:	1c07883a 	add	r3,r3,r16
 804504c:	8c400044 	addi	r17,r17,1
 8045050:	b0800015 	stw	r2,0(r22)
 8045054:	b4000115 	stw	r16,4(r22)
 8045058:	d8c02015 	stw	r3,128(sp)
 804505c:	dc401f15 	stw	r17,124(sp)
 8045060:	008001c4 	movi	r2,7
 8045064:	147f2e0e 	bge	r2,r17,8044d20 <__alt_data_end+0xfffdcc80>
 8045068:	d9402d17 	ldw	r5,180(sp)
 804506c:	d9801e04 	addi	r6,sp,120
 8045070:	9809883a 	mov	r4,r19
 8045074:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045078:	103bd31e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 804507c:	d8c02017 	ldw	r3,128(sp)
 8045080:	dc401f17 	ldw	r17,124(sp)
 8045084:	dd800404 	addi	r22,sp,16
 8045088:	003f2606 	br	8044d24 <__alt_data_end+0xfffdcc84>
 804508c:	9080040c 	andi	r2,r18,16
 8045090:	1000c326 	beq	r2,zero,80453a0 <___svfprintf_internal_r+0x1774>
 8045094:	d9402e17 	ldw	r5,184(sp)
 8045098:	2d000017 	ldw	r20,0(r5)
 804509c:	29400104 	addi	r5,r5,4
 80450a0:	d9402e15 	stw	r5,184(sp)
 80450a4:	a02dd7fa 	srai	r22,r20,31
 80450a8:	b005883a 	mov	r2,r22
 80450ac:	103c430e 	bge	r2,zero,80441bc <__alt_data_end+0xfffdc11c>
 80450b0:	d9402a17 	ldw	r5,168(sp)
 80450b4:	0529c83a 	sub	r20,zero,r20
 80450b8:	07000b44 	movi	fp,45
 80450bc:	a004c03a 	cmpne	r2,r20,zero
 80450c0:	05adc83a 	sub	r22,zero,r22
 80450c4:	df002785 	stb	fp,158(sp)
 80450c8:	b0adc83a 	sub	r22,r22,r2
 80450cc:	28022e16 	blt	r5,zero,8045988 <___svfprintf_internal_r+0x1d5c>
 80450d0:	00bfdfc4 	movi	r2,-129
 80450d4:	90a4703a 	and	r18,r18,r2
 80450d8:	003c3f06 	br	80441d8 <__alt_data_end+0xfffdc138>
 80450dc:	9080100c 	andi	r2,r18,64
 80450e0:	d8002785 	stb	zero,158(sp)
 80450e4:	10012526 	beq	r2,zero,804557c <___svfprintf_internal_r+0x1950>
 80450e8:	d9402e17 	ldw	r5,184(sp)
 80450ec:	d8c02a17 	ldw	r3,168(sp)
 80450f0:	002d883a 	mov	r22,zero
 80450f4:	28800104 	addi	r2,r5,4
 80450f8:	2d00000b 	ldhu	r20,0(r5)
 80450fc:	183fa20e 	bge	r3,zero,8044f88 <__alt_data_end+0xfffdcee8>
 8045100:	d8802e15 	stw	r2,184(sp)
 8045104:	0039883a 	mov	fp,zero
 8045108:	a584b03a 	or	r2,r20,r22
 804510c:	103c321e 	bne	r2,zero,80441d8 <__alt_data_end+0xfffdc138>
 8045110:	00800044 	movi	r2,1
 8045114:	003e5006 	br	8044a58 <__alt_data_end+0xfffdc9b8>
 8045118:	d9402d17 	ldw	r5,180(sp)
 804511c:	d9801e04 	addi	r6,sp,120
 8045120:	9809883a 	mov	r4,r19
 8045124:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045128:	103ba71e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 804512c:	d8c02017 	ldw	r3,128(sp)
 8045130:	da000404 	addi	r8,sp,16
 8045134:	d9003217 	ldw	r4,200(sp)
 8045138:	d8802617 	ldw	r2,152(sp)
 804513c:	d9403317 	ldw	r5,204(sp)
 8045140:	8123883a 	add	r17,r16,r4
 8045144:	11400216 	blt	r2,r5,8045150 <___svfprintf_internal_r+0x1524>
 8045148:	9100004c 	andi	r4,r18,1
 804514c:	20000d26 	beq	r4,zero,8045184 <___svfprintf_internal_r+0x1558>
 8045150:	d9003817 	ldw	r4,224(sp)
 8045154:	d9403417 	ldw	r5,208(sp)
 8045158:	1907883a 	add	r3,r3,r4
 804515c:	d9001f17 	ldw	r4,124(sp)
 8045160:	41400015 	stw	r5,0(r8)
 8045164:	d9403817 	ldw	r5,224(sp)
 8045168:	21000044 	addi	r4,r4,1
 804516c:	d8c02015 	stw	r3,128(sp)
 8045170:	41400115 	stw	r5,4(r8)
 8045174:	d9001f15 	stw	r4,124(sp)
 8045178:	014001c4 	movi	r5,7
 804517c:	2901dc16 	blt	r5,r4,80458f0 <___svfprintf_internal_r+0x1cc4>
 8045180:	42000204 	addi	r8,r8,8
 8045184:	d9003317 	ldw	r4,204(sp)
 8045188:	8121883a 	add	r16,r16,r4
 804518c:	2085c83a 	sub	r2,r4,r2
 8045190:	8461c83a 	sub	r16,r16,r17
 8045194:	1400010e 	bge	r2,r16,804519c <___svfprintf_internal_r+0x1570>
 8045198:	1021883a 	mov	r16,r2
 804519c:	04000a0e 	bge	zero,r16,80451c8 <___svfprintf_internal_r+0x159c>
 80451a0:	d9001f17 	ldw	r4,124(sp)
 80451a4:	1c07883a 	add	r3,r3,r16
 80451a8:	44400015 	stw	r17,0(r8)
 80451ac:	21000044 	addi	r4,r4,1
 80451b0:	44000115 	stw	r16,4(r8)
 80451b4:	d8c02015 	stw	r3,128(sp)
 80451b8:	d9001f15 	stw	r4,124(sp)
 80451bc:	014001c4 	movi	r5,7
 80451c0:	2901e616 	blt	r5,r4,804595c <___svfprintf_internal_r+0x1d30>
 80451c4:	42000204 	addi	r8,r8,8
 80451c8:	8001f616 	blt	r16,zero,80459a4 <___svfprintf_internal_r+0x1d78>
 80451cc:	1421c83a 	sub	r16,r2,r16
 80451d0:	043cfa0e 	bge	zero,r16,80445bc <__alt_data_end+0xfffdc51c>
 80451d4:	04400404 	movi	r17,16
 80451d8:	d8801f17 	ldw	r2,124(sp)
 80451dc:	8c3edd0e 	bge	r17,r16,8044d54 <__alt_data_end+0xfffdccb4>
 80451e0:	01420174 	movhi	r5,2053
 80451e4:	294c3684 	addi	r5,r5,12506
 80451e8:	d9402c15 	stw	r5,176(sp)
 80451ec:	058001c4 	movi	r22,7
 80451f0:	dd002d17 	ldw	r20,180(sp)
 80451f4:	00000306 	br	8045204 <___svfprintf_internal_r+0x15d8>
 80451f8:	42000204 	addi	r8,r8,8
 80451fc:	843ffc04 	addi	r16,r16,-16
 8045200:	8c3ed70e 	bge	r17,r16,8044d60 <__alt_data_end+0xfffdccc0>
 8045204:	18c00404 	addi	r3,r3,16
 8045208:	10800044 	addi	r2,r2,1
 804520c:	45400015 	stw	r21,0(r8)
 8045210:	44400115 	stw	r17,4(r8)
 8045214:	d8c02015 	stw	r3,128(sp)
 8045218:	d8801f15 	stw	r2,124(sp)
 804521c:	b0bff60e 	bge	r22,r2,80451f8 <__alt_data_end+0xfffdd158>
 8045220:	d9801e04 	addi	r6,sp,120
 8045224:	a00b883a 	mov	r5,r20
 8045228:	9809883a 	mov	r4,r19
 804522c:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045230:	103b651e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045234:	d8c02017 	ldw	r3,128(sp)
 8045238:	d8801f17 	ldw	r2,124(sp)
 804523c:	da000404 	addi	r8,sp,16
 8045240:	003fee06 	br	80451fc <__alt_data_end+0xfffdd15c>
 8045244:	9088703a 	and	r4,r18,r2
 8045248:	203e8d1e 	bne	r4,zero,8044c80 <__alt_data_end+0xfffdcbe0>
 804524c:	dc401f17 	ldw	r17,124(sp)
 8045250:	40800115 	stw	r2,4(r8)
 8045254:	44000015 	stw	r16,0(r8)
 8045258:	8c400044 	addi	r17,r17,1
 804525c:	d8c02015 	stw	r3,128(sp)
 8045260:	dc401f15 	stw	r17,124(sp)
 8045264:	008001c4 	movi	r2,7
 8045268:	147f7f16 	blt	r2,r17,8045068 <__alt_data_end+0xfffdcfc8>
 804526c:	45800204 	addi	r22,r8,8
 8045270:	003eac06 	br	8044d24 <__alt_data_end+0xfffdcc84>
 8045274:	d9402d17 	ldw	r5,180(sp)
 8045278:	d9801e04 	addi	r6,sp,120
 804527c:	9809883a 	mov	r4,r19
 8045280:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045284:	103b501e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045288:	d8c02017 	ldw	r3,128(sp)
 804528c:	dc401f17 	ldw	r17,124(sp)
 8045290:	da000404 	addi	r8,sp,16
 8045294:	003e8406 	br	8044ca8 <__alt_data_end+0xfffdcc08>
 8045298:	d9402d17 	ldw	r5,180(sp)
 804529c:	d9801e04 	addi	r6,sp,120
 80452a0:	9809883a 	mov	r4,r19
 80452a4:	804a6e40 	call	804a6e4 <__ssprint_r>
 80452a8:	103b471e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 80452ac:	d8c02017 	ldw	r3,128(sp)
 80452b0:	dc401f17 	ldw	r17,124(sp)
 80452b4:	dd800404 	addi	r22,sp,16
 80452b8:	003e8606 	br	8044cd4 <__alt_data_end+0xfffdcc34>
 80452bc:	0029883a 	mov	r20,zero
 80452c0:	a5000c04 	addi	r20,r20,48
 80452c4:	dc001dc4 	addi	r16,sp,119
 80452c8:	dd001dc5 	stb	r20,119(sp)
 80452cc:	003f3806 	br	8044fb0 <__alt_data_end+0xfffdcf10>
 80452d0:	d9402d17 	ldw	r5,180(sp)
 80452d4:	d9801e04 	addi	r6,sp,120
 80452d8:	9809883a 	mov	r4,r19
 80452dc:	804a6e40 	call	804a6e4 <__ssprint_r>
 80452e0:	103b391e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 80452e4:	d8c02017 	ldw	r3,128(sp)
 80452e8:	da000404 	addi	r8,sp,16
 80452ec:	003c7306 	br	80444bc <__alt_data_end+0xfffdc41c>
 80452f0:	d9003617 	ldw	r4,216(sp)
 80452f4:	d9403717 	ldw	r5,220(sp)
 80452f8:	da003e15 	stw	r8,248(sp)
 80452fc:	804a4040 	call	804a404 <__fpclassifyd>
 8045300:	da003e17 	ldw	r8,248(sp)
 8045304:	1000bd1e 	bne	r2,zero,80455fc <___svfprintf_internal_r+0x19d0>
 8045308:	008011c4 	movi	r2,71
 804530c:	14411e0e 	bge	r2,r17,8045788 <___svfprintf_internal_r+0x1b5c>
 8045310:	04020174 	movhi	r16,2053
 8045314:	840c2904 	addi	r16,r16,12452
 8045318:	00c000c4 	movi	r3,3
 804531c:	00bfdfc4 	movi	r2,-129
 8045320:	d8c02915 	stw	r3,164(sp)
 8045324:	90a4703a 	and	r18,r18,r2
 8045328:	df002783 	ldbu	fp,158(sp)
 804532c:	d8c02b15 	stw	r3,172(sp)
 8045330:	d8002a15 	stw	zero,168(sp)
 8045334:	d8003215 	stw	zero,200(sp)
 8045338:	003bfa06 	br	8044324 <__alt_data_end+0xfffdc284>
 804533c:	9080100c 	andi	r2,r18,64
 8045340:	d8002785 	stb	zero,158(sp)
 8045344:	10009426 	beq	r2,zero,8045598 <___svfprintf_internal_r+0x196c>
 8045348:	d9402e17 	ldw	r5,184(sp)
 804534c:	d8c02a17 	ldw	r3,168(sp)
 8045350:	002d883a 	mov	r22,zero
 8045354:	28800104 	addi	r2,r5,4
 8045358:	2d00000b 	ldhu	r20,0(r5)
 804535c:	183ec10e 	bge	r3,zero,8044e64 <__alt_data_end+0xfffdcdc4>
 8045360:	a586b03a 	or	r3,r20,r22
 8045364:	d8802e15 	stw	r2,184(sp)
 8045368:	183ec21e 	bne	r3,zero,8044e74 <__alt_data_end+0xfffdcdd4>
 804536c:	0039883a 	mov	fp,zero
 8045370:	0005883a 	mov	r2,zero
 8045374:	003db806 	br	8044a58 <__alt_data_end+0xfffdc9b8>
 8045378:	d8c02e17 	ldw	r3,184(sp)
 804537c:	d9002e17 	ldw	r4,184(sp)
 8045380:	d9402e17 	ldw	r5,184(sp)
 8045384:	18c00017 	ldw	r3,0(r3)
 8045388:	21000117 	ldw	r4,4(r4)
 804538c:	29400204 	addi	r5,r5,8
 8045390:	d8c03615 	stw	r3,216(sp)
 8045394:	d9003715 	stw	r4,220(sp)
 8045398:	d9402e15 	stw	r5,184(sp)
 804539c:	003b5a06 	br	8044108 <__alt_data_end+0xfffdc068>
 80453a0:	9080100c 	andi	r2,r18,64
 80453a4:	10010726 	beq	r2,zero,80457c4 <___svfprintf_internal_r+0x1b98>
 80453a8:	d8802e17 	ldw	r2,184(sp)
 80453ac:	1500000f 	ldh	r20,0(r2)
 80453b0:	10800104 	addi	r2,r2,4
 80453b4:	d8802e15 	stw	r2,184(sp)
 80453b8:	a02dd7fa 	srai	r22,r20,31
 80453bc:	b005883a 	mov	r2,r22
 80453c0:	003b7d06 	br	80441b8 <__alt_data_end+0xfffdc118>
 80453c4:	9080100c 	andi	r2,r18,64
 80453c8:	10010526 	beq	r2,zero,80457e0 <___svfprintf_internal_r+0x1bb4>
 80453cc:	d8c02e17 	ldw	r3,184(sp)
 80453d0:	002d883a 	mov	r22,zero
 80453d4:	1d00000b 	ldhu	r20,0(r3)
 80453d8:	18c00104 	addi	r3,r3,4
 80453dc:	d8c02e15 	stw	r3,184(sp)
 80453e0:	003ce206 	br	804476c <__alt_data_end+0xfffdc6cc>
 80453e4:	bc400007 	ldb	r17,0(r23)
 80453e8:	003a6506 	br	8043d80 <__alt_data_end+0xfffdbce0>
 80453ec:	9080040c 	andi	r2,r18,16
 80453f0:	10010126 	beq	r2,zero,80457f8 <___svfprintf_internal_r+0x1bcc>
 80453f4:	d8c02e17 	ldw	r3,184(sp)
 80453f8:	d9002f17 	ldw	r4,188(sp)
 80453fc:	18800017 	ldw	r2,0(r3)
 8045400:	18c00104 	addi	r3,r3,4
 8045404:	d8c02e15 	stw	r3,184(sp)
 8045408:	11000015 	stw	r4,0(r2)
 804540c:	003a3206 	br	8043cd8 <__alt_data_end+0xfffdbc38>
 8045410:	d9002a17 	ldw	r4,168(sp)
 8045414:	d8002785 	stb	zero,158(sp)
 8045418:	203d8d16 	blt	r4,zero,8044a50 <__alt_data_end+0xfffdc9b0>
 804541c:	00bfdfc4 	movi	r2,-129
 8045420:	90a4703a 	and	r18,r18,r2
 8045424:	003ad506 	br	8043f7c <__alt_data_end+0xfffdbedc>
 8045428:	01420174 	movhi	r5,2053
 804542c:	294c3684 	addi	r5,r5,12506
 8045430:	d9402c15 	stw	r5,176(sp)
 8045434:	d9402c17 	ldw	r5,176(sp)
 8045438:	1c47883a 	add	r3,r3,r17
 804543c:	10800044 	addi	r2,r2,1
 8045440:	41400015 	stw	r5,0(r8)
 8045444:	44400115 	stw	r17,4(r8)
 8045448:	d8c02015 	stw	r3,128(sp)
 804544c:	d8801f15 	stw	r2,124(sp)
 8045450:	010001c4 	movi	r4,7
 8045454:	20bf3016 	blt	r4,r2,8045118 <__alt_data_end+0xfffdd078>
 8045458:	42000204 	addi	r8,r8,8
 804545c:	003f3506 	br	8045134 <__alt_data_end+0xfffdd094>
 8045460:	01020174 	movhi	r4,2053
 8045464:	210c3684 	addi	r4,r4,12506
 8045468:	d9002c15 	stw	r4,176(sp)
 804546c:	003c3c06 	br	8044560 <__alt_data_end+0xfffdc4c0>
 8045470:	d9402d17 	ldw	r5,180(sp)
 8045474:	d9801e04 	addi	r6,sp,120
 8045478:	9809883a 	mov	r4,r19
 804547c:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045480:	103ad11e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045484:	d8c02017 	ldw	r3,128(sp)
 8045488:	da000404 	addi	r8,sp,16
 804548c:	003d9306 	br	8044adc <__alt_data_end+0xfffdca3c>
 8045490:	d8801f17 	ldw	r2,124(sp)
 8045494:	01420174 	movhi	r5,2053
 8045498:	01000044 	movi	r4,1
 804549c:	18c00044 	addi	r3,r3,1
 80454a0:	10800044 	addi	r2,r2,1
 80454a4:	294c3604 	addi	r5,r5,12504
 80454a8:	41000115 	stw	r4,4(r8)
 80454ac:	41400015 	stw	r5,0(r8)
 80454b0:	d8c02015 	stw	r3,128(sp)
 80454b4:	d8801f15 	stw	r2,124(sp)
 80454b8:	010001c4 	movi	r4,7
 80454bc:	2080b516 	blt	r4,r2,8045794 <___svfprintf_internal_r+0x1b68>
 80454c0:	42000204 	addi	r8,r8,8
 80454c4:	8800041e 	bne	r17,zero,80454d8 <___svfprintf_internal_r+0x18ac>
 80454c8:	d8803317 	ldw	r2,204(sp)
 80454cc:	1000021e 	bne	r2,zero,80454d8 <___svfprintf_internal_r+0x18ac>
 80454d0:	9080004c 	andi	r2,r18,1
 80454d4:	103c3926 	beq	r2,zero,80445bc <__alt_data_end+0xfffdc51c>
 80454d8:	d9003817 	ldw	r4,224(sp)
 80454dc:	d8801f17 	ldw	r2,124(sp)
 80454e0:	d9403417 	ldw	r5,208(sp)
 80454e4:	20c7883a 	add	r3,r4,r3
 80454e8:	10800044 	addi	r2,r2,1
 80454ec:	41000115 	stw	r4,4(r8)
 80454f0:	41400015 	stw	r5,0(r8)
 80454f4:	d8c02015 	stw	r3,128(sp)
 80454f8:	d8801f15 	stw	r2,124(sp)
 80454fc:	010001c4 	movi	r4,7
 8045500:	20818016 	blt	r4,r2,8045b04 <___svfprintf_internal_r+0x1ed8>
 8045504:	42000204 	addi	r8,r8,8
 8045508:	0463c83a 	sub	r17,zero,r17
 804550c:	0440cb0e 	bge	zero,r17,804583c <___svfprintf_internal_r+0x1c10>
 8045510:	05800404 	movi	r22,16
 8045514:	b440e80e 	bge	r22,r17,80458b8 <___svfprintf_internal_r+0x1c8c>
 8045518:	01420174 	movhi	r5,2053
 804551c:	294c3684 	addi	r5,r5,12506
 8045520:	d9402c15 	stw	r5,176(sp)
 8045524:	070001c4 	movi	fp,7
 8045528:	dd002d17 	ldw	r20,180(sp)
 804552c:	00000306 	br	804553c <___svfprintf_internal_r+0x1910>
 8045530:	42000204 	addi	r8,r8,8
 8045534:	8c7ffc04 	addi	r17,r17,-16
 8045538:	b440e20e 	bge	r22,r17,80458c4 <___svfprintf_internal_r+0x1c98>
 804553c:	18c00404 	addi	r3,r3,16
 8045540:	10800044 	addi	r2,r2,1
 8045544:	45400015 	stw	r21,0(r8)
 8045548:	45800115 	stw	r22,4(r8)
 804554c:	d8c02015 	stw	r3,128(sp)
 8045550:	d8801f15 	stw	r2,124(sp)
 8045554:	e0bff60e 	bge	fp,r2,8045530 <__alt_data_end+0xfffdd490>
 8045558:	d9801e04 	addi	r6,sp,120
 804555c:	a00b883a 	mov	r5,r20
 8045560:	9809883a 	mov	r4,r19
 8045564:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045568:	103a971e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 804556c:	d8c02017 	ldw	r3,128(sp)
 8045570:	d8801f17 	ldw	r2,124(sp)
 8045574:	da000404 	addi	r8,sp,16
 8045578:	003fee06 	br	8045534 <__alt_data_end+0xfffdd494>
 804557c:	d9002e17 	ldw	r4,184(sp)
 8045580:	d9402a17 	ldw	r5,168(sp)
 8045584:	002d883a 	mov	r22,zero
 8045588:	20800104 	addi	r2,r4,4
 804558c:	25000017 	ldw	r20,0(r4)
 8045590:	283e7d0e 	bge	r5,zero,8044f88 <__alt_data_end+0xfffdcee8>
 8045594:	003eda06 	br	8045100 <__alt_data_end+0xfffdd060>
 8045598:	d9002e17 	ldw	r4,184(sp)
 804559c:	d9402a17 	ldw	r5,168(sp)
 80455a0:	002d883a 	mov	r22,zero
 80455a4:	20800104 	addi	r2,r4,4
 80455a8:	25000017 	ldw	r20,0(r4)
 80455ac:	283e2d0e 	bge	r5,zero,8044e64 <__alt_data_end+0xfffdcdc4>
 80455b0:	003f6b06 	br	8045360 <__alt_data_end+0xfffdd2c0>
 80455b4:	d8c02e15 	stw	r3,184(sp)
 80455b8:	0039883a 	mov	fp,zero
 80455bc:	003ed206 	br	8045108 <__alt_data_end+0xfffdd068>
 80455c0:	bc400043 	ldbu	r17,1(r23)
 80455c4:	84000814 	ori	r16,r16,32
 80455c8:	bdc00044 	addi	r23,r23,1
 80455cc:	8c403fcc 	andi	r17,r17,255
 80455d0:	8c40201c 	xori	r17,r17,128
 80455d4:	8c7fe004 	addi	r17,r17,-128
 80455d8:	0039e906 	br	8043d80 <__alt_data_end+0xfffdbce0>
 80455dc:	d9402d17 	ldw	r5,180(sp)
 80455e0:	d9801e04 	addi	r6,sp,120
 80455e4:	9809883a 	mov	r4,r19
 80455e8:	804a6e40 	call	804a6e4 <__ssprint_r>
 80455ec:	103a761e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 80455f0:	d8c02017 	ldw	r3,128(sp)
 80455f4:	da000404 	addi	r8,sp,16
 80455f8:	003d4a06 	br	8044b24 <__alt_data_end+0xfffdca84>
 80455fc:	d9002a17 	ldw	r4,168(sp)
 8045600:	05bff7c4 	movi	r22,-33
 8045604:	00bfffc4 	movi	r2,-1
 8045608:	8dac703a 	and	r22,r17,r22
 804560c:	20806a26 	beq	r4,r2,80457b8 <___svfprintf_internal_r+0x1b8c>
 8045610:	008011c4 	movi	r2,71
 8045614:	b0813726 	beq	r22,r2,8045af4 <___svfprintf_internal_r+0x1ec8>
 8045618:	d9003717 	ldw	r4,220(sp)
 804561c:	90c04014 	ori	r3,r18,256
 8045620:	d8c02c15 	stw	r3,176(sp)
 8045624:	20015d16 	blt	r4,zero,8045b9c <___svfprintf_internal_r+0x1f70>
 8045628:	dd003717 	ldw	r20,220(sp)
 804562c:	d8002905 	stb	zero,164(sp)
 8045630:	00801984 	movi	r2,102
 8045634:	88814026 	beq	r17,r2,8045b38 <___svfprintf_internal_r+0x1f0c>
 8045638:	00801184 	movi	r2,70
 804563c:	88817126 	beq	r17,r2,8045c04 <___svfprintf_internal_r+0x1fd8>
 8045640:	00801144 	movi	r2,69
 8045644:	b0816226 	beq	r22,r2,8045bd0 <___svfprintf_internal_r+0x1fa4>
 8045648:	d8c02a17 	ldw	r3,168(sp)
 804564c:	d8802104 	addi	r2,sp,132
 8045650:	d8800315 	stw	r2,12(sp)
 8045654:	d9403617 	ldw	r5,216(sp)
 8045658:	d8802504 	addi	r2,sp,148
 804565c:	d8800215 	stw	r2,8(sp)
 8045660:	d8802604 	addi	r2,sp,152
 8045664:	d8c00015 	stw	r3,0(sp)
 8045668:	d8800115 	stw	r2,4(sp)
 804566c:	01c00084 	movi	r7,2
 8045670:	a00d883a 	mov	r6,r20
 8045674:	9809883a 	mov	r4,r19
 8045678:	d8c03d15 	stw	r3,244(sp)
 804567c:	da003e15 	stw	r8,248(sp)
 8045680:	80461100 	call	8046110 <_dtoa_r>
 8045684:	1021883a 	mov	r16,r2
 8045688:	008019c4 	movi	r2,103
 804568c:	d8c03d17 	ldw	r3,244(sp)
 8045690:	da003e17 	ldw	r8,248(sp)
 8045694:	8880e726 	beq	r17,r2,8045a34 <___svfprintf_internal_r+0x1e08>
 8045698:	008011c4 	movi	r2,71
 804569c:	8880d426 	beq	r17,r2,80459f0 <___svfprintf_internal_r+0x1dc4>
 80456a0:	80f9883a 	add	fp,r16,r3
 80456a4:	d9003617 	ldw	r4,216(sp)
 80456a8:	000d883a 	mov	r6,zero
 80456ac:	000f883a 	mov	r7,zero
 80456b0:	a00b883a 	mov	r5,r20
 80456b4:	da003e15 	stw	r8,248(sp)
 80456b8:	804deb00 	call	804deb0 <__eqdf2>
 80456bc:	da003e17 	ldw	r8,248(sp)
 80456c0:	1000e426 	beq	r2,zero,8045a54 <___svfprintf_internal_r+0x1e28>
 80456c4:	d8802117 	ldw	r2,132(sp)
 80456c8:	1700062e 	bgeu	r2,fp,80456e4 <___svfprintf_internal_r+0x1ab8>
 80456cc:	01000c04 	movi	r4,48
 80456d0:	10c00044 	addi	r3,r2,1
 80456d4:	d8c02115 	stw	r3,132(sp)
 80456d8:	11000005 	stb	r4,0(r2)
 80456dc:	d8802117 	ldw	r2,132(sp)
 80456e0:	173ffb36 	bltu	r2,fp,80456d0 <__alt_data_end+0xfffdd630>
 80456e4:	1405c83a 	sub	r2,r2,r16
 80456e8:	d8803315 	stw	r2,204(sp)
 80456ec:	008011c4 	movi	r2,71
 80456f0:	b080c526 	beq	r22,r2,8045a08 <___svfprintf_internal_r+0x1ddc>
 80456f4:	00801944 	movi	r2,101
 80456f8:	1441d80e 	bge	r2,r17,8045e5c <___svfprintf_internal_r+0x2230>
 80456fc:	d8c02617 	ldw	r3,152(sp)
 8045700:	00801984 	movi	r2,102
 8045704:	d8c03215 	stw	r3,200(sp)
 8045708:	88813426 	beq	r17,r2,8045bdc <___svfprintf_internal_r+0x1fb0>
 804570c:	d8c03217 	ldw	r3,200(sp)
 8045710:	d9003317 	ldw	r4,204(sp)
 8045714:	19012516 	blt	r3,r4,8045bac <___svfprintf_internal_r+0x1f80>
 8045718:	9480004c 	andi	r18,r18,1
 804571c:	9001841e 	bne	r18,zero,8045d30 <___svfprintf_internal_r+0x2104>
 8045720:	1805883a 	mov	r2,r3
 8045724:	1801cb16 	blt	r3,zero,8045e54 <___svfprintf_internal_r+0x2228>
 8045728:	d8c03217 	ldw	r3,200(sp)
 804572c:	044019c4 	movi	r17,103
 8045730:	d8c02b15 	stw	r3,172(sp)
 8045734:	df002907 	ldb	fp,164(sp)
 8045738:	e000a61e 	bne	fp,zero,80459d4 <___svfprintf_internal_r+0x1da8>
 804573c:	df002783 	ldbu	fp,158(sp)
 8045740:	d8802915 	stw	r2,164(sp)
 8045744:	dc802c17 	ldw	r18,176(sp)
 8045748:	d8002a15 	stw	zero,168(sp)
 804574c:	003af506 	br	8044324 <__alt_data_end+0xfffdc284>
 8045750:	04020174 	movhi	r16,2053
 8045754:	840c2604 	addi	r16,r16,12440
 8045758:	003a7e06 	br	8044154 <__alt_data_end+0xfffdc0b4>
 804575c:	d9003917 	ldw	r4,228(sp)
 8045760:	04001004 	movi	r16,64
 8045764:	800b883a 	mov	r5,r16
 8045768:	80482740 	call	8048274 <_malloc_r>
 804576c:	d9002d17 	ldw	r4,180(sp)
 8045770:	20800015 	stw	r2,0(r4)
 8045774:	20800415 	stw	r2,16(r4)
 8045778:	1001d026 	beq	r2,zero,8045ebc <___svfprintf_internal_r+0x2290>
 804577c:	d8802d17 	ldw	r2,180(sp)
 8045780:	14000515 	stw	r16,20(r2)
 8045784:	00394406 	br	8043c98 <__alt_data_end+0xfffdbbf8>
 8045788:	04020174 	movhi	r16,2053
 804578c:	840c2804 	addi	r16,r16,12448
 8045790:	003ee106 	br	8045318 <__alt_data_end+0xfffdd278>
 8045794:	d9402d17 	ldw	r5,180(sp)
 8045798:	d9801e04 	addi	r6,sp,120
 804579c:	9809883a 	mov	r4,r19
 80457a0:	804a6e40 	call	804a6e4 <__ssprint_r>
 80457a4:	103a081e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 80457a8:	dc402617 	ldw	r17,152(sp)
 80457ac:	d8c02017 	ldw	r3,128(sp)
 80457b0:	da000404 	addi	r8,sp,16
 80457b4:	003f4306 	br	80454c4 <__alt_data_end+0xfffdd424>
 80457b8:	01400184 	movi	r5,6
 80457bc:	d9402a15 	stw	r5,168(sp)
 80457c0:	003f9506 	br	8045618 <__alt_data_end+0xfffdd578>
 80457c4:	d8c02e17 	ldw	r3,184(sp)
 80457c8:	1d000017 	ldw	r20,0(r3)
 80457cc:	18c00104 	addi	r3,r3,4
 80457d0:	d8c02e15 	stw	r3,184(sp)
 80457d4:	a02dd7fa 	srai	r22,r20,31
 80457d8:	b005883a 	mov	r2,r22
 80457dc:	003a7606 	br	80441b8 <__alt_data_end+0xfffdc118>
 80457e0:	d9002e17 	ldw	r4,184(sp)
 80457e4:	002d883a 	mov	r22,zero
 80457e8:	25000017 	ldw	r20,0(r4)
 80457ec:	21000104 	addi	r4,r4,4
 80457f0:	d9002e15 	stw	r4,184(sp)
 80457f4:	003bdd06 	br	804476c <__alt_data_end+0xfffdc6cc>
 80457f8:	9480100c 	andi	r18,r18,64
 80457fc:	90006e26 	beq	r18,zero,80459b8 <___svfprintf_internal_r+0x1d8c>
 8045800:	d9402e17 	ldw	r5,184(sp)
 8045804:	d8c02f17 	ldw	r3,188(sp)
 8045808:	28800017 	ldw	r2,0(r5)
 804580c:	29400104 	addi	r5,r5,4
 8045810:	d9402e15 	stw	r5,184(sp)
 8045814:	10c0000d 	sth	r3,0(r2)
 8045818:	00392f06 	br	8043cd8 <__alt_data_end+0xfffdbc38>
 804581c:	d9402d17 	ldw	r5,180(sp)
 8045820:	d9801e04 	addi	r6,sp,120
 8045824:	9809883a 	mov	r4,r19
 8045828:	804a6e40 	call	804a6e4 <__ssprint_r>
 804582c:	1039e61e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045830:	d8c02017 	ldw	r3,128(sp)
 8045834:	d8801f17 	ldw	r2,124(sp)
 8045838:	da000404 	addi	r8,sp,16
 804583c:	d9403317 	ldw	r5,204(sp)
 8045840:	10800044 	addi	r2,r2,1
 8045844:	44000015 	stw	r16,0(r8)
 8045848:	28c7883a 	add	r3,r5,r3
 804584c:	003b5506 	br	80445a4 <__alt_data_end+0xfffdc504>
 8045850:	8009883a 	mov	r4,r16
 8045854:	df003e15 	stw	fp,248(sp)
 8045858:	8043b940 	call	8043b94 <strlen>
 804585c:	d8802b15 	stw	r2,172(sp)
 8045860:	da003e17 	ldw	r8,248(sp)
 8045864:	103c160e 	bge	r2,zero,80448c0 <__alt_data_end+0xfffdc820>
 8045868:	0005883a 	mov	r2,zero
 804586c:	003c1406 	br	80448c0 <__alt_data_end+0xfffdc820>
 8045870:	00bfffc4 	movi	r2,-1
 8045874:	0039d906 	br	8043fdc <__alt_data_end+0xfffdbf3c>
 8045878:	01020174 	movhi	r4,2053
 804587c:	210c3a84 	addi	r4,r4,12522
 8045880:	d9003515 	stw	r4,212(sp)
 8045884:	003ae406 	br	8044418 <__alt_data_end+0xfffdc378>
 8045888:	013fffc4 	movi	r4,-1
 804588c:	0039fa06 	br	8044078 <__alt_data_end+0xfffdbfd8>
 8045890:	d9402d17 	ldw	r5,180(sp)
 8045894:	d9801e04 	addi	r6,sp,120
 8045898:	9809883a 	mov	r4,r19
 804589c:	804a6e40 	call	804a6e4 <__ssprint_r>
 80458a0:	1039c91e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 80458a4:	d8c02017 	ldw	r3,128(sp)
 80458a8:	da000404 	addi	r8,sp,16
 80458ac:	003d8406 	br	8044ec0 <__alt_data_end+0xfffdce20>
 80458b0:	0023883a 	mov	r17,zero
 80458b4:	003d8306 	br	8044ec4 <__alt_data_end+0xfffdce24>
 80458b8:	01020174 	movhi	r4,2053
 80458bc:	210c3684 	addi	r4,r4,12506
 80458c0:	d9002c15 	stw	r4,176(sp)
 80458c4:	d9002c17 	ldw	r4,176(sp)
 80458c8:	1c47883a 	add	r3,r3,r17
 80458cc:	10800044 	addi	r2,r2,1
 80458d0:	41000015 	stw	r4,0(r8)
 80458d4:	44400115 	stw	r17,4(r8)
 80458d8:	d8c02015 	stw	r3,128(sp)
 80458dc:	d8801f15 	stw	r2,124(sp)
 80458e0:	010001c4 	movi	r4,7
 80458e4:	20bfcd16 	blt	r4,r2,804581c <__alt_data_end+0xfffdd77c>
 80458e8:	42000204 	addi	r8,r8,8
 80458ec:	003fd306 	br	804583c <__alt_data_end+0xfffdd79c>
 80458f0:	d9402d17 	ldw	r5,180(sp)
 80458f4:	d9801e04 	addi	r6,sp,120
 80458f8:	9809883a 	mov	r4,r19
 80458fc:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045900:	1039b11e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045904:	d8802617 	ldw	r2,152(sp)
 8045908:	d8c02017 	ldw	r3,128(sp)
 804590c:	da000404 	addi	r8,sp,16
 8045910:	003e1c06 	br	8045184 <__alt_data_end+0xfffdd0e4>
 8045914:	d8802a17 	ldw	r2,168(sp)
 8045918:	00c00184 	movi	r3,6
 804591c:	1880012e 	bgeu	r3,r2,8045924 <___svfprintf_internal_r+0x1cf8>
 8045920:	1805883a 	mov	r2,r3
 8045924:	d8802b15 	stw	r2,172(sp)
 8045928:	1000f316 	blt	r2,zero,8045cf8 <___svfprintf_internal_r+0x20cc>
 804592c:	04020174 	movhi	r16,2053
 8045930:	d8802915 	stw	r2,164(sp)
 8045934:	dd002e15 	stw	r20,184(sp)
 8045938:	d8002a15 	stw	zero,168(sp)
 804593c:	d8003215 	stw	zero,200(sp)
 8045940:	840c3404 	addi	r16,r16,12496
 8045944:	0039883a 	mov	fp,zero
 8045948:	003a7d06 	br	8044340 <__alt_data_end+0xfffdc2a0>
 804594c:	01020174 	movhi	r4,2053
 8045950:	210c3a84 	addi	r4,r4,12522
 8045954:	d9003515 	stw	r4,212(sp)
 8045958:	003b3d06 	br	8044650 <__alt_data_end+0xfffdc5b0>
 804595c:	d9402d17 	ldw	r5,180(sp)
 8045960:	d9801e04 	addi	r6,sp,120
 8045964:	9809883a 	mov	r4,r19
 8045968:	804a6e40 	call	804a6e4 <__ssprint_r>
 804596c:	1039961e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045970:	d8802617 	ldw	r2,152(sp)
 8045974:	d9403317 	ldw	r5,204(sp)
 8045978:	d8c02017 	ldw	r3,128(sp)
 804597c:	da000404 	addi	r8,sp,16
 8045980:	2885c83a 	sub	r2,r5,r2
 8045984:	003e1006 	br	80451c8 <__alt_data_end+0xfffdd128>
 8045988:	00800044 	movi	r2,1
 804598c:	10803fcc 	andi	r2,r2,255
 8045990:	00c00044 	movi	r3,1
 8045994:	10fa1026 	beq	r2,r3,80441d8 <__alt_data_end+0xfffdc138>
 8045998:	00c00084 	movi	r3,2
 804599c:	10fb8226 	beq	r2,r3,80447a8 <__alt_data_end+0xfffdc708>
 80459a0:	003a4206 	br	80442ac <__alt_data_end+0xfffdc20c>
 80459a4:	0021883a 	mov	r16,zero
 80459a8:	003e0806 	br	80451cc <__alt_data_end+0xfffdd12c>
 80459ac:	07000b44 	movi	fp,45
 80459b0:	df002785 	stb	fp,158(sp)
 80459b4:	0039e306 	br	8044144 <__alt_data_end+0xfffdc0a4>
 80459b8:	d9002e17 	ldw	r4,184(sp)
 80459bc:	d9402f17 	ldw	r5,188(sp)
 80459c0:	20800017 	ldw	r2,0(r4)
 80459c4:	21000104 	addi	r4,r4,4
 80459c8:	d9002e15 	stw	r4,184(sp)
 80459cc:	11400015 	stw	r5,0(r2)
 80459d0:	0038c106 	br	8043cd8 <__alt_data_end+0xfffdbc38>
 80459d4:	00c00b44 	movi	r3,45
 80459d8:	d8c02785 	stb	r3,158(sp)
 80459dc:	d8802915 	stw	r2,164(sp)
 80459e0:	dc802c17 	ldw	r18,176(sp)
 80459e4:	d8002a15 	stw	zero,168(sp)
 80459e8:	07000b44 	movi	fp,45
 80459ec:	003a5106 	br	8044334 <__alt_data_end+0xfffdc294>
 80459f0:	9080004c 	andi	r2,r18,1
 80459f4:	1000941e 	bne	r2,zero,8045c48 <___svfprintf_internal_r+0x201c>
 80459f8:	d8802117 	ldw	r2,132(sp)
 80459fc:	1405c83a 	sub	r2,r2,r16
 8045a00:	d8803315 	stw	r2,204(sp)
 8045a04:	b441151e 	bne	r22,r17,8045e5c <___svfprintf_internal_r+0x2230>
 8045a08:	dd802617 	ldw	r22,152(sp)
 8045a0c:	00bfff44 	movi	r2,-3
 8045a10:	b0801a16 	blt	r22,r2,8045a7c <___svfprintf_internal_r+0x1e50>
 8045a14:	d9402a17 	ldw	r5,168(sp)
 8045a18:	2d801816 	blt	r5,r22,8045a7c <___svfprintf_internal_r+0x1e50>
 8045a1c:	dd803215 	stw	r22,200(sp)
 8045a20:	003f3a06 	br	804570c <__alt_data_end+0xfffdd66c>
 8045a24:	1025883a 	mov	r18,r2
 8045a28:	0039883a 	mov	fp,zero
 8045a2c:	00800084 	movi	r2,2
 8045a30:	003fd606 	br	804598c <__alt_data_end+0xfffdd8ec>
 8045a34:	9080004c 	andi	r2,r18,1
 8045a38:	103f191e 	bne	r2,zero,80456a0 <__alt_data_end+0xfffdd600>
 8045a3c:	d8802117 	ldw	r2,132(sp)
 8045a40:	003f2806 	br	80456e4 <__alt_data_end+0xfffdd644>
 8045a44:	01020174 	movhi	r4,2053
 8045a48:	210c3684 	addi	r4,r4,12506
 8045a4c:	d9002c15 	stw	r4,176(sp)
 8045a50:	003c7c06 	br	8044c44 <__alt_data_end+0xfffdcba4>
 8045a54:	e005883a 	mov	r2,fp
 8045a58:	003f2206 	br	80456e4 <__alt_data_end+0xfffdd644>
 8045a5c:	d9002a17 	ldw	r4,168(sp)
 8045a60:	df002783 	ldbu	fp,158(sp)
 8045a64:	dd002e15 	stw	r20,184(sp)
 8045a68:	d9002915 	stw	r4,164(sp)
 8045a6c:	d9002b15 	stw	r4,172(sp)
 8045a70:	d8002a15 	stw	zero,168(sp)
 8045a74:	d8003215 	stw	zero,200(sp)
 8045a78:	003a2a06 	br	8044324 <__alt_data_end+0xfffdc284>
 8045a7c:	8c7fff84 	addi	r17,r17,-2
 8045a80:	b5bfffc4 	addi	r22,r22,-1
 8045a84:	dd802615 	stw	r22,152(sp)
 8045a88:	dc4022c5 	stb	r17,139(sp)
 8045a8c:	b000c316 	blt	r22,zero,8045d9c <___svfprintf_internal_r+0x2170>
 8045a90:	00800ac4 	movi	r2,43
 8045a94:	d8802305 	stb	r2,140(sp)
 8045a98:	00800244 	movi	r2,9
 8045a9c:	15806e16 	blt	r2,r22,8045c58 <___svfprintf_internal_r+0x202c>
 8045aa0:	00800c04 	movi	r2,48
 8045aa4:	b5800c04 	addi	r22,r22,48
 8045aa8:	d8802345 	stb	r2,141(sp)
 8045aac:	dd802385 	stb	r22,142(sp)
 8045ab0:	d88023c4 	addi	r2,sp,143
 8045ab4:	df0022c4 	addi	fp,sp,139
 8045ab8:	d8c03317 	ldw	r3,204(sp)
 8045abc:	1739c83a 	sub	fp,r2,fp
 8045ac0:	d9003317 	ldw	r4,204(sp)
 8045ac4:	e0c7883a 	add	r3,fp,r3
 8045ac8:	df003b15 	stw	fp,236(sp)
 8045acc:	d8c02b15 	stw	r3,172(sp)
 8045ad0:	00800044 	movi	r2,1
 8045ad4:	1100b70e 	bge	r2,r4,8045db4 <___svfprintf_internal_r+0x2188>
 8045ad8:	d8c02b17 	ldw	r3,172(sp)
 8045adc:	18c00044 	addi	r3,r3,1
 8045ae0:	d8c02b15 	stw	r3,172(sp)
 8045ae4:	1805883a 	mov	r2,r3
 8045ae8:	1800b016 	blt	r3,zero,8045dac <___svfprintf_internal_r+0x2180>
 8045aec:	d8003215 	stw	zero,200(sp)
 8045af0:	003f1006 	br	8045734 <__alt_data_end+0xfffdd694>
 8045af4:	d8802a17 	ldw	r2,168(sp)
 8045af8:	103ec71e 	bne	r2,zero,8045618 <__alt_data_end+0xfffdd578>
 8045afc:	dc002a15 	stw	r16,168(sp)
 8045b00:	003ec506 	br	8045618 <__alt_data_end+0xfffdd578>
 8045b04:	d9402d17 	ldw	r5,180(sp)
 8045b08:	d9801e04 	addi	r6,sp,120
 8045b0c:	9809883a 	mov	r4,r19
 8045b10:	804a6e40 	call	804a6e4 <__ssprint_r>
 8045b14:	10392c1e 	bne	r2,zero,8043fc8 <__alt_data_end+0xfffdbf28>
 8045b18:	dc402617 	ldw	r17,152(sp)
 8045b1c:	d8c02017 	ldw	r3,128(sp)
 8045b20:	d8801f17 	ldw	r2,124(sp)
 8045b24:	da000404 	addi	r8,sp,16
 8045b28:	003e7706 	br	8045508 <__alt_data_end+0xfffdd468>
 8045b2c:	182f883a 	mov	r23,r3
 8045b30:	d8002a15 	stw	zero,168(sp)
 8045b34:	00389306 	br	8043d84 <__alt_data_end+0xfffdbce4>
 8045b38:	d8c02a17 	ldw	r3,168(sp)
 8045b3c:	d8802104 	addi	r2,sp,132
 8045b40:	d8800315 	stw	r2,12(sp)
 8045b44:	d9403617 	ldw	r5,216(sp)
 8045b48:	d8802504 	addi	r2,sp,148
 8045b4c:	d8800215 	stw	r2,8(sp)
 8045b50:	d8802604 	addi	r2,sp,152
 8045b54:	d8c00015 	stw	r3,0(sp)
 8045b58:	9809883a 	mov	r4,r19
 8045b5c:	d8800115 	stw	r2,4(sp)
 8045b60:	01c000c4 	movi	r7,3
 8045b64:	a00d883a 	mov	r6,r20
 8045b68:	da003e15 	stw	r8,248(sp)
 8045b6c:	80461100 	call	8046110 <_dtoa_r>
 8045b70:	d9002a17 	ldw	r4,168(sp)
 8045b74:	da003e17 	ldw	r8,248(sp)
 8045b78:	1021883a 	mov	r16,r2
 8045b7c:	1139883a 	add	fp,r2,r4
 8045b80:	2007883a 	mov	r3,r4
 8045b84:	81000007 	ldb	r4,0(r16)
 8045b88:	00800c04 	movi	r2,48
 8045b8c:	20806f26 	beq	r4,r2,8045d4c <___svfprintf_internal_r+0x2120>
 8045b90:	d8c02617 	ldw	r3,152(sp)
 8045b94:	e0f9883a 	add	fp,fp,r3
 8045b98:	003ec206 	br	80456a4 <__alt_data_end+0xfffdd604>
 8045b9c:	00c00b44 	movi	r3,45
 8045ba0:	2520003c 	xorhi	r20,r4,32768
 8045ba4:	d8c02905 	stb	r3,164(sp)
 8045ba8:	003ea106 	br	8045630 <__alt_data_end+0xfffdd590>
 8045bac:	d8c03217 	ldw	r3,200(sp)
 8045bb0:	00c0890e 	bge	zero,r3,8045dd8 <___svfprintf_internal_r+0x21ac>
 8045bb4:	00800044 	movi	r2,1
 8045bb8:	d9003317 	ldw	r4,204(sp)
 8045bbc:	1105883a 	add	r2,r2,r4
 8045bc0:	d8802b15 	stw	r2,172(sp)
 8045bc4:	10005f16 	blt	r2,zero,8045d44 <___svfprintf_internal_r+0x2118>
 8045bc8:	044019c4 	movi	r17,103
 8045bcc:	003ed906 	br	8045734 <__alt_data_end+0xfffdd694>
 8045bd0:	d9002a17 	ldw	r4,168(sp)
 8045bd4:	20c00044 	addi	r3,r4,1
 8045bd8:	003e9c06 	br	804564c <__alt_data_end+0xfffdd5ac>
 8045bdc:	d9002a17 	ldw	r4,168(sp)
 8045be0:	00c0680e 	bge	zero,r3,8045d84 <___svfprintf_internal_r+0x2158>
 8045be4:	2000461e 	bne	r4,zero,8045d00 <___svfprintf_internal_r+0x20d4>
 8045be8:	9480004c 	andi	r18,r18,1
 8045bec:	9000441e 	bne	r18,zero,8045d00 <___svfprintf_internal_r+0x20d4>
 8045bf0:	1805883a 	mov	r2,r3
 8045bf4:	1800a116 	blt	r3,zero,8045e7c <___svfprintf_internal_r+0x2250>
 8045bf8:	d8c03217 	ldw	r3,200(sp)
 8045bfc:	d8c02b15 	stw	r3,172(sp)
 8045c00:	003ecc06 	br	8045734 <__alt_data_end+0xfffdd694>
 8045c04:	d9402a17 	ldw	r5,168(sp)
 8045c08:	d8802104 	addi	r2,sp,132
 8045c0c:	d8800315 	stw	r2,12(sp)
 8045c10:	d9400015 	stw	r5,0(sp)
 8045c14:	d8802504 	addi	r2,sp,148
 8045c18:	d9403617 	ldw	r5,216(sp)
 8045c1c:	d8800215 	stw	r2,8(sp)
 8045c20:	d8802604 	addi	r2,sp,152
 8045c24:	d8800115 	stw	r2,4(sp)
 8045c28:	01c000c4 	movi	r7,3
 8045c2c:	a00d883a 	mov	r6,r20
 8045c30:	9809883a 	mov	r4,r19
 8045c34:	da003e15 	stw	r8,248(sp)
 8045c38:	80461100 	call	8046110 <_dtoa_r>
 8045c3c:	d8c02a17 	ldw	r3,168(sp)
 8045c40:	da003e17 	ldw	r8,248(sp)
 8045c44:	1021883a 	mov	r16,r2
 8045c48:	00801184 	movi	r2,70
 8045c4c:	80f9883a 	add	fp,r16,r3
 8045c50:	88bfcc26 	beq	r17,r2,8045b84 <__alt_data_end+0xfffddae4>
 8045c54:	003e9306 	br	80456a4 <__alt_data_end+0xfffdd604>
 8045c58:	df0022c4 	addi	fp,sp,139
 8045c5c:	dc002a15 	stw	r16,168(sp)
 8045c60:	9829883a 	mov	r20,r19
 8045c64:	e021883a 	mov	r16,fp
 8045c68:	4027883a 	mov	r19,r8
 8045c6c:	b009883a 	mov	r4,r22
 8045c70:	01400284 	movi	r5,10
 8045c74:	80437840 	call	8043784 <__modsi3>
 8045c78:	10800c04 	addi	r2,r2,48
 8045c7c:	843fffc4 	addi	r16,r16,-1
 8045c80:	b009883a 	mov	r4,r22
 8045c84:	01400284 	movi	r5,10
 8045c88:	80800005 	stb	r2,0(r16)
 8045c8c:	80437000 	call	8043700 <__divsi3>
 8045c90:	102d883a 	mov	r22,r2
 8045c94:	00800244 	movi	r2,9
 8045c98:	15bff416 	blt	r2,r22,8045c6c <__alt_data_end+0xfffddbcc>
 8045c9c:	9811883a 	mov	r8,r19
 8045ca0:	b0800c04 	addi	r2,r22,48
 8045ca4:	a027883a 	mov	r19,r20
 8045ca8:	8029883a 	mov	r20,r16
 8045cac:	a17fffc4 	addi	r5,r20,-1
 8045cb0:	a0bfffc5 	stb	r2,-1(r20)
 8045cb4:	dc002a17 	ldw	r16,168(sp)
 8045cb8:	2f00782e 	bgeu	r5,fp,8045e9c <___svfprintf_internal_r+0x2270>
 8045cbc:	d9c02384 	addi	r7,sp,142
 8045cc0:	3d0fc83a 	sub	r7,r7,r20
 8045cc4:	d9002344 	addi	r4,sp,141
 8045cc8:	e1cf883a 	add	r7,fp,r7
 8045ccc:	00000106 	br	8045cd4 <___svfprintf_internal_r+0x20a8>
 8045cd0:	28800003 	ldbu	r2,0(r5)
 8045cd4:	20800005 	stb	r2,0(r4)
 8045cd8:	21000044 	addi	r4,r4,1
 8045cdc:	29400044 	addi	r5,r5,1
 8045ce0:	21fffb1e 	bne	r4,r7,8045cd0 <__alt_data_end+0xfffddc30>
 8045ce4:	d8802304 	addi	r2,sp,140
 8045ce8:	1505c83a 	sub	r2,r2,r20
 8045cec:	d8c02344 	addi	r3,sp,141
 8045cf0:	1885883a 	add	r2,r3,r2
 8045cf4:	003f7006 	br	8045ab8 <__alt_data_end+0xfffdda18>
 8045cf8:	0005883a 	mov	r2,zero
 8045cfc:	003f0b06 	br	804592c <__alt_data_end+0xfffdd88c>
 8045d00:	d9002a17 	ldw	r4,168(sp)
 8045d04:	d8c03217 	ldw	r3,200(sp)
 8045d08:	20800044 	addi	r2,r4,1
 8045d0c:	1885883a 	add	r2,r3,r2
 8045d10:	d8802b15 	stw	r2,172(sp)
 8045d14:	103e870e 	bge	r2,zero,8045734 <__alt_data_end+0xfffdd694>
 8045d18:	0005883a 	mov	r2,zero
 8045d1c:	003e8506 	br	8045734 <__alt_data_end+0xfffdd694>
 8045d20:	01020174 	movhi	r4,2053
 8045d24:	210c3684 	addi	r4,r4,12506
 8045d28:	d9002c15 	stw	r4,176(sp)
 8045d2c:	003cc506 	br	8045044 <__alt_data_end+0xfffdcfa4>
 8045d30:	d8c03217 	ldw	r3,200(sp)
 8045d34:	18c00044 	addi	r3,r3,1
 8045d38:	d8c02b15 	stw	r3,172(sp)
 8045d3c:	1805883a 	mov	r2,r3
 8045d40:	183fa10e 	bge	r3,zero,8045bc8 <__alt_data_end+0xfffddb28>
 8045d44:	0005883a 	mov	r2,zero
 8045d48:	003f9f06 	br	8045bc8 <__alt_data_end+0xfffddb28>
 8045d4c:	d9003617 	ldw	r4,216(sp)
 8045d50:	000d883a 	mov	r6,zero
 8045d54:	000f883a 	mov	r7,zero
 8045d58:	a00b883a 	mov	r5,r20
 8045d5c:	d8c03d15 	stw	r3,244(sp)
 8045d60:	da003e15 	stw	r8,248(sp)
 8045d64:	804deb00 	call	804deb0 <__eqdf2>
 8045d68:	d8c03d17 	ldw	r3,244(sp)
 8045d6c:	da003e17 	ldw	r8,248(sp)
 8045d70:	103f8726 	beq	r2,zero,8045b90 <__alt_data_end+0xfffddaf0>
 8045d74:	00800044 	movi	r2,1
 8045d78:	10c7c83a 	sub	r3,r2,r3
 8045d7c:	d8c02615 	stw	r3,152(sp)
 8045d80:	003f8406 	br	8045b94 <__alt_data_end+0xfffddaf4>
 8045d84:	20000e1e 	bne	r4,zero,8045dc0 <___svfprintf_internal_r+0x2194>
 8045d88:	9480004c 	andi	r18,r18,1
 8045d8c:	90000c1e 	bne	r18,zero,8045dc0 <___svfprintf_internal_r+0x2194>
 8045d90:	00800044 	movi	r2,1
 8045d94:	d8802b15 	stw	r2,172(sp)
 8045d98:	003e6606 	br	8045734 <__alt_data_end+0xfffdd694>
 8045d9c:	00800b44 	movi	r2,45
 8045da0:	05adc83a 	sub	r22,zero,r22
 8045da4:	d8802305 	stb	r2,140(sp)
 8045da8:	003f3b06 	br	8045a98 <__alt_data_end+0xfffdd9f8>
 8045dac:	0005883a 	mov	r2,zero
 8045db0:	003f4e06 	br	8045aec <__alt_data_end+0xfffdda4c>
 8045db4:	90a4703a 	and	r18,r18,r2
 8045db8:	903f4a26 	beq	r18,zero,8045ae4 <__alt_data_end+0xfffdda44>
 8045dbc:	003f4606 	br	8045ad8 <__alt_data_end+0xfffdda38>
 8045dc0:	d8c02a17 	ldw	r3,168(sp)
 8045dc4:	18c00084 	addi	r3,r3,2
 8045dc8:	d8c02b15 	stw	r3,172(sp)
 8045dcc:	1805883a 	mov	r2,r3
 8045dd0:	183e580e 	bge	r3,zero,8045734 <__alt_data_end+0xfffdd694>
 8045dd4:	003fd006 	br	8045d18 <__alt_data_end+0xfffddc78>
 8045dd8:	00800084 	movi	r2,2
 8045ddc:	10c5c83a 	sub	r2,r2,r3
 8045de0:	003f7506 	br	8045bb8 <__alt_data_end+0xfffddb18>
 8045de4:	d9402e17 	ldw	r5,184(sp)
 8045de8:	d9002e17 	ldw	r4,184(sp)
 8045dec:	bc400043 	ldbu	r17,1(r23)
 8045df0:	29400017 	ldw	r5,0(r5)
 8045df4:	20800104 	addi	r2,r4,4
 8045df8:	d8802e15 	stw	r2,184(sp)
 8045dfc:	d9402a15 	stw	r5,168(sp)
 8045e00:	182f883a 	mov	r23,r3
 8045e04:	283df10e 	bge	r5,zero,80455cc <__alt_data_end+0xfffdd52c>
 8045e08:	8c403fcc 	andi	r17,r17,255
 8045e0c:	017fffc4 	movi	r5,-1
 8045e10:	8c40201c 	xori	r17,r17,128
 8045e14:	d9402a15 	stw	r5,168(sp)
 8045e18:	8c7fe004 	addi	r17,r17,-128
 8045e1c:	0037d806 	br	8043d80 <__alt_data_end+0xfffdbce0>
 8045e20:	9080004c 	andi	r2,r18,1
 8045e24:	0039883a 	mov	fp,zero
 8045e28:	10000726 	beq	r2,zero,8045e48 <___svfprintf_internal_r+0x221c>
 8045e2c:	d8c02817 	ldw	r3,160(sp)
 8045e30:	dc001dc4 	addi	r16,sp,119
 8045e34:	00800c04 	movi	r2,48
 8045e38:	1c07c83a 	sub	r3,r3,r16
 8045e3c:	d8801dc5 	stb	r2,119(sp)
 8045e40:	d8c02b15 	stw	r3,172(sp)
 8045e44:	00393106 	br	804430c <__alt_data_end+0xfffdc26c>
 8045e48:	d8002b15 	stw	zero,172(sp)
 8045e4c:	dc001e04 	addi	r16,sp,120
 8045e50:	00392e06 	br	804430c <__alt_data_end+0xfffdc26c>
 8045e54:	0005883a 	mov	r2,zero
 8045e58:	003e3306 	br	8045728 <__alt_data_end+0xfffdd688>
 8045e5c:	dd802617 	ldw	r22,152(sp)
 8045e60:	003f0706 	br	8045a80 <__alt_data_end+0xfffdd9e0>
 8045e64:	d8c02b03 	ldbu	r3,172(sp)
 8045e68:	d8c02785 	stb	r3,158(sp)
 8045e6c:	003a3506 	br	8044744 <__alt_data_end+0xfffdc6a4>
 8045e70:	d8c02b03 	ldbu	r3,172(sp)
 8045e74:	d8c02785 	stb	r3,158(sp)
 8045e78:	003a1706 	br	80446d8 <__alt_data_end+0xfffdc638>
 8045e7c:	0005883a 	mov	r2,zero
 8045e80:	003f5d06 	br	8045bf8 <__alt_data_end+0xfffddb58>
 8045e84:	d8c02b03 	ldbu	r3,172(sp)
 8045e88:	d8c02785 	stb	r3,158(sp)
 8045e8c:	0038f306 	br	804425c <__alt_data_end+0xfffdc1bc>
 8045e90:	d8c02b03 	ldbu	r3,172(sp)
 8045e94:	d8c02785 	stb	r3,158(sp)
 8045e98:	0038be06 	br	8044194 <__alt_data_end+0xfffdc0f4>
 8045e9c:	d8802344 	addi	r2,sp,141
 8045ea0:	003f0506 	br	8045ab8 <__alt_data_end+0xfffdda18>
 8045ea4:	d8c02b03 	ldbu	r3,172(sp)
 8045ea8:	d8c02785 	stb	r3,158(sp)
 8045eac:	00388b06 	br	80440dc <__alt_data_end+0xfffdc03c>
 8045eb0:	d8c02b03 	ldbu	r3,172(sp)
 8045eb4:	d8c02785 	stb	r3,158(sp)
 8045eb8:	003ad706 	br	8044a18 <__alt_data_end+0xfffdc978>
 8045ebc:	d9403917 	ldw	r5,228(sp)
 8045ec0:	00800304 	movi	r2,12
 8045ec4:	28800015 	stw	r2,0(r5)
 8045ec8:	00bfffc4 	movi	r2,-1
 8045ecc:	00384306 	br	8043fdc <__alt_data_end+0xfffdbf3c>
 8045ed0:	d8c02b03 	ldbu	r3,172(sp)
 8045ed4:	d8c02785 	stb	r3,158(sp)
 8045ed8:	003ab606 	br	80449b4 <__alt_data_end+0xfffdc914>
 8045edc:	d8c02b03 	ldbu	r3,172(sp)
 8045ee0:	d8c02785 	stb	r3,158(sp)
 8045ee4:	003a8906 	br	804490c <__alt_data_end+0xfffdc86c>

08045ee8 <quorem>:
 8045ee8:	defff204 	addi	sp,sp,-56
 8045eec:	ddc00b15 	stw	r23,44(sp)
 8045ef0:	20800417 	ldw	r2,16(r4)
 8045ef4:	2dc00417 	ldw	r23,16(r5)
 8045ef8:	dfc00d15 	stw	ra,52(sp)
 8045efc:	df000c15 	stw	fp,48(sp)
 8045f00:	dd800a15 	stw	r22,40(sp)
 8045f04:	dd400915 	stw	r21,36(sp)
 8045f08:	dd000815 	stw	r20,32(sp)
 8045f0c:	dcc00715 	stw	r19,28(sp)
 8045f10:	dc800615 	stw	r18,24(sp)
 8045f14:	dc400515 	stw	r17,20(sp)
 8045f18:	dc000415 	stw	r16,16(sp)
 8045f1c:	15c07a16 	blt	r2,r23,8046108 <quorem+0x220>
 8045f20:	bdffffc4 	addi	r23,r23,-1
 8045f24:	bde9883a 	add	r20,r23,r23
 8045f28:	28c00504 	addi	r3,r5,20
 8045f2c:	a529883a 	add	r20,r20,r20
 8045f30:	1d39883a 	add	fp,r3,r20
 8045f34:	24c00504 	addi	r19,r4,20
 8045f38:	d9400215 	stw	r5,8(sp)
 8045f3c:	9d29883a 	add	r20,r19,r20
 8045f40:	e1400017 	ldw	r5,0(fp)
 8045f44:	d9000015 	stw	r4,0(sp)
 8045f48:	a1000017 	ldw	r4,0(r20)
 8045f4c:	29400044 	addi	r5,r5,1
 8045f50:	d8c00115 	stw	r3,4(sp)
 8045f54:	dd000315 	stw	r20,12(sp)
 8045f58:	80437f80 	call	80437f8 <__udivsi3>
 8045f5c:	1025883a 	mov	r18,r2
 8045f60:	10003026 	beq	r2,zero,8046024 <quorem+0x13c>
 8045f64:	dc400117 	ldw	r17,4(sp)
 8045f68:	9829883a 	mov	r20,r19
 8045f6c:	002d883a 	mov	r22,zero
 8045f70:	0021883a 	mov	r16,zero
 8045f74:	8d400017 	ldw	r21,0(r17)
 8045f78:	900b883a 	mov	r5,r18
 8045f7c:	8c400104 	addi	r17,r17,4
 8045f80:	a93fffcc 	andi	r4,r21,65535
 8045f84:	80418e00 	call	80418e0 <__mulsi3>
 8045f88:	a808d43a 	srli	r4,r21,16
 8045f8c:	900b883a 	mov	r5,r18
 8045f90:	15ad883a 	add	r22,r2,r22
 8045f94:	80418e00 	call	80418e0 <__mulsi3>
 8045f98:	a1000017 	ldw	r4,0(r20)
 8045f9c:	b00cd43a 	srli	r6,r22,16
 8045fa0:	b0ffffcc 	andi	r3,r22,65535
 8045fa4:	217fffcc 	andi	r5,r4,65535
 8045fa8:	2c21883a 	add	r16,r5,r16
 8045fac:	80c7c83a 	sub	r3,r16,r3
 8045fb0:	2008d43a 	srli	r4,r4,16
 8045fb4:	1185883a 	add	r2,r2,r6
 8045fb8:	1821d43a 	srai	r16,r3,16
 8045fbc:	117fffcc 	andi	r5,r2,65535
 8045fc0:	2149c83a 	sub	r4,r4,r5
 8045fc4:	2421883a 	add	r16,r4,r16
 8045fc8:	8008943a 	slli	r4,r16,16
 8045fcc:	18ffffcc 	andi	r3,r3,65535
 8045fd0:	102cd43a 	srli	r22,r2,16
 8045fd4:	20c8b03a 	or	r4,r4,r3
 8045fd8:	a1000015 	stw	r4,0(r20)
 8045fdc:	8021d43a 	srai	r16,r16,16
 8045fe0:	a5000104 	addi	r20,r20,4
 8045fe4:	e47fe32e 	bgeu	fp,r17,8045f74 <__alt_data_end+0xfffdded4>
 8045fe8:	d8c00317 	ldw	r3,12(sp)
 8045fec:	18800017 	ldw	r2,0(r3)
 8045ff0:	10000c1e 	bne	r2,zero,8046024 <quorem+0x13c>
 8045ff4:	18bfff04 	addi	r2,r3,-4
 8045ff8:	9880082e 	bgeu	r19,r2,804601c <quorem+0x134>
 8045ffc:	18ffff17 	ldw	r3,-4(r3)
 8046000:	18000326 	beq	r3,zero,8046010 <quorem+0x128>
 8046004:	00000506 	br	804601c <quorem+0x134>
 8046008:	10c00017 	ldw	r3,0(r2)
 804600c:	1800031e 	bne	r3,zero,804601c <quorem+0x134>
 8046010:	10bfff04 	addi	r2,r2,-4
 8046014:	bdffffc4 	addi	r23,r23,-1
 8046018:	98bffb36 	bltu	r19,r2,8046008 <__alt_data_end+0xfffddf68>
 804601c:	d8c00017 	ldw	r3,0(sp)
 8046020:	1dc00415 	stw	r23,16(r3)
 8046024:	d9400217 	ldw	r5,8(sp)
 8046028:	d9000017 	ldw	r4,0(sp)
 804602c:	804976c0 	call	804976c <__mcmp>
 8046030:	10002816 	blt	r2,zero,80460d4 <quorem+0x1ec>
 8046034:	dc400117 	ldw	r17,4(sp)
 8046038:	94800044 	addi	r18,r18,1
 804603c:	980d883a 	mov	r6,r19
 8046040:	0007883a 	mov	r3,zero
 8046044:	31000017 	ldw	r4,0(r6)
 8046048:	89400017 	ldw	r5,0(r17)
 804604c:	31800104 	addi	r6,r6,4
 8046050:	20bfffcc 	andi	r2,r4,65535
 8046054:	10c7883a 	add	r3,r2,r3
 8046058:	28bfffcc 	andi	r2,r5,65535
 804605c:	1885c83a 	sub	r2,r3,r2
 8046060:	280ad43a 	srli	r5,r5,16
 8046064:	2008d43a 	srli	r4,r4,16
 8046068:	1007d43a 	srai	r3,r2,16
 804606c:	10bfffcc 	andi	r2,r2,65535
 8046070:	2149c83a 	sub	r4,r4,r5
 8046074:	20c9883a 	add	r4,r4,r3
 8046078:	200a943a 	slli	r5,r4,16
 804607c:	8c400104 	addi	r17,r17,4
 8046080:	2007d43a 	srai	r3,r4,16
 8046084:	2884b03a 	or	r2,r5,r2
 8046088:	30bfff15 	stw	r2,-4(r6)
 804608c:	e47fed2e 	bgeu	fp,r17,8046044 <__alt_data_end+0xfffddfa4>
 8046090:	bdc5883a 	add	r2,r23,r23
 8046094:	1085883a 	add	r2,r2,r2
 8046098:	9887883a 	add	r3,r19,r2
 804609c:	18800017 	ldw	r2,0(r3)
 80460a0:	10000c1e 	bne	r2,zero,80460d4 <quorem+0x1ec>
 80460a4:	18bfff04 	addi	r2,r3,-4
 80460a8:	9880082e 	bgeu	r19,r2,80460cc <quorem+0x1e4>
 80460ac:	18ffff17 	ldw	r3,-4(r3)
 80460b0:	18000326 	beq	r3,zero,80460c0 <quorem+0x1d8>
 80460b4:	00000506 	br	80460cc <quorem+0x1e4>
 80460b8:	10c00017 	ldw	r3,0(r2)
 80460bc:	1800031e 	bne	r3,zero,80460cc <quorem+0x1e4>
 80460c0:	10bfff04 	addi	r2,r2,-4
 80460c4:	bdffffc4 	addi	r23,r23,-1
 80460c8:	98bffb36 	bltu	r19,r2,80460b8 <__alt_data_end+0xfffde018>
 80460cc:	d8c00017 	ldw	r3,0(sp)
 80460d0:	1dc00415 	stw	r23,16(r3)
 80460d4:	9005883a 	mov	r2,r18
 80460d8:	dfc00d17 	ldw	ra,52(sp)
 80460dc:	df000c17 	ldw	fp,48(sp)
 80460e0:	ddc00b17 	ldw	r23,44(sp)
 80460e4:	dd800a17 	ldw	r22,40(sp)
 80460e8:	dd400917 	ldw	r21,36(sp)
 80460ec:	dd000817 	ldw	r20,32(sp)
 80460f0:	dcc00717 	ldw	r19,28(sp)
 80460f4:	dc800617 	ldw	r18,24(sp)
 80460f8:	dc400517 	ldw	r17,20(sp)
 80460fc:	dc000417 	ldw	r16,16(sp)
 8046100:	dec00e04 	addi	sp,sp,56
 8046104:	f800283a 	ret
 8046108:	0005883a 	mov	r2,zero
 804610c:	003ff206 	br	80460d8 <__alt_data_end+0xfffde038>

08046110 <_dtoa_r>:
 8046110:	20801017 	ldw	r2,64(r4)
 8046114:	deffde04 	addi	sp,sp,-136
 8046118:	df002015 	stw	fp,128(sp)
 804611c:	dcc01b15 	stw	r19,108(sp)
 8046120:	dc801a15 	stw	r18,104(sp)
 8046124:	dc401915 	stw	r17,100(sp)
 8046128:	dc001815 	stw	r16,96(sp)
 804612c:	dfc02115 	stw	ra,132(sp)
 8046130:	ddc01f15 	stw	r23,124(sp)
 8046134:	dd801e15 	stw	r22,120(sp)
 8046138:	dd401d15 	stw	r21,116(sp)
 804613c:	dd001c15 	stw	r20,112(sp)
 8046140:	d9c00315 	stw	r7,12(sp)
 8046144:	2039883a 	mov	fp,r4
 8046148:	3023883a 	mov	r17,r6
 804614c:	2825883a 	mov	r18,r5
 8046150:	dc002417 	ldw	r16,144(sp)
 8046154:	3027883a 	mov	r19,r6
 8046158:	10000826 	beq	r2,zero,804617c <_dtoa_r+0x6c>
 804615c:	21801117 	ldw	r6,68(r4)
 8046160:	00c00044 	movi	r3,1
 8046164:	100b883a 	mov	r5,r2
 8046168:	1986983a 	sll	r3,r3,r6
 804616c:	11800115 	stw	r6,4(r2)
 8046170:	10c00215 	stw	r3,8(r2)
 8046174:	8048e900 	call	8048e90 <_Bfree>
 8046178:	e0001015 	stw	zero,64(fp)
 804617c:	88002e16 	blt	r17,zero,8046238 <_dtoa_r+0x128>
 8046180:	80000015 	stw	zero,0(r16)
 8046184:	889ffc2c 	andhi	r2,r17,32752
 8046188:	00dffc34 	movhi	r3,32752
 804618c:	10c01c26 	beq	r2,r3,8046200 <_dtoa_r+0xf0>
 8046190:	000d883a 	mov	r6,zero
 8046194:	000f883a 	mov	r7,zero
 8046198:	9009883a 	mov	r4,r18
 804619c:	980b883a 	mov	r5,r19
 80461a0:	804deb00 	call	804deb0 <__eqdf2>
 80461a4:	10002b1e 	bne	r2,zero,8046254 <_dtoa_r+0x144>
 80461a8:	d9c02317 	ldw	r7,140(sp)
 80461ac:	00800044 	movi	r2,1
 80461b0:	38800015 	stw	r2,0(r7)
 80461b4:	d8802517 	ldw	r2,148(sp)
 80461b8:	10019e26 	beq	r2,zero,8046834 <_dtoa_r+0x724>
 80461bc:	d8c02517 	ldw	r3,148(sp)
 80461c0:	00820174 	movhi	r2,2053
 80461c4:	108c3644 	addi	r2,r2,12505
 80461c8:	18800015 	stw	r2,0(r3)
 80461cc:	10bfffc4 	addi	r2,r2,-1
 80461d0:	dfc02117 	ldw	ra,132(sp)
 80461d4:	df002017 	ldw	fp,128(sp)
 80461d8:	ddc01f17 	ldw	r23,124(sp)
 80461dc:	dd801e17 	ldw	r22,120(sp)
 80461e0:	dd401d17 	ldw	r21,116(sp)
 80461e4:	dd001c17 	ldw	r20,112(sp)
 80461e8:	dcc01b17 	ldw	r19,108(sp)
 80461ec:	dc801a17 	ldw	r18,104(sp)
 80461f0:	dc401917 	ldw	r17,100(sp)
 80461f4:	dc001817 	ldw	r16,96(sp)
 80461f8:	dec02204 	addi	sp,sp,136
 80461fc:	f800283a 	ret
 8046200:	d8c02317 	ldw	r3,140(sp)
 8046204:	0089c3c4 	movi	r2,9999
 8046208:	18800015 	stw	r2,0(r3)
 804620c:	90017726 	beq	r18,zero,80467ec <_dtoa_r+0x6dc>
 8046210:	00820174 	movhi	r2,2053
 8046214:	108c4204 	addi	r2,r2,12552
 8046218:	d9002517 	ldw	r4,148(sp)
 804621c:	203fec26 	beq	r4,zero,80461d0 <__alt_data_end+0xfffde130>
 8046220:	10c000c7 	ldb	r3,3(r2)
 8046224:	1801781e 	bne	r3,zero,8046808 <_dtoa_r+0x6f8>
 8046228:	10c000c4 	addi	r3,r2,3
 804622c:	d9802517 	ldw	r6,148(sp)
 8046230:	30c00015 	stw	r3,0(r6)
 8046234:	003fe606 	br	80461d0 <__alt_data_end+0xfffde130>
 8046238:	04e00034 	movhi	r19,32768
 804623c:	9cffffc4 	addi	r19,r19,-1
 8046240:	00800044 	movi	r2,1
 8046244:	8ce6703a 	and	r19,r17,r19
 8046248:	80800015 	stw	r2,0(r16)
 804624c:	9823883a 	mov	r17,r19
 8046250:	003fcc06 	br	8046184 <__alt_data_end+0xfffde0e4>
 8046254:	d8800204 	addi	r2,sp,8
 8046258:	d8800015 	stw	r2,0(sp)
 804625c:	d9c00104 	addi	r7,sp,4
 8046260:	900b883a 	mov	r5,r18
 8046264:	980d883a 	mov	r6,r19
 8046268:	e009883a 	mov	r4,fp
 804626c:	8820d53a 	srli	r16,r17,20
 8046270:	8049b380 	call	8049b38 <__d2b>
 8046274:	d8800915 	stw	r2,36(sp)
 8046278:	8001651e 	bne	r16,zero,8046810 <_dtoa_r+0x700>
 804627c:	dd800217 	ldw	r22,8(sp)
 8046280:	dc000117 	ldw	r16,4(sp)
 8046284:	00800804 	movi	r2,32
 8046288:	b421883a 	add	r16,r22,r16
 804628c:	80c10c84 	addi	r3,r16,1074
 8046290:	10c2d10e 	bge	r2,r3,8046dd8 <_dtoa_r+0xcc8>
 8046294:	00801004 	movi	r2,64
 8046298:	81010484 	addi	r4,r16,1042
 804629c:	10c7c83a 	sub	r3,r2,r3
 80462a0:	9108d83a 	srl	r4,r18,r4
 80462a4:	88e2983a 	sll	r17,r17,r3
 80462a8:	2448b03a 	or	r4,r4,r17
 80462ac:	804e9900 	call	804e990 <__floatunsidf>
 80462b0:	017f8434 	movhi	r5,65040
 80462b4:	01800044 	movi	r6,1
 80462b8:	1009883a 	mov	r4,r2
 80462bc:	194b883a 	add	r5,r3,r5
 80462c0:	843fffc4 	addi	r16,r16,-1
 80462c4:	d9801115 	stw	r6,68(sp)
 80462c8:	000d883a 	mov	r6,zero
 80462cc:	01cffe34 	movhi	r7,16376
 80462d0:	804df380 	call	804df38 <__subdf3>
 80462d4:	0198dbf4 	movhi	r6,25455
 80462d8:	01cff4f4 	movhi	r7,16339
 80462dc:	3190d844 	addi	r6,r6,17249
 80462e0:	39e1e9c4 	addi	r7,r7,-30809
 80462e4:	1009883a 	mov	r4,r2
 80462e8:	180b883a 	mov	r5,r3
 80462ec:	8042b780 	call	8042b78 <__muldf3>
 80462f0:	01a2d874 	movhi	r6,35681
 80462f4:	01cff1f4 	movhi	r7,16327
 80462f8:	31b22cc4 	addi	r6,r6,-14157
 80462fc:	39e28a04 	addi	r7,r7,-30168
 8046300:	180b883a 	mov	r5,r3
 8046304:	1009883a 	mov	r4,r2
 8046308:	804d6040 	call	804d604 <__adddf3>
 804630c:	8009883a 	mov	r4,r16
 8046310:	1029883a 	mov	r20,r2
 8046314:	1823883a 	mov	r17,r3
 8046318:	804e8b40 	call	804e8b4 <__floatsidf>
 804631c:	019427f4 	movhi	r6,20639
 8046320:	01cff4f4 	movhi	r7,16339
 8046324:	319e7ec4 	addi	r6,r6,31227
 8046328:	39d104c4 	addi	r7,r7,17427
 804632c:	1009883a 	mov	r4,r2
 8046330:	180b883a 	mov	r5,r3
 8046334:	8042b780 	call	8042b78 <__muldf3>
 8046338:	100d883a 	mov	r6,r2
 804633c:	180f883a 	mov	r7,r3
 8046340:	a009883a 	mov	r4,r20
 8046344:	880b883a 	mov	r5,r17
 8046348:	804d6040 	call	804d604 <__adddf3>
 804634c:	1009883a 	mov	r4,r2
 8046350:	180b883a 	mov	r5,r3
 8046354:	1029883a 	mov	r20,r2
 8046358:	1823883a 	mov	r17,r3
 804635c:	804e8340 	call	804e834 <__fixdfsi>
 8046360:	000d883a 	mov	r6,zero
 8046364:	000f883a 	mov	r7,zero
 8046368:	a009883a 	mov	r4,r20
 804636c:	880b883a 	mov	r5,r17
 8046370:	d8800515 	stw	r2,20(sp)
 8046374:	8042a840 	call	8042a84 <__ledf2>
 8046378:	10028716 	blt	r2,zero,8046d98 <_dtoa_r+0xc88>
 804637c:	d8c00517 	ldw	r3,20(sp)
 8046380:	00800584 	movi	r2,22
 8046384:	10c27536 	bltu	r2,r3,8046d5c <_dtoa_r+0xc4c>
 8046388:	180490fa 	slli	r2,r3,3
 804638c:	00c20174 	movhi	r3,2053
 8046390:	18cc5e04 	addi	r3,r3,12664
 8046394:	1885883a 	add	r2,r3,r2
 8046398:	11000017 	ldw	r4,0(r2)
 804639c:	11400117 	ldw	r5,4(r2)
 80463a0:	900d883a 	mov	r6,r18
 80463a4:	980f883a 	mov	r7,r19
 80463a8:	80429a80 	call	80429a8 <__gedf2>
 80463ac:	00828d0e 	bge	zero,r2,8046de4 <_dtoa_r+0xcd4>
 80463b0:	d9000517 	ldw	r4,20(sp)
 80463b4:	d8000e15 	stw	zero,56(sp)
 80463b8:	213fffc4 	addi	r4,r4,-1
 80463bc:	d9000515 	stw	r4,20(sp)
 80463c0:	b42dc83a 	sub	r22,r22,r16
 80463c4:	b5bfffc4 	addi	r22,r22,-1
 80463c8:	b0026f16 	blt	r22,zero,8046d88 <_dtoa_r+0xc78>
 80463cc:	d8000815 	stw	zero,32(sp)
 80463d0:	d9c00517 	ldw	r7,20(sp)
 80463d4:	38026416 	blt	r7,zero,8046d68 <_dtoa_r+0xc58>
 80463d8:	b1ed883a 	add	r22,r22,r7
 80463dc:	d9c00d15 	stw	r7,52(sp)
 80463e0:	d8000a15 	stw	zero,40(sp)
 80463e4:	d9800317 	ldw	r6,12(sp)
 80463e8:	00800244 	movi	r2,9
 80463ec:	11811436 	bltu	r2,r6,8046840 <_dtoa_r+0x730>
 80463f0:	00800144 	movi	r2,5
 80463f4:	1184e10e 	bge	r2,r6,804777c <_dtoa_r+0x166c>
 80463f8:	31bfff04 	addi	r6,r6,-4
 80463fc:	d9800315 	stw	r6,12(sp)
 8046400:	0023883a 	mov	r17,zero
 8046404:	d9800317 	ldw	r6,12(sp)
 8046408:	008000c4 	movi	r2,3
 804640c:	30836726 	beq	r6,r2,80471ac <_dtoa_r+0x109c>
 8046410:	1183410e 	bge	r2,r6,8047118 <_dtoa_r+0x1008>
 8046414:	d9c00317 	ldw	r7,12(sp)
 8046418:	00800104 	movi	r2,4
 804641c:	38827c26 	beq	r7,r2,8046e10 <_dtoa_r+0xd00>
 8046420:	00800144 	movi	r2,5
 8046424:	3884c41e 	bne	r7,r2,8047738 <_dtoa_r+0x1628>
 8046428:	00800044 	movi	r2,1
 804642c:	d8800b15 	stw	r2,44(sp)
 8046430:	d8c00517 	ldw	r3,20(sp)
 8046434:	d9002217 	ldw	r4,136(sp)
 8046438:	1907883a 	add	r3,r3,r4
 804643c:	19800044 	addi	r6,r3,1
 8046440:	d8c00c15 	stw	r3,48(sp)
 8046444:	d9800615 	stw	r6,24(sp)
 8046448:	0183a40e 	bge	zero,r6,80472dc <_dtoa_r+0x11cc>
 804644c:	d9800617 	ldw	r6,24(sp)
 8046450:	3021883a 	mov	r16,r6
 8046454:	e0001115 	stw	zero,68(fp)
 8046458:	008005c4 	movi	r2,23
 804645c:	1184c92e 	bgeu	r2,r6,8047784 <_dtoa_r+0x1674>
 8046460:	00c00044 	movi	r3,1
 8046464:	00800104 	movi	r2,4
 8046468:	1085883a 	add	r2,r2,r2
 804646c:	11000504 	addi	r4,r2,20
 8046470:	180b883a 	mov	r5,r3
 8046474:	18c00044 	addi	r3,r3,1
 8046478:	313ffb2e 	bgeu	r6,r4,8046468 <__alt_data_end+0xfffde3c8>
 804647c:	e1401115 	stw	r5,68(fp)
 8046480:	e009883a 	mov	r4,fp
 8046484:	8048de80 	call	8048de8 <_Balloc>
 8046488:	d8800715 	stw	r2,28(sp)
 804648c:	e0801015 	stw	r2,64(fp)
 8046490:	00800384 	movi	r2,14
 8046494:	1400f736 	bltu	r2,r16,8046874 <_dtoa_r+0x764>
 8046498:	8800f626 	beq	r17,zero,8046874 <_dtoa_r+0x764>
 804649c:	d9c00517 	ldw	r7,20(sp)
 80464a0:	01c39a0e 	bge	zero,r7,804730c <_dtoa_r+0x11fc>
 80464a4:	388003cc 	andi	r2,r7,15
 80464a8:	100490fa 	slli	r2,r2,3
 80464ac:	382bd13a 	srai	r21,r7,4
 80464b0:	00c20174 	movhi	r3,2053
 80464b4:	18cc5e04 	addi	r3,r3,12664
 80464b8:	1885883a 	add	r2,r3,r2
 80464bc:	a8c0040c 	andi	r3,r21,16
 80464c0:	12400017 	ldw	r9,0(r2)
 80464c4:	12000117 	ldw	r8,4(r2)
 80464c8:	18037926 	beq	r3,zero,80472b0 <_dtoa_r+0x11a0>
 80464cc:	00820174 	movhi	r2,2053
 80464d0:	108c5404 	addi	r2,r2,12624
 80464d4:	11800817 	ldw	r6,32(r2)
 80464d8:	11c00917 	ldw	r7,36(r2)
 80464dc:	9009883a 	mov	r4,r18
 80464e0:	980b883a 	mov	r5,r19
 80464e4:	da001715 	stw	r8,92(sp)
 80464e8:	da401615 	stw	r9,88(sp)
 80464ec:	8041fd80 	call	8041fd8 <__divdf3>
 80464f0:	da001717 	ldw	r8,92(sp)
 80464f4:	da401617 	ldw	r9,88(sp)
 80464f8:	ad4003cc 	andi	r21,r21,15
 80464fc:	040000c4 	movi	r16,3
 8046500:	1023883a 	mov	r17,r2
 8046504:	1829883a 	mov	r20,r3
 8046508:	a8001126 	beq	r21,zero,8046550 <_dtoa_r+0x440>
 804650c:	05c20174 	movhi	r23,2053
 8046510:	bdcc5404 	addi	r23,r23,12624
 8046514:	4805883a 	mov	r2,r9
 8046518:	4007883a 	mov	r3,r8
 804651c:	a980004c 	andi	r6,r21,1
 8046520:	1009883a 	mov	r4,r2
 8046524:	a82bd07a 	srai	r21,r21,1
 8046528:	180b883a 	mov	r5,r3
 804652c:	30000426 	beq	r6,zero,8046540 <_dtoa_r+0x430>
 8046530:	b9800017 	ldw	r6,0(r23)
 8046534:	b9c00117 	ldw	r7,4(r23)
 8046538:	84000044 	addi	r16,r16,1
 804653c:	8042b780 	call	8042b78 <__muldf3>
 8046540:	bdc00204 	addi	r23,r23,8
 8046544:	a83ff51e 	bne	r21,zero,804651c <__alt_data_end+0xfffde47c>
 8046548:	1013883a 	mov	r9,r2
 804654c:	1811883a 	mov	r8,r3
 8046550:	480d883a 	mov	r6,r9
 8046554:	400f883a 	mov	r7,r8
 8046558:	8809883a 	mov	r4,r17
 804655c:	a00b883a 	mov	r5,r20
 8046560:	8041fd80 	call	8041fd8 <__divdf3>
 8046564:	d8800f15 	stw	r2,60(sp)
 8046568:	d8c01015 	stw	r3,64(sp)
 804656c:	d8c00e17 	ldw	r3,56(sp)
 8046570:	18000626 	beq	r3,zero,804658c <_dtoa_r+0x47c>
 8046574:	d9000f17 	ldw	r4,60(sp)
 8046578:	d9401017 	ldw	r5,64(sp)
 804657c:	000d883a 	mov	r6,zero
 8046580:	01cffc34 	movhi	r7,16368
 8046584:	8042a840 	call	8042a84 <__ledf2>
 8046588:	10040b16 	blt	r2,zero,80475b8 <_dtoa_r+0x14a8>
 804658c:	8009883a 	mov	r4,r16
 8046590:	804e8b40 	call	804e8b4 <__floatsidf>
 8046594:	d9800f17 	ldw	r6,60(sp)
 8046598:	d9c01017 	ldw	r7,64(sp)
 804659c:	1009883a 	mov	r4,r2
 80465a0:	180b883a 	mov	r5,r3
 80465a4:	8042b780 	call	8042b78 <__muldf3>
 80465a8:	000d883a 	mov	r6,zero
 80465ac:	01d00734 	movhi	r7,16412
 80465b0:	1009883a 	mov	r4,r2
 80465b4:	180b883a 	mov	r5,r3
 80465b8:	804d6040 	call	804d604 <__adddf3>
 80465bc:	1021883a 	mov	r16,r2
 80465c0:	d8800617 	ldw	r2,24(sp)
 80465c4:	047f3034 	movhi	r17,64704
 80465c8:	1c63883a 	add	r17,r3,r17
 80465cc:	10031826 	beq	r2,zero,8047230 <_dtoa_r+0x1120>
 80465d0:	d8c00517 	ldw	r3,20(sp)
 80465d4:	db000617 	ldw	r12,24(sp)
 80465d8:	d8c01315 	stw	r3,76(sp)
 80465dc:	d9000b17 	ldw	r4,44(sp)
 80465e0:	20038f26 	beq	r4,zero,8047420 <_dtoa_r+0x1310>
 80465e4:	60bfffc4 	addi	r2,r12,-1
 80465e8:	100490fa 	slli	r2,r2,3
 80465ec:	00c20174 	movhi	r3,2053
 80465f0:	18cc5e04 	addi	r3,r3,12664
 80465f4:	1885883a 	add	r2,r3,r2
 80465f8:	11800017 	ldw	r6,0(r2)
 80465fc:	11c00117 	ldw	r7,4(r2)
 8046600:	d8800717 	ldw	r2,28(sp)
 8046604:	0009883a 	mov	r4,zero
 8046608:	014ff834 	movhi	r5,16352
 804660c:	db001615 	stw	r12,88(sp)
 8046610:	15c00044 	addi	r23,r2,1
 8046614:	8041fd80 	call	8041fd8 <__divdf3>
 8046618:	800d883a 	mov	r6,r16
 804661c:	880f883a 	mov	r7,r17
 8046620:	1009883a 	mov	r4,r2
 8046624:	180b883a 	mov	r5,r3
 8046628:	804df380 	call	804df38 <__subdf3>
 804662c:	d9401017 	ldw	r5,64(sp)
 8046630:	d9000f17 	ldw	r4,60(sp)
 8046634:	102b883a 	mov	r21,r2
 8046638:	d8c01215 	stw	r3,72(sp)
 804663c:	804e8340 	call	804e834 <__fixdfsi>
 8046640:	1009883a 	mov	r4,r2
 8046644:	1029883a 	mov	r20,r2
 8046648:	804e8b40 	call	804e8b4 <__floatsidf>
 804664c:	d9000f17 	ldw	r4,60(sp)
 8046650:	d9401017 	ldw	r5,64(sp)
 8046654:	100d883a 	mov	r6,r2
 8046658:	180f883a 	mov	r7,r3
 804665c:	804df380 	call	804df38 <__subdf3>
 8046660:	1823883a 	mov	r17,r3
 8046664:	d8c00717 	ldw	r3,28(sp)
 8046668:	d9401217 	ldw	r5,72(sp)
 804666c:	a2000c04 	addi	r8,r20,48
 8046670:	1021883a 	mov	r16,r2
 8046674:	1a000005 	stb	r8,0(r3)
 8046678:	800d883a 	mov	r6,r16
 804667c:	880f883a 	mov	r7,r17
 8046680:	a809883a 	mov	r4,r21
 8046684:	4029883a 	mov	r20,r8
 8046688:	80429a80 	call	80429a8 <__gedf2>
 804668c:	00841d16 	blt	zero,r2,8047704 <_dtoa_r+0x15f4>
 8046690:	800d883a 	mov	r6,r16
 8046694:	880f883a 	mov	r7,r17
 8046698:	0009883a 	mov	r4,zero
 804669c:	014ffc34 	movhi	r5,16368
 80466a0:	804df380 	call	804df38 <__subdf3>
 80466a4:	d9401217 	ldw	r5,72(sp)
 80466a8:	100d883a 	mov	r6,r2
 80466ac:	180f883a 	mov	r7,r3
 80466b0:	a809883a 	mov	r4,r21
 80466b4:	80429a80 	call	80429a8 <__gedf2>
 80466b8:	db001617 	ldw	r12,88(sp)
 80466bc:	00840e16 	blt	zero,r2,80476f8 <_dtoa_r+0x15e8>
 80466c0:	00800044 	movi	r2,1
 80466c4:	13006b0e 	bge	r2,r12,8046874 <_dtoa_r+0x764>
 80466c8:	d9000717 	ldw	r4,28(sp)
 80466cc:	dd800f15 	stw	r22,60(sp)
 80466d0:	dcc01015 	stw	r19,64(sp)
 80466d4:	2319883a 	add	r12,r4,r12
 80466d8:	dcc01217 	ldw	r19,72(sp)
 80466dc:	602d883a 	mov	r22,r12
 80466e0:	dc801215 	stw	r18,72(sp)
 80466e4:	b825883a 	mov	r18,r23
 80466e8:	00000906 	br	8046710 <_dtoa_r+0x600>
 80466ec:	804df380 	call	804df38 <__subdf3>
 80466f0:	a80d883a 	mov	r6,r21
 80466f4:	980f883a 	mov	r7,r19
 80466f8:	1009883a 	mov	r4,r2
 80466fc:	180b883a 	mov	r5,r3
 8046700:	8042a840 	call	8042a84 <__ledf2>
 8046704:	1003e816 	blt	r2,zero,80476a8 <_dtoa_r+0x1598>
 8046708:	b825883a 	mov	r18,r23
 804670c:	bd83e926 	beq	r23,r22,80476b4 <_dtoa_r+0x15a4>
 8046710:	a809883a 	mov	r4,r21
 8046714:	980b883a 	mov	r5,r19
 8046718:	000d883a 	mov	r6,zero
 804671c:	01d00934 	movhi	r7,16420
 8046720:	8042b780 	call	8042b78 <__muldf3>
 8046724:	000d883a 	mov	r6,zero
 8046728:	01d00934 	movhi	r7,16420
 804672c:	8009883a 	mov	r4,r16
 8046730:	880b883a 	mov	r5,r17
 8046734:	102b883a 	mov	r21,r2
 8046738:	1827883a 	mov	r19,r3
 804673c:	8042b780 	call	8042b78 <__muldf3>
 8046740:	180b883a 	mov	r5,r3
 8046744:	1009883a 	mov	r4,r2
 8046748:	1821883a 	mov	r16,r3
 804674c:	1023883a 	mov	r17,r2
 8046750:	804e8340 	call	804e834 <__fixdfsi>
 8046754:	1009883a 	mov	r4,r2
 8046758:	1029883a 	mov	r20,r2
 804675c:	804e8b40 	call	804e8b4 <__floatsidf>
 8046760:	8809883a 	mov	r4,r17
 8046764:	800b883a 	mov	r5,r16
 8046768:	100d883a 	mov	r6,r2
 804676c:	180f883a 	mov	r7,r3
 8046770:	804df380 	call	804df38 <__subdf3>
 8046774:	a5000c04 	addi	r20,r20,48
 8046778:	a80d883a 	mov	r6,r21
 804677c:	980f883a 	mov	r7,r19
 8046780:	1009883a 	mov	r4,r2
 8046784:	180b883a 	mov	r5,r3
 8046788:	95000005 	stb	r20,0(r18)
 804678c:	1021883a 	mov	r16,r2
 8046790:	1823883a 	mov	r17,r3
 8046794:	8042a840 	call	8042a84 <__ledf2>
 8046798:	bdc00044 	addi	r23,r23,1
 804679c:	800d883a 	mov	r6,r16
 80467a0:	880f883a 	mov	r7,r17
 80467a4:	0009883a 	mov	r4,zero
 80467a8:	014ffc34 	movhi	r5,16368
 80467ac:	103fcf0e 	bge	r2,zero,80466ec <__alt_data_end+0xfffde64c>
 80467b0:	d8c01317 	ldw	r3,76(sp)
 80467b4:	d8c00515 	stw	r3,20(sp)
 80467b8:	d9400917 	ldw	r5,36(sp)
 80467bc:	e009883a 	mov	r4,fp
 80467c0:	8048e900 	call	8048e90 <_Bfree>
 80467c4:	d9000517 	ldw	r4,20(sp)
 80467c8:	d9802317 	ldw	r6,140(sp)
 80467cc:	d9c02517 	ldw	r7,148(sp)
 80467d0:	b8000005 	stb	zero,0(r23)
 80467d4:	20800044 	addi	r2,r4,1
 80467d8:	30800015 	stw	r2,0(r6)
 80467dc:	3802aa26 	beq	r7,zero,8047288 <_dtoa_r+0x1178>
 80467e0:	3dc00015 	stw	r23,0(r7)
 80467e4:	d8800717 	ldw	r2,28(sp)
 80467e8:	003e7906 	br	80461d0 <__alt_data_end+0xfffde130>
 80467ec:	00800434 	movhi	r2,16
 80467f0:	10bfffc4 	addi	r2,r2,-1
 80467f4:	88a2703a 	and	r17,r17,r2
 80467f8:	883e851e 	bne	r17,zero,8046210 <__alt_data_end+0xfffde170>
 80467fc:	00820174 	movhi	r2,2053
 8046800:	108c3f04 	addi	r2,r2,12540
 8046804:	003e8406 	br	8046218 <__alt_data_end+0xfffde178>
 8046808:	10c00204 	addi	r3,r2,8
 804680c:	003e8706 	br	804622c <__alt_data_end+0xfffde18c>
 8046810:	01400434 	movhi	r5,16
 8046814:	297fffc4 	addi	r5,r5,-1
 8046818:	994a703a 	and	r5,r19,r5
 804681c:	9009883a 	mov	r4,r18
 8046820:	843f0044 	addi	r16,r16,-1023
 8046824:	294ffc34 	orhi	r5,r5,16368
 8046828:	dd800217 	ldw	r22,8(sp)
 804682c:	d8001115 	stw	zero,68(sp)
 8046830:	003ea506 	br	80462c8 <__alt_data_end+0xfffde228>
 8046834:	00820174 	movhi	r2,2053
 8046838:	108c3604 	addi	r2,r2,12504
 804683c:	003e6406 	br	80461d0 <__alt_data_end+0xfffde130>
 8046840:	e0001115 	stw	zero,68(fp)
 8046844:	000b883a 	mov	r5,zero
 8046848:	e009883a 	mov	r4,fp
 804684c:	8048de80 	call	8048de8 <_Balloc>
 8046850:	01bfffc4 	movi	r6,-1
 8046854:	01c00044 	movi	r7,1
 8046858:	d8800715 	stw	r2,28(sp)
 804685c:	d9800c15 	stw	r6,48(sp)
 8046860:	e0801015 	stw	r2,64(fp)
 8046864:	d8000315 	stw	zero,12(sp)
 8046868:	d9c00b15 	stw	r7,44(sp)
 804686c:	d9800615 	stw	r6,24(sp)
 8046870:	d8002215 	stw	zero,136(sp)
 8046874:	d8800117 	ldw	r2,4(sp)
 8046878:	10008916 	blt	r2,zero,8046aa0 <_dtoa_r+0x990>
 804687c:	d9000517 	ldw	r4,20(sp)
 8046880:	00c00384 	movi	r3,14
 8046884:	19008616 	blt	r3,r4,8046aa0 <_dtoa_r+0x990>
 8046888:	200490fa 	slli	r2,r4,3
 804688c:	00c20174 	movhi	r3,2053
 8046890:	d9802217 	ldw	r6,136(sp)
 8046894:	18cc5e04 	addi	r3,r3,12664
 8046898:	1885883a 	add	r2,r3,r2
 804689c:	14000017 	ldw	r16,0(r2)
 80468a0:	14400117 	ldw	r17,4(r2)
 80468a4:	30016316 	blt	r6,zero,8046e34 <_dtoa_r+0xd24>
 80468a8:	800d883a 	mov	r6,r16
 80468ac:	880f883a 	mov	r7,r17
 80468b0:	9009883a 	mov	r4,r18
 80468b4:	980b883a 	mov	r5,r19
 80468b8:	8041fd80 	call	8041fd8 <__divdf3>
 80468bc:	180b883a 	mov	r5,r3
 80468c0:	1009883a 	mov	r4,r2
 80468c4:	804e8340 	call	804e834 <__fixdfsi>
 80468c8:	1009883a 	mov	r4,r2
 80468cc:	102b883a 	mov	r21,r2
 80468d0:	804e8b40 	call	804e8b4 <__floatsidf>
 80468d4:	800d883a 	mov	r6,r16
 80468d8:	880f883a 	mov	r7,r17
 80468dc:	1009883a 	mov	r4,r2
 80468e0:	180b883a 	mov	r5,r3
 80468e4:	8042b780 	call	8042b78 <__muldf3>
 80468e8:	100d883a 	mov	r6,r2
 80468ec:	180f883a 	mov	r7,r3
 80468f0:	9009883a 	mov	r4,r18
 80468f4:	980b883a 	mov	r5,r19
 80468f8:	804df380 	call	804df38 <__subdf3>
 80468fc:	d9c00717 	ldw	r7,28(sp)
 8046900:	1009883a 	mov	r4,r2
 8046904:	a8800c04 	addi	r2,r21,48
 8046908:	38800005 	stb	r2,0(r7)
 804690c:	3dc00044 	addi	r23,r7,1
 8046910:	d9c00617 	ldw	r7,24(sp)
 8046914:	01800044 	movi	r6,1
 8046918:	180b883a 	mov	r5,r3
 804691c:	2005883a 	mov	r2,r4
 8046920:	39803826 	beq	r7,r6,8046a04 <_dtoa_r+0x8f4>
 8046924:	000d883a 	mov	r6,zero
 8046928:	01d00934 	movhi	r7,16420
 804692c:	8042b780 	call	8042b78 <__muldf3>
 8046930:	000d883a 	mov	r6,zero
 8046934:	000f883a 	mov	r7,zero
 8046938:	1009883a 	mov	r4,r2
 804693c:	180b883a 	mov	r5,r3
 8046940:	1025883a 	mov	r18,r2
 8046944:	1827883a 	mov	r19,r3
 8046948:	804deb00 	call	804deb0 <__eqdf2>
 804694c:	103f9a26 	beq	r2,zero,80467b8 <__alt_data_end+0xfffde718>
 8046950:	d9c00617 	ldw	r7,24(sp)
 8046954:	d8c00717 	ldw	r3,28(sp)
 8046958:	b829883a 	mov	r20,r23
 804695c:	38bfffc4 	addi	r2,r7,-1
 8046960:	18ad883a 	add	r22,r3,r2
 8046964:	00000a06 	br	8046990 <_dtoa_r+0x880>
 8046968:	8042b780 	call	8042b78 <__muldf3>
 804696c:	000d883a 	mov	r6,zero
 8046970:	000f883a 	mov	r7,zero
 8046974:	1009883a 	mov	r4,r2
 8046978:	180b883a 	mov	r5,r3
 804697c:	1025883a 	mov	r18,r2
 8046980:	1827883a 	mov	r19,r3
 8046984:	b829883a 	mov	r20,r23
 8046988:	804deb00 	call	804deb0 <__eqdf2>
 804698c:	103f8a26 	beq	r2,zero,80467b8 <__alt_data_end+0xfffde718>
 8046990:	800d883a 	mov	r6,r16
 8046994:	880f883a 	mov	r7,r17
 8046998:	9009883a 	mov	r4,r18
 804699c:	980b883a 	mov	r5,r19
 80469a0:	8041fd80 	call	8041fd8 <__divdf3>
 80469a4:	180b883a 	mov	r5,r3
 80469a8:	1009883a 	mov	r4,r2
 80469ac:	804e8340 	call	804e834 <__fixdfsi>
 80469b0:	1009883a 	mov	r4,r2
 80469b4:	102b883a 	mov	r21,r2
 80469b8:	804e8b40 	call	804e8b4 <__floatsidf>
 80469bc:	800d883a 	mov	r6,r16
 80469c0:	880f883a 	mov	r7,r17
 80469c4:	1009883a 	mov	r4,r2
 80469c8:	180b883a 	mov	r5,r3
 80469cc:	8042b780 	call	8042b78 <__muldf3>
 80469d0:	100d883a 	mov	r6,r2
 80469d4:	180f883a 	mov	r7,r3
 80469d8:	9009883a 	mov	r4,r18
 80469dc:	980b883a 	mov	r5,r19
 80469e0:	804df380 	call	804df38 <__subdf3>
 80469e4:	aa000c04 	addi	r8,r21,48
 80469e8:	a2000005 	stb	r8,0(r20)
 80469ec:	000d883a 	mov	r6,zero
 80469f0:	01d00934 	movhi	r7,16420
 80469f4:	1009883a 	mov	r4,r2
 80469f8:	180b883a 	mov	r5,r3
 80469fc:	a5c00044 	addi	r23,r20,1
 8046a00:	b53fd91e 	bne	r22,r20,8046968 <__alt_data_end+0xfffde8c8>
 8046a04:	100d883a 	mov	r6,r2
 8046a08:	180f883a 	mov	r7,r3
 8046a0c:	1009883a 	mov	r4,r2
 8046a10:	180b883a 	mov	r5,r3
 8046a14:	804d6040 	call	804d604 <__adddf3>
 8046a18:	100d883a 	mov	r6,r2
 8046a1c:	180f883a 	mov	r7,r3
 8046a20:	8009883a 	mov	r4,r16
 8046a24:	880b883a 	mov	r5,r17
 8046a28:	1027883a 	mov	r19,r2
 8046a2c:	1825883a 	mov	r18,r3
 8046a30:	8042a840 	call	8042a84 <__ledf2>
 8046a34:	10000816 	blt	r2,zero,8046a58 <_dtoa_r+0x948>
 8046a38:	980d883a 	mov	r6,r19
 8046a3c:	900f883a 	mov	r7,r18
 8046a40:	8009883a 	mov	r4,r16
 8046a44:	880b883a 	mov	r5,r17
 8046a48:	804deb00 	call	804deb0 <__eqdf2>
 8046a4c:	103f5a1e 	bne	r2,zero,80467b8 <__alt_data_end+0xfffde718>
 8046a50:	ad40004c 	andi	r21,r21,1
 8046a54:	a83f5826 	beq	r21,zero,80467b8 <__alt_data_end+0xfffde718>
 8046a58:	bd3fffc3 	ldbu	r20,-1(r23)
 8046a5c:	b8bfffc4 	addi	r2,r23,-1
 8046a60:	1007883a 	mov	r3,r2
 8046a64:	01400e44 	movi	r5,57
 8046a68:	d9800717 	ldw	r6,28(sp)
 8046a6c:	00000506 	br	8046a84 <_dtoa_r+0x974>
 8046a70:	18ffffc4 	addi	r3,r3,-1
 8046a74:	11824726 	beq	r2,r6,8047394 <_dtoa_r+0x1284>
 8046a78:	1d000003 	ldbu	r20,0(r3)
 8046a7c:	102f883a 	mov	r23,r2
 8046a80:	10bfffc4 	addi	r2,r2,-1
 8046a84:	a1003fcc 	andi	r4,r20,255
 8046a88:	2100201c 	xori	r4,r4,128
 8046a8c:	213fe004 	addi	r4,r4,-128
 8046a90:	217ff726 	beq	r4,r5,8046a70 <__alt_data_end+0xfffde9d0>
 8046a94:	a2000044 	addi	r8,r20,1
 8046a98:	12000005 	stb	r8,0(r2)
 8046a9c:	003f4606 	br	80467b8 <__alt_data_end+0xfffde718>
 8046aa0:	d9000b17 	ldw	r4,44(sp)
 8046aa4:	2000c826 	beq	r4,zero,8046dc8 <_dtoa_r+0xcb8>
 8046aa8:	d9800317 	ldw	r6,12(sp)
 8046aac:	00c00044 	movi	r3,1
 8046ab0:	1980f90e 	bge	r3,r6,8046e98 <_dtoa_r+0xd88>
 8046ab4:	d8800617 	ldw	r2,24(sp)
 8046ab8:	d8c00a17 	ldw	r3,40(sp)
 8046abc:	157fffc4 	addi	r21,r2,-1
 8046ac0:	1d41f316 	blt	r3,r21,8047290 <_dtoa_r+0x1180>
 8046ac4:	1d6bc83a 	sub	r21,r3,r21
 8046ac8:	d9c00617 	ldw	r7,24(sp)
 8046acc:	3802aa16 	blt	r7,zero,8047578 <_dtoa_r+0x1468>
 8046ad0:	dd000817 	ldw	r20,32(sp)
 8046ad4:	d8800617 	ldw	r2,24(sp)
 8046ad8:	d8c00817 	ldw	r3,32(sp)
 8046adc:	01400044 	movi	r5,1
 8046ae0:	e009883a 	mov	r4,fp
 8046ae4:	1887883a 	add	r3,r3,r2
 8046ae8:	d8c00815 	stw	r3,32(sp)
 8046aec:	b0ad883a 	add	r22,r22,r2
 8046af0:	804921c0 	call	804921c <__i2b>
 8046af4:	1023883a 	mov	r17,r2
 8046af8:	a0000826 	beq	r20,zero,8046b1c <_dtoa_r+0xa0c>
 8046afc:	0580070e 	bge	zero,r22,8046b1c <_dtoa_r+0xa0c>
 8046b00:	a005883a 	mov	r2,r20
 8046b04:	b500b916 	blt	r22,r20,8046dec <_dtoa_r+0xcdc>
 8046b08:	d9000817 	ldw	r4,32(sp)
 8046b0c:	a0a9c83a 	sub	r20,r20,r2
 8046b10:	b0adc83a 	sub	r22,r22,r2
 8046b14:	2089c83a 	sub	r4,r4,r2
 8046b18:	d9000815 	stw	r4,32(sp)
 8046b1c:	d9800a17 	ldw	r6,40(sp)
 8046b20:	0181810e 	bge	zero,r6,8047128 <_dtoa_r+0x1018>
 8046b24:	d9c00b17 	ldw	r7,44(sp)
 8046b28:	3800b326 	beq	r7,zero,8046df8 <_dtoa_r+0xce8>
 8046b2c:	a800b226 	beq	r21,zero,8046df8 <_dtoa_r+0xce8>
 8046b30:	880b883a 	mov	r5,r17
 8046b34:	a80d883a 	mov	r6,r21
 8046b38:	e009883a 	mov	r4,fp
 8046b3c:	80494e40 	call	80494e4 <__pow5mult>
 8046b40:	d9800917 	ldw	r6,36(sp)
 8046b44:	100b883a 	mov	r5,r2
 8046b48:	e009883a 	mov	r4,fp
 8046b4c:	1023883a 	mov	r17,r2
 8046b50:	80492580 	call	8049258 <__multiply>
 8046b54:	1021883a 	mov	r16,r2
 8046b58:	d8800a17 	ldw	r2,40(sp)
 8046b5c:	d9400917 	ldw	r5,36(sp)
 8046b60:	e009883a 	mov	r4,fp
 8046b64:	1545c83a 	sub	r2,r2,r21
 8046b68:	d8800a15 	stw	r2,40(sp)
 8046b6c:	8048e900 	call	8048e90 <_Bfree>
 8046b70:	d8c00a17 	ldw	r3,40(sp)
 8046b74:	18009f1e 	bne	r3,zero,8046df4 <_dtoa_r+0xce4>
 8046b78:	05c00044 	movi	r23,1
 8046b7c:	e009883a 	mov	r4,fp
 8046b80:	b80b883a 	mov	r5,r23
 8046b84:	804921c0 	call	804921c <__i2b>
 8046b88:	d9000d17 	ldw	r4,52(sp)
 8046b8c:	102b883a 	mov	r21,r2
 8046b90:	2000ce26 	beq	r4,zero,8046ecc <_dtoa_r+0xdbc>
 8046b94:	200d883a 	mov	r6,r4
 8046b98:	100b883a 	mov	r5,r2
 8046b9c:	e009883a 	mov	r4,fp
 8046ba0:	80494e40 	call	80494e4 <__pow5mult>
 8046ba4:	d9800317 	ldw	r6,12(sp)
 8046ba8:	102b883a 	mov	r21,r2
 8046bac:	b981810e 	bge	r23,r6,80471b4 <_dtoa_r+0x10a4>
 8046bb0:	0027883a 	mov	r19,zero
 8046bb4:	a8800417 	ldw	r2,16(r21)
 8046bb8:	05c00804 	movi	r23,32
 8046bbc:	10800104 	addi	r2,r2,4
 8046bc0:	1085883a 	add	r2,r2,r2
 8046bc4:	1085883a 	add	r2,r2,r2
 8046bc8:	a885883a 	add	r2,r21,r2
 8046bcc:	11000017 	ldw	r4,0(r2)
 8046bd0:	80491040 	call	8049104 <__hi0bits>
 8046bd4:	b885c83a 	sub	r2,r23,r2
 8046bd8:	1585883a 	add	r2,r2,r22
 8046bdc:	108007cc 	andi	r2,r2,31
 8046be0:	1000b326 	beq	r2,zero,8046eb0 <_dtoa_r+0xda0>
 8046be4:	00c00804 	movi	r3,32
 8046be8:	1887c83a 	sub	r3,r3,r2
 8046bec:	01000104 	movi	r4,4
 8046bf0:	20c2cd0e 	bge	r4,r3,8047728 <_dtoa_r+0x1618>
 8046bf4:	00c00704 	movi	r3,28
 8046bf8:	1885c83a 	sub	r2,r3,r2
 8046bfc:	d8c00817 	ldw	r3,32(sp)
 8046c00:	a0a9883a 	add	r20,r20,r2
 8046c04:	b0ad883a 	add	r22,r22,r2
 8046c08:	1887883a 	add	r3,r3,r2
 8046c0c:	d8c00815 	stw	r3,32(sp)
 8046c10:	d9800817 	ldw	r6,32(sp)
 8046c14:	0180040e 	bge	zero,r6,8046c28 <_dtoa_r+0xb18>
 8046c18:	800b883a 	mov	r5,r16
 8046c1c:	e009883a 	mov	r4,fp
 8046c20:	80496240 	call	8049624 <__lshift>
 8046c24:	1021883a 	mov	r16,r2
 8046c28:	0580050e 	bge	zero,r22,8046c40 <_dtoa_r+0xb30>
 8046c2c:	a80b883a 	mov	r5,r21
 8046c30:	b00d883a 	mov	r6,r22
 8046c34:	e009883a 	mov	r4,fp
 8046c38:	80496240 	call	8049624 <__lshift>
 8046c3c:	102b883a 	mov	r21,r2
 8046c40:	d9c00e17 	ldw	r7,56(sp)
 8046c44:	3801211e 	bne	r7,zero,80470cc <_dtoa_r+0xfbc>
 8046c48:	d9800617 	ldw	r6,24(sp)
 8046c4c:	0181380e 	bge	zero,r6,8047130 <_dtoa_r+0x1020>
 8046c50:	d8c00b17 	ldw	r3,44(sp)
 8046c54:	1800ab1e 	bne	r3,zero,8046f04 <_dtoa_r+0xdf4>
 8046c58:	dc800717 	ldw	r18,28(sp)
 8046c5c:	dcc00617 	ldw	r19,24(sp)
 8046c60:	9029883a 	mov	r20,r18
 8046c64:	00000206 	br	8046c70 <_dtoa_r+0xb60>
 8046c68:	8048eb80 	call	8048eb8 <__multadd>
 8046c6c:	1021883a 	mov	r16,r2
 8046c70:	a80b883a 	mov	r5,r21
 8046c74:	8009883a 	mov	r4,r16
 8046c78:	8045ee80 	call	8045ee8 <quorem>
 8046c7c:	10800c04 	addi	r2,r2,48
 8046c80:	90800005 	stb	r2,0(r18)
 8046c84:	94800044 	addi	r18,r18,1
 8046c88:	9507c83a 	sub	r3,r18,r20
 8046c8c:	000f883a 	mov	r7,zero
 8046c90:	01800284 	movi	r6,10
 8046c94:	800b883a 	mov	r5,r16
 8046c98:	e009883a 	mov	r4,fp
 8046c9c:	1cfff216 	blt	r3,r19,8046c68 <__alt_data_end+0xfffdebc8>
 8046ca0:	1011883a 	mov	r8,r2
 8046ca4:	d8800617 	ldw	r2,24(sp)
 8046ca8:	0082370e 	bge	zero,r2,8047588 <_dtoa_r+0x1478>
 8046cac:	d9000717 	ldw	r4,28(sp)
 8046cb0:	0025883a 	mov	r18,zero
 8046cb4:	20af883a 	add	r23,r4,r2
 8046cb8:	01800044 	movi	r6,1
 8046cbc:	800b883a 	mov	r5,r16
 8046cc0:	e009883a 	mov	r4,fp
 8046cc4:	da001715 	stw	r8,92(sp)
 8046cc8:	80496240 	call	8049624 <__lshift>
 8046ccc:	a80b883a 	mov	r5,r21
 8046cd0:	1009883a 	mov	r4,r2
 8046cd4:	d8800915 	stw	r2,36(sp)
 8046cd8:	804976c0 	call	804976c <__mcmp>
 8046cdc:	da001717 	ldw	r8,92(sp)
 8046ce0:	0081800e 	bge	zero,r2,80472e4 <_dtoa_r+0x11d4>
 8046ce4:	b93fffc3 	ldbu	r4,-1(r23)
 8046ce8:	b8bfffc4 	addi	r2,r23,-1
 8046cec:	1007883a 	mov	r3,r2
 8046cf0:	01800e44 	movi	r6,57
 8046cf4:	d9c00717 	ldw	r7,28(sp)
 8046cf8:	00000506 	br	8046d10 <_dtoa_r+0xc00>
 8046cfc:	18ffffc4 	addi	r3,r3,-1
 8046d00:	11c12326 	beq	r2,r7,8047190 <_dtoa_r+0x1080>
 8046d04:	19000003 	ldbu	r4,0(r3)
 8046d08:	102f883a 	mov	r23,r2
 8046d0c:	10bfffc4 	addi	r2,r2,-1
 8046d10:	21403fcc 	andi	r5,r4,255
 8046d14:	2940201c 	xori	r5,r5,128
 8046d18:	297fe004 	addi	r5,r5,-128
 8046d1c:	29bff726 	beq	r5,r6,8046cfc <__alt_data_end+0xfffdec5c>
 8046d20:	21000044 	addi	r4,r4,1
 8046d24:	11000005 	stb	r4,0(r2)
 8046d28:	a80b883a 	mov	r5,r21
 8046d2c:	e009883a 	mov	r4,fp
 8046d30:	8048e900 	call	8048e90 <_Bfree>
 8046d34:	883ea026 	beq	r17,zero,80467b8 <__alt_data_end+0xfffde718>
 8046d38:	90000426 	beq	r18,zero,8046d4c <_dtoa_r+0xc3c>
 8046d3c:	94400326 	beq	r18,r17,8046d4c <_dtoa_r+0xc3c>
 8046d40:	900b883a 	mov	r5,r18
 8046d44:	e009883a 	mov	r4,fp
 8046d48:	8048e900 	call	8048e90 <_Bfree>
 8046d4c:	880b883a 	mov	r5,r17
 8046d50:	e009883a 	mov	r4,fp
 8046d54:	8048e900 	call	8048e90 <_Bfree>
 8046d58:	003e9706 	br	80467b8 <__alt_data_end+0xfffde718>
 8046d5c:	01800044 	movi	r6,1
 8046d60:	d9800e15 	stw	r6,56(sp)
 8046d64:	003d9606 	br	80463c0 <__alt_data_end+0xfffde320>
 8046d68:	d8800817 	ldw	r2,32(sp)
 8046d6c:	d8c00517 	ldw	r3,20(sp)
 8046d70:	d8000d15 	stw	zero,52(sp)
 8046d74:	10c5c83a 	sub	r2,r2,r3
 8046d78:	00c9c83a 	sub	r4,zero,r3
 8046d7c:	d8800815 	stw	r2,32(sp)
 8046d80:	d9000a15 	stw	r4,40(sp)
 8046d84:	003d9706 	br	80463e4 <__alt_data_end+0xfffde344>
 8046d88:	05adc83a 	sub	r22,zero,r22
 8046d8c:	dd800815 	stw	r22,32(sp)
 8046d90:	002d883a 	mov	r22,zero
 8046d94:	003d8e06 	br	80463d0 <__alt_data_end+0xfffde330>
 8046d98:	d9000517 	ldw	r4,20(sp)
 8046d9c:	804e8b40 	call	804e8b4 <__floatsidf>
 8046da0:	100d883a 	mov	r6,r2
 8046da4:	180f883a 	mov	r7,r3
 8046da8:	a009883a 	mov	r4,r20
 8046dac:	880b883a 	mov	r5,r17
 8046db0:	804deb00 	call	804deb0 <__eqdf2>
 8046db4:	103d7126 	beq	r2,zero,804637c <__alt_data_end+0xfffde2dc>
 8046db8:	d9c00517 	ldw	r7,20(sp)
 8046dbc:	39ffffc4 	addi	r7,r7,-1
 8046dc0:	d9c00515 	stw	r7,20(sp)
 8046dc4:	003d6d06 	br	804637c <__alt_data_end+0xfffde2dc>
 8046dc8:	dd400a17 	ldw	r21,40(sp)
 8046dcc:	dd000817 	ldw	r20,32(sp)
 8046dd0:	0023883a 	mov	r17,zero
 8046dd4:	003f4806 	br	8046af8 <__alt_data_end+0xfffdea58>
 8046dd8:	10e3c83a 	sub	r17,r2,r3
 8046ddc:	9448983a 	sll	r4,r18,r17
 8046de0:	003d3206 	br	80462ac <__alt_data_end+0xfffde20c>
 8046de4:	d8000e15 	stw	zero,56(sp)
 8046de8:	003d7506 	br	80463c0 <__alt_data_end+0xfffde320>
 8046dec:	b005883a 	mov	r2,r22
 8046df0:	003f4506 	br	8046b08 <__alt_data_end+0xfffdea68>
 8046df4:	dc000915 	stw	r16,36(sp)
 8046df8:	d9800a17 	ldw	r6,40(sp)
 8046dfc:	d9400917 	ldw	r5,36(sp)
 8046e00:	e009883a 	mov	r4,fp
 8046e04:	80494e40 	call	80494e4 <__pow5mult>
 8046e08:	1021883a 	mov	r16,r2
 8046e0c:	003f5a06 	br	8046b78 <__alt_data_end+0xfffdead8>
 8046e10:	01c00044 	movi	r7,1
 8046e14:	d9c00b15 	stw	r7,44(sp)
 8046e18:	d8802217 	ldw	r2,136(sp)
 8046e1c:	0081280e 	bge	zero,r2,80472c0 <_dtoa_r+0x11b0>
 8046e20:	100d883a 	mov	r6,r2
 8046e24:	1021883a 	mov	r16,r2
 8046e28:	d8800c15 	stw	r2,48(sp)
 8046e2c:	d8800615 	stw	r2,24(sp)
 8046e30:	003d8806 	br	8046454 <__alt_data_end+0xfffde3b4>
 8046e34:	d8800617 	ldw	r2,24(sp)
 8046e38:	00be9b16 	blt	zero,r2,80468a8 <__alt_data_end+0xfffde808>
 8046e3c:	10010f1e 	bne	r2,zero,804727c <_dtoa_r+0x116c>
 8046e40:	880b883a 	mov	r5,r17
 8046e44:	000d883a 	mov	r6,zero
 8046e48:	01d00534 	movhi	r7,16404
 8046e4c:	8009883a 	mov	r4,r16
 8046e50:	8042b780 	call	8042b78 <__muldf3>
 8046e54:	900d883a 	mov	r6,r18
 8046e58:	980f883a 	mov	r7,r19
 8046e5c:	1009883a 	mov	r4,r2
 8046e60:	180b883a 	mov	r5,r3
 8046e64:	80429a80 	call	80429a8 <__gedf2>
 8046e68:	002b883a 	mov	r21,zero
 8046e6c:	0023883a 	mov	r17,zero
 8046e70:	1000bf16 	blt	r2,zero,8047170 <_dtoa_r+0x1060>
 8046e74:	d9802217 	ldw	r6,136(sp)
 8046e78:	ddc00717 	ldw	r23,28(sp)
 8046e7c:	018c303a 	nor	r6,zero,r6
 8046e80:	d9800515 	stw	r6,20(sp)
 8046e84:	a80b883a 	mov	r5,r21
 8046e88:	e009883a 	mov	r4,fp
 8046e8c:	8048e900 	call	8048e90 <_Bfree>
 8046e90:	883e4926 	beq	r17,zero,80467b8 <__alt_data_end+0xfffde718>
 8046e94:	003fad06 	br	8046d4c <__alt_data_end+0xfffdecac>
 8046e98:	d9c01117 	ldw	r7,68(sp)
 8046e9c:	3801bc26 	beq	r7,zero,8047590 <_dtoa_r+0x1480>
 8046ea0:	10810cc4 	addi	r2,r2,1075
 8046ea4:	dd400a17 	ldw	r21,40(sp)
 8046ea8:	dd000817 	ldw	r20,32(sp)
 8046eac:	003f0a06 	br	8046ad8 <__alt_data_end+0xfffdea38>
 8046eb0:	00800704 	movi	r2,28
 8046eb4:	d9000817 	ldw	r4,32(sp)
 8046eb8:	a0a9883a 	add	r20,r20,r2
 8046ebc:	b0ad883a 	add	r22,r22,r2
 8046ec0:	2089883a 	add	r4,r4,r2
 8046ec4:	d9000815 	stw	r4,32(sp)
 8046ec8:	003f5106 	br	8046c10 <__alt_data_end+0xfffdeb70>
 8046ecc:	d8c00317 	ldw	r3,12(sp)
 8046ed0:	b8c1fc0e 	bge	r23,r3,80476c4 <_dtoa_r+0x15b4>
 8046ed4:	0027883a 	mov	r19,zero
 8046ed8:	b805883a 	mov	r2,r23
 8046edc:	003f3e06 	br	8046bd8 <__alt_data_end+0xfffdeb38>
 8046ee0:	880b883a 	mov	r5,r17
 8046ee4:	e009883a 	mov	r4,fp
 8046ee8:	000f883a 	mov	r7,zero
 8046eec:	01800284 	movi	r6,10
 8046ef0:	8048eb80 	call	8048eb8 <__multadd>
 8046ef4:	d9000c17 	ldw	r4,48(sp)
 8046ef8:	1023883a 	mov	r17,r2
 8046efc:	0102040e 	bge	zero,r4,8047710 <_dtoa_r+0x1600>
 8046f00:	d9000615 	stw	r4,24(sp)
 8046f04:	0500050e 	bge	zero,r20,8046f1c <_dtoa_r+0xe0c>
 8046f08:	880b883a 	mov	r5,r17
 8046f0c:	a00d883a 	mov	r6,r20
 8046f10:	e009883a 	mov	r4,fp
 8046f14:	80496240 	call	8049624 <__lshift>
 8046f18:	1023883a 	mov	r17,r2
 8046f1c:	9801241e 	bne	r19,zero,80473b0 <_dtoa_r+0x12a0>
 8046f20:	8829883a 	mov	r20,r17
 8046f24:	d9000617 	ldw	r4,24(sp)
 8046f28:	dcc00717 	ldw	r19,28(sp)
 8046f2c:	9480004c 	andi	r18,r18,1
 8046f30:	20bfffc4 	addi	r2,r4,-1
 8046f34:	9885883a 	add	r2,r19,r2
 8046f38:	d8800415 	stw	r2,16(sp)
 8046f3c:	dc800615 	stw	r18,24(sp)
 8046f40:	a80b883a 	mov	r5,r21
 8046f44:	8009883a 	mov	r4,r16
 8046f48:	8045ee80 	call	8045ee8 <quorem>
 8046f4c:	880b883a 	mov	r5,r17
 8046f50:	8009883a 	mov	r4,r16
 8046f54:	102f883a 	mov	r23,r2
 8046f58:	804976c0 	call	804976c <__mcmp>
 8046f5c:	a80b883a 	mov	r5,r21
 8046f60:	a00d883a 	mov	r6,r20
 8046f64:	e009883a 	mov	r4,fp
 8046f68:	102d883a 	mov	r22,r2
 8046f6c:	80497cc0 	call	80497cc <__mdiff>
 8046f70:	1007883a 	mov	r3,r2
 8046f74:	10800317 	ldw	r2,12(r2)
 8046f78:	bc800c04 	addi	r18,r23,48
 8046f7c:	180b883a 	mov	r5,r3
 8046f80:	10004e1e 	bne	r2,zero,80470bc <_dtoa_r+0xfac>
 8046f84:	8009883a 	mov	r4,r16
 8046f88:	d8c01615 	stw	r3,88(sp)
 8046f8c:	804976c0 	call	804976c <__mcmp>
 8046f90:	d8c01617 	ldw	r3,88(sp)
 8046f94:	e009883a 	mov	r4,fp
 8046f98:	d8801615 	stw	r2,88(sp)
 8046f9c:	180b883a 	mov	r5,r3
 8046fa0:	8048e900 	call	8048e90 <_Bfree>
 8046fa4:	d8801617 	ldw	r2,88(sp)
 8046fa8:	1000041e 	bne	r2,zero,8046fbc <_dtoa_r+0xeac>
 8046fac:	d9800317 	ldw	r6,12(sp)
 8046fb0:	3000021e 	bne	r6,zero,8046fbc <_dtoa_r+0xeac>
 8046fb4:	d8c00617 	ldw	r3,24(sp)
 8046fb8:	18003726 	beq	r3,zero,8047098 <_dtoa_r+0xf88>
 8046fbc:	b0002016 	blt	r22,zero,8047040 <_dtoa_r+0xf30>
 8046fc0:	b000041e 	bne	r22,zero,8046fd4 <_dtoa_r+0xec4>
 8046fc4:	d9000317 	ldw	r4,12(sp)
 8046fc8:	2000021e 	bne	r4,zero,8046fd4 <_dtoa_r+0xec4>
 8046fcc:	d8c00617 	ldw	r3,24(sp)
 8046fd0:	18001b26 	beq	r3,zero,8047040 <_dtoa_r+0xf30>
 8046fd4:	00810716 	blt	zero,r2,80473f4 <_dtoa_r+0x12e4>
 8046fd8:	d8c00417 	ldw	r3,16(sp)
 8046fdc:	9d800044 	addi	r22,r19,1
 8046fe0:	9c800005 	stb	r18,0(r19)
 8046fe4:	b02f883a 	mov	r23,r22
 8046fe8:	98c10626 	beq	r19,r3,8047404 <_dtoa_r+0x12f4>
 8046fec:	800b883a 	mov	r5,r16
 8046ff0:	000f883a 	mov	r7,zero
 8046ff4:	01800284 	movi	r6,10
 8046ff8:	e009883a 	mov	r4,fp
 8046ffc:	8048eb80 	call	8048eb8 <__multadd>
 8047000:	1021883a 	mov	r16,r2
 8047004:	000f883a 	mov	r7,zero
 8047008:	01800284 	movi	r6,10
 804700c:	880b883a 	mov	r5,r17
 8047010:	e009883a 	mov	r4,fp
 8047014:	8d002526 	beq	r17,r20,80470ac <_dtoa_r+0xf9c>
 8047018:	8048eb80 	call	8048eb8 <__multadd>
 804701c:	a00b883a 	mov	r5,r20
 8047020:	000f883a 	mov	r7,zero
 8047024:	01800284 	movi	r6,10
 8047028:	e009883a 	mov	r4,fp
 804702c:	1023883a 	mov	r17,r2
 8047030:	8048eb80 	call	8048eb8 <__multadd>
 8047034:	1029883a 	mov	r20,r2
 8047038:	b027883a 	mov	r19,r22
 804703c:	003fc006 	br	8046f40 <__alt_data_end+0xfffdeea0>
 8047040:	9011883a 	mov	r8,r18
 8047044:	00800e0e 	bge	zero,r2,8047080 <_dtoa_r+0xf70>
 8047048:	800b883a 	mov	r5,r16
 804704c:	01800044 	movi	r6,1
 8047050:	e009883a 	mov	r4,fp
 8047054:	da001715 	stw	r8,92(sp)
 8047058:	80496240 	call	8049624 <__lshift>
 804705c:	a80b883a 	mov	r5,r21
 8047060:	1009883a 	mov	r4,r2
 8047064:	1021883a 	mov	r16,r2
 8047068:	804976c0 	call	804976c <__mcmp>
 804706c:	da001717 	ldw	r8,92(sp)
 8047070:	0081960e 	bge	zero,r2,80476cc <_dtoa_r+0x15bc>
 8047074:	00800e44 	movi	r2,57
 8047078:	40817026 	beq	r8,r2,804763c <_dtoa_r+0x152c>
 804707c:	ba000c44 	addi	r8,r23,49
 8047080:	8825883a 	mov	r18,r17
 8047084:	9dc00044 	addi	r23,r19,1
 8047088:	9a000005 	stb	r8,0(r19)
 804708c:	a023883a 	mov	r17,r20
 8047090:	dc000915 	stw	r16,36(sp)
 8047094:	003f2406 	br	8046d28 <__alt_data_end+0xfffdec88>
 8047098:	00800e44 	movi	r2,57
 804709c:	9011883a 	mov	r8,r18
 80470a0:	90816626 	beq	r18,r2,804763c <_dtoa_r+0x152c>
 80470a4:	05bff516 	blt	zero,r22,804707c <__alt_data_end+0xfffdefdc>
 80470a8:	003ff506 	br	8047080 <__alt_data_end+0xfffdefe0>
 80470ac:	8048eb80 	call	8048eb8 <__multadd>
 80470b0:	1023883a 	mov	r17,r2
 80470b4:	1029883a 	mov	r20,r2
 80470b8:	003fdf06 	br	8047038 <__alt_data_end+0xfffdef98>
 80470bc:	e009883a 	mov	r4,fp
 80470c0:	8048e900 	call	8048e90 <_Bfree>
 80470c4:	00800044 	movi	r2,1
 80470c8:	003fbc06 	br	8046fbc <__alt_data_end+0xfffdef1c>
 80470cc:	a80b883a 	mov	r5,r21
 80470d0:	8009883a 	mov	r4,r16
 80470d4:	804976c0 	call	804976c <__mcmp>
 80470d8:	103edb0e 	bge	r2,zero,8046c48 <__alt_data_end+0xfffdeba8>
 80470dc:	800b883a 	mov	r5,r16
 80470e0:	000f883a 	mov	r7,zero
 80470e4:	01800284 	movi	r6,10
 80470e8:	e009883a 	mov	r4,fp
 80470ec:	8048eb80 	call	8048eb8 <__multadd>
 80470f0:	1021883a 	mov	r16,r2
 80470f4:	d8800517 	ldw	r2,20(sp)
 80470f8:	d8c00b17 	ldw	r3,44(sp)
 80470fc:	10bfffc4 	addi	r2,r2,-1
 8047100:	d8800515 	stw	r2,20(sp)
 8047104:	183f761e 	bne	r3,zero,8046ee0 <__alt_data_end+0xfffdee40>
 8047108:	d9000c17 	ldw	r4,48(sp)
 804710c:	0101730e 	bge	zero,r4,80476dc <_dtoa_r+0x15cc>
 8047110:	d9000615 	stw	r4,24(sp)
 8047114:	003ed006 	br	8046c58 <__alt_data_end+0xfffdebb8>
 8047118:	00800084 	movi	r2,2
 804711c:	3081861e 	bne	r6,r2,8047738 <_dtoa_r+0x1628>
 8047120:	d8000b15 	stw	zero,44(sp)
 8047124:	003f3c06 	br	8046e18 <__alt_data_end+0xfffded78>
 8047128:	dc000917 	ldw	r16,36(sp)
 804712c:	003e9206 	br	8046b78 <__alt_data_end+0xfffdead8>
 8047130:	d9c00317 	ldw	r7,12(sp)
 8047134:	00800084 	movi	r2,2
 8047138:	11fec50e 	bge	r2,r7,8046c50 <__alt_data_end+0xfffdebb0>
 804713c:	d9000617 	ldw	r4,24(sp)
 8047140:	20013c1e 	bne	r4,zero,8047634 <_dtoa_r+0x1524>
 8047144:	a80b883a 	mov	r5,r21
 8047148:	000f883a 	mov	r7,zero
 804714c:	01800144 	movi	r6,5
 8047150:	e009883a 	mov	r4,fp
 8047154:	8048eb80 	call	8048eb8 <__multadd>
 8047158:	100b883a 	mov	r5,r2
 804715c:	8009883a 	mov	r4,r16
 8047160:	102b883a 	mov	r21,r2
 8047164:	804976c0 	call	804976c <__mcmp>
 8047168:	dc000915 	stw	r16,36(sp)
 804716c:	00bf410e 	bge	zero,r2,8046e74 <__alt_data_end+0xfffdedd4>
 8047170:	d9c00717 	ldw	r7,28(sp)
 8047174:	00800c44 	movi	r2,49
 8047178:	38800005 	stb	r2,0(r7)
 804717c:	d8800517 	ldw	r2,20(sp)
 8047180:	3dc00044 	addi	r23,r7,1
 8047184:	10800044 	addi	r2,r2,1
 8047188:	d8800515 	stw	r2,20(sp)
 804718c:	003f3d06 	br	8046e84 <__alt_data_end+0xfffdede4>
 8047190:	d9800517 	ldw	r6,20(sp)
 8047194:	d9c00717 	ldw	r7,28(sp)
 8047198:	00800c44 	movi	r2,49
 804719c:	31800044 	addi	r6,r6,1
 80471a0:	d9800515 	stw	r6,20(sp)
 80471a4:	38800005 	stb	r2,0(r7)
 80471a8:	003edf06 	br	8046d28 <__alt_data_end+0xfffdec88>
 80471ac:	d8000b15 	stw	zero,44(sp)
 80471b0:	003c9f06 	br	8046430 <__alt_data_end+0xfffde390>
 80471b4:	903e7e1e 	bne	r18,zero,8046bb0 <__alt_data_end+0xfffdeb10>
 80471b8:	00800434 	movhi	r2,16
 80471bc:	10bfffc4 	addi	r2,r2,-1
 80471c0:	9884703a 	and	r2,r19,r2
 80471c4:	1000ea1e 	bne	r2,zero,8047570 <_dtoa_r+0x1460>
 80471c8:	9cdffc2c 	andhi	r19,r19,32752
 80471cc:	9800e826 	beq	r19,zero,8047570 <_dtoa_r+0x1460>
 80471d0:	d9c00817 	ldw	r7,32(sp)
 80471d4:	b5800044 	addi	r22,r22,1
 80471d8:	04c00044 	movi	r19,1
 80471dc:	39c00044 	addi	r7,r7,1
 80471e0:	d9c00815 	stw	r7,32(sp)
 80471e4:	d8800d17 	ldw	r2,52(sp)
 80471e8:	103e721e 	bne	r2,zero,8046bb4 <__alt_data_end+0xfffdeb14>
 80471ec:	00800044 	movi	r2,1
 80471f0:	003e7906 	br	8046bd8 <__alt_data_end+0xfffdeb38>
 80471f4:	8009883a 	mov	r4,r16
 80471f8:	804e8b40 	call	804e8b4 <__floatsidf>
 80471fc:	d9800f17 	ldw	r6,60(sp)
 8047200:	d9c01017 	ldw	r7,64(sp)
 8047204:	1009883a 	mov	r4,r2
 8047208:	180b883a 	mov	r5,r3
 804720c:	8042b780 	call	8042b78 <__muldf3>
 8047210:	000d883a 	mov	r6,zero
 8047214:	01d00734 	movhi	r7,16412
 8047218:	1009883a 	mov	r4,r2
 804721c:	180b883a 	mov	r5,r3
 8047220:	804d6040 	call	804d604 <__adddf3>
 8047224:	047f3034 	movhi	r17,64704
 8047228:	1021883a 	mov	r16,r2
 804722c:	1c63883a 	add	r17,r3,r17
 8047230:	d9000f17 	ldw	r4,60(sp)
 8047234:	d9401017 	ldw	r5,64(sp)
 8047238:	000d883a 	mov	r6,zero
 804723c:	01d00534 	movhi	r7,16404
 8047240:	804df380 	call	804df38 <__subdf3>
 8047244:	800d883a 	mov	r6,r16
 8047248:	880f883a 	mov	r7,r17
 804724c:	1009883a 	mov	r4,r2
 8047250:	180b883a 	mov	r5,r3
 8047254:	102b883a 	mov	r21,r2
 8047258:	1829883a 	mov	r20,r3
 804725c:	80429a80 	call	80429a8 <__gedf2>
 8047260:	00806c16 	blt	zero,r2,8047414 <_dtoa_r+0x1304>
 8047264:	89e0003c 	xorhi	r7,r17,32768
 8047268:	800d883a 	mov	r6,r16
 804726c:	a809883a 	mov	r4,r21
 8047270:	a00b883a 	mov	r5,r20
 8047274:	8042a840 	call	8042a84 <__ledf2>
 8047278:	103d7e0e 	bge	r2,zero,8046874 <__alt_data_end+0xfffde7d4>
 804727c:	002b883a 	mov	r21,zero
 8047280:	0023883a 	mov	r17,zero
 8047284:	003efb06 	br	8046e74 <__alt_data_end+0xfffdedd4>
 8047288:	d8800717 	ldw	r2,28(sp)
 804728c:	003bd006 	br	80461d0 <__alt_data_end+0xfffde130>
 8047290:	d9000a17 	ldw	r4,40(sp)
 8047294:	d9800d17 	ldw	r6,52(sp)
 8047298:	dd400a15 	stw	r21,40(sp)
 804729c:	a905c83a 	sub	r2,r21,r4
 80472a0:	308d883a 	add	r6,r6,r2
 80472a4:	d9800d15 	stw	r6,52(sp)
 80472a8:	002b883a 	mov	r21,zero
 80472ac:	003e0606 	br	8046ac8 <__alt_data_end+0xfffdea28>
 80472b0:	9023883a 	mov	r17,r18
 80472b4:	9829883a 	mov	r20,r19
 80472b8:	04000084 	movi	r16,2
 80472bc:	003c9206 	br	8046508 <__alt_data_end+0xfffde468>
 80472c0:	04000044 	movi	r16,1
 80472c4:	dc000c15 	stw	r16,48(sp)
 80472c8:	dc000615 	stw	r16,24(sp)
 80472cc:	dc002215 	stw	r16,136(sp)
 80472d0:	e0001115 	stw	zero,68(fp)
 80472d4:	000b883a 	mov	r5,zero
 80472d8:	003c6906 	br	8046480 <__alt_data_end+0xfffde3e0>
 80472dc:	3021883a 	mov	r16,r6
 80472e0:	003ffb06 	br	80472d0 <__alt_data_end+0xfffdf230>
 80472e4:	1000021e 	bne	r2,zero,80472f0 <_dtoa_r+0x11e0>
 80472e8:	4200004c 	andi	r8,r8,1
 80472ec:	403e7d1e 	bne	r8,zero,8046ce4 <__alt_data_end+0xfffdec44>
 80472f0:	01000c04 	movi	r4,48
 80472f4:	00000106 	br	80472fc <_dtoa_r+0x11ec>
 80472f8:	102f883a 	mov	r23,r2
 80472fc:	b8bfffc4 	addi	r2,r23,-1
 8047300:	10c00007 	ldb	r3,0(r2)
 8047304:	193ffc26 	beq	r3,r4,80472f8 <__alt_data_end+0xfffdf258>
 8047308:	003e8706 	br	8046d28 <__alt_data_end+0xfffdec88>
 804730c:	d8800517 	ldw	r2,20(sp)
 8047310:	00a3c83a 	sub	r17,zero,r2
 8047314:	8800a426 	beq	r17,zero,80475a8 <_dtoa_r+0x1498>
 8047318:	888003cc 	andi	r2,r17,15
 804731c:	100490fa 	slli	r2,r2,3
 8047320:	00c20174 	movhi	r3,2053
 8047324:	18cc5e04 	addi	r3,r3,12664
 8047328:	1885883a 	add	r2,r3,r2
 804732c:	11800017 	ldw	r6,0(r2)
 8047330:	11c00117 	ldw	r7,4(r2)
 8047334:	9009883a 	mov	r4,r18
 8047338:	980b883a 	mov	r5,r19
 804733c:	8823d13a 	srai	r17,r17,4
 8047340:	8042b780 	call	8042b78 <__muldf3>
 8047344:	d8800f15 	stw	r2,60(sp)
 8047348:	d8c01015 	stw	r3,64(sp)
 804734c:	8800e826 	beq	r17,zero,80476f0 <_dtoa_r+0x15e0>
 8047350:	05020174 	movhi	r20,2053
 8047354:	a50c5404 	addi	r20,r20,12624
 8047358:	04000084 	movi	r16,2
 804735c:	8980004c 	andi	r6,r17,1
 8047360:	1009883a 	mov	r4,r2
 8047364:	8823d07a 	srai	r17,r17,1
 8047368:	180b883a 	mov	r5,r3
 804736c:	30000426 	beq	r6,zero,8047380 <_dtoa_r+0x1270>
 8047370:	a1800017 	ldw	r6,0(r20)
 8047374:	a1c00117 	ldw	r7,4(r20)
 8047378:	84000044 	addi	r16,r16,1
 804737c:	8042b780 	call	8042b78 <__muldf3>
 8047380:	a5000204 	addi	r20,r20,8
 8047384:	883ff51e 	bne	r17,zero,804735c <__alt_data_end+0xfffdf2bc>
 8047388:	d8800f15 	stw	r2,60(sp)
 804738c:	d8c01015 	stw	r3,64(sp)
 8047390:	003c7606 	br	804656c <__alt_data_end+0xfffde4cc>
 8047394:	00c00c04 	movi	r3,48
 8047398:	10c00005 	stb	r3,0(r2)
 804739c:	d8c00517 	ldw	r3,20(sp)
 80473a0:	bd3fffc3 	ldbu	r20,-1(r23)
 80473a4:	18c00044 	addi	r3,r3,1
 80473a8:	d8c00515 	stw	r3,20(sp)
 80473ac:	003db906 	br	8046a94 <__alt_data_end+0xfffde9f4>
 80473b0:	89400117 	ldw	r5,4(r17)
 80473b4:	e009883a 	mov	r4,fp
 80473b8:	8048de80 	call	8048de8 <_Balloc>
 80473bc:	89800417 	ldw	r6,16(r17)
 80473c0:	89400304 	addi	r5,r17,12
 80473c4:	11000304 	addi	r4,r2,12
 80473c8:	31800084 	addi	r6,r6,2
 80473cc:	318d883a 	add	r6,r6,r6
 80473d0:	318d883a 	add	r6,r6,r6
 80473d4:	1027883a 	mov	r19,r2
 80473d8:	80438b40 	call	80438b4 <memcpy>
 80473dc:	01800044 	movi	r6,1
 80473e0:	980b883a 	mov	r5,r19
 80473e4:	e009883a 	mov	r4,fp
 80473e8:	80496240 	call	8049624 <__lshift>
 80473ec:	1029883a 	mov	r20,r2
 80473f0:	003ecc06 	br	8046f24 <__alt_data_end+0xfffdee84>
 80473f4:	00800e44 	movi	r2,57
 80473f8:	90809026 	beq	r18,r2,804763c <_dtoa_r+0x152c>
 80473fc:	92000044 	addi	r8,r18,1
 8047400:	003f1f06 	br	8047080 <__alt_data_end+0xfffdefe0>
 8047404:	9011883a 	mov	r8,r18
 8047408:	8825883a 	mov	r18,r17
 804740c:	a023883a 	mov	r17,r20
 8047410:	003e2906 	br	8046cb8 <__alt_data_end+0xfffdec18>
 8047414:	002b883a 	mov	r21,zero
 8047418:	0023883a 	mov	r17,zero
 804741c:	003f5406 	br	8047170 <__alt_data_end+0xfffdf0d0>
 8047420:	61bfffc4 	addi	r6,r12,-1
 8047424:	300490fa 	slli	r2,r6,3
 8047428:	00c20174 	movhi	r3,2053
 804742c:	18cc5e04 	addi	r3,r3,12664
 8047430:	1885883a 	add	r2,r3,r2
 8047434:	11000017 	ldw	r4,0(r2)
 8047438:	11400117 	ldw	r5,4(r2)
 804743c:	d8800717 	ldw	r2,28(sp)
 8047440:	880f883a 	mov	r7,r17
 8047444:	d9801215 	stw	r6,72(sp)
 8047448:	800d883a 	mov	r6,r16
 804744c:	db001615 	stw	r12,88(sp)
 8047450:	15c00044 	addi	r23,r2,1
 8047454:	8042b780 	call	8042b78 <__muldf3>
 8047458:	d9401017 	ldw	r5,64(sp)
 804745c:	d9000f17 	ldw	r4,60(sp)
 8047460:	d8c01515 	stw	r3,84(sp)
 8047464:	d8801415 	stw	r2,80(sp)
 8047468:	804e8340 	call	804e834 <__fixdfsi>
 804746c:	1009883a 	mov	r4,r2
 8047470:	1021883a 	mov	r16,r2
 8047474:	804e8b40 	call	804e8b4 <__floatsidf>
 8047478:	d9000f17 	ldw	r4,60(sp)
 804747c:	d9401017 	ldw	r5,64(sp)
 8047480:	100d883a 	mov	r6,r2
 8047484:	180f883a 	mov	r7,r3
 8047488:	804df380 	call	804df38 <__subdf3>
 804748c:	1829883a 	mov	r20,r3
 8047490:	d8c00717 	ldw	r3,28(sp)
 8047494:	84000c04 	addi	r16,r16,48
 8047498:	1023883a 	mov	r17,r2
 804749c:	1c000005 	stb	r16,0(r3)
 80474a0:	db001617 	ldw	r12,88(sp)
 80474a4:	00800044 	movi	r2,1
 80474a8:	60802226 	beq	r12,r2,8047534 <_dtoa_r+0x1424>
 80474ac:	d9c00717 	ldw	r7,28(sp)
 80474b0:	8805883a 	mov	r2,r17
 80474b4:	b82b883a 	mov	r21,r23
 80474b8:	3b19883a 	add	r12,r7,r12
 80474bc:	6023883a 	mov	r17,r12
 80474c0:	a007883a 	mov	r3,r20
 80474c4:	dc800f15 	stw	r18,60(sp)
 80474c8:	000d883a 	mov	r6,zero
 80474cc:	01d00934 	movhi	r7,16420
 80474d0:	1009883a 	mov	r4,r2
 80474d4:	180b883a 	mov	r5,r3
 80474d8:	8042b780 	call	8042b78 <__muldf3>
 80474dc:	180b883a 	mov	r5,r3
 80474e0:	1009883a 	mov	r4,r2
 80474e4:	1829883a 	mov	r20,r3
 80474e8:	1025883a 	mov	r18,r2
 80474ec:	804e8340 	call	804e834 <__fixdfsi>
 80474f0:	1009883a 	mov	r4,r2
 80474f4:	1021883a 	mov	r16,r2
 80474f8:	804e8b40 	call	804e8b4 <__floatsidf>
 80474fc:	100d883a 	mov	r6,r2
 8047500:	180f883a 	mov	r7,r3
 8047504:	9009883a 	mov	r4,r18
 8047508:	a00b883a 	mov	r5,r20
 804750c:	84000c04 	addi	r16,r16,48
 8047510:	804df380 	call	804df38 <__subdf3>
 8047514:	ad400044 	addi	r21,r21,1
 8047518:	ac3fffc5 	stb	r16,-1(r21)
 804751c:	ac7fea1e 	bne	r21,r17,80474c8 <__alt_data_end+0xfffdf428>
 8047520:	1023883a 	mov	r17,r2
 8047524:	d8801217 	ldw	r2,72(sp)
 8047528:	dc800f17 	ldw	r18,60(sp)
 804752c:	1829883a 	mov	r20,r3
 8047530:	b8af883a 	add	r23,r23,r2
 8047534:	d9001417 	ldw	r4,80(sp)
 8047538:	d9401517 	ldw	r5,84(sp)
 804753c:	000d883a 	mov	r6,zero
 8047540:	01cff834 	movhi	r7,16352
 8047544:	804d6040 	call	804d604 <__adddf3>
 8047548:	880d883a 	mov	r6,r17
 804754c:	a00f883a 	mov	r7,r20
 8047550:	1009883a 	mov	r4,r2
 8047554:	180b883a 	mov	r5,r3
 8047558:	8042a840 	call	8042a84 <__ledf2>
 804755c:	10003e0e 	bge	r2,zero,8047658 <_dtoa_r+0x1548>
 8047560:	d9001317 	ldw	r4,76(sp)
 8047564:	bd3fffc3 	ldbu	r20,-1(r23)
 8047568:	d9000515 	stw	r4,20(sp)
 804756c:	003d3b06 	br	8046a5c <__alt_data_end+0xfffde9bc>
 8047570:	0027883a 	mov	r19,zero
 8047574:	003f1b06 	br	80471e4 <__alt_data_end+0xfffdf144>
 8047578:	d8800817 	ldw	r2,32(sp)
 804757c:	11e9c83a 	sub	r20,r2,r7
 8047580:	0005883a 	mov	r2,zero
 8047584:	003d5406 	br	8046ad8 <__alt_data_end+0xfffdea38>
 8047588:	00800044 	movi	r2,1
 804758c:	003dc706 	br	8046cac <__alt_data_end+0xfffdec0c>
 8047590:	d8c00217 	ldw	r3,8(sp)
 8047594:	00800d84 	movi	r2,54
 8047598:	dd400a17 	ldw	r21,40(sp)
 804759c:	10c5c83a 	sub	r2,r2,r3
 80475a0:	dd000817 	ldw	r20,32(sp)
 80475a4:	003d4c06 	br	8046ad8 <__alt_data_end+0xfffdea38>
 80475a8:	dc800f15 	stw	r18,60(sp)
 80475ac:	dcc01015 	stw	r19,64(sp)
 80475b0:	04000084 	movi	r16,2
 80475b4:	003bed06 	br	804656c <__alt_data_end+0xfffde4cc>
 80475b8:	d9000617 	ldw	r4,24(sp)
 80475bc:	203f0d26 	beq	r4,zero,80471f4 <__alt_data_end+0xfffdf154>
 80475c0:	d9800c17 	ldw	r6,48(sp)
 80475c4:	01bcab0e 	bge	zero,r6,8046874 <__alt_data_end+0xfffde7d4>
 80475c8:	d9401017 	ldw	r5,64(sp)
 80475cc:	d9000f17 	ldw	r4,60(sp)
 80475d0:	000d883a 	mov	r6,zero
 80475d4:	01d00934 	movhi	r7,16420
 80475d8:	8042b780 	call	8042b78 <__muldf3>
 80475dc:	81000044 	addi	r4,r16,1
 80475e0:	d8800f15 	stw	r2,60(sp)
 80475e4:	d8c01015 	stw	r3,64(sp)
 80475e8:	804e8b40 	call	804e8b4 <__floatsidf>
 80475ec:	d9800f17 	ldw	r6,60(sp)
 80475f0:	d9c01017 	ldw	r7,64(sp)
 80475f4:	1009883a 	mov	r4,r2
 80475f8:	180b883a 	mov	r5,r3
 80475fc:	8042b780 	call	8042b78 <__muldf3>
 8047600:	01d00734 	movhi	r7,16412
 8047604:	000d883a 	mov	r6,zero
 8047608:	1009883a 	mov	r4,r2
 804760c:	180b883a 	mov	r5,r3
 8047610:	804d6040 	call	804d604 <__adddf3>
 8047614:	d9c00517 	ldw	r7,20(sp)
 8047618:	047f3034 	movhi	r17,64704
 804761c:	1021883a 	mov	r16,r2
 8047620:	39ffffc4 	addi	r7,r7,-1
 8047624:	d9c01315 	stw	r7,76(sp)
 8047628:	1c63883a 	add	r17,r3,r17
 804762c:	db000c17 	ldw	r12,48(sp)
 8047630:	003bea06 	br	80465dc <__alt_data_end+0xfffde53c>
 8047634:	dc000915 	stw	r16,36(sp)
 8047638:	003e0e06 	br	8046e74 <__alt_data_end+0xfffdedd4>
 804763c:	01000e44 	movi	r4,57
 8047640:	8825883a 	mov	r18,r17
 8047644:	9dc00044 	addi	r23,r19,1
 8047648:	99000005 	stb	r4,0(r19)
 804764c:	a023883a 	mov	r17,r20
 8047650:	dc000915 	stw	r16,36(sp)
 8047654:	003da406 	br	8046ce8 <__alt_data_end+0xfffdec48>
 8047658:	d9801417 	ldw	r6,80(sp)
 804765c:	d9c01517 	ldw	r7,84(sp)
 8047660:	0009883a 	mov	r4,zero
 8047664:	014ff834 	movhi	r5,16352
 8047668:	804df380 	call	804df38 <__subdf3>
 804766c:	880d883a 	mov	r6,r17
 8047670:	a00f883a 	mov	r7,r20
 8047674:	1009883a 	mov	r4,r2
 8047678:	180b883a 	mov	r5,r3
 804767c:	80429a80 	call	80429a8 <__gedf2>
 8047680:	00bc7c0e 	bge	zero,r2,8046874 <__alt_data_end+0xfffde7d4>
 8047684:	01000c04 	movi	r4,48
 8047688:	00000106 	br	8047690 <_dtoa_r+0x1580>
 804768c:	102f883a 	mov	r23,r2
 8047690:	b8bfffc4 	addi	r2,r23,-1
 8047694:	10c00007 	ldb	r3,0(r2)
 8047698:	193ffc26 	beq	r3,r4,804768c <__alt_data_end+0xfffdf5ec>
 804769c:	d9801317 	ldw	r6,76(sp)
 80476a0:	d9800515 	stw	r6,20(sp)
 80476a4:	003c4406 	br	80467b8 <__alt_data_end+0xfffde718>
 80476a8:	d9801317 	ldw	r6,76(sp)
 80476ac:	d9800515 	stw	r6,20(sp)
 80476b0:	003cea06 	br	8046a5c <__alt_data_end+0xfffde9bc>
 80476b4:	dd800f17 	ldw	r22,60(sp)
 80476b8:	dcc01017 	ldw	r19,64(sp)
 80476bc:	dc801217 	ldw	r18,72(sp)
 80476c0:	003c6c06 	br	8046874 <__alt_data_end+0xfffde7d4>
 80476c4:	903e031e 	bne	r18,zero,8046ed4 <__alt_data_end+0xfffdee34>
 80476c8:	003ebb06 	br	80471b8 <__alt_data_end+0xfffdf118>
 80476cc:	103e6c1e 	bne	r2,zero,8047080 <__alt_data_end+0xfffdefe0>
 80476d0:	4080004c 	andi	r2,r8,1
 80476d4:	103e6a26 	beq	r2,zero,8047080 <__alt_data_end+0xfffdefe0>
 80476d8:	003e6606 	br	8047074 <__alt_data_end+0xfffdefd4>
 80476dc:	d8c00317 	ldw	r3,12(sp)
 80476e0:	00800084 	movi	r2,2
 80476e4:	10c02916 	blt	r2,r3,804778c <_dtoa_r+0x167c>
 80476e8:	d9000c17 	ldw	r4,48(sp)
 80476ec:	003e8806 	br	8047110 <__alt_data_end+0xfffdf070>
 80476f0:	04000084 	movi	r16,2
 80476f4:	003b9d06 	br	804656c <__alt_data_end+0xfffde4cc>
 80476f8:	d9001317 	ldw	r4,76(sp)
 80476fc:	d9000515 	stw	r4,20(sp)
 8047700:	003cd606 	br	8046a5c <__alt_data_end+0xfffde9bc>
 8047704:	d8801317 	ldw	r2,76(sp)
 8047708:	d8800515 	stw	r2,20(sp)
 804770c:	003c2a06 	br	80467b8 <__alt_data_end+0xfffde718>
 8047710:	d9800317 	ldw	r6,12(sp)
 8047714:	00800084 	movi	r2,2
 8047718:	11801516 	blt	r2,r6,8047770 <_dtoa_r+0x1660>
 804771c:	d9c00c17 	ldw	r7,48(sp)
 8047720:	d9c00615 	stw	r7,24(sp)
 8047724:	003df706 	br	8046f04 <__alt_data_end+0xfffdee64>
 8047728:	193d3926 	beq	r3,r4,8046c10 <__alt_data_end+0xfffdeb70>
 804772c:	00c00f04 	movi	r3,60
 8047730:	1885c83a 	sub	r2,r3,r2
 8047734:	003ddf06 	br	8046eb4 <__alt_data_end+0xfffdee14>
 8047738:	e009883a 	mov	r4,fp
 804773c:	e0001115 	stw	zero,68(fp)
 8047740:	000b883a 	mov	r5,zero
 8047744:	8048de80 	call	8048de8 <_Balloc>
 8047748:	d8800715 	stw	r2,28(sp)
 804774c:	d8c00717 	ldw	r3,28(sp)
 8047750:	00bfffc4 	movi	r2,-1
 8047754:	01000044 	movi	r4,1
 8047758:	d8800c15 	stw	r2,48(sp)
 804775c:	e0c01015 	stw	r3,64(fp)
 8047760:	d9000b15 	stw	r4,44(sp)
 8047764:	d8800615 	stw	r2,24(sp)
 8047768:	d8002215 	stw	zero,136(sp)
 804776c:	003c4106 	br	8046874 <__alt_data_end+0xfffde7d4>
 8047770:	d8c00c17 	ldw	r3,48(sp)
 8047774:	d8c00615 	stw	r3,24(sp)
 8047778:	003e7006 	br	804713c <__alt_data_end+0xfffdf09c>
 804777c:	04400044 	movi	r17,1
 8047780:	003b2006 	br	8046404 <__alt_data_end+0xfffde364>
 8047784:	000b883a 	mov	r5,zero
 8047788:	003b3d06 	br	8046480 <__alt_data_end+0xfffde3e0>
 804778c:	d8800c17 	ldw	r2,48(sp)
 8047790:	d8800615 	stw	r2,24(sp)
 8047794:	003e6906 	br	804713c <__alt_data_end+0xfffdf09c>

08047798 <__fp_unlock>:
 8047798:	0005883a 	mov	r2,zero
 804779c:	f800283a 	ret

080477a0 <_cleanup_r>:
 80477a0:	01420174 	movhi	r5,2053
 80477a4:	296fce04 	addi	r5,r5,-16584
 80477a8:	80480d41 	jmpi	80480d4 <_fwalk_reent>

080477ac <__sinit.part.1>:
 80477ac:	defff704 	addi	sp,sp,-36
 80477b0:	00c20134 	movhi	r3,2052
 80477b4:	dfc00815 	stw	ra,32(sp)
 80477b8:	ddc00715 	stw	r23,28(sp)
 80477bc:	dd800615 	stw	r22,24(sp)
 80477c0:	dd400515 	stw	r21,20(sp)
 80477c4:	dd000415 	stw	r20,16(sp)
 80477c8:	dcc00315 	stw	r19,12(sp)
 80477cc:	dc800215 	stw	r18,8(sp)
 80477d0:	dc400115 	stw	r17,4(sp)
 80477d4:	dc000015 	stw	r16,0(sp)
 80477d8:	18dde804 	addi	r3,r3,30624
 80477dc:	24000117 	ldw	r16,4(r4)
 80477e0:	20c00f15 	stw	r3,60(r4)
 80477e4:	2080bb04 	addi	r2,r4,748
 80477e8:	00c000c4 	movi	r3,3
 80477ec:	20c0b915 	stw	r3,740(r4)
 80477f0:	2080ba15 	stw	r2,744(r4)
 80477f4:	2000b815 	stw	zero,736(r4)
 80477f8:	05c00204 	movi	r23,8
 80477fc:	00800104 	movi	r2,4
 8047800:	2025883a 	mov	r18,r4
 8047804:	b80d883a 	mov	r6,r23
 8047808:	81001704 	addi	r4,r16,92
 804780c:	000b883a 	mov	r5,zero
 8047810:	80000015 	stw	zero,0(r16)
 8047814:	80000115 	stw	zero,4(r16)
 8047818:	80000215 	stw	zero,8(r16)
 804781c:	8080030d 	sth	r2,12(r16)
 8047820:	80001915 	stw	zero,100(r16)
 8047824:	8000038d 	sth	zero,14(r16)
 8047828:	80000415 	stw	zero,16(r16)
 804782c:	80000515 	stw	zero,20(r16)
 8047830:	80000615 	stw	zero,24(r16)
 8047834:	8048cc00 	call	8048cc0 <memset>
 8047838:	05820174 	movhi	r22,2053
 804783c:	94400217 	ldw	r17,8(r18)
 8047840:	05420174 	movhi	r21,2053
 8047844:	05020174 	movhi	r20,2053
 8047848:	04c20174 	movhi	r19,2053
 804784c:	b5a93304 	addi	r22,r22,-23348
 8047850:	ad694a04 	addi	r21,r21,-23256
 8047854:	a5296904 	addi	r20,r20,-23132
 8047858:	9ce98004 	addi	r19,r19,-23040
 804785c:	85800815 	stw	r22,32(r16)
 8047860:	85400915 	stw	r21,36(r16)
 8047864:	85000a15 	stw	r20,40(r16)
 8047868:	84c00b15 	stw	r19,44(r16)
 804786c:	84000715 	stw	r16,28(r16)
 8047870:	00800284 	movi	r2,10
 8047874:	8880030d 	sth	r2,12(r17)
 8047878:	00800044 	movi	r2,1
 804787c:	b80d883a 	mov	r6,r23
 8047880:	89001704 	addi	r4,r17,92
 8047884:	000b883a 	mov	r5,zero
 8047888:	88000015 	stw	zero,0(r17)
 804788c:	88000115 	stw	zero,4(r17)
 8047890:	88000215 	stw	zero,8(r17)
 8047894:	88001915 	stw	zero,100(r17)
 8047898:	8880038d 	sth	r2,14(r17)
 804789c:	88000415 	stw	zero,16(r17)
 80478a0:	88000515 	stw	zero,20(r17)
 80478a4:	88000615 	stw	zero,24(r17)
 80478a8:	8048cc00 	call	8048cc0 <memset>
 80478ac:	94000317 	ldw	r16,12(r18)
 80478b0:	00800484 	movi	r2,18
 80478b4:	8c400715 	stw	r17,28(r17)
 80478b8:	8d800815 	stw	r22,32(r17)
 80478bc:	8d400915 	stw	r21,36(r17)
 80478c0:	8d000a15 	stw	r20,40(r17)
 80478c4:	8cc00b15 	stw	r19,44(r17)
 80478c8:	8080030d 	sth	r2,12(r16)
 80478cc:	00800084 	movi	r2,2
 80478d0:	80000015 	stw	zero,0(r16)
 80478d4:	80000115 	stw	zero,4(r16)
 80478d8:	80000215 	stw	zero,8(r16)
 80478dc:	80001915 	stw	zero,100(r16)
 80478e0:	8080038d 	sth	r2,14(r16)
 80478e4:	80000415 	stw	zero,16(r16)
 80478e8:	80000515 	stw	zero,20(r16)
 80478ec:	80000615 	stw	zero,24(r16)
 80478f0:	b80d883a 	mov	r6,r23
 80478f4:	000b883a 	mov	r5,zero
 80478f8:	81001704 	addi	r4,r16,92
 80478fc:	8048cc00 	call	8048cc0 <memset>
 8047900:	00800044 	movi	r2,1
 8047904:	84000715 	stw	r16,28(r16)
 8047908:	85800815 	stw	r22,32(r16)
 804790c:	85400915 	stw	r21,36(r16)
 8047910:	85000a15 	stw	r20,40(r16)
 8047914:	84c00b15 	stw	r19,44(r16)
 8047918:	90800e15 	stw	r2,56(r18)
 804791c:	dfc00817 	ldw	ra,32(sp)
 8047920:	ddc00717 	ldw	r23,28(sp)
 8047924:	dd800617 	ldw	r22,24(sp)
 8047928:	dd400517 	ldw	r21,20(sp)
 804792c:	dd000417 	ldw	r20,16(sp)
 8047930:	dcc00317 	ldw	r19,12(sp)
 8047934:	dc800217 	ldw	r18,8(sp)
 8047938:	dc400117 	ldw	r17,4(sp)
 804793c:	dc000017 	ldw	r16,0(sp)
 8047940:	dec00904 	addi	sp,sp,36
 8047944:	f800283a 	ret

08047948 <__fp_lock>:
 8047948:	0005883a 	mov	r2,zero
 804794c:	f800283a 	ret

08047950 <__sfmoreglue>:
 8047950:	defffc04 	addi	sp,sp,-16
 8047954:	dc800215 	stw	r18,8(sp)
 8047958:	2825883a 	mov	r18,r5
 804795c:	dc000015 	stw	r16,0(sp)
 8047960:	01401a04 	movi	r5,104
 8047964:	2021883a 	mov	r16,r4
 8047968:	913fffc4 	addi	r4,r18,-1
 804796c:	dfc00315 	stw	ra,12(sp)
 8047970:	dc400115 	stw	r17,4(sp)
 8047974:	80418e00 	call	80418e0 <__mulsi3>
 8047978:	8009883a 	mov	r4,r16
 804797c:	11401d04 	addi	r5,r2,116
 8047980:	1023883a 	mov	r17,r2
 8047984:	80482740 	call	8048274 <_malloc_r>
 8047988:	1021883a 	mov	r16,r2
 804798c:	10000726 	beq	r2,zero,80479ac <__sfmoreglue+0x5c>
 8047990:	11000304 	addi	r4,r2,12
 8047994:	10000015 	stw	zero,0(r2)
 8047998:	14800115 	stw	r18,4(r2)
 804799c:	11000215 	stw	r4,8(r2)
 80479a0:	89801a04 	addi	r6,r17,104
 80479a4:	000b883a 	mov	r5,zero
 80479a8:	8048cc00 	call	8048cc0 <memset>
 80479ac:	8005883a 	mov	r2,r16
 80479b0:	dfc00317 	ldw	ra,12(sp)
 80479b4:	dc800217 	ldw	r18,8(sp)
 80479b8:	dc400117 	ldw	r17,4(sp)
 80479bc:	dc000017 	ldw	r16,0(sp)
 80479c0:	dec00404 	addi	sp,sp,16
 80479c4:	f800283a 	ret

080479c8 <__sfp>:
 80479c8:	defffb04 	addi	sp,sp,-20
 80479cc:	dc000015 	stw	r16,0(sp)
 80479d0:	04020174 	movhi	r16,2053
 80479d4:	8413ae04 	addi	r16,r16,20152
 80479d8:	dcc00315 	stw	r19,12(sp)
 80479dc:	2027883a 	mov	r19,r4
 80479e0:	81000017 	ldw	r4,0(r16)
 80479e4:	dfc00415 	stw	ra,16(sp)
 80479e8:	dc800215 	stw	r18,8(sp)
 80479ec:	20800e17 	ldw	r2,56(r4)
 80479f0:	dc400115 	stw	r17,4(sp)
 80479f4:	1000021e 	bne	r2,zero,8047a00 <__sfp+0x38>
 80479f8:	80477ac0 	call	80477ac <__sinit.part.1>
 80479fc:	81000017 	ldw	r4,0(r16)
 8047a00:	2480b804 	addi	r18,r4,736
 8047a04:	047fffc4 	movi	r17,-1
 8047a08:	91000117 	ldw	r4,4(r18)
 8047a0c:	94000217 	ldw	r16,8(r18)
 8047a10:	213fffc4 	addi	r4,r4,-1
 8047a14:	20000a16 	blt	r4,zero,8047a40 <__sfp+0x78>
 8047a18:	8080030f 	ldh	r2,12(r16)
 8047a1c:	10000c26 	beq	r2,zero,8047a50 <__sfp+0x88>
 8047a20:	80c01d04 	addi	r3,r16,116
 8047a24:	00000206 	br	8047a30 <__sfp+0x68>
 8047a28:	18bfe60f 	ldh	r2,-104(r3)
 8047a2c:	10000826 	beq	r2,zero,8047a50 <__sfp+0x88>
 8047a30:	213fffc4 	addi	r4,r4,-1
 8047a34:	1c3ffd04 	addi	r16,r3,-12
 8047a38:	18c01a04 	addi	r3,r3,104
 8047a3c:	247ffa1e 	bne	r4,r17,8047a28 <__alt_data_end+0xfffdf988>
 8047a40:	90800017 	ldw	r2,0(r18)
 8047a44:	10001d26 	beq	r2,zero,8047abc <__sfp+0xf4>
 8047a48:	1025883a 	mov	r18,r2
 8047a4c:	003fee06 	br	8047a08 <__alt_data_end+0xfffdf968>
 8047a50:	00bfffc4 	movi	r2,-1
 8047a54:	8080038d 	sth	r2,14(r16)
 8047a58:	00800044 	movi	r2,1
 8047a5c:	8080030d 	sth	r2,12(r16)
 8047a60:	80001915 	stw	zero,100(r16)
 8047a64:	80000015 	stw	zero,0(r16)
 8047a68:	80000215 	stw	zero,8(r16)
 8047a6c:	80000115 	stw	zero,4(r16)
 8047a70:	80000415 	stw	zero,16(r16)
 8047a74:	80000515 	stw	zero,20(r16)
 8047a78:	80000615 	stw	zero,24(r16)
 8047a7c:	01800204 	movi	r6,8
 8047a80:	000b883a 	mov	r5,zero
 8047a84:	81001704 	addi	r4,r16,92
 8047a88:	8048cc00 	call	8048cc0 <memset>
 8047a8c:	8005883a 	mov	r2,r16
 8047a90:	80000c15 	stw	zero,48(r16)
 8047a94:	80000d15 	stw	zero,52(r16)
 8047a98:	80001115 	stw	zero,68(r16)
 8047a9c:	80001215 	stw	zero,72(r16)
 8047aa0:	dfc00417 	ldw	ra,16(sp)
 8047aa4:	dcc00317 	ldw	r19,12(sp)
 8047aa8:	dc800217 	ldw	r18,8(sp)
 8047aac:	dc400117 	ldw	r17,4(sp)
 8047ab0:	dc000017 	ldw	r16,0(sp)
 8047ab4:	dec00504 	addi	sp,sp,20
 8047ab8:	f800283a 	ret
 8047abc:	01400104 	movi	r5,4
 8047ac0:	9809883a 	mov	r4,r19
 8047ac4:	80479500 	call	8047950 <__sfmoreglue>
 8047ac8:	90800015 	stw	r2,0(r18)
 8047acc:	103fde1e 	bne	r2,zero,8047a48 <__alt_data_end+0xfffdf9a8>
 8047ad0:	00800304 	movi	r2,12
 8047ad4:	98800015 	stw	r2,0(r19)
 8047ad8:	0005883a 	mov	r2,zero
 8047adc:	003ff006 	br	8047aa0 <__alt_data_end+0xfffdfa00>

08047ae0 <_cleanup>:
 8047ae0:	00820174 	movhi	r2,2053
 8047ae4:	1093ae04 	addi	r2,r2,20152
 8047ae8:	11000017 	ldw	r4,0(r2)
 8047aec:	01420174 	movhi	r5,2053
 8047af0:	296fce04 	addi	r5,r5,-16584
 8047af4:	80480d41 	jmpi	80480d4 <_fwalk_reent>

08047af8 <__sinit>:
 8047af8:	20800e17 	ldw	r2,56(r4)
 8047afc:	10000126 	beq	r2,zero,8047b04 <__sinit+0xc>
 8047b00:	f800283a 	ret
 8047b04:	80477ac1 	jmpi	80477ac <__sinit.part.1>

08047b08 <__sfp_lock_acquire>:
 8047b08:	f800283a 	ret

08047b0c <__sfp_lock_release>:
 8047b0c:	f800283a 	ret

08047b10 <__sinit_lock_acquire>:
 8047b10:	f800283a 	ret

08047b14 <__sinit_lock_release>:
 8047b14:	f800283a 	ret

08047b18 <__fp_lock_all>:
 8047b18:	00820174 	movhi	r2,2053
 8047b1c:	1093af04 	addi	r2,r2,20156
 8047b20:	11000017 	ldw	r4,0(r2)
 8047b24:	01420134 	movhi	r5,2052
 8047b28:	295e5204 	addi	r5,r5,31048
 8047b2c:	80480101 	jmpi	8048010 <_fwalk>

08047b30 <__fp_unlock_all>:
 8047b30:	00820174 	movhi	r2,2053
 8047b34:	1093af04 	addi	r2,r2,20156
 8047b38:	11000017 	ldw	r4,0(r2)
 8047b3c:	01420134 	movhi	r5,2052
 8047b40:	295de604 	addi	r5,r5,30616
 8047b44:	80480101 	jmpi	8048010 <_fwalk>

08047b48 <__sfvwrite_r>:
 8047b48:	30800217 	ldw	r2,8(r6)
 8047b4c:	10006726 	beq	r2,zero,8047cec <__sfvwrite_r+0x1a4>
 8047b50:	28c0030b 	ldhu	r3,12(r5)
 8047b54:	defff404 	addi	sp,sp,-48
 8047b58:	dd400715 	stw	r21,28(sp)
 8047b5c:	dd000615 	stw	r20,24(sp)
 8047b60:	dc000215 	stw	r16,8(sp)
 8047b64:	dfc00b15 	stw	ra,44(sp)
 8047b68:	df000a15 	stw	fp,40(sp)
 8047b6c:	ddc00915 	stw	r23,36(sp)
 8047b70:	dd800815 	stw	r22,32(sp)
 8047b74:	dcc00515 	stw	r19,20(sp)
 8047b78:	dc800415 	stw	r18,16(sp)
 8047b7c:	dc400315 	stw	r17,12(sp)
 8047b80:	1880020c 	andi	r2,r3,8
 8047b84:	2821883a 	mov	r16,r5
 8047b88:	202b883a 	mov	r21,r4
 8047b8c:	3029883a 	mov	r20,r6
 8047b90:	10002726 	beq	r2,zero,8047c30 <__sfvwrite_r+0xe8>
 8047b94:	28800417 	ldw	r2,16(r5)
 8047b98:	10002526 	beq	r2,zero,8047c30 <__sfvwrite_r+0xe8>
 8047b9c:	1880008c 	andi	r2,r3,2
 8047ba0:	a4400017 	ldw	r17,0(r20)
 8047ba4:	10002a26 	beq	r2,zero,8047c50 <__sfvwrite_r+0x108>
 8047ba8:	05a00034 	movhi	r22,32768
 8047bac:	0027883a 	mov	r19,zero
 8047bb0:	0025883a 	mov	r18,zero
 8047bb4:	b5bf0004 	addi	r22,r22,-1024
 8047bb8:	980d883a 	mov	r6,r19
 8047bbc:	a809883a 	mov	r4,r21
 8047bc0:	90004626 	beq	r18,zero,8047cdc <__sfvwrite_r+0x194>
 8047bc4:	900f883a 	mov	r7,r18
 8047bc8:	b480022e 	bgeu	r22,r18,8047bd4 <__sfvwrite_r+0x8c>
 8047bcc:	01e00034 	movhi	r7,32768
 8047bd0:	39ff0004 	addi	r7,r7,-1024
 8047bd4:	80800917 	ldw	r2,36(r16)
 8047bd8:	81400717 	ldw	r5,28(r16)
 8047bdc:	103ee83a 	callr	r2
 8047be0:	00805a0e 	bge	zero,r2,8047d4c <__sfvwrite_r+0x204>
 8047be4:	a0c00217 	ldw	r3,8(r20)
 8047be8:	98a7883a 	add	r19,r19,r2
 8047bec:	90a5c83a 	sub	r18,r18,r2
 8047bf0:	1885c83a 	sub	r2,r3,r2
 8047bf4:	a0800215 	stw	r2,8(r20)
 8047bf8:	103fef1e 	bne	r2,zero,8047bb8 <__alt_data_end+0xfffdfb18>
 8047bfc:	0005883a 	mov	r2,zero
 8047c00:	dfc00b17 	ldw	ra,44(sp)
 8047c04:	df000a17 	ldw	fp,40(sp)
 8047c08:	ddc00917 	ldw	r23,36(sp)
 8047c0c:	dd800817 	ldw	r22,32(sp)
 8047c10:	dd400717 	ldw	r21,28(sp)
 8047c14:	dd000617 	ldw	r20,24(sp)
 8047c18:	dcc00517 	ldw	r19,20(sp)
 8047c1c:	dc800417 	ldw	r18,16(sp)
 8047c20:	dc400317 	ldw	r17,12(sp)
 8047c24:	dc000217 	ldw	r16,8(sp)
 8047c28:	dec00c04 	addi	sp,sp,48
 8047c2c:	f800283a 	ret
 8047c30:	800b883a 	mov	r5,r16
 8047c34:	a809883a 	mov	r4,r21
 8047c38:	804bcb40 	call	804bcb4 <__swsetup_r>
 8047c3c:	1000ee1e 	bne	r2,zero,8047ff8 <__sfvwrite_r+0x4b0>
 8047c40:	80c0030b 	ldhu	r3,12(r16)
 8047c44:	a4400017 	ldw	r17,0(r20)
 8047c48:	1880008c 	andi	r2,r3,2
 8047c4c:	103fd61e 	bne	r2,zero,8047ba8 <__alt_data_end+0xfffdfb08>
 8047c50:	1880004c 	andi	r2,r3,1
 8047c54:	1000421e 	bne	r2,zero,8047d60 <__sfvwrite_r+0x218>
 8047c58:	0039883a 	mov	fp,zero
 8047c5c:	0025883a 	mov	r18,zero
 8047c60:	90001a26 	beq	r18,zero,8047ccc <__sfvwrite_r+0x184>
 8047c64:	1880800c 	andi	r2,r3,512
 8047c68:	84c00217 	ldw	r19,8(r16)
 8047c6c:	10002126 	beq	r2,zero,8047cf4 <__sfvwrite_r+0x1ac>
 8047c70:	982f883a 	mov	r23,r19
 8047c74:	94c09636 	bltu	r18,r19,8047ed0 <__sfvwrite_r+0x388>
 8047c78:	1881200c 	andi	r2,r3,1152
 8047c7c:	1000a11e 	bne	r2,zero,8047f04 <__sfvwrite_r+0x3bc>
 8047c80:	81000017 	ldw	r4,0(r16)
 8047c84:	b80d883a 	mov	r6,r23
 8047c88:	e00b883a 	mov	r5,fp
 8047c8c:	8048b640 	call	8048b64 <memmove>
 8047c90:	80c00217 	ldw	r3,8(r16)
 8047c94:	81000017 	ldw	r4,0(r16)
 8047c98:	9005883a 	mov	r2,r18
 8047c9c:	1ce7c83a 	sub	r19,r3,r19
 8047ca0:	25cf883a 	add	r7,r4,r23
 8047ca4:	84c00215 	stw	r19,8(r16)
 8047ca8:	81c00015 	stw	r7,0(r16)
 8047cac:	a0c00217 	ldw	r3,8(r20)
 8047cb0:	e0b9883a 	add	fp,fp,r2
 8047cb4:	90a5c83a 	sub	r18,r18,r2
 8047cb8:	18a7c83a 	sub	r19,r3,r2
 8047cbc:	a4c00215 	stw	r19,8(r20)
 8047cc0:	983fce26 	beq	r19,zero,8047bfc <__alt_data_end+0xfffdfb5c>
 8047cc4:	80c0030b 	ldhu	r3,12(r16)
 8047cc8:	903fe61e 	bne	r18,zero,8047c64 <__alt_data_end+0xfffdfbc4>
 8047ccc:	8f000017 	ldw	fp,0(r17)
 8047cd0:	8c800117 	ldw	r18,4(r17)
 8047cd4:	8c400204 	addi	r17,r17,8
 8047cd8:	003fe106 	br	8047c60 <__alt_data_end+0xfffdfbc0>
 8047cdc:	8cc00017 	ldw	r19,0(r17)
 8047ce0:	8c800117 	ldw	r18,4(r17)
 8047ce4:	8c400204 	addi	r17,r17,8
 8047ce8:	003fb306 	br	8047bb8 <__alt_data_end+0xfffdfb18>
 8047cec:	0005883a 	mov	r2,zero
 8047cf0:	f800283a 	ret
 8047cf4:	81000017 	ldw	r4,0(r16)
 8047cf8:	80800417 	ldw	r2,16(r16)
 8047cfc:	11005a36 	bltu	r2,r4,8047e68 <__sfvwrite_r+0x320>
 8047d00:	85c00517 	ldw	r23,20(r16)
 8047d04:	95c05836 	bltu	r18,r23,8047e68 <__sfvwrite_r+0x320>
 8047d08:	00a00034 	movhi	r2,32768
 8047d0c:	10bfffc4 	addi	r2,r2,-1
 8047d10:	9009883a 	mov	r4,r18
 8047d14:	1480012e 	bgeu	r2,r18,8047d1c <__sfvwrite_r+0x1d4>
 8047d18:	1009883a 	mov	r4,r2
 8047d1c:	b80b883a 	mov	r5,r23
 8047d20:	80437000 	call	8043700 <__divsi3>
 8047d24:	b80b883a 	mov	r5,r23
 8047d28:	1009883a 	mov	r4,r2
 8047d2c:	80418e00 	call	80418e0 <__mulsi3>
 8047d30:	81400717 	ldw	r5,28(r16)
 8047d34:	80c00917 	ldw	r3,36(r16)
 8047d38:	100f883a 	mov	r7,r2
 8047d3c:	e00d883a 	mov	r6,fp
 8047d40:	a809883a 	mov	r4,r21
 8047d44:	183ee83a 	callr	r3
 8047d48:	00bfd816 	blt	zero,r2,8047cac <__alt_data_end+0xfffdfc0c>
 8047d4c:	8080030b 	ldhu	r2,12(r16)
 8047d50:	10801014 	ori	r2,r2,64
 8047d54:	8080030d 	sth	r2,12(r16)
 8047d58:	00bfffc4 	movi	r2,-1
 8047d5c:	003fa806 	br	8047c00 <__alt_data_end+0xfffdfb60>
 8047d60:	0027883a 	mov	r19,zero
 8047d64:	0011883a 	mov	r8,zero
 8047d68:	0039883a 	mov	fp,zero
 8047d6c:	0025883a 	mov	r18,zero
 8047d70:	90001f26 	beq	r18,zero,8047df0 <__sfvwrite_r+0x2a8>
 8047d74:	40005a26 	beq	r8,zero,8047ee0 <__sfvwrite_r+0x398>
 8047d78:	982d883a 	mov	r22,r19
 8047d7c:	94c0012e 	bgeu	r18,r19,8047d84 <__sfvwrite_r+0x23c>
 8047d80:	902d883a 	mov	r22,r18
 8047d84:	81000017 	ldw	r4,0(r16)
 8047d88:	80800417 	ldw	r2,16(r16)
 8047d8c:	b02f883a 	mov	r23,r22
 8047d90:	81c00517 	ldw	r7,20(r16)
 8047d94:	1100032e 	bgeu	r2,r4,8047da4 <__sfvwrite_r+0x25c>
 8047d98:	80c00217 	ldw	r3,8(r16)
 8047d9c:	38c7883a 	add	r3,r7,r3
 8047da0:	1d801816 	blt	r3,r22,8047e04 <__sfvwrite_r+0x2bc>
 8047da4:	b1c03e16 	blt	r22,r7,8047ea0 <__sfvwrite_r+0x358>
 8047da8:	80800917 	ldw	r2,36(r16)
 8047dac:	81400717 	ldw	r5,28(r16)
 8047db0:	e00d883a 	mov	r6,fp
 8047db4:	da000115 	stw	r8,4(sp)
 8047db8:	a809883a 	mov	r4,r21
 8047dbc:	103ee83a 	callr	r2
 8047dc0:	102f883a 	mov	r23,r2
 8047dc4:	da000117 	ldw	r8,4(sp)
 8047dc8:	00bfe00e 	bge	zero,r2,8047d4c <__alt_data_end+0xfffdfcac>
 8047dcc:	9de7c83a 	sub	r19,r19,r23
 8047dd0:	98001f26 	beq	r19,zero,8047e50 <__sfvwrite_r+0x308>
 8047dd4:	a0800217 	ldw	r2,8(r20)
 8047dd8:	e5f9883a 	add	fp,fp,r23
 8047ddc:	95e5c83a 	sub	r18,r18,r23
 8047de0:	15efc83a 	sub	r23,r2,r23
 8047de4:	a5c00215 	stw	r23,8(r20)
 8047de8:	b83f8426 	beq	r23,zero,8047bfc <__alt_data_end+0xfffdfb5c>
 8047dec:	903fe11e 	bne	r18,zero,8047d74 <__alt_data_end+0xfffdfcd4>
 8047df0:	8f000017 	ldw	fp,0(r17)
 8047df4:	8c800117 	ldw	r18,4(r17)
 8047df8:	0011883a 	mov	r8,zero
 8047dfc:	8c400204 	addi	r17,r17,8
 8047e00:	003fdb06 	br	8047d70 <__alt_data_end+0xfffdfcd0>
 8047e04:	180d883a 	mov	r6,r3
 8047e08:	e00b883a 	mov	r5,fp
 8047e0c:	da000115 	stw	r8,4(sp)
 8047e10:	d8c00015 	stw	r3,0(sp)
 8047e14:	8048b640 	call	8048b64 <memmove>
 8047e18:	d8c00017 	ldw	r3,0(sp)
 8047e1c:	80800017 	ldw	r2,0(r16)
 8047e20:	800b883a 	mov	r5,r16
 8047e24:	a809883a 	mov	r4,r21
 8047e28:	10c5883a 	add	r2,r2,r3
 8047e2c:	80800015 	stw	r2,0(r16)
 8047e30:	d8c00015 	stw	r3,0(sp)
 8047e34:	804c2580 	call	804c258 <_fflush_r>
 8047e38:	d8c00017 	ldw	r3,0(sp)
 8047e3c:	da000117 	ldw	r8,4(sp)
 8047e40:	103fc21e 	bne	r2,zero,8047d4c <__alt_data_end+0xfffdfcac>
 8047e44:	182f883a 	mov	r23,r3
 8047e48:	9de7c83a 	sub	r19,r19,r23
 8047e4c:	983fe11e 	bne	r19,zero,8047dd4 <__alt_data_end+0xfffdfd34>
 8047e50:	800b883a 	mov	r5,r16
 8047e54:	a809883a 	mov	r4,r21
 8047e58:	804c2580 	call	804c258 <_fflush_r>
 8047e5c:	103fbb1e 	bne	r2,zero,8047d4c <__alt_data_end+0xfffdfcac>
 8047e60:	0011883a 	mov	r8,zero
 8047e64:	003fdb06 	br	8047dd4 <__alt_data_end+0xfffdfd34>
 8047e68:	94c0012e 	bgeu	r18,r19,8047e70 <__sfvwrite_r+0x328>
 8047e6c:	9027883a 	mov	r19,r18
 8047e70:	980d883a 	mov	r6,r19
 8047e74:	e00b883a 	mov	r5,fp
 8047e78:	8048b640 	call	8048b64 <memmove>
 8047e7c:	80800217 	ldw	r2,8(r16)
 8047e80:	80c00017 	ldw	r3,0(r16)
 8047e84:	14c5c83a 	sub	r2,r2,r19
 8047e88:	1cc7883a 	add	r3,r3,r19
 8047e8c:	80800215 	stw	r2,8(r16)
 8047e90:	80c00015 	stw	r3,0(r16)
 8047e94:	10004326 	beq	r2,zero,8047fa4 <__sfvwrite_r+0x45c>
 8047e98:	9805883a 	mov	r2,r19
 8047e9c:	003f8306 	br	8047cac <__alt_data_end+0xfffdfc0c>
 8047ea0:	b00d883a 	mov	r6,r22
 8047ea4:	e00b883a 	mov	r5,fp
 8047ea8:	da000115 	stw	r8,4(sp)
 8047eac:	8048b640 	call	8048b64 <memmove>
 8047eb0:	80800217 	ldw	r2,8(r16)
 8047eb4:	80c00017 	ldw	r3,0(r16)
 8047eb8:	da000117 	ldw	r8,4(sp)
 8047ebc:	1585c83a 	sub	r2,r2,r22
 8047ec0:	1dad883a 	add	r22,r3,r22
 8047ec4:	80800215 	stw	r2,8(r16)
 8047ec8:	85800015 	stw	r22,0(r16)
 8047ecc:	003fbf06 	br	8047dcc <__alt_data_end+0xfffdfd2c>
 8047ed0:	81000017 	ldw	r4,0(r16)
 8047ed4:	9027883a 	mov	r19,r18
 8047ed8:	902f883a 	mov	r23,r18
 8047edc:	003f6906 	br	8047c84 <__alt_data_end+0xfffdfbe4>
 8047ee0:	900d883a 	mov	r6,r18
 8047ee4:	01400284 	movi	r5,10
 8047ee8:	e009883a 	mov	r4,fp
 8047eec:	8048a800 	call	8048a80 <memchr>
 8047ef0:	10003e26 	beq	r2,zero,8047fec <__sfvwrite_r+0x4a4>
 8047ef4:	10800044 	addi	r2,r2,1
 8047ef8:	1727c83a 	sub	r19,r2,fp
 8047efc:	02000044 	movi	r8,1
 8047f00:	003f9d06 	br	8047d78 <__alt_data_end+0xfffdfcd8>
 8047f04:	80800517 	ldw	r2,20(r16)
 8047f08:	81400417 	ldw	r5,16(r16)
 8047f0c:	81c00017 	ldw	r7,0(r16)
 8047f10:	10a7883a 	add	r19,r2,r2
 8047f14:	9885883a 	add	r2,r19,r2
 8047f18:	1026d7fa 	srli	r19,r2,31
 8047f1c:	396dc83a 	sub	r22,r7,r5
 8047f20:	b1000044 	addi	r4,r22,1
 8047f24:	9885883a 	add	r2,r19,r2
 8047f28:	1027d07a 	srai	r19,r2,1
 8047f2c:	2485883a 	add	r2,r4,r18
 8047f30:	980d883a 	mov	r6,r19
 8047f34:	9880022e 	bgeu	r19,r2,8047f40 <__sfvwrite_r+0x3f8>
 8047f38:	1027883a 	mov	r19,r2
 8047f3c:	100d883a 	mov	r6,r2
 8047f40:	18c1000c 	andi	r3,r3,1024
 8047f44:	18001c26 	beq	r3,zero,8047fb8 <__sfvwrite_r+0x470>
 8047f48:	300b883a 	mov	r5,r6
 8047f4c:	a809883a 	mov	r4,r21
 8047f50:	80482740 	call	8048274 <_malloc_r>
 8047f54:	102f883a 	mov	r23,r2
 8047f58:	10002926 	beq	r2,zero,8048000 <__sfvwrite_r+0x4b8>
 8047f5c:	81400417 	ldw	r5,16(r16)
 8047f60:	b00d883a 	mov	r6,r22
 8047f64:	1009883a 	mov	r4,r2
 8047f68:	80438b40 	call	80438b4 <memcpy>
 8047f6c:	8080030b 	ldhu	r2,12(r16)
 8047f70:	00fedfc4 	movi	r3,-1153
 8047f74:	10c4703a 	and	r2,r2,r3
 8047f78:	10802014 	ori	r2,r2,128
 8047f7c:	8080030d 	sth	r2,12(r16)
 8047f80:	bd89883a 	add	r4,r23,r22
 8047f84:	9d8fc83a 	sub	r7,r19,r22
 8047f88:	85c00415 	stw	r23,16(r16)
 8047f8c:	84c00515 	stw	r19,20(r16)
 8047f90:	81000015 	stw	r4,0(r16)
 8047f94:	9027883a 	mov	r19,r18
 8047f98:	81c00215 	stw	r7,8(r16)
 8047f9c:	902f883a 	mov	r23,r18
 8047fa0:	003f3806 	br	8047c84 <__alt_data_end+0xfffdfbe4>
 8047fa4:	800b883a 	mov	r5,r16
 8047fa8:	a809883a 	mov	r4,r21
 8047fac:	804c2580 	call	804c258 <_fflush_r>
 8047fb0:	103fb926 	beq	r2,zero,8047e98 <__alt_data_end+0xfffdfdf8>
 8047fb4:	003f6506 	br	8047d4c <__alt_data_end+0xfffdfcac>
 8047fb8:	a809883a 	mov	r4,r21
 8047fbc:	8049ea00 	call	8049ea0 <_realloc_r>
 8047fc0:	102f883a 	mov	r23,r2
 8047fc4:	103fee1e 	bne	r2,zero,8047f80 <__alt_data_end+0xfffdfee0>
 8047fc8:	81400417 	ldw	r5,16(r16)
 8047fcc:	a809883a 	mov	r4,r21
 8047fd0:	804c4080 	call	804c408 <_free_r>
 8047fd4:	8080030b 	ldhu	r2,12(r16)
 8047fd8:	00ffdfc4 	movi	r3,-129
 8047fdc:	1884703a 	and	r2,r3,r2
 8047fe0:	00c00304 	movi	r3,12
 8047fe4:	a8c00015 	stw	r3,0(r21)
 8047fe8:	003f5906 	br	8047d50 <__alt_data_end+0xfffdfcb0>
 8047fec:	94c00044 	addi	r19,r18,1
 8047ff0:	02000044 	movi	r8,1
 8047ff4:	003f6006 	br	8047d78 <__alt_data_end+0xfffdfcd8>
 8047ff8:	00bfffc4 	movi	r2,-1
 8047ffc:	003f0006 	br	8047c00 <__alt_data_end+0xfffdfb60>
 8048000:	00800304 	movi	r2,12
 8048004:	a8800015 	stw	r2,0(r21)
 8048008:	8080030b 	ldhu	r2,12(r16)
 804800c:	003f5006 	br	8047d50 <__alt_data_end+0xfffdfcb0>

08048010 <_fwalk>:
 8048010:	defff704 	addi	sp,sp,-36
 8048014:	dd000415 	stw	r20,16(sp)
 8048018:	dfc00815 	stw	ra,32(sp)
 804801c:	ddc00715 	stw	r23,28(sp)
 8048020:	dd800615 	stw	r22,24(sp)
 8048024:	dd400515 	stw	r21,20(sp)
 8048028:	dcc00315 	stw	r19,12(sp)
 804802c:	dc800215 	stw	r18,8(sp)
 8048030:	dc400115 	stw	r17,4(sp)
 8048034:	dc000015 	stw	r16,0(sp)
 8048038:	2500b804 	addi	r20,r4,736
 804803c:	a0002326 	beq	r20,zero,80480cc <_fwalk+0xbc>
 8048040:	282b883a 	mov	r21,r5
 8048044:	002f883a 	mov	r23,zero
 8048048:	05800044 	movi	r22,1
 804804c:	04ffffc4 	movi	r19,-1
 8048050:	a4400117 	ldw	r17,4(r20)
 8048054:	a4800217 	ldw	r18,8(r20)
 8048058:	8c7fffc4 	addi	r17,r17,-1
 804805c:	88000d16 	blt	r17,zero,8048094 <_fwalk+0x84>
 8048060:	94000304 	addi	r16,r18,12
 8048064:	94800384 	addi	r18,r18,14
 8048068:	8080000b 	ldhu	r2,0(r16)
 804806c:	8c7fffc4 	addi	r17,r17,-1
 8048070:	813ffd04 	addi	r4,r16,-12
 8048074:	b080042e 	bgeu	r22,r2,8048088 <_fwalk+0x78>
 8048078:	9080000f 	ldh	r2,0(r18)
 804807c:	14c00226 	beq	r2,r19,8048088 <_fwalk+0x78>
 8048080:	a83ee83a 	callr	r21
 8048084:	b8aeb03a 	or	r23,r23,r2
 8048088:	84001a04 	addi	r16,r16,104
 804808c:	94801a04 	addi	r18,r18,104
 8048090:	8cfff51e 	bne	r17,r19,8048068 <__alt_data_end+0xfffdffc8>
 8048094:	a5000017 	ldw	r20,0(r20)
 8048098:	a03fed1e 	bne	r20,zero,8048050 <__alt_data_end+0xfffdffb0>
 804809c:	b805883a 	mov	r2,r23
 80480a0:	dfc00817 	ldw	ra,32(sp)
 80480a4:	ddc00717 	ldw	r23,28(sp)
 80480a8:	dd800617 	ldw	r22,24(sp)
 80480ac:	dd400517 	ldw	r21,20(sp)
 80480b0:	dd000417 	ldw	r20,16(sp)
 80480b4:	dcc00317 	ldw	r19,12(sp)
 80480b8:	dc800217 	ldw	r18,8(sp)
 80480bc:	dc400117 	ldw	r17,4(sp)
 80480c0:	dc000017 	ldw	r16,0(sp)
 80480c4:	dec00904 	addi	sp,sp,36
 80480c8:	f800283a 	ret
 80480cc:	002f883a 	mov	r23,zero
 80480d0:	003ff206 	br	804809c <__alt_data_end+0xfffdfffc>

080480d4 <_fwalk_reent>:
 80480d4:	defff704 	addi	sp,sp,-36
 80480d8:	dd000415 	stw	r20,16(sp)
 80480dc:	dfc00815 	stw	ra,32(sp)
 80480e0:	ddc00715 	stw	r23,28(sp)
 80480e4:	dd800615 	stw	r22,24(sp)
 80480e8:	dd400515 	stw	r21,20(sp)
 80480ec:	dcc00315 	stw	r19,12(sp)
 80480f0:	dc800215 	stw	r18,8(sp)
 80480f4:	dc400115 	stw	r17,4(sp)
 80480f8:	dc000015 	stw	r16,0(sp)
 80480fc:	2500b804 	addi	r20,r4,736
 8048100:	a0002326 	beq	r20,zero,8048190 <_fwalk_reent+0xbc>
 8048104:	282b883a 	mov	r21,r5
 8048108:	2027883a 	mov	r19,r4
 804810c:	002f883a 	mov	r23,zero
 8048110:	05800044 	movi	r22,1
 8048114:	04bfffc4 	movi	r18,-1
 8048118:	a4400117 	ldw	r17,4(r20)
 804811c:	a4000217 	ldw	r16,8(r20)
 8048120:	8c7fffc4 	addi	r17,r17,-1
 8048124:	88000c16 	blt	r17,zero,8048158 <_fwalk_reent+0x84>
 8048128:	84000304 	addi	r16,r16,12
 804812c:	8080000b 	ldhu	r2,0(r16)
 8048130:	8c7fffc4 	addi	r17,r17,-1
 8048134:	817ffd04 	addi	r5,r16,-12
 8048138:	b080052e 	bgeu	r22,r2,8048150 <_fwalk_reent+0x7c>
 804813c:	8080008f 	ldh	r2,2(r16)
 8048140:	9809883a 	mov	r4,r19
 8048144:	14800226 	beq	r2,r18,8048150 <_fwalk_reent+0x7c>
 8048148:	a83ee83a 	callr	r21
 804814c:	b8aeb03a 	or	r23,r23,r2
 8048150:	84001a04 	addi	r16,r16,104
 8048154:	8cbff51e 	bne	r17,r18,804812c <__alt_data_end+0xfffe008c>
 8048158:	a5000017 	ldw	r20,0(r20)
 804815c:	a03fee1e 	bne	r20,zero,8048118 <__alt_data_end+0xfffe0078>
 8048160:	b805883a 	mov	r2,r23
 8048164:	dfc00817 	ldw	ra,32(sp)
 8048168:	ddc00717 	ldw	r23,28(sp)
 804816c:	dd800617 	ldw	r22,24(sp)
 8048170:	dd400517 	ldw	r21,20(sp)
 8048174:	dd000417 	ldw	r20,16(sp)
 8048178:	dcc00317 	ldw	r19,12(sp)
 804817c:	dc800217 	ldw	r18,8(sp)
 8048180:	dc400117 	ldw	r17,4(sp)
 8048184:	dc000017 	ldw	r16,0(sp)
 8048188:	dec00904 	addi	sp,sp,36
 804818c:	f800283a 	ret
 8048190:	002f883a 	mov	r23,zero
 8048194:	003ff206 	br	8048160 <__alt_data_end+0xfffe00c0>

08048198 <_setlocale_r>:
 8048198:	30001b26 	beq	r6,zero,8048208 <_setlocale_r+0x70>
 804819c:	01420174 	movhi	r5,2053
 80481a0:	defffe04 	addi	sp,sp,-8
 80481a4:	294c4404 	addi	r5,r5,12560
 80481a8:	3009883a 	mov	r4,r6
 80481ac:	dc000015 	stw	r16,0(sp)
 80481b0:	dfc00115 	stw	ra,4(sp)
 80481b4:	3021883a 	mov	r16,r6
 80481b8:	804a6080 	call	804a608 <strcmp>
 80481bc:	1000061e 	bne	r2,zero,80481d8 <_setlocale_r+0x40>
 80481c0:	00820174 	movhi	r2,2053
 80481c4:	108c4304 	addi	r2,r2,12556
 80481c8:	dfc00117 	ldw	ra,4(sp)
 80481cc:	dc000017 	ldw	r16,0(sp)
 80481d0:	dec00204 	addi	sp,sp,8
 80481d4:	f800283a 	ret
 80481d8:	01420174 	movhi	r5,2053
 80481dc:	294c4304 	addi	r5,r5,12556
 80481e0:	8009883a 	mov	r4,r16
 80481e4:	804a6080 	call	804a608 <strcmp>
 80481e8:	103ff526 	beq	r2,zero,80481c0 <__alt_data_end+0xfffe0120>
 80481ec:	01420174 	movhi	r5,2053
 80481f0:	294c2e04 	addi	r5,r5,12472
 80481f4:	8009883a 	mov	r4,r16
 80481f8:	804a6080 	call	804a608 <strcmp>
 80481fc:	103ff026 	beq	r2,zero,80481c0 <__alt_data_end+0xfffe0120>
 8048200:	0005883a 	mov	r2,zero
 8048204:	003ff006 	br	80481c8 <__alt_data_end+0xfffe0128>
 8048208:	00820174 	movhi	r2,2053
 804820c:	108c4304 	addi	r2,r2,12556
 8048210:	f800283a 	ret

08048214 <__locale_charset>:
 8048214:	00820174 	movhi	r2,2053
 8048218:	108dde04 	addi	r2,r2,14200
 804821c:	f800283a 	ret

08048220 <__locale_mb_cur_max>:
 8048220:	00820174 	movhi	r2,2053
 8048224:	1093b004 	addi	r2,r2,20160
 8048228:	10800017 	ldw	r2,0(r2)
 804822c:	f800283a 	ret

08048230 <__locale_msgcharset>:
 8048230:	00820174 	movhi	r2,2053
 8048234:	108dd604 	addi	r2,r2,14168
 8048238:	f800283a 	ret

0804823c <__locale_cjk_lang>:
 804823c:	0005883a 	mov	r2,zero
 8048240:	f800283a 	ret

08048244 <_localeconv_r>:
 8048244:	00820174 	movhi	r2,2053
 8048248:	108de604 	addi	r2,r2,14232
 804824c:	f800283a 	ret

08048250 <setlocale>:
 8048250:	00820174 	movhi	r2,2053
 8048254:	1093af04 	addi	r2,r2,20156
 8048258:	280d883a 	mov	r6,r5
 804825c:	200b883a 	mov	r5,r4
 8048260:	11000017 	ldw	r4,0(r2)
 8048264:	80481981 	jmpi	8048198 <_setlocale_r>

08048268 <localeconv>:
 8048268:	00820174 	movhi	r2,2053
 804826c:	108de604 	addi	r2,r2,14232
 8048270:	f800283a 	ret

08048274 <_malloc_r>:
 8048274:	defff504 	addi	sp,sp,-44
 8048278:	dc800315 	stw	r18,12(sp)
 804827c:	dfc00a15 	stw	ra,40(sp)
 8048280:	df000915 	stw	fp,36(sp)
 8048284:	ddc00815 	stw	r23,32(sp)
 8048288:	dd800715 	stw	r22,28(sp)
 804828c:	dd400615 	stw	r21,24(sp)
 8048290:	dd000515 	stw	r20,20(sp)
 8048294:	dcc00415 	stw	r19,16(sp)
 8048298:	dc400215 	stw	r17,8(sp)
 804829c:	dc000115 	stw	r16,4(sp)
 80482a0:	288002c4 	addi	r2,r5,11
 80482a4:	00c00584 	movi	r3,22
 80482a8:	2025883a 	mov	r18,r4
 80482ac:	18807f2e 	bgeu	r3,r2,80484ac <_malloc_r+0x238>
 80482b0:	047ffe04 	movi	r17,-8
 80482b4:	1462703a 	and	r17,r2,r17
 80482b8:	8800a316 	blt	r17,zero,8048548 <_malloc_r+0x2d4>
 80482bc:	8940a236 	bltu	r17,r5,8048548 <_malloc_r+0x2d4>
 80482c0:	804f3a00 	call	804f3a0 <__malloc_lock>
 80482c4:	00807dc4 	movi	r2,503
 80482c8:	1441e92e 	bgeu	r2,r17,8048a70 <_malloc_r+0x7fc>
 80482cc:	8804d27a 	srli	r2,r17,9
 80482d0:	1000a126 	beq	r2,zero,8048558 <_malloc_r+0x2e4>
 80482d4:	00c00104 	movi	r3,4
 80482d8:	18811e36 	bltu	r3,r2,8048754 <_malloc_r+0x4e0>
 80482dc:	8804d1ba 	srli	r2,r17,6
 80482e0:	12000e44 	addi	r8,r2,57
 80482e4:	11c00e04 	addi	r7,r2,56
 80482e8:	4209883a 	add	r4,r8,r8
 80482ec:	04c20174 	movhi	r19,2053
 80482f0:	2109883a 	add	r4,r4,r4
 80482f4:	9ccdf404 	addi	r19,r19,14288
 80482f8:	2109883a 	add	r4,r4,r4
 80482fc:	9909883a 	add	r4,r19,r4
 8048300:	24000117 	ldw	r16,4(r4)
 8048304:	213ffe04 	addi	r4,r4,-8
 8048308:	24009726 	beq	r4,r16,8048568 <_malloc_r+0x2f4>
 804830c:	80800117 	ldw	r2,4(r16)
 8048310:	01bfff04 	movi	r6,-4
 8048314:	014003c4 	movi	r5,15
 8048318:	1184703a 	and	r2,r2,r6
 804831c:	1447c83a 	sub	r3,r2,r17
 8048320:	28c00716 	blt	r5,r3,8048340 <_malloc_r+0xcc>
 8048324:	1800920e 	bge	r3,zero,8048570 <_malloc_r+0x2fc>
 8048328:	84000317 	ldw	r16,12(r16)
 804832c:	24008e26 	beq	r4,r16,8048568 <_malloc_r+0x2f4>
 8048330:	80800117 	ldw	r2,4(r16)
 8048334:	1184703a 	and	r2,r2,r6
 8048338:	1447c83a 	sub	r3,r2,r17
 804833c:	28fff90e 	bge	r5,r3,8048324 <__alt_data_end+0xfffe0284>
 8048340:	3809883a 	mov	r4,r7
 8048344:	01820174 	movhi	r6,2053
 8048348:	9c000417 	ldw	r16,16(r19)
 804834c:	318df404 	addi	r6,r6,14288
 8048350:	32000204 	addi	r8,r6,8
 8048354:	82013426 	beq	r16,r8,8048828 <_malloc_r+0x5b4>
 8048358:	80c00117 	ldw	r3,4(r16)
 804835c:	00bfff04 	movi	r2,-4
 8048360:	188e703a 	and	r7,r3,r2
 8048364:	3c45c83a 	sub	r2,r7,r17
 8048368:	00c003c4 	movi	r3,15
 804836c:	18811f16 	blt	r3,r2,80487ec <_malloc_r+0x578>
 8048370:	32000515 	stw	r8,20(r6)
 8048374:	32000415 	stw	r8,16(r6)
 8048378:	10007f0e 	bge	r2,zero,8048578 <_malloc_r+0x304>
 804837c:	00807fc4 	movi	r2,511
 8048380:	11c0fd36 	bltu	r2,r7,8048778 <_malloc_r+0x504>
 8048384:	3806d0fa 	srli	r3,r7,3
 8048388:	01c00044 	movi	r7,1
 804838c:	30800117 	ldw	r2,4(r6)
 8048390:	19400044 	addi	r5,r3,1
 8048394:	294b883a 	add	r5,r5,r5
 8048398:	1807d0ba 	srai	r3,r3,2
 804839c:	294b883a 	add	r5,r5,r5
 80483a0:	294b883a 	add	r5,r5,r5
 80483a4:	298b883a 	add	r5,r5,r6
 80483a8:	38c6983a 	sll	r3,r7,r3
 80483ac:	29c00017 	ldw	r7,0(r5)
 80483b0:	2a7ffe04 	addi	r9,r5,-8
 80483b4:	1886b03a 	or	r3,r3,r2
 80483b8:	82400315 	stw	r9,12(r16)
 80483bc:	81c00215 	stw	r7,8(r16)
 80483c0:	30c00115 	stw	r3,4(r6)
 80483c4:	2c000015 	stw	r16,0(r5)
 80483c8:	3c000315 	stw	r16,12(r7)
 80483cc:	2005d0ba 	srai	r2,r4,2
 80483d0:	01400044 	movi	r5,1
 80483d4:	288a983a 	sll	r5,r5,r2
 80483d8:	19406f36 	bltu	r3,r5,8048598 <_malloc_r+0x324>
 80483dc:	28c4703a 	and	r2,r5,r3
 80483e0:	10000a1e 	bne	r2,zero,804840c <_malloc_r+0x198>
 80483e4:	00bfff04 	movi	r2,-4
 80483e8:	294b883a 	add	r5,r5,r5
 80483ec:	2088703a 	and	r4,r4,r2
 80483f0:	28c4703a 	and	r2,r5,r3
 80483f4:	21000104 	addi	r4,r4,4
 80483f8:	1000041e 	bne	r2,zero,804840c <_malloc_r+0x198>
 80483fc:	294b883a 	add	r5,r5,r5
 8048400:	28c4703a 	and	r2,r5,r3
 8048404:	21000104 	addi	r4,r4,4
 8048408:	103ffc26 	beq	r2,zero,80483fc <__alt_data_end+0xfffe035c>
 804840c:	02bfff04 	movi	r10,-4
 8048410:	024003c4 	movi	r9,15
 8048414:	21800044 	addi	r6,r4,1
 8048418:	318d883a 	add	r6,r6,r6
 804841c:	318d883a 	add	r6,r6,r6
 8048420:	318d883a 	add	r6,r6,r6
 8048424:	998d883a 	add	r6,r19,r6
 8048428:	333ffe04 	addi	r12,r6,-8
 804842c:	2017883a 	mov	r11,r4
 8048430:	31800104 	addi	r6,r6,4
 8048434:	34000017 	ldw	r16,0(r6)
 8048438:	31fffd04 	addi	r7,r6,-12
 804843c:	81c0041e 	bne	r16,r7,8048450 <_malloc_r+0x1dc>
 8048440:	0000fb06 	br	8048830 <_malloc_r+0x5bc>
 8048444:	1801030e 	bge	r3,zero,8048854 <_malloc_r+0x5e0>
 8048448:	84000317 	ldw	r16,12(r16)
 804844c:	81c0f826 	beq	r16,r7,8048830 <_malloc_r+0x5bc>
 8048450:	80800117 	ldw	r2,4(r16)
 8048454:	1284703a 	and	r2,r2,r10
 8048458:	1447c83a 	sub	r3,r2,r17
 804845c:	48fff90e 	bge	r9,r3,8048444 <__alt_data_end+0xfffe03a4>
 8048460:	80800317 	ldw	r2,12(r16)
 8048464:	81000217 	ldw	r4,8(r16)
 8048468:	89400054 	ori	r5,r17,1
 804846c:	81400115 	stw	r5,4(r16)
 8048470:	20800315 	stw	r2,12(r4)
 8048474:	11000215 	stw	r4,8(r2)
 8048478:	8463883a 	add	r17,r16,r17
 804847c:	9c400515 	stw	r17,20(r19)
 8048480:	9c400415 	stw	r17,16(r19)
 8048484:	18800054 	ori	r2,r3,1
 8048488:	88800115 	stw	r2,4(r17)
 804848c:	8a000315 	stw	r8,12(r17)
 8048490:	8a000215 	stw	r8,8(r17)
 8048494:	88e3883a 	add	r17,r17,r3
 8048498:	88c00015 	stw	r3,0(r17)
 804849c:	9009883a 	mov	r4,r18
 80484a0:	804f3c40 	call	804f3c4 <__malloc_unlock>
 80484a4:	80800204 	addi	r2,r16,8
 80484a8:	00001b06 	br	8048518 <_malloc_r+0x2a4>
 80484ac:	04400404 	movi	r17,16
 80484b0:	89402536 	bltu	r17,r5,8048548 <_malloc_r+0x2d4>
 80484b4:	804f3a00 	call	804f3a0 <__malloc_lock>
 80484b8:	00800184 	movi	r2,6
 80484bc:	01000084 	movi	r4,2
 80484c0:	04c20174 	movhi	r19,2053
 80484c4:	1085883a 	add	r2,r2,r2
 80484c8:	9ccdf404 	addi	r19,r19,14288
 80484cc:	1085883a 	add	r2,r2,r2
 80484d0:	9885883a 	add	r2,r19,r2
 80484d4:	14000117 	ldw	r16,4(r2)
 80484d8:	10fffe04 	addi	r3,r2,-8
 80484dc:	80c0d926 	beq	r16,r3,8048844 <_malloc_r+0x5d0>
 80484e0:	80c00117 	ldw	r3,4(r16)
 80484e4:	81000317 	ldw	r4,12(r16)
 80484e8:	00bfff04 	movi	r2,-4
 80484ec:	1884703a 	and	r2,r3,r2
 80484f0:	81400217 	ldw	r5,8(r16)
 80484f4:	8085883a 	add	r2,r16,r2
 80484f8:	10c00117 	ldw	r3,4(r2)
 80484fc:	29000315 	stw	r4,12(r5)
 8048500:	21400215 	stw	r5,8(r4)
 8048504:	18c00054 	ori	r3,r3,1
 8048508:	10c00115 	stw	r3,4(r2)
 804850c:	9009883a 	mov	r4,r18
 8048510:	804f3c40 	call	804f3c4 <__malloc_unlock>
 8048514:	80800204 	addi	r2,r16,8
 8048518:	dfc00a17 	ldw	ra,40(sp)
 804851c:	df000917 	ldw	fp,36(sp)
 8048520:	ddc00817 	ldw	r23,32(sp)
 8048524:	dd800717 	ldw	r22,28(sp)
 8048528:	dd400617 	ldw	r21,24(sp)
 804852c:	dd000517 	ldw	r20,20(sp)
 8048530:	dcc00417 	ldw	r19,16(sp)
 8048534:	dc800317 	ldw	r18,12(sp)
 8048538:	dc400217 	ldw	r17,8(sp)
 804853c:	dc000117 	ldw	r16,4(sp)
 8048540:	dec00b04 	addi	sp,sp,44
 8048544:	f800283a 	ret
 8048548:	00800304 	movi	r2,12
 804854c:	90800015 	stw	r2,0(r18)
 8048550:	0005883a 	mov	r2,zero
 8048554:	003ff006 	br	8048518 <__alt_data_end+0xfffe0478>
 8048558:	01002004 	movi	r4,128
 804855c:	02001004 	movi	r8,64
 8048560:	01c00fc4 	movi	r7,63
 8048564:	003f6106 	br	80482ec <__alt_data_end+0xfffe024c>
 8048568:	4009883a 	mov	r4,r8
 804856c:	003f7506 	br	8048344 <__alt_data_end+0xfffe02a4>
 8048570:	81000317 	ldw	r4,12(r16)
 8048574:	003fde06 	br	80484f0 <__alt_data_end+0xfffe0450>
 8048578:	81c5883a 	add	r2,r16,r7
 804857c:	11400117 	ldw	r5,4(r2)
 8048580:	9009883a 	mov	r4,r18
 8048584:	29400054 	ori	r5,r5,1
 8048588:	11400115 	stw	r5,4(r2)
 804858c:	804f3c40 	call	804f3c4 <__malloc_unlock>
 8048590:	80800204 	addi	r2,r16,8
 8048594:	003fe006 	br	8048518 <__alt_data_end+0xfffe0478>
 8048598:	9c000217 	ldw	r16,8(r19)
 804859c:	00bfff04 	movi	r2,-4
 80485a0:	85800117 	ldw	r22,4(r16)
 80485a4:	b0ac703a 	and	r22,r22,r2
 80485a8:	b4400336 	bltu	r22,r17,80485b8 <_malloc_r+0x344>
 80485ac:	b445c83a 	sub	r2,r22,r17
 80485b0:	00c003c4 	movi	r3,15
 80485b4:	18805d16 	blt	r3,r2,804872c <_malloc_r+0x4b8>
 80485b8:	05c20174 	movhi	r23,2053
 80485bc:	00820174 	movhi	r2,2053
 80485c0:	109ab804 	addi	r2,r2,27360
 80485c4:	bdd3b104 	addi	r23,r23,20164
 80485c8:	15400017 	ldw	r21,0(r2)
 80485cc:	b8c00017 	ldw	r3,0(r23)
 80485d0:	00bfffc4 	movi	r2,-1
 80485d4:	858d883a 	add	r6,r16,r22
 80485d8:	8d6b883a 	add	r21,r17,r21
 80485dc:	1880ea26 	beq	r3,r2,8048988 <_malloc_r+0x714>
 80485e0:	ad4403c4 	addi	r21,r21,4111
 80485e4:	00bc0004 	movi	r2,-4096
 80485e8:	a8aa703a 	and	r21,r21,r2
 80485ec:	a80b883a 	mov	r5,r21
 80485f0:	9009883a 	mov	r4,r18
 80485f4:	d9800015 	stw	r6,0(sp)
 80485f8:	804a4780 	call	804a478 <_sbrk_r>
 80485fc:	1029883a 	mov	r20,r2
 8048600:	00bfffc4 	movi	r2,-1
 8048604:	d9800017 	ldw	r6,0(sp)
 8048608:	a080e826 	beq	r20,r2,80489ac <_malloc_r+0x738>
 804860c:	a180a636 	bltu	r20,r6,80488a8 <_malloc_r+0x634>
 8048610:	07020174 	movhi	fp,2053
 8048614:	e71ac704 	addi	fp,fp,27420
 8048618:	e0800017 	ldw	r2,0(fp)
 804861c:	a887883a 	add	r3,r21,r2
 8048620:	e0c00015 	stw	r3,0(fp)
 8048624:	3500e626 	beq	r6,r20,80489c0 <_malloc_r+0x74c>
 8048628:	b9000017 	ldw	r4,0(r23)
 804862c:	00bfffc4 	movi	r2,-1
 8048630:	2080ee26 	beq	r4,r2,80489ec <_malloc_r+0x778>
 8048634:	a185c83a 	sub	r2,r20,r6
 8048638:	10c5883a 	add	r2,r2,r3
 804863c:	e0800015 	stw	r2,0(fp)
 8048640:	a0c001cc 	andi	r3,r20,7
 8048644:	1800bc26 	beq	r3,zero,8048938 <_malloc_r+0x6c4>
 8048648:	a0e9c83a 	sub	r20,r20,r3
 804864c:	00840204 	movi	r2,4104
 8048650:	a5000204 	addi	r20,r20,8
 8048654:	10c7c83a 	sub	r3,r2,r3
 8048658:	a545883a 	add	r2,r20,r21
 804865c:	1083ffcc 	andi	r2,r2,4095
 8048660:	18abc83a 	sub	r21,r3,r2
 8048664:	a80b883a 	mov	r5,r21
 8048668:	9009883a 	mov	r4,r18
 804866c:	804a4780 	call	804a478 <_sbrk_r>
 8048670:	00ffffc4 	movi	r3,-1
 8048674:	10c0e126 	beq	r2,r3,80489fc <_malloc_r+0x788>
 8048678:	1505c83a 	sub	r2,r2,r20
 804867c:	1545883a 	add	r2,r2,r21
 8048680:	10800054 	ori	r2,r2,1
 8048684:	e0c00017 	ldw	r3,0(fp)
 8048688:	9d000215 	stw	r20,8(r19)
 804868c:	a0800115 	stw	r2,4(r20)
 8048690:	a8c7883a 	add	r3,r21,r3
 8048694:	e0c00015 	stw	r3,0(fp)
 8048698:	84c00e26 	beq	r16,r19,80486d4 <_malloc_r+0x460>
 804869c:	018003c4 	movi	r6,15
 80486a0:	3580a72e 	bgeu	r6,r22,8048940 <_malloc_r+0x6cc>
 80486a4:	81400117 	ldw	r5,4(r16)
 80486a8:	013ffe04 	movi	r4,-8
 80486ac:	b0bffd04 	addi	r2,r22,-12
 80486b0:	1104703a 	and	r2,r2,r4
 80486b4:	2900004c 	andi	r4,r5,1
 80486b8:	2088b03a 	or	r4,r4,r2
 80486bc:	81000115 	stw	r4,4(r16)
 80486c0:	01400144 	movi	r5,5
 80486c4:	8089883a 	add	r4,r16,r2
 80486c8:	21400115 	stw	r5,4(r4)
 80486cc:	21400215 	stw	r5,8(r4)
 80486d0:	3080cd36 	bltu	r6,r2,8048a08 <_malloc_r+0x794>
 80486d4:	00820174 	movhi	r2,2053
 80486d8:	109ab704 	addi	r2,r2,27356
 80486dc:	11000017 	ldw	r4,0(r2)
 80486e0:	20c0012e 	bgeu	r4,r3,80486e8 <_malloc_r+0x474>
 80486e4:	10c00015 	stw	r3,0(r2)
 80486e8:	00820174 	movhi	r2,2053
 80486ec:	109ab604 	addi	r2,r2,27352
 80486f0:	11000017 	ldw	r4,0(r2)
 80486f4:	9c000217 	ldw	r16,8(r19)
 80486f8:	20c0012e 	bgeu	r4,r3,8048700 <_malloc_r+0x48c>
 80486fc:	10c00015 	stw	r3,0(r2)
 8048700:	80c00117 	ldw	r3,4(r16)
 8048704:	00bfff04 	movi	r2,-4
 8048708:	1886703a 	and	r3,r3,r2
 804870c:	1c45c83a 	sub	r2,r3,r17
 8048710:	1c400236 	bltu	r3,r17,804871c <_malloc_r+0x4a8>
 8048714:	00c003c4 	movi	r3,15
 8048718:	18800416 	blt	r3,r2,804872c <_malloc_r+0x4b8>
 804871c:	9009883a 	mov	r4,r18
 8048720:	804f3c40 	call	804f3c4 <__malloc_unlock>
 8048724:	0005883a 	mov	r2,zero
 8048728:	003f7b06 	br	8048518 <__alt_data_end+0xfffe0478>
 804872c:	88c00054 	ori	r3,r17,1
 8048730:	80c00115 	stw	r3,4(r16)
 8048734:	8463883a 	add	r17,r16,r17
 8048738:	10800054 	ori	r2,r2,1
 804873c:	9c400215 	stw	r17,8(r19)
 8048740:	88800115 	stw	r2,4(r17)
 8048744:	9009883a 	mov	r4,r18
 8048748:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804874c:	80800204 	addi	r2,r16,8
 8048750:	003f7106 	br	8048518 <__alt_data_end+0xfffe0478>
 8048754:	00c00504 	movi	r3,20
 8048758:	18804a2e 	bgeu	r3,r2,8048884 <_malloc_r+0x610>
 804875c:	00c01504 	movi	r3,84
 8048760:	18806e36 	bltu	r3,r2,804891c <_malloc_r+0x6a8>
 8048764:	8804d33a 	srli	r2,r17,12
 8048768:	12001bc4 	addi	r8,r2,111
 804876c:	11c01b84 	addi	r7,r2,110
 8048770:	4209883a 	add	r4,r8,r8
 8048774:	003edd06 	br	80482ec <__alt_data_end+0xfffe024c>
 8048778:	3804d27a 	srli	r2,r7,9
 804877c:	00c00104 	movi	r3,4
 8048780:	1880442e 	bgeu	r3,r2,8048894 <_malloc_r+0x620>
 8048784:	00c00504 	movi	r3,20
 8048788:	18808136 	bltu	r3,r2,8048990 <_malloc_r+0x71c>
 804878c:	11401704 	addi	r5,r2,92
 8048790:	10c016c4 	addi	r3,r2,91
 8048794:	294b883a 	add	r5,r5,r5
 8048798:	294b883a 	add	r5,r5,r5
 804879c:	294b883a 	add	r5,r5,r5
 80487a0:	994b883a 	add	r5,r19,r5
 80487a4:	28800017 	ldw	r2,0(r5)
 80487a8:	01820174 	movhi	r6,2053
 80487ac:	297ffe04 	addi	r5,r5,-8
 80487b0:	318df404 	addi	r6,r6,14288
 80487b4:	28806526 	beq	r5,r2,804894c <_malloc_r+0x6d8>
 80487b8:	01bfff04 	movi	r6,-4
 80487bc:	10c00117 	ldw	r3,4(r2)
 80487c0:	1986703a 	and	r3,r3,r6
 80487c4:	38c0022e 	bgeu	r7,r3,80487d0 <_malloc_r+0x55c>
 80487c8:	10800217 	ldw	r2,8(r2)
 80487cc:	28bffb1e 	bne	r5,r2,80487bc <__alt_data_end+0xfffe071c>
 80487d0:	11400317 	ldw	r5,12(r2)
 80487d4:	98c00117 	ldw	r3,4(r19)
 80487d8:	81400315 	stw	r5,12(r16)
 80487dc:	80800215 	stw	r2,8(r16)
 80487e0:	2c000215 	stw	r16,8(r5)
 80487e4:	14000315 	stw	r16,12(r2)
 80487e8:	003ef806 	br	80483cc <__alt_data_end+0xfffe032c>
 80487ec:	88c00054 	ori	r3,r17,1
 80487f0:	80c00115 	stw	r3,4(r16)
 80487f4:	8463883a 	add	r17,r16,r17
 80487f8:	34400515 	stw	r17,20(r6)
 80487fc:	34400415 	stw	r17,16(r6)
 8048800:	10c00054 	ori	r3,r2,1
 8048804:	8a000315 	stw	r8,12(r17)
 8048808:	8a000215 	stw	r8,8(r17)
 804880c:	88c00115 	stw	r3,4(r17)
 8048810:	88a3883a 	add	r17,r17,r2
 8048814:	88800015 	stw	r2,0(r17)
 8048818:	9009883a 	mov	r4,r18
 804881c:	804f3c40 	call	804f3c4 <__malloc_unlock>
 8048820:	80800204 	addi	r2,r16,8
 8048824:	003f3c06 	br	8048518 <__alt_data_end+0xfffe0478>
 8048828:	30c00117 	ldw	r3,4(r6)
 804882c:	003ee706 	br	80483cc <__alt_data_end+0xfffe032c>
 8048830:	5ac00044 	addi	r11,r11,1
 8048834:	588000cc 	andi	r2,r11,3
 8048838:	31800204 	addi	r6,r6,8
 804883c:	103efd1e 	bne	r2,zero,8048434 <__alt_data_end+0xfffe0394>
 8048840:	00002406 	br	80488d4 <_malloc_r+0x660>
 8048844:	14000317 	ldw	r16,12(r2)
 8048848:	143f251e 	bne	r2,r16,80484e0 <__alt_data_end+0xfffe0440>
 804884c:	21000084 	addi	r4,r4,2
 8048850:	003ebc06 	br	8048344 <__alt_data_end+0xfffe02a4>
 8048854:	8085883a 	add	r2,r16,r2
 8048858:	10c00117 	ldw	r3,4(r2)
 804885c:	81000317 	ldw	r4,12(r16)
 8048860:	81400217 	ldw	r5,8(r16)
 8048864:	18c00054 	ori	r3,r3,1
 8048868:	10c00115 	stw	r3,4(r2)
 804886c:	29000315 	stw	r4,12(r5)
 8048870:	21400215 	stw	r5,8(r4)
 8048874:	9009883a 	mov	r4,r18
 8048878:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804887c:	80800204 	addi	r2,r16,8
 8048880:	003f2506 	br	8048518 <__alt_data_end+0xfffe0478>
 8048884:	12001704 	addi	r8,r2,92
 8048888:	11c016c4 	addi	r7,r2,91
 804888c:	4209883a 	add	r4,r8,r8
 8048890:	003e9606 	br	80482ec <__alt_data_end+0xfffe024c>
 8048894:	3804d1ba 	srli	r2,r7,6
 8048898:	11400e44 	addi	r5,r2,57
 804889c:	10c00e04 	addi	r3,r2,56
 80488a0:	294b883a 	add	r5,r5,r5
 80488a4:	003fbc06 	br	8048798 <__alt_data_end+0xfffe06f8>
 80488a8:	84ff5926 	beq	r16,r19,8048610 <__alt_data_end+0xfffe0570>
 80488ac:	00820174 	movhi	r2,2053
 80488b0:	108df404 	addi	r2,r2,14288
 80488b4:	14000217 	ldw	r16,8(r2)
 80488b8:	00bfff04 	movi	r2,-4
 80488bc:	80c00117 	ldw	r3,4(r16)
 80488c0:	1886703a 	and	r3,r3,r2
 80488c4:	003f9106 	br	804870c <__alt_data_end+0xfffe066c>
 80488c8:	60800217 	ldw	r2,8(r12)
 80488cc:	213fffc4 	addi	r4,r4,-1
 80488d0:	1300651e 	bne	r2,r12,8048a68 <_malloc_r+0x7f4>
 80488d4:	208000cc 	andi	r2,r4,3
 80488d8:	633ffe04 	addi	r12,r12,-8
 80488dc:	103ffa1e 	bne	r2,zero,80488c8 <__alt_data_end+0xfffe0828>
 80488e0:	98800117 	ldw	r2,4(r19)
 80488e4:	0146303a 	nor	r3,zero,r5
 80488e8:	1884703a 	and	r2,r3,r2
 80488ec:	98800115 	stw	r2,4(r19)
 80488f0:	294b883a 	add	r5,r5,r5
 80488f4:	117f2836 	bltu	r2,r5,8048598 <__alt_data_end+0xfffe04f8>
 80488f8:	283f2726 	beq	r5,zero,8048598 <__alt_data_end+0xfffe04f8>
 80488fc:	2886703a 	and	r3,r5,r2
 8048900:	5809883a 	mov	r4,r11
 8048904:	183ec31e 	bne	r3,zero,8048414 <__alt_data_end+0xfffe0374>
 8048908:	294b883a 	add	r5,r5,r5
 804890c:	2886703a 	and	r3,r5,r2
 8048910:	21000104 	addi	r4,r4,4
 8048914:	183ffc26 	beq	r3,zero,8048908 <__alt_data_end+0xfffe0868>
 8048918:	003ebe06 	br	8048414 <__alt_data_end+0xfffe0374>
 804891c:	00c05504 	movi	r3,340
 8048920:	18801236 	bltu	r3,r2,804896c <_malloc_r+0x6f8>
 8048924:	8804d3fa 	srli	r2,r17,15
 8048928:	12001e04 	addi	r8,r2,120
 804892c:	11c01dc4 	addi	r7,r2,119
 8048930:	4209883a 	add	r4,r8,r8
 8048934:	003e6d06 	br	80482ec <__alt_data_end+0xfffe024c>
 8048938:	00c40004 	movi	r3,4096
 804893c:	003f4606 	br	8048658 <__alt_data_end+0xfffe05b8>
 8048940:	00800044 	movi	r2,1
 8048944:	a0800115 	stw	r2,4(r20)
 8048948:	003f7406 	br	804871c <__alt_data_end+0xfffe067c>
 804894c:	1805d0ba 	srai	r2,r3,2
 8048950:	01c00044 	movi	r7,1
 8048954:	30c00117 	ldw	r3,4(r6)
 8048958:	388e983a 	sll	r7,r7,r2
 804895c:	2805883a 	mov	r2,r5
 8048960:	38c6b03a 	or	r3,r7,r3
 8048964:	30c00115 	stw	r3,4(r6)
 8048968:	003f9b06 	br	80487d8 <__alt_data_end+0xfffe0738>
 804896c:	00c15504 	movi	r3,1364
 8048970:	18801a36 	bltu	r3,r2,80489dc <_malloc_r+0x768>
 8048974:	8804d4ba 	srli	r2,r17,18
 8048978:	12001f44 	addi	r8,r2,125
 804897c:	11c01f04 	addi	r7,r2,124
 8048980:	4209883a 	add	r4,r8,r8
 8048984:	003e5906 	br	80482ec <__alt_data_end+0xfffe024c>
 8048988:	ad400404 	addi	r21,r21,16
 804898c:	003f1706 	br	80485ec <__alt_data_end+0xfffe054c>
 8048990:	00c01504 	movi	r3,84
 8048994:	18802336 	bltu	r3,r2,8048a24 <_malloc_r+0x7b0>
 8048998:	3804d33a 	srli	r2,r7,12
 804899c:	11401bc4 	addi	r5,r2,111
 80489a0:	10c01b84 	addi	r3,r2,110
 80489a4:	294b883a 	add	r5,r5,r5
 80489a8:	003f7b06 	br	8048798 <__alt_data_end+0xfffe06f8>
 80489ac:	9c000217 	ldw	r16,8(r19)
 80489b0:	00bfff04 	movi	r2,-4
 80489b4:	80c00117 	ldw	r3,4(r16)
 80489b8:	1886703a 	and	r3,r3,r2
 80489bc:	003f5306 	br	804870c <__alt_data_end+0xfffe066c>
 80489c0:	3083ffcc 	andi	r2,r6,4095
 80489c4:	103f181e 	bne	r2,zero,8048628 <__alt_data_end+0xfffe0588>
 80489c8:	99000217 	ldw	r4,8(r19)
 80489cc:	b545883a 	add	r2,r22,r21
 80489d0:	10800054 	ori	r2,r2,1
 80489d4:	20800115 	stw	r2,4(r4)
 80489d8:	003f3e06 	br	80486d4 <__alt_data_end+0xfffe0634>
 80489dc:	01003f84 	movi	r4,254
 80489e0:	02001fc4 	movi	r8,127
 80489e4:	01c01f84 	movi	r7,126
 80489e8:	003e4006 	br	80482ec <__alt_data_end+0xfffe024c>
 80489ec:	00820174 	movhi	r2,2053
 80489f0:	1093b104 	addi	r2,r2,20164
 80489f4:	15000015 	stw	r20,0(r2)
 80489f8:	003f1106 	br	8048640 <__alt_data_end+0xfffe05a0>
 80489fc:	00800044 	movi	r2,1
 8048a00:	002b883a 	mov	r21,zero
 8048a04:	003f1f06 	br	8048684 <__alt_data_end+0xfffe05e4>
 8048a08:	81400204 	addi	r5,r16,8
 8048a0c:	9009883a 	mov	r4,r18
 8048a10:	804c4080 	call	804c408 <_free_r>
 8048a14:	00820174 	movhi	r2,2053
 8048a18:	109ac704 	addi	r2,r2,27420
 8048a1c:	10c00017 	ldw	r3,0(r2)
 8048a20:	003f2c06 	br	80486d4 <__alt_data_end+0xfffe0634>
 8048a24:	00c05504 	movi	r3,340
 8048a28:	18800536 	bltu	r3,r2,8048a40 <_malloc_r+0x7cc>
 8048a2c:	3804d3fa 	srli	r2,r7,15
 8048a30:	11401e04 	addi	r5,r2,120
 8048a34:	10c01dc4 	addi	r3,r2,119
 8048a38:	294b883a 	add	r5,r5,r5
 8048a3c:	003f5606 	br	8048798 <__alt_data_end+0xfffe06f8>
 8048a40:	00c15504 	movi	r3,1364
 8048a44:	18800536 	bltu	r3,r2,8048a5c <_malloc_r+0x7e8>
 8048a48:	3804d4ba 	srli	r2,r7,18
 8048a4c:	11401f44 	addi	r5,r2,125
 8048a50:	10c01f04 	addi	r3,r2,124
 8048a54:	294b883a 	add	r5,r5,r5
 8048a58:	003f4f06 	br	8048798 <__alt_data_end+0xfffe06f8>
 8048a5c:	01403f84 	movi	r5,254
 8048a60:	00c01f84 	movi	r3,126
 8048a64:	003f4c06 	br	8048798 <__alt_data_end+0xfffe06f8>
 8048a68:	98800117 	ldw	r2,4(r19)
 8048a6c:	003fa006 	br	80488f0 <__alt_data_end+0xfffe0850>
 8048a70:	8808d0fa 	srli	r4,r17,3
 8048a74:	20800044 	addi	r2,r4,1
 8048a78:	1085883a 	add	r2,r2,r2
 8048a7c:	003e9006 	br	80484c0 <__alt_data_end+0xfffe0420>

08048a80 <memchr>:
 8048a80:	208000cc 	andi	r2,r4,3
 8048a84:	280f883a 	mov	r7,r5
 8048a88:	10003426 	beq	r2,zero,8048b5c <memchr+0xdc>
 8048a8c:	30bfffc4 	addi	r2,r6,-1
 8048a90:	30001a26 	beq	r6,zero,8048afc <memchr+0x7c>
 8048a94:	20c00003 	ldbu	r3,0(r4)
 8048a98:	29803fcc 	andi	r6,r5,255
 8048a9c:	30c0051e 	bne	r6,r3,8048ab4 <memchr+0x34>
 8048aa0:	00001806 	br	8048b04 <memchr+0x84>
 8048aa4:	10001526 	beq	r2,zero,8048afc <memchr+0x7c>
 8048aa8:	20c00003 	ldbu	r3,0(r4)
 8048aac:	10bfffc4 	addi	r2,r2,-1
 8048ab0:	30c01426 	beq	r6,r3,8048b04 <memchr+0x84>
 8048ab4:	21000044 	addi	r4,r4,1
 8048ab8:	20c000cc 	andi	r3,r4,3
 8048abc:	183ff91e 	bne	r3,zero,8048aa4 <__alt_data_end+0xfffe0a04>
 8048ac0:	020000c4 	movi	r8,3
 8048ac4:	40801136 	bltu	r8,r2,8048b0c <memchr+0x8c>
 8048ac8:	10000c26 	beq	r2,zero,8048afc <memchr+0x7c>
 8048acc:	20c00003 	ldbu	r3,0(r4)
 8048ad0:	29403fcc 	andi	r5,r5,255
 8048ad4:	28c00b26 	beq	r5,r3,8048b04 <memchr+0x84>
 8048ad8:	20c00044 	addi	r3,r4,1
 8048adc:	39803fcc 	andi	r6,r7,255
 8048ae0:	2089883a 	add	r4,r4,r2
 8048ae4:	00000306 	br	8048af4 <memchr+0x74>
 8048ae8:	18c00044 	addi	r3,r3,1
 8048aec:	197fffc3 	ldbu	r5,-1(r3)
 8048af0:	31400526 	beq	r6,r5,8048b08 <memchr+0x88>
 8048af4:	1805883a 	mov	r2,r3
 8048af8:	20fffb1e 	bne	r4,r3,8048ae8 <__alt_data_end+0xfffe0a48>
 8048afc:	0005883a 	mov	r2,zero
 8048b00:	f800283a 	ret
 8048b04:	2005883a 	mov	r2,r4
 8048b08:	f800283a 	ret
 8048b0c:	28c03fcc 	andi	r3,r5,255
 8048b10:	1812923a 	slli	r9,r3,8
 8048b14:	02ffbff4 	movhi	r11,65279
 8048b18:	02a02074 	movhi	r10,32897
 8048b1c:	48d2b03a 	or	r9,r9,r3
 8048b20:	4806943a 	slli	r3,r9,16
 8048b24:	5affbfc4 	addi	r11,r11,-257
 8048b28:	52a02004 	addi	r10,r10,-32640
 8048b2c:	48d2b03a 	or	r9,r9,r3
 8048b30:	20c00017 	ldw	r3,0(r4)
 8048b34:	48c6f03a 	xor	r3,r9,r3
 8048b38:	1acd883a 	add	r6,r3,r11
 8048b3c:	00c6303a 	nor	r3,zero,r3
 8048b40:	30c6703a 	and	r3,r6,r3
 8048b44:	1a86703a 	and	r3,r3,r10
 8048b48:	183fe01e 	bne	r3,zero,8048acc <__alt_data_end+0xfffe0a2c>
 8048b4c:	10bfff04 	addi	r2,r2,-4
 8048b50:	21000104 	addi	r4,r4,4
 8048b54:	40bff636 	bltu	r8,r2,8048b30 <__alt_data_end+0xfffe0a90>
 8048b58:	003fdb06 	br	8048ac8 <__alt_data_end+0xfffe0a28>
 8048b5c:	3005883a 	mov	r2,r6
 8048b60:	003fd706 	br	8048ac0 <__alt_data_end+0xfffe0a20>

08048b64 <memmove>:
 8048b64:	2005883a 	mov	r2,r4
 8048b68:	29000b2e 	bgeu	r5,r4,8048b98 <memmove+0x34>
 8048b6c:	298f883a 	add	r7,r5,r6
 8048b70:	21c0092e 	bgeu	r4,r7,8048b98 <memmove+0x34>
 8048b74:	2187883a 	add	r3,r4,r6
 8048b78:	198bc83a 	sub	r5,r3,r6
 8048b7c:	30004826 	beq	r6,zero,8048ca0 <memmove+0x13c>
 8048b80:	39ffffc4 	addi	r7,r7,-1
 8048b84:	39000003 	ldbu	r4,0(r7)
 8048b88:	18ffffc4 	addi	r3,r3,-1
 8048b8c:	19000005 	stb	r4,0(r3)
 8048b90:	28fffb1e 	bne	r5,r3,8048b80 <__alt_data_end+0xfffe0ae0>
 8048b94:	f800283a 	ret
 8048b98:	00c003c4 	movi	r3,15
 8048b9c:	1980412e 	bgeu	r3,r6,8048ca4 <memmove+0x140>
 8048ba0:	2886b03a 	or	r3,r5,r2
 8048ba4:	18c000cc 	andi	r3,r3,3
 8048ba8:	1800401e 	bne	r3,zero,8048cac <memmove+0x148>
 8048bac:	33fffc04 	addi	r15,r6,-16
 8048bb0:	781ed13a 	srli	r15,r15,4
 8048bb4:	28c00104 	addi	r3,r5,4
 8048bb8:	13400104 	addi	r13,r2,4
 8048bbc:	781c913a 	slli	r14,r15,4
 8048bc0:	2b000204 	addi	r12,r5,8
 8048bc4:	12c00204 	addi	r11,r2,8
 8048bc8:	73800504 	addi	r14,r14,20
 8048bcc:	2a800304 	addi	r10,r5,12
 8048bd0:	12400304 	addi	r9,r2,12
 8048bd4:	2b9d883a 	add	r14,r5,r14
 8048bd8:	2811883a 	mov	r8,r5
 8048bdc:	100f883a 	mov	r7,r2
 8048be0:	41000017 	ldw	r4,0(r8)
 8048be4:	39c00404 	addi	r7,r7,16
 8048be8:	18c00404 	addi	r3,r3,16
 8048bec:	393ffc15 	stw	r4,-16(r7)
 8048bf0:	193ffc17 	ldw	r4,-16(r3)
 8048bf4:	6b400404 	addi	r13,r13,16
 8048bf8:	5ac00404 	addi	r11,r11,16
 8048bfc:	693ffc15 	stw	r4,-16(r13)
 8048c00:	61000017 	ldw	r4,0(r12)
 8048c04:	4a400404 	addi	r9,r9,16
 8048c08:	42000404 	addi	r8,r8,16
 8048c0c:	593ffc15 	stw	r4,-16(r11)
 8048c10:	51000017 	ldw	r4,0(r10)
 8048c14:	63000404 	addi	r12,r12,16
 8048c18:	52800404 	addi	r10,r10,16
 8048c1c:	493ffc15 	stw	r4,-16(r9)
 8048c20:	1bbfef1e 	bne	r3,r14,8048be0 <__alt_data_end+0xfffe0b40>
 8048c24:	79000044 	addi	r4,r15,1
 8048c28:	2008913a 	slli	r4,r4,4
 8048c2c:	328003cc 	andi	r10,r6,15
 8048c30:	02c000c4 	movi	r11,3
 8048c34:	1107883a 	add	r3,r2,r4
 8048c38:	290b883a 	add	r5,r5,r4
 8048c3c:	5a801e2e 	bgeu	r11,r10,8048cb8 <memmove+0x154>
 8048c40:	1813883a 	mov	r9,r3
 8048c44:	2811883a 	mov	r8,r5
 8048c48:	500f883a 	mov	r7,r10
 8048c4c:	41000017 	ldw	r4,0(r8)
 8048c50:	4a400104 	addi	r9,r9,4
 8048c54:	39ffff04 	addi	r7,r7,-4
 8048c58:	493fff15 	stw	r4,-4(r9)
 8048c5c:	42000104 	addi	r8,r8,4
 8048c60:	59fffa36 	bltu	r11,r7,8048c4c <__alt_data_end+0xfffe0bac>
 8048c64:	513fff04 	addi	r4,r10,-4
 8048c68:	2008d0ba 	srli	r4,r4,2
 8048c6c:	318000cc 	andi	r6,r6,3
 8048c70:	21000044 	addi	r4,r4,1
 8048c74:	2109883a 	add	r4,r4,r4
 8048c78:	2109883a 	add	r4,r4,r4
 8048c7c:	1907883a 	add	r3,r3,r4
 8048c80:	290b883a 	add	r5,r5,r4
 8048c84:	30000b26 	beq	r6,zero,8048cb4 <memmove+0x150>
 8048c88:	198d883a 	add	r6,r3,r6
 8048c8c:	29c00003 	ldbu	r7,0(r5)
 8048c90:	18c00044 	addi	r3,r3,1
 8048c94:	29400044 	addi	r5,r5,1
 8048c98:	19ffffc5 	stb	r7,-1(r3)
 8048c9c:	19bffb1e 	bne	r3,r6,8048c8c <__alt_data_end+0xfffe0bec>
 8048ca0:	f800283a 	ret
 8048ca4:	1007883a 	mov	r3,r2
 8048ca8:	003ff606 	br	8048c84 <__alt_data_end+0xfffe0be4>
 8048cac:	1007883a 	mov	r3,r2
 8048cb0:	003ff506 	br	8048c88 <__alt_data_end+0xfffe0be8>
 8048cb4:	f800283a 	ret
 8048cb8:	500d883a 	mov	r6,r10
 8048cbc:	003ff106 	br	8048c84 <__alt_data_end+0xfffe0be4>

08048cc0 <memset>:
 8048cc0:	20c000cc 	andi	r3,r4,3
 8048cc4:	2005883a 	mov	r2,r4
 8048cc8:	18004426 	beq	r3,zero,8048ddc <memset+0x11c>
 8048ccc:	31ffffc4 	addi	r7,r6,-1
 8048cd0:	30004026 	beq	r6,zero,8048dd4 <memset+0x114>
 8048cd4:	2813883a 	mov	r9,r5
 8048cd8:	200d883a 	mov	r6,r4
 8048cdc:	2007883a 	mov	r3,r4
 8048ce0:	00000406 	br	8048cf4 <memset+0x34>
 8048ce4:	3a3fffc4 	addi	r8,r7,-1
 8048ce8:	31800044 	addi	r6,r6,1
 8048cec:	38003926 	beq	r7,zero,8048dd4 <memset+0x114>
 8048cf0:	400f883a 	mov	r7,r8
 8048cf4:	18c00044 	addi	r3,r3,1
 8048cf8:	32400005 	stb	r9,0(r6)
 8048cfc:	1a0000cc 	andi	r8,r3,3
 8048d00:	403ff81e 	bne	r8,zero,8048ce4 <__alt_data_end+0xfffe0c44>
 8048d04:	010000c4 	movi	r4,3
 8048d08:	21c02d2e 	bgeu	r4,r7,8048dc0 <memset+0x100>
 8048d0c:	29003fcc 	andi	r4,r5,255
 8048d10:	200c923a 	slli	r6,r4,8
 8048d14:	3108b03a 	or	r4,r6,r4
 8048d18:	200c943a 	slli	r6,r4,16
 8048d1c:	218cb03a 	or	r6,r4,r6
 8048d20:	010003c4 	movi	r4,15
 8048d24:	21c0182e 	bgeu	r4,r7,8048d88 <memset+0xc8>
 8048d28:	3b3ffc04 	addi	r12,r7,-16
 8048d2c:	6018d13a 	srli	r12,r12,4
 8048d30:	1a000104 	addi	r8,r3,4
 8048d34:	1ac00204 	addi	r11,r3,8
 8048d38:	6008913a 	slli	r4,r12,4
 8048d3c:	1a800304 	addi	r10,r3,12
 8048d40:	1813883a 	mov	r9,r3
 8048d44:	21000504 	addi	r4,r4,20
 8048d48:	1909883a 	add	r4,r3,r4
 8048d4c:	49800015 	stw	r6,0(r9)
 8048d50:	41800015 	stw	r6,0(r8)
 8048d54:	59800015 	stw	r6,0(r11)
 8048d58:	51800015 	stw	r6,0(r10)
 8048d5c:	42000404 	addi	r8,r8,16
 8048d60:	4a400404 	addi	r9,r9,16
 8048d64:	5ac00404 	addi	r11,r11,16
 8048d68:	52800404 	addi	r10,r10,16
 8048d6c:	413ff71e 	bne	r8,r4,8048d4c <__alt_data_end+0xfffe0cac>
 8048d70:	63000044 	addi	r12,r12,1
 8048d74:	6018913a 	slli	r12,r12,4
 8048d78:	39c003cc 	andi	r7,r7,15
 8048d7c:	010000c4 	movi	r4,3
 8048d80:	1b07883a 	add	r3,r3,r12
 8048d84:	21c00e2e 	bgeu	r4,r7,8048dc0 <memset+0x100>
 8048d88:	1813883a 	mov	r9,r3
 8048d8c:	3811883a 	mov	r8,r7
 8048d90:	010000c4 	movi	r4,3
 8048d94:	49800015 	stw	r6,0(r9)
 8048d98:	423fff04 	addi	r8,r8,-4
 8048d9c:	4a400104 	addi	r9,r9,4
 8048da0:	223ffc36 	bltu	r4,r8,8048d94 <__alt_data_end+0xfffe0cf4>
 8048da4:	393fff04 	addi	r4,r7,-4
 8048da8:	2008d0ba 	srli	r4,r4,2
 8048dac:	39c000cc 	andi	r7,r7,3
 8048db0:	21000044 	addi	r4,r4,1
 8048db4:	2109883a 	add	r4,r4,r4
 8048db8:	2109883a 	add	r4,r4,r4
 8048dbc:	1907883a 	add	r3,r3,r4
 8048dc0:	38000526 	beq	r7,zero,8048dd8 <memset+0x118>
 8048dc4:	19cf883a 	add	r7,r3,r7
 8048dc8:	19400005 	stb	r5,0(r3)
 8048dcc:	18c00044 	addi	r3,r3,1
 8048dd0:	38fffd1e 	bne	r7,r3,8048dc8 <__alt_data_end+0xfffe0d28>
 8048dd4:	f800283a 	ret
 8048dd8:	f800283a 	ret
 8048ddc:	2007883a 	mov	r3,r4
 8048de0:	300f883a 	mov	r7,r6
 8048de4:	003fc706 	br	8048d04 <__alt_data_end+0xfffe0c64>

08048de8 <_Balloc>:
 8048de8:	20801317 	ldw	r2,76(r4)
 8048dec:	defffc04 	addi	sp,sp,-16
 8048df0:	dc400115 	stw	r17,4(sp)
 8048df4:	dc000015 	stw	r16,0(sp)
 8048df8:	dfc00315 	stw	ra,12(sp)
 8048dfc:	dc800215 	stw	r18,8(sp)
 8048e00:	2023883a 	mov	r17,r4
 8048e04:	2821883a 	mov	r16,r5
 8048e08:	10000f26 	beq	r2,zero,8048e48 <_Balloc+0x60>
 8048e0c:	8407883a 	add	r3,r16,r16
 8048e10:	18c7883a 	add	r3,r3,r3
 8048e14:	10c7883a 	add	r3,r2,r3
 8048e18:	18800017 	ldw	r2,0(r3)
 8048e1c:	10001126 	beq	r2,zero,8048e64 <_Balloc+0x7c>
 8048e20:	11000017 	ldw	r4,0(r2)
 8048e24:	19000015 	stw	r4,0(r3)
 8048e28:	10000415 	stw	zero,16(r2)
 8048e2c:	10000315 	stw	zero,12(r2)
 8048e30:	dfc00317 	ldw	ra,12(sp)
 8048e34:	dc800217 	ldw	r18,8(sp)
 8048e38:	dc400117 	ldw	r17,4(sp)
 8048e3c:	dc000017 	ldw	r16,0(sp)
 8048e40:	dec00404 	addi	sp,sp,16
 8048e44:	f800283a 	ret
 8048e48:	01800844 	movi	r6,33
 8048e4c:	01400104 	movi	r5,4
 8048e50:	804be5c0 	call	804be5c <_calloc_r>
 8048e54:	88801315 	stw	r2,76(r17)
 8048e58:	103fec1e 	bne	r2,zero,8048e0c <__alt_data_end+0xfffe0d6c>
 8048e5c:	0005883a 	mov	r2,zero
 8048e60:	003ff306 	br	8048e30 <__alt_data_end+0xfffe0d90>
 8048e64:	01400044 	movi	r5,1
 8048e68:	2c24983a 	sll	r18,r5,r16
 8048e6c:	8809883a 	mov	r4,r17
 8048e70:	91800144 	addi	r6,r18,5
 8048e74:	318d883a 	add	r6,r6,r6
 8048e78:	318d883a 	add	r6,r6,r6
 8048e7c:	804be5c0 	call	804be5c <_calloc_r>
 8048e80:	103ff626 	beq	r2,zero,8048e5c <__alt_data_end+0xfffe0dbc>
 8048e84:	14000115 	stw	r16,4(r2)
 8048e88:	14800215 	stw	r18,8(r2)
 8048e8c:	003fe606 	br	8048e28 <__alt_data_end+0xfffe0d88>

08048e90 <_Bfree>:
 8048e90:	28000826 	beq	r5,zero,8048eb4 <_Bfree+0x24>
 8048e94:	28c00117 	ldw	r3,4(r5)
 8048e98:	20801317 	ldw	r2,76(r4)
 8048e9c:	18c7883a 	add	r3,r3,r3
 8048ea0:	18c7883a 	add	r3,r3,r3
 8048ea4:	10c5883a 	add	r2,r2,r3
 8048ea8:	10c00017 	ldw	r3,0(r2)
 8048eac:	28c00015 	stw	r3,0(r5)
 8048eb0:	11400015 	stw	r5,0(r2)
 8048eb4:	f800283a 	ret

08048eb8 <__multadd>:
 8048eb8:	defff704 	addi	sp,sp,-36
 8048ebc:	dc800215 	stw	r18,8(sp)
 8048ec0:	2c800417 	ldw	r18,16(r5)
 8048ec4:	dd800615 	stw	r22,24(sp)
 8048ec8:	dd400515 	stw	r21,20(sp)
 8048ecc:	dd000415 	stw	r20,16(sp)
 8048ed0:	dcc00315 	stw	r19,12(sp)
 8048ed4:	dc400115 	stw	r17,4(sp)
 8048ed8:	dc000015 	stw	r16,0(sp)
 8048edc:	dfc00815 	stw	ra,32(sp)
 8048ee0:	ddc00715 	stw	r23,28(sp)
 8048ee4:	2827883a 	mov	r19,r5
 8048ee8:	2029883a 	mov	r20,r4
 8048eec:	3023883a 	mov	r17,r6
 8048ef0:	3821883a 	mov	r16,r7
 8048ef4:	2d400504 	addi	r21,r5,20
 8048ef8:	002d883a 	mov	r22,zero
 8048efc:	adc00017 	ldw	r23,0(r21)
 8048f00:	880b883a 	mov	r5,r17
 8048f04:	ad400104 	addi	r21,r21,4
 8048f08:	b93fffcc 	andi	r4,r23,65535
 8048f0c:	80418e00 	call	80418e0 <__mulsi3>
 8048f10:	b808d43a 	srli	r4,r23,16
 8048f14:	880b883a 	mov	r5,r17
 8048f18:	1421883a 	add	r16,r2,r16
 8048f1c:	80418e00 	call	80418e0 <__mulsi3>
 8048f20:	800ed43a 	srli	r7,r16,16
 8048f24:	80ffffcc 	andi	r3,r16,65535
 8048f28:	b5800044 	addi	r22,r22,1
 8048f2c:	11c5883a 	add	r2,r2,r7
 8048f30:	100e943a 	slli	r7,r2,16
 8048f34:	1020d43a 	srli	r16,r2,16
 8048f38:	38c7883a 	add	r3,r7,r3
 8048f3c:	a8ffff15 	stw	r3,-4(r21)
 8048f40:	b4bfee16 	blt	r22,r18,8048efc <__alt_data_end+0xfffe0e5c>
 8048f44:	80000926 	beq	r16,zero,8048f6c <__multadd+0xb4>
 8048f48:	98800217 	ldw	r2,8(r19)
 8048f4c:	9080130e 	bge	r18,r2,8048f9c <__multadd+0xe4>
 8048f50:	90800144 	addi	r2,r18,5
 8048f54:	1085883a 	add	r2,r2,r2
 8048f58:	1085883a 	add	r2,r2,r2
 8048f5c:	9885883a 	add	r2,r19,r2
 8048f60:	14000015 	stw	r16,0(r2)
 8048f64:	94800044 	addi	r18,r18,1
 8048f68:	9c800415 	stw	r18,16(r19)
 8048f6c:	9805883a 	mov	r2,r19
 8048f70:	dfc00817 	ldw	ra,32(sp)
 8048f74:	ddc00717 	ldw	r23,28(sp)
 8048f78:	dd800617 	ldw	r22,24(sp)
 8048f7c:	dd400517 	ldw	r21,20(sp)
 8048f80:	dd000417 	ldw	r20,16(sp)
 8048f84:	dcc00317 	ldw	r19,12(sp)
 8048f88:	dc800217 	ldw	r18,8(sp)
 8048f8c:	dc400117 	ldw	r17,4(sp)
 8048f90:	dc000017 	ldw	r16,0(sp)
 8048f94:	dec00904 	addi	sp,sp,36
 8048f98:	f800283a 	ret
 8048f9c:	99400117 	ldw	r5,4(r19)
 8048fa0:	a009883a 	mov	r4,r20
 8048fa4:	29400044 	addi	r5,r5,1
 8048fa8:	8048de80 	call	8048de8 <_Balloc>
 8048fac:	99800417 	ldw	r6,16(r19)
 8048fb0:	99400304 	addi	r5,r19,12
 8048fb4:	11000304 	addi	r4,r2,12
 8048fb8:	31800084 	addi	r6,r6,2
 8048fbc:	318d883a 	add	r6,r6,r6
 8048fc0:	318d883a 	add	r6,r6,r6
 8048fc4:	1023883a 	mov	r17,r2
 8048fc8:	80438b40 	call	80438b4 <memcpy>
 8048fcc:	98000a26 	beq	r19,zero,8048ff8 <__multadd+0x140>
 8048fd0:	98c00117 	ldw	r3,4(r19)
 8048fd4:	a0801317 	ldw	r2,76(r20)
 8048fd8:	18c7883a 	add	r3,r3,r3
 8048fdc:	18c7883a 	add	r3,r3,r3
 8048fe0:	10c5883a 	add	r2,r2,r3
 8048fe4:	10c00017 	ldw	r3,0(r2)
 8048fe8:	98c00015 	stw	r3,0(r19)
 8048fec:	14c00015 	stw	r19,0(r2)
 8048ff0:	8827883a 	mov	r19,r17
 8048ff4:	003fd606 	br	8048f50 <__alt_data_end+0xfffe0eb0>
 8048ff8:	8827883a 	mov	r19,r17
 8048ffc:	003fd406 	br	8048f50 <__alt_data_end+0xfffe0eb0>

08049000 <__s2b>:
 8049000:	defff904 	addi	sp,sp,-28
 8049004:	dc400115 	stw	r17,4(sp)
 8049008:	dc000015 	stw	r16,0(sp)
 804900c:	2023883a 	mov	r17,r4
 8049010:	2821883a 	mov	r16,r5
 8049014:	39000204 	addi	r4,r7,8
 8049018:	01400244 	movi	r5,9
 804901c:	dcc00315 	stw	r19,12(sp)
 8049020:	dc800215 	stw	r18,8(sp)
 8049024:	dfc00615 	stw	ra,24(sp)
 8049028:	dd400515 	stw	r21,20(sp)
 804902c:	dd000415 	stw	r20,16(sp)
 8049030:	3825883a 	mov	r18,r7
 8049034:	3027883a 	mov	r19,r6
 8049038:	80437000 	call	8043700 <__divsi3>
 804903c:	00c00044 	movi	r3,1
 8049040:	000b883a 	mov	r5,zero
 8049044:	1880030e 	bge	r3,r2,8049054 <__s2b+0x54>
 8049048:	18c7883a 	add	r3,r3,r3
 804904c:	29400044 	addi	r5,r5,1
 8049050:	18bffd16 	blt	r3,r2,8049048 <__alt_data_end+0xfffe0fa8>
 8049054:	8809883a 	mov	r4,r17
 8049058:	8048de80 	call	8048de8 <_Balloc>
 804905c:	d8c00717 	ldw	r3,28(sp)
 8049060:	10c00515 	stw	r3,20(r2)
 8049064:	00c00044 	movi	r3,1
 8049068:	10c00415 	stw	r3,16(r2)
 804906c:	00c00244 	movi	r3,9
 8049070:	1cc0210e 	bge	r3,r19,80490f8 <__s2b+0xf8>
 8049074:	80eb883a 	add	r21,r16,r3
 8049078:	a829883a 	mov	r20,r21
 804907c:	84e1883a 	add	r16,r16,r19
 8049080:	a1c00007 	ldb	r7,0(r20)
 8049084:	01800284 	movi	r6,10
 8049088:	a5000044 	addi	r20,r20,1
 804908c:	100b883a 	mov	r5,r2
 8049090:	39fff404 	addi	r7,r7,-48
 8049094:	8809883a 	mov	r4,r17
 8049098:	8048eb80 	call	8048eb8 <__multadd>
 804909c:	a43ff81e 	bne	r20,r16,8049080 <__alt_data_end+0xfffe0fe0>
 80490a0:	ace1883a 	add	r16,r21,r19
 80490a4:	843ffe04 	addi	r16,r16,-8
 80490a8:	9c800a0e 	bge	r19,r18,80490d4 <__s2b+0xd4>
 80490ac:	94e5c83a 	sub	r18,r18,r19
 80490b0:	84a5883a 	add	r18,r16,r18
 80490b4:	81c00007 	ldb	r7,0(r16)
 80490b8:	01800284 	movi	r6,10
 80490bc:	84000044 	addi	r16,r16,1
 80490c0:	100b883a 	mov	r5,r2
 80490c4:	39fff404 	addi	r7,r7,-48
 80490c8:	8809883a 	mov	r4,r17
 80490cc:	8048eb80 	call	8048eb8 <__multadd>
 80490d0:	84bff81e 	bne	r16,r18,80490b4 <__alt_data_end+0xfffe1014>
 80490d4:	dfc00617 	ldw	ra,24(sp)
 80490d8:	dd400517 	ldw	r21,20(sp)
 80490dc:	dd000417 	ldw	r20,16(sp)
 80490e0:	dcc00317 	ldw	r19,12(sp)
 80490e4:	dc800217 	ldw	r18,8(sp)
 80490e8:	dc400117 	ldw	r17,4(sp)
 80490ec:	dc000017 	ldw	r16,0(sp)
 80490f0:	dec00704 	addi	sp,sp,28
 80490f4:	f800283a 	ret
 80490f8:	84000284 	addi	r16,r16,10
 80490fc:	1827883a 	mov	r19,r3
 8049100:	003fe906 	br	80490a8 <__alt_data_end+0xfffe1008>

08049104 <__hi0bits>:
 8049104:	20bfffec 	andhi	r2,r4,65535
 8049108:	1000141e 	bne	r2,zero,804915c <__hi0bits+0x58>
 804910c:	2008943a 	slli	r4,r4,16
 8049110:	00800404 	movi	r2,16
 8049114:	20ffc02c 	andhi	r3,r4,65280
 8049118:	1800021e 	bne	r3,zero,8049124 <__hi0bits+0x20>
 804911c:	2008923a 	slli	r4,r4,8
 8049120:	10800204 	addi	r2,r2,8
 8049124:	20fc002c 	andhi	r3,r4,61440
 8049128:	1800021e 	bne	r3,zero,8049134 <__hi0bits+0x30>
 804912c:	2008913a 	slli	r4,r4,4
 8049130:	10800104 	addi	r2,r2,4
 8049134:	20f0002c 	andhi	r3,r4,49152
 8049138:	1800031e 	bne	r3,zero,8049148 <__hi0bits+0x44>
 804913c:	2109883a 	add	r4,r4,r4
 8049140:	10800084 	addi	r2,r2,2
 8049144:	2109883a 	add	r4,r4,r4
 8049148:	20000316 	blt	r4,zero,8049158 <__hi0bits+0x54>
 804914c:	2110002c 	andhi	r4,r4,16384
 8049150:	2000041e 	bne	r4,zero,8049164 <__hi0bits+0x60>
 8049154:	00800804 	movi	r2,32
 8049158:	f800283a 	ret
 804915c:	0005883a 	mov	r2,zero
 8049160:	003fec06 	br	8049114 <__alt_data_end+0xfffe1074>
 8049164:	10800044 	addi	r2,r2,1
 8049168:	f800283a 	ret

0804916c <__lo0bits>:
 804916c:	20c00017 	ldw	r3,0(r4)
 8049170:	188001cc 	andi	r2,r3,7
 8049174:	10000826 	beq	r2,zero,8049198 <__lo0bits+0x2c>
 8049178:	1880004c 	andi	r2,r3,1
 804917c:	1000211e 	bne	r2,zero,8049204 <__lo0bits+0x98>
 8049180:	1880008c 	andi	r2,r3,2
 8049184:	1000211e 	bne	r2,zero,804920c <__lo0bits+0xa0>
 8049188:	1806d0ba 	srli	r3,r3,2
 804918c:	00800084 	movi	r2,2
 8049190:	20c00015 	stw	r3,0(r4)
 8049194:	f800283a 	ret
 8049198:	18bfffcc 	andi	r2,r3,65535
 804919c:	10001326 	beq	r2,zero,80491ec <__lo0bits+0x80>
 80491a0:	0005883a 	mov	r2,zero
 80491a4:	19403fcc 	andi	r5,r3,255
 80491a8:	2800021e 	bne	r5,zero,80491b4 <__lo0bits+0x48>
 80491ac:	1806d23a 	srli	r3,r3,8
 80491b0:	10800204 	addi	r2,r2,8
 80491b4:	194003cc 	andi	r5,r3,15
 80491b8:	2800021e 	bne	r5,zero,80491c4 <__lo0bits+0x58>
 80491bc:	1806d13a 	srli	r3,r3,4
 80491c0:	10800104 	addi	r2,r2,4
 80491c4:	194000cc 	andi	r5,r3,3
 80491c8:	2800021e 	bne	r5,zero,80491d4 <__lo0bits+0x68>
 80491cc:	1806d0ba 	srli	r3,r3,2
 80491d0:	10800084 	addi	r2,r2,2
 80491d4:	1940004c 	andi	r5,r3,1
 80491d8:	2800081e 	bne	r5,zero,80491fc <__lo0bits+0x90>
 80491dc:	1806d07a 	srli	r3,r3,1
 80491e0:	1800051e 	bne	r3,zero,80491f8 <__lo0bits+0x8c>
 80491e4:	00800804 	movi	r2,32
 80491e8:	f800283a 	ret
 80491ec:	1806d43a 	srli	r3,r3,16
 80491f0:	00800404 	movi	r2,16
 80491f4:	003feb06 	br	80491a4 <__alt_data_end+0xfffe1104>
 80491f8:	10800044 	addi	r2,r2,1
 80491fc:	20c00015 	stw	r3,0(r4)
 8049200:	f800283a 	ret
 8049204:	0005883a 	mov	r2,zero
 8049208:	f800283a 	ret
 804920c:	1806d07a 	srli	r3,r3,1
 8049210:	00800044 	movi	r2,1
 8049214:	20c00015 	stw	r3,0(r4)
 8049218:	f800283a 	ret

0804921c <__i2b>:
 804921c:	defffd04 	addi	sp,sp,-12
 8049220:	dc000015 	stw	r16,0(sp)
 8049224:	04000044 	movi	r16,1
 8049228:	dc400115 	stw	r17,4(sp)
 804922c:	2823883a 	mov	r17,r5
 8049230:	800b883a 	mov	r5,r16
 8049234:	dfc00215 	stw	ra,8(sp)
 8049238:	8048de80 	call	8048de8 <_Balloc>
 804923c:	14400515 	stw	r17,20(r2)
 8049240:	14000415 	stw	r16,16(r2)
 8049244:	dfc00217 	ldw	ra,8(sp)
 8049248:	dc400117 	ldw	r17,4(sp)
 804924c:	dc000017 	ldw	r16,0(sp)
 8049250:	dec00304 	addi	sp,sp,12
 8049254:	f800283a 	ret

08049258 <__multiply>:
 8049258:	deffef04 	addi	sp,sp,-68
 804925c:	dc400815 	stw	r17,32(sp)
 8049260:	dc000715 	stw	r16,28(sp)
 8049264:	34400417 	ldw	r17,16(r6)
 8049268:	2c000417 	ldw	r16,16(r5)
 804926c:	dd800d15 	stw	r22,52(sp)
 8049270:	dc800915 	stw	r18,36(sp)
 8049274:	dfc01015 	stw	ra,64(sp)
 8049278:	df000f15 	stw	fp,60(sp)
 804927c:	ddc00e15 	stw	r23,56(sp)
 8049280:	dd400c15 	stw	r21,48(sp)
 8049284:	dd000b15 	stw	r20,44(sp)
 8049288:	dcc00a15 	stw	r19,40(sp)
 804928c:	2825883a 	mov	r18,r5
 8049290:	302d883a 	mov	r22,r6
 8049294:	8440050e 	bge	r16,r17,80492ac <__multiply+0x54>
 8049298:	8007883a 	mov	r3,r16
 804929c:	3025883a 	mov	r18,r6
 80492a0:	8821883a 	mov	r16,r17
 80492a4:	282d883a 	mov	r22,r5
 80492a8:	1823883a 	mov	r17,r3
 80492ac:	90800217 	ldw	r2,8(r18)
 80492b0:	8447883a 	add	r3,r16,r17
 80492b4:	d8c00215 	stw	r3,8(sp)
 80492b8:	91400117 	ldw	r5,4(r18)
 80492bc:	10c0010e 	bge	r2,r3,80492c4 <__multiply+0x6c>
 80492c0:	29400044 	addi	r5,r5,1
 80492c4:	8048de80 	call	8048de8 <_Balloc>
 80492c8:	d8c00217 	ldw	r3,8(sp)
 80492cc:	d8800615 	stw	r2,24(sp)
 80492d0:	18eb883a 	add	r21,r3,r3
 80492d4:	ad6b883a 	add	r21,r21,r21
 80492d8:	10c00504 	addi	r3,r2,20
 80492dc:	1d6b883a 	add	r21,r3,r21
 80492e0:	d8c00115 	stw	r3,4(sp)
 80492e4:	dd400315 	stw	r21,12(sp)
 80492e8:	1805883a 	mov	r2,r3
 80492ec:	1d40042e 	bgeu	r3,r21,8049300 <__multiply+0xa8>
 80492f0:	d8c00317 	ldw	r3,12(sp)
 80492f4:	10000015 	stw	zero,0(r2)
 80492f8:	10800104 	addi	r2,r2,4
 80492fc:	10fffc36 	bltu	r2,r3,80492f0 <__alt_data_end+0xfffe1250>
 8049300:	8c63883a 	add	r17,r17,r17
 8049304:	b5800504 	addi	r22,r22,20
 8049308:	8c63883a 	add	r17,r17,r17
 804930c:	94800504 	addi	r18,r18,20
 8049310:	8421883a 	add	r16,r16,r16
 8049314:	b463883a 	add	r17,r22,r17
 8049318:	8421883a 	add	r16,r16,r16
 804931c:	dd800015 	stw	r22,0(sp)
 8049320:	dc800415 	stw	r18,16(sp)
 8049324:	dc400515 	stw	r17,20(sp)
 8049328:	9429883a 	add	r20,r18,r16
 804932c:	b4404f2e 	bgeu	r22,r17,804946c <__multiply+0x214>
 8049330:	d8c00017 	ldw	r3,0(sp)
 8049334:	1c800017 	ldw	r18,0(r3)
 8049338:	947fffcc 	andi	r17,r18,65535
 804933c:	88001e26 	beq	r17,zero,80493b8 <__multiply+0x160>
 8049340:	dd800117 	ldw	r22,4(sp)
 8049344:	dd400417 	ldw	r21,16(sp)
 8049348:	0027883a 	mov	r19,zero
 804934c:	ac800017 	ldw	r18,0(r21)
 8049350:	b4000017 	ldw	r16,0(r22)
 8049354:	880b883a 	mov	r5,r17
 8049358:	913fffcc 	andi	r4,r18,65535
 804935c:	80418e00 	call	80418e0 <__mulsi3>
 8049360:	9008d43a 	srli	r4,r18,16
 8049364:	84bfffcc 	andi	r18,r16,65535
 8049368:	1485883a 	add	r2,r2,r18
 804936c:	14e5883a 	add	r18,r2,r19
 8049370:	8020d43a 	srli	r16,r16,16
 8049374:	9026d43a 	srli	r19,r18,16
 8049378:	880b883a 	mov	r5,r17
 804937c:	80418e00 	call	80418e0 <__mulsi3>
 8049380:	1405883a 	add	r2,r2,r16
 8049384:	14e1883a 	add	r16,r2,r19
 8049388:	90ffffcc 	andi	r3,r18,65535
 804938c:	8024943a 	slli	r18,r16,16
 8049390:	ad400104 	addi	r21,r21,4
 8049394:	b005883a 	mov	r2,r22
 8049398:	90c6b03a 	or	r3,r18,r3
 804939c:	b0c00015 	stw	r3,0(r22)
 80493a0:	8026d43a 	srli	r19,r16,16
 80493a4:	b5800104 	addi	r22,r22,4
 80493a8:	ad3fe836 	bltu	r21,r20,804934c <__alt_data_end+0xfffe12ac>
 80493ac:	d8c00017 	ldw	r3,0(sp)
 80493b0:	14c00115 	stw	r19,4(r2)
 80493b4:	1c800017 	ldw	r18,0(r3)
 80493b8:	9024d43a 	srli	r18,r18,16
 80493bc:	90002226 	beq	r18,zero,8049448 <__multiply+0x1f0>
 80493c0:	d8c00117 	ldw	r3,4(sp)
 80493c4:	dd800417 	ldw	r22,16(sp)
 80493c8:	002f883a 	mov	r23,zero
 80493cc:	1f000017 	ldw	fp,0(r3)
 80493d0:	1823883a 	mov	r17,r3
 80493d4:	182b883a 	mov	r21,r3
 80493d8:	e021883a 	mov	r16,fp
 80493dc:	00000106 	br	80493e4 <__multiply+0x18c>
 80493e0:	982b883a 	mov	r21,r19
 80493e4:	b100000b 	ldhu	r4,0(r22)
 80493e8:	8020d43a 	srli	r16,r16,16
 80493ec:	900b883a 	mov	r5,r18
 80493f0:	80418e00 	call	80418e0 <__mulsi3>
 80493f4:	1405883a 	add	r2,r2,r16
 80493f8:	15ef883a 	add	r23,r2,r23
 80493fc:	b804943a 	slli	r2,r23,16
 8049400:	e0ffffcc 	andi	r3,fp,65535
 8049404:	8c400104 	addi	r17,r17,4
 8049408:	10c6b03a 	or	r3,r2,r3
 804940c:	88ffff15 	stw	r3,-4(r17)
 8049410:	b5800104 	addi	r22,r22,4
 8049414:	b13fff17 	ldw	r4,-4(r22)
 8049418:	acc00104 	addi	r19,r21,4
 804941c:	900b883a 	mov	r5,r18
 8049420:	2008d43a 	srli	r4,r4,16
 8049424:	9c000017 	ldw	r16,0(r19)
 8049428:	80418e00 	call	80418e0 <__mulsi3>
 804942c:	b806d43a 	srli	r3,r23,16
 8049430:	813fffcc 	andi	r4,r16,65535
 8049434:	1105883a 	add	r2,r2,r4
 8049438:	10f9883a 	add	fp,r2,r3
 804943c:	e02ed43a 	srli	r23,fp,16
 8049440:	b53fe736 	bltu	r22,r20,80493e0 <__alt_data_end+0xfffe1340>
 8049444:	af000115 	stw	fp,4(r21)
 8049448:	d8c00017 	ldw	r3,0(sp)
 804944c:	d9000517 	ldw	r4,20(sp)
 8049450:	18c00104 	addi	r3,r3,4
 8049454:	d8c00015 	stw	r3,0(sp)
 8049458:	d8c00117 	ldw	r3,4(sp)
 804945c:	18c00104 	addi	r3,r3,4
 8049460:	d8c00115 	stw	r3,4(sp)
 8049464:	d8c00017 	ldw	r3,0(sp)
 8049468:	193fb136 	bltu	r3,r4,8049330 <__alt_data_end+0xfffe1290>
 804946c:	d8c00217 	ldw	r3,8(sp)
 8049470:	00c00c0e 	bge	zero,r3,80494a4 <__multiply+0x24c>
 8049474:	d8c00317 	ldw	r3,12(sp)
 8049478:	18bfff17 	ldw	r2,-4(r3)
 804947c:	1d7fff04 	addi	r21,r3,-4
 8049480:	10000326 	beq	r2,zero,8049490 <__multiply+0x238>
 8049484:	00000706 	br	80494a4 <__multiply+0x24c>
 8049488:	a8800017 	ldw	r2,0(r21)
 804948c:	1000051e 	bne	r2,zero,80494a4 <__multiply+0x24c>
 8049490:	d8c00217 	ldw	r3,8(sp)
 8049494:	ad7fff04 	addi	r21,r21,-4
 8049498:	18ffffc4 	addi	r3,r3,-1
 804949c:	d8c00215 	stw	r3,8(sp)
 80494a0:	183ff91e 	bne	r3,zero,8049488 <__alt_data_end+0xfffe13e8>
 80494a4:	d8c00617 	ldw	r3,24(sp)
 80494a8:	d9000217 	ldw	r4,8(sp)
 80494ac:	1805883a 	mov	r2,r3
 80494b0:	19000415 	stw	r4,16(r3)
 80494b4:	dfc01017 	ldw	ra,64(sp)
 80494b8:	df000f17 	ldw	fp,60(sp)
 80494bc:	ddc00e17 	ldw	r23,56(sp)
 80494c0:	dd800d17 	ldw	r22,52(sp)
 80494c4:	dd400c17 	ldw	r21,48(sp)
 80494c8:	dd000b17 	ldw	r20,44(sp)
 80494cc:	dcc00a17 	ldw	r19,40(sp)
 80494d0:	dc800917 	ldw	r18,36(sp)
 80494d4:	dc400817 	ldw	r17,32(sp)
 80494d8:	dc000717 	ldw	r16,28(sp)
 80494dc:	dec01104 	addi	sp,sp,68
 80494e0:	f800283a 	ret

080494e4 <__pow5mult>:
 80494e4:	defffa04 	addi	sp,sp,-24
 80494e8:	dcc00315 	stw	r19,12(sp)
 80494ec:	dc000015 	stw	r16,0(sp)
 80494f0:	dfc00515 	stw	ra,20(sp)
 80494f4:	dd000415 	stw	r20,16(sp)
 80494f8:	dc800215 	stw	r18,8(sp)
 80494fc:	dc400115 	stw	r17,4(sp)
 8049500:	308000cc 	andi	r2,r6,3
 8049504:	3021883a 	mov	r16,r6
 8049508:	2027883a 	mov	r19,r4
 804950c:	10002f1e 	bne	r2,zero,80495cc <__pow5mult+0xe8>
 8049510:	2825883a 	mov	r18,r5
 8049514:	8021d0ba 	srai	r16,r16,2
 8049518:	80001a26 	beq	r16,zero,8049584 <__pow5mult+0xa0>
 804951c:	9c401217 	ldw	r17,72(r19)
 8049520:	8800061e 	bne	r17,zero,804953c <__pow5mult+0x58>
 8049524:	00003406 	br	80495f8 <__pow5mult+0x114>
 8049528:	8021d07a 	srai	r16,r16,1
 804952c:	80001526 	beq	r16,zero,8049584 <__pow5mult+0xa0>
 8049530:	88800017 	ldw	r2,0(r17)
 8049534:	10001c26 	beq	r2,zero,80495a8 <__pow5mult+0xc4>
 8049538:	1023883a 	mov	r17,r2
 804953c:	8080004c 	andi	r2,r16,1
 8049540:	103ff926 	beq	r2,zero,8049528 <__alt_data_end+0xfffe1488>
 8049544:	880d883a 	mov	r6,r17
 8049548:	900b883a 	mov	r5,r18
 804954c:	9809883a 	mov	r4,r19
 8049550:	80492580 	call	8049258 <__multiply>
 8049554:	90001b26 	beq	r18,zero,80495c4 <__pow5mult+0xe0>
 8049558:	91000117 	ldw	r4,4(r18)
 804955c:	98c01317 	ldw	r3,76(r19)
 8049560:	8021d07a 	srai	r16,r16,1
 8049564:	2109883a 	add	r4,r4,r4
 8049568:	2109883a 	add	r4,r4,r4
 804956c:	1907883a 	add	r3,r3,r4
 8049570:	19000017 	ldw	r4,0(r3)
 8049574:	91000015 	stw	r4,0(r18)
 8049578:	1c800015 	stw	r18,0(r3)
 804957c:	1025883a 	mov	r18,r2
 8049580:	803feb1e 	bne	r16,zero,8049530 <__alt_data_end+0xfffe1490>
 8049584:	9005883a 	mov	r2,r18
 8049588:	dfc00517 	ldw	ra,20(sp)
 804958c:	dd000417 	ldw	r20,16(sp)
 8049590:	dcc00317 	ldw	r19,12(sp)
 8049594:	dc800217 	ldw	r18,8(sp)
 8049598:	dc400117 	ldw	r17,4(sp)
 804959c:	dc000017 	ldw	r16,0(sp)
 80495a0:	dec00604 	addi	sp,sp,24
 80495a4:	f800283a 	ret
 80495a8:	880d883a 	mov	r6,r17
 80495ac:	880b883a 	mov	r5,r17
 80495b0:	9809883a 	mov	r4,r19
 80495b4:	80492580 	call	8049258 <__multiply>
 80495b8:	88800015 	stw	r2,0(r17)
 80495bc:	10000015 	stw	zero,0(r2)
 80495c0:	003fdd06 	br	8049538 <__alt_data_end+0xfffe1498>
 80495c4:	1025883a 	mov	r18,r2
 80495c8:	003fd706 	br	8049528 <__alt_data_end+0xfffe1488>
 80495cc:	10bfffc4 	addi	r2,r2,-1
 80495d0:	1085883a 	add	r2,r2,r2
 80495d4:	00c20174 	movhi	r3,2053
 80495d8:	18cc4704 	addi	r3,r3,12572
 80495dc:	1085883a 	add	r2,r2,r2
 80495e0:	1885883a 	add	r2,r3,r2
 80495e4:	11800017 	ldw	r6,0(r2)
 80495e8:	000f883a 	mov	r7,zero
 80495ec:	8048eb80 	call	8048eb8 <__multadd>
 80495f0:	1025883a 	mov	r18,r2
 80495f4:	003fc706 	br	8049514 <__alt_data_end+0xfffe1474>
 80495f8:	05000044 	movi	r20,1
 80495fc:	a00b883a 	mov	r5,r20
 8049600:	9809883a 	mov	r4,r19
 8049604:	8048de80 	call	8048de8 <_Balloc>
 8049608:	1023883a 	mov	r17,r2
 804960c:	00809c44 	movi	r2,625
 8049610:	88800515 	stw	r2,20(r17)
 8049614:	8d000415 	stw	r20,16(r17)
 8049618:	9c401215 	stw	r17,72(r19)
 804961c:	88000015 	stw	zero,0(r17)
 8049620:	003fc606 	br	804953c <__alt_data_end+0xfffe149c>

08049624 <__lshift>:
 8049624:	defff904 	addi	sp,sp,-28
 8049628:	dd400515 	stw	r21,20(sp)
 804962c:	dcc00315 	stw	r19,12(sp)
 8049630:	302bd17a 	srai	r21,r6,5
 8049634:	2cc00417 	ldw	r19,16(r5)
 8049638:	28800217 	ldw	r2,8(r5)
 804963c:	dd000415 	stw	r20,16(sp)
 8049640:	ace7883a 	add	r19,r21,r19
 8049644:	dc800215 	stw	r18,8(sp)
 8049648:	dc400115 	stw	r17,4(sp)
 804964c:	dc000015 	stw	r16,0(sp)
 8049650:	dfc00615 	stw	ra,24(sp)
 8049654:	9c000044 	addi	r16,r19,1
 8049658:	2823883a 	mov	r17,r5
 804965c:	3029883a 	mov	r20,r6
 8049660:	2025883a 	mov	r18,r4
 8049664:	29400117 	ldw	r5,4(r5)
 8049668:	1400030e 	bge	r2,r16,8049678 <__lshift+0x54>
 804966c:	1085883a 	add	r2,r2,r2
 8049670:	29400044 	addi	r5,r5,1
 8049674:	143ffd16 	blt	r2,r16,804966c <__alt_data_end+0xfffe15cc>
 8049678:	9009883a 	mov	r4,r18
 804967c:	8048de80 	call	8048de8 <_Balloc>
 8049680:	10c00504 	addi	r3,r2,20
 8049684:	0540070e 	bge	zero,r21,80496a4 <__lshift+0x80>
 8049688:	ad6b883a 	add	r21,r21,r21
 804968c:	ad6b883a 	add	r21,r21,r21
 8049690:	1809883a 	mov	r4,r3
 8049694:	1d47883a 	add	r3,r3,r21
 8049698:	20000015 	stw	zero,0(r4)
 804969c:	21000104 	addi	r4,r4,4
 80496a0:	193ffd1e 	bne	r3,r4,8049698 <__alt_data_end+0xfffe15f8>
 80496a4:	8a000417 	ldw	r8,16(r17)
 80496a8:	89000504 	addi	r4,r17,20
 80496ac:	a18007cc 	andi	r6,r20,31
 80496b0:	4211883a 	add	r8,r8,r8
 80496b4:	4211883a 	add	r8,r8,r8
 80496b8:	2211883a 	add	r8,r4,r8
 80496bc:	30002326 	beq	r6,zero,804974c <__lshift+0x128>
 80496c0:	02400804 	movi	r9,32
 80496c4:	4993c83a 	sub	r9,r9,r6
 80496c8:	000b883a 	mov	r5,zero
 80496cc:	21c00017 	ldw	r7,0(r4)
 80496d0:	1815883a 	mov	r10,r3
 80496d4:	18c00104 	addi	r3,r3,4
 80496d8:	398e983a 	sll	r7,r7,r6
 80496dc:	21000104 	addi	r4,r4,4
 80496e0:	394ab03a 	or	r5,r7,r5
 80496e4:	197fff15 	stw	r5,-4(r3)
 80496e8:	217fff17 	ldw	r5,-4(r4)
 80496ec:	2a4ad83a 	srl	r5,r5,r9
 80496f0:	223ff636 	bltu	r4,r8,80496cc <__alt_data_end+0xfffe162c>
 80496f4:	51400115 	stw	r5,4(r10)
 80496f8:	28001a1e 	bne	r5,zero,8049764 <__lshift+0x140>
 80496fc:	843fffc4 	addi	r16,r16,-1
 8049700:	14000415 	stw	r16,16(r2)
 8049704:	88000826 	beq	r17,zero,8049728 <__lshift+0x104>
 8049708:	89000117 	ldw	r4,4(r17)
 804970c:	90c01317 	ldw	r3,76(r18)
 8049710:	2109883a 	add	r4,r4,r4
 8049714:	2109883a 	add	r4,r4,r4
 8049718:	1907883a 	add	r3,r3,r4
 804971c:	19000017 	ldw	r4,0(r3)
 8049720:	89000015 	stw	r4,0(r17)
 8049724:	1c400015 	stw	r17,0(r3)
 8049728:	dfc00617 	ldw	ra,24(sp)
 804972c:	dd400517 	ldw	r21,20(sp)
 8049730:	dd000417 	ldw	r20,16(sp)
 8049734:	dcc00317 	ldw	r19,12(sp)
 8049738:	dc800217 	ldw	r18,8(sp)
 804973c:	dc400117 	ldw	r17,4(sp)
 8049740:	dc000017 	ldw	r16,0(sp)
 8049744:	dec00704 	addi	sp,sp,28
 8049748:	f800283a 	ret
 804974c:	21400017 	ldw	r5,0(r4)
 8049750:	18c00104 	addi	r3,r3,4
 8049754:	21000104 	addi	r4,r4,4
 8049758:	197fff15 	stw	r5,-4(r3)
 804975c:	223ffb36 	bltu	r4,r8,804974c <__alt_data_end+0xfffe16ac>
 8049760:	003fe606 	br	80496fc <__alt_data_end+0xfffe165c>
 8049764:	9c000084 	addi	r16,r19,2
 8049768:	003fe406 	br	80496fc <__alt_data_end+0xfffe165c>

0804976c <__mcmp>:
 804976c:	20800417 	ldw	r2,16(r4)
 8049770:	28c00417 	ldw	r3,16(r5)
 8049774:	10c5c83a 	sub	r2,r2,r3
 8049778:	1000111e 	bne	r2,zero,80497c0 <__mcmp+0x54>
 804977c:	18c7883a 	add	r3,r3,r3
 8049780:	18c7883a 	add	r3,r3,r3
 8049784:	21000504 	addi	r4,r4,20
 8049788:	29400504 	addi	r5,r5,20
 804978c:	20c5883a 	add	r2,r4,r3
 8049790:	28cb883a 	add	r5,r5,r3
 8049794:	00000106 	br	804979c <__mcmp+0x30>
 8049798:	20800a2e 	bgeu	r4,r2,80497c4 <__mcmp+0x58>
 804979c:	10bfff04 	addi	r2,r2,-4
 80497a0:	297fff04 	addi	r5,r5,-4
 80497a4:	11800017 	ldw	r6,0(r2)
 80497a8:	28c00017 	ldw	r3,0(r5)
 80497ac:	30fffa26 	beq	r6,r3,8049798 <__alt_data_end+0xfffe16f8>
 80497b0:	30c00236 	bltu	r6,r3,80497bc <__mcmp+0x50>
 80497b4:	00800044 	movi	r2,1
 80497b8:	f800283a 	ret
 80497bc:	00bfffc4 	movi	r2,-1
 80497c0:	f800283a 	ret
 80497c4:	0005883a 	mov	r2,zero
 80497c8:	f800283a 	ret

080497cc <__mdiff>:
 80497cc:	28c00417 	ldw	r3,16(r5)
 80497d0:	30800417 	ldw	r2,16(r6)
 80497d4:	defffa04 	addi	sp,sp,-24
 80497d8:	dcc00315 	stw	r19,12(sp)
 80497dc:	dc800215 	stw	r18,8(sp)
 80497e0:	dfc00515 	stw	ra,20(sp)
 80497e4:	dd000415 	stw	r20,16(sp)
 80497e8:	dc400115 	stw	r17,4(sp)
 80497ec:	dc000015 	stw	r16,0(sp)
 80497f0:	1887c83a 	sub	r3,r3,r2
 80497f4:	2825883a 	mov	r18,r5
 80497f8:	3027883a 	mov	r19,r6
 80497fc:	1800141e 	bne	r3,zero,8049850 <__mdiff+0x84>
 8049800:	1085883a 	add	r2,r2,r2
 8049804:	1085883a 	add	r2,r2,r2
 8049808:	2a000504 	addi	r8,r5,20
 804980c:	34000504 	addi	r16,r6,20
 8049810:	4087883a 	add	r3,r8,r2
 8049814:	8085883a 	add	r2,r16,r2
 8049818:	00000106 	br	8049820 <__mdiff+0x54>
 804981c:	40c0592e 	bgeu	r8,r3,8049984 <__mdiff+0x1b8>
 8049820:	18ffff04 	addi	r3,r3,-4
 8049824:	10bfff04 	addi	r2,r2,-4
 8049828:	19c00017 	ldw	r7,0(r3)
 804982c:	11400017 	ldw	r5,0(r2)
 8049830:	397ffa26 	beq	r7,r5,804981c <__alt_data_end+0xfffe177c>
 8049834:	3940592e 	bgeu	r7,r5,804999c <__mdiff+0x1d0>
 8049838:	9005883a 	mov	r2,r18
 804983c:	4023883a 	mov	r17,r8
 8049840:	9825883a 	mov	r18,r19
 8049844:	05000044 	movi	r20,1
 8049848:	1027883a 	mov	r19,r2
 804984c:	00000406 	br	8049860 <__mdiff+0x94>
 8049850:	18005616 	blt	r3,zero,80499ac <__mdiff+0x1e0>
 8049854:	34400504 	addi	r17,r6,20
 8049858:	2c000504 	addi	r16,r5,20
 804985c:	0029883a 	mov	r20,zero
 8049860:	91400117 	ldw	r5,4(r18)
 8049864:	8048de80 	call	8048de8 <_Balloc>
 8049868:	92400417 	ldw	r9,16(r18)
 804986c:	9b000417 	ldw	r12,16(r19)
 8049870:	12c00504 	addi	r11,r2,20
 8049874:	4a51883a 	add	r8,r9,r9
 8049878:	6319883a 	add	r12,r12,r12
 804987c:	4211883a 	add	r8,r8,r8
 8049880:	6319883a 	add	r12,r12,r12
 8049884:	15000315 	stw	r20,12(r2)
 8049888:	8211883a 	add	r8,r16,r8
 804988c:	8b19883a 	add	r12,r17,r12
 8049890:	0007883a 	mov	r3,zero
 8049894:	81400017 	ldw	r5,0(r16)
 8049898:	89c00017 	ldw	r7,0(r17)
 804989c:	59800104 	addi	r6,r11,4
 80498a0:	293fffcc 	andi	r4,r5,65535
 80498a4:	20c7883a 	add	r3,r4,r3
 80498a8:	393fffcc 	andi	r4,r7,65535
 80498ac:	1909c83a 	sub	r4,r3,r4
 80498b0:	280ad43a 	srli	r5,r5,16
 80498b4:	380ed43a 	srli	r7,r7,16
 80498b8:	2007d43a 	srai	r3,r4,16
 80498bc:	213fffcc 	andi	r4,r4,65535
 80498c0:	29cbc83a 	sub	r5,r5,r7
 80498c4:	28c7883a 	add	r3,r5,r3
 80498c8:	180a943a 	slli	r5,r3,16
 80498cc:	8c400104 	addi	r17,r17,4
 80498d0:	84000104 	addi	r16,r16,4
 80498d4:	2908b03a 	or	r4,r5,r4
 80498d8:	59000015 	stw	r4,0(r11)
 80498dc:	1807d43a 	srai	r3,r3,16
 80498e0:	3015883a 	mov	r10,r6
 80498e4:	3017883a 	mov	r11,r6
 80498e8:	8b3fea36 	bltu	r17,r12,8049894 <__alt_data_end+0xfffe17f4>
 80498ec:	8200162e 	bgeu	r16,r8,8049948 <__mdiff+0x17c>
 80498f0:	8017883a 	mov	r11,r16
 80498f4:	59400017 	ldw	r5,0(r11)
 80498f8:	31800104 	addi	r6,r6,4
 80498fc:	5ac00104 	addi	r11,r11,4
 8049900:	293fffcc 	andi	r4,r5,65535
 8049904:	20c7883a 	add	r3,r4,r3
 8049908:	280ed43a 	srli	r7,r5,16
 804990c:	180bd43a 	srai	r5,r3,16
 8049910:	193fffcc 	andi	r4,r3,65535
 8049914:	3947883a 	add	r3,r7,r5
 8049918:	180a943a 	slli	r5,r3,16
 804991c:	1807d43a 	srai	r3,r3,16
 8049920:	2908b03a 	or	r4,r5,r4
 8049924:	313fff15 	stw	r4,-4(r6)
 8049928:	5a3ff236 	bltu	r11,r8,80498f4 <__alt_data_end+0xfffe1854>
 804992c:	0406303a 	nor	r3,zero,r16
 8049930:	1a07883a 	add	r3,r3,r8
 8049934:	1806d0ba 	srli	r3,r3,2
 8049938:	18c00044 	addi	r3,r3,1
 804993c:	18c7883a 	add	r3,r3,r3
 8049940:	18c7883a 	add	r3,r3,r3
 8049944:	50d5883a 	add	r10,r10,r3
 8049948:	50ffff04 	addi	r3,r10,-4
 804994c:	2000041e 	bne	r4,zero,8049960 <__mdiff+0x194>
 8049950:	18ffff04 	addi	r3,r3,-4
 8049954:	19000017 	ldw	r4,0(r3)
 8049958:	4a7fffc4 	addi	r9,r9,-1
 804995c:	203ffc26 	beq	r4,zero,8049950 <__alt_data_end+0xfffe18b0>
 8049960:	12400415 	stw	r9,16(r2)
 8049964:	dfc00517 	ldw	ra,20(sp)
 8049968:	dd000417 	ldw	r20,16(sp)
 804996c:	dcc00317 	ldw	r19,12(sp)
 8049970:	dc800217 	ldw	r18,8(sp)
 8049974:	dc400117 	ldw	r17,4(sp)
 8049978:	dc000017 	ldw	r16,0(sp)
 804997c:	dec00604 	addi	sp,sp,24
 8049980:	f800283a 	ret
 8049984:	000b883a 	mov	r5,zero
 8049988:	8048de80 	call	8048de8 <_Balloc>
 804998c:	00c00044 	movi	r3,1
 8049990:	10c00415 	stw	r3,16(r2)
 8049994:	10000515 	stw	zero,20(r2)
 8049998:	003ff206 	br	8049964 <__alt_data_end+0xfffe18c4>
 804999c:	8023883a 	mov	r17,r16
 80499a0:	0029883a 	mov	r20,zero
 80499a4:	4021883a 	mov	r16,r8
 80499a8:	003fad06 	br	8049860 <__alt_data_end+0xfffe17c0>
 80499ac:	9005883a 	mov	r2,r18
 80499b0:	94400504 	addi	r17,r18,20
 80499b4:	9c000504 	addi	r16,r19,20
 80499b8:	9825883a 	mov	r18,r19
 80499bc:	05000044 	movi	r20,1
 80499c0:	1027883a 	mov	r19,r2
 80499c4:	003fa606 	br	8049860 <__alt_data_end+0xfffe17c0>

080499c8 <__ulp>:
 80499c8:	295ffc2c 	andhi	r5,r5,32752
 80499cc:	00bf3034 	movhi	r2,64704
 80499d0:	2887883a 	add	r3,r5,r2
 80499d4:	00c0020e 	bge	zero,r3,80499e0 <__ulp+0x18>
 80499d8:	0005883a 	mov	r2,zero
 80499dc:	f800283a 	ret
 80499e0:	00c7c83a 	sub	r3,zero,r3
 80499e4:	1807d53a 	srai	r3,r3,20
 80499e8:	008004c4 	movi	r2,19
 80499ec:	10c00b0e 	bge	r2,r3,8049a1c <__ulp+0x54>
 80499f0:	18bffb04 	addi	r2,r3,-20
 80499f4:	01000784 	movi	r4,30
 80499f8:	0007883a 	mov	r3,zero
 80499fc:	20800516 	blt	r4,r2,8049a14 <__ulp+0x4c>
 8049a00:	010007c4 	movi	r4,31
 8049a04:	2089c83a 	sub	r4,r4,r2
 8049a08:	00800044 	movi	r2,1
 8049a0c:	1104983a 	sll	r2,r2,r4
 8049a10:	f800283a 	ret
 8049a14:	00800044 	movi	r2,1
 8049a18:	f800283a 	ret
 8049a1c:	01400234 	movhi	r5,8
 8049a20:	28c7d83a 	sra	r3,r5,r3
 8049a24:	0005883a 	mov	r2,zero
 8049a28:	f800283a 	ret

08049a2c <__b2d>:
 8049a2c:	defffa04 	addi	sp,sp,-24
 8049a30:	dc000015 	stw	r16,0(sp)
 8049a34:	24000417 	ldw	r16,16(r4)
 8049a38:	dc400115 	stw	r17,4(sp)
 8049a3c:	24400504 	addi	r17,r4,20
 8049a40:	8421883a 	add	r16,r16,r16
 8049a44:	8421883a 	add	r16,r16,r16
 8049a48:	8c21883a 	add	r16,r17,r16
 8049a4c:	dc800215 	stw	r18,8(sp)
 8049a50:	84bfff17 	ldw	r18,-4(r16)
 8049a54:	dd000415 	stw	r20,16(sp)
 8049a58:	dcc00315 	stw	r19,12(sp)
 8049a5c:	9009883a 	mov	r4,r18
 8049a60:	2829883a 	mov	r20,r5
 8049a64:	dfc00515 	stw	ra,20(sp)
 8049a68:	80491040 	call	8049104 <__hi0bits>
 8049a6c:	00c00804 	movi	r3,32
 8049a70:	1889c83a 	sub	r4,r3,r2
 8049a74:	a1000015 	stw	r4,0(r20)
 8049a78:	01000284 	movi	r4,10
 8049a7c:	84ffff04 	addi	r19,r16,-4
 8049a80:	20801216 	blt	r4,r2,8049acc <__b2d+0xa0>
 8049a84:	018002c4 	movi	r6,11
 8049a88:	308dc83a 	sub	r6,r6,r2
 8049a8c:	9186d83a 	srl	r3,r18,r6
 8049a90:	18cffc34 	orhi	r3,r3,16368
 8049a94:	8cc0212e 	bgeu	r17,r19,8049b1c <__b2d+0xf0>
 8049a98:	813ffe17 	ldw	r4,-8(r16)
 8049a9c:	218cd83a 	srl	r6,r4,r6
 8049aa0:	10800544 	addi	r2,r2,21
 8049aa4:	9084983a 	sll	r2,r18,r2
 8049aa8:	1184b03a 	or	r2,r2,r6
 8049aac:	dfc00517 	ldw	ra,20(sp)
 8049ab0:	dd000417 	ldw	r20,16(sp)
 8049ab4:	dcc00317 	ldw	r19,12(sp)
 8049ab8:	dc800217 	ldw	r18,8(sp)
 8049abc:	dc400117 	ldw	r17,4(sp)
 8049ac0:	dc000017 	ldw	r16,0(sp)
 8049ac4:	dec00604 	addi	sp,sp,24
 8049ac8:	f800283a 	ret
 8049acc:	8cc00f2e 	bgeu	r17,r19,8049b0c <__b2d+0xe0>
 8049ad0:	117ffd44 	addi	r5,r2,-11
 8049ad4:	80bffe17 	ldw	r2,-8(r16)
 8049ad8:	28000e26 	beq	r5,zero,8049b14 <__b2d+0xe8>
 8049adc:	1949c83a 	sub	r4,r3,r5
 8049ae0:	9164983a 	sll	r18,r18,r5
 8049ae4:	1106d83a 	srl	r3,r2,r4
 8049ae8:	81bffe04 	addi	r6,r16,-8
 8049aec:	948ffc34 	orhi	r18,r18,16368
 8049af0:	90c6b03a 	or	r3,r18,r3
 8049af4:	89800e2e 	bgeu	r17,r6,8049b30 <__b2d+0x104>
 8049af8:	81bffd17 	ldw	r6,-12(r16)
 8049afc:	1144983a 	sll	r2,r2,r5
 8049b00:	310ad83a 	srl	r5,r6,r4
 8049b04:	2884b03a 	or	r2,r5,r2
 8049b08:	003fe806 	br	8049aac <__alt_data_end+0xfffe1a0c>
 8049b0c:	10bffd44 	addi	r2,r2,-11
 8049b10:	1000041e 	bne	r2,zero,8049b24 <__b2d+0xf8>
 8049b14:	90cffc34 	orhi	r3,r18,16368
 8049b18:	003fe406 	br	8049aac <__alt_data_end+0xfffe1a0c>
 8049b1c:	000d883a 	mov	r6,zero
 8049b20:	003fdf06 	br	8049aa0 <__alt_data_end+0xfffe1a00>
 8049b24:	90a4983a 	sll	r18,r18,r2
 8049b28:	0005883a 	mov	r2,zero
 8049b2c:	003ff906 	br	8049b14 <__alt_data_end+0xfffe1a74>
 8049b30:	1144983a 	sll	r2,r2,r5
 8049b34:	003fdd06 	br	8049aac <__alt_data_end+0xfffe1a0c>

08049b38 <__d2b>:
 8049b38:	defff804 	addi	sp,sp,-32
 8049b3c:	dc000215 	stw	r16,8(sp)
 8049b40:	3021883a 	mov	r16,r6
 8049b44:	dc400315 	stw	r17,12(sp)
 8049b48:	8022907a 	slli	r17,r16,1
 8049b4c:	dd000615 	stw	r20,24(sp)
 8049b50:	2829883a 	mov	r20,r5
 8049b54:	01400044 	movi	r5,1
 8049b58:	dcc00515 	stw	r19,20(sp)
 8049b5c:	dc800415 	stw	r18,16(sp)
 8049b60:	dfc00715 	stw	ra,28(sp)
 8049b64:	3825883a 	mov	r18,r7
 8049b68:	8822d57a 	srli	r17,r17,21
 8049b6c:	8048de80 	call	8048de8 <_Balloc>
 8049b70:	1027883a 	mov	r19,r2
 8049b74:	00800434 	movhi	r2,16
 8049b78:	10bfffc4 	addi	r2,r2,-1
 8049b7c:	808c703a 	and	r6,r16,r2
 8049b80:	88000126 	beq	r17,zero,8049b88 <__d2b+0x50>
 8049b84:	31800434 	orhi	r6,r6,16
 8049b88:	d9800015 	stw	r6,0(sp)
 8049b8c:	a0002426 	beq	r20,zero,8049c20 <__d2b+0xe8>
 8049b90:	d9000104 	addi	r4,sp,4
 8049b94:	dd000115 	stw	r20,4(sp)
 8049b98:	804916c0 	call	804916c <__lo0bits>
 8049b9c:	d8c00017 	ldw	r3,0(sp)
 8049ba0:	10002f1e 	bne	r2,zero,8049c60 <__d2b+0x128>
 8049ba4:	d9000117 	ldw	r4,4(sp)
 8049ba8:	99000515 	stw	r4,20(r19)
 8049bac:	1821003a 	cmpeq	r16,r3,zero
 8049bb0:	01000084 	movi	r4,2
 8049bb4:	2421c83a 	sub	r16,r4,r16
 8049bb8:	98c00615 	stw	r3,24(r19)
 8049bbc:	9c000415 	stw	r16,16(r19)
 8049bc0:	88001f1e 	bne	r17,zero,8049c40 <__d2b+0x108>
 8049bc4:	10bef384 	addi	r2,r2,-1074
 8049bc8:	90800015 	stw	r2,0(r18)
 8049bcc:	00900034 	movhi	r2,16384
 8049bd0:	10bfffc4 	addi	r2,r2,-1
 8049bd4:	8085883a 	add	r2,r16,r2
 8049bd8:	1085883a 	add	r2,r2,r2
 8049bdc:	1085883a 	add	r2,r2,r2
 8049be0:	9885883a 	add	r2,r19,r2
 8049be4:	11000517 	ldw	r4,20(r2)
 8049be8:	8020917a 	slli	r16,r16,5
 8049bec:	80491040 	call	8049104 <__hi0bits>
 8049bf0:	d8c00817 	ldw	r3,32(sp)
 8049bf4:	8085c83a 	sub	r2,r16,r2
 8049bf8:	18800015 	stw	r2,0(r3)
 8049bfc:	9805883a 	mov	r2,r19
 8049c00:	dfc00717 	ldw	ra,28(sp)
 8049c04:	dd000617 	ldw	r20,24(sp)
 8049c08:	dcc00517 	ldw	r19,20(sp)
 8049c0c:	dc800417 	ldw	r18,16(sp)
 8049c10:	dc400317 	ldw	r17,12(sp)
 8049c14:	dc000217 	ldw	r16,8(sp)
 8049c18:	dec00804 	addi	sp,sp,32
 8049c1c:	f800283a 	ret
 8049c20:	d809883a 	mov	r4,sp
 8049c24:	804916c0 	call	804916c <__lo0bits>
 8049c28:	d8c00017 	ldw	r3,0(sp)
 8049c2c:	04000044 	movi	r16,1
 8049c30:	9c000415 	stw	r16,16(r19)
 8049c34:	98c00515 	stw	r3,20(r19)
 8049c38:	10800804 	addi	r2,r2,32
 8049c3c:	883fe126 	beq	r17,zero,8049bc4 <__alt_data_end+0xfffe1b24>
 8049c40:	00c00d44 	movi	r3,53
 8049c44:	8c7ef344 	addi	r17,r17,-1075
 8049c48:	88a3883a 	add	r17,r17,r2
 8049c4c:	1885c83a 	sub	r2,r3,r2
 8049c50:	d8c00817 	ldw	r3,32(sp)
 8049c54:	94400015 	stw	r17,0(r18)
 8049c58:	18800015 	stw	r2,0(r3)
 8049c5c:	003fe706 	br	8049bfc <__alt_data_end+0xfffe1b5c>
 8049c60:	01000804 	movi	r4,32
 8049c64:	2089c83a 	sub	r4,r4,r2
 8049c68:	1908983a 	sll	r4,r3,r4
 8049c6c:	d9400117 	ldw	r5,4(sp)
 8049c70:	1886d83a 	srl	r3,r3,r2
 8049c74:	2148b03a 	or	r4,r4,r5
 8049c78:	99000515 	stw	r4,20(r19)
 8049c7c:	d8c00015 	stw	r3,0(sp)
 8049c80:	003fca06 	br	8049bac <__alt_data_end+0xfffe1b0c>

08049c84 <__ratio>:
 8049c84:	defff904 	addi	sp,sp,-28
 8049c88:	dc400315 	stw	r17,12(sp)
 8049c8c:	2823883a 	mov	r17,r5
 8049c90:	d9400104 	addi	r5,sp,4
 8049c94:	dfc00615 	stw	ra,24(sp)
 8049c98:	dcc00515 	stw	r19,20(sp)
 8049c9c:	dc800415 	stw	r18,16(sp)
 8049ca0:	2027883a 	mov	r19,r4
 8049ca4:	dc000215 	stw	r16,8(sp)
 8049ca8:	8049a2c0 	call	8049a2c <__b2d>
 8049cac:	d80b883a 	mov	r5,sp
 8049cb0:	8809883a 	mov	r4,r17
 8049cb4:	1025883a 	mov	r18,r2
 8049cb8:	1821883a 	mov	r16,r3
 8049cbc:	8049a2c0 	call	8049a2c <__b2d>
 8049cc0:	8a000417 	ldw	r8,16(r17)
 8049cc4:	99000417 	ldw	r4,16(r19)
 8049cc8:	d9400117 	ldw	r5,4(sp)
 8049ccc:	2209c83a 	sub	r4,r4,r8
 8049cd0:	2010917a 	slli	r8,r4,5
 8049cd4:	d9000017 	ldw	r4,0(sp)
 8049cd8:	2909c83a 	sub	r4,r5,r4
 8049cdc:	4109883a 	add	r4,r8,r4
 8049ce0:	01000e0e 	bge	zero,r4,8049d1c <__ratio+0x98>
 8049ce4:	2008953a 	slli	r4,r4,20
 8049ce8:	2421883a 	add	r16,r4,r16
 8049cec:	100d883a 	mov	r6,r2
 8049cf0:	180f883a 	mov	r7,r3
 8049cf4:	9009883a 	mov	r4,r18
 8049cf8:	800b883a 	mov	r5,r16
 8049cfc:	8041fd80 	call	8041fd8 <__divdf3>
 8049d00:	dfc00617 	ldw	ra,24(sp)
 8049d04:	dcc00517 	ldw	r19,20(sp)
 8049d08:	dc800417 	ldw	r18,16(sp)
 8049d0c:	dc400317 	ldw	r17,12(sp)
 8049d10:	dc000217 	ldw	r16,8(sp)
 8049d14:	dec00704 	addi	sp,sp,28
 8049d18:	f800283a 	ret
 8049d1c:	2008953a 	slli	r4,r4,20
 8049d20:	1907c83a 	sub	r3,r3,r4
 8049d24:	003ff106 	br	8049cec <__alt_data_end+0xfffe1c4c>

08049d28 <_mprec_log10>:
 8049d28:	defffe04 	addi	sp,sp,-8
 8049d2c:	dc000015 	stw	r16,0(sp)
 8049d30:	dfc00115 	stw	ra,4(sp)
 8049d34:	008005c4 	movi	r2,23
 8049d38:	2021883a 	mov	r16,r4
 8049d3c:	11000d0e 	bge	r2,r4,8049d74 <_mprec_log10+0x4c>
 8049d40:	0005883a 	mov	r2,zero
 8049d44:	00cffc34 	movhi	r3,16368
 8049d48:	843fffc4 	addi	r16,r16,-1
 8049d4c:	000d883a 	mov	r6,zero
 8049d50:	01d00934 	movhi	r7,16420
 8049d54:	1009883a 	mov	r4,r2
 8049d58:	180b883a 	mov	r5,r3
 8049d5c:	8042b780 	call	8042b78 <__muldf3>
 8049d60:	803ff91e 	bne	r16,zero,8049d48 <__alt_data_end+0xfffe1ca8>
 8049d64:	dfc00117 	ldw	ra,4(sp)
 8049d68:	dc000017 	ldw	r16,0(sp)
 8049d6c:	dec00204 	addi	sp,sp,8
 8049d70:	f800283a 	ret
 8049d74:	202090fa 	slli	r16,r4,3
 8049d78:	00820174 	movhi	r2,2053
 8049d7c:	108c5e04 	addi	r2,r2,12664
 8049d80:	1421883a 	add	r16,r2,r16
 8049d84:	80800017 	ldw	r2,0(r16)
 8049d88:	80c00117 	ldw	r3,4(r16)
 8049d8c:	dfc00117 	ldw	ra,4(sp)
 8049d90:	dc000017 	ldw	r16,0(sp)
 8049d94:	dec00204 	addi	sp,sp,8
 8049d98:	f800283a 	ret

08049d9c <__copybits>:
 8049d9c:	297fffc4 	addi	r5,r5,-1
 8049da0:	280fd17a 	srai	r7,r5,5
 8049da4:	30c00417 	ldw	r3,16(r6)
 8049da8:	30800504 	addi	r2,r6,20
 8049dac:	39c00044 	addi	r7,r7,1
 8049db0:	18c7883a 	add	r3,r3,r3
 8049db4:	39cf883a 	add	r7,r7,r7
 8049db8:	18c7883a 	add	r3,r3,r3
 8049dbc:	39cf883a 	add	r7,r7,r7
 8049dc0:	10c7883a 	add	r3,r2,r3
 8049dc4:	21cf883a 	add	r7,r4,r7
 8049dc8:	10c00d2e 	bgeu	r2,r3,8049e00 <__copybits+0x64>
 8049dcc:	200b883a 	mov	r5,r4
 8049dd0:	12000017 	ldw	r8,0(r2)
 8049dd4:	29400104 	addi	r5,r5,4
 8049dd8:	10800104 	addi	r2,r2,4
 8049ddc:	2a3fff15 	stw	r8,-4(r5)
 8049de0:	10fffb36 	bltu	r2,r3,8049dd0 <__alt_data_end+0xfffe1d30>
 8049de4:	1985c83a 	sub	r2,r3,r6
 8049de8:	10bffac4 	addi	r2,r2,-21
 8049dec:	1004d0ba 	srli	r2,r2,2
 8049df0:	10800044 	addi	r2,r2,1
 8049df4:	1085883a 	add	r2,r2,r2
 8049df8:	1085883a 	add	r2,r2,r2
 8049dfc:	2089883a 	add	r4,r4,r2
 8049e00:	21c0032e 	bgeu	r4,r7,8049e10 <__copybits+0x74>
 8049e04:	20000015 	stw	zero,0(r4)
 8049e08:	21000104 	addi	r4,r4,4
 8049e0c:	21fffd36 	bltu	r4,r7,8049e04 <__alt_data_end+0xfffe1d64>
 8049e10:	f800283a 	ret

08049e14 <__any_on>:
 8049e14:	20c00417 	ldw	r3,16(r4)
 8049e18:	2805d17a 	srai	r2,r5,5
 8049e1c:	21000504 	addi	r4,r4,20
 8049e20:	18800d0e 	bge	r3,r2,8049e58 <__any_on+0x44>
 8049e24:	18c7883a 	add	r3,r3,r3
 8049e28:	18c7883a 	add	r3,r3,r3
 8049e2c:	20c7883a 	add	r3,r4,r3
 8049e30:	20c0192e 	bgeu	r4,r3,8049e98 <__any_on+0x84>
 8049e34:	18bfff17 	ldw	r2,-4(r3)
 8049e38:	18ffff04 	addi	r3,r3,-4
 8049e3c:	1000041e 	bne	r2,zero,8049e50 <__any_on+0x3c>
 8049e40:	20c0142e 	bgeu	r4,r3,8049e94 <__any_on+0x80>
 8049e44:	18ffff04 	addi	r3,r3,-4
 8049e48:	19400017 	ldw	r5,0(r3)
 8049e4c:	283ffc26 	beq	r5,zero,8049e40 <__alt_data_end+0xfffe1da0>
 8049e50:	00800044 	movi	r2,1
 8049e54:	f800283a 	ret
 8049e58:	10c00a0e 	bge	r2,r3,8049e84 <__any_on+0x70>
 8049e5c:	1085883a 	add	r2,r2,r2
 8049e60:	1085883a 	add	r2,r2,r2
 8049e64:	294007cc 	andi	r5,r5,31
 8049e68:	2087883a 	add	r3,r4,r2
 8049e6c:	283ff026 	beq	r5,zero,8049e30 <__alt_data_end+0xfffe1d90>
 8049e70:	19800017 	ldw	r6,0(r3)
 8049e74:	3144d83a 	srl	r2,r6,r5
 8049e78:	114a983a 	sll	r5,r2,r5
 8049e7c:	317ff41e 	bne	r6,r5,8049e50 <__alt_data_end+0xfffe1db0>
 8049e80:	003feb06 	br	8049e30 <__alt_data_end+0xfffe1d90>
 8049e84:	1085883a 	add	r2,r2,r2
 8049e88:	1085883a 	add	r2,r2,r2
 8049e8c:	2087883a 	add	r3,r4,r2
 8049e90:	003fe706 	br	8049e30 <__alt_data_end+0xfffe1d90>
 8049e94:	f800283a 	ret
 8049e98:	0005883a 	mov	r2,zero
 8049e9c:	f800283a 	ret

08049ea0 <_realloc_r>:
 8049ea0:	defff604 	addi	sp,sp,-40
 8049ea4:	dc800215 	stw	r18,8(sp)
 8049ea8:	dfc00915 	stw	ra,36(sp)
 8049eac:	df000815 	stw	fp,32(sp)
 8049eb0:	ddc00715 	stw	r23,28(sp)
 8049eb4:	dd800615 	stw	r22,24(sp)
 8049eb8:	dd400515 	stw	r21,20(sp)
 8049ebc:	dd000415 	stw	r20,16(sp)
 8049ec0:	dcc00315 	stw	r19,12(sp)
 8049ec4:	dc400115 	stw	r17,4(sp)
 8049ec8:	dc000015 	stw	r16,0(sp)
 8049ecc:	3025883a 	mov	r18,r6
 8049ed0:	2800b726 	beq	r5,zero,804a1b0 <_realloc_r+0x310>
 8049ed4:	282b883a 	mov	r21,r5
 8049ed8:	2029883a 	mov	r20,r4
 8049edc:	804f3a00 	call	804f3a0 <__malloc_lock>
 8049ee0:	a8bfff17 	ldw	r2,-4(r21)
 8049ee4:	043fff04 	movi	r16,-4
 8049ee8:	90c002c4 	addi	r3,r18,11
 8049eec:	01000584 	movi	r4,22
 8049ef0:	acfffe04 	addi	r19,r21,-8
 8049ef4:	1420703a 	and	r16,r2,r16
 8049ef8:	20c0332e 	bgeu	r4,r3,8049fc8 <_realloc_r+0x128>
 8049efc:	047ffe04 	movi	r17,-8
 8049f00:	1c62703a 	and	r17,r3,r17
 8049f04:	8807883a 	mov	r3,r17
 8049f08:	88005816 	blt	r17,zero,804a06c <_realloc_r+0x1cc>
 8049f0c:	8c805736 	bltu	r17,r18,804a06c <_realloc_r+0x1cc>
 8049f10:	80c0300e 	bge	r16,r3,8049fd4 <_realloc_r+0x134>
 8049f14:	07020174 	movhi	fp,2053
 8049f18:	e70df404 	addi	fp,fp,14288
 8049f1c:	e1c00217 	ldw	r7,8(fp)
 8049f20:	9c09883a 	add	r4,r19,r16
 8049f24:	22000117 	ldw	r8,4(r4)
 8049f28:	21c06326 	beq	r4,r7,804a0b8 <_realloc_r+0x218>
 8049f2c:	017fff84 	movi	r5,-2
 8049f30:	414a703a 	and	r5,r8,r5
 8049f34:	214b883a 	add	r5,r4,r5
 8049f38:	29800117 	ldw	r6,4(r5)
 8049f3c:	3180004c 	andi	r6,r6,1
 8049f40:	30003f26 	beq	r6,zero,804a040 <_realloc_r+0x1a0>
 8049f44:	1080004c 	andi	r2,r2,1
 8049f48:	10008326 	beq	r2,zero,804a158 <_realloc_r+0x2b8>
 8049f4c:	900b883a 	mov	r5,r18
 8049f50:	a009883a 	mov	r4,r20
 8049f54:	80482740 	call	8048274 <_malloc_r>
 8049f58:	1025883a 	mov	r18,r2
 8049f5c:	10011e26 	beq	r2,zero,804a3d8 <_realloc_r+0x538>
 8049f60:	a93fff17 	ldw	r4,-4(r21)
 8049f64:	10fffe04 	addi	r3,r2,-8
 8049f68:	00bfff84 	movi	r2,-2
 8049f6c:	2084703a 	and	r2,r4,r2
 8049f70:	9885883a 	add	r2,r19,r2
 8049f74:	1880ee26 	beq	r3,r2,804a330 <_realloc_r+0x490>
 8049f78:	81bfff04 	addi	r6,r16,-4
 8049f7c:	00800904 	movi	r2,36
 8049f80:	1180b836 	bltu	r2,r6,804a264 <_realloc_r+0x3c4>
 8049f84:	00c004c4 	movi	r3,19
 8049f88:	19809636 	bltu	r3,r6,804a1e4 <_realloc_r+0x344>
 8049f8c:	9005883a 	mov	r2,r18
 8049f90:	a807883a 	mov	r3,r21
 8049f94:	19000017 	ldw	r4,0(r3)
 8049f98:	11000015 	stw	r4,0(r2)
 8049f9c:	19000117 	ldw	r4,4(r3)
 8049fa0:	11000115 	stw	r4,4(r2)
 8049fa4:	18c00217 	ldw	r3,8(r3)
 8049fa8:	10c00215 	stw	r3,8(r2)
 8049fac:	a80b883a 	mov	r5,r21
 8049fb0:	a009883a 	mov	r4,r20
 8049fb4:	804c4080 	call	804c408 <_free_r>
 8049fb8:	a009883a 	mov	r4,r20
 8049fbc:	804f3c40 	call	804f3c4 <__malloc_unlock>
 8049fc0:	9005883a 	mov	r2,r18
 8049fc4:	00001206 	br	804a010 <_realloc_r+0x170>
 8049fc8:	00c00404 	movi	r3,16
 8049fcc:	1823883a 	mov	r17,r3
 8049fd0:	003fce06 	br	8049f0c <__alt_data_end+0xfffe1e6c>
 8049fd4:	a825883a 	mov	r18,r21
 8049fd8:	8445c83a 	sub	r2,r16,r17
 8049fdc:	00c003c4 	movi	r3,15
 8049fe0:	18802636 	bltu	r3,r2,804a07c <_realloc_r+0x1dc>
 8049fe4:	99800117 	ldw	r6,4(r19)
 8049fe8:	9c07883a 	add	r3,r19,r16
 8049fec:	3180004c 	andi	r6,r6,1
 8049ff0:	3420b03a 	or	r16,r6,r16
 8049ff4:	9c000115 	stw	r16,4(r19)
 8049ff8:	18800117 	ldw	r2,4(r3)
 8049ffc:	10800054 	ori	r2,r2,1
 804a000:	18800115 	stw	r2,4(r3)
 804a004:	a009883a 	mov	r4,r20
 804a008:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804a00c:	9005883a 	mov	r2,r18
 804a010:	dfc00917 	ldw	ra,36(sp)
 804a014:	df000817 	ldw	fp,32(sp)
 804a018:	ddc00717 	ldw	r23,28(sp)
 804a01c:	dd800617 	ldw	r22,24(sp)
 804a020:	dd400517 	ldw	r21,20(sp)
 804a024:	dd000417 	ldw	r20,16(sp)
 804a028:	dcc00317 	ldw	r19,12(sp)
 804a02c:	dc800217 	ldw	r18,8(sp)
 804a030:	dc400117 	ldw	r17,4(sp)
 804a034:	dc000017 	ldw	r16,0(sp)
 804a038:	dec00a04 	addi	sp,sp,40
 804a03c:	f800283a 	ret
 804a040:	017fff04 	movi	r5,-4
 804a044:	414a703a 	and	r5,r8,r5
 804a048:	814d883a 	add	r6,r16,r5
 804a04c:	30c01f16 	blt	r6,r3,804a0cc <_realloc_r+0x22c>
 804a050:	20800317 	ldw	r2,12(r4)
 804a054:	20c00217 	ldw	r3,8(r4)
 804a058:	a825883a 	mov	r18,r21
 804a05c:	3021883a 	mov	r16,r6
 804a060:	18800315 	stw	r2,12(r3)
 804a064:	10c00215 	stw	r3,8(r2)
 804a068:	003fdb06 	br	8049fd8 <__alt_data_end+0xfffe1f38>
 804a06c:	00800304 	movi	r2,12
 804a070:	a0800015 	stw	r2,0(r20)
 804a074:	0005883a 	mov	r2,zero
 804a078:	003fe506 	br	804a010 <__alt_data_end+0xfffe1f70>
 804a07c:	98c00117 	ldw	r3,4(r19)
 804a080:	9c4b883a 	add	r5,r19,r17
 804a084:	11000054 	ori	r4,r2,1
 804a088:	18c0004c 	andi	r3,r3,1
 804a08c:	1c62b03a 	or	r17,r3,r17
 804a090:	9c400115 	stw	r17,4(r19)
 804a094:	29000115 	stw	r4,4(r5)
 804a098:	2885883a 	add	r2,r5,r2
 804a09c:	10c00117 	ldw	r3,4(r2)
 804a0a0:	29400204 	addi	r5,r5,8
 804a0a4:	a009883a 	mov	r4,r20
 804a0a8:	18c00054 	ori	r3,r3,1
 804a0ac:	10c00115 	stw	r3,4(r2)
 804a0b0:	804c4080 	call	804c408 <_free_r>
 804a0b4:	003fd306 	br	804a004 <__alt_data_end+0xfffe1f64>
 804a0b8:	017fff04 	movi	r5,-4
 804a0bc:	414a703a 	and	r5,r8,r5
 804a0c0:	89800404 	addi	r6,r17,16
 804a0c4:	8151883a 	add	r8,r16,r5
 804a0c8:	4180590e 	bge	r8,r6,804a230 <_realloc_r+0x390>
 804a0cc:	1080004c 	andi	r2,r2,1
 804a0d0:	103f9e1e 	bne	r2,zero,8049f4c <__alt_data_end+0xfffe1eac>
 804a0d4:	adbffe17 	ldw	r22,-8(r21)
 804a0d8:	00bfff04 	movi	r2,-4
 804a0dc:	9dadc83a 	sub	r22,r19,r22
 804a0e0:	b1800117 	ldw	r6,4(r22)
 804a0e4:	3084703a 	and	r2,r6,r2
 804a0e8:	20002026 	beq	r4,zero,804a16c <_realloc_r+0x2cc>
 804a0ec:	80af883a 	add	r23,r16,r2
 804a0f0:	b96f883a 	add	r23,r23,r5
 804a0f4:	21c05f26 	beq	r4,r7,804a274 <_realloc_r+0x3d4>
 804a0f8:	b8c01c16 	blt	r23,r3,804a16c <_realloc_r+0x2cc>
 804a0fc:	20800317 	ldw	r2,12(r4)
 804a100:	20c00217 	ldw	r3,8(r4)
 804a104:	81bfff04 	addi	r6,r16,-4
 804a108:	01000904 	movi	r4,36
 804a10c:	18800315 	stw	r2,12(r3)
 804a110:	10c00215 	stw	r3,8(r2)
 804a114:	b0c00217 	ldw	r3,8(r22)
 804a118:	b0800317 	ldw	r2,12(r22)
 804a11c:	b4800204 	addi	r18,r22,8
 804a120:	18800315 	stw	r2,12(r3)
 804a124:	10c00215 	stw	r3,8(r2)
 804a128:	21801b36 	bltu	r4,r6,804a198 <_realloc_r+0x2f8>
 804a12c:	008004c4 	movi	r2,19
 804a130:	1180352e 	bgeu	r2,r6,804a208 <_realloc_r+0x368>
 804a134:	a8800017 	ldw	r2,0(r21)
 804a138:	b0800215 	stw	r2,8(r22)
 804a13c:	a8800117 	ldw	r2,4(r21)
 804a140:	b0800315 	stw	r2,12(r22)
 804a144:	008006c4 	movi	r2,27
 804a148:	11807f36 	bltu	r2,r6,804a348 <_realloc_r+0x4a8>
 804a14c:	b0800404 	addi	r2,r22,16
 804a150:	ad400204 	addi	r21,r21,8
 804a154:	00002d06 	br	804a20c <_realloc_r+0x36c>
 804a158:	adbffe17 	ldw	r22,-8(r21)
 804a15c:	00bfff04 	movi	r2,-4
 804a160:	9dadc83a 	sub	r22,r19,r22
 804a164:	b1000117 	ldw	r4,4(r22)
 804a168:	2084703a 	and	r2,r4,r2
 804a16c:	b03f7726 	beq	r22,zero,8049f4c <__alt_data_end+0xfffe1eac>
 804a170:	80af883a 	add	r23,r16,r2
 804a174:	b8ff7516 	blt	r23,r3,8049f4c <__alt_data_end+0xfffe1eac>
 804a178:	b0800317 	ldw	r2,12(r22)
 804a17c:	b0c00217 	ldw	r3,8(r22)
 804a180:	81bfff04 	addi	r6,r16,-4
 804a184:	01000904 	movi	r4,36
 804a188:	18800315 	stw	r2,12(r3)
 804a18c:	10c00215 	stw	r3,8(r2)
 804a190:	b4800204 	addi	r18,r22,8
 804a194:	21bfe52e 	bgeu	r4,r6,804a12c <__alt_data_end+0xfffe208c>
 804a198:	a80b883a 	mov	r5,r21
 804a19c:	9009883a 	mov	r4,r18
 804a1a0:	8048b640 	call	8048b64 <memmove>
 804a1a4:	b821883a 	mov	r16,r23
 804a1a8:	b027883a 	mov	r19,r22
 804a1ac:	003f8a06 	br	8049fd8 <__alt_data_end+0xfffe1f38>
 804a1b0:	300b883a 	mov	r5,r6
 804a1b4:	dfc00917 	ldw	ra,36(sp)
 804a1b8:	df000817 	ldw	fp,32(sp)
 804a1bc:	ddc00717 	ldw	r23,28(sp)
 804a1c0:	dd800617 	ldw	r22,24(sp)
 804a1c4:	dd400517 	ldw	r21,20(sp)
 804a1c8:	dd000417 	ldw	r20,16(sp)
 804a1cc:	dcc00317 	ldw	r19,12(sp)
 804a1d0:	dc800217 	ldw	r18,8(sp)
 804a1d4:	dc400117 	ldw	r17,4(sp)
 804a1d8:	dc000017 	ldw	r16,0(sp)
 804a1dc:	dec00a04 	addi	sp,sp,40
 804a1e0:	80482741 	jmpi	8048274 <_malloc_r>
 804a1e4:	a8c00017 	ldw	r3,0(r21)
 804a1e8:	90c00015 	stw	r3,0(r18)
 804a1ec:	a8c00117 	ldw	r3,4(r21)
 804a1f0:	90c00115 	stw	r3,4(r18)
 804a1f4:	00c006c4 	movi	r3,27
 804a1f8:	19804536 	bltu	r3,r6,804a310 <_realloc_r+0x470>
 804a1fc:	90800204 	addi	r2,r18,8
 804a200:	a8c00204 	addi	r3,r21,8
 804a204:	003f6306 	br	8049f94 <__alt_data_end+0xfffe1ef4>
 804a208:	9005883a 	mov	r2,r18
 804a20c:	a8c00017 	ldw	r3,0(r21)
 804a210:	b821883a 	mov	r16,r23
 804a214:	b027883a 	mov	r19,r22
 804a218:	10c00015 	stw	r3,0(r2)
 804a21c:	a8c00117 	ldw	r3,4(r21)
 804a220:	10c00115 	stw	r3,4(r2)
 804a224:	a8c00217 	ldw	r3,8(r21)
 804a228:	10c00215 	stw	r3,8(r2)
 804a22c:	003f6a06 	br	8049fd8 <__alt_data_end+0xfffe1f38>
 804a230:	9c67883a 	add	r19,r19,r17
 804a234:	4445c83a 	sub	r2,r8,r17
 804a238:	e4c00215 	stw	r19,8(fp)
 804a23c:	10800054 	ori	r2,r2,1
 804a240:	98800115 	stw	r2,4(r19)
 804a244:	a8bfff17 	ldw	r2,-4(r21)
 804a248:	a009883a 	mov	r4,r20
 804a24c:	1080004c 	andi	r2,r2,1
 804a250:	1462b03a 	or	r17,r2,r17
 804a254:	ac7fff15 	stw	r17,-4(r21)
 804a258:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804a25c:	a805883a 	mov	r2,r21
 804a260:	003f6b06 	br	804a010 <__alt_data_end+0xfffe1f70>
 804a264:	a80b883a 	mov	r5,r21
 804a268:	9009883a 	mov	r4,r18
 804a26c:	8048b640 	call	8048b64 <memmove>
 804a270:	003f4e06 	br	8049fac <__alt_data_end+0xfffe1f0c>
 804a274:	89000404 	addi	r4,r17,16
 804a278:	b93fbc16 	blt	r23,r4,804a16c <__alt_data_end+0xfffe20cc>
 804a27c:	b0800317 	ldw	r2,12(r22)
 804a280:	b0c00217 	ldw	r3,8(r22)
 804a284:	81bfff04 	addi	r6,r16,-4
 804a288:	01000904 	movi	r4,36
 804a28c:	18800315 	stw	r2,12(r3)
 804a290:	10c00215 	stw	r3,8(r2)
 804a294:	b4800204 	addi	r18,r22,8
 804a298:	21804336 	bltu	r4,r6,804a3a8 <_realloc_r+0x508>
 804a29c:	008004c4 	movi	r2,19
 804a2a0:	11803f2e 	bgeu	r2,r6,804a3a0 <_realloc_r+0x500>
 804a2a4:	a8800017 	ldw	r2,0(r21)
 804a2a8:	b0800215 	stw	r2,8(r22)
 804a2ac:	a8800117 	ldw	r2,4(r21)
 804a2b0:	b0800315 	stw	r2,12(r22)
 804a2b4:	008006c4 	movi	r2,27
 804a2b8:	11803f36 	bltu	r2,r6,804a3b8 <_realloc_r+0x518>
 804a2bc:	b0800404 	addi	r2,r22,16
 804a2c0:	ad400204 	addi	r21,r21,8
 804a2c4:	a8c00017 	ldw	r3,0(r21)
 804a2c8:	10c00015 	stw	r3,0(r2)
 804a2cc:	a8c00117 	ldw	r3,4(r21)
 804a2d0:	10c00115 	stw	r3,4(r2)
 804a2d4:	a8c00217 	ldw	r3,8(r21)
 804a2d8:	10c00215 	stw	r3,8(r2)
 804a2dc:	b447883a 	add	r3,r22,r17
 804a2e0:	bc45c83a 	sub	r2,r23,r17
 804a2e4:	e0c00215 	stw	r3,8(fp)
 804a2e8:	10800054 	ori	r2,r2,1
 804a2ec:	18800115 	stw	r2,4(r3)
 804a2f0:	b0800117 	ldw	r2,4(r22)
 804a2f4:	a009883a 	mov	r4,r20
 804a2f8:	1080004c 	andi	r2,r2,1
 804a2fc:	1462b03a 	or	r17,r2,r17
 804a300:	b4400115 	stw	r17,4(r22)
 804a304:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804a308:	9005883a 	mov	r2,r18
 804a30c:	003f4006 	br	804a010 <__alt_data_end+0xfffe1f70>
 804a310:	a8c00217 	ldw	r3,8(r21)
 804a314:	90c00215 	stw	r3,8(r18)
 804a318:	a8c00317 	ldw	r3,12(r21)
 804a31c:	90c00315 	stw	r3,12(r18)
 804a320:	30801126 	beq	r6,r2,804a368 <_realloc_r+0x4c8>
 804a324:	90800404 	addi	r2,r18,16
 804a328:	a8c00404 	addi	r3,r21,16
 804a32c:	003f1906 	br	8049f94 <__alt_data_end+0xfffe1ef4>
 804a330:	90ffff17 	ldw	r3,-4(r18)
 804a334:	00bfff04 	movi	r2,-4
 804a338:	a825883a 	mov	r18,r21
 804a33c:	1884703a 	and	r2,r3,r2
 804a340:	80a1883a 	add	r16,r16,r2
 804a344:	003f2406 	br	8049fd8 <__alt_data_end+0xfffe1f38>
 804a348:	a8800217 	ldw	r2,8(r21)
 804a34c:	b0800415 	stw	r2,16(r22)
 804a350:	a8800317 	ldw	r2,12(r21)
 804a354:	b0800515 	stw	r2,20(r22)
 804a358:	31000a26 	beq	r6,r4,804a384 <_realloc_r+0x4e4>
 804a35c:	b0800604 	addi	r2,r22,24
 804a360:	ad400404 	addi	r21,r21,16
 804a364:	003fa906 	br	804a20c <__alt_data_end+0xfffe216c>
 804a368:	a9000417 	ldw	r4,16(r21)
 804a36c:	90800604 	addi	r2,r18,24
 804a370:	a8c00604 	addi	r3,r21,24
 804a374:	91000415 	stw	r4,16(r18)
 804a378:	a9000517 	ldw	r4,20(r21)
 804a37c:	91000515 	stw	r4,20(r18)
 804a380:	003f0406 	br	8049f94 <__alt_data_end+0xfffe1ef4>
 804a384:	a8c00417 	ldw	r3,16(r21)
 804a388:	ad400604 	addi	r21,r21,24
 804a38c:	b0800804 	addi	r2,r22,32
 804a390:	b0c00615 	stw	r3,24(r22)
 804a394:	a8ffff17 	ldw	r3,-4(r21)
 804a398:	b0c00715 	stw	r3,28(r22)
 804a39c:	003f9b06 	br	804a20c <__alt_data_end+0xfffe216c>
 804a3a0:	9005883a 	mov	r2,r18
 804a3a4:	003fc706 	br	804a2c4 <__alt_data_end+0xfffe2224>
 804a3a8:	a80b883a 	mov	r5,r21
 804a3ac:	9009883a 	mov	r4,r18
 804a3b0:	8048b640 	call	8048b64 <memmove>
 804a3b4:	003fc906 	br	804a2dc <__alt_data_end+0xfffe223c>
 804a3b8:	a8800217 	ldw	r2,8(r21)
 804a3bc:	b0800415 	stw	r2,16(r22)
 804a3c0:	a8800317 	ldw	r2,12(r21)
 804a3c4:	b0800515 	stw	r2,20(r22)
 804a3c8:	31000726 	beq	r6,r4,804a3e8 <_realloc_r+0x548>
 804a3cc:	b0800604 	addi	r2,r22,24
 804a3d0:	ad400404 	addi	r21,r21,16
 804a3d4:	003fbb06 	br	804a2c4 <__alt_data_end+0xfffe2224>
 804a3d8:	a009883a 	mov	r4,r20
 804a3dc:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804a3e0:	0005883a 	mov	r2,zero
 804a3e4:	003f0a06 	br	804a010 <__alt_data_end+0xfffe1f70>
 804a3e8:	a8c00417 	ldw	r3,16(r21)
 804a3ec:	ad400604 	addi	r21,r21,24
 804a3f0:	b0800804 	addi	r2,r22,32
 804a3f4:	b0c00615 	stw	r3,24(r22)
 804a3f8:	a8ffff17 	ldw	r3,-4(r21)
 804a3fc:	b0c00715 	stw	r3,28(r22)
 804a400:	003fb006 	br	804a2c4 <__alt_data_end+0xfffe2224>

0804a404 <__fpclassifyd>:
 804a404:	00a00034 	movhi	r2,32768
 804a408:	10bfffc4 	addi	r2,r2,-1
 804a40c:	2884703a 	and	r2,r5,r2
 804a410:	10000726 	beq	r2,zero,804a430 <__fpclassifyd+0x2c>
 804a414:	00fffc34 	movhi	r3,65520
 804a418:	019ff834 	movhi	r6,32736
 804a41c:	28c7883a 	add	r3,r5,r3
 804a420:	31bfffc4 	addi	r6,r6,-1
 804a424:	30c00536 	bltu	r6,r3,804a43c <__fpclassifyd+0x38>
 804a428:	00800104 	movi	r2,4
 804a42c:	f800283a 	ret
 804a430:	2000021e 	bne	r4,zero,804a43c <__fpclassifyd+0x38>
 804a434:	00800084 	movi	r2,2
 804a438:	f800283a 	ret
 804a43c:	00dffc34 	movhi	r3,32752
 804a440:	019ff834 	movhi	r6,32736
 804a444:	28cb883a 	add	r5,r5,r3
 804a448:	31bfffc4 	addi	r6,r6,-1
 804a44c:	317ff62e 	bgeu	r6,r5,804a428 <__alt_data_end+0xfffe2388>
 804a450:	01400434 	movhi	r5,16
 804a454:	297fffc4 	addi	r5,r5,-1
 804a458:	28800236 	bltu	r5,r2,804a464 <__fpclassifyd+0x60>
 804a45c:	008000c4 	movi	r2,3
 804a460:	f800283a 	ret
 804a464:	10c00226 	beq	r2,r3,804a470 <__fpclassifyd+0x6c>
 804a468:	0005883a 	mov	r2,zero
 804a46c:	f800283a 	ret
 804a470:	2005003a 	cmpeq	r2,r4,zero
 804a474:	f800283a 	ret

0804a478 <_sbrk_r>:
 804a478:	defffd04 	addi	sp,sp,-12
 804a47c:	dc000015 	stw	r16,0(sp)
 804a480:	04020174 	movhi	r16,2053
 804a484:	dc400115 	stw	r17,4(sp)
 804a488:	841ab904 	addi	r16,r16,27364
 804a48c:	2023883a 	mov	r17,r4
 804a490:	2809883a 	mov	r4,r5
 804a494:	dfc00215 	stw	ra,8(sp)
 804a498:	80000015 	stw	zero,0(r16)
 804a49c:	804f5ac0 	call	804f5ac <sbrk>
 804a4a0:	00ffffc4 	movi	r3,-1
 804a4a4:	10c00526 	beq	r2,r3,804a4bc <_sbrk_r+0x44>
 804a4a8:	dfc00217 	ldw	ra,8(sp)
 804a4ac:	dc400117 	ldw	r17,4(sp)
 804a4b0:	dc000017 	ldw	r16,0(sp)
 804a4b4:	dec00304 	addi	sp,sp,12
 804a4b8:	f800283a 	ret
 804a4bc:	80c00017 	ldw	r3,0(r16)
 804a4c0:	183ff926 	beq	r3,zero,804a4a8 <__alt_data_end+0xfffe2408>
 804a4c4:	88c00015 	stw	r3,0(r17)
 804a4c8:	003ff706 	br	804a4a8 <__alt_data_end+0xfffe2408>

0804a4cc <__sread>:
 804a4cc:	defffe04 	addi	sp,sp,-8
 804a4d0:	dc000015 	stw	r16,0(sp)
 804a4d4:	2821883a 	mov	r16,r5
 804a4d8:	2940038f 	ldh	r5,14(r5)
 804a4dc:	dfc00115 	stw	ra,4(sp)
 804a4e0:	804c9340 	call	804c934 <_read_r>
 804a4e4:	10000716 	blt	r2,zero,804a504 <__sread+0x38>
 804a4e8:	80c01417 	ldw	r3,80(r16)
 804a4ec:	1887883a 	add	r3,r3,r2
 804a4f0:	80c01415 	stw	r3,80(r16)
 804a4f4:	dfc00117 	ldw	ra,4(sp)
 804a4f8:	dc000017 	ldw	r16,0(sp)
 804a4fc:	dec00204 	addi	sp,sp,8
 804a500:	f800283a 	ret
 804a504:	80c0030b 	ldhu	r3,12(r16)
 804a508:	18fbffcc 	andi	r3,r3,61439
 804a50c:	80c0030d 	sth	r3,12(r16)
 804a510:	dfc00117 	ldw	ra,4(sp)
 804a514:	dc000017 	ldw	r16,0(sp)
 804a518:	dec00204 	addi	sp,sp,8
 804a51c:	f800283a 	ret

0804a520 <__seofread>:
 804a520:	0005883a 	mov	r2,zero
 804a524:	f800283a 	ret

0804a528 <__swrite>:
 804a528:	2880030b 	ldhu	r2,12(r5)
 804a52c:	defffb04 	addi	sp,sp,-20
 804a530:	dcc00315 	stw	r19,12(sp)
 804a534:	dc800215 	stw	r18,8(sp)
 804a538:	dc400115 	stw	r17,4(sp)
 804a53c:	dc000015 	stw	r16,0(sp)
 804a540:	dfc00415 	stw	ra,16(sp)
 804a544:	10c0400c 	andi	r3,r2,256
 804a548:	2821883a 	mov	r16,r5
 804a54c:	2023883a 	mov	r17,r4
 804a550:	3025883a 	mov	r18,r6
 804a554:	3827883a 	mov	r19,r7
 804a558:	18000526 	beq	r3,zero,804a570 <__swrite+0x48>
 804a55c:	2940038f 	ldh	r5,14(r5)
 804a560:	01c00084 	movi	r7,2
 804a564:	000d883a 	mov	r6,zero
 804a568:	804c7180 	call	804c718 <_lseek_r>
 804a56c:	8080030b 	ldhu	r2,12(r16)
 804a570:	8140038f 	ldh	r5,14(r16)
 804a574:	10bbffcc 	andi	r2,r2,61439
 804a578:	980f883a 	mov	r7,r19
 804a57c:	900d883a 	mov	r6,r18
 804a580:	8809883a 	mov	r4,r17
 804a584:	8080030d 	sth	r2,12(r16)
 804a588:	dfc00417 	ldw	ra,16(sp)
 804a58c:	dcc00317 	ldw	r19,12(sp)
 804a590:	dc800217 	ldw	r18,8(sp)
 804a594:	dc400117 	ldw	r17,4(sp)
 804a598:	dc000017 	ldw	r16,0(sp)
 804a59c:	dec00504 	addi	sp,sp,20
 804a5a0:	804bc541 	jmpi	804bc54 <_write_r>

0804a5a4 <__sseek>:
 804a5a4:	defffe04 	addi	sp,sp,-8
 804a5a8:	dc000015 	stw	r16,0(sp)
 804a5ac:	2821883a 	mov	r16,r5
 804a5b0:	2940038f 	ldh	r5,14(r5)
 804a5b4:	dfc00115 	stw	ra,4(sp)
 804a5b8:	804c7180 	call	804c718 <_lseek_r>
 804a5bc:	00ffffc4 	movi	r3,-1
 804a5c0:	10c00826 	beq	r2,r3,804a5e4 <__sseek+0x40>
 804a5c4:	80c0030b 	ldhu	r3,12(r16)
 804a5c8:	80801415 	stw	r2,80(r16)
 804a5cc:	18c40014 	ori	r3,r3,4096
 804a5d0:	80c0030d 	sth	r3,12(r16)
 804a5d4:	dfc00117 	ldw	ra,4(sp)
 804a5d8:	dc000017 	ldw	r16,0(sp)
 804a5dc:	dec00204 	addi	sp,sp,8
 804a5e0:	f800283a 	ret
 804a5e4:	80c0030b 	ldhu	r3,12(r16)
 804a5e8:	18fbffcc 	andi	r3,r3,61439
 804a5ec:	80c0030d 	sth	r3,12(r16)
 804a5f0:	dfc00117 	ldw	ra,4(sp)
 804a5f4:	dc000017 	ldw	r16,0(sp)
 804a5f8:	dec00204 	addi	sp,sp,8
 804a5fc:	f800283a 	ret

0804a600 <__sclose>:
 804a600:	2940038f 	ldh	r5,14(r5)
 804a604:	804be081 	jmpi	804be08 <_close_r>

0804a608 <strcmp>:
 804a608:	2144b03a 	or	r2,r4,r5
 804a60c:	108000cc 	andi	r2,r2,3
 804a610:	1000171e 	bne	r2,zero,804a670 <strcmp+0x68>
 804a614:	20800017 	ldw	r2,0(r4)
 804a618:	28c00017 	ldw	r3,0(r5)
 804a61c:	10c0141e 	bne	r2,r3,804a670 <strcmp+0x68>
 804a620:	027fbff4 	movhi	r9,65279
 804a624:	4a7fbfc4 	addi	r9,r9,-257
 804a628:	0086303a 	nor	r3,zero,r2
 804a62c:	02202074 	movhi	r8,32897
 804a630:	1245883a 	add	r2,r2,r9
 804a634:	42202004 	addi	r8,r8,-32640
 804a638:	10c4703a 	and	r2,r2,r3
 804a63c:	1204703a 	and	r2,r2,r8
 804a640:	10000226 	beq	r2,zero,804a64c <strcmp+0x44>
 804a644:	00002306 	br	804a6d4 <strcmp+0xcc>
 804a648:	1000221e 	bne	r2,zero,804a6d4 <strcmp+0xcc>
 804a64c:	21000104 	addi	r4,r4,4
 804a650:	20c00017 	ldw	r3,0(r4)
 804a654:	29400104 	addi	r5,r5,4
 804a658:	29800017 	ldw	r6,0(r5)
 804a65c:	1a4f883a 	add	r7,r3,r9
 804a660:	00c4303a 	nor	r2,zero,r3
 804a664:	3884703a 	and	r2,r7,r2
 804a668:	1204703a 	and	r2,r2,r8
 804a66c:	19bff626 	beq	r3,r6,804a648 <__alt_data_end+0xfffe25a8>
 804a670:	20800003 	ldbu	r2,0(r4)
 804a674:	10c03fcc 	andi	r3,r2,255
 804a678:	18c0201c 	xori	r3,r3,128
 804a67c:	18ffe004 	addi	r3,r3,-128
 804a680:	18000c26 	beq	r3,zero,804a6b4 <strcmp+0xac>
 804a684:	29800007 	ldb	r6,0(r5)
 804a688:	19800326 	beq	r3,r6,804a698 <strcmp+0x90>
 804a68c:	00001306 	br	804a6dc <strcmp+0xd4>
 804a690:	29800007 	ldb	r6,0(r5)
 804a694:	11800b1e 	bne	r2,r6,804a6c4 <strcmp+0xbc>
 804a698:	21000044 	addi	r4,r4,1
 804a69c:	20c00003 	ldbu	r3,0(r4)
 804a6a0:	29400044 	addi	r5,r5,1
 804a6a4:	18803fcc 	andi	r2,r3,255
 804a6a8:	1080201c 	xori	r2,r2,128
 804a6ac:	10bfe004 	addi	r2,r2,-128
 804a6b0:	103ff71e 	bne	r2,zero,804a690 <__alt_data_end+0xfffe25f0>
 804a6b4:	0007883a 	mov	r3,zero
 804a6b8:	28800003 	ldbu	r2,0(r5)
 804a6bc:	1885c83a 	sub	r2,r3,r2
 804a6c0:	f800283a 	ret
 804a6c4:	28800003 	ldbu	r2,0(r5)
 804a6c8:	18c03fcc 	andi	r3,r3,255
 804a6cc:	1885c83a 	sub	r2,r3,r2
 804a6d0:	f800283a 	ret
 804a6d4:	0005883a 	mov	r2,zero
 804a6d8:	f800283a 	ret
 804a6dc:	10c03fcc 	andi	r3,r2,255
 804a6e0:	003ff506 	br	804a6b8 <__alt_data_end+0xfffe2618>

0804a6e4 <__ssprint_r>:
 804a6e4:	30800217 	ldw	r2,8(r6)
 804a6e8:	defff604 	addi	sp,sp,-40
 804a6ec:	dc800215 	stw	r18,8(sp)
 804a6f0:	dfc00915 	stw	ra,36(sp)
 804a6f4:	df000815 	stw	fp,32(sp)
 804a6f8:	ddc00715 	stw	r23,28(sp)
 804a6fc:	dd800615 	stw	r22,24(sp)
 804a700:	dd400515 	stw	r21,20(sp)
 804a704:	dd000415 	stw	r20,16(sp)
 804a708:	dcc00315 	stw	r19,12(sp)
 804a70c:	dc400115 	stw	r17,4(sp)
 804a710:	dc000015 	stw	r16,0(sp)
 804a714:	3025883a 	mov	r18,r6
 804a718:	10005826 	beq	r2,zero,804a87c <__ssprint_r+0x198>
 804a71c:	2027883a 	mov	r19,r4
 804a720:	35c00017 	ldw	r23,0(r6)
 804a724:	29000017 	ldw	r4,0(r5)
 804a728:	28800217 	ldw	r2,8(r5)
 804a72c:	2823883a 	mov	r17,r5
 804a730:	0039883a 	mov	fp,zero
 804a734:	0021883a 	mov	r16,zero
 804a738:	80003926 	beq	r16,zero,804a820 <__ssprint_r+0x13c>
 804a73c:	102b883a 	mov	r21,r2
 804a740:	102d883a 	mov	r22,r2
 804a744:	80803a36 	bltu	r16,r2,804a830 <__ssprint_r+0x14c>
 804a748:	88c0030b 	ldhu	r3,12(r17)
 804a74c:	1881200c 	andi	r2,r3,1152
 804a750:	10002626 	beq	r2,zero,804a7ec <__ssprint_r+0x108>
 804a754:	88800517 	ldw	r2,20(r17)
 804a758:	89400417 	ldw	r5,16(r17)
 804a75c:	81800044 	addi	r6,r16,1
 804a760:	108f883a 	add	r7,r2,r2
 804a764:	3885883a 	add	r2,r7,r2
 804a768:	100ed7fa 	srli	r7,r2,31
 804a76c:	216dc83a 	sub	r22,r4,r5
 804a770:	3589883a 	add	r4,r6,r22
 804a774:	3885883a 	add	r2,r7,r2
 804a778:	102bd07a 	srai	r21,r2,1
 804a77c:	a80d883a 	mov	r6,r21
 804a780:	a900022e 	bgeu	r21,r4,804a78c <__ssprint_r+0xa8>
 804a784:	202b883a 	mov	r21,r4
 804a788:	200d883a 	mov	r6,r4
 804a78c:	18c1000c 	andi	r3,r3,1024
 804a790:	18002a26 	beq	r3,zero,804a83c <__ssprint_r+0x158>
 804a794:	300b883a 	mov	r5,r6
 804a798:	9809883a 	mov	r4,r19
 804a79c:	80482740 	call	8048274 <_malloc_r>
 804a7a0:	1029883a 	mov	r20,r2
 804a7a4:	10002c26 	beq	r2,zero,804a858 <__ssprint_r+0x174>
 804a7a8:	89400417 	ldw	r5,16(r17)
 804a7ac:	b00d883a 	mov	r6,r22
 804a7b0:	1009883a 	mov	r4,r2
 804a7b4:	80438b40 	call	80438b4 <memcpy>
 804a7b8:	8880030b 	ldhu	r2,12(r17)
 804a7bc:	00fedfc4 	movi	r3,-1153
 804a7c0:	10c4703a 	and	r2,r2,r3
 804a7c4:	10802014 	ori	r2,r2,128
 804a7c8:	8880030d 	sth	r2,12(r17)
 804a7cc:	a589883a 	add	r4,r20,r22
 804a7d0:	adadc83a 	sub	r22,r21,r22
 804a7d4:	8d400515 	stw	r21,20(r17)
 804a7d8:	8d800215 	stw	r22,8(r17)
 804a7dc:	8d000415 	stw	r20,16(r17)
 804a7e0:	89000015 	stw	r4,0(r17)
 804a7e4:	802b883a 	mov	r21,r16
 804a7e8:	802d883a 	mov	r22,r16
 804a7ec:	b00d883a 	mov	r6,r22
 804a7f0:	e00b883a 	mov	r5,fp
 804a7f4:	8048b640 	call	8048b64 <memmove>
 804a7f8:	88800217 	ldw	r2,8(r17)
 804a7fc:	89000017 	ldw	r4,0(r17)
 804a800:	90c00217 	ldw	r3,8(r18)
 804a804:	1545c83a 	sub	r2,r2,r21
 804a808:	2589883a 	add	r4,r4,r22
 804a80c:	88800215 	stw	r2,8(r17)
 804a810:	89000015 	stw	r4,0(r17)
 804a814:	1c21c83a 	sub	r16,r3,r16
 804a818:	94000215 	stw	r16,8(r18)
 804a81c:	80001726 	beq	r16,zero,804a87c <__ssprint_r+0x198>
 804a820:	bf000017 	ldw	fp,0(r23)
 804a824:	bc000117 	ldw	r16,4(r23)
 804a828:	bdc00204 	addi	r23,r23,8
 804a82c:	003fc206 	br	804a738 <__alt_data_end+0xfffe2698>
 804a830:	802b883a 	mov	r21,r16
 804a834:	802d883a 	mov	r22,r16
 804a838:	003fec06 	br	804a7ec <__alt_data_end+0xfffe274c>
 804a83c:	9809883a 	mov	r4,r19
 804a840:	8049ea00 	call	8049ea0 <_realloc_r>
 804a844:	1029883a 	mov	r20,r2
 804a848:	103fe01e 	bne	r2,zero,804a7cc <__alt_data_end+0xfffe272c>
 804a84c:	89400417 	ldw	r5,16(r17)
 804a850:	9809883a 	mov	r4,r19
 804a854:	804c4080 	call	804c408 <_free_r>
 804a858:	88c0030b 	ldhu	r3,12(r17)
 804a85c:	00800304 	movi	r2,12
 804a860:	98800015 	stw	r2,0(r19)
 804a864:	18c01014 	ori	r3,r3,64
 804a868:	88c0030d 	sth	r3,12(r17)
 804a86c:	00bfffc4 	movi	r2,-1
 804a870:	90000215 	stw	zero,8(r18)
 804a874:	90000115 	stw	zero,4(r18)
 804a878:	00000206 	br	804a884 <__ssprint_r+0x1a0>
 804a87c:	90000115 	stw	zero,4(r18)
 804a880:	0005883a 	mov	r2,zero
 804a884:	dfc00917 	ldw	ra,36(sp)
 804a888:	df000817 	ldw	fp,32(sp)
 804a88c:	ddc00717 	ldw	r23,28(sp)
 804a890:	dd800617 	ldw	r22,24(sp)
 804a894:	dd400517 	ldw	r21,20(sp)
 804a898:	dd000417 	ldw	r20,16(sp)
 804a89c:	dcc00317 	ldw	r19,12(sp)
 804a8a0:	dc800217 	ldw	r18,8(sp)
 804a8a4:	dc400117 	ldw	r17,4(sp)
 804a8a8:	dc000017 	ldw	r16,0(sp)
 804a8ac:	dec00a04 	addi	sp,sp,40
 804a8b0:	f800283a 	ret

0804a8b4 <___svfiprintf_internal_r>:
 804a8b4:	2880030b 	ldhu	r2,12(r5)
 804a8b8:	deffc804 	addi	sp,sp,-224
 804a8bc:	dcc03115 	stw	r19,196(sp)
 804a8c0:	dfc03715 	stw	ra,220(sp)
 804a8c4:	df003615 	stw	fp,216(sp)
 804a8c8:	ddc03515 	stw	r23,212(sp)
 804a8cc:	dd803415 	stw	r22,208(sp)
 804a8d0:	dd403315 	stw	r21,204(sp)
 804a8d4:	dd003215 	stw	r20,200(sp)
 804a8d8:	dc803015 	stw	r18,192(sp)
 804a8dc:	dc402f15 	stw	r17,188(sp)
 804a8e0:	dc002e15 	stw	r16,184(sp)
 804a8e4:	d9402315 	stw	r5,140(sp)
 804a8e8:	d9002715 	stw	r4,156(sp)
 804a8ec:	1080200c 	andi	r2,r2,128
 804a8f0:	d9c02415 	stw	r7,144(sp)
 804a8f4:	3027883a 	mov	r19,r6
 804a8f8:	10000226 	beq	r2,zero,804a904 <___svfiprintf_internal_r+0x50>
 804a8fc:	28800417 	ldw	r2,16(r5)
 804a900:	10046d26 	beq	r2,zero,804bab8 <___svfiprintf_internal_r+0x1204>
 804a904:	d8801a04 	addi	r2,sp,104
 804a908:	d8c019c4 	addi	r3,sp,103
 804a90c:	05820174 	movhi	r22,2053
 804a910:	10c9c83a 	sub	r4,r2,r3
 804a914:	b58c9004 	addi	r22,r22,12864
 804a918:	d8801e15 	stw	r2,120(sp)
 804a91c:	d8c01f15 	stw	r3,124(sp)
 804a920:	dec01a15 	stw	sp,104(sp)
 804a924:	d8001c15 	stw	zero,112(sp)
 804a928:	d8001b15 	stw	zero,108(sp)
 804a92c:	d811883a 	mov	r8,sp
 804a930:	d8002915 	stw	zero,164(sp)
 804a934:	d8002615 	stw	zero,152(sp)
 804a938:	d9002c15 	stw	r4,176(sp)
 804a93c:	98800007 	ldb	r2,0(r19)
 804a940:	10031426 	beq	r2,zero,804b594 <___svfiprintf_internal_r+0xce0>
 804a944:	00c00944 	movi	r3,37
 804a948:	9825883a 	mov	r18,r19
 804a94c:	10c0021e 	bne	r2,r3,804a958 <___svfiprintf_internal_r+0xa4>
 804a950:	00001406 	br	804a9a4 <___svfiprintf_internal_r+0xf0>
 804a954:	10c00326 	beq	r2,r3,804a964 <___svfiprintf_internal_r+0xb0>
 804a958:	94800044 	addi	r18,r18,1
 804a95c:	90800007 	ldb	r2,0(r18)
 804a960:	103ffc1e 	bne	r2,zero,804a954 <__alt_data_end+0xfffe28b4>
 804a964:	94e1c83a 	sub	r16,r18,r19
 804a968:	80000e26 	beq	r16,zero,804a9a4 <___svfiprintf_internal_r+0xf0>
 804a96c:	d8c01c17 	ldw	r3,112(sp)
 804a970:	d8801b17 	ldw	r2,108(sp)
 804a974:	44c00015 	stw	r19,0(r8)
 804a978:	1c07883a 	add	r3,r3,r16
 804a97c:	10800044 	addi	r2,r2,1
 804a980:	d8c01c15 	stw	r3,112(sp)
 804a984:	44000115 	stw	r16,4(r8)
 804a988:	d8801b15 	stw	r2,108(sp)
 804a98c:	00c001c4 	movi	r3,7
 804a990:	18835c16 	blt	r3,r2,804b704 <___svfiprintf_internal_r+0xe50>
 804a994:	42000204 	addi	r8,r8,8
 804a998:	d9402617 	ldw	r5,152(sp)
 804a99c:	2c0b883a 	add	r5,r5,r16
 804a9a0:	d9402615 	stw	r5,152(sp)
 804a9a4:	90800007 	ldb	r2,0(r18)
 804a9a8:	1002fc26 	beq	r2,zero,804b59c <___svfiprintf_internal_r+0xce8>
 804a9ac:	0023883a 	mov	r17,zero
 804a9b0:	00bfffc4 	movi	r2,-1
 804a9b4:	0021883a 	mov	r16,zero
 804a9b8:	94c00044 	addi	r19,r18,1
 804a9bc:	90c00047 	ldb	r3,1(r18)
 804a9c0:	dc402105 	stb	r17,132(sp)
 804a9c4:	d8001d85 	stb	zero,118(sp)
 804a9c8:	002b883a 	mov	r21,zero
 804a9cc:	d8802015 	stw	r2,128(sp)
 804a9d0:	d8002515 	stw	zero,148(sp)
 804a9d4:	04801604 	movi	r18,88
 804a9d8:	05000244 	movi	r20,9
 804a9dc:	402f883a 	mov	r23,r8
 804a9e0:	8023883a 	mov	r17,r16
 804a9e4:	9cc00044 	addi	r19,r19,1
 804a9e8:	18bff804 	addi	r2,r3,-32
 804a9ec:	9081fb36 	bltu	r18,r2,804b1dc <___svfiprintf_internal_r+0x928>
 804a9f0:	100490ba 	slli	r2,r2,2
 804a9f4:	01020174 	movhi	r4,2053
 804a9f8:	212a8204 	addi	r4,r4,-22008
 804a9fc:	1105883a 	add	r2,r2,r4
 804aa00:	10800017 	ldw	r2,0(r2)
 804aa04:	1000683a 	jmp	r2
 804aa08:	0804ac08 	cmpgei	zero,at,4784
 804aa0c:	0804b1dc 	xori	zero,at,4807
 804aa10:	0804b1dc 	xori	zero,at,4807
 804aa14:	0804abfc 	xorhi	zero,at,4783
 804aa18:	0804b1dc 	xori	zero,at,4807
 804aa1c:	0804b1dc 	xori	zero,at,4807
 804aa20:	0804b1dc 	xori	zero,at,4807
 804aa24:	0804b1dc 	xori	zero,at,4807
 804aa28:	0804b1dc 	xori	zero,at,4807
 804aa2c:	0804b1dc 	xori	zero,at,4807
 804aa30:	0804ab6c 	andhi	zero,at,4781
 804aa34:	0804ad68 	cmpgeui	zero,at,4789
 804aa38:	0804b1dc 	xori	zero,at,4807
 804aa3c:	0804ab94 	ori	zero,at,4782
 804aa40:	0804b218 	cmpnei	zero,at,4808
 804aa44:	0804b1dc 	xori	zero,at,4807
 804aa48:	0804b20c 	andi	zero,at,4808
 804aa4c:	0804b1a0 	cmpeqi	zero,at,4806
 804aa50:	0804b1a0 	cmpeqi	zero,at,4806
 804aa54:	0804b1a0 	cmpeqi	zero,at,4806
 804aa58:	0804b1a0 	cmpeqi	zero,at,4806
 804aa5c:	0804b1a0 	cmpeqi	zero,at,4806
 804aa60:	0804b1a0 	cmpeqi	zero,at,4806
 804aa64:	0804b1a0 	cmpeqi	zero,at,4806
 804aa68:	0804b1a0 	cmpeqi	zero,at,4806
 804aa6c:	0804b1a0 	cmpeqi	zero,at,4806
 804aa70:	0804b1dc 	xori	zero,at,4807
 804aa74:	0804b1dc 	xori	zero,at,4807
 804aa78:	0804b1dc 	xori	zero,at,4807
 804aa7c:	0804b1dc 	xori	zero,at,4807
 804aa80:	0804b1dc 	xori	zero,at,4807
 804aa84:	0804b1dc 	xori	zero,at,4807
 804aa88:	0804b1dc 	xori	zero,at,4807
 804aa8c:	0804b1dc 	xori	zero,at,4807
 804aa90:	0804b1dc 	xori	zero,at,4807
 804aa94:	0804b1dc 	xori	zero,at,4807
 804aa98:	0804b124 	muli	zero,at,4804
 804aa9c:	0804b1dc 	xori	zero,at,4807
 804aaa0:	0804b1dc 	xori	zero,at,4807
 804aaa4:	0804b1dc 	xori	zero,at,4807
 804aaa8:	0804b1dc 	xori	zero,at,4807
 804aaac:	0804b1dc 	xori	zero,at,4807
 804aab0:	0804b1dc 	xori	zero,at,4807
 804aab4:	0804b1dc 	xori	zero,at,4807
 804aab8:	0804b1dc 	xori	zero,at,4807
 804aabc:	0804b1dc 	xori	zero,at,4807
 804aac0:	0804b1dc 	xori	zero,at,4807
 804aac4:	0804b2d4 	ori	zero,at,4811
 804aac8:	0804b1dc 	xori	zero,at,4807
 804aacc:	0804b1dc 	xori	zero,at,4807
 804aad0:	0804b1dc 	xori	zero,at,4807
 804aad4:	0804b1dc 	xori	zero,at,4807
 804aad8:	0804b1dc 	xori	zero,at,4807
 804aadc:	0804b260 	cmpeqi	zero,at,4809
 804aae0:	0804b1dc 	xori	zero,at,4807
 804aae4:	0804b1dc 	xori	zero,at,4807
 804aae8:	0804af60 	cmpeqi	zero,at,4797
 804aaec:	0804b1dc 	xori	zero,at,4807
 804aaf0:	0804b1dc 	xori	zero,at,4807
 804aaf4:	0804b1dc 	xori	zero,at,4807
 804aaf8:	0804b1dc 	xori	zero,at,4807
 804aafc:	0804b1dc 	xori	zero,at,4807
 804ab00:	0804b1dc 	xori	zero,at,4807
 804ab04:	0804b1dc 	xori	zero,at,4807
 804ab08:	0804b1dc 	xori	zero,at,4807
 804ab0c:	0804b1dc 	xori	zero,at,4807
 804ab10:	0804b1dc 	xori	zero,at,4807
 804ab14:	0804ae2c 	andhi	zero,at,4792
 804ab18:	0804b010 	cmplti	zero,at,4800
 804ab1c:	0804b1dc 	xori	zero,at,4807
 804ab20:	0804b1dc 	xori	zero,at,4807
 804ab24:	0804b1dc 	xori	zero,at,4807
 804ab28:	0804b004 	addi	zero,at,4800
 804ab2c:	0804b010 	cmplti	zero,at,4800
 804ab30:	0804b1dc 	xori	zero,at,4807
 804ab34:	0804b1dc 	xori	zero,at,4807
 804ab38:	0804aff0 	cmpltui	zero,at,4799
 804ab3c:	0804b1dc 	xori	zero,at,4807
 804ab40:	0804afb0 	cmpltui	zero,at,4798
 804ab44:	0804ad7c 	xorhi	zero,at,4789
 804ab48:	0804aba0 	cmpeqi	zero,at,4782
 804ab4c:	0804b118 	cmpnei	zero,at,4804
 804ab50:	0804b1dc 	xori	zero,at,4807
 804ab54:	0804b0c4 	addi	zero,at,4803
 804ab58:	0804b1dc 	xori	zero,at,4807
 804ab5c:	0804ace0 	cmpeqi	zero,at,4787
 804ab60:	0804b1dc 	xori	zero,at,4807
 804ab64:	0804b1dc 	xori	zero,at,4807
 804ab68:	0804ac2c 	andhi	zero,at,4784
 804ab6c:	d9002417 	ldw	r4,144(sp)
 804ab70:	d9402417 	ldw	r5,144(sp)
 804ab74:	21000017 	ldw	r4,0(r4)
 804ab78:	28800104 	addi	r2,r5,4
 804ab7c:	d9002515 	stw	r4,148(sp)
 804ab80:	20032b0e 	bge	r4,zero,804b830 <___svfiprintf_internal_r+0xf7c>
 804ab84:	d8c02517 	ldw	r3,148(sp)
 804ab88:	d8802415 	stw	r2,144(sp)
 804ab8c:	00c7c83a 	sub	r3,zero,r3
 804ab90:	d8c02515 	stw	r3,148(sp)
 804ab94:	8c400114 	ori	r17,r17,4
 804ab98:	98c00007 	ldb	r3,0(r19)
 804ab9c:	003f9106 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804aba0:	00800c04 	movi	r2,48
 804aba4:	d9402417 	ldw	r5,144(sp)
 804aba8:	d9002017 	ldw	r4,128(sp)
 804abac:	d8801d05 	stb	r2,116(sp)
 804abb0:	00801e04 	movi	r2,120
 804abb4:	d8801d45 	stb	r2,117(sp)
 804abb8:	d8001d85 	stb	zero,118(sp)
 804abbc:	b811883a 	mov	r8,r23
 804abc0:	28c00104 	addi	r3,r5,4
 804abc4:	2c800017 	ldw	r18,0(r5)
 804abc8:	0029883a 	mov	r20,zero
 804abcc:	88800094 	ori	r2,r17,2
 804abd0:	20036316 	blt	r4,zero,804b960 <___svfiprintf_internal_r+0x10ac>
 804abd4:	00bfdfc4 	movi	r2,-129
 804abd8:	88a0703a 	and	r16,r17,r2
 804abdc:	d8c02415 	stw	r3,144(sp)
 804abe0:	84000094 	ori	r16,r16,2
 804abe4:	90031c26 	beq	r18,zero,804b858 <___svfiprintf_internal_r+0xfa4>
 804abe8:	01420174 	movhi	r5,2053
 804abec:	294c2f04 	addi	r5,r5,12476
 804abf0:	002b883a 	mov	r21,zero
 804abf4:	d9402915 	stw	r5,164(sp)
 804abf8:	00002906 	br	804aca0 <___svfiprintf_internal_r+0x3ec>
 804abfc:	8c400054 	ori	r17,r17,1
 804ac00:	98c00007 	ldb	r3,0(r19)
 804ac04:	003f7706 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804ac08:	a8803fcc 	andi	r2,r21,255
 804ac0c:	1080201c 	xori	r2,r2,128
 804ac10:	10bfe004 	addi	r2,r2,-128
 804ac14:	10032a1e 	bne	r2,zero,804b8c0 <___svfiprintf_internal_r+0x100c>
 804ac18:	00c00044 	movi	r3,1
 804ac1c:	d8c02105 	stb	r3,132(sp)
 804ac20:	05400804 	movi	r21,32
 804ac24:	98c00007 	ldb	r3,0(r19)
 804ac28:	003f6e06 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804ac2c:	8821883a 	mov	r16,r17
 804ac30:	dc402103 	ldbu	r17,132(sp)
 804ac34:	b811883a 	mov	r8,r23
 804ac38:	8c403fcc 	andi	r17,r17,255
 804ac3c:	8803f01e 	bne	r17,zero,804bc00 <___svfiprintf_internal_r+0x134c>
 804ac40:	00820174 	movhi	r2,2053
 804ac44:	108c2f04 	addi	r2,r2,12476
 804ac48:	d8802915 	stw	r2,164(sp)
 804ac4c:	8080080c 	andi	r2,r16,32
 804ac50:	1000cd26 	beq	r2,zero,804af88 <___svfiprintf_internal_r+0x6d4>
 804ac54:	d9002417 	ldw	r4,144(sp)
 804ac58:	24800017 	ldw	r18,0(r4)
 804ac5c:	25000117 	ldw	r20,4(r4)
 804ac60:	21000204 	addi	r4,r4,8
 804ac64:	d9002415 	stw	r4,144(sp)
 804ac68:	8080004c 	andi	r2,r16,1
 804ac6c:	1002c726 	beq	r2,zero,804b78c <___svfiprintf_internal_r+0xed8>
 804ac70:	9504b03a 	or	r2,r18,r20
 804ac74:	1003061e 	bne	r2,zero,804b890 <___svfiprintf_internal_r+0xfdc>
 804ac78:	d9002017 	ldw	r4,128(sp)
 804ac7c:	d8001d85 	stb	zero,118(sp)
 804ac80:	20033e16 	blt	r4,zero,804b97c <___svfiprintf_internal_r+0x10c8>
 804ac84:	00bfdfc4 	movi	r2,-129
 804ac88:	80a0703a 	and	r16,r16,r2
 804ac8c:	d9402017 	ldw	r5,128(sp)
 804ac90:	002b883a 	mov	r21,zero
 804ac94:	28002826 	beq	r5,zero,804ad38 <___svfiprintf_internal_r+0x484>
 804ac98:	0025883a 	mov	r18,zero
 804ac9c:	0029883a 	mov	r20,zero
 804aca0:	d9002917 	ldw	r4,164(sp)
 804aca4:	dc401a04 	addi	r17,sp,104
 804aca8:	908003cc 	andi	r2,r18,15
 804acac:	a006973a 	slli	r3,r20,28
 804acb0:	2085883a 	add	r2,r4,r2
 804acb4:	9024d13a 	srli	r18,r18,4
 804acb8:	10800003 	ldbu	r2,0(r2)
 804acbc:	a028d13a 	srli	r20,r20,4
 804acc0:	8c7fffc4 	addi	r17,r17,-1
 804acc4:	1ca4b03a 	or	r18,r3,r18
 804acc8:	88800005 	stb	r2,0(r17)
 804accc:	9504b03a 	or	r2,r18,r20
 804acd0:	103ff51e 	bne	r2,zero,804aca8 <__alt_data_end+0xfffe2c08>
 804acd4:	d8801e17 	ldw	r2,120(sp)
 804acd8:	1469c83a 	sub	r20,r2,r17
 804acdc:	00001906 	br	804ad44 <___svfiprintf_internal_r+0x490>
 804ace0:	8821883a 	mov	r16,r17
 804ace4:	dc402103 	ldbu	r17,132(sp)
 804ace8:	b811883a 	mov	r8,r23
 804acec:	8c403fcc 	andi	r17,r17,255
 804acf0:	8803d01e 	bne	r17,zero,804bc34 <___svfiprintf_internal_r+0x1380>
 804acf4:	8080080c 	andi	r2,r16,32
 804acf8:	10016126 	beq	r2,zero,804b280 <___svfiprintf_internal_r+0x9cc>
 804acfc:	d9002417 	ldw	r4,144(sp)
 804ad00:	d9402017 	ldw	r5,128(sp)
 804ad04:	d8001d85 	stb	zero,118(sp)
 804ad08:	20c00204 	addi	r3,r4,8
 804ad0c:	24800017 	ldw	r18,0(r4)
 804ad10:	25000117 	ldw	r20,4(r4)
 804ad14:	28030f16 	blt	r5,zero,804b954 <___svfiprintf_internal_r+0x10a0>
 804ad18:	013fdfc4 	movi	r4,-129
 804ad1c:	9504b03a 	or	r2,r18,r20
 804ad20:	d8c02415 	stw	r3,144(sp)
 804ad24:	8120703a 	and	r16,r16,r4
 804ad28:	002b883a 	mov	r21,zero
 804ad2c:	1000cd1e 	bne	r2,zero,804b064 <___svfiprintf_internal_r+0x7b0>
 804ad30:	d8c02017 	ldw	r3,128(sp)
 804ad34:	1803141e 	bne	r3,zero,804b988 <___svfiprintf_internal_r+0x10d4>
 804ad38:	d8002015 	stw	zero,128(sp)
 804ad3c:	0029883a 	mov	r20,zero
 804ad40:	dc401a04 	addi	r17,sp,104
 804ad44:	dc802017 	ldw	r18,128(sp)
 804ad48:	9500010e 	bge	r18,r20,804ad50 <___svfiprintf_internal_r+0x49c>
 804ad4c:	a025883a 	mov	r18,r20
 804ad50:	ad403fcc 	andi	r21,r21,255
 804ad54:	ad40201c 	xori	r21,r21,128
 804ad58:	ad7fe004 	addi	r21,r21,-128
 804ad5c:	a8003f26 	beq	r21,zero,804ae5c <___svfiprintf_internal_r+0x5a8>
 804ad60:	94800044 	addi	r18,r18,1
 804ad64:	00003d06 	br	804ae5c <___svfiprintf_internal_r+0x5a8>
 804ad68:	00c00044 	movi	r3,1
 804ad6c:	d8c02105 	stb	r3,132(sp)
 804ad70:	05400ac4 	movi	r21,43
 804ad74:	98c00007 	ldb	r3,0(r19)
 804ad78:	003f1a06 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804ad7c:	8821883a 	mov	r16,r17
 804ad80:	dc402103 	ldbu	r17,132(sp)
 804ad84:	b811883a 	mov	r8,r23
 804ad88:	8c403fcc 	andi	r17,r17,255
 804ad8c:	8803a71e 	bne	r17,zero,804bc2c <___svfiprintf_internal_r+0x1378>
 804ad90:	8080080c 	andi	r2,r16,32
 804ad94:	10015726 	beq	r2,zero,804b2f4 <___svfiprintf_internal_r+0xa40>
 804ad98:	d8c02417 	ldw	r3,144(sp)
 804ad9c:	d9002017 	ldw	r4,128(sp)
 804ada0:	d8001d85 	stb	zero,118(sp)
 804ada4:	18800204 	addi	r2,r3,8
 804ada8:	1c800017 	ldw	r18,0(r3)
 804adac:	1d000117 	ldw	r20,4(r3)
 804adb0:	2002db16 	blt	r4,zero,804b920 <___svfiprintf_internal_r+0x106c>
 804adb4:	013fdfc4 	movi	r4,-129
 804adb8:	9506b03a 	or	r3,r18,r20
 804adbc:	d8802415 	stw	r2,144(sp)
 804adc0:	8120703a 	and	r16,r16,r4
 804adc4:	18015826 	beq	r3,zero,804b328 <___svfiprintf_internal_r+0xa74>
 804adc8:	002b883a 	mov	r21,zero
 804adcc:	dc401a04 	addi	r17,sp,104
 804add0:	9006d0fa 	srli	r3,r18,3
 804add4:	a008977a 	slli	r4,r20,29
 804add8:	a028d0fa 	srli	r20,r20,3
 804addc:	948001cc 	andi	r18,r18,7
 804ade0:	90800c04 	addi	r2,r18,48
 804ade4:	8c7fffc4 	addi	r17,r17,-1
 804ade8:	20e4b03a 	or	r18,r4,r3
 804adec:	88800005 	stb	r2,0(r17)
 804adf0:	9506b03a 	or	r3,r18,r20
 804adf4:	183ff61e 	bne	r3,zero,804add0 <__alt_data_end+0xfffe2d30>
 804adf8:	80c0004c 	andi	r3,r16,1
 804adfc:	18028926 	beq	r3,zero,804b824 <___svfiprintf_internal_r+0xf70>
 804ae00:	10803fcc 	andi	r2,r2,255
 804ae04:	1080201c 	xori	r2,r2,128
 804ae08:	10bfe004 	addi	r2,r2,-128
 804ae0c:	00c00c04 	movi	r3,48
 804ae10:	10ffb026 	beq	r2,r3,804acd4 <__alt_data_end+0xfffe2c34>
 804ae14:	88ffffc5 	stb	r3,-1(r17)
 804ae18:	d8c01e17 	ldw	r3,120(sp)
 804ae1c:	88bfffc4 	addi	r2,r17,-1
 804ae20:	1023883a 	mov	r17,r2
 804ae24:	18a9c83a 	sub	r20,r3,r2
 804ae28:	003fc606 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804ae2c:	d8c02417 	ldw	r3,144(sp)
 804ae30:	04800044 	movi	r18,1
 804ae34:	8821883a 	mov	r16,r17
 804ae38:	18800017 	ldw	r2,0(r3)
 804ae3c:	18c00104 	addi	r3,r3,4
 804ae40:	b811883a 	mov	r8,r23
 804ae44:	d8001d85 	stb	zero,118(sp)
 804ae48:	d8801005 	stb	r2,64(sp)
 804ae4c:	d8c02415 	stw	r3,144(sp)
 804ae50:	9029883a 	mov	r20,r18
 804ae54:	dc401004 	addi	r17,sp,64
 804ae58:	d8002015 	stw	zero,128(sp)
 804ae5c:	80c0008c 	andi	r3,r16,2
 804ae60:	d8c02115 	stw	r3,132(sp)
 804ae64:	18000126 	beq	r3,zero,804ae6c <___svfiprintf_internal_r+0x5b8>
 804ae68:	94800084 	addi	r18,r18,2
 804ae6c:	80c0210c 	andi	r3,r16,132
 804ae70:	d8c02215 	stw	r3,136(sp)
 804ae74:	1801321e 	bne	r3,zero,804b340 <___svfiprintf_internal_r+0xa8c>
 804ae78:	d9002517 	ldw	r4,148(sp)
 804ae7c:	24b9c83a 	sub	fp,r4,r18
 804ae80:	07012f0e 	bge	zero,fp,804b340 <___svfiprintf_internal_r+0xa8c>
 804ae84:	02400404 	movi	r9,16
 804ae88:	d8c01c17 	ldw	r3,112(sp)
 804ae8c:	d8801b17 	ldw	r2,108(sp)
 804ae90:	4f03250e 	bge	r9,fp,804bb28 <___svfiprintf_internal_r+0x1274>
 804ae94:	01020174 	movhi	r4,2053
 804ae98:	210c9404 	addi	r4,r4,12880
 804ae9c:	dc002a15 	stw	r16,168(sp)
 804aea0:	dc402b15 	stw	r17,172(sp)
 804aea4:	d9002815 	stw	r4,160(sp)
 804aea8:	e023883a 	mov	r17,fp
 804aeac:	482f883a 	mov	r23,r9
 804aeb0:	9839883a 	mov	fp,r19
 804aeb4:	054001c4 	movi	r21,7
 804aeb8:	9027883a 	mov	r19,r18
 804aebc:	dc002717 	ldw	r16,156(sp)
 804aec0:	dc802317 	ldw	r18,140(sp)
 804aec4:	00000306 	br	804aed4 <___svfiprintf_internal_r+0x620>
 804aec8:	8c7ffc04 	addi	r17,r17,-16
 804aecc:	42000204 	addi	r8,r8,8
 804aed0:	bc40130e 	bge	r23,r17,804af20 <___svfiprintf_internal_r+0x66c>
 804aed4:	01420174 	movhi	r5,2053
 804aed8:	18c00404 	addi	r3,r3,16
 804aedc:	10800044 	addi	r2,r2,1
 804aee0:	294c9404 	addi	r5,r5,12880
 804aee4:	41400015 	stw	r5,0(r8)
 804aee8:	45c00115 	stw	r23,4(r8)
 804aeec:	d8c01c15 	stw	r3,112(sp)
 804aef0:	d8801b15 	stw	r2,108(sp)
 804aef4:	a8bff40e 	bge	r21,r2,804aec8 <__alt_data_end+0xfffe2e28>
 804aef8:	d9801a04 	addi	r6,sp,104
 804aefc:	900b883a 	mov	r5,r18
 804af00:	8009883a 	mov	r4,r16
 804af04:	804a6e40 	call	804a6e4 <__ssprint_r>
 804af08:	1001aa1e 	bne	r2,zero,804b5b4 <___svfiprintf_internal_r+0xd00>
 804af0c:	8c7ffc04 	addi	r17,r17,-16
 804af10:	d8c01c17 	ldw	r3,112(sp)
 804af14:	d8801b17 	ldw	r2,108(sp)
 804af18:	d811883a 	mov	r8,sp
 804af1c:	bc7fed16 	blt	r23,r17,804aed4 <__alt_data_end+0xfffe2e34>
 804af20:	9825883a 	mov	r18,r19
 804af24:	dc002a17 	ldw	r16,168(sp)
 804af28:	e027883a 	mov	r19,fp
 804af2c:	8839883a 	mov	fp,r17
 804af30:	dc402b17 	ldw	r17,172(sp)
 804af34:	d9002817 	ldw	r4,160(sp)
 804af38:	e0c7883a 	add	r3,fp,r3
 804af3c:	10800044 	addi	r2,r2,1
 804af40:	41000015 	stw	r4,0(r8)
 804af44:	47000115 	stw	fp,4(r8)
 804af48:	d8c01c15 	stw	r3,112(sp)
 804af4c:	d8801b15 	stw	r2,108(sp)
 804af50:	010001c4 	movi	r4,7
 804af54:	20821616 	blt	r4,r2,804b7b0 <___svfiprintf_internal_r+0xefc>
 804af58:	42000204 	addi	r8,r8,8
 804af5c:	0000fa06 	br	804b348 <___svfiprintf_internal_r+0xa94>
 804af60:	8821883a 	mov	r16,r17
 804af64:	dc402103 	ldbu	r17,132(sp)
 804af68:	b811883a 	mov	r8,r23
 804af6c:	8c403fcc 	andi	r17,r17,255
 804af70:	8803361e 	bne	r17,zero,804bc4c <___svfiprintf_internal_r+0x1398>
 804af74:	01420174 	movhi	r5,2053
 804af78:	294c2a04 	addi	r5,r5,12456
 804af7c:	d9402915 	stw	r5,164(sp)
 804af80:	8080080c 	andi	r2,r16,32
 804af84:	103f331e 	bne	r2,zero,804ac54 <__alt_data_end+0xfffe2bb4>
 804af88:	8080040c 	andi	r2,r16,16
 804af8c:	1002551e 	bne	r2,zero,804b8e4 <___svfiprintf_internal_r+0x1030>
 804af90:	8080100c 	andi	r2,r16,64
 804af94:	1002a626 	beq	r2,zero,804ba30 <___svfiprintf_internal_r+0x117c>
 804af98:	d8802417 	ldw	r2,144(sp)
 804af9c:	0029883a 	mov	r20,zero
 804afa0:	1480000b 	ldhu	r18,0(r2)
 804afa4:	10800104 	addi	r2,r2,4
 804afa8:	d8802415 	stw	r2,144(sp)
 804afac:	003f2e06 	br	804ac68 <__alt_data_end+0xfffe2bc8>
 804afb0:	8821883a 	mov	r16,r17
 804afb4:	dc402103 	ldbu	r17,132(sp)
 804afb8:	b811883a 	mov	r8,r23
 804afbc:	8c403fcc 	andi	r17,r17,255
 804afc0:	88030b1e 	bne	r17,zero,804bbf0 <___svfiprintf_internal_r+0x133c>
 804afc4:	8080080c 	andi	r2,r16,32
 804afc8:	1002271e 	bne	r2,zero,804b868 <___svfiprintf_internal_r+0xfb4>
 804afcc:	8080040c 	andi	r2,r16,16
 804afd0:	10028e26 	beq	r2,zero,804ba0c <___svfiprintf_internal_r+0x1158>
 804afd4:	d8c02417 	ldw	r3,144(sp)
 804afd8:	d9002617 	ldw	r4,152(sp)
 804afdc:	18800017 	ldw	r2,0(r3)
 804afe0:	18c00104 	addi	r3,r3,4
 804afe4:	d8c02415 	stw	r3,144(sp)
 804afe8:	11000015 	stw	r4,0(r2)
 804afec:	003e5306 	br	804a93c <__alt_data_end+0xfffe289c>
 804aff0:	98c00007 	ldb	r3,0(r19)
 804aff4:	01401b04 	movi	r5,108
 804aff8:	19424f26 	beq	r3,r5,804b938 <___svfiprintf_internal_r+0x1084>
 804affc:	8c400414 	ori	r17,r17,16
 804b000:	003e7806 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b004:	8c401014 	ori	r17,r17,64
 804b008:	98c00007 	ldb	r3,0(r19)
 804b00c:	003e7506 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b010:	8821883a 	mov	r16,r17
 804b014:	dc402103 	ldbu	r17,132(sp)
 804b018:	b811883a 	mov	r8,r23
 804b01c:	8c403fcc 	andi	r17,r17,255
 804b020:	8802fe1e 	bne	r17,zero,804bc1c <___svfiprintf_internal_r+0x1368>
 804b024:	8080080c 	andi	r2,r16,32
 804b028:	10004626 	beq	r2,zero,804b144 <___svfiprintf_internal_r+0x890>
 804b02c:	d9002417 	ldw	r4,144(sp)
 804b030:	20800117 	ldw	r2,4(r4)
 804b034:	24800017 	ldw	r18,0(r4)
 804b038:	21000204 	addi	r4,r4,8
 804b03c:	d9002415 	stw	r4,144(sp)
 804b040:	1029883a 	mov	r20,r2
 804b044:	10004a16 	blt	r2,zero,804b170 <___svfiprintf_internal_r+0x8bc>
 804b048:	d9002017 	ldw	r4,128(sp)
 804b04c:	dd401d83 	ldbu	r21,118(sp)
 804b050:	2001eb16 	blt	r4,zero,804b800 <___svfiprintf_internal_r+0xf4c>
 804b054:	00ffdfc4 	movi	r3,-129
 804b058:	9504b03a 	or	r2,r18,r20
 804b05c:	80e0703a 	and	r16,r16,r3
 804b060:	103f3326 	beq	r2,zero,804ad30 <__alt_data_end+0xfffe2c90>
 804b064:	a0009426 	beq	r20,zero,804b2b8 <___svfiprintf_internal_r+0xa04>
 804b068:	dc401a04 	addi	r17,sp,104
 804b06c:	402f883a 	mov	r23,r8
 804b070:	9009883a 	mov	r4,r18
 804b074:	a00b883a 	mov	r5,r20
 804b078:	01800284 	movi	r6,10
 804b07c:	000f883a 	mov	r7,zero
 804b080:	804d0400 	call	804d040 <__umoddi3>
 804b084:	10800c04 	addi	r2,r2,48
 804b088:	8c7fffc4 	addi	r17,r17,-1
 804b08c:	9009883a 	mov	r4,r18
 804b090:	a00b883a 	mov	r5,r20
 804b094:	88800005 	stb	r2,0(r17)
 804b098:	01800284 	movi	r6,10
 804b09c:	000f883a 	mov	r7,zero
 804b0a0:	804ca440 	call	804ca44 <__udivdi3>
 804b0a4:	1025883a 	mov	r18,r2
 804b0a8:	10c4b03a 	or	r2,r2,r3
 804b0ac:	1829883a 	mov	r20,r3
 804b0b0:	103fef1e 	bne	r2,zero,804b070 <__alt_data_end+0xfffe2fd0>
 804b0b4:	d9001e17 	ldw	r4,120(sp)
 804b0b8:	b811883a 	mov	r8,r23
 804b0bc:	2469c83a 	sub	r20,r4,r17
 804b0c0:	003f2006 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804b0c4:	d8802417 	ldw	r2,144(sp)
 804b0c8:	8821883a 	mov	r16,r17
 804b0cc:	d8001d85 	stb	zero,118(sp)
 804b0d0:	14400017 	ldw	r17,0(r2)
 804b0d4:	b811883a 	mov	r8,r23
 804b0d8:	15c00104 	addi	r23,r2,4
 804b0dc:	88026c26 	beq	r17,zero,804ba90 <___svfiprintf_internal_r+0x11dc>
 804b0e0:	d8c02017 	ldw	r3,128(sp)
 804b0e4:	18025f16 	blt	r3,zero,804ba64 <___svfiprintf_internal_r+0x11b0>
 804b0e8:	180d883a 	mov	r6,r3
 804b0ec:	000b883a 	mov	r5,zero
 804b0f0:	8809883a 	mov	r4,r17
 804b0f4:	da002d15 	stw	r8,180(sp)
 804b0f8:	8048a800 	call	8048a80 <memchr>
 804b0fc:	da002d17 	ldw	r8,180(sp)
 804b100:	1002a526 	beq	r2,zero,804bb98 <___svfiprintf_internal_r+0x12e4>
 804b104:	1469c83a 	sub	r20,r2,r17
 804b108:	dd401d83 	ldbu	r21,118(sp)
 804b10c:	ddc02415 	stw	r23,144(sp)
 804b110:	d8002015 	stw	zero,128(sp)
 804b114:	003f0b06 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804b118:	8c400814 	ori	r17,r17,32
 804b11c:	98c00007 	ldb	r3,0(r19)
 804b120:	003e3006 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b124:	8821883a 	mov	r16,r17
 804b128:	dc402103 	ldbu	r17,132(sp)
 804b12c:	b811883a 	mov	r8,r23
 804b130:	8c403fcc 	andi	r17,r17,255
 804b134:	8802b01e 	bne	r17,zero,804bbf8 <___svfiprintf_internal_r+0x1344>
 804b138:	84000414 	ori	r16,r16,16
 804b13c:	8080080c 	andi	r2,r16,32
 804b140:	103fba1e 	bne	r2,zero,804b02c <__alt_data_end+0xfffe2f8c>
 804b144:	8080040c 	andi	r2,r16,16
 804b148:	1001df1e 	bne	r2,zero,804b8c8 <___svfiprintf_internal_r+0x1014>
 804b14c:	8080100c 	andi	r2,r16,64
 804b150:	10023d26 	beq	r2,zero,804ba48 <___svfiprintf_internal_r+0x1194>
 804b154:	d8802417 	ldw	r2,144(sp)
 804b158:	1480000f 	ldh	r18,0(r2)
 804b15c:	10800104 	addi	r2,r2,4
 804b160:	d8802415 	stw	r2,144(sp)
 804b164:	9029d7fa 	srai	r20,r18,31
 804b168:	a005883a 	mov	r2,r20
 804b16c:	103fb60e 	bge	r2,zero,804b048 <__alt_data_end+0xfffe2fa8>
 804b170:	d9402017 	ldw	r5,128(sp)
 804b174:	04a5c83a 	sub	r18,zero,r18
 804b178:	05400b44 	movi	r21,45
 804b17c:	9004c03a 	cmpne	r2,r18,zero
 804b180:	0529c83a 	sub	r20,zero,r20
 804b184:	dd401d85 	stb	r21,118(sp)
 804b188:	a0a9c83a 	sub	r20,r20,r2
 804b18c:	28026c16 	blt	r5,zero,804bb40 <___svfiprintf_internal_r+0x128c>
 804b190:	00bfdfc4 	movi	r2,-129
 804b194:	80a0703a 	and	r16,r16,r2
 804b198:	a03fb31e 	bne	r20,zero,804b068 <__alt_data_end+0xfffe2fc8>
 804b19c:	00004606 	br	804b2b8 <___svfiprintf_internal_r+0xa04>
 804b1a0:	9839883a 	mov	fp,r19
 804b1a4:	d8002515 	stw	zero,148(sp)
 804b1a8:	1c3ff404 	addi	r16,r3,-48
 804b1ac:	0009883a 	mov	r4,zero
 804b1b0:	01400284 	movi	r5,10
 804b1b4:	80418e00 	call	80418e0 <__mulsi3>
 804b1b8:	e0c00007 	ldb	r3,0(fp)
 804b1bc:	8089883a 	add	r4,r16,r2
 804b1c0:	9cc00044 	addi	r19,r19,1
 804b1c4:	1c3ff404 	addi	r16,r3,-48
 804b1c8:	9839883a 	mov	fp,r19
 804b1cc:	a43ff82e 	bgeu	r20,r16,804b1b0 <__alt_data_end+0xfffe3110>
 804b1d0:	d9002515 	stw	r4,148(sp)
 804b1d4:	18bff804 	addi	r2,r3,-32
 804b1d8:	90be052e 	bgeu	r18,r2,804a9f0 <__alt_data_end+0xfffe2950>
 804b1dc:	8821883a 	mov	r16,r17
 804b1e0:	dc402103 	ldbu	r17,132(sp)
 804b1e4:	b811883a 	mov	r8,r23
 804b1e8:	8c403fcc 	andi	r17,r17,255
 804b1ec:	88028d1e 	bne	r17,zero,804bc24 <___svfiprintf_internal_r+0x1370>
 804b1f0:	1800ea26 	beq	r3,zero,804b59c <___svfiprintf_internal_r+0xce8>
 804b1f4:	04800044 	movi	r18,1
 804b1f8:	d8c01005 	stb	r3,64(sp)
 804b1fc:	d8001d85 	stb	zero,118(sp)
 804b200:	9029883a 	mov	r20,r18
 804b204:	dc401004 	addi	r17,sp,64
 804b208:	003f1306 	br	804ae58 <__alt_data_end+0xfffe2db8>
 804b20c:	8c402014 	ori	r17,r17,128
 804b210:	98c00007 	ldb	r3,0(r19)
 804b214:	003df306 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b218:	98c00007 	ldb	r3,0(r19)
 804b21c:	01000a84 	movi	r4,42
 804b220:	9f000044 	addi	fp,r19,1
 804b224:	19026326 	beq	r3,r4,804bbb4 <___svfiprintf_internal_r+0x1300>
 804b228:	1c3ff404 	addi	r16,r3,-48
 804b22c:	0009883a 	mov	r4,zero
 804b230:	a4025636 	bltu	r20,r16,804bb8c <___svfiprintf_internal_r+0x12d8>
 804b234:	01400284 	movi	r5,10
 804b238:	80418e00 	call	80418e0 <__mulsi3>
 804b23c:	e0c00007 	ldb	r3,0(fp)
 804b240:	1409883a 	add	r4,r2,r16
 804b244:	e4c00044 	addi	r19,fp,1
 804b248:	1c3ff404 	addi	r16,r3,-48
 804b24c:	9839883a 	mov	fp,r19
 804b250:	a43ff82e 	bgeu	r20,r16,804b234 <__alt_data_end+0xfffe3194>
 804b254:	20020c16 	blt	r4,zero,804ba88 <___svfiprintf_internal_r+0x11d4>
 804b258:	d9002015 	stw	r4,128(sp)
 804b25c:	003de206 	br	804a9e8 <__alt_data_end+0xfffe2948>
 804b260:	8821883a 	mov	r16,r17
 804b264:	dc402103 	ldbu	r17,132(sp)
 804b268:	b811883a 	mov	r8,r23
 804b26c:	8c403fcc 	andi	r17,r17,255
 804b270:	8802721e 	bne	r17,zero,804bc3c <___svfiprintf_internal_r+0x1388>
 804b274:	84000414 	ori	r16,r16,16
 804b278:	8080080c 	andi	r2,r16,32
 804b27c:	103e9f1e 	bne	r2,zero,804acfc <__alt_data_end+0xfffe2c5c>
 804b280:	8080040c 	andi	r2,r16,16
 804b284:	10015326 	beq	r2,zero,804b7d4 <___svfiprintf_internal_r+0xf20>
 804b288:	d8c02417 	ldw	r3,144(sp)
 804b28c:	d9002017 	ldw	r4,128(sp)
 804b290:	d8001d85 	stb	zero,118(sp)
 804b294:	18800104 	addi	r2,r3,4
 804b298:	1c800017 	ldw	r18,0(r3)
 804b29c:	0029883a 	mov	r20,zero
 804b2a0:	20015516 	blt	r4,zero,804b7f8 <___svfiprintf_internal_r+0xf44>
 804b2a4:	00ffdfc4 	movi	r3,-129
 804b2a8:	d8802415 	stw	r2,144(sp)
 804b2ac:	80e0703a 	and	r16,r16,r3
 804b2b0:	002b883a 	mov	r21,zero
 804b2b4:	903e9e26 	beq	r18,zero,804ad30 <__alt_data_end+0xfffe2c90>
 804b2b8:	00800244 	movi	r2,9
 804b2bc:	14bf6a36 	bltu	r2,r18,804b068 <__alt_data_end+0xfffe2fc8>
 804b2c0:	94800c04 	addi	r18,r18,48
 804b2c4:	dc8019c5 	stb	r18,103(sp)
 804b2c8:	dd002c17 	ldw	r20,176(sp)
 804b2cc:	dc4019c4 	addi	r17,sp,103
 804b2d0:	003e9c06 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804b2d4:	8821883a 	mov	r16,r17
 804b2d8:	dc402103 	ldbu	r17,132(sp)
 804b2dc:	b811883a 	mov	r8,r23
 804b2e0:	8c403fcc 	andi	r17,r17,255
 804b2e4:	8802571e 	bne	r17,zero,804bc44 <___svfiprintf_internal_r+0x1390>
 804b2e8:	84000414 	ori	r16,r16,16
 804b2ec:	8080080c 	andi	r2,r16,32
 804b2f0:	103ea91e 	bne	r2,zero,804ad98 <__alt_data_end+0xfffe2cf8>
 804b2f4:	8080040c 	andi	r2,r16,16
 804b2f8:	10018026 	beq	r2,zero,804b8fc <___svfiprintf_internal_r+0x1048>
 804b2fc:	d9402417 	ldw	r5,144(sp)
 804b300:	d8c02017 	ldw	r3,128(sp)
 804b304:	d8001d85 	stb	zero,118(sp)
 804b308:	28800104 	addi	r2,r5,4
 804b30c:	2c800017 	ldw	r18,0(r5)
 804b310:	0029883a 	mov	r20,zero
 804b314:	18018216 	blt	r3,zero,804b920 <___svfiprintf_internal_r+0x106c>
 804b318:	00ffdfc4 	movi	r3,-129
 804b31c:	d8802415 	stw	r2,144(sp)
 804b320:	80e0703a 	and	r16,r16,r3
 804b324:	903ea81e 	bne	r18,zero,804adc8 <__alt_data_end+0xfffe2d28>
 804b328:	d8802017 	ldw	r2,128(sp)
 804b32c:	002b883a 	mov	r21,zero
 804b330:	1001f226 	beq	r2,zero,804bafc <___svfiprintf_internal_r+0x1248>
 804b334:	0025883a 	mov	r18,zero
 804b338:	0029883a 	mov	r20,zero
 804b33c:	003ea306 	br	804adcc <__alt_data_end+0xfffe2d2c>
 804b340:	d8c01c17 	ldw	r3,112(sp)
 804b344:	d8801b17 	ldw	r2,108(sp)
 804b348:	d9001d87 	ldb	r4,118(sp)
 804b34c:	20000b26 	beq	r4,zero,804b37c <___svfiprintf_internal_r+0xac8>
 804b350:	d9001d84 	addi	r4,sp,118
 804b354:	18c00044 	addi	r3,r3,1
 804b358:	10800044 	addi	r2,r2,1
 804b35c:	41000015 	stw	r4,0(r8)
 804b360:	01000044 	movi	r4,1
 804b364:	41000115 	stw	r4,4(r8)
 804b368:	d8c01c15 	stw	r3,112(sp)
 804b36c:	d8801b15 	stw	r2,108(sp)
 804b370:	010001c4 	movi	r4,7
 804b374:	2080f316 	blt	r4,r2,804b744 <___svfiprintf_internal_r+0xe90>
 804b378:	42000204 	addi	r8,r8,8
 804b37c:	d9402117 	ldw	r5,132(sp)
 804b380:	28000b26 	beq	r5,zero,804b3b0 <___svfiprintf_internal_r+0xafc>
 804b384:	d9001d04 	addi	r4,sp,116
 804b388:	18c00084 	addi	r3,r3,2
 804b38c:	10800044 	addi	r2,r2,1
 804b390:	41000015 	stw	r4,0(r8)
 804b394:	01000084 	movi	r4,2
 804b398:	41000115 	stw	r4,4(r8)
 804b39c:	d8c01c15 	stw	r3,112(sp)
 804b3a0:	d8801b15 	stw	r2,108(sp)
 804b3a4:	010001c4 	movi	r4,7
 804b3a8:	2080ef16 	blt	r4,r2,804b768 <___svfiprintf_internal_r+0xeb4>
 804b3ac:	42000204 	addi	r8,r8,8
 804b3b0:	d9402217 	ldw	r5,136(sp)
 804b3b4:	01002004 	movi	r4,128
 804b3b8:	29008f26 	beq	r5,r4,804b5f8 <___svfiprintf_internal_r+0xd44>
 804b3bc:	d9002017 	ldw	r4,128(sp)
 804b3c0:	252fc83a 	sub	r23,r4,r20
 804b3c4:	05c0310e 	bge	zero,r23,804b48c <___svfiprintf_internal_r+0xbd8>
 804b3c8:	07000404 	movi	fp,16
 804b3cc:	e5c17d0e 	bge	fp,r23,804b9c4 <___svfiprintf_internal_r+0x1110>
 804b3d0:	01020174 	movhi	r4,2053
 804b3d4:	210c9004 	addi	r4,r4,12864
 804b3d8:	dc002015 	stw	r16,128(sp)
 804b3dc:	dc402215 	stw	r17,136(sp)
 804b3e0:	d9002115 	stw	r4,132(sp)
 804b3e4:	b823883a 	mov	r17,r23
 804b3e8:	054001c4 	movi	r21,7
 804b3ec:	982f883a 	mov	r23,r19
 804b3f0:	dc002717 	ldw	r16,156(sp)
 804b3f4:	9027883a 	mov	r19,r18
 804b3f8:	dc802317 	ldw	r18,140(sp)
 804b3fc:	00000306 	br	804b40c <___svfiprintf_internal_r+0xb58>
 804b400:	8c7ffc04 	addi	r17,r17,-16
 804b404:	42000204 	addi	r8,r8,8
 804b408:	e440110e 	bge	fp,r17,804b450 <___svfiprintf_internal_r+0xb9c>
 804b40c:	18c00404 	addi	r3,r3,16
 804b410:	10800044 	addi	r2,r2,1
 804b414:	45800015 	stw	r22,0(r8)
 804b418:	47000115 	stw	fp,4(r8)
 804b41c:	d8c01c15 	stw	r3,112(sp)
 804b420:	d8801b15 	stw	r2,108(sp)
 804b424:	a8bff60e 	bge	r21,r2,804b400 <__alt_data_end+0xfffe3360>
 804b428:	d9801a04 	addi	r6,sp,104
 804b42c:	900b883a 	mov	r5,r18
 804b430:	8009883a 	mov	r4,r16
 804b434:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b438:	10005e1e 	bne	r2,zero,804b5b4 <___svfiprintf_internal_r+0xd00>
 804b43c:	8c7ffc04 	addi	r17,r17,-16
 804b440:	d8c01c17 	ldw	r3,112(sp)
 804b444:	d8801b17 	ldw	r2,108(sp)
 804b448:	d811883a 	mov	r8,sp
 804b44c:	e47fef16 	blt	fp,r17,804b40c <__alt_data_end+0xfffe336c>
 804b450:	9825883a 	mov	r18,r19
 804b454:	dc002017 	ldw	r16,128(sp)
 804b458:	b827883a 	mov	r19,r23
 804b45c:	882f883a 	mov	r23,r17
 804b460:	dc402217 	ldw	r17,136(sp)
 804b464:	d9402117 	ldw	r5,132(sp)
 804b468:	1dc7883a 	add	r3,r3,r23
 804b46c:	10800044 	addi	r2,r2,1
 804b470:	41400015 	stw	r5,0(r8)
 804b474:	45c00115 	stw	r23,4(r8)
 804b478:	d8c01c15 	stw	r3,112(sp)
 804b47c:	d8801b15 	stw	r2,108(sp)
 804b480:	010001c4 	movi	r4,7
 804b484:	2080a616 	blt	r4,r2,804b720 <___svfiprintf_internal_r+0xe6c>
 804b488:	42000204 	addi	r8,r8,8
 804b48c:	a0c7883a 	add	r3,r20,r3
 804b490:	10800044 	addi	r2,r2,1
 804b494:	44400015 	stw	r17,0(r8)
 804b498:	45000115 	stw	r20,4(r8)
 804b49c:	d8c01c15 	stw	r3,112(sp)
 804b4a0:	d8801b15 	stw	r2,108(sp)
 804b4a4:	010001c4 	movi	r4,7
 804b4a8:	20808816 	blt	r4,r2,804b6cc <___svfiprintf_internal_r+0xe18>
 804b4ac:	42000204 	addi	r8,r8,8
 804b4b0:	8400010c 	andi	r16,r16,4
 804b4b4:	80002c26 	beq	r16,zero,804b568 <___svfiprintf_internal_r+0xcb4>
 804b4b8:	d8802517 	ldw	r2,148(sp)
 804b4bc:	14a1c83a 	sub	r16,r2,r18
 804b4c0:	0400290e 	bge	zero,r16,804b568 <___svfiprintf_internal_r+0xcb4>
 804b4c4:	04400404 	movi	r17,16
 804b4c8:	d8801b17 	ldw	r2,108(sp)
 804b4cc:	8c01a70e 	bge	r17,r16,804bb6c <___svfiprintf_internal_r+0x12b8>
 804b4d0:	01420174 	movhi	r5,2053
 804b4d4:	294c9404 	addi	r5,r5,12880
 804b4d8:	d9402815 	stw	r5,160(sp)
 804b4dc:	050001c4 	movi	r20,7
 804b4e0:	dd402717 	ldw	r21,156(sp)
 804b4e4:	ddc02317 	ldw	r23,140(sp)
 804b4e8:	00000306 	br	804b4f8 <___svfiprintf_internal_r+0xc44>
 804b4ec:	843ffc04 	addi	r16,r16,-16
 804b4f0:	42000204 	addi	r8,r8,8
 804b4f4:	8c00130e 	bge	r17,r16,804b544 <___svfiprintf_internal_r+0xc90>
 804b4f8:	01020174 	movhi	r4,2053
 804b4fc:	18c00404 	addi	r3,r3,16
 804b500:	10800044 	addi	r2,r2,1
 804b504:	210c9404 	addi	r4,r4,12880
 804b508:	41000015 	stw	r4,0(r8)
 804b50c:	44400115 	stw	r17,4(r8)
 804b510:	d8c01c15 	stw	r3,112(sp)
 804b514:	d8801b15 	stw	r2,108(sp)
 804b518:	a0bff40e 	bge	r20,r2,804b4ec <__alt_data_end+0xfffe344c>
 804b51c:	d9801a04 	addi	r6,sp,104
 804b520:	b80b883a 	mov	r5,r23
 804b524:	a809883a 	mov	r4,r21
 804b528:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b52c:	1000211e 	bne	r2,zero,804b5b4 <___svfiprintf_internal_r+0xd00>
 804b530:	843ffc04 	addi	r16,r16,-16
 804b534:	d8c01c17 	ldw	r3,112(sp)
 804b538:	d8801b17 	ldw	r2,108(sp)
 804b53c:	d811883a 	mov	r8,sp
 804b540:	8c3fed16 	blt	r17,r16,804b4f8 <__alt_data_end+0xfffe3458>
 804b544:	d9402817 	ldw	r5,160(sp)
 804b548:	1c07883a 	add	r3,r3,r16
 804b54c:	10800044 	addi	r2,r2,1
 804b550:	41400015 	stw	r5,0(r8)
 804b554:	44000115 	stw	r16,4(r8)
 804b558:	d8c01c15 	stw	r3,112(sp)
 804b55c:	d8801b15 	stw	r2,108(sp)
 804b560:	010001c4 	movi	r4,7
 804b564:	2080b516 	blt	r4,r2,804b83c <___svfiprintf_internal_r+0xf88>
 804b568:	d8802517 	ldw	r2,148(sp)
 804b56c:	1480010e 	bge	r2,r18,804b574 <___svfiprintf_internal_r+0xcc0>
 804b570:	9005883a 	mov	r2,r18
 804b574:	d9002617 	ldw	r4,152(sp)
 804b578:	2089883a 	add	r4,r4,r2
 804b57c:	d9002615 	stw	r4,152(sp)
 804b580:	18005a1e 	bne	r3,zero,804b6ec <___svfiprintf_internal_r+0xe38>
 804b584:	98800007 	ldb	r2,0(r19)
 804b588:	d8001b15 	stw	zero,108(sp)
 804b58c:	d811883a 	mov	r8,sp
 804b590:	103cec1e 	bne	r2,zero,804a944 <__alt_data_end+0xfffe28a4>
 804b594:	9825883a 	mov	r18,r19
 804b598:	003d0206 	br	804a9a4 <__alt_data_end+0xfffe2904>
 804b59c:	d8801c17 	ldw	r2,112(sp)
 804b5a0:	10000426 	beq	r2,zero,804b5b4 <___svfiprintf_internal_r+0xd00>
 804b5a4:	d9402317 	ldw	r5,140(sp)
 804b5a8:	d9002717 	ldw	r4,156(sp)
 804b5ac:	d9801a04 	addi	r6,sp,104
 804b5b0:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b5b4:	d9402317 	ldw	r5,140(sp)
 804b5b8:	d8802617 	ldw	r2,152(sp)
 804b5bc:	28c0030b 	ldhu	r3,12(r5)
 804b5c0:	18c0100c 	andi	r3,r3,64
 804b5c4:	18015c1e 	bne	r3,zero,804bb38 <___svfiprintf_internal_r+0x1284>
 804b5c8:	dfc03717 	ldw	ra,220(sp)
 804b5cc:	df003617 	ldw	fp,216(sp)
 804b5d0:	ddc03517 	ldw	r23,212(sp)
 804b5d4:	dd803417 	ldw	r22,208(sp)
 804b5d8:	dd403317 	ldw	r21,204(sp)
 804b5dc:	dd003217 	ldw	r20,200(sp)
 804b5e0:	dcc03117 	ldw	r19,196(sp)
 804b5e4:	dc803017 	ldw	r18,192(sp)
 804b5e8:	dc402f17 	ldw	r17,188(sp)
 804b5ec:	dc002e17 	ldw	r16,184(sp)
 804b5f0:	dec03804 	addi	sp,sp,224
 804b5f4:	f800283a 	ret
 804b5f8:	d9002517 	ldw	r4,148(sp)
 804b5fc:	24afc83a 	sub	r23,r4,r18
 804b600:	05ff6e0e 	bge	zero,r23,804b3bc <__alt_data_end+0xfffe331c>
 804b604:	07000404 	movi	fp,16
 804b608:	e5c15c0e 	bge	fp,r23,804bb7c <___svfiprintf_internal_r+0x12c8>
 804b60c:	01020174 	movhi	r4,2053
 804b610:	210c9004 	addi	r4,r4,12864
 804b614:	dc002215 	stw	r16,136(sp)
 804b618:	dc402815 	stw	r17,160(sp)
 804b61c:	d9002115 	stw	r4,132(sp)
 804b620:	b823883a 	mov	r17,r23
 804b624:	054001c4 	movi	r21,7
 804b628:	982f883a 	mov	r23,r19
 804b62c:	dc002717 	ldw	r16,156(sp)
 804b630:	9027883a 	mov	r19,r18
 804b634:	dc802317 	ldw	r18,140(sp)
 804b638:	00000306 	br	804b648 <___svfiprintf_internal_r+0xd94>
 804b63c:	8c7ffc04 	addi	r17,r17,-16
 804b640:	42000204 	addi	r8,r8,8
 804b644:	e440110e 	bge	fp,r17,804b68c <___svfiprintf_internal_r+0xdd8>
 804b648:	18c00404 	addi	r3,r3,16
 804b64c:	10800044 	addi	r2,r2,1
 804b650:	45800015 	stw	r22,0(r8)
 804b654:	47000115 	stw	fp,4(r8)
 804b658:	d8c01c15 	stw	r3,112(sp)
 804b65c:	d8801b15 	stw	r2,108(sp)
 804b660:	a8bff60e 	bge	r21,r2,804b63c <__alt_data_end+0xfffe359c>
 804b664:	d9801a04 	addi	r6,sp,104
 804b668:	900b883a 	mov	r5,r18
 804b66c:	8009883a 	mov	r4,r16
 804b670:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b674:	103fcf1e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b678:	8c7ffc04 	addi	r17,r17,-16
 804b67c:	d8c01c17 	ldw	r3,112(sp)
 804b680:	d8801b17 	ldw	r2,108(sp)
 804b684:	d811883a 	mov	r8,sp
 804b688:	e47fef16 	blt	fp,r17,804b648 <__alt_data_end+0xfffe35a8>
 804b68c:	9825883a 	mov	r18,r19
 804b690:	dc002217 	ldw	r16,136(sp)
 804b694:	b827883a 	mov	r19,r23
 804b698:	882f883a 	mov	r23,r17
 804b69c:	dc402817 	ldw	r17,160(sp)
 804b6a0:	d9402117 	ldw	r5,132(sp)
 804b6a4:	1dc7883a 	add	r3,r3,r23
 804b6a8:	10800044 	addi	r2,r2,1
 804b6ac:	41400015 	stw	r5,0(r8)
 804b6b0:	45c00115 	stw	r23,4(r8)
 804b6b4:	d8c01c15 	stw	r3,112(sp)
 804b6b8:	d8801b15 	stw	r2,108(sp)
 804b6bc:	010001c4 	movi	r4,7
 804b6c0:	2080b716 	blt	r4,r2,804b9a0 <___svfiprintf_internal_r+0x10ec>
 804b6c4:	42000204 	addi	r8,r8,8
 804b6c8:	003f3c06 	br	804b3bc <__alt_data_end+0xfffe331c>
 804b6cc:	d9402317 	ldw	r5,140(sp)
 804b6d0:	d9002717 	ldw	r4,156(sp)
 804b6d4:	d9801a04 	addi	r6,sp,104
 804b6d8:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b6dc:	103fb51e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b6e0:	d8c01c17 	ldw	r3,112(sp)
 804b6e4:	d811883a 	mov	r8,sp
 804b6e8:	003f7106 	br	804b4b0 <__alt_data_end+0xfffe3410>
 804b6ec:	d9402317 	ldw	r5,140(sp)
 804b6f0:	d9002717 	ldw	r4,156(sp)
 804b6f4:	d9801a04 	addi	r6,sp,104
 804b6f8:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b6fc:	103fa126 	beq	r2,zero,804b584 <__alt_data_end+0xfffe34e4>
 804b700:	003fac06 	br	804b5b4 <__alt_data_end+0xfffe3514>
 804b704:	d9402317 	ldw	r5,140(sp)
 804b708:	d9002717 	ldw	r4,156(sp)
 804b70c:	d9801a04 	addi	r6,sp,104
 804b710:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b714:	103fa71e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b718:	d811883a 	mov	r8,sp
 804b71c:	003c9e06 	br	804a998 <__alt_data_end+0xfffe28f8>
 804b720:	d9402317 	ldw	r5,140(sp)
 804b724:	d9002717 	ldw	r4,156(sp)
 804b728:	d9801a04 	addi	r6,sp,104
 804b72c:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b730:	103fa01e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b734:	d8c01c17 	ldw	r3,112(sp)
 804b738:	d8801b17 	ldw	r2,108(sp)
 804b73c:	d811883a 	mov	r8,sp
 804b740:	003f5206 	br	804b48c <__alt_data_end+0xfffe33ec>
 804b744:	d9402317 	ldw	r5,140(sp)
 804b748:	d9002717 	ldw	r4,156(sp)
 804b74c:	d9801a04 	addi	r6,sp,104
 804b750:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b754:	103f971e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b758:	d8c01c17 	ldw	r3,112(sp)
 804b75c:	d8801b17 	ldw	r2,108(sp)
 804b760:	d811883a 	mov	r8,sp
 804b764:	003f0506 	br	804b37c <__alt_data_end+0xfffe32dc>
 804b768:	d9402317 	ldw	r5,140(sp)
 804b76c:	d9002717 	ldw	r4,156(sp)
 804b770:	d9801a04 	addi	r6,sp,104
 804b774:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b778:	103f8e1e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b77c:	d8c01c17 	ldw	r3,112(sp)
 804b780:	d8801b17 	ldw	r2,108(sp)
 804b784:	d811883a 	mov	r8,sp
 804b788:	003f0906 	br	804b3b0 <__alt_data_end+0xfffe3310>
 804b78c:	d9402017 	ldw	r5,128(sp)
 804b790:	d8001d85 	stb	zero,118(sp)
 804b794:	28007716 	blt	r5,zero,804b974 <___svfiprintf_internal_r+0x10c0>
 804b798:	00ffdfc4 	movi	r3,-129
 804b79c:	9504b03a 	or	r2,r18,r20
 804b7a0:	80e0703a 	and	r16,r16,r3
 804b7a4:	103d3926 	beq	r2,zero,804ac8c <__alt_data_end+0xfffe2bec>
 804b7a8:	002b883a 	mov	r21,zero
 804b7ac:	003d3c06 	br	804aca0 <__alt_data_end+0xfffe2c00>
 804b7b0:	d9402317 	ldw	r5,140(sp)
 804b7b4:	d9002717 	ldw	r4,156(sp)
 804b7b8:	d9801a04 	addi	r6,sp,104
 804b7bc:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b7c0:	103f7c1e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b7c4:	d8c01c17 	ldw	r3,112(sp)
 804b7c8:	d8801b17 	ldw	r2,108(sp)
 804b7cc:	d811883a 	mov	r8,sp
 804b7d0:	003edd06 	br	804b348 <__alt_data_end+0xfffe32a8>
 804b7d4:	8080100c 	andi	r2,r16,64
 804b7d8:	d8001d85 	stb	zero,118(sp)
 804b7dc:	10008426 	beq	r2,zero,804b9f0 <___svfiprintf_internal_r+0x113c>
 804b7e0:	d9402417 	ldw	r5,144(sp)
 804b7e4:	d8c02017 	ldw	r3,128(sp)
 804b7e8:	0029883a 	mov	r20,zero
 804b7ec:	28800104 	addi	r2,r5,4
 804b7f0:	2c80000b 	ldhu	r18,0(r5)
 804b7f4:	183eab0e 	bge	r3,zero,804b2a4 <__alt_data_end+0xfffe3204>
 804b7f8:	d8802415 	stw	r2,144(sp)
 804b7fc:	002b883a 	mov	r21,zero
 804b800:	9504b03a 	or	r2,r18,r20
 804b804:	103e171e 	bne	r2,zero,804b064 <__alt_data_end+0xfffe2fc4>
 804b808:	00800044 	movi	r2,1
 804b80c:	10803fcc 	andi	r2,r2,255
 804b810:	00c00044 	movi	r3,1
 804b814:	10c05c26 	beq	r2,r3,804b988 <___svfiprintf_internal_r+0x10d4>
 804b818:	00c00084 	movi	r3,2
 804b81c:	10fd1e26 	beq	r2,r3,804ac98 <__alt_data_end+0xfffe2bf8>
 804b820:	003ec406 	br	804b334 <__alt_data_end+0xfffe3294>
 804b824:	d9401e17 	ldw	r5,120(sp)
 804b828:	2c69c83a 	sub	r20,r5,r17
 804b82c:	003d4506 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804b830:	d8802415 	stw	r2,144(sp)
 804b834:	98c00007 	ldb	r3,0(r19)
 804b838:	003c6a06 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b83c:	d9402317 	ldw	r5,140(sp)
 804b840:	d9002717 	ldw	r4,156(sp)
 804b844:	d9801a04 	addi	r6,sp,104
 804b848:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b84c:	103f591e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b850:	d8c01c17 	ldw	r3,112(sp)
 804b854:	003f4406 	br	804b568 <__alt_data_end+0xfffe34c8>
 804b858:	01420174 	movhi	r5,2053
 804b85c:	294c2f04 	addi	r5,r5,12476
 804b860:	d9402915 	stw	r5,164(sp)
 804b864:	003d0906 	br	804ac8c <__alt_data_end+0xfffe2bec>
 804b868:	d8c02417 	ldw	r3,144(sp)
 804b86c:	d9002617 	ldw	r4,152(sp)
 804b870:	d9402417 	ldw	r5,144(sp)
 804b874:	18800017 	ldw	r2,0(r3)
 804b878:	2007d7fa 	srai	r3,r4,31
 804b87c:	29400104 	addi	r5,r5,4
 804b880:	d9402415 	stw	r5,144(sp)
 804b884:	11000015 	stw	r4,0(r2)
 804b888:	10c00115 	stw	r3,4(r2)
 804b88c:	003c2b06 	br	804a93c <__alt_data_end+0xfffe289c>
 804b890:	d8c01d45 	stb	r3,117(sp)
 804b894:	d8c02017 	ldw	r3,128(sp)
 804b898:	00800c04 	movi	r2,48
 804b89c:	d8801d05 	stb	r2,116(sp)
 804b8a0:	d8001d85 	stb	zero,118(sp)
 804b8a4:	80800094 	ori	r2,r16,2
 804b8a8:	1800ac16 	blt	r3,zero,804bb5c <___svfiprintf_internal_r+0x12a8>
 804b8ac:	00bfdfc4 	movi	r2,-129
 804b8b0:	80a0703a 	and	r16,r16,r2
 804b8b4:	84000094 	ori	r16,r16,2
 804b8b8:	002b883a 	mov	r21,zero
 804b8bc:	003cf806 	br	804aca0 <__alt_data_end+0xfffe2c00>
 804b8c0:	98c00007 	ldb	r3,0(r19)
 804b8c4:	003c4706 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b8c8:	d9402417 	ldw	r5,144(sp)
 804b8cc:	2c800017 	ldw	r18,0(r5)
 804b8d0:	29400104 	addi	r5,r5,4
 804b8d4:	d9402415 	stw	r5,144(sp)
 804b8d8:	9029d7fa 	srai	r20,r18,31
 804b8dc:	a005883a 	mov	r2,r20
 804b8e0:	003dd806 	br	804b044 <__alt_data_end+0xfffe2fa4>
 804b8e4:	d9402417 	ldw	r5,144(sp)
 804b8e8:	0029883a 	mov	r20,zero
 804b8ec:	2c800017 	ldw	r18,0(r5)
 804b8f0:	29400104 	addi	r5,r5,4
 804b8f4:	d9402415 	stw	r5,144(sp)
 804b8f8:	003cdb06 	br	804ac68 <__alt_data_end+0xfffe2bc8>
 804b8fc:	8080100c 	andi	r2,r16,64
 804b900:	d8001d85 	stb	zero,118(sp)
 804b904:	10003326 	beq	r2,zero,804b9d4 <___svfiprintf_internal_r+0x1120>
 804b908:	d9002417 	ldw	r4,144(sp)
 804b90c:	d9402017 	ldw	r5,128(sp)
 804b910:	0029883a 	mov	r20,zero
 804b914:	20800104 	addi	r2,r4,4
 804b918:	2480000b 	ldhu	r18,0(r4)
 804b91c:	283e7e0e 	bge	r5,zero,804b318 <__alt_data_end+0xfffe3278>
 804b920:	9506b03a 	or	r3,r18,r20
 804b924:	d8802415 	stw	r2,144(sp)
 804b928:	183d271e 	bne	r3,zero,804adc8 <__alt_data_end+0xfffe2d28>
 804b92c:	002b883a 	mov	r21,zero
 804b930:	0005883a 	mov	r2,zero
 804b934:	003fb506 	br	804b80c <__alt_data_end+0xfffe376c>
 804b938:	98c00043 	ldbu	r3,1(r19)
 804b93c:	8c400814 	ori	r17,r17,32
 804b940:	9cc00044 	addi	r19,r19,1
 804b944:	18c03fcc 	andi	r3,r3,255
 804b948:	18c0201c 	xori	r3,r3,128
 804b94c:	18ffe004 	addi	r3,r3,-128
 804b950:	003c2406 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804b954:	d8c02415 	stw	r3,144(sp)
 804b958:	002b883a 	mov	r21,zero
 804b95c:	003fa806 	br	804b800 <__alt_data_end+0xfffe3760>
 804b960:	01020174 	movhi	r4,2053
 804b964:	210c2f04 	addi	r4,r4,12476
 804b968:	d9002915 	stw	r4,164(sp)
 804b96c:	d8c02415 	stw	r3,144(sp)
 804b970:	1021883a 	mov	r16,r2
 804b974:	9504b03a 	or	r2,r18,r20
 804b978:	103f8b1e 	bne	r2,zero,804b7a8 <__alt_data_end+0xfffe3708>
 804b97c:	002b883a 	mov	r21,zero
 804b980:	00800084 	movi	r2,2
 804b984:	003fa106 	br	804b80c <__alt_data_end+0xfffe376c>
 804b988:	0025883a 	mov	r18,zero
 804b98c:	94800c04 	addi	r18,r18,48
 804b990:	dc8019c5 	stb	r18,103(sp)
 804b994:	dd002c17 	ldw	r20,176(sp)
 804b998:	dc4019c4 	addi	r17,sp,103
 804b99c:	003ce906 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804b9a0:	d9402317 	ldw	r5,140(sp)
 804b9a4:	d9002717 	ldw	r4,156(sp)
 804b9a8:	d9801a04 	addi	r6,sp,104
 804b9ac:	804a6e40 	call	804a6e4 <__ssprint_r>
 804b9b0:	103f001e 	bne	r2,zero,804b5b4 <__alt_data_end+0xfffe3514>
 804b9b4:	d8c01c17 	ldw	r3,112(sp)
 804b9b8:	d8801b17 	ldw	r2,108(sp)
 804b9bc:	d811883a 	mov	r8,sp
 804b9c0:	003e7e06 	br	804b3bc <__alt_data_end+0xfffe331c>
 804b9c4:	01420174 	movhi	r5,2053
 804b9c8:	294c9004 	addi	r5,r5,12864
 804b9cc:	d9402115 	stw	r5,132(sp)
 804b9d0:	003ea406 	br	804b464 <__alt_data_end+0xfffe33c4>
 804b9d4:	d8c02417 	ldw	r3,144(sp)
 804b9d8:	d9002017 	ldw	r4,128(sp)
 804b9dc:	0029883a 	mov	r20,zero
 804b9e0:	18800104 	addi	r2,r3,4
 804b9e4:	1c800017 	ldw	r18,0(r3)
 804b9e8:	203e4b0e 	bge	r4,zero,804b318 <__alt_data_end+0xfffe3278>
 804b9ec:	003fcc06 	br	804b920 <__alt_data_end+0xfffe3880>
 804b9f0:	d9002417 	ldw	r4,144(sp)
 804b9f4:	d9402017 	ldw	r5,128(sp)
 804b9f8:	0029883a 	mov	r20,zero
 804b9fc:	20800104 	addi	r2,r4,4
 804ba00:	24800017 	ldw	r18,0(r4)
 804ba04:	283e270e 	bge	r5,zero,804b2a4 <__alt_data_end+0xfffe3204>
 804ba08:	003f7b06 	br	804b7f8 <__alt_data_end+0xfffe3758>
 804ba0c:	8400100c 	andi	r16,r16,64
 804ba10:	80003326 	beq	r16,zero,804bae0 <___svfiprintf_internal_r+0x122c>
 804ba14:	d9402417 	ldw	r5,144(sp)
 804ba18:	d8c02617 	ldw	r3,152(sp)
 804ba1c:	28800017 	ldw	r2,0(r5)
 804ba20:	29400104 	addi	r5,r5,4
 804ba24:	d9402415 	stw	r5,144(sp)
 804ba28:	10c0000d 	sth	r3,0(r2)
 804ba2c:	003bc306 	br	804a93c <__alt_data_end+0xfffe289c>
 804ba30:	d9002417 	ldw	r4,144(sp)
 804ba34:	0029883a 	mov	r20,zero
 804ba38:	24800017 	ldw	r18,0(r4)
 804ba3c:	21000104 	addi	r4,r4,4
 804ba40:	d9002415 	stw	r4,144(sp)
 804ba44:	003c8806 	br	804ac68 <__alt_data_end+0xfffe2bc8>
 804ba48:	d8c02417 	ldw	r3,144(sp)
 804ba4c:	1c800017 	ldw	r18,0(r3)
 804ba50:	18c00104 	addi	r3,r3,4
 804ba54:	d8c02415 	stw	r3,144(sp)
 804ba58:	9029d7fa 	srai	r20,r18,31
 804ba5c:	a005883a 	mov	r2,r20
 804ba60:	003d7806 	br	804b044 <__alt_data_end+0xfffe2fa4>
 804ba64:	8809883a 	mov	r4,r17
 804ba68:	da002d15 	stw	r8,180(sp)
 804ba6c:	8043b940 	call	8043b94 <strlen>
 804ba70:	1029883a 	mov	r20,r2
 804ba74:	dd401d83 	ldbu	r21,118(sp)
 804ba78:	ddc02415 	stw	r23,144(sp)
 804ba7c:	d8002015 	stw	zero,128(sp)
 804ba80:	da002d17 	ldw	r8,180(sp)
 804ba84:	003caf06 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804ba88:	013fffc4 	movi	r4,-1
 804ba8c:	003df206 	br	804b258 <__alt_data_end+0xfffe31b8>
 804ba90:	dd002017 	ldw	r20,128(sp)
 804ba94:	00800184 	movi	r2,6
 804ba98:	1500012e 	bgeu	r2,r20,804baa0 <___svfiprintf_internal_r+0x11ec>
 804ba9c:	1029883a 	mov	r20,r2
 804baa0:	a025883a 	mov	r18,r20
 804baa4:	a0004116 	blt	r20,zero,804bbac <___svfiprintf_internal_r+0x12f8>
 804baa8:	04420174 	movhi	r17,2053
 804baac:	ddc02415 	stw	r23,144(sp)
 804bab0:	8c4c3404 	addi	r17,r17,12496
 804bab4:	003ce806 	br	804ae58 <__alt_data_end+0xfffe2db8>
 804bab8:	04001004 	movi	r16,64
 804babc:	800b883a 	mov	r5,r16
 804bac0:	80482740 	call	8048274 <_malloc_r>
 804bac4:	d8c02317 	ldw	r3,140(sp)
 804bac8:	18800015 	stw	r2,0(r3)
 804bacc:	18800415 	stw	r2,16(r3)
 804bad0:	10004d26 	beq	r2,zero,804bc08 <___svfiprintf_internal_r+0x1354>
 804bad4:	d9402317 	ldw	r5,140(sp)
 804bad8:	2c000515 	stw	r16,20(r5)
 804badc:	003b8906 	br	804a904 <__alt_data_end+0xfffe2864>
 804bae0:	d9002417 	ldw	r4,144(sp)
 804bae4:	d9402617 	ldw	r5,152(sp)
 804bae8:	20800017 	ldw	r2,0(r4)
 804baec:	21000104 	addi	r4,r4,4
 804baf0:	d9002415 	stw	r4,144(sp)
 804baf4:	11400015 	stw	r5,0(r2)
 804baf8:	003b9006 	br	804a93c <__alt_data_end+0xfffe289c>
 804bafc:	8080004c 	andi	r2,r16,1
 804bb00:	002b883a 	mov	r21,zero
 804bb04:	10000526 	beq	r2,zero,804bb1c <___svfiprintf_internal_r+0x1268>
 804bb08:	00800c04 	movi	r2,48
 804bb0c:	d88019c5 	stb	r2,103(sp)
 804bb10:	dd002c17 	ldw	r20,176(sp)
 804bb14:	dc4019c4 	addi	r17,sp,103
 804bb18:	003c8a06 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804bb1c:	0029883a 	mov	r20,zero
 804bb20:	dc401a04 	addi	r17,sp,104
 804bb24:	003c8706 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804bb28:	01420174 	movhi	r5,2053
 804bb2c:	294c9404 	addi	r5,r5,12880
 804bb30:	d9402815 	stw	r5,160(sp)
 804bb34:	003cff06 	br	804af34 <__alt_data_end+0xfffe2e94>
 804bb38:	00bfffc4 	movi	r2,-1
 804bb3c:	003ea206 	br	804b5c8 <__alt_data_end+0xfffe3528>
 804bb40:	00800044 	movi	r2,1
 804bb44:	10803fcc 	andi	r2,r2,255
 804bb48:	00c00044 	movi	r3,1
 804bb4c:	10fd4526 	beq	r2,r3,804b064 <__alt_data_end+0xfffe2fc4>
 804bb50:	00c00084 	movi	r3,2
 804bb54:	10fc5226 	beq	r2,r3,804aca0 <__alt_data_end+0xfffe2c00>
 804bb58:	003c9c06 	br	804adcc <__alt_data_end+0xfffe2d2c>
 804bb5c:	1021883a 	mov	r16,r2
 804bb60:	002b883a 	mov	r21,zero
 804bb64:	00800084 	movi	r2,2
 804bb68:	003ff606 	br	804bb44 <__alt_data_end+0xfffe3aa4>
 804bb6c:	01020174 	movhi	r4,2053
 804bb70:	210c9404 	addi	r4,r4,12880
 804bb74:	d9002815 	stw	r4,160(sp)
 804bb78:	003e7206 	br	804b544 <__alt_data_end+0xfffe34a4>
 804bb7c:	01420174 	movhi	r5,2053
 804bb80:	294c9004 	addi	r5,r5,12864
 804bb84:	d9402115 	stw	r5,132(sp)
 804bb88:	003ec506 	br	804b6a0 <__alt_data_end+0xfffe3600>
 804bb8c:	e027883a 	mov	r19,fp
 804bb90:	d8002015 	stw	zero,128(sp)
 804bb94:	003b9406 	br	804a9e8 <__alt_data_end+0xfffe2948>
 804bb98:	dd002017 	ldw	r20,128(sp)
 804bb9c:	dd401d83 	ldbu	r21,118(sp)
 804bba0:	ddc02415 	stw	r23,144(sp)
 804bba4:	d8002015 	stw	zero,128(sp)
 804bba8:	003c6606 	br	804ad44 <__alt_data_end+0xfffe2ca4>
 804bbac:	0025883a 	mov	r18,zero
 804bbb0:	003fbd06 	br	804baa8 <__alt_data_end+0xfffe3a08>
 804bbb4:	d9402417 	ldw	r5,144(sp)
 804bbb8:	d8c02417 	ldw	r3,144(sp)
 804bbbc:	29400017 	ldw	r5,0(r5)
 804bbc0:	19000104 	addi	r4,r3,4
 804bbc4:	d9002415 	stw	r4,144(sp)
 804bbc8:	d9402015 	stw	r5,128(sp)
 804bbcc:	98c00043 	ldbu	r3,1(r19)
 804bbd0:	e027883a 	mov	r19,fp
 804bbd4:	283f5b0e 	bge	r5,zero,804b944 <__alt_data_end+0xfffe38a4>
 804bbd8:	18c03fcc 	andi	r3,r3,255
 804bbdc:	013fffc4 	movi	r4,-1
 804bbe0:	18c0201c 	xori	r3,r3,128
 804bbe4:	d9002015 	stw	r4,128(sp)
 804bbe8:	18ffe004 	addi	r3,r3,-128
 804bbec:	003b7d06 	br	804a9e4 <__alt_data_end+0xfffe2944>
 804bbf0:	dd401d85 	stb	r21,118(sp)
 804bbf4:	003cf306 	br	804afc4 <__alt_data_end+0xfffe2f24>
 804bbf8:	dd401d85 	stb	r21,118(sp)
 804bbfc:	003d4e06 	br	804b138 <__alt_data_end+0xfffe3098>
 804bc00:	dd401d85 	stb	r21,118(sp)
 804bc04:	003c0e06 	br	804ac40 <__alt_data_end+0xfffe2ba0>
 804bc08:	d9002717 	ldw	r4,156(sp)
 804bc0c:	00800304 	movi	r2,12
 804bc10:	20800015 	stw	r2,0(r4)
 804bc14:	00bfffc4 	movi	r2,-1
 804bc18:	003e6b06 	br	804b5c8 <__alt_data_end+0xfffe3528>
 804bc1c:	dd401d85 	stb	r21,118(sp)
 804bc20:	003d0006 	br	804b024 <__alt_data_end+0xfffe2f84>
 804bc24:	dd401d85 	stb	r21,118(sp)
 804bc28:	003d7106 	br	804b1f0 <__alt_data_end+0xfffe3150>
 804bc2c:	dd401d85 	stb	r21,118(sp)
 804bc30:	003c5706 	br	804ad90 <__alt_data_end+0xfffe2cf0>
 804bc34:	dd401d85 	stb	r21,118(sp)
 804bc38:	003c2e06 	br	804acf4 <__alt_data_end+0xfffe2c54>
 804bc3c:	dd401d85 	stb	r21,118(sp)
 804bc40:	003d8c06 	br	804b274 <__alt_data_end+0xfffe31d4>
 804bc44:	dd401d85 	stb	r21,118(sp)
 804bc48:	003da706 	br	804b2e8 <__alt_data_end+0xfffe3248>
 804bc4c:	dd401d85 	stb	r21,118(sp)
 804bc50:	003cc806 	br	804af74 <__alt_data_end+0xfffe2ed4>

0804bc54 <_write_r>:
 804bc54:	defffd04 	addi	sp,sp,-12
 804bc58:	2805883a 	mov	r2,r5
 804bc5c:	dc000015 	stw	r16,0(sp)
 804bc60:	04020174 	movhi	r16,2053
 804bc64:	dc400115 	stw	r17,4(sp)
 804bc68:	300b883a 	mov	r5,r6
 804bc6c:	841ab904 	addi	r16,r16,27364
 804bc70:	2023883a 	mov	r17,r4
 804bc74:	380d883a 	mov	r6,r7
 804bc78:	1009883a 	mov	r4,r2
 804bc7c:	dfc00215 	stw	ra,8(sp)
 804bc80:	80000015 	stw	zero,0(r16)
 804bc84:	804f86c0 	call	804f86c <write>
 804bc88:	00ffffc4 	movi	r3,-1
 804bc8c:	10c00526 	beq	r2,r3,804bca4 <_write_r+0x50>
 804bc90:	dfc00217 	ldw	ra,8(sp)
 804bc94:	dc400117 	ldw	r17,4(sp)
 804bc98:	dc000017 	ldw	r16,0(sp)
 804bc9c:	dec00304 	addi	sp,sp,12
 804bca0:	f800283a 	ret
 804bca4:	80c00017 	ldw	r3,0(r16)
 804bca8:	183ff926 	beq	r3,zero,804bc90 <__alt_data_end+0xfffe3bf0>
 804bcac:	88c00015 	stw	r3,0(r17)
 804bcb0:	003ff706 	br	804bc90 <__alt_data_end+0xfffe3bf0>

0804bcb4 <__swsetup_r>:
 804bcb4:	00820174 	movhi	r2,2053
 804bcb8:	defffd04 	addi	sp,sp,-12
 804bcbc:	1093af04 	addi	r2,r2,20156
 804bcc0:	dc400115 	stw	r17,4(sp)
 804bcc4:	2023883a 	mov	r17,r4
 804bcc8:	11000017 	ldw	r4,0(r2)
 804bccc:	dc000015 	stw	r16,0(sp)
 804bcd0:	dfc00215 	stw	ra,8(sp)
 804bcd4:	2821883a 	mov	r16,r5
 804bcd8:	20000226 	beq	r4,zero,804bce4 <__swsetup_r+0x30>
 804bcdc:	20800e17 	ldw	r2,56(r4)
 804bce0:	10003126 	beq	r2,zero,804bda8 <__swsetup_r+0xf4>
 804bce4:	8080030b 	ldhu	r2,12(r16)
 804bce8:	10c0020c 	andi	r3,r2,8
 804bcec:	1009883a 	mov	r4,r2
 804bcf0:	18000f26 	beq	r3,zero,804bd30 <__swsetup_r+0x7c>
 804bcf4:	80c00417 	ldw	r3,16(r16)
 804bcf8:	18001526 	beq	r3,zero,804bd50 <__swsetup_r+0x9c>
 804bcfc:	1100004c 	andi	r4,r2,1
 804bd00:	20001c1e 	bne	r4,zero,804bd74 <__swsetup_r+0xc0>
 804bd04:	1080008c 	andi	r2,r2,2
 804bd08:	1000291e 	bne	r2,zero,804bdb0 <__swsetup_r+0xfc>
 804bd0c:	80800517 	ldw	r2,20(r16)
 804bd10:	80800215 	stw	r2,8(r16)
 804bd14:	18001c26 	beq	r3,zero,804bd88 <__swsetup_r+0xd4>
 804bd18:	0005883a 	mov	r2,zero
 804bd1c:	dfc00217 	ldw	ra,8(sp)
 804bd20:	dc400117 	ldw	r17,4(sp)
 804bd24:	dc000017 	ldw	r16,0(sp)
 804bd28:	dec00304 	addi	sp,sp,12
 804bd2c:	f800283a 	ret
 804bd30:	2080040c 	andi	r2,r4,16
 804bd34:	10002e26 	beq	r2,zero,804bdf0 <__swsetup_r+0x13c>
 804bd38:	2080010c 	andi	r2,r4,4
 804bd3c:	10001e1e 	bne	r2,zero,804bdb8 <__swsetup_r+0x104>
 804bd40:	80c00417 	ldw	r3,16(r16)
 804bd44:	20800214 	ori	r2,r4,8
 804bd48:	8080030d 	sth	r2,12(r16)
 804bd4c:	183feb1e 	bne	r3,zero,804bcfc <__alt_data_end+0xfffe3c5c>
 804bd50:	1100a00c 	andi	r4,r2,640
 804bd54:	01408004 	movi	r5,512
 804bd58:	217fe826 	beq	r4,r5,804bcfc <__alt_data_end+0xfffe3c5c>
 804bd5c:	800b883a 	mov	r5,r16
 804bd60:	8809883a 	mov	r4,r17
 804bd64:	804c7780 	call	804c778 <__smakebuf_r>
 804bd68:	8080030b 	ldhu	r2,12(r16)
 804bd6c:	80c00417 	ldw	r3,16(r16)
 804bd70:	003fe206 	br	804bcfc <__alt_data_end+0xfffe3c5c>
 804bd74:	80800517 	ldw	r2,20(r16)
 804bd78:	80000215 	stw	zero,8(r16)
 804bd7c:	0085c83a 	sub	r2,zero,r2
 804bd80:	80800615 	stw	r2,24(r16)
 804bd84:	183fe41e 	bne	r3,zero,804bd18 <__alt_data_end+0xfffe3c78>
 804bd88:	80c0030b 	ldhu	r3,12(r16)
 804bd8c:	0005883a 	mov	r2,zero
 804bd90:	1900200c 	andi	r4,r3,128
 804bd94:	203fe126 	beq	r4,zero,804bd1c <__alt_data_end+0xfffe3c7c>
 804bd98:	18c01014 	ori	r3,r3,64
 804bd9c:	80c0030d 	sth	r3,12(r16)
 804bda0:	00bfffc4 	movi	r2,-1
 804bda4:	003fdd06 	br	804bd1c <__alt_data_end+0xfffe3c7c>
 804bda8:	8047af80 	call	8047af8 <__sinit>
 804bdac:	003fcd06 	br	804bce4 <__alt_data_end+0xfffe3c44>
 804bdb0:	0005883a 	mov	r2,zero
 804bdb4:	003fd606 	br	804bd10 <__alt_data_end+0xfffe3c70>
 804bdb8:	81400c17 	ldw	r5,48(r16)
 804bdbc:	28000626 	beq	r5,zero,804bdd8 <__swsetup_r+0x124>
 804bdc0:	80801004 	addi	r2,r16,64
 804bdc4:	28800326 	beq	r5,r2,804bdd4 <__swsetup_r+0x120>
 804bdc8:	8809883a 	mov	r4,r17
 804bdcc:	804c4080 	call	804c408 <_free_r>
 804bdd0:	8100030b 	ldhu	r4,12(r16)
 804bdd4:	80000c15 	stw	zero,48(r16)
 804bdd8:	80c00417 	ldw	r3,16(r16)
 804bddc:	00bff6c4 	movi	r2,-37
 804bde0:	1108703a 	and	r4,r2,r4
 804bde4:	80000115 	stw	zero,4(r16)
 804bde8:	80c00015 	stw	r3,0(r16)
 804bdec:	003fd506 	br	804bd44 <__alt_data_end+0xfffe3ca4>
 804bdf0:	00800244 	movi	r2,9
 804bdf4:	88800015 	stw	r2,0(r17)
 804bdf8:	20801014 	ori	r2,r4,64
 804bdfc:	8080030d 	sth	r2,12(r16)
 804be00:	00bfffc4 	movi	r2,-1
 804be04:	003fc506 	br	804bd1c <__alt_data_end+0xfffe3c7c>

0804be08 <_close_r>:
 804be08:	defffd04 	addi	sp,sp,-12
 804be0c:	dc000015 	stw	r16,0(sp)
 804be10:	04020174 	movhi	r16,2053
 804be14:	dc400115 	stw	r17,4(sp)
 804be18:	841ab904 	addi	r16,r16,27364
 804be1c:	2023883a 	mov	r17,r4
 804be20:	2809883a 	mov	r4,r5
 804be24:	dfc00215 	stw	ra,8(sp)
 804be28:	80000015 	stw	zero,0(r16)
 804be2c:	804eba00 	call	804eba0 <close>
 804be30:	00ffffc4 	movi	r3,-1
 804be34:	10c00526 	beq	r2,r3,804be4c <_close_r+0x44>
 804be38:	dfc00217 	ldw	ra,8(sp)
 804be3c:	dc400117 	ldw	r17,4(sp)
 804be40:	dc000017 	ldw	r16,0(sp)
 804be44:	dec00304 	addi	sp,sp,12
 804be48:	f800283a 	ret
 804be4c:	80c00017 	ldw	r3,0(r16)
 804be50:	183ff926 	beq	r3,zero,804be38 <__alt_data_end+0xfffe3d98>
 804be54:	88c00015 	stw	r3,0(r17)
 804be58:	003ff706 	br	804be38 <__alt_data_end+0xfffe3d98>

0804be5c <_calloc_r>:
 804be5c:	defffe04 	addi	sp,sp,-8
 804be60:	2805883a 	mov	r2,r5
 804be64:	dc000015 	stw	r16,0(sp)
 804be68:	300b883a 	mov	r5,r6
 804be6c:	2021883a 	mov	r16,r4
 804be70:	1009883a 	mov	r4,r2
 804be74:	dfc00115 	stw	ra,4(sp)
 804be78:	80418e00 	call	80418e0 <__mulsi3>
 804be7c:	100b883a 	mov	r5,r2
 804be80:	8009883a 	mov	r4,r16
 804be84:	80482740 	call	8048274 <_malloc_r>
 804be88:	10002926 	beq	r2,zero,804bf30 <_calloc_r+0xd4>
 804be8c:	11bfff17 	ldw	r6,-4(r2)
 804be90:	1021883a 	mov	r16,r2
 804be94:	00bfff04 	movi	r2,-4
 804be98:	308c703a 	and	r6,r6,r2
 804be9c:	00c00904 	movi	r3,36
 804bea0:	308d883a 	add	r6,r6,r2
 804bea4:	19801636 	bltu	r3,r6,804bf00 <_calloc_r+0xa4>
 804bea8:	008004c4 	movi	r2,19
 804beac:	11800b2e 	bgeu	r2,r6,804bedc <_calloc_r+0x80>
 804beb0:	80000015 	stw	zero,0(r16)
 804beb4:	80000115 	stw	zero,4(r16)
 804beb8:	008006c4 	movi	r2,27
 804bebc:	11801a2e 	bgeu	r2,r6,804bf28 <_calloc_r+0xcc>
 804bec0:	80000215 	stw	zero,8(r16)
 804bec4:	80000315 	stw	zero,12(r16)
 804bec8:	30c0151e 	bne	r6,r3,804bf20 <_calloc_r+0xc4>
 804becc:	80000415 	stw	zero,16(r16)
 804bed0:	80800604 	addi	r2,r16,24
 804bed4:	80000515 	stw	zero,20(r16)
 804bed8:	00000106 	br	804bee0 <_calloc_r+0x84>
 804bedc:	8005883a 	mov	r2,r16
 804bee0:	10000015 	stw	zero,0(r2)
 804bee4:	10000115 	stw	zero,4(r2)
 804bee8:	10000215 	stw	zero,8(r2)
 804beec:	8005883a 	mov	r2,r16
 804bef0:	dfc00117 	ldw	ra,4(sp)
 804bef4:	dc000017 	ldw	r16,0(sp)
 804bef8:	dec00204 	addi	sp,sp,8
 804befc:	f800283a 	ret
 804bf00:	000b883a 	mov	r5,zero
 804bf04:	8009883a 	mov	r4,r16
 804bf08:	8048cc00 	call	8048cc0 <memset>
 804bf0c:	8005883a 	mov	r2,r16
 804bf10:	dfc00117 	ldw	ra,4(sp)
 804bf14:	dc000017 	ldw	r16,0(sp)
 804bf18:	dec00204 	addi	sp,sp,8
 804bf1c:	f800283a 	ret
 804bf20:	80800404 	addi	r2,r16,16
 804bf24:	003fee06 	br	804bee0 <__alt_data_end+0xfffe3e40>
 804bf28:	80800204 	addi	r2,r16,8
 804bf2c:	003fec06 	br	804bee0 <__alt_data_end+0xfffe3e40>
 804bf30:	0005883a 	mov	r2,zero
 804bf34:	003fee06 	br	804bef0 <__alt_data_end+0xfffe3e50>

0804bf38 <_fclose_r>:
 804bf38:	28003926 	beq	r5,zero,804c020 <_fclose_r+0xe8>
 804bf3c:	defffc04 	addi	sp,sp,-16
 804bf40:	dc400115 	stw	r17,4(sp)
 804bf44:	dc000015 	stw	r16,0(sp)
 804bf48:	dfc00315 	stw	ra,12(sp)
 804bf4c:	dc800215 	stw	r18,8(sp)
 804bf50:	2023883a 	mov	r17,r4
 804bf54:	2821883a 	mov	r16,r5
 804bf58:	20000226 	beq	r4,zero,804bf64 <_fclose_r+0x2c>
 804bf5c:	20800e17 	ldw	r2,56(r4)
 804bf60:	10002726 	beq	r2,zero,804c000 <_fclose_r+0xc8>
 804bf64:	8080030f 	ldh	r2,12(r16)
 804bf68:	1000071e 	bne	r2,zero,804bf88 <_fclose_r+0x50>
 804bf6c:	0005883a 	mov	r2,zero
 804bf70:	dfc00317 	ldw	ra,12(sp)
 804bf74:	dc800217 	ldw	r18,8(sp)
 804bf78:	dc400117 	ldw	r17,4(sp)
 804bf7c:	dc000017 	ldw	r16,0(sp)
 804bf80:	dec00404 	addi	sp,sp,16
 804bf84:	f800283a 	ret
 804bf88:	800b883a 	mov	r5,r16
 804bf8c:	8809883a 	mov	r4,r17
 804bf90:	804c03c0 	call	804c03c <__sflush_r>
 804bf94:	1025883a 	mov	r18,r2
 804bf98:	80800b17 	ldw	r2,44(r16)
 804bf9c:	10000426 	beq	r2,zero,804bfb0 <_fclose_r+0x78>
 804bfa0:	81400717 	ldw	r5,28(r16)
 804bfa4:	8809883a 	mov	r4,r17
 804bfa8:	103ee83a 	callr	r2
 804bfac:	10001616 	blt	r2,zero,804c008 <_fclose_r+0xd0>
 804bfb0:	8080030b 	ldhu	r2,12(r16)
 804bfb4:	1080200c 	andi	r2,r2,128
 804bfb8:	1000151e 	bne	r2,zero,804c010 <_fclose_r+0xd8>
 804bfbc:	81400c17 	ldw	r5,48(r16)
 804bfc0:	28000526 	beq	r5,zero,804bfd8 <_fclose_r+0xa0>
 804bfc4:	80801004 	addi	r2,r16,64
 804bfc8:	28800226 	beq	r5,r2,804bfd4 <_fclose_r+0x9c>
 804bfcc:	8809883a 	mov	r4,r17
 804bfd0:	804c4080 	call	804c408 <_free_r>
 804bfd4:	80000c15 	stw	zero,48(r16)
 804bfd8:	81401117 	ldw	r5,68(r16)
 804bfdc:	28000326 	beq	r5,zero,804bfec <_fclose_r+0xb4>
 804bfe0:	8809883a 	mov	r4,r17
 804bfe4:	804c4080 	call	804c408 <_free_r>
 804bfe8:	80001115 	stw	zero,68(r16)
 804bfec:	8047b080 	call	8047b08 <__sfp_lock_acquire>
 804bff0:	8000030d 	sth	zero,12(r16)
 804bff4:	8047b0c0 	call	8047b0c <__sfp_lock_release>
 804bff8:	9005883a 	mov	r2,r18
 804bffc:	003fdc06 	br	804bf70 <__alt_data_end+0xfffe3ed0>
 804c000:	8047af80 	call	8047af8 <__sinit>
 804c004:	003fd706 	br	804bf64 <__alt_data_end+0xfffe3ec4>
 804c008:	04bfffc4 	movi	r18,-1
 804c00c:	003fe806 	br	804bfb0 <__alt_data_end+0xfffe3f10>
 804c010:	81400417 	ldw	r5,16(r16)
 804c014:	8809883a 	mov	r4,r17
 804c018:	804c4080 	call	804c408 <_free_r>
 804c01c:	003fe706 	br	804bfbc <__alt_data_end+0xfffe3f1c>
 804c020:	0005883a 	mov	r2,zero
 804c024:	f800283a 	ret

0804c028 <fclose>:
 804c028:	00820174 	movhi	r2,2053
 804c02c:	1093af04 	addi	r2,r2,20156
 804c030:	200b883a 	mov	r5,r4
 804c034:	11000017 	ldw	r4,0(r2)
 804c038:	804bf381 	jmpi	804bf38 <_fclose_r>

0804c03c <__sflush_r>:
 804c03c:	2880030b 	ldhu	r2,12(r5)
 804c040:	defffb04 	addi	sp,sp,-20
 804c044:	dcc00315 	stw	r19,12(sp)
 804c048:	dc400115 	stw	r17,4(sp)
 804c04c:	dfc00415 	stw	ra,16(sp)
 804c050:	dc800215 	stw	r18,8(sp)
 804c054:	dc000015 	stw	r16,0(sp)
 804c058:	10c0020c 	andi	r3,r2,8
 804c05c:	2823883a 	mov	r17,r5
 804c060:	2027883a 	mov	r19,r4
 804c064:	1800311e 	bne	r3,zero,804c12c <__sflush_r+0xf0>
 804c068:	28c00117 	ldw	r3,4(r5)
 804c06c:	10820014 	ori	r2,r2,2048
 804c070:	2880030d 	sth	r2,12(r5)
 804c074:	00c04b0e 	bge	zero,r3,804c1a4 <__sflush_r+0x168>
 804c078:	8a000a17 	ldw	r8,40(r17)
 804c07c:	40002326 	beq	r8,zero,804c10c <__sflush_r+0xd0>
 804c080:	9c000017 	ldw	r16,0(r19)
 804c084:	10c4000c 	andi	r3,r2,4096
 804c088:	98000015 	stw	zero,0(r19)
 804c08c:	18004826 	beq	r3,zero,804c1b0 <__sflush_r+0x174>
 804c090:	89801417 	ldw	r6,80(r17)
 804c094:	10c0010c 	andi	r3,r2,4
 804c098:	18000626 	beq	r3,zero,804c0b4 <__sflush_r+0x78>
 804c09c:	88c00117 	ldw	r3,4(r17)
 804c0a0:	88800c17 	ldw	r2,48(r17)
 804c0a4:	30cdc83a 	sub	r6,r6,r3
 804c0a8:	10000226 	beq	r2,zero,804c0b4 <__sflush_r+0x78>
 804c0ac:	88800f17 	ldw	r2,60(r17)
 804c0b0:	308dc83a 	sub	r6,r6,r2
 804c0b4:	89400717 	ldw	r5,28(r17)
 804c0b8:	000f883a 	mov	r7,zero
 804c0bc:	9809883a 	mov	r4,r19
 804c0c0:	403ee83a 	callr	r8
 804c0c4:	00ffffc4 	movi	r3,-1
 804c0c8:	10c04426 	beq	r2,r3,804c1dc <__sflush_r+0x1a0>
 804c0cc:	88c0030b 	ldhu	r3,12(r17)
 804c0d0:	89000417 	ldw	r4,16(r17)
 804c0d4:	88000115 	stw	zero,4(r17)
 804c0d8:	197dffcc 	andi	r5,r3,63487
 804c0dc:	8940030d 	sth	r5,12(r17)
 804c0e0:	89000015 	stw	r4,0(r17)
 804c0e4:	18c4000c 	andi	r3,r3,4096
 804c0e8:	18002c1e 	bne	r3,zero,804c19c <__sflush_r+0x160>
 804c0ec:	89400c17 	ldw	r5,48(r17)
 804c0f0:	9c000015 	stw	r16,0(r19)
 804c0f4:	28000526 	beq	r5,zero,804c10c <__sflush_r+0xd0>
 804c0f8:	88801004 	addi	r2,r17,64
 804c0fc:	28800226 	beq	r5,r2,804c108 <__sflush_r+0xcc>
 804c100:	9809883a 	mov	r4,r19
 804c104:	804c4080 	call	804c408 <_free_r>
 804c108:	88000c15 	stw	zero,48(r17)
 804c10c:	0005883a 	mov	r2,zero
 804c110:	dfc00417 	ldw	ra,16(sp)
 804c114:	dcc00317 	ldw	r19,12(sp)
 804c118:	dc800217 	ldw	r18,8(sp)
 804c11c:	dc400117 	ldw	r17,4(sp)
 804c120:	dc000017 	ldw	r16,0(sp)
 804c124:	dec00504 	addi	sp,sp,20
 804c128:	f800283a 	ret
 804c12c:	2c800417 	ldw	r18,16(r5)
 804c130:	903ff626 	beq	r18,zero,804c10c <__alt_data_end+0xfffe406c>
 804c134:	2c000017 	ldw	r16,0(r5)
 804c138:	108000cc 	andi	r2,r2,3
 804c13c:	2c800015 	stw	r18,0(r5)
 804c140:	84a1c83a 	sub	r16,r16,r18
 804c144:	1000131e 	bne	r2,zero,804c194 <__sflush_r+0x158>
 804c148:	28800517 	ldw	r2,20(r5)
 804c14c:	88800215 	stw	r2,8(r17)
 804c150:	04000316 	blt	zero,r16,804c160 <__sflush_r+0x124>
 804c154:	003fed06 	br	804c10c <__alt_data_end+0xfffe406c>
 804c158:	90a5883a 	add	r18,r18,r2
 804c15c:	043feb0e 	bge	zero,r16,804c10c <__alt_data_end+0xfffe406c>
 804c160:	88800917 	ldw	r2,36(r17)
 804c164:	89400717 	ldw	r5,28(r17)
 804c168:	800f883a 	mov	r7,r16
 804c16c:	900d883a 	mov	r6,r18
 804c170:	9809883a 	mov	r4,r19
 804c174:	103ee83a 	callr	r2
 804c178:	80a1c83a 	sub	r16,r16,r2
 804c17c:	00bff616 	blt	zero,r2,804c158 <__alt_data_end+0xfffe40b8>
 804c180:	88c0030b 	ldhu	r3,12(r17)
 804c184:	00bfffc4 	movi	r2,-1
 804c188:	18c01014 	ori	r3,r3,64
 804c18c:	88c0030d 	sth	r3,12(r17)
 804c190:	003fdf06 	br	804c110 <__alt_data_end+0xfffe4070>
 804c194:	0005883a 	mov	r2,zero
 804c198:	003fec06 	br	804c14c <__alt_data_end+0xfffe40ac>
 804c19c:	88801415 	stw	r2,80(r17)
 804c1a0:	003fd206 	br	804c0ec <__alt_data_end+0xfffe404c>
 804c1a4:	28c00f17 	ldw	r3,60(r5)
 804c1a8:	00ffb316 	blt	zero,r3,804c078 <__alt_data_end+0xfffe3fd8>
 804c1ac:	003fd706 	br	804c10c <__alt_data_end+0xfffe406c>
 804c1b0:	89400717 	ldw	r5,28(r17)
 804c1b4:	000d883a 	mov	r6,zero
 804c1b8:	01c00044 	movi	r7,1
 804c1bc:	9809883a 	mov	r4,r19
 804c1c0:	403ee83a 	callr	r8
 804c1c4:	100d883a 	mov	r6,r2
 804c1c8:	00bfffc4 	movi	r2,-1
 804c1cc:	30801426 	beq	r6,r2,804c220 <__sflush_r+0x1e4>
 804c1d0:	8880030b 	ldhu	r2,12(r17)
 804c1d4:	8a000a17 	ldw	r8,40(r17)
 804c1d8:	003fae06 	br	804c094 <__alt_data_end+0xfffe3ff4>
 804c1dc:	98c00017 	ldw	r3,0(r19)
 804c1e0:	183fba26 	beq	r3,zero,804c0cc <__alt_data_end+0xfffe402c>
 804c1e4:	01000744 	movi	r4,29
 804c1e8:	19000626 	beq	r3,r4,804c204 <__sflush_r+0x1c8>
 804c1ec:	01000584 	movi	r4,22
 804c1f0:	19000426 	beq	r3,r4,804c204 <__sflush_r+0x1c8>
 804c1f4:	88c0030b 	ldhu	r3,12(r17)
 804c1f8:	18c01014 	ori	r3,r3,64
 804c1fc:	88c0030d 	sth	r3,12(r17)
 804c200:	003fc306 	br	804c110 <__alt_data_end+0xfffe4070>
 804c204:	8880030b 	ldhu	r2,12(r17)
 804c208:	88c00417 	ldw	r3,16(r17)
 804c20c:	88000115 	stw	zero,4(r17)
 804c210:	10bdffcc 	andi	r2,r2,63487
 804c214:	8880030d 	sth	r2,12(r17)
 804c218:	88c00015 	stw	r3,0(r17)
 804c21c:	003fb306 	br	804c0ec <__alt_data_end+0xfffe404c>
 804c220:	98800017 	ldw	r2,0(r19)
 804c224:	103fea26 	beq	r2,zero,804c1d0 <__alt_data_end+0xfffe4130>
 804c228:	00c00744 	movi	r3,29
 804c22c:	10c00226 	beq	r2,r3,804c238 <__sflush_r+0x1fc>
 804c230:	00c00584 	movi	r3,22
 804c234:	10c0031e 	bne	r2,r3,804c244 <__sflush_r+0x208>
 804c238:	9c000015 	stw	r16,0(r19)
 804c23c:	0005883a 	mov	r2,zero
 804c240:	003fb306 	br	804c110 <__alt_data_end+0xfffe4070>
 804c244:	88c0030b 	ldhu	r3,12(r17)
 804c248:	3005883a 	mov	r2,r6
 804c24c:	18c01014 	ori	r3,r3,64
 804c250:	88c0030d 	sth	r3,12(r17)
 804c254:	003fae06 	br	804c110 <__alt_data_end+0xfffe4070>

0804c258 <_fflush_r>:
 804c258:	defffd04 	addi	sp,sp,-12
 804c25c:	dc000115 	stw	r16,4(sp)
 804c260:	dfc00215 	stw	ra,8(sp)
 804c264:	2021883a 	mov	r16,r4
 804c268:	20000226 	beq	r4,zero,804c274 <_fflush_r+0x1c>
 804c26c:	20800e17 	ldw	r2,56(r4)
 804c270:	10000c26 	beq	r2,zero,804c2a4 <_fflush_r+0x4c>
 804c274:	2880030f 	ldh	r2,12(r5)
 804c278:	1000051e 	bne	r2,zero,804c290 <_fflush_r+0x38>
 804c27c:	0005883a 	mov	r2,zero
 804c280:	dfc00217 	ldw	ra,8(sp)
 804c284:	dc000117 	ldw	r16,4(sp)
 804c288:	dec00304 	addi	sp,sp,12
 804c28c:	f800283a 	ret
 804c290:	8009883a 	mov	r4,r16
 804c294:	dfc00217 	ldw	ra,8(sp)
 804c298:	dc000117 	ldw	r16,4(sp)
 804c29c:	dec00304 	addi	sp,sp,12
 804c2a0:	804c03c1 	jmpi	804c03c <__sflush_r>
 804c2a4:	d9400015 	stw	r5,0(sp)
 804c2a8:	8047af80 	call	8047af8 <__sinit>
 804c2ac:	d9400017 	ldw	r5,0(sp)
 804c2b0:	003ff006 	br	804c274 <__alt_data_end+0xfffe41d4>

0804c2b4 <fflush>:
 804c2b4:	20000526 	beq	r4,zero,804c2cc <fflush+0x18>
 804c2b8:	00820174 	movhi	r2,2053
 804c2bc:	1093af04 	addi	r2,r2,20156
 804c2c0:	200b883a 	mov	r5,r4
 804c2c4:	11000017 	ldw	r4,0(r2)
 804c2c8:	804c2581 	jmpi	804c258 <_fflush_r>
 804c2cc:	00820174 	movhi	r2,2053
 804c2d0:	1093ae04 	addi	r2,r2,20152
 804c2d4:	11000017 	ldw	r4,0(r2)
 804c2d8:	01420174 	movhi	r5,2053
 804c2dc:	29709604 	addi	r5,r5,-15784
 804c2e0:	80480d41 	jmpi	80480d4 <_fwalk_reent>

0804c2e4 <_malloc_trim_r>:
 804c2e4:	defffb04 	addi	sp,sp,-20
 804c2e8:	dcc00315 	stw	r19,12(sp)
 804c2ec:	04c20174 	movhi	r19,2053
 804c2f0:	dc800215 	stw	r18,8(sp)
 804c2f4:	dc400115 	stw	r17,4(sp)
 804c2f8:	dc000015 	stw	r16,0(sp)
 804c2fc:	dfc00415 	stw	ra,16(sp)
 804c300:	2821883a 	mov	r16,r5
 804c304:	9ccdf404 	addi	r19,r19,14288
 804c308:	2025883a 	mov	r18,r4
 804c30c:	804f3a00 	call	804f3a0 <__malloc_lock>
 804c310:	98800217 	ldw	r2,8(r19)
 804c314:	14400117 	ldw	r17,4(r2)
 804c318:	00bfff04 	movi	r2,-4
 804c31c:	88a2703a 	and	r17,r17,r2
 804c320:	8c21c83a 	sub	r16,r17,r16
 804c324:	8403fbc4 	addi	r16,r16,4079
 804c328:	8020d33a 	srli	r16,r16,12
 804c32c:	0083ffc4 	movi	r2,4095
 804c330:	843fffc4 	addi	r16,r16,-1
 804c334:	8020933a 	slli	r16,r16,12
 804c338:	1400060e 	bge	r2,r16,804c354 <_malloc_trim_r+0x70>
 804c33c:	000b883a 	mov	r5,zero
 804c340:	9009883a 	mov	r4,r18
 804c344:	804a4780 	call	804a478 <_sbrk_r>
 804c348:	98c00217 	ldw	r3,8(r19)
 804c34c:	1c47883a 	add	r3,r3,r17
 804c350:	10c00a26 	beq	r2,r3,804c37c <_malloc_trim_r+0x98>
 804c354:	9009883a 	mov	r4,r18
 804c358:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804c35c:	0005883a 	mov	r2,zero
 804c360:	dfc00417 	ldw	ra,16(sp)
 804c364:	dcc00317 	ldw	r19,12(sp)
 804c368:	dc800217 	ldw	r18,8(sp)
 804c36c:	dc400117 	ldw	r17,4(sp)
 804c370:	dc000017 	ldw	r16,0(sp)
 804c374:	dec00504 	addi	sp,sp,20
 804c378:	f800283a 	ret
 804c37c:	040bc83a 	sub	r5,zero,r16
 804c380:	9009883a 	mov	r4,r18
 804c384:	804a4780 	call	804a478 <_sbrk_r>
 804c388:	00ffffc4 	movi	r3,-1
 804c38c:	10c00d26 	beq	r2,r3,804c3c4 <_malloc_trim_r+0xe0>
 804c390:	00c20174 	movhi	r3,2053
 804c394:	18dac704 	addi	r3,r3,27420
 804c398:	18800017 	ldw	r2,0(r3)
 804c39c:	99000217 	ldw	r4,8(r19)
 804c3a0:	8c23c83a 	sub	r17,r17,r16
 804c3a4:	8c400054 	ori	r17,r17,1
 804c3a8:	1421c83a 	sub	r16,r2,r16
 804c3ac:	24400115 	stw	r17,4(r4)
 804c3b0:	9009883a 	mov	r4,r18
 804c3b4:	1c000015 	stw	r16,0(r3)
 804c3b8:	804f3c40 	call	804f3c4 <__malloc_unlock>
 804c3bc:	00800044 	movi	r2,1
 804c3c0:	003fe706 	br	804c360 <__alt_data_end+0xfffe42c0>
 804c3c4:	000b883a 	mov	r5,zero
 804c3c8:	9009883a 	mov	r4,r18
 804c3cc:	804a4780 	call	804a478 <_sbrk_r>
 804c3d0:	99000217 	ldw	r4,8(r19)
 804c3d4:	014003c4 	movi	r5,15
 804c3d8:	1107c83a 	sub	r3,r2,r4
 804c3dc:	28ffdd0e 	bge	r5,r3,804c354 <__alt_data_end+0xfffe42b4>
 804c3e0:	01420174 	movhi	r5,2053
 804c3e4:	2953b104 	addi	r5,r5,20164
 804c3e8:	29400017 	ldw	r5,0(r5)
 804c3ec:	18c00054 	ori	r3,r3,1
 804c3f0:	20c00115 	stw	r3,4(r4)
 804c3f4:	00c20174 	movhi	r3,2053
 804c3f8:	1145c83a 	sub	r2,r2,r5
 804c3fc:	18dac704 	addi	r3,r3,27420
 804c400:	18800015 	stw	r2,0(r3)
 804c404:	003fd306 	br	804c354 <__alt_data_end+0xfffe42b4>

0804c408 <_free_r>:
 804c408:	28004126 	beq	r5,zero,804c510 <_free_r+0x108>
 804c40c:	defffd04 	addi	sp,sp,-12
 804c410:	dc400115 	stw	r17,4(sp)
 804c414:	dc000015 	stw	r16,0(sp)
 804c418:	2023883a 	mov	r17,r4
 804c41c:	2821883a 	mov	r16,r5
 804c420:	dfc00215 	stw	ra,8(sp)
 804c424:	804f3a00 	call	804f3a0 <__malloc_lock>
 804c428:	81ffff17 	ldw	r7,-4(r16)
 804c42c:	00bfff84 	movi	r2,-2
 804c430:	01020174 	movhi	r4,2053
 804c434:	81bffe04 	addi	r6,r16,-8
 804c438:	3884703a 	and	r2,r7,r2
 804c43c:	210df404 	addi	r4,r4,14288
 804c440:	308b883a 	add	r5,r6,r2
 804c444:	2a400117 	ldw	r9,4(r5)
 804c448:	22000217 	ldw	r8,8(r4)
 804c44c:	00ffff04 	movi	r3,-4
 804c450:	48c6703a 	and	r3,r9,r3
 804c454:	2a005726 	beq	r5,r8,804c5b4 <_free_r+0x1ac>
 804c458:	28c00115 	stw	r3,4(r5)
 804c45c:	39c0004c 	andi	r7,r7,1
 804c460:	3800091e 	bne	r7,zero,804c488 <_free_r+0x80>
 804c464:	823ffe17 	ldw	r8,-8(r16)
 804c468:	22400204 	addi	r9,r4,8
 804c46c:	320dc83a 	sub	r6,r6,r8
 804c470:	31c00217 	ldw	r7,8(r6)
 804c474:	1205883a 	add	r2,r2,r8
 804c478:	3a406526 	beq	r7,r9,804c610 <_free_r+0x208>
 804c47c:	32000317 	ldw	r8,12(r6)
 804c480:	3a000315 	stw	r8,12(r7)
 804c484:	41c00215 	stw	r7,8(r8)
 804c488:	28cf883a 	add	r7,r5,r3
 804c48c:	39c00117 	ldw	r7,4(r7)
 804c490:	39c0004c 	andi	r7,r7,1
 804c494:	38003a26 	beq	r7,zero,804c580 <_free_r+0x178>
 804c498:	10c00054 	ori	r3,r2,1
 804c49c:	30c00115 	stw	r3,4(r6)
 804c4a0:	3087883a 	add	r3,r6,r2
 804c4a4:	18800015 	stw	r2,0(r3)
 804c4a8:	00c07fc4 	movi	r3,511
 804c4ac:	18801936 	bltu	r3,r2,804c514 <_free_r+0x10c>
 804c4b0:	1004d0fa 	srli	r2,r2,3
 804c4b4:	01c00044 	movi	r7,1
 804c4b8:	21400117 	ldw	r5,4(r4)
 804c4bc:	10c00044 	addi	r3,r2,1
 804c4c0:	18c7883a 	add	r3,r3,r3
 804c4c4:	1005d0ba 	srai	r2,r2,2
 804c4c8:	18c7883a 	add	r3,r3,r3
 804c4cc:	18c7883a 	add	r3,r3,r3
 804c4d0:	1907883a 	add	r3,r3,r4
 804c4d4:	3884983a 	sll	r2,r7,r2
 804c4d8:	19c00017 	ldw	r7,0(r3)
 804c4dc:	1a3ffe04 	addi	r8,r3,-8
 804c4e0:	1144b03a 	or	r2,r2,r5
 804c4e4:	32000315 	stw	r8,12(r6)
 804c4e8:	31c00215 	stw	r7,8(r6)
 804c4ec:	20800115 	stw	r2,4(r4)
 804c4f0:	19800015 	stw	r6,0(r3)
 804c4f4:	39800315 	stw	r6,12(r7)
 804c4f8:	8809883a 	mov	r4,r17
 804c4fc:	dfc00217 	ldw	ra,8(sp)
 804c500:	dc400117 	ldw	r17,4(sp)
 804c504:	dc000017 	ldw	r16,0(sp)
 804c508:	dec00304 	addi	sp,sp,12
 804c50c:	804f3c41 	jmpi	804f3c4 <__malloc_unlock>
 804c510:	f800283a 	ret
 804c514:	100ad27a 	srli	r5,r2,9
 804c518:	00c00104 	movi	r3,4
 804c51c:	19404a36 	bltu	r3,r5,804c648 <_free_r+0x240>
 804c520:	100ad1ba 	srli	r5,r2,6
 804c524:	28c00e44 	addi	r3,r5,57
 804c528:	18c7883a 	add	r3,r3,r3
 804c52c:	29400e04 	addi	r5,r5,56
 804c530:	18c7883a 	add	r3,r3,r3
 804c534:	18c7883a 	add	r3,r3,r3
 804c538:	1909883a 	add	r4,r3,r4
 804c53c:	20c00017 	ldw	r3,0(r4)
 804c540:	01c20174 	movhi	r7,2053
 804c544:	213ffe04 	addi	r4,r4,-8
 804c548:	39cdf404 	addi	r7,r7,14288
 804c54c:	20c04426 	beq	r4,r3,804c660 <_free_r+0x258>
 804c550:	01ffff04 	movi	r7,-4
 804c554:	19400117 	ldw	r5,4(r3)
 804c558:	29ca703a 	and	r5,r5,r7
 804c55c:	1140022e 	bgeu	r2,r5,804c568 <_free_r+0x160>
 804c560:	18c00217 	ldw	r3,8(r3)
 804c564:	20fffb1e 	bne	r4,r3,804c554 <__alt_data_end+0xfffe44b4>
 804c568:	19000317 	ldw	r4,12(r3)
 804c56c:	31000315 	stw	r4,12(r6)
 804c570:	30c00215 	stw	r3,8(r6)
 804c574:	21800215 	stw	r6,8(r4)
 804c578:	19800315 	stw	r6,12(r3)
 804c57c:	003fde06 	br	804c4f8 <__alt_data_end+0xfffe4458>
 804c580:	29c00217 	ldw	r7,8(r5)
 804c584:	10c5883a 	add	r2,r2,r3
 804c588:	00c20174 	movhi	r3,2053
 804c58c:	18cdf604 	addi	r3,r3,14296
 804c590:	38c03b26 	beq	r7,r3,804c680 <_free_r+0x278>
 804c594:	2a000317 	ldw	r8,12(r5)
 804c598:	11400054 	ori	r5,r2,1
 804c59c:	3087883a 	add	r3,r6,r2
 804c5a0:	3a000315 	stw	r8,12(r7)
 804c5a4:	41c00215 	stw	r7,8(r8)
 804c5a8:	31400115 	stw	r5,4(r6)
 804c5ac:	18800015 	stw	r2,0(r3)
 804c5b0:	003fbd06 	br	804c4a8 <__alt_data_end+0xfffe4408>
 804c5b4:	39c0004c 	andi	r7,r7,1
 804c5b8:	10c5883a 	add	r2,r2,r3
 804c5bc:	3800071e 	bne	r7,zero,804c5dc <_free_r+0x1d4>
 804c5c0:	81fffe17 	ldw	r7,-8(r16)
 804c5c4:	31cdc83a 	sub	r6,r6,r7
 804c5c8:	30c00317 	ldw	r3,12(r6)
 804c5cc:	31400217 	ldw	r5,8(r6)
 804c5d0:	11c5883a 	add	r2,r2,r7
 804c5d4:	28c00315 	stw	r3,12(r5)
 804c5d8:	19400215 	stw	r5,8(r3)
 804c5dc:	10c00054 	ori	r3,r2,1
 804c5e0:	30c00115 	stw	r3,4(r6)
 804c5e4:	00c20174 	movhi	r3,2053
 804c5e8:	18d3b204 	addi	r3,r3,20168
 804c5ec:	18c00017 	ldw	r3,0(r3)
 804c5f0:	21800215 	stw	r6,8(r4)
 804c5f4:	10ffc036 	bltu	r2,r3,804c4f8 <__alt_data_end+0xfffe4458>
 804c5f8:	00820174 	movhi	r2,2053
 804c5fc:	109ab804 	addi	r2,r2,27360
 804c600:	11400017 	ldw	r5,0(r2)
 804c604:	8809883a 	mov	r4,r17
 804c608:	804c2e40 	call	804c2e4 <_malloc_trim_r>
 804c60c:	003fba06 	br	804c4f8 <__alt_data_end+0xfffe4458>
 804c610:	28c9883a 	add	r4,r5,r3
 804c614:	21000117 	ldw	r4,4(r4)
 804c618:	2100004c 	andi	r4,r4,1
 804c61c:	2000391e 	bne	r4,zero,804c704 <_free_r+0x2fc>
 804c620:	29c00217 	ldw	r7,8(r5)
 804c624:	29000317 	ldw	r4,12(r5)
 804c628:	1885883a 	add	r2,r3,r2
 804c62c:	10c00054 	ori	r3,r2,1
 804c630:	39000315 	stw	r4,12(r7)
 804c634:	21c00215 	stw	r7,8(r4)
 804c638:	30c00115 	stw	r3,4(r6)
 804c63c:	308d883a 	add	r6,r6,r2
 804c640:	30800015 	stw	r2,0(r6)
 804c644:	003fac06 	br	804c4f8 <__alt_data_end+0xfffe4458>
 804c648:	00c00504 	movi	r3,20
 804c64c:	19401536 	bltu	r3,r5,804c6a4 <_free_r+0x29c>
 804c650:	28c01704 	addi	r3,r5,92
 804c654:	18c7883a 	add	r3,r3,r3
 804c658:	294016c4 	addi	r5,r5,91
 804c65c:	003fb406 	br	804c530 <__alt_data_end+0xfffe4490>
 804c660:	280bd0ba 	srai	r5,r5,2
 804c664:	00c00044 	movi	r3,1
 804c668:	38800117 	ldw	r2,4(r7)
 804c66c:	194a983a 	sll	r5,r3,r5
 804c670:	2007883a 	mov	r3,r4
 804c674:	2884b03a 	or	r2,r5,r2
 804c678:	38800115 	stw	r2,4(r7)
 804c67c:	003fbb06 	br	804c56c <__alt_data_end+0xfffe44cc>
 804c680:	21800515 	stw	r6,20(r4)
 804c684:	21800415 	stw	r6,16(r4)
 804c688:	10c00054 	ori	r3,r2,1
 804c68c:	31c00315 	stw	r7,12(r6)
 804c690:	31c00215 	stw	r7,8(r6)
 804c694:	30c00115 	stw	r3,4(r6)
 804c698:	308d883a 	add	r6,r6,r2
 804c69c:	30800015 	stw	r2,0(r6)
 804c6a0:	003f9506 	br	804c4f8 <__alt_data_end+0xfffe4458>
 804c6a4:	00c01504 	movi	r3,84
 804c6a8:	19400536 	bltu	r3,r5,804c6c0 <_free_r+0x2b8>
 804c6ac:	100ad33a 	srli	r5,r2,12
 804c6b0:	28c01bc4 	addi	r3,r5,111
 804c6b4:	18c7883a 	add	r3,r3,r3
 804c6b8:	29401b84 	addi	r5,r5,110
 804c6bc:	003f9c06 	br	804c530 <__alt_data_end+0xfffe4490>
 804c6c0:	00c05504 	movi	r3,340
 804c6c4:	19400536 	bltu	r3,r5,804c6dc <_free_r+0x2d4>
 804c6c8:	100ad3fa 	srli	r5,r2,15
 804c6cc:	28c01e04 	addi	r3,r5,120
 804c6d0:	18c7883a 	add	r3,r3,r3
 804c6d4:	29401dc4 	addi	r5,r5,119
 804c6d8:	003f9506 	br	804c530 <__alt_data_end+0xfffe4490>
 804c6dc:	00c15504 	movi	r3,1364
 804c6e0:	19400536 	bltu	r3,r5,804c6f8 <_free_r+0x2f0>
 804c6e4:	100ad4ba 	srli	r5,r2,18
 804c6e8:	28c01f44 	addi	r3,r5,125
 804c6ec:	18c7883a 	add	r3,r3,r3
 804c6f0:	29401f04 	addi	r5,r5,124
 804c6f4:	003f8e06 	br	804c530 <__alt_data_end+0xfffe4490>
 804c6f8:	00c03f84 	movi	r3,254
 804c6fc:	01401f84 	movi	r5,126
 804c700:	003f8b06 	br	804c530 <__alt_data_end+0xfffe4490>
 804c704:	10c00054 	ori	r3,r2,1
 804c708:	30c00115 	stw	r3,4(r6)
 804c70c:	308d883a 	add	r6,r6,r2
 804c710:	30800015 	stw	r2,0(r6)
 804c714:	003f7806 	br	804c4f8 <__alt_data_end+0xfffe4458>

0804c718 <_lseek_r>:
 804c718:	defffd04 	addi	sp,sp,-12
 804c71c:	2805883a 	mov	r2,r5
 804c720:	dc000015 	stw	r16,0(sp)
 804c724:	04020174 	movhi	r16,2053
 804c728:	dc400115 	stw	r17,4(sp)
 804c72c:	300b883a 	mov	r5,r6
 804c730:	841ab904 	addi	r16,r16,27364
 804c734:	2023883a 	mov	r17,r4
 804c738:	380d883a 	mov	r6,r7
 804c73c:	1009883a 	mov	r4,r2
 804c740:	dfc00215 	stw	ra,8(sp)
 804c744:	80000015 	stw	zero,0(r16)
 804c748:	804f2480 	call	804f248 <lseek>
 804c74c:	00ffffc4 	movi	r3,-1
 804c750:	10c00526 	beq	r2,r3,804c768 <_lseek_r+0x50>
 804c754:	dfc00217 	ldw	ra,8(sp)
 804c758:	dc400117 	ldw	r17,4(sp)
 804c75c:	dc000017 	ldw	r16,0(sp)
 804c760:	dec00304 	addi	sp,sp,12
 804c764:	f800283a 	ret
 804c768:	80c00017 	ldw	r3,0(r16)
 804c76c:	183ff926 	beq	r3,zero,804c754 <__alt_data_end+0xfffe46b4>
 804c770:	88c00015 	stw	r3,0(r17)
 804c774:	003ff706 	br	804c754 <__alt_data_end+0xfffe46b4>

0804c778 <__smakebuf_r>:
 804c778:	2880030b 	ldhu	r2,12(r5)
 804c77c:	10c0008c 	andi	r3,r2,2
 804c780:	1800411e 	bne	r3,zero,804c888 <__smakebuf_r+0x110>
 804c784:	deffec04 	addi	sp,sp,-80
 804c788:	dc000f15 	stw	r16,60(sp)
 804c78c:	2821883a 	mov	r16,r5
 804c790:	2940038f 	ldh	r5,14(r5)
 804c794:	dc401015 	stw	r17,64(sp)
 804c798:	dfc01315 	stw	ra,76(sp)
 804c79c:	dcc01215 	stw	r19,72(sp)
 804c7a0:	dc801115 	stw	r18,68(sp)
 804c7a4:	2023883a 	mov	r17,r4
 804c7a8:	28001c16 	blt	r5,zero,804c81c <__smakebuf_r+0xa4>
 804c7ac:	d80d883a 	mov	r6,sp
 804c7b0:	804c9940 	call	804c994 <_fstat_r>
 804c7b4:	10001816 	blt	r2,zero,804c818 <__smakebuf_r+0xa0>
 804c7b8:	d8800117 	ldw	r2,4(sp)
 804c7bc:	00e00014 	movui	r3,32768
 804c7c0:	10bc000c 	andi	r2,r2,61440
 804c7c4:	14c80020 	cmpeqi	r19,r2,8192
 804c7c8:	10c03726 	beq	r2,r3,804c8a8 <__smakebuf_r+0x130>
 804c7cc:	80c0030b 	ldhu	r3,12(r16)
 804c7d0:	18c20014 	ori	r3,r3,2048
 804c7d4:	80c0030d 	sth	r3,12(r16)
 804c7d8:	00c80004 	movi	r3,8192
 804c7dc:	10c0521e 	bne	r2,r3,804c928 <__smakebuf_r+0x1b0>
 804c7e0:	8140038f 	ldh	r5,14(r16)
 804c7e4:	8809883a 	mov	r4,r17
 804c7e8:	804c9f00 	call	804c9f0 <_isatty_r>
 804c7ec:	10004c26 	beq	r2,zero,804c920 <__smakebuf_r+0x1a8>
 804c7f0:	8080030b 	ldhu	r2,12(r16)
 804c7f4:	80c010c4 	addi	r3,r16,67
 804c7f8:	80c00015 	stw	r3,0(r16)
 804c7fc:	10800054 	ori	r2,r2,1
 804c800:	8080030d 	sth	r2,12(r16)
 804c804:	00800044 	movi	r2,1
 804c808:	80c00415 	stw	r3,16(r16)
 804c80c:	80800515 	stw	r2,20(r16)
 804c810:	04810004 	movi	r18,1024
 804c814:	00000706 	br	804c834 <__smakebuf_r+0xbc>
 804c818:	8080030b 	ldhu	r2,12(r16)
 804c81c:	10c0200c 	andi	r3,r2,128
 804c820:	18001f1e 	bne	r3,zero,804c8a0 <__smakebuf_r+0x128>
 804c824:	04810004 	movi	r18,1024
 804c828:	10820014 	ori	r2,r2,2048
 804c82c:	8080030d 	sth	r2,12(r16)
 804c830:	0027883a 	mov	r19,zero
 804c834:	900b883a 	mov	r5,r18
 804c838:	8809883a 	mov	r4,r17
 804c83c:	80482740 	call	8048274 <_malloc_r>
 804c840:	10002c26 	beq	r2,zero,804c8f4 <__smakebuf_r+0x17c>
 804c844:	80c0030b 	ldhu	r3,12(r16)
 804c848:	01020134 	movhi	r4,2052
 804c84c:	211de804 	addi	r4,r4,30624
 804c850:	89000f15 	stw	r4,60(r17)
 804c854:	18c02014 	ori	r3,r3,128
 804c858:	80c0030d 	sth	r3,12(r16)
 804c85c:	80800015 	stw	r2,0(r16)
 804c860:	80800415 	stw	r2,16(r16)
 804c864:	84800515 	stw	r18,20(r16)
 804c868:	98001a1e 	bne	r19,zero,804c8d4 <__smakebuf_r+0x15c>
 804c86c:	dfc01317 	ldw	ra,76(sp)
 804c870:	dcc01217 	ldw	r19,72(sp)
 804c874:	dc801117 	ldw	r18,68(sp)
 804c878:	dc401017 	ldw	r17,64(sp)
 804c87c:	dc000f17 	ldw	r16,60(sp)
 804c880:	dec01404 	addi	sp,sp,80
 804c884:	f800283a 	ret
 804c888:	288010c4 	addi	r2,r5,67
 804c88c:	28800015 	stw	r2,0(r5)
 804c890:	28800415 	stw	r2,16(r5)
 804c894:	00800044 	movi	r2,1
 804c898:	28800515 	stw	r2,20(r5)
 804c89c:	f800283a 	ret
 804c8a0:	04801004 	movi	r18,64
 804c8a4:	003fe006 	br	804c828 <__alt_data_end+0xfffe4788>
 804c8a8:	81000a17 	ldw	r4,40(r16)
 804c8ac:	00c20174 	movhi	r3,2053
 804c8b0:	18e96904 	addi	r3,r3,-23132
 804c8b4:	20ffc51e 	bne	r4,r3,804c7cc <__alt_data_end+0xfffe472c>
 804c8b8:	8080030b 	ldhu	r2,12(r16)
 804c8bc:	04810004 	movi	r18,1024
 804c8c0:	84801315 	stw	r18,76(r16)
 804c8c4:	1484b03a 	or	r2,r2,r18
 804c8c8:	8080030d 	sth	r2,12(r16)
 804c8cc:	0027883a 	mov	r19,zero
 804c8d0:	003fd806 	br	804c834 <__alt_data_end+0xfffe4794>
 804c8d4:	8140038f 	ldh	r5,14(r16)
 804c8d8:	8809883a 	mov	r4,r17
 804c8dc:	804c9f00 	call	804c9f0 <_isatty_r>
 804c8e0:	103fe226 	beq	r2,zero,804c86c <__alt_data_end+0xfffe47cc>
 804c8e4:	8080030b 	ldhu	r2,12(r16)
 804c8e8:	10800054 	ori	r2,r2,1
 804c8ec:	8080030d 	sth	r2,12(r16)
 804c8f0:	003fde06 	br	804c86c <__alt_data_end+0xfffe47cc>
 804c8f4:	8080030b 	ldhu	r2,12(r16)
 804c8f8:	10c0800c 	andi	r3,r2,512
 804c8fc:	183fdb1e 	bne	r3,zero,804c86c <__alt_data_end+0xfffe47cc>
 804c900:	10800094 	ori	r2,r2,2
 804c904:	80c010c4 	addi	r3,r16,67
 804c908:	8080030d 	sth	r2,12(r16)
 804c90c:	00800044 	movi	r2,1
 804c910:	80c00015 	stw	r3,0(r16)
 804c914:	80c00415 	stw	r3,16(r16)
 804c918:	80800515 	stw	r2,20(r16)
 804c91c:	003fd306 	br	804c86c <__alt_data_end+0xfffe47cc>
 804c920:	04810004 	movi	r18,1024
 804c924:	003fc306 	br	804c834 <__alt_data_end+0xfffe4794>
 804c928:	0027883a 	mov	r19,zero
 804c92c:	04810004 	movi	r18,1024
 804c930:	003fc006 	br	804c834 <__alt_data_end+0xfffe4794>

0804c934 <_read_r>:
 804c934:	defffd04 	addi	sp,sp,-12
 804c938:	2805883a 	mov	r2,r5
 804c93c:	dc000015 	stw	r16,0(sp)
 804c940:	04020174 	movhi	r16,2053
 804c944:	dc400115 	stw	r17,4(sp)
 804c948:	300b883a 	mov	r5,r6
 804c94c:	841ab904 	addi	r16,r16,27364
 804c950:	2023883a 	mov	r17,r4
 804c954:	380d883a 	mov	r6,r7
 804c958:	1009883a 	mov	r4,r2
 804c95c:	dfc00215 	stw	ra,8(sp)
 804c960:	80000015 	stw	zero,0(r16)
 804c964:	804f4240 	call	804f424 <read>
 804c968:	00ffffc4 	movi	r3,-1
 804c96c:	10c00526 	beq	r2,r3,804c984 <_read_r+0x50>
 804c970:	dfc00217 	ldw	ra,8(sp)
 804c974:	dc400117 	ldw	r17,4(sp)
 804c978:	dc000017 	ldw	r16,0(sp)
 804c97c:	dec00304 	addi	sp,sp,12
 804c980:	f800283a 	ret
 804c984:	80c00017 	ldw	r3,0(r16)
 804c988:	183ff926 	beq	r3,zero,804c970 <__alt_data_end+0xfffe48d0>
 804c98c:	88c00015 	stw	r3,0(r17)
 804c990:	003ff706 	br	804c970 <__alt_data_end+0xfffe48d0>

0804c994 <_fstat_r>:
 804c994:	defffd04 	addi	sp,sp,-12
 804c998:	2805883a 	mov	r2,r5
 804c99c:	dc000015 	stw	r16,0(sp)
 804c9a0:	04020174 	movhi	r16,2053
 804c9a4:	dc400115 	stw	r17,4(sp)
 804c9a8:	841ab904 	addi	r16,r16,27364
 804c9ac:	2023883a 	mov	r17,r4
 804c9b0:	300b883a 	mov	r5,r6
 804c9b4:	1009883a 	mov	r4,r2
 804c9b8:	dfc00215 	stw	ra,8(sp)
 804c9bc:	80000015 	stw	zero,0(r16)
 804c9c0:	804ece00 	call	804ece0 <fstat>
 804c9c4:	00ffffc4 	movi	r3,-1
 804c9c8:	10c00526 	beq	r2,r3,804c9e0 <_fstat_r+0x4c>
 804c9cc:	dfc00217 	ldw	ra,8(sp)
 804c9d0:	dc400117 	ldw	r17,4(sp)
 804c9d4:	dc000017 	ldw	r16,0(sp)
 804c9d8:	dec00304 	addi	sp,sp,12
 804c9dc:	f800283a 	ret
 804c9e0:	80c00017 	ldw	r3,0(r16)
 804c9e4:	183ff926 	beq	r3,zero,804c9cc <__alt_data_end+0xfffe492c>
 804c9e8:	88c00015 	stw	r3,0(r17)
 804c9ec:	003ff706 	br	804c9cc <__alt_data_end+0xfffe492c>

0804c9f0 <_isatty_r>:
 804c9f0:	defffd04 	addi	sp,sp,-12
 804c9f4:	dc000015 	stw	r16,0(sp)
 804c9f8:	04020174 	movhi	r16,2053
 804c9fc:	dc400115 	stw	r17,4(sp)
 804ca00:	841ab904 	addi	r16,r16,27364
 804ca04:	2023883a 	mov	r17,r4
 804ca08:	2809883a 	mov	r4,r5
 804ca0c:	dfc00215 	stw	ra,8(sp)
 804ca10:	80000015 	stw	zero,0(r16)
 804ca14:	804f0740 	call	804f074 <isatty>
 804ca18:	00ffffc4 	movi	r3,-1
 804ca1c:	10c00526 	beq	r2,r3,804ca34 <_isatty_r+0x44>
 804ca20:	dfc00217 	ldw	ra,8(sp)
 804ca24:	dc400117 	ldw	r17,4(sp)
 804ca28:	dc000017 	ldw	r16,0(sp)
 804ca2c:	dec00304 	addi	sp,sp,12
 804ca30:	f800283a 	ret
 804ca34:	80c00017 	ldw	r3,0(r16)
 804ca38:	183ff926 	beq	r3,zero,804ca20 <__alt_data_end+0xfffe4980>
 804ca3c:	88c00015 	stw	r3,0(r17)
 804ca40:	003ff706 	br	804ca20 <__alt_data_end+0xfffe4980>

0804ca44 <__udivdi3>:
 804ca44:	defff404 	addi	sp,sp,-48
 804ca48:	dcc00515 	stw	r19,20(sp)
 804ca4c:	dc000215 	stw	r16,8(sp)
 804ca50:	dfc00b15 	stw	ra,44(sp)
 804ca54:	df000a15 	stw	fp,40(sp)
 804ca58:	ddc00915 	stw	r23,36(sp)
 804ca5c:	dd800815 	stw	r22,32(sp)
 804ca60:	dd400715 	stw	r21,28(sp)
 804ca64:	dd000615 	stw	r20,24(sp)
 804ca68:	dc800415 	stw	r18,16(sp)
 804ca6c:	dc400315 	stw	r17,12(sp)
 804ca70:	2027883a 	mov	r19,r4
 804ca74:	2821883a 	mov	r16,r5
 804ca78:	3800461e 	bne	r7,zero,804cb94 <__udivdi3+0x150>
 804ca7c:	3023883a 	mov	r17,r6
 804ca80:	2025883a 	mov	r18,r4
 804ca84:	2980572e 	bgeu	r5,r6,804cbe4 <__udivdi3+0x1a0>
 804ca88:	00bfffd4 	movui	r2,65535
 804ca8c:	282d883a 	mov	r22,r5
 804ca90:	1180b236 	bltu	r2,r6,804cd5c <__udivdi3+0x318>
 804ca94:	00803fc4 	movi	r2,255
 804ca98:	1185803a 	cmpltu	r2,r2,r6
 804ca9c:	100490fa 	slli	r2,r2,3
 804caa0:	3086d83a 	srl	r3,r6,r2
 804caa4:	01020174 	movhi	r4,2053
 804caa8:	210be484 	addi	r4,r4,12178
 804caac:	20c7883a 	add	r3,r4,r3
 804cab0:	18c00003 	ldbu	r3,0(r3)
 804cab4:	1885883a 	add	r2,r3,r2
 804cab8:	00c00804 	movi	r3,32
 804cabc:	1887c83a 	sub	r3,r3,r2
 804cac0:	18000526 	beq	r3,zero,804cad8 <__udivdi3+0x94>
 804cac4:	80e0983a 	sll	r16,r16,r3
 804cac8:	9884d83a 	srl	r2,r19,r2
 804cacc:	30e2983a 	sll	r17,r6,r3
 804cad0:	98e4983a 	sll	r18,r19,r3
 804cad4:	142cb03a 	or	r22,r2,r16
 804cad8:	882ad43a 	srli	r21,r17,16
 804cadc:	b009883a 	mov	r4,r22
 804cae0:	8d3fffcc 	andi	r20,r17,65535
 804cae4:	a80b883a 	mov	r5,r21
 804cae8:	804385c0 	call	804385c <__umodsi3>
 804caec:	b009883a 	mov	r4,r22
 804caf0:	a80b883a 	mov	r5,r21
 804caf4:	1027883a 	mov	r19,r2
 804caf8:	80437f80 	call	80437f8 <__udivsi3>
 804cafc:	100b883a 	mov	r5,r2
 804cb00:	a009883a 	mov	r4,r20
 804cb04:	102d883a 	mov	r22,r2
 804cb08:	80418e00 	call	80418e0 <__mulsi3>
 804cb0c:	9826943a 	slli	r19,r19,16
 804cb10:	9006d43a 	srli	r3,r18,16
 804cb14:	1cc6b03a 	or	r3,r3,r19
 804cb18:	1880052e 	bgeu	r3,r2,804cb30 <__udivdi3+0xec>
 804cb1c:	1c47883a 	add	r3,r3,r17
 804cb20:	b13fffc4 	addi	r4,r22,-1
 804cb24:	1c400136 	bltu	r3,r17,804cb2c <__udivdi3+0xe8>
 804cb28:	18814236 	bltu	r3,r2,804d034 <__udivdi3+0x5f0>
 804cb2c:	202d883a 	mov	r22,r4
 804cb30:	18a1c83a 	sub	r16,r3,r2
 804cb34:	8009883a 	mov	r4,r16
 804cb38:	a80b883a 	mov	r5,r21
 804cb3c:	804385c0 	call	804385c <__umodsi3>
 804cb40:	1027883a 	mov	r19,r2
 804cb44:	8009883a 	mov	r4,r16
 804cb48:	a80b883a 	mov	r5,r21
 804cb4c:	9826943a 	slli	r19,r19,16
 804cb50:	80437f80 	call	80437f8 <__udivsi3>
 804cb54:	100b883a 	mov	r5,r2
 804cb58:	a009883a 	mov	r4,r20
 804cb5c:	94bfffcc 	andi	r18,r18,65535
 804cb60:	1021883a 	mov	r16,r2
 804cb64:	94e4b03a 	or	r18,r18,r19
 804cb68:	80418e00 	call	80418e0 <__mulsi3>
 804cb6c:	9080052e 	bgeu	r18,r2,804cb84 <__udivdi3+0x140>
 804cb70:	8ca5883a 	add	r18,r17,r18
 804cb74:	80ffffc4 	addi	r3,r16,-1
 804cb78:	94410c36 	bltu	r18,r17,804cfac <__udivdi3+0x568>
 804cb7c:	90810b2e 	bgeu	r18,r2,804cfac <__udivdi3+0x568>
 804cb80:	843fff84 	addi	r16,r16,-2
 804cb84:	b004943a 	slli	r2,r22,16
 804cb88:	0007883a 	mov	r3,zero
 804cb8c:	1404b03a 	or	r2,r2,r16
 804cb90:	00005e06 	br	804cd0c <__udivdi3+0x2c8>
 804cb94:	29c05b36 	bltu	r5,r7,804cd04 <__udivdi3+0x2c0>
 804cb98:	00bfffd4 	movui	r2,65535
 804cb9c:	11c0672e 	bgeu	r2,r7,804cd3c <__udivdi3+0x2f8>
 804cba0:	00804034 	movhi	r2,256
 804cba4:	10bfffc4 	addi	r2,r2,-1
 804cba8:	11c10a36 	bltu	r2,r7,804cfd4 <__udivdi3+0x590>
 804cbac:	00800404 	movi	r2,16
 804cbb0:	3886d83a 	srl	r3,r7,r2
 804cbb4:	01020174 	movhi	r4,2053
 804cbb8:	210be484 	addi	r4,r4,12178
 804cbbc:	20c7883a 	add	r3,r4,r3
 804cbc0:	18c00003 	ldbu	r3,0(r3)
 804cbc4:	05c00804 	movi	r23,32
 804cbc8:	1885883a 	add	r2,r3,r2
 804cbcc:	b8afc83a 	sub	r23,r23,r2
 804cbd0:	b800671e 	bne	r23,zero,804cd70 <__udivdi3+0x32c>
 804cbd4:	3c010536 	bltu	r7,r16,804cfec <__udivdi3+0x5a8>
 804cbd8:	9985403a 	cmpgeu	r2,r19,r6
 804cbdc:	0007883a 	mov	r3,zero
 804cbe0:	00004a06 	br	804cd0c <__udivdi3+0x2c8>
 804cbe4:	3000041e 	bne	r6,zero,804cbf8 <__udivdi3+0x1b4>
 804cbe8:	000b883a 	mov	r5,zero
 804cbec:	01000044 	movi	r4,1
 804cbf0:	80437f80 	call	80437f8 <__udivsi3>
 804cbf4:	1023883a 	mov	r17,r2
 804cbf8:	00bfffd4 	movui	r2,65535
 804cbfc:	1440532e 	bgeu	r2,r17,804cd4c <__udivdi3+0x308>
 804cc00:	00804034 	movhi	r2,256
 804cc04:	10bfffc4 	addi	r2,r2,-1
 804cc08:	1440f436 	bltu	r2,r17,804cfdc <__udivdi3+0x598>
 804cc0c:	00800404 	movi	r2,16
 804cc10:	8886d83a 	srl	r3,r17,r2
 804cc14:	01020174 	movhi	r4,2053
 804cc18:	210be484 	addi	r4,r4,12178
 804cc1c:	20c7883a 	add	r3,r4,r3
 804cc20:	18c00003 	ldbu	r3,0(r3)
 804cc24:	1885883a 	add	r2,r3,r2
 804cc28:	00c00804 	movi	r3,32
 804cc2c:	1887c83a 	sub	r3,r3,r2
 804cc30:	1800a51e 	bne	r3,zero,804cec8 <__udivdi3+0x484>
 804cc34:	882ad43a 	srli	r21,r17,16
 804cc38:	8461c83a 	sub	r16,r16,r17
 804cc3c:	8d3fffcc 	andi	r20,r17,65535
 804cc40:	00c00044 	movi	r3,1
 804cc44:	a80b883a 	mov	r5,r21
 804cc48:	8009883a 	mov	r4,r16
 804cc4c:	d8c00115 	stw	r3,4(sp)
 804cc50:	804385c0 	call	804385c <__umodsi3>
 804cc54:	a80b883a 	mov	r5,r21
 804cc58:	8009883a 	mov	r4,r16
 804cc5c:	1027883a 	mov	r19,r2
 804cc60:	80437f80 	call	80437f8 <__udivsi3>
 804cc64:	a00b883a 	mov	r5,r20
 804cc68:	1009883a 	mov	r4,r2
 804cc6c:	102d883a 	mov	r22,r2
 804cc70:	80418e00 	call	80418e0 <__mulsi3>
 804cc74:	9826943a 	slli	r19,r19,16
 804cc78:	900ed43a 	srli	r7,r18,16
 804cc7c:	d8c00117 	ldw	r3,4(sp)
 804cc80:	3cceb03a 	or	r7,r7,r19
 804cc84:	3880052e 	bgeu	r7,r2,804cc9c <__udivdi3+0x258>
 804cc88:	3c4f883a 	add	r7,r7,r17
 804cc8c:	b13fffc4 	addi	r4,r22,-1
 804cc90:	3c400136 	bltu	r7,r17,804cc98 <__udivdi3+0x254>
 804cc94:	3880e436 	bltu	r7,r2,804d028 <__udivdi3+0x5e4>
 804cc98:	202d883a 	mov	r22,r4
 804cc9c:	38a1c83a 	sub	r16,r7,r2
 804cca0:	8009883a 	mov	r4,r16
 804cca4:	a80b883a 	mov	r5,r21
 804cca8:	d8c00115 	stw	r3,4(sp)
 804ccac:	804385c0 	call	804385c <__umodsi3>
 804ccb0:	1027883a 	mov	r19,r2
 804ccb4:	8009883a 	mov	r4,r16
 804ccb8:	a80b883a 	mov	r5,r21
 804ccbc:	9826943a 	slli	r19,r19,16
 804ccc0:	80437f80 	call	80437f8 <__udivsi3>
 804ccc4:	a00b883a 	mov	r5,r20
 804ccc8:	1009883a 	mov	r4,r2
 804cccc:	94bfffcc 	andi	r18,r18,65535
 804ccd0:	1021883a 	mov	r16,r2
 804ccd4:	94e4b03a 	or	r18,r18,r19
 804ccd8:	80418e00 	call	80418e0 <__mulsi3>
 804ccdc:	d8c00117 	ldw	r3,4(sp)
 804cce0:	9080052e 	bgeu	r18,r2,804ccf8 <__udivdi3+0x2b4>
 804cce4:	8ca5883a 	add	r18,r17,r18
 804cce8:	813fffc4 	addi	r4,r16,-1
 804ccec:	9440ad36 	bltu	r18,r17,804cfa4 <__udivdi3+0x560>
 804ccf0:	9080ac2e 	bgeu	r18,r2,804cfa4 <__udivdi3+0x560>
 804ccf4:	843fff84 	addi	r16,r16,-2
 804ccf8:	b004943a 	slli	r2,r22,16
 804ccfc:	1404b03a 	or	r2,r2,r16
 804cd00:	00000206 	br	804cd0c <__udivdi3+0x2c8>
 804cd04:	0007883a 	mov	r3,zero
 804cd08:	0005883a 	mov	r2,zero
 804cd0c:	dfc00b17 	ldw	ra,44(sp)
 804cd10:	df000a17 	ldw	fp,40(sp)
 804cd14:	ddc00917 	ldw	r23,36(sp)
 804cd18:	dd800817 	ldw	r22,32(sp)
 804cd1c:	dd400717 	ldw	r21,28(sp)
 804cd20:	dd000617 	ldw	r20,24(sp)
 804cd24:	dcc00517 	ldw	r19,20(sp)
 804cd28:	dc800417 	ldw	r18,16(sp)
 804cd2c:	dc400317 	ldw	r17,12(sp)
 804cd30:	dc000217 	ldw	r16,8(sp)
 804cd34:	dec00c04 	addi	sp,sp,48
 804cd38:	f800283a 	ret
 804cd3c:	00803fc4 	movi	r2,255
 804cd40:	11c5803a 	cmpltu	r2,r2,r7
 804cd44:	100490fa 	slli	r2,r2,3
 804cd48:	003f9906 	br	804cbb0 <__alt_data_end+0xfffe4b10>
 804cd4c:	00803fc4 	movi	r2,255
 804cd50:	1445803a 	cmpltu	r2,r2,r17
 804cd54:	100490fa 	slli	r2,r2,3
 804cd58:	003fad06 	br	804cc10 <__alt_data_end+0xfffe4b70>
 804cd5c:	00804034 	movhi	r2,256
 804cd60:	10bfffc4 	addi	r2,r2,-1
 804cd64:	11809f36 	bltu	r2,r6,804cfe4 <__udivdi3+0x5a0>
 804cd68:	00800404 	movi	r2,16
 804cd6c:	003f4c06 	br	804caa0 <__alt_data_end+0xfffe4a00>
 804cd70:	3dce983a 	sll	r7,r7,r23
 804cd74:	30b8d83a 	srl	fp,r6,r2
 804cd78:	80a2d83a 	srl	r17,r16,r2
 804cd7c:	35cc983a 	sll	r6,r6,r23
 804cd80:	3f38b03a 	or	fp,r7,fp
 804cd84:	e024d43a 	srli	r18,fp,16
 804cd88:	9884d83a 	srl	r2,r19,r2
 804cd8c:	85e0983a 	sll	r16,r16,r23
 804cd90:	8809883a 	mov	r4,r17
 804cd94:	900b883a 	mov	r5,r18
 804cd98:	d9800015 	stw	r6,0(sp)
 804cd9c:	1420b03a 	or	r16,r2,r16
 804cda0:	804385c0 	call	804385c <__umodsi3>
 804cda4:	900b883a 	mov	r5,r18
 804cda8:	8809883a 	mov	r4,r17
 804cdac:	1029883a 	mov	r20,r2
 804cdb0:	e5bfffcc 	andi	r22,fp,65535
 804cdb4:	80437f80 	call	80437f8 <__udivsi3>
 804cdb8:	100b883a 	mov	r5,r2
 804cdbc:	b009883a 	mov	r4,r22
 804cdc0:	102b883a 	mov	r21,r2
 804cdc4:	80418e00 	call	80418e0 <__mulsi3>
 804cdc8:	a028943a 	slli	r20,r20,16
 804cdcc:	8006d43a 	srli	r3,r16,16
 804cdd0:	1d06b03a 	or	r3,r3,r20
 804cdd4:	1880042e 	bgeu	r3,r2,804cde8 <__udivdi3+0x3a4>
 804cdd8:	1f07883a 	add	r3,r3,fp
 804cddc:	a93fffc4 	addi	r4,r21,-1
 804cde0:	1f00892e 	bgeu	r3,fp,804d008 <__udivdi3+0x5c4>
 804cde4:	202b883a 	mov	r21,r4
 804cde8:	18a3c83a 	sub	r17,r3,r2
 804cdec:	8809883a 	mov	r4,r17
 804cdf0:	900b883a 	mov	r5,r18
 804cdf4:	804385c0 	call	804385c <__umodsi3>
 804cdf8:	1029883a 	mov	r20,r2
 804cdfc:	8809883a 	mov	r4,r17
 804ce00:	900b883a 	mov	r5,r18
 804ce04:	a028943a 	slli	r20,r20,16
 804ce08:	80437f80 	call	80437f8 <__udivsi3>
 804ce0c:	100b883a 	mov	r5,r2
 804ce10:	b009883a 	mov	r4,r22
 804ce14:	843fffcc 	andi	r16,r16,65535
 804ce18:	1023883a 	mov	r17,r2
 804ce1c:	8520b03a 	or	r16,r16,r20
 804ce20:	80418e00 	call	80418e0 <__mulsi3>
 804ce24:	8080042e 	bgeu	r16,r2,804ce38 <__udivdi3+0x3f4>
 804ce28:	8721883a 	add	r16,r16,fp
 804ce2c:	88ffffc4 	addi	r3,r17,-1
 804ce30:	8700712e 	bgeu	r16,fp,804cff8 <__udivdi3+0x5b4>
 804ce34:	1823883a 	mov	r17,r3
 804ce38:	a80e943a 	slli	r7,r21,16
 804ce3c:	d8c00017 	ldw	r3,0(sp)
 804ce40:	80a1c83a 	sub	r16,r16,r2
 804ce44:	3c64b03a 	or	r18,r7,r17
 804ce48:	1d3fffcc 	andi	r20,r3,65535
 804ce4c:	9022d43a 	srli	r17,r18,16
 804ce50:	95bfffcc 	andi	r22,r18,65535
 804ce54:	a00b883a 	mov	r5,r20
 804ce58:	b009883a 	mov	r4,r22
 804ce5c:	182ad43a 	srli	r21,r3,16
 804ce60:	80418e00 	call	80418e0 <__mulsi3>
 804ce64:	a00b883a 	mov	r5,r20
 804ce68:	8809883a 	mov	r4,r17
 804ce6c:	1039883a 	mov	fp,r2
 804ce70:	80418e00 	call	80418e0 <__mulsi3>
 804ce74:	8809883a 	mov	r4,r17
 804ce78:	a80b883a 	mov	r5,r21
 804ce7c:	1029883a 	mov	r20,r2
 804ce80:	80418e00 	call	80418e0 <__mulsi3>
 804ce84:	a80b883a 	mov	r5,r21
 804ce88:	b009883a 	mov	r4,r22
 804ce8c:	1023883a 	mov	r17,r2
 804ce90:	80418e00 	call	80418e0 <__mulsi3>
 804ce94:	e006d43a 	srli	r3,fp,16
 804ce98:	1505883a 	add	r2,r2,r20
 804ce9c:	1887883a 	add	r3,r3,r2
 804cea0:	1d00022e 	bgeu	r3,r20,804ceac <__udivdi3+0x468>
 804cea4:	00800074 	movhi	r2,1
 804cea8:	88a3883a 	add	r17,r17,r2
 804ceac:	1804d43a 	srli	r2,r3,16
 804ceb0:	1463883a 	add	r17,r2,r17
 804ceb4:	84404436 	bltu	r16,r17,804cfc8 <__udivdi3+0x584>
 804ceb8:	84403e26 	beq	r16,r17,804cfb4 <__udivdi3+0x570>
 804cebc:	9005883a 	mov	r2,r18
 804cec0:	0007883a 	mov	r3,zero
 804cec4:	003f9106 	br	804cd0c <__alt_data_end+0xfffe4c6c>
 804cec8:	88e2983a 	sll	r17,r17,r3
 804cecc:	80aed83a 	srl	r23,r16,r2
 804ced0:	80e0983a 	sll	r16,r16,r3
 804ced4:	882ad43a 	srli	r21,r17,16
 804ced8:	9884d83a 	srl	r2,r19,r2
 804cedc:	b809883a 	mov	r4,r23
 804cee0:	a80b883a 	mov	r5,r21
 804cee4:	98e4983a 	sll	r18,r19,r3
 804cee8:	142cb03a 	or	r22,r2,r16
 804ceec:	804385c0 	call	804385c <__umodsi3>
 804cef0:	b809883a 	mov	r4,r23
 804cef4:	a80b883a 	mov	r5,r21
 804cef8:	1027883a 	mov	r19,r2
 804cefc:	8d3fffcc 	andi	r20,r17,65535
 804cf00:	80437f80 	call	80437f8 <__udivsi3>
 804cf04:	a009883a 	mov	r4,r20
 804cf08:	100b883a 	mov	r5,r2
 804cf0c:	102f883a 	mov	r23,r2
 804cf10:	80418e00 	call	80418e0 <__mulsi3>
 804cf14:	9826943a 	slli	r19,r19,16
 804cf18:	b008d43a 	srli	r4,r22,16
 804cf1c:	24c8b03a 	or	r4,r4,r19
 804cf20:	2080062e 	bgeu	r4,r2,804cf3c <__udivdi3+0x4f8>
 804cf24:	2449883a 	add	r4,r4,r17
 804cf28:	b8ffffc4 	addi	r3,r23,-1
 804cf2c:	24403c36 	bltu	r4,r17,804d020 <__udivdi3+0x5dc>
 804cf30:	20803b2e 	bgeu	r4,r2,804d020 <__udivdi3+0x5dc>
 804cf34:	bdffff84 	addi	r23,r23,-2
 804cf38:	2449883a 	add	r4,r4,r17
 804cf3c:	20a1c83a 	sub	r16,r4,r2
 804cf40:	a80b883a 	mov	r5,r21
 804cf44:	8009883a 	mov	r4,r16
 804cf48:	804385c0 	call	804385c <__umodsi3>
 804cf4c:	a80b883a 	mov	r5,r21
 804cf50:	8009883a 	mov	r4,r16
 804cf54:	1027883a 	mov	r19,r2
 804cf58:	80437f80 	call	80437f8 <__udivsi3>
 804cf5c:	a009883a 	mov	r4,r20
 804cf60:	100b883a 	mov	r5,r2
 804cf64:	9826943a 	slli	r19,r19,16
 804cf68:	1039883a 	mov	fp,r2
 804cf6c:	80418e00 	call	80418e0 <__mulsi3>
 804cf70:	b13fffcc 	andi	r4,r22,65535
 804cf74:	24c8b03a 	or	r4,r4,r19
 804cf78:	2080062e 	bgeu	r4,r2,804cf94 <__udivdi3+0x550>
 804cf7c:	2449883a 	add	r4,r4,r17
 804cf80:	e0ffffc4 	addi	r3,fp,-1
 804cf84:	24402436 	bltu	r4,r17,804d018 <__udivdi3+0x5d4>
 804cf88:	2080232e 	bgeu	r4,r2,804d018 <__udivdi3+0x5d4>
 804cf8c:	e73fff84 	addi	fp,fp,-2
 804cf90:	2449883a 	add	r4,r4,r17
 804cf94:	b82e943a 	slli	r23,r23,16
 804cf98:	20a1c83a 	sub	r16,r4,r2
 804cf9c:	bf06b03a 	or	r3,r23,fp
 804cfa0:	003f2806 	br	804cc44 <__alt_data_end+0xfffe4ba4>
 804cfa4:	2021883a 	mov	r16,r4
 804cfa8:	003f5306 	br	804ccf8 <__alt_data_end+0xfffe4c58>
 804cfac:	1821883a 	mov	r16,r3
 804cfb0:	003ef406 	br	804cb84 <__alt_data_end+0xfffe4ae4>
 804cfb4:	1806943a 	slli	r3,r3,16
 804cfb8:	9de6983a 	sll	r19,r19,r23
 804cfbc:	e73fffcc 	andi	fp,fp,65535
 804cfc0:	1f07883a 	add	r3,r3,fp
 804cfc4:	98ffbd2e 	bgeu	r19,r3,804cebc <__alt_data_end+0xfffe4e1c>
 804cfc8:	90bfffc4 	addi	r2,r18,-1
 804cfcc:	0007883a 	mov	r3,zero
 804cfd0:	003f4e06 	br	804cd0c <__alt_data_end+0xfffe4c6c>
 804cfd4:	00800604 	movi	r2,24
 804cfd8:	003ef506 	br	804cbb0 <__alt_data_end+0xfffe4b10>
 804cfdc:	00800604 	movi	r2,24
 804cfe0:	003f0b06 	br	804cc10 <__alt_data_end+0xfffe4b70>
 804cfe4:	00800604 	movi	r2,24
 804cfe8:	003ead06 	br	804caa0 <__alt_data_end+0xfffe4a00>
 804cfec:	0007883a 	mov	r3,zero
 804cff0:	00800044 	movi	r2,1
 804cff4:	003f4506 	br	804cd0c <__alt_data_end+0xfffe4c6c>
 804cff8:	80bf8e2e 	bgeu	r16,r2,804ce34 <__alt_data_end+0xfffe4d94>
 804cffc:	8c7fff84 	addi	r17,r17,-2
 804d000:	8721883a 	add	r16,r16,fp
 804d004:	003f8c06 	br	804ce38 <__alt_data_end+0xfffe4d98>
 804d008:	18bf762e 	bgeu	r3,r2,804cde4 <__alt_data_end+0xfffe4d44>
 804d00c:	ad7fff84 	addi	r21,r21,-2
 804d010:	1f07883a 	add	r3,r3,fp
 804d014:	003f7406 	br	804cde8 <__alt_data_end+0xfffe4d48>
 804d018:	1839883a 	mov	fp,r3
 804d01c:	003fdd06 	br	804cf94 <__alt_data_end+0xfffe4ef4>
 804d020:	182f883a 	mov	r23,r3
 804d024:	003fc506 	br	804cf3c <__alt_data_end+0xfffe4e9c>
 804d028:	b5bfff84 	addi	r22,r22,-2
 804d02c:	3c4f883a 	add	r7,r7,r17
 804d030:	003f1a06 	br	804cc9c <__alt_data_end+0xfffe4bfc>
 804d034:	b5bfff84 	addi	r22,r22,-2
 804d038:	1c47883a 	add	r3,r3,r17
 804d03c:	003ebc06 	br	804cb30 <__alt_data_end+0xfffe4a90>

0804d040 <__umoddi3>:
 804d040:	defff304 	addi	sp,sp,-52
 804d044:	df000b15 	stw	fp,44(sp)
 804d048:	dc400415 	stw	r17,16(sp)
 804d04c:	dc000315 	stw	r16,12(sp)
 804d050:	dfc00c15 	stw	ra,48(sp)
 804d054:	ddc00a15 	stw	r23,40(sp)
 804d058:	dd800915 	stw	r22,36(sp)
 804d05c:	dd400815 	stw	r21,32(sp)
 804d060:	dd000715 	stw	r20,28(sp)
 804d064:	dcc00615 	stw	r19,24(sp)
 804d068:	dc800515 	stw	r18,20(sp)
 804d06c:	2021883a 	mov	r16,r4
 804d070:	2823883a 	mov	r17,r5
 804d074:	2839883a 	mov	fp,r5
 804d078:	3800401e 	bne	r7,zero,804d17c <__umoddi3+0x13c>
 804d07c:	3027883a 	mov	r19,r6
 804d080:	2029883a 	mov	r20,r4
 804d084:	2980552e 	bgeu	r5,r6,804d1dc <__umoddi3+0x19c>
 804d088:	00bfffd4 	movui	r2,65535
 804d08c:	1180a236 	bltu	r2,r6,804d318 <__umoddi3+0x2d8>
 804d090:	01003fc4 	movi	r4,255
 804d094:	2189803a 	cmpltu	r4,r4,r6
 804d098:	200890fa 	slli	r4,r4,3
 804d09c:	3104d83a 	srl	r2,r6,r4
 804d0a0:	00c20174 	movhi	r3,2053
 804d0a4:	18cbe484 	addi	r3,r3,12178
 804d0a8:	1885883a 	add	r2,r3,r2
 804d0ac:	10c00003 	ldbu	r3,0(r2)
 804d0b0:	00800804 	movi	r2,32
 804d0b4:	1909883a 	add	r4,r3,r4
 804d0b8:	1125c83a 	sub	r18,r2,r4
 804d0bc:	90000526 	beq	r18,zero,804d0d4 <__umoddi3+0x94>
 804d0c0:	8ca2983a 	sll	r17,r17,r18
 804d0c4:	8108d83a 	srl	r4,r16,r4
 804d0c8:	34a6983a 	sll	r19,r6,r18
 804d0cc:	84a8983a 	sll	r20,r16,r18
 804d0d0:	2478b03a 	or	fp,r4,r17
 804d0d4:	982cd43a 	srli	r22,r19,16
 804d0d8:	e009883a 	mov	r4,fp
 804d0dc:	9dffffcc 	andi	r23,r19,65535
 804d0e0:	b00b883a 	mov	r5,r22
 804d0e4:	804385c0 	call	804385c <__umodsi3>
 804d0e8:	b00b883a 	mov	r5,r22
 804d0ec:	e009883a 	mov	r4,fp
 804d0f0:	102b883a 	mov	r21,r2
 804d0f4:	80437f80 	call	80437f8 <__udivsi3>
 804d0f8:	100b883a 	mov	r5,r2
 804d0fc:	b809883a 	mov	r4,r23
 804d100:	80418e00 	call	80418e0 <__mulsi3>
 804d104:	a82a943a 	slli	r21,r21,16
 804d108:	a006d43a 	srli	r3,r20,16
 804d10c:	1d46b03a 	or	r3,r3,r21
 804d110:	1880032e 	bgeu	r3,r2,804d120 <__umoddi3+0xe0>
 804d114:	1cc7883a 	add	r3,r3,r19
 804d118:	1cc00136 	bltu	r3,r19,804d120 <__umoddi3+0xe0>
 804d11c:	18813136 	bltu	r3,r2,804d5e4 <__umoddi3+0x5a4>
 804d120:	18a1c83a 	sub	r16,r3,r2
 804d124:	b00b883a 	mov	r5,r22
 804d128:	8009883a 	mov	r4,r16
 804d12c:	804385c0 	call	804385c <__umodsi3>
 804d130:	b00b883a 	mov	r5,r22
 804d134:	8009883a 	mov	r4,r16
 804d138:	1023883a 	mov	r17,r2
 804d13c:	80437f80 	call	80437f8 <__udivsi3>
 804d140:	100b883a 	mov	r5,r2
 804d144:	b809883a 	mov	r4,r23
 804d148:	8822943a 	slli	r17,r17,16
 804d14c:	80418e00 	call	80418e0 <__mulsi3>
 804d150:	a0ffffcc 	andi	r3,r20,65535
 804d154:	1c46b03a 	or	r3,r3,r17
 804d158:	1880042e 	bgeu	r3,r2,804d16c <__umoddi3+0x12c>
 804d15c:	1cc7883a 	add	r3,r3,r19
 804d160:	1cc00236 	bltu	r3,r19,804d16c <__umoddi3+0x12c>
 804d164:	1880012e 	bgeu	r3,r2,804d16c <__umoddi3+0x12c>
 804d168:	1cc7883a 	add	r3,r3,r19
 804d16c:	1885c83a 	sub	r2,r3,r2
 804d170:	1484d83a 	srl	r2,r2,r18
 804d174:	0007883a 	mov	r3,zero
 804d178:	00005306 	br	804d2c8 <__umoddi3+0x288>
 804d17c:	29c05036 	bltu	r5,r7,804d2c0 <__umoddi3+0x280>
 804d180:	00bfffd4 	movui	r2,65535
 804d184:	11c05c2e 	bgeu	r2,r7,804d2f8 <__umoddi3+0x2b8>
 804d188:	00804034 	movhi	r2,256
 804d18c:	10bfffc4 	addi	r2,r2,-1
 804d190:	11c10636 	bltu	r2,r7,804d5ac <__umoddi3+0x56c>
 804d194:	01000404 	movi	r4,16
 804d198:	3904d83a 	srl	r2,r7,r4
 804d19c:	00c20174 	movhi	r3,2053
 804d1a0:	18cbe484 	addi	r3,r3,12178
 804d1a4:	1885883a 	add	r2,r3,r2
 804d1a8:	14c00003 	ldbu	r19,0(r2)
 804d1ac:	00c00804 	movi	r3,32
 804d1b0:	9927883a 	add	r19,r19,r4
 804d1b4:	1ce9c83a 	sub	r20,r3,r19
 804d1b8:	a0005c1e 	bne	r20,zero,804d32c <__umoddi3+0x2ec>
 804d1bc:	3c400136 	bltu	r7,r17,804d1c4 <__umoddi3+0x184>
 804d1c0:	81810a36 	bltu	r16,r6,804d5ec <__umoddi3+0x5ac>
 804d1c4:	8185c83a 	sub	r2,r16,r6
 804d1c8:	89e3c83a 	sub	r17,r17,r7
 804d1cc:	8089803a 	cmpltu	r4,r16,r2
 804d1d0:	8939c83a 	sub	fp,r17,r4
 804d1d4:	e007883a 	mov	r3,fp
 804d1d8:	00003b06 	br	804d2c8 <__umoddi3+0x288>
 804d1dc:	3000041e 	bne	r6,zero,804d1f0 <__umoddi3+0x1b0>
 804d1e0:	000b883a 	mov	r5,zero
 804d1e4:	01000044 	movi	r4,1
 804d1e8:	80437f80 	call	80437f8 <__udivsi3>
 804d1ec:	1027883a 	mov	r19,r2
 804d1f0:	00bfffd4 	movui	r2,65535
 804d1f4:	14c0442e 	bgeu	r2,r19,804d308 <__umoddi3+0x2c8>
 804d1f8:	00804034 	movhi	r2,256
 804d1fc:	10bfffc4 	addi	r2,r2,-1
 804d200:	14c0ec36 	bltu	r2,r19,804d5b4 <__umoddi3+0x574>
 804d204:	00800404 	movi	r2,16
 804d208:	9886d83a 	srl	r3,r19,r2
 804d20c:	01020174 	movhi	r4,2053
 804d210:	210be484 	addi	r4,r4,12178
 804d214:	20c7883a 	add	r3,r4,r3
 804d218:	18c00003 	ldbu	r3,0(r3)
 804d21c:	1887883a 	add	r3,r3,r2
 804d220:	00800804 	movi	r2,32
 804d224:	10e5c83a 	sub	r18,r2,r3
 804d228:	9000ab1e 	bne	r18,zero,804d4d8 <__umoddi3+0x498>
 804d22c:	982cd43a 	srli	r22,r19,16
 804d230:	8ce3c83a 	sub	r17,r17,r19
 804d234:	9dffffcc 	andi	r23,r19,65535
 804d238:	b00b883a 	mov	r5,r22
 804d23c:	8809883a 	mov	r4,r17
 804d240:	804385c0 	call	804385c <__umodsi3>
 804d244:	b00b883a 	mov	r5,r22
 804d248:	8809883a 	mov	r4,r17
 804d24c:	102b883a 	mov	r21,r2
 804d250:	80437f80 	call	80437f8 <__udivsi3>
 804d254:	b80b883a 	mov	r5,r23
 804d258:	1009883a 	mov	r4,r2
 804d25c:	80418e00 	call	80418e0 <__mulsi3>
 804d260:	a82a943a 	slli	r21,r21,16
 804d264:	a006d43a 	srli	r3,r20,16
 804d268:	1d46b03a 	or	r3,r3,r21
 804d26c:	1880042e 	bgeu	r3,r2,804d280 <__umoddi3+0x240>
 804d270:	1cc7883a 	add	r3,r3,r19
 804d274:	1cc00236 	bltu	r3,r19,804d280 <__umoddi3+0x240>
 804d278:	1880012e 	bgeu	r3,r2,804d280 <__umoddi3+0x240>
 804d27c:	1cc7883a 	add	r3,r3,r19
 804d280:	18a1c83a 	sub	r16,r3,r2
 804d284:	b00b883a 	mov	r5,r22
 804d288:	8009883a 	mov	r4,r16
 804d28c:	804385c0 	call	804385c <__umodsi3>
 804d290:	1023883a 	mov	r17,r2
 804d294:	b00b883a 	mov	r5,r22
 804d298:	8009883a 	mov	r4,r16
 804d29c:	80437f80 	call	80437f8 <__udivsi3>
 804d2a0:	8822943a 	slli	r17,r17,16
 804d2a4:	b80b883a 	mov	r5,r23
 804d2a8:	1009883a 	mov	r4,r2
 804d2ac:	80418e00 	call	80418e0 <__mulsi3>
 804d2b0:	a53fffcc 	andi	r20,r20,65535
 804d2b4:	a446b03a 	or	r3,r20,r17
 804d2b8:	18bfac2e 	bgeu	r3,r2,804d16c <__alt_data_end+0xfffe50cc>
 804d2bc:	003fa706 	br	804d15c <__alt_data_end+0xfffe50bc>
 804d2c0:	2005883a 	mov	r2,r4
 804d2c4:	2807883a 	mov	r3,r5
 804d2c8:	dfc00c17 	ldw	ra,48(sp)
 804d2cc:	df000b17 	ldw	fp,44(sp)
 804d2d0:	ddc00a17 	ldw	r23,40(sp)
 804d2d4:	dd800917 	ldw	r22,36(sp)
 804d2d8:	dd400817 	ldw	r21,32(sp)
 804d2dc:	dd000717 	ldw	r20,28(sp)
 804d2e0:	dcc00617 	ldw	r19,24(sp)
 804d2e4:	dc800517 	ldw	r18,20(sp)
 804d2e8:	dc400417 	ldw	r17,16(sp)
 804d2ec:	dc000317 	ldw	r16,12(sp)
 804d2f0:	dec00d04 	addi	sp,sp,52
 804d2f4:	f800283a 	ret
 804d2f8:	04c03fc4 	movi	r19,255
 804d2fc:	99c9803a 	cmpltu	r4,r19,r7
 804d300:	200890fa 	slli	r4,r4,3
 804d304:	003fa406 	br	804d198 <__alt_data_end+0xfffe50f8>
 804d308:	00803fc4 	movi	r2,255
 804d30c:	14c5803a 	cmpltu	r2,r2,r19
 804d310:	100490fa 	slli	r2,r2,3
 804d314:	003fbc06 	br	804d208 <__alt_data_end+0xfffe5168>
 804d318:	00804034 	movhi	r2,256
 804d31c:	10bfffc4 	addi	r2,r2,-1
 804d320:	1180a636 	bltu	r2,r6,804d5bc <__umoddi3+0x57c>
 804d324:	01000404 	movi	r4,16
 804d328:	003f5c06 	br	804d09c <__alt_data_end+0xfffe4ffc>
 804d32c:	3d0e983a 	sll	r7,r7,r20
 804d330:	34ead83a 	srl	r21,r6,r19
 804d334:	8cc6d83a 	srl	r3,r17,r19
 804d338:	8d10983a 	sll	r8,r17,r20
 804d33c:	3d6ab03a 	or	r21,r7,r21
 804d340:	a82cd43a 	srli	r22,r21,16
 804d344:	84e2d83a 	srl	r17,r16,r19
 804d348:	1809883a 	mov	r4,r3
 804d34c:	b00b883a 	mov	r5,r22
 804d350:	8a22b03a 	or	r17,r17,r8
 804d354:	3524983a 	sll	r18,r6,r20
 804d358:	dc400015 	stw	r17,0(sp)
 804d35c:	d8c00115 	stw	r3,4(sp)
 804d360:	804385c0 	call	804385c <__umodsi3>
 804d364:	d8c00117 	ldw	r3,4(sp)
 804d368:	b00b883a 	mov	r5,r22
 804d36c:	1039883a 	mov	fp,r2
 804d370:	1809883a 	mov	r4,r3
 804d374:	80437f80 	call	80437f8 <__udivsi3>
 804d378:	adffffcc 	andi	r23,r21,65535
 804d37c:	100b883a 	mov	r5,r2
 804d380:	b809883a 	mov	r4,r23
 804d384:	1023883a 	mov	r17,r2
 804d388:	80418e00 	call	80418e0 <__mulsi3>
 804d38c:	d9400017 	ldw	r5,0(sp)
 804d390:	e008943a 	slli	r4,fp,16
 804d394:	8520983a 	sll	r16,r16,r20
 804d398:	2806d43a 	srli	r3,r5,16
 804d39c:	1906b03a 	or	r3,r3,r4
 804d3a0:	1880042e 	bgeu	r3,r2,804d3b4 <__umoddi3+0x374>
 804d3a4:	1d47883a 	add	r3,r3,r21
 804d3a8:	893fffc4 	addi	r4,r17,-1
 804d3ac:	1d40892e 	bgeu	r3,r21,804d5d4 <__umoddi3+0x594>
 804d3b0:	2023883a 	mov	r17,r4
 804d3b4:	18b9c83a 	sub	fp,r3,r2
 804d3b8:	b00b883a 	mov	r5,r22
 804d3bc:	e009883a 	mov	r4,fp
 804d3c0:	804385c0 	call	804385c <__umodsi3>
 804d3c4:	b00b883a 	mov	r5,r22
 804d3c8:	e009883a 	mov	r4,fp
 804d3cc:	d8800215 	stw	r2,8(sp)
 804d3d0:	80437f80 	call	80437f8 <__udivsi3>
 804d3d4:	100b883a 	mov	r5,r2
 804d3d8:	b809883a 	mov	r4,r23
 804d3dc:	102d883a 	mov	r22,r2
 804d3e0:	80418e00 	call	80418e0 <__mulsi3>
 804d3e4:	d9800217 	ldw	r6,8(sp)
 804d3e8:	d8c00017 	ldw	r3,0(sp)
 804d3ec:	300c943a 	slli	r6,r6,16
 804d3f0:	1a3fffcc 	andi	r8,r3,65535
 804d3f4:	4190b03a 	or	r8,r8,r6
 804d3f8:	4080042e 	bgeu	r8,r2,804d40c <__umoddi3+0x3cc>
 804d3fc:	4551883a 	add	r8,r8,r21
 804d400:	b0ffffc4 	addi	r3,r22,-1
 804d404:	45406f2e 	bgeu	r8,r21,804d5c4 <__umoddi3+0x584>
 804d408:	182d883a 	mov	r22,r3
 804d40c:	880e943a 	slli	r7,r17,16
 804d410:	9006d43a 	srli	r3,r18,16
 804d414:	91bfffcc 	andi	r6,r18,65535
 804d418:	3dacb03a 	or	r22,r7,r22
 804d41c:	b02ed43a 	srli	r23,r22,16
 804d420:	b5bfffcc 	andi	r22,r22,65535
 804d424:	300b883a 	mov	r5,r6
 804d428:	b009883a 	mov	r4,r22
 804d42c:	40a3c83a 	sub	r17,r8,r2
 804d430:	d8c00115 	stw	r3,4(sp)
 804d434:	d9800215 	stw	r6,8(sp)
 804d438:	80418e00 	call	80418e0 <__mulsi3>
 804d43c:	d9800217 	ldw	r6,8(sp)
 804d440:	b809883a 	mov	r4,r23
 804d444:	1039883a 	mov	fp,r2
 804d448:	300b883a 	mov	r5,r6
 804d44c:	80418e00 	call	80418e0 <__mulsi3>
 804d450:	d8c00117 	ldw	r3,4(sp)
 804d454:	b809883a 	mov	r4,r23
 804d458:	d8800215 	stw	r2,8(sp)
 804d45c:	180b883a 	mov	r5,r3
 804d460:	80418e00 	call	80418e0 <__mulsi3>
 804d464:	d8c00117 	ldw	r3,4(sp)
 804d468:	b009883a 	mov	r4,r22
 804d46c:	102f883a 	mov	r23,r2
 804d470:	180b883a 	mov	r5,r3
 804d474:	80418e00 	call	80418e0 <__mulsi3>
 804d478:	d9800217 	ldw	r6,8(sp)
 804d47c:	e006d43a 	srli	r3,fp,16
 804d480:	1185883a 	add	r2,r2,r6
 804d484:	1885883a 	add	r2,r3,r2
 804d488:	1180022e 	bgeu	r2,r6,804d494 <__umoddi3+0x454>
 804d48c:	00c00074 	movhi	r3,1
 804d490:	b8ef883a 	add	r23,r23,r3
 804d494:	1006d43a 	srli	r3,r2,16
 804d498:	1004943a 	slli	r2,r2,16
 804d49c:	e73fffcc 	andi	fp,fp,65535
 804d4a0:	1dc7883a 	add	r3,r3,r23
 804d4a4:	1739883a 	add	fp,r2,fp
 804d4a8:	88c03a36 	bltu	r17,r3,804d594 <__umoddi3+0x554>
 804d4ac:	88c05126 	beq	r17,r3,804d5f4 <__umoddi3+0x5b4>
 804d4b0:	88c9c83a 	sub	r4,r17,r3
 804d4b4:	e00f883a 	mov	r7,fp
 804d4b8:	81cfc83a 	sub	r7,r16,r7
 804d4bc:	81c7803a 	cmpltu	r3,r16,r7
 804d4c0:	20c7c83a 	sub	r3,r4,r3
 804d4c4:	1cc4983a 	sll	r2,r3,r19
 804d4c8:	3d0ed83a 	srl	r7,r7,r20
 804d4cc:	1d06d83a 	srl	r3,r3,r20
 804d4d0:	11c4b03a 	or	r2,r2,r7
 804d4d4:	003f7c06 	br	804d2c8 <__alt_data_end+0xfffe5228>
 804d4d8:	9ca6983a 	sll	r19,r19,r18
 804d4dc:	88f8d83a 	srl	fp,r17,r3
 804d4e0:	80c4d83a 	srl	r2,r16,r3
 804d4e4:	982cd43a 	srli	r22,r19,16
 804d4e8:	8ca2983a 	sll	r17,r17,r18
 804d4ec:	e009883a 	mov	r4,fp
 804d4f0:	b00b883a 	mov	r5,r22
 804d4f4:	146ab03a 	or	r21,r2,r17
 804d4f8:	804385c0 	call	804385c <__umodsi3>
 804d4fc:	b00b883a 	mov	r5,r22
 804d500:	e009883a 	mov	r4,fp
 804d504:	1029883a 	mov	r20,r2
 804d508:	9dffffcc 	andi	r23,r19,65535
 804d50c:	80437f80 	call	80437f8 <__udivsi3>
 804d510:	b809883a 	mov	r4,r23
 804d514:	100b883a 	mov	r5,r2
 804d518:	80418e00 	call	80418e0 <__mulsi3>
 804d51c:	a008943a 	slli	r4,r20,16
 804d520:	a806d43a 	srli	r3,r21,16
 804d524:	84a8983a 	sll	r20,r16,r18
 804d528:	1906b03a 	or	r3,r3,r4
 804d52c:	1880042e 	bgeu	r3,r2,804d540 <__umoddi3+0x500>
 804d530:	1cc7883a 	add	r3,r3,r19
 804d534:	1cc00236 	bltu	r3,r19,804d540 <__umoddi3+0x500>
 804d538:	1880012e 	bgeu	r3,r2,804d540 <__umoddi3+0x500>
 804d53c:	1cc7883a 	add	r3,r3,r19
 804d540:	18a3c83a 	sub	r17,r3,r2
 804d544:	b00b883a 	mov	r5,r22
 804d548:	8809883a 	mov	r4,r17
 804d54c:	804385c0 	call	804385c <__umodsi3>
 804d550:	b00b883a 	mov	r5,r22
 804d554:	8809883a 	mov	r4,r17
 804d558:	1021883a 	mov	r16,r2
 804d55c:	80437f80 	call	80437f8 <__udivsi3>
 804d560:	100b883a 	mov	r5,r2
 804d564:	b809883a 	mov	r4,r23
 804d568:	8020943a 	slli	r16,r16,16
 804d56c:	80418e00 	call	80418e0 <__mulsi3>
 804d570:	a8ffffcc 	andi	r3,r21,65535
 804d574:	1c06b03a 	or	r3,r3,r16
 804d578:	1880042e 	bgeu	r3,r2,804d58c <__umoddi3+0x54c>
 804d57c:	1cc7883a 	add	r3,r3,r19
 804d580:	1cc00236 	bltu	r3,r19,804d58c <__umoddi3+0x54c>
 804d584:	1880012e 	bgeu	r3,r2,804d58c <__umoddi3+0x54c>
 804d588:	1cc7883a 	add	r3,r3,r19
 804d58c:	18a3c83a 	sub	r17,r3,r2
 804d590:	003f2906 	br	804d238 <__alt_data_end+0xfffe5198>
 804d594:	e48fc83a 	sub	r7,fp,r18
 804d598:	1d49c83a 	sub	r4,r3,r21
 804d59c:	e1f9803a 	cmpltu	fp,fp,r7
 804d5a0:	2739c83a 	sub	fp,r4,fp
 804d5a4:	8f09c83a 	sub	r4,r17,fp
 804d5a8:	003fc306 	br	804d4b8 <__alt_data_end+0xfffe5418>
 804d5ac:	01000604 	movi	r4,24
 804d5b0:	003ef906 	br	804d198 <__alt_data_end+0xfffe50f8>
 804d5b4:	00800604 	movi	r2,24
 804d5b8:	003f1306 	br	804d208 <__alt_data_end+0xfffe5168>
 804d5bc:	01000604 	movi	r4,24
 804d5c0:	003eb606 	br	804d09c <__alt_data_end+0xfffe4ffc>
 804d5c4:	40bf902e 	bgeu	r8,r2,804d408 <__alt_data_end+0xfffe5368>
 804d5c8:	b5bfff84 	addi	r22,r22,-2
 804d5cc:	4551883a 	add	r8,r8,r21
 804d5d0:	003f8e06 	br	804d40c <__alt_data_end+0xfffe536c>
 804d5d4:	18bf762e 	bgeu	r3,r2,804d3b0 <__alt_data_end+0xfffe5310>
 804d5d8:	8c7fff84 	addi	r17,r17,-2
 804d5dc:	1d47883a 	add	r3,r3,r21
 804d5e0:	003f7406 	br	804d3b4 <__alt_data_end+0xfffe5314>
 804d5e4:	1cc7883a 	add	r3,r3,r19
 804d5e8:	003ecd06 	br	804d120 <__alt_data_end+0xfffe5080>
 804d5ec:	8005883a 	mov	r2,r16
 804d5f0:	003ef806 	br	804d1d4 <__alt_data_end+0xfffe5134>
 804d5f4:	873fe736 	bltu	r16,fp,804d594 <__alt_data_end+0xfffe54f4>
 804d5f8:	e00f883a 	mov	r7,fp
 804d5fc:	0009883a 	mov	r4,zero
 804d600:	003fad06 	br	804d4b8 <__alt_data_end+0xfffe5418>

0804d604 <__adddf3>:
 804d604:	02c00434 	movhi	r11,16
 804d608:	5affffc4 	addi	r11,r11,-1
 804d60c:	2806d7fa 	srli	r3,r5,31
 804d610:	2ad4703a 	and	r10,r5,r11
 804d614:	3ad2703a 	and	r9,r7,r11
 804d618:	3804d53a 	srli	r2,r7,20
 804d61c:	3018d77a 	srli	r12,r6,29
 804d620:	280ad53a 	srli	r5,r5,20
 804d624:	501490fa 	slli	r10,r10,3
 804d628:	2010d77a 	srli	r8,r4,29
 804d62c:	481290fa 	slli	r9,r9,3
 804d630:	380ed7fa 	srli	r7,r7,31
 804d634:	defffb04 	addi	sp,sp,-20
 804d638:	dc800215 	stw	r18,8(sp)
 804d63c:	dc400115 	stw	r17,4(sp)
 804d640:	dc000015 	stw	r16,0(sp)
 804d644:	dfc00415 	stw	ra,16(sp)
 804d648:	dcc00315 	stw	r19,12(sp)
 804d64c:	1c803fcc 	andi	r18,r3,255
 804d650:	2c01ffcc 	andi	r16,r5,2047
 804d654:	5210b03a 	or	r8,r10,r8
 804d658:	202290fa 	slli	r17,r4,3
 804d65c:	1081ffcc 	andi	r2,r2,2047
 804d660:	4b12b03a 	or	r9,r9,r12
 804d664:	300c90fa 	slli	r6,r6,3
 804d668:	91c07526 	beq	r18,r7,804d840 <__adddf3+0x23c>
 804d66c:	8087c83a 	sub	r3,r16,r2
 804d670:	00c0ab0e 	bge	zero,r3,804d920 <__adddf3+0x31c>
 804d674:	10002a1e 	bne	r2,zero,804d720 <__adddf3+0x11c>
 804d678:	4984b03a 	or	r2,r9,r6
 804d67c:	1000961e 	bne	r2,zero,804d8d8 <__adddf3+0x2d4>
 804d680:	888001cc 	andi	r2,r17,7
 804d684:	10000726 	beq	r2,zero,804d6a4 <__adddf3+0xa0>
 804d688:	888003cc 	andi	r2,r17,15
 804d68c:	00c00104 	movi	r3,4
 804d690:	10c00426 	beq	r2,r3,804d6a4 <__adddf3+0xa0>
 804d694:	88c7883a 	add	r3,r17,r3
 804d698:	1c63803a 	cmpltu	r17,r3,r17
 804d69c:	4451883a 	add	r8,r8,r17
 804d6a0:	1823883a 	mov	r17,r3
 804d6a4:	4080202c 	andhi	r2,r8,128
 804d6a8:	10005926 	beq	r2,zero,804d810 <__adddf3+0x20c>
 804d6ac:	84000044 	addi	r16,r16,1
 804d6b0:	0081ffc4 	movi	r2,2047
 804d6b4:	8080ba26 	beq	r16,r2,804d9a0 <__adddf3+0x39c>
 804d6b8:	00bfe034 	movhi	r2,65408
 804d6bc:	10bfffc4 	addi	r2,r2,-1
 804d6c0:	4090703a 	and	r8,r8,r2
 804d6c4:	4004977a 	slli	r2,r8,29
 804d6c8:	4010927a 	slli	r8,r8,9
 804d6cc:	8822d0fa 	srli	r17,r17,3
 804d6d0:	8401ffcc 	andi	r16,r16,2047
 804d6d4:	4010d33a 	srli	r8,r8,12
 804d6d8:	9007883a 	mov	r3,r18
 804d6dc:	1444b03a 	or	r2,r2,r17
 804d6e0:	8401ffcc 	andi	r16,r16,2047
 804d6e4:	8020953a 	slli	r16,r16,20
 804d6e8:	18c03fcc 	andi	r3,r3,255
 804d6ec:	01000434 	movhi	r4,16
 804d6f0:	213fffc4 	addi	r4,r4,-1
 804d6f4:	180697fa 	slli	r3,r3,31
 804d6f8:	4110703a 	and	r8,r8,r4
 804d6fc:	4410b03a 	or	r8,r8,r16
 804d700:	40c6b03a 	or	r3,r8,r3
 804d704:	dfc00417 	ldw	ra,16(sp)
 804d708:	dcc00317 	ldw	r19,12(sp)
 804d70c:	dc800217 	ldw	r18,8(sp)
 804d710:	dc400117 	ldw	r17,4(sp)
 804d714:	dc000017 	ldw	r16,0(sp)
 804d718:	dec00504 	addi	sp,sp,20
 804d71c:	f800283a 	ret
 804d720:	0081ffc4 	movi	r2,2047
 804d724:	80bfd626 	beq	r16,r2,804d680 <__alt_data_end+0xfffe55e0>
 804d728:	4a402034 	orhi	r9,r9,128
 804d72c:	00800e04 	movi	r2,56
 804d730:	10c09f16 	blt	r2,r3,804d9b0 <__adddf3+0x3ac>
 804d734:	008007c4 	movi	r2,31
 804d738:	10c0c216 	blt	r2,r3,804da44 <__adddf3+0x440>
 804d73c:	00800804 	movi	r2,32
 804d740:	10c5c83a 	sub	r2,r2,r3
 804d744:	488a983a 	sll	r5,r9,r2
 804d748:	30c8d83a 	srl	r4,r6,r3
 804d74c:	3084983a 	sll	r2,r6,r2
 804d750:	48c6d83a 	srl	r3,r9,r3
 804d754:	290cb03a 	or	r6,r5,r4
 804d758:	1004c03a 	cmpne	r2,r2,zero
 804d75c:	308cb03a 	or	r6,r6,r2
 804d760:	898dc83a 	sub	r6,r17,r6
 804d764:	89a3803a 	cmpltu	r17,r17,r6
 804d768:	40d1c83a 	sub	r8,r8,r3
 804d76c:	4451c83a 	sub	r8,r8,r17
 804d770:	3023883a 	mov	r17,r6
 804d774:	4080202c 	andhi	r2,r8,128
 804d778:	10002326 	beq	r2,zero,804d808 <__adddf3+0x204>
 804d77c:	04c02034 	movhi	r19,128
 804d780:	9cffffc4 	addi	r19,r19,-1
 804d784:	44e6703a 	and	r19,r8,r19
 804d788:	98007626 	beq	r19,zero,804d964 <__adddf3+0x360>
 804d78c:	9809883a 	mov	r4,r19
 804d790:	804369c0 	call	804369c <__clzsi2>
 804d794:	10fffe04 	addi	r3,r2,-8
 804d798:	010007c4 	movi	r4,31
 804d79c:	20c07716 	blt	r4,r3,804d97c <__adddf3+0x378>
 804d7a0:	00800804 	movi	r2,32
 804d7a4:	10c5c83a 	sub	r2,r2,r3
 804d7a8:	8884d83a 	srl	r2,r17,r2
 804d7ac:	98d0983a 	sll	r8,r19,r3
 804d7b0:	88e2983a 	sll	r17,r17,r3
 804d7b4:	1204b03a 	or	r2,r2,r8
 804d7b8:	1c007416 	blt	r3,r16,804d98c <__adddf3+0x388>
 804d7bc:	1c21c83a 	sub	r16,r3,r16
 804d7c0:	82000044 	addi	r8,r16,1
 804d7c4:	00c007c4 	movi	r3,31
 804d7c8:	1a009116 	blt	r3,r8,804da10 <__adddf3+0x40c>
 804d7cc:	00c00804 	movi	r3,32
 804d7d0:	1a07c83a 	sub	r3,r3,r8
 804d7d4:	8a08d83a 	srl	r4,r17,r8
 804d7d8:	88e2983a 	sll	r17,r17,r3
 804d7dc:	10c6983a 	sll	r3,r2,r3
 804d7e0:	1210d83a 	srl	r8,r2,r8
 804d7e4:	8804c03a 	cmpne	r2,r17,zero
 804d7e8:	1906b03a 	or	r3,r3,r4
 804d7ec:	18a2b03a 	or	r17,r3,r2
 804d7f0:	0021883a 	mov	r16,zero
 804d7f4:	003fa206 	br	804d680 <__alt_data_end+0xfffe55e0>
 804d7f8:	1890b03a 	or	r8,r3,r2
 804d7fc:	40017d26 	beq	r8,zero,804ddf4 <__adddf3+0x7f0>
 804d800:	1011883a 	mov	r8,r2
 804d804:	1823883a 	mov	r17,r3
 804d808:	888001cc 	andi	r2,r17,7
 804d80c:	103f9e1e 	bne	r2,zero,804d688 <__alt_data_end+0xfffe55e8>
 804d810:	4004977a 	slli	r2,r8,29
 804d814:	8822d0fa 	srli	r17,r17,3
 804d818:	4010d0fa 	srli	r8,r8,3
 804d81c:	9007883a 	mov	r3,r18
 804d820:	1444b03a 	or	r2,r2,r17
 804d824:	0101ffc4 	movi	r4,2047
 804d828:	81002426 	beq	r16,r4,804d8bc <__adddf3+0x2b8>
 804d82c:	8120703a 	and	r16,r16,r4
 804d830:	01000434 	movhi	r4,16
 804d834:	213fffc4 	addi	r4,r4,-1
 804d838:	4110703a 	and	r8,r8,r4
 804d83c:	003fa806 	br	804d6e0 <__alt_data_end+0xfffe5640>
 804d840:	8089c83a 	sub	r4,r16,r2
 804d844:	01005e0e 	bge	zero,r4,804d9c0 <__adddf3+0x3bc>
 804d848:	10002b26 	beq	r2,zero,804d8f8 <__adddf3+0x2f4>
 804d84c:	0081ffc4 	movi	r2,2047
 804d850:	80bf8b26 	beq	r16,r2,804d680 <__alt_data_end+0xfffe55e0>
 804d854:	4a402034 	orhi	r9,r9,128
 804d858:	00800e04 	movi	r2,56
 804d85c:	1100a40e 	bge	r2,r4,804daf0 <__adddf3+0x4ec>
 804d860:	498cb03a 	or	r6,r9,r6
 804d864:	300ac03a 	cmpne	r5,r6,zero
 804d868:	0013883a 	mov	r9,zero
 804d86c:	2c4b883a 	add	r5,r5,r17
 804d870:	2c63803a 	cmpltu	r17,r5,r17
 804d874:	4a11883a 	add	r8,r9,r8
 804d878:	8a11883a 	add	r8,r17,r8
 804d87c:	2823883a 	mov	r17,r5
 804d880:	4080202c 	andhi	r2,r8,128
 804d884:	103fe026 	beq	r2,zero,804d808 <__alt_data_end+0xfffe5768>
 804d888:	84000044 	addi	r16,r16,1
 804d88c:	0081ffc4 	movi	r2,2047
 804d890:	8080d226 	beq	r16,r2,804dbdc <__adddf3+0x5d8>
 804d894:	00bfe034 	movhi	r2,65408
 804d898:	10bfffc4 	addi	r2,r2,-1
 804d89c:	4090703a 	and	r8,r8,r2
 804d8a0:	880ad07a 	srli	r5,r17,1
 804d8a4:	400897fa 	slli	r4,r8,31
 804d8a8:	88c0004c 	andi	r3,r17,1
 804d8ac:	28e2b03a 	or	r17,r5,r3
 804d8b0:	4010d07a 	srli	r8,r8,1
 804d8b4:	2462b03a 	or	r17,r4,r17
 804d8b8:	003f7106 	br	804d680 <__alt_data_end+0xfffe55e0>
 804d8bc:	4088b03a 	or	r4,r8,r2
 804d8c0:	20014526 	beq	r4,zero,804ddd8 <__adddf3+0x7d4>
 804d8c4:	01000434 	movhi	r4,16
 804d8c8:	42000234 	orhi	r8,r8,8
 804d8cc:	213fffc4 	addi	r4,r4,-1
 804d8d0:	4110703a 	and	r8,r8,r4
 804d8d4:	003f8206 	br	804d6e0 <__alt_data_end+0xfffe5640>
 804d8d8:	18ffffc4 	addi	r3,r3,-1
 804d8dc:	1800491e 	bne	r3,zero,804da04 <__adddf3+0x400>
 804d8e0:	898bc83a 	sub	r5,r17,r6
 804d8e4:	8963803a 	cmpltu	r17,r17,r5
 804d8e8:	4251c83a 	sub	r8,r8,r9
 804d8ec:	4451c83a 	sub	r8,r8,r17
 804d8f0:	2823883a 	mov	r17,r5
 804d8f4:	003f9f06 	br	804d774 <__alt_data_end+0xfffe56d4>
 804d8f8:	4984b03a 	or	r2,r9,r6
 804d8fc:	103f6026 	beq	r2,zero,804d680 <__alt_data_end+0xfffe55e0>
 804d900:	213fffc4 	addi	r4,r4,-1
 804d904:	2000931e 	bne	r4,zero,804db54 <__adddf3+0x550>
 804d908:	898d883a 	add	r6,r17,r6
 804d90c:	3463803a 	cmpltu	r17,r6,r17
 804d910:	4251883a 	add	r8,r8,r9
 804d914:	8a11883a 	add	r8,r17,r8
 804d918:	3023883a 	mov	r17,r6
 804d91c:	003fd806 	br	804d880 <__alt_data_end+0xfffe57e0>
 804d920:	1800541e 	bne	r3,zero,804da74 <__adddf3+0x470>
 804d924:	80800044 	addi	r2,r16,1
 804d928:	1081ffcc 	andi	r2,r2,2047
 804d92c:	00c00044 	movi	r3,1
 804d930:	1880a00e 	bge	r3,r2,804dbb4 <__adddf3+0x5b0>
 804d934:	8989c83a 	sub	r4,r17,r6
 804d938:	8905803a 	cmpltu	r2,r17,r4
 804d93c:	4267c83a 	sub	r19,r8,r9
 804d940:	98a7c83a 	sub	r19,r19,r2
 804d944:	9880202c 	andhi	r2,r19,128
 804d948:	10006326 	beq	r2,zero,804dad8 <__adddf3+0x4d4>
 804d94c:	3463c83a 	sub	r17,r6,r17
 804d950:	4a07c83a 	sub	r3,r9,r8
 804d954:	344d803a 	cmpltu	r6,r6,r17
 804d958:	19a7c83a 	sub	r19,r3,r6
 804d95c:	3825883a 	mov	r18,r7
 804d960:	983f8a1e 	bne	r19,zero,804d78c <__alt_data_end+0xfffe56ec>
 804d964:	8809883a 	mov	r4,r17
 804d968:	804369c0 	call	804369c <__clzsi2>
 804d96c:	10800804 	addi	r2,r2,32
 804d970:	10fffe04 	addi	r3,r2,-8
 804d974:	010007c4 	movi	r4,31
 804d978:	20ff890e 	bge	r4,r3,804d7a0 <__alt_data_end+0xfffe5700>
 804d97c:	10bff604 	addi	r2,r2,-40
 804d980:	8884983a 	sll	r2,r17,r2
 804d984:	0023883a 	mov	r17,zero
 804d988:	1c3f8c0e 	bge	r3,r16,804d7bc <__alt_data_end+0xfffe571c>
 804d98c:	023fe034 	movhi	r8,65408
 804d990:	423fffc4 	addi	r8,r8,-1
 804d994:	80e1c83a 	sub	r16,r16,r3
 804d998:	1210703a 	and	r8,r2,r8
 804d99c:	003f3806 	br	804d680 <__alt_data_end+0xfffe55e0>
 804d9a0:	9007883a 	mov	r3,r18
 804d9a4:	0011883a 	mov	r8,zero
 804d9a8:	0005883a 	mov	r2,zero
 804d9ac:	003f4c06 	br	804d6e0 <__alt_data_end+0xfffe5640>
 804d9b0:	498cb03a 	or	r6,r9,r6
 804d9b4:	300cc03a 	cmpne	r6,r6,zero
 804d9b8:	0007883a 	mov	r3,zero
 804d9bc:	003f6806 	br	804d760 <__alt_data_end+0xfffe56c0>
 804d9c0:	20009c1e 	bne	r4,zero,804dc34 <__adddf3+0x630>
 804d9c4:	80800044 	addi	r2,r16,1
 804d9c8:	1141ffcc 	andi	r5,r2,2047
 804d9cc:	01000044 	movi	r4,1
 804d9d0:	2140670e 	bge	r4,r5,804db70 <__adddf3+0x56c>
 804d9d4:	0101ffc4 	movi	r4,2047
 804d9d8:	11007f26 	beq	r2,r4,804dbd8 <__adddf3+0x5d4>
 804d9dc:	898d883a 	add	r6,r17,r6
 804d9e0:	4247883a 	add	r3,r8,r9
 804d9e4:	3451803a 	cmpltu	r8,r6,r17
 804d9e8:	40d1883a 	add	r8,r8,r3
 804d9ec:	402297fa 	slli	r17,r8,31
 804d9f0:	300cd07a 	srli	r6,r6,1
 804d9f4:	4010d07a 	srli	r8,r8,1
 804d9f8:	1021883a 	mov	r16,r2
 804d9fc:	89a2b03a 	or	r17,r17,r6
 804da00:	003f1f06 	br	804d680 <__alt_data_end+0xfffe55e0>
 804da04:	0081ffc4 	movi	r2,2047
 804da08:	80bf481e 	bne	r16,r2,804d72c <__alt_data_end+0xfffe568c>
 804da0c:	003f1c06 	br	804d680 <__alt_data_end+0xfffe55e0>
 804da10:	843ff844 	addi	r16,r16,-31
 804da14:	01000804 	movi	r4,32
 804da18:	1406d83a 	srl	r3,r2,r16
 804da1c:	41005026 	beq	r8,r4,804db60 <__adddf3+0x55c>
 804da20:	01001004 	movi	r4,64
 804da24:	2211c83a 	sub	r8,r4,r8
 804da28:	1204983a 	sll	r2,r2,r8
 804da2c:	88a2b03a 	or	r17,r17,r2
 804da30:	8822c03a 	cmpne	r17,r17,zero
 804da34:	1c62b03a 	or	r17,r3,r17
 804da38:	0011883a 	mov	r8,zero
 804da3c:	0021883a 	mov	r16,zero
 804da40:	003f7106 	br	804d808 <__alt_data_end+0xfffe5768>
 804da44:	193ff804 	addi	r4,r3,-32
 804da48:	00800804 	movi	r2,32
 804da4c:	4908d83a 	srl	r4,r9,r4
 804da50:	18804526 	beq	r3,r2,804db68 <__adddf3+0x564>
 804da54:	00801004 	movi	r2,64
 804da58:	10c5c83a 	sub	r2,r2,r3
 804da5c:	4886983a 	sll	r3,r9,r2
 804da60:	198cb03a 	or	r6,r3,r6
 804da64:	300cc03a 	cmpne	r6,r6,zero
 804da68:	218cb03a 	or	r6,r4,r6
 804da6c:	0007883a 	mov	r3,zero
 804da70:	003f3b06 	br	804d760 <__alt_data_end+0xfffe56c0>
 804da74:	80002a26 	beq	r16,zero,804db20 <__adddf3+0x51c>
 804da78:	0101ffc4 	movi	r4,2047
 804da7c:	11006826 	beq	r2,r4,804dc20 <__adddf3+0x61c>
 804da80:	00c7c83a 	sub	r3,zero,r3
 804da84:	42002034 	orhi	r8,r8,128
 804da88:	01000e04 	movi	r4,56
 804da8c:	20c07c16 	blt	r4,r3,804dc80 <__adddf3+0x67c>
 804da90:	010007c4 	movi	r4,31
 804da94:	20c0da16 	blt	r4,r3,804de00 <__adddf3+0x7fc>
 804da98:	01000804 	movi	r4,32
 804da9c:	20c9c83a 	sub	r4,r4,r3
 804daa0:	4114983a 	sll	r10,r8,r4
 804daa4:	88cad83a 	srl	r5,r17,r3
 804daa8:	8908983a 	sll	r4,r17,r4
 804daac:	40c6d83a 	srl	r3,r8,r3
 804dab0:	5162b03a 	or	r17,r10,r5
 804dab4:	2008c03a 	cmpne	r4,r4,zero
 804dab8:	8922b03a 	or	r17,r17,r4
 804dabc:	3463c83a 	sub	r17,r6,r17
 804dac0:	48c7c83a 	sub	r3,r9,r3
 804dac4:	344d803a 	cmpltu	r6,r6,r17
 804dac8:	1991c83a 	sub	r8,r3,r6
 804dacc:	1021883a 	mov	r16,r2
 804dad0:	3825883a 	mov	r18,r7
 804dad4:	003f2706 	br	804d774 <__alt_data_end+0xfffe56d4>
 804dad8:	24d0b03a 	or	r8,r4,r19
 804dadc:	40001b1e 	bne	r8,zero,804db4c <__adddf3+0x548>
 804dae0:	0005883a 	mov	r2,zero
 804dae4:	0007883a 	mov	r3,zero
 804dae8:	0021883a 	mov	r16,zero
 804daec:	003f4d06 	br	804d824 <__alt_data_end+0xfffe5784>
 804daf0:	008007c4 	movi	r2,31
 804daf4:	11003c16 	blt	r2,r4,804dbe8 <__adddf3+0x5e4>
 804daf8:	00800804 	movi	r2,32
 804dafc:	1105c83a 	sub	r2,r2,r4
 804db00:	488e983a 	sll	r7,r9,r2
 804db04:	310ad83a 	srl	r5,r6,r4
 804db08:	3084983a 	sll	r2,r6,r2
 804db0c:	4912d83a 	srl	r9,r9,r4
 804db10:	394ab03a 	or	r5,r7,r5
 804db14:	1004c03a 	cmpne	r2,r2,zero
 804db18:	288ab03a 	or	r5,r5,r2
 804db1c:	003f5306 	br	804d86c <__alt_data_end+0xfffe57cc>
 804db20:	4448b03a 	or	r4,r8,r17
 804db24:	20003e26 	beq	r4,zero,804dc20 <__adddf3+0x61c>
 804db28:	00c6303a 	nor	r3,zero,r3
 804db2c:	18003a1e 	bne	r3,zero,804dc18 <__adddf3+0x614>
 804db30:	3463c83a 	sub	r17,r6,r17
 804db34:	4a07c83a 	sub	r3,r9,r8
 804db38:	344d803a 	cmpltu	r6,r6,r17
 804db3c:	1991c83a 	sub	r8,r3,r6
 804db40:	1021883a 	mov	r16,r2
 804db44:	3825883a 	mov	r18,r7
 804db48:	003f0a06 	br	804d774 <__alt_data_end+0xfffe56d4>
 804db4c:	2023883a 	mov	r17,r4
 804db50:	003f0d06 	br	804d788 <__alt_data_end+0xfffe56e8>
 804db54:	0081ffc4 	movi	r2,2047
 804db58:	80bf3f1e 	bne	r16,r2,804d858 <__alt_data_end+0xfffe57b8>
 804db5c:	003ec806 	br	804d680 <__alt_data_end+0xfffe55e0>
 804db60:	0005883a 	mov	r2,zero
 804db64:	003fb106 	br	804da2c <__alt_data_end+0xfffe598c>
 804db68:	0007883a 	mov	r3,zero
 804db6c:	003fbc06 	br	804da60 <__alt_data_end+0xfffe59c0>
 804db70:	4444b03a 	or	r2,r8,r17
 804db74:	8000871e 	bne	r16,zero,804dd94 <__adddf3+0x790>
 804db78:	1000ba26 	beq	r2,zero,804de64 <__adddf3+0x860>
 804db7c:	4984b03a 	or	r2,r9,r6
 804db80:	103ebf26 	beq	r2,zero,804d680 <__alt_data_end+0xfffe55e0>
 804db84:	8985883a 	add	r2,r17,r6
 804db88:	4247883a 	add	r3,r8,r9
 804db8c:	1451803a 	cmpltu	r8,r2,r17
 804db90:	40d1883a 	add	r8,r8,r3
 804db94:	40c0202c 	andhi	r3,r8,128
 804db98:	1023883a 	mov	r17,r2
 804db9c:	183f1a26 	beq	r3,zero,804d808 <__alt_data_end+0xfffe5768>
 804dba0:	00bfe034 	movhi	r2,65408
 804dba4:	10bfffc4 	addi	r2,r2,-1
 804dba8:	2021883a 	mov	r16,r4
 804dbac:	4090703a 	and	r8,r8,r2
 804dbb0:	003eb306 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dbb4:	4444b03a 	or	r2,r8,r17
 804dbb8:	8000291e 	bne	r16,zero,804dc60 <__adddf3+0x65c>
 804dbbc:	10004b1e 	bne	r2,zero,804dcec <__adddf3+0x6e8>
 804dbc0:	4990b03a 	or	r8,r9,r6
 804dbc4:	40008b26 	beq	r8,zero,804ddf4 <__adddf3+0x7f0>
 804dbc8:	4811883a 	mov	r8,r9
 804dbcc:	3023883a 	mov	r17,r6
 804dbd0:	3825883a 	mov	r18,r7
 804dbd4:	003eaa06 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dbd8:	1021883a 	mov	r16,r2
 804dbdc:	0011883a 	mov	r8,zero
 804dbe0:	0005883a 	mov	r2,zero
 804dbe4:	003f0f06 	br	804d824 <__alt_data_end+0xfffe5784>
 804dbe8:	217ff804 	addi	r5,r4,-32
 804dbec:	00800804 	movi	r2,32
 804dbf0:	494ad83a 	srl	r5,r9,r5
 804dbf4:	20807d26 	beq	r4,r2,804ddec <__adddf3+0x7e8>
 804dbf8:	00801004 	movi	r2,64
 804dbfc:	1109c83a 	sub	r4,r2,r4
 804dc00:	4912983a 	sll	r9,r9,r4
 804dc04:	498cb03a 	or	r6,r9,r6
 804dc08:	300cc03a 	cmpne	r6,r6,zero
 804dc0c:	298ab03a 	or	r5,r5,r6
 804dc10:	0013883a 	mov	r9,zero
 804dc14:	003f1506 	br	804d86c <__alt_data_end+0xfffe57cc>
 804dc18:	0101ffc4 	movi	r4,2047
 804dc1c:	113f9a1e 	bne	r2,r4,804da88 <__alt_data_end+0xfffe59e8>
 804dc20:	4811883a 	mov	r8,r9
 804dc24:	3023883a 	mov	r17,r6
 804dc28:	1021883a 	mov	r16,r2
 804dc2c:	3825883a 	mov	r18,r7
 804dc30:	003e9306 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dc34:	8000161e 	bne	r16,zero,804dc90 <__adddf3+0x68c>
 804dc38:	444ab03a 	or	r5,r8,r17
 804dc3c:	28005126 	beq	r5,zero,804dd84 <__adddf3+0x780>
 804dc40:	0108303a 	nor	r4,zero,r4
 804dc44:	20004d1e 	bne	r4,zero,804dd7c <__adddf3+0x778>
 804dc48:	89a3883a 	add	r17,r17,r6
 804dc4c:	4253883a 	add	r9,r8,r9
 804dc50:	898d803a 	cmpltu	r6,r17,r6
 804dc54:	3251883a 	add	r8,r6,r9
 804dc58:	1021883a 	mov	r16,r2
 804dc5c:	003f0806 	br	804d880 <__alt_data_end+0xfffe57e0>
 804dc60:	1000301e 	bne	r2,zero,804dd24 <__adddf3+0x720>
 804dc64:	4984b03a 	or	r2,r9,r6
 804dc68:	10007126 	beq	r2,zero,804de30 <__adddf3+0x82c>
 804dc6c:	4811883a 	mov	r8,r9
 804dc70:	3023883a 	mov	r17,r6
 804dc74:	3825883a 	mov	r18,r7
 804dc78:	0401ffc4 	movi	r16,2047
 804dc7c:	003e8006 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dc80:	4462b03a 	or	r17,r8,r17
 804dc84:	8822c03a 	cmpne	r17,r17,zero
 804dc88:	0007883a 	mov	r3,zero
 804dc8c:	003f8b06 	br	804dabc <__alt_data_end+0xfffe5a1c>
 804dc90:	0141ffc4 	movi	r5,2047
 804dc94:	11403b26 	beq	r2,r5,804dd84 <__adddf3+0x780>
 804dc98:	0109c83a 	sub	r4,zero,r4
 804dc9c:	42002034 	orhi	r8,r8,128
 804dca0:	01400e04 	movi	r5,56
 804dca4:	29006716 	blt	r5,r4,804de44 <__adddf3+0x840>
 804dca8:	014007c4 	movi	r5,31
 804dcac:	29007016 	blt	r5,r4,804de70 <__adddf3+0x86c>
 804dcb0:	01400804 	movi	r5,32
 804dcb4:	290bc83a 	sub	r5,r5,r4
 804dcb8:	4154983a 	sll	r10,r8,r5
 804dcbc:	890ed83a 	srl	r7,r17,r4
 804dcc0:	894a983a 	sll	r5,r17,r5
 804dcc4:	4108d83a 	srl	r4,r8,r4
 804dcc8:	51e2b03a 	or	r17,r10,r7
 804dccc:	280ac03a 	cmpne	r5,r5,zero
 804dcd0:	8962b03a 	or	r17,r17,r5
 804dcd4:	89a3883a 	add	r17,r17,r6
 804dcd8:	2253883a 	add	r9,r4,r9
 804dcdc:	898d803a 	cmpltu	r6,r17,r6
 804dce0:	3251883a 	add	r8,r6,r9
 804dce4:	1021883a 	mov	r16,r2
 804dce8:	003ee506 	br	804d880 <__alt_data_end+0xfffe57e0>
 804dcec:	4984b03a 	or	r2,r9,r6
 804dcf0:	103e6326 	beq	r2,zero,804d680 <__alt_data_end+0xfffe55e0>
 804dcf4:	8987c83a 	sub	r3,r17,r6
 804dcf8:	88c9803a 	cmpltu	r4,r17,r3
 804dcfc:	4245c83a 	sub	r2,r8,r9
 804dd00:	1105c83a 	sub	r2,r2,r4
 804dd04:	1100202c 	andhi	r4,r2,128
 804dd08:	203ebb26 	beq	r4,zero,804d7f8 <__alt_data_end+0xfffe5758>
 804dd0c:	3463c83a 	sub	r17,r6,r17
 804dd10:	4a07c83a 	sub	r3,r9,r8
 804dd14:	344d803a 	cmpltu	r6,r6,r17
 804dd18:	1991c83a 	sub	r8,r3,r6
 804dd1c:	3825883a 	mov	r18,r7
 804dd20:	003e5706 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dd24:	4984b03a 	or	r2,r9,r6
 804dd28:	10002e26 	beq	r2,zero,804dde4 <__adddf3+0x7e0>
 804dd2c:	4004d0fa 	srli	r2,r8,3
 804dd30:	8822d0fa 	srli	r17,r17,3
 804dd34:	4010977a 	slli	r8,r8,29
 804dd38:	10c0022c 	andhi	r3,r2,8
 804dd3c:	4462b03a 	or	r17,r8,r17
 804dd40:	18000826 	beq	r3,zero,804dd64 <__adddf3+0x760>
 804dd44:	4808d0fa 	srli	r4,r9,3
 804dd48:	20c0022c 	andhi	r3,r4,8
 804dd4c:	1800051e 	bne	r3,zero,804dd64 <__adddf3+0x760>
 804dd50:	300cd0fa 	srli	r6,r6,3
 804dd54:	4806977a 	slli	r3,r9,29
 804dd58:	2005883a 	mov	r2,r4
 804dd5c:	3825883a 	mov	r18,r7
 804dd60:	19a2b03a 	or	r17,r3,r6
 804dd64:	8810d77a 	srli	r8,r17,29
 804dd68:	100490fa 	slli	r2,r2,3
 804dd6c:	882290fa 	slli	r17,r17,3
 804dd70:	0401ffc4 	movi	r16,2047
 804dd74:	4090b03a 	or	r8,r8,r2
 804dd78:	003e4106 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dd7c:	0141ffc4 	movi	r5,2047
 804dd80:	117fc71e 	bne	r2,r5,804dca0 <__alt_data_end+0xfffe5c00>
 804dd84:	4811883a 	mov	r8,r9
 804dd88:	3023883a 	mov	r17,r6
 804dd8c:	1021883a 	mov	r16,r2
 804dd90:	003e3b06 	br	804d680 <__alt_data_end+0xfffe55e0>
 804dd94:	10002f26 	beq	r2,zero,804de54 <__adddf3+0x850>
 804dd98:	4984b03a 	or	r2,r9,r6
 804dd9c:	10001126 	beq	r2,zero,804dde4 <__adddf3+0x7e0>
 804dda0:	4004d0fa 	srli	r2,r8,3
 804dda4:	8822d0fa 	srli	r17,r17,3
 804dda8:	4010977a 	slli	r8,r8,29
 804ddac:	10c0022c 	andhi	r3,r2,8
 804ddb0:	4462b03a 	or	r17,r8,r17
 804ddb4:	183feb26 	beq	r3,zero,804dd64 <__alt_data_end+0xfffe5cc4>
 804ddb8:	4808d0fa 	srli	r4,r9,3
 804ddbc:	20c0022c 	andhi	r3,r4,8
 804ddc0:	183fe81e 	bne	r3,zero,804dd64 <__alt_data_end+0xfffe5cc4>
 804ddc4:	300cd0fa 	srli	r6,r6,3
 804ddc8:	4806977a 	slli	r3,r9,29
 804ddcc:	2005883a 	mov	r2,r4
 804ddd0:	19a2b03a 	or	r17,r3,r6
 804ddd4:	003fe306 	br	804dd64 <__alt_data_end+0xfffe5cc4>
 804ddd8:	0011883a 	mov	r8,zero
 804dddc:	0005883a 	mov	r2,zero
 804dde0:	003e3f06 	br	804d6e0 <__alt_data_end+0xfffe5640>
 804dde4:	0401ffc4 	movi	r16,2047
 804dde8:	003e2506 	br	804d680 <__alt_data_end+0xfffe55e0>
 804ddec:	0013883a 	mov	r9,zero
 804ddf0:	003f8406 	br	804dc04 <__alt_data_end+0xfffe5b64>
 804ddf4:	0005883a 	mov	r2,zero
 804ddf8:	0007883a 	mov	r3,zero
 804ddfc:	003e8906 	br	804d824 <__alt_data_end+0xfffe5784>
 804de00:	197ff804 	addi	r5,r3,-32
 804de04:	01000804 	movi	r4,32
 804de08:	414ad83a 	srl	r5,r8,r5
 804de0c:	19002426 	beq	r3,r4,804dea0 <__adddf3+0x89c>
 804de10:	01001004 	movi	r4,64
 804de14:	20c7c83a 	sub	r3,r4,r3
 804de18:	40c6983a 	sll	r3,r8,r3
 804de1c:	1c46b03a 	or	r3,r3,r17
 804de20:	1806c03a 	cmpne	r3,r3,zero
 804de24:	28e2b03a 	or	r17,r5,r3
 804de28:	0007883a 	mov	r3,zero
 804de2c:	003f2306 	br	804dabc <__alt_data_end+0xfffe5a1c>
 804de30:	0007883a 	mov	r3,zero
 804de34:	5811883a 	mov	r8,r11
 804de38:	00bfffc4 	movi	r2,-1
 804de3c:	0401ffc4 	movi	r16,2047
 804de40:	003e7806 	br	804d824 <__alt_data_end+0xfffe5784>
 804de44:	4462b03a 	or	r17,r8,r17
 804de48:	8822c03a 	cmpne	r17,r17,zero
 804de4c:	0009883a 	mov	r4,zero
 804de50:	003fa006 	br	804dcd4 <__alt_data_end+0xfffe5c34>
 804de54:	4811883a 	mov	r8,r9
 804de58:	3023883a 	mov	r17,r6
 804de5c:	0401ffc4 	movi	r16,2047
 804de60:	003e0706 	br	804d680 <__alt_data_end+0xfffe55e0>
 804de64:	4811883a 	mov	r8,r9
 804de68:	3023883a 	mov	r17,r6
 804de6c:	003e0406 	br	804d680 <__alt_data_end+0xfffe55e0>
 804de70:	21fff804 	addi	r7,r4,-32
 804de74:	01400804 	movi	r5,32
 804de78:	41ced83a 	srl	r7,r8,r7
 804de7c:	21400a26 	beq	r4,r5,804dea8 <__adddf3+0x8a4>
 804de80:	01401004 	movi	r5,64
 804de84:	2909c83a 	sub	r4,r5,r4
 804de88:	4108983a 	sll	r4,r8,r4
 804de8c:	2448b03a 	or	r4,r4,r17
 804de90:	2008c03a 	cmpne	r4,r4,zero
 804de94:	3922b03a 	or	r17,r7,r4
 804de98:	0009883a 	mov	r4,zero
 804de9c:	003f8d06 	br	804dcd4 <__alt_data_end+0xfffe5c34>
 804dea0:	0007883a 	mov	r3,zero
 804dea4:	003fdd06 	br	804de1c <__alt_data_end+0xfffe5d7c>
 804dea8:	0009883a 	mov	r4,zero
 804deac:	003ff706 	br	804de8c <__alt_data_end+0xfffe5dec>

0804deb0 <__eqdf2>:
 804deb0:	2804d53a 	srli	r2,r5,20
 804deb4:	3806d53a 	srli	r3,r7,20
 804deb8:	02000434 	movhi	r8,16
 804debc:	423fffc4 	addi	r8,r8,-1
 804dec0:	1081ffcc 	andi	r2,r2,2047
 804dec4:	0281ffc4 	movi	r10,2047
 804dec8:	2a12703a 	and	r9,r5,r8
 804decc:	18c1ffcc 	andi	r3,r3,2047
 804ded0:	3a10703a 	and	r8,r7,r8
 804ded4:	280ad7fa 	srli	r5,r5,31
 804ded8:	380ed7fa 	srli	r7,r7,31
 804dedc:	12801026 	beq	r2,r10,804df20 <__eqdf2+0x70>
 804dee0:	0281ffc4 	movi	r10,2047
 804dee4:	1a800a26 	beq	r3,r10,804df10 <__eqdf2+0x60>
 804dee8:	10c00226 	beq	r2,r3,804def4 <__eqdf2+0x44>
 804deec:	00800044 	movi	r2,1
 804def0:	f800283a 	ret
 804def4:	4a3ffd1e 	bne	r9,r8,804deec <__alt_data_end+0xfffe5e4c>
 804def8:	21bffc1e 	bne	r4,r6,804deec <__alt_data_end+0xfffe5e4c>
 804defc:	29c00c26 	beq	r5,r7,804df30 <__eqdf2+0x80>
 804df00:	103ffa1e 	bne	r2,zero,804deec <__alt_data_end+0xfffe5e4c>
 804df04:	2244b03a 	or	r2,r4,r9
 804df08:	1004c03a 	cmpne	r2,r2,zero
 804df0c:	f800283a 	ret
 804df10:	3214b03a 	or	r10,r6,r8
 804df14:	503ff426 	beq	r10,zero,804dee8 <__alt_data_end+0xfffe5e48>
 804df18:	00800044 	movi	r2,1
 804df1c:	f800283a 	ret
 804df20:	2254b03a 	or	r10,r4,r9
 804df24:	503fee26 	beq	r10,zero,804dee0 <__alt_data_end+0xfffe5e40>
 804df28:	00800044 	movi	r2,1
 804df2c:	f800283a 	ret
 804df30:	0005883a 	mov	r2,zero
 804df34:	f800283a 	ret

0804df38 <__subdf3>:
 804df38:	02000434 	movhi	r8,16
 804df3c:	423fffc4 	addi	r8,r8,-1
 804df40:	defffb04 	addi	sp,sp,-20
 804df44:	2a14703a 	and	r10,r5,r8
 804df48:	3812d53a 	srli	r9,r7,20
 804df4c:	3a10703a 	and	r8,r7,r8
 804df50:	2006d77a 	srli	r3,r4,29
 804df54:	3004d77a 	srli	r2,r6,29
 804df58:	dc000015 	stw	r16,0(sp)
 804df5c:	501490fa 	slli	r10,r10,3
 804df60:	2820d53a 	srli	r16,r5,20
 804df64:	401090fa 	slli	r8,r8,3
 804df68:	dc800215 	stw	r18,8(sp)
 804df6c:	dc400115 	stw	r17,4(sp)
 804df70:	dfc00415 	stw	ra,16(sp)
 804df74:	202290fa 	slli	r17,r4,3
 804df78:	dcc00315 	stw	r19,12(sp)
 804df7c:	4a41ffcc 	andi	r9,r9,2047
 804df80:	0101ffc4 	movi	r4,2047
 804df84:	2824d7fa 	srli	r18,r5,31
 804df88:	8401ffcc 	andi	r16,r16,2047
 804df8c:	50c6b03a 	or	r3,r10,r3
 804df90:	380ed7fa 	srli	r7,r7,31
 804df94:	408ab03a 	or	r5,r8,r2
 804df98:	300c90fa 	slli	r6,r6,3
 804df9c:	49009626 	beq	r9,r4,804e1f8 <__subdf3+0x2c0>
 804dfa0:	39c0005c 	xori	r7,r7,1
 804dfa4:	8245c83a 	sub	r2,r16,r9
 804dfa8:	3c807426 	beq	r7,r18,804e17c <__subdf3+0x244>
 804dfac:	0080af0e 	bge	zero,r2,804e26c <__subdf3+0x334>
 804dfb0:	48002a1e 	bne	r9,zero,804e05c <__subdf3+0x124>
 804dfb4:	2988b03a 	or	r4,r5,r6
 804dfb8:	20009a1e 	bne	r4,zero,804e224 <__subdf3+0x2ec>
 804dfbc:	888001cc 	andi	r2,r17,7
 804dfc0:	10000726 	beq	r2,zero,804dfe0 <__subdf3+0xa8>
 804dfc4:	888003cc 	andi	r2,r17,15
 804dfc8:	01000104 	movi	r4,4
 804dfcc:	11000426 	beq	r2,r4,804dfe0 <__subdf3+0xa8>
 804dfd0:	890b883a 	add	r5,r17,r4
 804dfd4:	2c63803a 	cmpltu	r17,r5,r17
 804dfd8:	1c47883a 	add	r3,r3,r17
 804dfdc:	2823883a 	mov	r17,r5
 804dfe0:	1880202c 	andhi	r2,r3,128
 804dfe4:	10005926 	beq	r2,zero,804e14c <__subdf3+0x214>
 804dfe8:	84000044 	addi	r16,r16,1
 804dfec:	0081ffc4 	movi	r2,2047
 804dff0:	8080be26 	beq	r16,r2,804e2ec <__subdf3+0x3b4>
 804dff4:	017fe034 	movhi	r5,65408
 804dff8:	297fffc4 	addi	r5,r5,-1
 804dffc:	1946703a 	and	r3,r3,r5
 804e000:	1804977a 	slli	r2,r3,29
 804e004:	1806927a 	slli	r3,r3,9
 804e008:	8822d0fa 	srli	r17,r17,3
 804e00c:	8401ffcc 	andi	r16,r16,2047
 804e010:	180ad33a 	srli	r5,r3,12
 804e014:	9100004c 	andi	r4,r18,1
 804e018:	1444b03a 	or	r2,r2,r17
 804e01c:	80c1ffcc 	andi	r3,r16,2047
 804e020:	1820953a 	slli	r16,r3,20
 804e024:	20c03fcc 	andi	r3,r4,255
 804e028:	180897fa 	slli	r4,r3,31
 804e02c:	00c00434 	movhi	r3,16
 804e030:	18ffffc4 	addi	r3,r3,-1
 804e034:	28c6703a 	and	r3,r5,r3
 804e038:	1c06b03a 	or	r3,r3,r16
 804e03c:	1906b03a 	or	r3,r3,r4
 804e040:	dfc00417 	ldw	ra,16(sp)
 804e044:	dcc00317 	ldw	r19,12(sp)
 804e048:	dc800217 	ldw	r18,8(sp)
 804e04c:	dc400117 	ldw	r17,4(sp)
 804e050:	dc000017 	ldw	r16,0(sp)
 804e054:	dec00504 	addi	sp,sp,20
 804e058:	f800283a 	ret
 804e05c:	0101ffc4 	movi	r4,2047
 804e060:	813fd626 	beq	r16,r4,804dfbc <__alt_data_end+0xfffe5f1c>
 804e064:	29402034 	orhi	r5,r5,128
 804e068:	01000e04 	movi	r4,56
 804e06c:	2080a316 	blt	r4,r2,804e2fc <__subdf3+0x3c4>
 804e070:	010007c4 	movi	r4,31
 804e074:	2080c616 	blt	r4,r2,804e390 <__subdf3+0x458>
 804e078:	01000804 	movi	r4,32
 804e07c:	2089c83a 	sub	r4,r4,r2
 804e080:	2910983a 	sll	r8,r5,r4
 804e084:	308ed83a 	srl	r7,r6,r2
 804e088:	3108983a 	sll	r4,r6,r4
 804e08c:	2884d83a 	srl	r2,r5,r2
 804e090:	41ccb03a 	or	r6,r8,r7
 804e094:	2008c03a 	cmpne	r4,r4,zero
 804e098:	310cb03a 	or	r6,r6,r4
 804e09c:	898dc83a 	sub	r6,r17,r6
 804e0a0:	89a3803a 	cmpltu	r17,r17,r6
 804e0a4:	1887c83a 	sub	r3,r3,r2
 804e0a8:	1c47c83a 	sub	r3,r3,r17
 804e0ac:	3023883a 	mov	r17,r6
 804e0b0:	1880202c 	andhi	r2,r3,128
 804e0b4:	10002326 	beq	r2,zero,804e144 <__subdf3+0x20c>
 804e0b8:	04c02034 	movhi	r19,128
 804e0bc:	9cffffc4 	addi	r19,r19,-1
 804e0c0:	1ce6703a 	and	r19,r3,r19
 804e0c4:	98007a26 	beq	r19,zero,804e2b0 <__subdf3+0x378>
 804e0c8:	9809883a 	mov	r4,r19
 804e0cc:	804369c0 	call	804369c <__clzsi2>
 804e0d0:	113ffe04 	addi	r4,r2,-8
 804e0d4:	00c007c4 	movi	r3,31
 804e0d8:	19007b16 	blt	r3,r4,804e2c8 <__subdf3+0x390>
 804e0dc:	00800804 	movi	r2,32
 804e0e0:	1105c83a 	sub	r2,r2,r4
 804e0e4:	8884d83a 	srl	r2,r17,r2
 804e0e8:	9906983a 	sll	r3,r19,r4
 804e0ec:	8922983a 	sll	r17,r17,r4
 804e0f0:	10c4b03a 	or	r2,r2,r3
 804e0f4:	24007816 	blt	r4,r16,804e2d8 <__subdf3+0x3a0>
 804e0f8:	2421c83a 	sub	r16,r4,r16
 804e0fc:	80c00044 	addi	r3,r16,1
 804e100:	010007c4 	movi	r4,31
 804e104:	20c09516 	blt	r4,r3,804e35c <__subdf3+0x424>
 804e108:	01400804 	movi	r5,32
 804e10c:	28cbc83a 	sub	r5,r5,r3
 804e110:	88c8d83a 	srl	r4,r17,r3
 804e114:	8962983a 	sll	r17,r17,r5
 804e118:	114a983a 	sll	r5,r2,r5
 804e11c:	10c6d83a 	srl	r3,r2,r3
 804e120:	8804c03a 	cmpne	r2,r17,zero
 804e124:	290ab03a 	or	r5,r5,r4
 804e128:	28a2b03a 	or	r17,r5,r2
 804e12c:	0021883a 	mov	r16,zero
 804e130:	003fa206 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e134:	2090b03a 	or	r8,r4,r2
 804e138:	40018e26 	beq	r8,zero,804e774 <__subdf3+0x83c>
 804e13c:	1007883a 	mov	r3,r2
 804e140:	2023883a 	mov	r17,r4
 804e144:	888001cc 	andi	r2,r17,7
 804e148:	103f9e1e 	bne	r2,zero,804dfc4 <__alt_data_end+0xfffe5f24>
 804e14c:	1804977a 	slli	r2,r3,29
 804e150:	8822d0fa 	srli	r17,r17,3
 804e154:	1810d0fa 	srli	r8,r3,3
 804e158:	9100004c 	andi	r4,r18,1
 804e15c:	1444b03a 	or	r2,r2,r17
 804e160:	00c1ffc4 	movi	r3,2047
 804e164:	80c02826 	beq	r16,r3,804e208 <__subdf3+0x2d0>
 804e168:	01400434 	movhi	r5,16
 804e16c:	297fffc4 	addi	r5,r5,-1
 804e170:	80e0703a 	and	r16,r16,r3
 804e174:	414a703a 	and	r5,r8,r5
 804e178:	003fa806 	br	804e01c <__alt_data_end+0xfffe5f7c>
 804e17c:	0080630e 	bge	zero,r2,804e30c <__subdf3+0x3d4>
 804e180:	48003026 	beq	r9,zero,804e244 <__subdf3+0x30c>
 804e184:	0101ffc4 	movi	r4,2047
 804e188:	813f8c26 	beq	r16,r4,804dfbc <__alt_data_end+0xfffe5f1c>
 804e18c:	29402034 	orhi	r5,r5,128
 804e190:	01000e04 	movi	r4,56
 804e194:	2080a90e 	bge	r4,r2,804e43c <__subdf3+0x504>
 804e198:	298cb03a 	or	r6,r5,r6
 804e19c:	3012c03a 	cmpne	r9,r6,zero
 804e1a0:	0005883a 	mov	r2,zero
 804e1a4:	4c53883a 	add	r9,r9,r17
 804e1a8:	4c63803a 	cmpltu	r17,r9,r17
 804e1ac:	10c7883a 	add	r3,r2,r3
 804e1b0:	88c7883a 	add	r3,r17,r3
 804e1b4:	4823883a 	mov	r17,r9
 804e1b8:	1880202c 	andhi	r2,r3,128
 804e1bc:	1000d026 	beq	r2,zero,804e500 <__subdf3+0x5c8>
 804e1c0:	84000044 	addi	r16,r16,1
 804e1c4:	0081ffc4 	movi	r2,2047
 804e1c8:	8080fe26 	beq	r16,r2,804e5c4 <__subdf3+0x68c>
 804e1cc:	00bfe034 	movhi	r2,65408
 804e1d0:	10bfffc4 	addi	r2,r2,-1
 804e1d4:	1886703a 	and	r3,r3,r2
 804e1d8:	880ad07a 	srli	r5,r17,1
 804e1dc:	180497fa 	slli	r2,r3,31
 804e1e0:	8900004c 	andi	r4,r17,1
 804e1e4:	2922b03a 	or	r17,r5,r4
 804e1e8:	1806d07a 	srli	r3,r3,1
 804e1ec:	1462b03a 	or	r17,r2,r17
 804e1f0:	3825883a 	mov	r18,r7
 804e1f4:	003f7106 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e1f8:	2984b03a 	or	r2,r5,r6
 804e1fc:	103f6826 	beq	r2,zero,804dfa0 <__alt_data_end+0xfffe5f00>
 804e200:	39c03fcc 	andi	r7,r7,255
 804e204:	003f6706 	br	804dfa4 <__alt_data_end+0xfffe5f04>
 804e208:	4086b03a 	or	r3,r8,r2
 804e20c:	18015226 	beq	r3,zero,804e758 <__subdf3+0x820>
 804e210:	00c00434 	movhi	r3,16
 804e214:	41400234 	orhi	r5,r8,8
 804e218:	18ffffc4 	addi	r3,r3,-1
 804e21c:	28ca703a 	and	r5,r5,r3
 804e220:	003f7e06 	br	804e01c <__alt_data_end+0xfffe5f7c>
 804e224:	10bfffc4 	addi	r2,r2,-1
 804e228:	1000491e 	bne	r2,zero,804e350 <__subdf3+0x418>
 804e22c:	898fc83a 	sub	r7,r17,r6
 804e230:	89e3803a 	cmpltu	r17,r17,r7
 804e234:	1947c83a 	sub	r3,r3,r5
 804e238:	1c47c83a 	sub	r3,r3,r17
 804e23c:	3823883a 	mov	r17,r7
 804e240:	003f9b06 	br	804e0b0 <__alt_data_end+0xfffe6010>
 804e244:	2988b03a 	or	r4,r5,r6
 804e248:	203f5c26 	beq	r4,zero,804dfbc <__alt_data_end+0xfffe5f1c>
 804e24c:	10bfffc4 	addi	r2,r2,-1
 804e250:	1000931e 	bne	r2,zero,804e4a0 <__subdf3+0x568>
 804e254:	898d883a 	add	r6,r17,r6
 804e258:	3463803a 	cmpltu	r17,r6,r17
 804e25c:	1947883a 	add	r3,r3,r5
 804e260:	88c7883a 	add	r3,r17,r3
 804e264:	3023883a 	mov	r17,r6
 804e268:	003fd306 	br	804e1b8 <__alt_data_end+0xfffe6118>
 804e26c:	1000541e 	bne	r2,zero,804e3c0 <__subdf3+0x488>
 804e270:	80800044 	addi	r2,r16,1
 804e274:	1081ffcc 	andi	r2,r2,2047
 804e278:	01000044 	movi	r4,1
 804e27c:	2080a20e 	bge	r4,r2,804e508 <__subdf3+0x5d0>
 804e280:	8989c83a 	sub	r4,r17,r6
 804e284:	8905803a 	cmpltu	r2,r17,r4
 804e288:	1967c83a 	sub	r19,r3,r5
 804e28c:	98a7c83a 	sub	r19,r19,r2
 804e290:	9880202c 	andhi	r2,r19,128
 804e294:	10006326 	beq	r2,zero,804e424 <__subdf3+0x4ec>
 804e298:	3463c83a 	sub	r17,r6,r17
 804e29c:	28c7c83a 	sub	r3,r5,r3
 804e2a0:	344d803a 	cmpltu	r6,r6,r17
 804e2a4:	19a7c83a 	sub	r19,r3,r6
 804e2a8:	3825883a 	mov	r18,r7
 804e2ac:	983f861e 	bne	r19,zero,804e0c8 <__alt_data_end+0xfffe6028>
 804e2b0:	8809883a 	mov	r4,r17
 804e2b4:	804369c0 	call	804369c <__clzsi2>
 804e2b8:	10800804 	addi	r2,r2,32
 804e2bc:	113ffe04 	addi	r4,r2,-8
 804e2c0:	00c007c4 	movi	r3,31
 804e2c4:	193f850e 	bge	r3,r4,804e0dc <__alt_data_end+0xfffe603c>
 804e2c8:	10bff604 	addi	r2,r2,-40
 804e2cc:	8884983a 	sll	r2,r17,r2
 804e2d0:	0023883a 	mov	r17,zero
 804e2d4:	243f880e 	bge	r4,r16,804e0f8 <__alt_data_end+0xfffe6058>
 804e2d8:	00ffe034 	movhi	r3,65408
 804e2dc:	18ffffc4 	addi	r3,r3,-1
 804e2e0:	8121c83a 	sub	r16,r16,r4
 804e2e4:	10c6703a 	and	r3,r2,r3
 804e2e8:	003f3406 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e2ec:	9100004c 	andi	r4,r18,1
 804e2f0:	000b883a 	mov	r5,zero
 804e2f4:	0005883a 	mov	r2,zero
 804e2f8:	003f4806 	br	804e01c <__alt_data_end+0xfffe5f7c>
 804e2fc:	298cb03a 	or	r6,r5,r6
 804e300:	300cc03a 	cmpne	r6,r6,zero
 804e304:	0005883a 	mov	r2,zero
 804e308:	003f6406 	br	804e09c <__alt_data_end+0xfffe5ffc>
 804e30c:	10009a1e 	bne	r2,zero,804e578 <__subdf3+0x640>
 804e310:	82400044 	addi	r9,r16,1
 804e314:	4881ffcc 	andi	r2,r9,2047
 804e318:	02800044 	movi	r10,1
 804e31c:	5080670e 	bge	r10,r2,804e4bc <__subdf3+0x584>
 804e320:	0081ffc4 	movi	r2,2047
 804e324:	4880af26 	beq	r9,r2,804e5e4 <__subdf3+0x6ac>
 804e328:	898d883a 	add	r6,r17,r6
 804e32c:	1945883a 	add	r2,r3,r5
 804e330:	3447803a 	cmpltu	r3,r6,r17
 804e334:	1887883a 	add	r3,r3,r2
 804e338:	182297fa 	slli	r17,r3,31
 804e33c:	300cd07a 	srli	r6,r6,1
 804e340:	1806d07a 	srli	r3,r3,1
 804e344:	4821883a 	mov	r16,r9
 804e348:	89a2b03a 	or	r17,r17,r6
 804e34c:	003f1b06 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e350:	0101ffc4 	movi	r4,2047
 804e354:	813f441e 	bne	r16,r4,804e068 <__alt_data_end+0xfffe5fc8>
 804e358:	003f1806 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e35c:	843ff844 	addi	r16,r16,-31
 804e360:	01400804 	movi	r5,32
 804e364:	1408d83a 	srl	r4,r2,r16
 804e368:	19405026 	beq	r3,r5,804e4ac <__subdf3+0x574>
 804e36c:	01401004 	movi	r5,64
 804e370:	28c7c83a 	sub	r3,r5,r3
 804e374:	10c4983a 	sll	r2,r2,r3
 804e378:	88a2b03a 	or	r17,r17,r2
 804e37c:	8822c03a 	cmpne	r17,r17,zero
 804e380:	2462b03a 	or	r17,r4,r17
 804e384:	0007883a 	mov	r3,zero
 804e388:	0021883a 	mov	r16,zero
 804e38c:	003f6d06 	br	804e144 <__alt_data_end+0xfffe60a4>
 804e390:	11fff804 	addi	r7,r2,-32
 804e394:	01000804 	movi	r4,32
 804e398:	29ced83a 	srl	r7,r5,r7
 804e39c:	11004526 	beq	r2,r4,804e4b4 <__subdf3+0x57c>
 804e3a0:	01001004 	movi	r4,64
 804e3a4:	2089c83a 	sub	r4,r4,r2
 804e3a8:	2904983a 	sll	r2,r5,r4
 804e3ac:	118cb03a 	or	r6,r2,r6
 804e3b0:	300cc03a 	cmpne	r6,r6,zero
 804e3b4:	398cb03a 	or	r6,r7,r6
 804e3b8:	0005883a 	mov	r2,zero
 804e3bc:	003f3706 	br	804e09c <__alt_data_end+0xfffe5ffc>
 804e3c0:	80002a26 	beq	r16,zero,804e46c <__subdf3+0x534>
 804e3c4:	0101ffc4 	movi	r4,2047
 804e3c8:	49006626 	beq	r9,r4,804e564 <__subdf3+0x62c>
 804e3cc:	0085c83a 	sub	r2,zero,r2
 804e3d0:	18c02034 	orhi	r3,r3,128
 804e3d4:	01000e04 	movi	r4,56
 804e3d8:	20807e16 	blt	r4,r2,804e5d4 <__subdf3+0x69c>
 804e3dc:	010007c4 	movi	r4,31
 804e3e0:	2080e716 	blt	r4,r2,804e780 <__subdf3+0x848>
 804e3e4:	01000804 	movi	r4,32
 804e3e8:	2089c83a 	sub	r4,r4,r2
 804e3ec:	1914983a 	sll	r10,r3,r4
 804e3f0:	8890d83a 	srl	r8,r17,r2
 804e3f4:	8908983a 	sll	r4,r17,r4
 804e3f8:	1884d83a 	srl	r2,r3,r2
 804e3fc:	5222b03a 	or	r17,r10,r8
 804e400:	2006c03a 	cmpne	r3,r4,zero
 804e404:	88e2b03a 	or	r17,r17,r3
 804e408:	3463c83a 	sub	r17,r6,r17
 804e40c:	2885c83a 	sub	r2,r5,r2
 804e410:	344d803a 	cmpltu	r6,r6,r17
 804e414:	1187c83a 	sub	r3,r2,r6
 804e418:	4821883a 	mov	r16,r9
 804e41c:	3825883a 	mov	r18,r7
 804e420:	003f2306 	br	804e0b0 <__alt_data_end+0xfffe6010>
 804e424:	24d0b03a 	or	r8,r4,r19
 804e428:	40001b1e 	bne	r8,zero,804e498 <__subdf3+0x560>
 804e42c:	0005883a 	mov	r2,zero
 804e430:	0009883a 	mov	r4,zero
 804e434:	0021883a 	mov	r16,zero
 804e438:	003f4906 	br	804e160 <__alt_data_end+0xfffe60c0>
 804e43c:	010007c4 	movi	r4,31
 804e440:	20803a16 	blt	r4,r2,804e52c <__subdf3+0x5f4>
 804e444:	01000804 	movi	r4,32
 804e448:	2089c83a 	sub	r4,r4,r2
 804e44c:	2912983a 	sll	r9,r5,r4
 804e450:	3090d83a 	srl	r8,r6,r2
 804e454:	3108983a 	sll	r4,r6,r4
 804e458:	2884d83a 	srl	r2,r5,r2
 804e45c:	4a12b03a 	or	r9,r9,r8
 804e460:	2008c03a 	cmpne	r4,r4,zero
 804e464:	4912b03a 	or	r9,r9,r4
 804e468:	003f4e06 	br	804e1a4 <__alt_data_end+0xfffe6104>
 804e46c:	1c48b03a 	or	r4,r3,r17
 804e470:	20003c26 	beq	r4,zero,804e564 <__subdf3+0x62c>
 804e474:	0084303a 	nor	r2,zero,r2
 804e478:	1000381e 	bne	r2,zero,804e55c <__subdf3+0x624>
 804e47c:	3463c83a 	sub	r17,r6,r17
 804e480:	28c5c83a 	sub	r2,r5,r3
 804e484:	344d803a 	cmpltu	r6,r6,r17
 804e488:	1187c83a 	sub	r3,r2,r6
 804e48c:	4821883a 	mov	r16,r9
 804e490:	3825883a 	mov	r18,r7
 804e494:	003f0606 	br	804e0b0 <__alt_data_end+0xfffe6010>
 804e498:	2023883a 	mov	r17,r4
 804e49c:	003f0906 	br	804e0c4 <__alt_data_end+0xfffe6024>
 804e4a0:	0101ffc4 	movi	r4,2047
 804e4a4:	813f3a1e 	bne	r16,r4,804e190 <__alt_data_end+0xfffe60f0>
 804e4a8:	003ec406 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e4ac:	0005883a 	mov	r2,zero
 804e4b0:	003fb106 	br	804e378 <__alt_data_end+0xfffe62d8>
 804e4b4:	0005883a 	mov	r2,zero
 804e4b8:	003fbc06 	br	804e3ac <__alt_data_end+0xfffe630c>
 804e4bc:	1c44b03a 	or	r2,r3,r17
 804e4c0:	80008e1e 	bne	r16,zero,804e6fc <__subdf3+0x7c4>
 804e4c4:	1000c826 	beq	r2,zero,804e7e8 <__subdf3+0x8b0>
 804e4c8:	2984b03a 	or	r2,r5,r6
 804e4cc:	103ebb26 	beq	r2,zero,804dfbc <__alt_data_end+0xfffe5f1c>
 804e4d0:	8989883a 	add	r4,r17,r6
 804e4d4:	1945883a 	add	r2,r3,r5
 804e4d8:	2447803a 	cmpltu	r3,r4,r17
 804e4dc:	1887883a 	add	r3,r3,r2
 804e4e0:	1880202c 	andhi	r2,r3,128
 804e4e4:	2023883a 	mov	r17,r4
 804e4e8:	103f1626 	beq	r2,zero,804e144 <__alt_data_end+0xfffe60a4>
 804e4ec:	00bfe034 	movhi	r2,65408
 804e4f0:	10bfffc4 	addi	r2,r2,-1
 804e4f4:	5021883a 	mov	r16,r10
 804e4f8:	1886703a 	and	r3,r3,r2
 804e4fc:	003eaf06 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e500:	3825883a 	mov	r18,r7
 804e504:	003f0f06 	br	804e144 <__alt_data_end+0xfffe60a4>
 804e508:	1c44b03a 	or	r2,r3,r17
 804e50c:	8000251e 	bne	r16,zero,804e5a4 <__subdf3+0x66c>
 804e510:	1000661e 	bne	r2,zero,804e6ac <__subdf3+0x774>
 804e514:	2990b03a 	or	r8,r5,r6
 804e518:	40009626 	beq	r8,zero,804e774 <__subdf3+0x83c>
 804e51c:	2807883a 	mov	r3,r5
 804e520:	3023883a 	mov	r17,r6
 804e524:	3825883a 	mov	r18,r7
 804e528:	003ea406 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e52c:	127ff804 	addi	r9,r2,-32
 804e530:	01000804 	movi	r4,32
 804e534:	2a52d83a 	srl	r9,r5,r9
 804e538:	11008c26 	beq	r2,r4,804e76c <__subdf3+0x834>
 804e53c:	01001004 	movi	r4,64
 804e540:	2085c83a 	sub	r2,r4,r2
 804e544:	2884983a 	sll	r2,r5,r2
 804e548:	118cb03a 	or	r6,r2,r6
 804e54c:	300cc03a 	cmpne	r6,r6,zero
 804e550:	4992b03a 	or	r9,r9,r6
 804e554:	0005883a 	mov	r2,zero
 804e558:	003f1206 	br	804e1a4 <__alt_data_end+0xfffe6104>
 804e55c:	0101ffc4 	movi	r4,2047
 804e560:	493f9c1e 	bne	r9,r4,804e3d4 <__alt_data_end+0xfffe6334>
 804e564:	2807883a 	mov	r3,r5
 804e568:	3023883a 	mov	r17,r6
 804e56c:	4821883a 	mov	r16,r9
 804e570:	3825883a 	mov	r18,r7
 804e574:	003e9106 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e578:	80001f1e 	bne	r16,zero,804e5f8 <__subdf3+0x6c0>
 804e57c:	1c48b03a 	or	r4,r3,r17
 804e580:	20005a26 	beq	r4,zero,804e6ec <__subdf3+0x7b4>
 804e584:	0084303a 	nor	r2,zero,r2
 804e588:	1000561e 	bne	r2,zero,804e6e4 <__subdf3+0x7ac>
 804e58c:	89a3883a 	add	r17,r17,r6
 804e590:	1945883a 	add	r2,r3,r5
 804e594:	898d803a 	cmpltu	r6,r17,r6
 804e598:	3087883a 	add	r3,r6,r2
 804e59c:	4821883a 	mov	r16,r9
 804e5a0:	003f0506 	br	804e1b8 <__alt_data_end+0xfffe6118>
 804e5a4:	10002b1e 	bne	r2,zero,804e654 <__subdf3+0x71c>
 804e5a8:	2984b03a 	or	r2,r5,r6
 804e5ac:	10008026 	beq	r2,zero,804e7b0 <__subdf3+0x878>
 804e5b0:	2807883a 	mov	r3,r5
 804e5b4:	3023883a 	mov	r17,r6
 804e5b8:	3825883a 	mov	r18,r7
 804e5bc:	0401ffc4 	movi	r16,2047
 804e5c0:	003e7e06 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e5c4:	3809883a 	mov	r4,r7
 804e5c8:	0011883a 	mov	r8,zero
 804e5cc:	0005883a 	mov	r2,zero
 804e5d0:	003ee306 	br	804e160 <__alt_data_end+0xfffe60c0>
 804e5d4:	1c62b03a 	or	r17,r3,r17
 804e5d8:	8822c03a 	cmpne	r17,r17,zero
 804e5dc:	0005883a 	mov	r2,zero
 804e5e0:	003f8906 	br	804e408 <__alt_data_end+0xfffe6368>
 804e5e4:	3809883a 	mov	r4,r7
 804e5e8:	4821883a 	mov	r16,r9
 804e5ec:	0011883a 	mov	r8,zero
 804e5f0:	0005883a 	mov	r2,zero
 804e5f4:	003eda06 	br	804e160 <__alt_data_end+0xfffe60c0>
 804e5f8:	0101ffc4 	movi	r4,2047
 804e5fc:	49003b26 	beq	r9,r4,804e6ec <__subdf3+0x7b4>
 804e600:	0085c83a 	sub	r2,zero,r2
 804e604:	18c02034 	orhi	r3,r3,128
 804e608:	01000e04 	movi	r4,56
 804e60c:	20806e16 	blt	r4,r2,804e7c8 <__subdf3+0x890>
 804e610:	010007c4 	movi	r4,31
 804e614:	20807716 	blt	r4,r2,804e7f4 <__subdf3+0x8bc>
 804e618:	01000804 	movi	r4,32
 804e61c:	2089c83a 	sub	r4,r4,r2
 804e620:	1914983a 	sll	r10,r3,r4
 804e624:	8890d83a 	srl	r8,r17,r2
 804e628:	8908983a 	sll	r4,r17,r4
 804e62c:	1884d83a 	srl	r2,r3,r2
 804e630:	5222b03a 	or	r17,r10,r8
 804e634:	2006c03a 	cmpne	r3,r4,zero
 804e638:	88e2b03a 	or	r17,r17,r3
 804e63c:	89a3883a 	add	r17,r17,r6
 804e640:	1145883a 	add	r2,r2,r5
 804e644:	898d803a 	cmpltu	r6,r17,r6
 804e648:	3087883a 	add	r3,r6,r2
 804e64c:	4821883a 	mov	r16,r9
 804e650:	003ed906 	br	804e1b8 <__alt_data_end+0xfffe6118>
 804e654:	2984b03a 	or	r2,r5,r6
 804e658:	10004226 	beq	r2,zero,804e764 <__subdf3+0x82c>
 804e65c:	1808d0fa 	srli	r4,r3,3
 804e660:	8822d0fa 	srli	r17,r17,3
 804e664:	1806977a 	slli	r3,r3,29
 804e668:	2080022c 	andhi	r2,r4,8
 804e66c:	1c62b03a 	or	r17,r3,r17
 804e670:	10000826 	beq	r2,zero,804e694 <__subdf3+0x75c>
 804e674:	2812d0fa 	srli	r9,r5,3
 804e678:	4880022c 	andhi	r2,r9,8
 804e67c:	1000051e 	bne	r2,zero,804e694 <__subdf3+0x75c>
 804e680:	300cd0fa 	srli	r6,r6,3
 804e684:	2804977a 	slli	r2,r5,29
 804e688:	4809883a 	mov	r4,r9
 804e68c:	3825883a 	mov	r18,r7
 804e690:	11a2b03a 	or	r17,r2,r6
 804e694:	8806d77a 	srli	r3,r17,29
 804e698:	200890fa 	slli	r4,r4,3
 804e69c:	882290fa 	slli	r17,r17,3
 804e6a0:	0401ffc4 	movi	r16,2047
 804e6a4:	1906b03a 	or	r3,r3,r4
 804e6a8:	003e4406 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e6ac:	2984b03a 	or	r2,r5,r6
 804e6b0:	103e4226 	beq	r2,zero,804dfbc <__alt_data_end+0xfffe5f1c>
 804e6b4:	8989c83a 	sub	r4,r17,r6
 804e6b8:	8911803a 	cmpltu	r8,r17,r4
 804e6bc:	1945c83a 	sub	r2,r3,r5
 804e6c0:	1205c83a 	sub	r2,r2,r8
 804e6c4:	1200202c 	andhi	r8,r2,128
 804e6c8:	403e9a26 	beq	r8,zero,804e134 <__alt_data_end+0xfffe6094>
 804e6cc:	3463c83a 	sub	r17,r6,r17
 804e6d0:	28c5c83a 	sub	r2,r5,r3
 804e6d4:	344d803a 	cmpltu	r6,r6,r17
 804e6d8:	1187c83a 	sub	r3,r2,r6
 804e6dc:	3825883a 	mov	r18,r7
 804e6e0:	003e3606 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e6e4:	0101ffc4 	movi	r4,2047
 804e6e8:	493fc71e 	bne	r9,r4,804e608 <__alt_data_end+0xfffe6568>
 804e6ec:	2807883a 	mov	r3,r5
 804e6f0:	3023883a 	mov	r17,r6
 804e6f4:	4821883a 	mov	r16,r9
 804e6f8:	003e3006 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e6fc:	10003626 	beq	r2,zero,804e7d8 <__subdf3+0x8a0>
 804e700:	2984b03a 	or	r2,r5,r6
 804e704:	10001726 	beq	r2,zero,804e764 <__subdf3+0x82c>
 804e708:	1808d0fa 	srli	r4,r3,3
 804e70c:	8822d0fa 	srli	r17,r17,3
 804e710:	1806977a 	slli	r3,r3,29
 804e714:	2080022c 	andhi	r2,r4,8
 804e718:	1c62b03a 	or	r17,r3,r17
 804e71c:	10000726 	beq	r2,zero,804e73c <__subdf3+0x804>
 804e720:	2812d0fa 	srli	r9,r5,3
 804e724:	4880022c 	andhi	r2,r9,8
 804e728:	1000041e 	bne	r2,zero,804e73c <__subdf3+0x804>
 804e72c:	300cd0fa 	srli	r6,r6,3
 804e730:	2804977a 	slli	r2,r5,29
 804e734:	4809883a 	mov	r4,r9
 804e738:	11a2b03a 	or	r17,r2,r6
 804e73c:	8806d77a 	srli	r3,r17,29
 804e740:	200890fa 	slli	r4,r4,3
 804e744:	882290fa 	slli	r17,r17,3
 804e748:	3825883a 	mov	r18,r7
 804e74c:	1906b03a 	or	r3,r3,r4
 804e750:	0401ffc4 	movi	r16,2047
 804e754:	003e1906 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e758:	000b883a 	mov	r5,zero
 804e75c:	0005883a 	mov	r2,zero
 804e760:	003e2e06 	br	804e01c <__alt_data_end+0xfffe5f7c>
 804e764:	0401ffc4 	movi	r16,2047
 804e768:	003e1406 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e76c:	0005883a 	mov	r2,zero
 804e770:	003f7506 	br	804e548 <__alt_data_end+0xfffe64a8>
 804e774:	0005883a 	mov	r2,zero
 804e778:	0009883a 	mov	r4,zero
 804e77c:	003e7806 	br	804e160 <__alt_data_end+0xfffe60c0>
 804e780:	123ff804 	addi	r8,r2,-32
 804e784:	01000804 	movi	r4,32
 804e788:	1a10d83a 	srl	r8,r3,r8
 804e78c:	11002526 	beq	r2,r4,804e824 <__subdf3+0x8ec>
 804e790:	01001004 	movi	r4,64
 804e794:	2085c83a 	sub	r2,r4,r2
 804e798:	1884983a 	sll	r2,r3,r2
 804e79c:	1444b03a 	or	r2,r2,r17
 804e7a0:	1004c03a 	cmpne	r2,r2,zero
 804e7a4:	40a2b03a 	or	r17,r8,r2
 804e7a8:	0005883a 	mov	r2,zero
 804e7ac:	003f1606 	br	804e408 <__alt_data_end+0xfffe6368>
 804e7b0:	02000434 	movhi	r8,16
 804e7b4:	0009883a 	mov	r4,zero
 804e7b8:	423fffc4 	addi	r8,r8,-1
 804e7bc:	00bfffc4 	movi	r2,-1
 804e7c0:	0401ffc4 	movi	r16,2047
 804e7c4:	003e6606 	br	804e160 <__alt_data_end+0xfffe60c0>
 804e7c8:	1c62b03a 	or	r17,r3,r17
 804e7cc:	8822c03a 	cmpne	r17,r17,zero
 804e7d0:	0005883a 	mov	r2,zero
 804e7d4:	003f9906 	br	804e63c <__alt_data_end+0xfffe659c>
 804e7d8:	2807883a 	mov	r3,r5
 804e7dc:	3023883a 	mov	r17,r6
 804e7e0:	0401ffc4 	movi	r16,2047
 804e7e4:	003df506 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e7e8:	2807883a 	mov	r3,r5
 804e7ec:	3023883a 	mov	r17,r6
 804e7f0:	003df206 	br	804dfbc <__alt_data_end+0xfffe5f1c>
 804e7f4:	123ff804 	addi	r8,r2,-32
 804e7f8:	01000804 	movi	r4,32
 804e7fc:	1a10d83a 	srl	r8,r3,r8
 804e800:	11000a26 	beq	r2,r4,804e82c <__subdf3+0x8f4>
 804e804:	01001004 	movi	r4,64
 804e808:	2085c83a 	sub	r2,r4,r2
 804e80c:	1884983a 	sll	r2,r3,r2
 804e810:	1444b03a 	or	r2,r2,r17
 804e814:	1004c03a 	cmpne	r2,r2,zero
 804e818:	40a2b03a 	or	r17,r8,r2
 804e81c:	0005883a 	mov	r2,zero
 804e820:	003f8606 	br	804e63c <__alt_data_end+0xfffe659c>
 804e824:	0005883a 	mov	r2,zero
 804e828:	003fdc06 	br	804e79c <__alt_data_end+0xfffe66fc>
 804e82c:	0005883a 	mov	r2,zero
 804e830:	003ff706 	br	804e810 <__alt_data_end+0xfffe6770>

0804e834 <__fixdfsi>:
 804e834:	280cd53a 	srli	r6,r5,20
 804e838:	00c00434 	movhi	r3,16
 804e83c:	18ffffc4 	addi	r3,r3,-1
 804e840:	3181ffcc 	andi	r6,r6,2047
 804e844:	01c0ff84 	movi	r7,1022
 804e848:	28c6703a 	and	r3,r5,r3
 804e84c:	280ad7fa 	srli	r5,r5,31
 804e850:	3980120e 	bge	r7,r6,804e89c <__fixdfsi+0x68>
 804e854:	00810744 	movi	r2,1053
 804e858:	11800c16 	blt	r2,r6,804e88c <__fixdfsi+0x58>
 804e85c:	00810cc4 	movi	r2,1075
 804e860:	1185c83a 	sub	r2,r2,r6
 804e864:	01c007c4 	movi	r7,31
 804e868:	18c00434 	orhi	r3,r3,16
 804e86c:	38800d16 	blt	r7,r2,804e8a4 <__fixdfsi+0x70>
 804e870:	31befb44 	addi	r6,r6,-1043
 804e874:	2084d83a 	srl	r2,r4,r2
 804e878:	1986983a 	sll	r3,r3,r6
 804e87c:	1884b03a 	or	r2,r3,r2
 804e880:	28000726 	beq	r5,zero,804e8a0 <__fixdfsi+0x6c>
 804e884:	0085c83a 	sub	r2,zero,r2
 804e888:	f800283a 	ret
 804e88c:	00a00034 	movhi	r2,32768
 804e890:	10bfffc4 	addi	r2,r2,-1
 804e894:	2885883a 	add	r2,r5,r2
 804e898:	f800283a 	ret
 804e89c:	0005883a 	mov	r2,zero
 804e8a0:	f800283a 	ret
 804e8a4:	008104c4 	movi	r2,1043
 804e8a8:	1185c83a 	sub	r2,r2,r6
 804e8ac:	1884d83a 	srl	r2,r3,r2
 804e8b0:	003ff306 	br	804e880 <__alt_data_end+0xfffe67e0>

0804e8b4 <__floatsidf>:
 804e8b4:	defffd04 	addi	sp,sp,-12
 804e8b8:	dfc00215 	stw	ra,8(sp)
 804e8bc:	dc400115 	stw	r17,4(sp)
 804e8c0:	dc000015 	stw	r16,0(sp)
 804e8c4:	20002b26 	beq	r4,zero,804e974 <__floatsidf+0xc0>
 804e8c8:	2023883a 	mov	r17,r4
 804e8cc:	2020d7fa 	srli	r16,r4,31
 804e8d0:	20002d16 	blt	r4,zero,804e988 <__floatsidf+0xd4>
 804e8d4:	8809883a 	mov	r4,r17
 804e8d8:	804369c0 	call	804369c <__clzsi2>
 804e8dc:	01410784 	movi	r5,1054
 804e8e0:	288bc83a 	sub	r5,r5,r2
 804e8e4:	01010cc4 	movi	r4,1075
 804e8e8:	2149c83a 	sub	r4,r4,r5
 804e8ec:	00c007c4 	movi	r3,31
 804e8f0:	1900160e 	bge	r3,r4,804e94c <__floatsidf+0x98>
 804e8f4:	00c104c4 	movi	r3,1043
 804e8f8:	1947c83a 	sub	r3,r3,r5
 804e8fc:	88c6983a 	sll	r3,r17,r3
 804e900:	00800434 	movhi	r2,16
 804e904:	10bfffc4 	addi	r2,r2,-1
 804e908:	1886703a 	and	r3,r3,r2
 804e90c:	2941ffcc 	andi	r5,r5,2047
 804e910:	800d883a 	mov	r6,r16
 804e914:	0005883a 	mov	r2,zero
 804e918:	280a953a 	slli	r5,r5,20
 804e91c:	31803fcc 	andi	r6,r6,255
 804e920:	01000434 	movhi	r4,16
 804e924:	300c97fa 	slli	r6,r6,31
 804e928:	213fffc4 	addi	r4,r4,-1
 804e92c:	1906703a 	and	r3,r3,r4
 804e930:	1946b03a 	or	r3,r3,r5
 804e934:	1986b03a 	or	r3,r3,r6
 804e938:	dfc00217 	ldw	ra,8(sp)
 804e93c:	dc400117 	ldw	r17,4(sp)
 804e940:	dc000017 	ldw	r16,0(sp)
 804e944:	dec00304 	addi	sp,sp,12
 804e948:	f800283a 	ret
 804e94c:	00c002c4 	movi	r3,11
 804e950:	1887c83a 	sub	r3,r3,r2
 804e954:	88c6d83a 	srl	r3,r17,r3
 804e958:	8904983a 	sll	r2,r17,r4
 804e95c:	01000434 	movhi	r4,16
 804e960:	213fffc4 	addi	r4,r4,-1
 804e964:	2941ffcc 	andi	r5,r5,2047
 804e968:	1906703a 	and	r3,r3,r4
 804e96c:	800d883a 	mov	r6,r16
 804e970:	003fe906 	br	804e918 <__alt_data_end+0xfffe6878>
 804e974:	000d883a 	mov	r6,zero
 804e978:	000b883a 	mov	r5,zero
 804e97c:	0007883a 	mov	r3,zero
 804e980:	0005883a 	mov	r2,zero
 804e984:	003fe406 	br	804e918 <__alt_data_end+0xfffe6878>
 804e988:	0123c83a 	sub	r17,zero,r4
 804e98c:	003fd106 	br	804e8d4 <__alt_data_end+0xfffe6834>

0804e990 <__floatunsidf>:
 804e990:	defffe04 	addi	sp,sp,-8
 804e994:	dc000015 	stw	r16,0(sp)
 804e998:	dfc00115 	stw	ra,4(sp)
 804e99c:	2021883a 	mov	r16,r4
 804e9a0:	20002226 	beq	r4,zero,804ea2c <__floatunsidf+0x9c>
 804e9a4:	804369c0 	call	804369c <__clzsi2>
 804e9a8:	01010784 	movi	r4,1054
 804e9ac:	2089c83a 	sub	r4,r4,r2
 804e9b0:	01810cc4 	movi	r6,1075
 804e9b4:	310dc83a 	sub	r6,r6,r4
 804e9b8:	00c007c4 	movi	r3,31
 804e9bc:	1980120e 	bge	r3,r6,804ea08 <__floatunsidf+0x78>
 804e9c0:	00c104c4 	movi	r3,1043
 804e9c4:	1907c83a 	sub	r3,r3,r4
 804e9c8:	80ca983a 	sll	r5,r16,r3
 804e9cc:	00800434 	movhi	r2,16
 804e9d0:	10bfffc4 	addi	r2,r2,-1
 804e9d4:	2101ffcc 	andi	r4,r4,2047
 804e9d8:	0021883a 	mov	r16,zero
 804e9dc:	288a703a 	and	r5,r5,r2
 804e9e0:	2008953a 	slli	r4,r4,20
 804e9e4:	00c00434 	movhi	r3,16
 804e9e8:	18ffffc4 	addi	r3,r3,-1
 804e9ec:	28c6703a 	and	r3,r5,r3
 804e9f0:	8005883a 	mov	r2,r16
 804e9f4:	1906b03a 	or	r3,r3,r4
 804e9f8:	dfc00117 	ldw	ra,4(sp)
 804e9fc:	dc000017 	ldw	r16,0(sp)
 804ea00:	dec00204 	addi	sp,sp,8
 804ea04:	f800283a 	ret
 804ea08:	00c002c4 	movi	r3,11
 804ea0c:	188bc83a 	sub	r5,r3,r2
 804ea10:	814ad83a 	srl	r5,r16,r5
 804ea14:	00c00434 	movhi	r3,16
 804ea18:	18ffffc4 	addi	r3,r3,-1
 804ea1c:	81a0983a 	sll	r16,r16,r6
 804ea20:	2101ffcc 	andi	r4,r4,2047
 804ea24:	28ca703a 	and	r5,r5,r3
 804ea28:	003fed06 	br	804e9e0 <__alt_data_end+0xfffe6940>
 804ea2c:	0009883a 	mov	r4,zero
 804ea30:	000b883a 	mov	r5,zero
 804ea34:	003fea06 	br	804e9e0 <__alt_data_end+0xfffe6940>

0804ea38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 804ea38:	defff504 	addi	sp,sp,-44
 804ea3c:	df000a15 	stw	fp,40(sp)
 804ea40:	df000a04 	addi	fp,sp,40
 804ea44:	e13ffc15 	stw	r4,-16(fp)
 804ea48:	e17ffd15 	stw	r5,-12(fp)
 804ea4c:	e1bffe15 	stw	r6,-8(fp)
 804ea50:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 804ea54:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 804ea58:	d0a71017 	ldw	r2,-25536(gp)
  
  if (alt_ticks_per_second ())
 804ea5c:	10003c26 	beq	r2,zero,804eb50 <alt_alarm_start+0x118>
  {
    if (alarm)
 804ea60:	e0bffc17 	ldw	r2,-16(fp)
 804ea64:	10003826 	beq	r2,zero,804eb48 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 804ea68:	e0bffc17 	ldw	r2,-16(fp)
 804ea6c:	e0fffe17 	ldw	r3,-8(fp)
 804ea70:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 804ea74:	e0bffc17 	ldw	r2,-16(fp)
 804ea78:	e0ffff17 	ldw	r3,-4(fp)
 804ea7c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 804ea80:	0005303a 	rdctl	r2,status
 804ea84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804ea88:	e0fff917 	ldw	r3,-28(fp)
 804ea8c:	00bfff84 	movi	r2,-2
 804ea90:	1884703a 	and	r2,r3,r2
 804ea94:	1001703a 	wrctl	status,r2
  
  return context;
 804ea98:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 804ea9c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 804eaa0:	d0a71117 	ldw	r2,-25532(gp)
      
      current_nticks = alt_nticks();
 804eaa4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 804eaa8:	e0fffd17 	ldw	r3,-12(fp)
 804eaac:	e0bff617 	ldw	r2,-40(fp)
 804eab0:	1885883a 	add	r2,r3,r2
 804eab4:	10c00044 	addi	r3,r2,1
 804eab8:	e0bffc17 	ldw	r2,-16(fp)
 804eabc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 804eac0:	e0bffc17 	ldw	r2,-16(fp)
 804eac4:	10c00217 	ldw	r3,8(r2)
 804eac8:	e0bff617 	ldw	r2,-40(fp)
 804eacc:	1880042e 	bgeu	r3,r2,804eae0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 804ead0:	e0bffc17 	ldw	r2,-16(fp)
 804ead4:	00c00044 	movi	r3,1
 804ead8:	10c00405 	stb	r3,16(r2)
 804eadc:	00000206 	br	804eae8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 804eae0:	e0bffc17 	ldw	r2,-16(fp)
 804eae4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 804eae8:	e0bffc17 	ldw	r2,-16(fp)
 804eaec:	d0e00d04 	addi	r3,gp,-32716
 804eaf0:	e0fffa15 	stw	r3,-24(fp)
 804eaf4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 804eaf8:	e0bffb17 	ldw	r2,-20(fp)
 804eafc:	e0fffa17 	ldw	r3,-24(fp)
 804eb00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 804eb04:	e0bffa17 	ldw	r2,-24(fp)
 804eb08:	10c00017 	ldw	r3,0(r2)
 804eb0c:	e0bffb17 	ldw	r2,-20(fp)
 804eb10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 804eb14:	e0bffa17 	ldw	r2,-24(fp)
 804eb18:	10800017 	ldw	r2,0(r2)
 804eb1c:	e0fffb17 	ldw	r3,-20(fp)
 804eb20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 804eb24:	e0bffa17 	ldw	r2,-24(fp)
 804eb28:	e0fffb17 	ldw	r3,-20(fp)
 804eb2c:	10c00015 	stw	r3,0(r2)
 804eb30:	e0bff817 	ldw	r2,-32(fp)
 804eb34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804eb38:	e0bff717 	ldw	r2,-36(fp)
 804eb3c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 804eb40:	0005883a 	mov	r2,zero
 804eb44:	00000306 	br	804eb54 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 804eb48:	00bffa84 	movi	r2,-22
 804eb4c:	00000106 	br	804eb54 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 804eb50:	00bfde84 	movi	r2,-134
  }
}
 804eb54:	e037883a 	mov	sp,fp
 804eb58:	df000017 	ldw	fp,0(sp)
 804eb5c:	dec00104 	addi	sp,sp,4
 804eb60:	f800283a 	ret

0804eb64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 804eb64:	defffe04 	addi	sp,sp,-8
 804eb68:	dfc00115 	stw	ra,4(sp)
 804eb6c:	df000015 	stw	fp,0(sp)
 804eb70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804eb74:	d0a00a17 	ldw	r2,-32728(gp)
 804eb78:	10000326 	beq	r2,zero,804eb88 <alt_get_errno+0x24>
 804eb7c:	d0a00a17 	ldw	r2,-32728(gp)
 804eb80:	103ee83a 	callr	r2
 804eb84:	00000106 	br	804eb8c <alt_get_errno+0x28>
 804eb88:	d0a70b04 	addi	r2,gp,-25556
}
 804eb8c:	e037883a 	mov	sp,fp
 804eb90:	dfc00117 	ldw	ra,4(sp)
 804eb94:	df000017 	ldw	fp,0(sp)
 804eb98:	dec00204 	addi	sp,sp,8
 804eb9c:	f800283a 	ret

0804eba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 804eba0:	defffb04 	addi	sp,sp,-20
 804eba4:	dfc00415 	stw	ra,16(sp)
 804eba8:	df000315 	stw	fp,12(sp)
 804ebac:	df000304 	addi	fp,sp,12
 804ebb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 804ebb4:	e0bfff17 	ldw	r2,-4(fp)
 804ebb8:	10000816 	blt	r2,zero,804ebdc <close+0x3c>
 804ebbc:	01400304 	movi	r5,12
 804ebc0:	e13fff17 	ldw	r4,-4(fp)
 804ebc4:	80418e00 	call	80418e0 <__mulsi3>
 804ebc8:	1007883a 	mov	r3,r2
 804ebcc:	00820174 	movhi	r2,2053
 804ebd0:	108f0004 	addi	r2,r2,15360
 804ebd4:	1885883a 	add	r2,r3,r2
 804ebd8:	00000106 	br	804ebe0 <close+0x40>
 804ebdc:	0005883a 	mov	r2,zero
 804ebe0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 804ebe4:	e0bffd17 	ldw	r2,-12(fp)
 804ebe8:	10001926 	beq	r2,zero,804ec50 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 804ebec:	e0bffd17 	ldw	r2,-12(fp)
 804ebf0:	10800017 	ldw	r2,0(r2)
 804ebf4:	10800417 	ldw	r2,16(r2)
 804ebf8:	10000626 	beq	r2,zero,804ec14 <close+0x74>
 804ebfc:	e0bffd17 	ldw	r2,-12(fp)
 804ec00:	10800017 	ldw	r2,0(r2)
 804ec04:	10800417 	ldw	r2,16(r2)
 804ec08:	e13ffd17 	ldw	r4,-12(fp)
 804ec0c:	103ee83a 	callr	r2
 804ec10:	00000106 	br	804ec18 <close+0x78>
 804ec14:	0005883a 	mov	r2,zero
 804ec18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 804ec1c:	e13fff17 	ldw	r4,-4(fp)
 804ec20:	804f5280 	call	804f528 <alt_release_fd>
    if (rval < 0)
 804ec24:	e0bffe17 	ldw	r2,-8(fp)
 804ec28:	1000070e 	bge	r2,zero,804ec48 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 804ec2c:	804eb640 	call	804eb64 <alt_get_errno>
 804ec30:	1007883a 	mov	r3,r2
 804ec34:	e0bffe17 	ldw	r2,-8(fp)
 804ec38:	0085c83a 	sub	r2,zero,r2
 804ec3c:	18800015 	stw	r2,0(r3)
      return -1;
 804ec40:	00bfffc4 	movi	r2,-1
 804ec44:	00000706 	br	804ec64 <close+0xc4>
    }
    return 0;
 804ec48:	0005883a 	mov	r2,zero
 804ec4c:	00000506 	br	804ec64 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 804ec50:	804eb640 	call	804eb64 <alt_get_errno>
 804ec54:	1007883a 	mov	r3,r2
 804ec58:	00801444 	movi	r2,81
 804ec5c:	18800015 	stw	r2,0(r3)
    return -1;
 804ec60:	00bfffc4 	movi	r2,-1
  }
}
 804ec64:	e037883a 	mov	sp,fp
 804ec68:	dfc00117 	ldw	ra,4(sp)
 804ec6c:	df000017 	ldw	fp,0(sp)
 804ec70:	dec00204 	addi	sp,sp,8
 804ec74:	f800283a 	ret

0804ec78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 804ec78:	defffc04 	addi	sp,sp,-16
 804ec7c:	df000315 	stw	fp,12(sp)
 804ec80:	df000304 	addi	fp,sp,12
 804ec84:	e13ffd15 	stw	r4,-12(fp)
 804ec88:	e17ffe15 	stw	r5,-8(fp)
 804ec8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 804ec90:	e0bfff17 	ldw	r2,-4(fp)
}
 804ec94:	e037883a 	mov	sp,fp
 804ec98:	df000017 	ldw	fp,0(sp)
 804ec9c:	dec00104 	addi	sp,sp,4
 804eca0:	f800283a 	ret

0804eca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 804eca4:	defffe04 	addi	sp,sp,-8
 804eca8:	dfc00115 	stw	ra,4(sp)
 804ecac:	df000015 	stw	fp,0(sp)
 804ecb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804ecb4:	d0a00a17 	ldw	r2,-32728(gp)
 804ecb8:	10000326 	beq	r2,zero,804ecc8 <alt_get_errno+0x24>
 804ecbc:	d0a00a17 	ldw	r2,-32728(gp)
 804ecc0:	103ee83a 	callr	r2
 804ecc4:	00000106 	br	804eccc <alt_get_errno+0x28>
 804ecc8:	d0a70b04 	addi	r2,gp,-25556
}
 804eccc:	e037883a 	mov	sp,fp
 804ecd0:	dfc00117 	ldw	ra,4(sp)
 804ecd4:	df000017 	ldw	fp,0(sp)
 804ecd8:	dec00204 	addi	sp,sp,8
 804ecdc:	f800283a 	ret

0804ece0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 804ece0:	defffb04 	addi	sp,sp,-20
 804ece4:	dfc00415 	stw	ra,16(sp)
 804ece8:	df000315 	stw	fp,12(sp)
 804ecec:	df000304 	addi	fp,sp,12
 804ecf0:	e13ffe15 	stw	r4,-8(fp)
 804ecf4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804ecf8:	e0bffe17 	ldw	r2,-8(fp)
 804ecfc:	10000816 	blt	r2,zero,804ed20 <fstat+0x40>
 804ed00:	01400304 	movi	r5,12
 804ed04:	e13ffe17 	ldw	r4,-8(fp)
 804ed08:	80418e00 	call	80418e0 <__mulsi3>
 804ed0c:	1007883a 	mov	r3,r2
 804ed10:	00820174 	movhi	r2,2053
 804ed14:	108f0004 	addi	r2,r2,15360
 804ed18:	1885883a 	add	r2,r3,r2
 804ed1c:	00000106 	br	804ed24 <fstat+0x44>
 804ed20:	0005883a 	mov	r2,zero
 804ed24:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 804ed28:	e0bffd17 	ldw	r2,-12(fp)
 804ed2c:	10001026 	beq	r2,zero,804ed70 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 804ed30:	e0bffd17 	ldw	r2,-12(fp)
 804ed34:	10800017 	ldw	r2,0(r2)
 804ed38:	10800817 	ldw	r2,32(r2)
 804ed3c:	10000726 	beq	r2,zero,804ed5c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 804ed40:	e0bffd17 	ldw	r2,-12(fp)
 804ed44:	10800017 	ldw	r2,0(r2)
 804ed48:	10800817 	ldw	r2,32(r2)
 804ed4c:	e17fff17 	ldw	r5,-4(fp)
 804ed50:	e13ffd17 	ldw	r4,-12(fp)
 804ed54:	103ee83a 	callr	r2
 804ed58:	00000a06 	br	804ed84 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 804ed5c:	e0bfff17 	ldw	r2,-4(fp)
 804ed60:	00c80004 	movi	r3,8192
 804ed64:	10c00115 	stw	r3,4(r2)
      return 0;
 804ed68:	0005883a 	mov	r2,zero
 804ed6c:	00000506 	br	804ed84 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 804ed70:	804eca40 	call	804eca4 <alt_get_errno>
 804ed74:	1007883a 	mov	r3,r2
 804ed78:	00801444 	movi	r2,81
 804ed7c:	18800015 	stw	r2,0(r3)
    return -1;
 804ed80:	00bfffc4 	movi	r2,-1
  }
}
 804ed84:	e037883a 	mov	sp,fp
 804ed88:	dfc00117 	ldw	ra,4(sp)
 804ed8c:	df000017 	ldw	fp,0(sp)
 804ed90:	dec00204 	addi	sp,sp,8
 804ed94:	f800283a 	ret

0804ed98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 804ed98:	defff904 	addi	sp,sp,-28
 804ed9c:	dfc00615 	stw	ra,24(sp)
 804eda0:	df000515 	stw	fp,20(sp)
 804eda4:	df000504 	addi	fp,sp,20
 804eda8:	e13ffc15 	stw	r4,-16(fp)
 804edac:	e17ffd15 	stw	r5,-12(fp)
 804edb0:	e1bffe15 	stw	r6,-8(fp)
 804edb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 804edb8:	e0800217 	ldw	r2,8(fp)
 804edbc:	d8800015 	stw	r2,0(sp)
 804edc0:	e1ffff17 	ldw	r7,-4(fp)
 804edc4:	e1bffe17 	ldw	r6,-8(fp)
 804edc8:	e17ffd17 	ldw	r5,-12(fp)
 804edcc:	e13ffc17 	ldw	r4,-16(fp)
 804edd0:	804ef480 	call	804ef48 <alt_iic_isr_register>
}  
 804edd4:	e037883a 	mov	sp,fp
 804edd8:	dfc00117 	ldw	ra,4(sp)
 804eddc:	df000017 	ldw	fp,0(sp)
 804ede0:	dec00204 	addi	sp,sp,8
 804ede4:	f800283a 	ret

0804ede8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 804ede8:	defff904 	addi	sp,sp,-28
 804edec:	df000615 	stw	fp,24(sp)
 804edf0:	df000604 	addi	fp,sp,24
 804edf4:	e13ffe15 	stw	r4,-8(fp)
 804edf8:	e17fff15 	stw	r5,-4(fp)
 804edfc:	e0bfff17 	ldw	r2,-4(fp)
 804ee00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 804ee04:	0005303a 	rdctl	r2,status
 804ee08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804ee0c:	e0fffb17 	ldw	r3,-20(fp)
 804ee10:	00bfff84 	movi	r2,-2
 804ee14:	1884703a 	and	r2,r3,r2
 804ee18:	1001703a 	wrctl	status,r2
  
  return context;
 804ee1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 804ee20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 804ee24:	00c00044 	movi	r3,1
 804ee28:	e0bffa17 	ldw	r2,-24(fp)
 804ee2c:	1884983a 	sll	r2,r3,r2
 804ee30:	1007883a 	mov	r3,r2
 804ee34:	d0a70c17 	ldw	r2,-25552(gp)
 804ee38:	1884b03a 	or	r2,r3,r2
 804ee3c:	d0a70c15 	stw	r2,-25552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 804ee40:	d0a70c17 	ldw	r2,-25552(gp)
 804ee44:	100170fa 	wrctl	ienable,r2
 804ee48:	e0bffc17 	ldw	r2,-16(fp)
 804ee4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804ee50:	e0bffd17 	ldw	r2,-12(fp)
 804ee54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 804ee58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 804ee5c:	0001883a 	nop
}
 804ee60:	e037883a 	mov	sp,fp
 804ee64:	df000017 	ldw	fp,0(sp)
 804ee68:	dec00104 	addi	sp,sp,4
 804ee6c:	f800283a 	ret

0804ee70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 804ee70:	defff904 	addi	sp,sp,-28
 804ee74:	df000615 	stw	fp,24(sp)
 804ee78:	df000604 	addi	fp,sp,24
 804ee7c:	e13ffe15 	stw	r4,-8(fp)
 804ee80:	e17fff15 	stw	r5,-4(fp)
 804ee84:	e0bfff17 	ldw	r2,-4(fp)
 804ee88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 804ee8c:	0005303a 	rdctl	r2,status
 804ee90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804ee94:	e0fffb17 	ldw	r3,-20(fp)
 804ee98:	00bfff84 	movi	r2,-2
 804ee9c:	1884703a 	and	r2,r3,r2
 804eea0:	1001703a 	wrctl	status,r2
  
  return context;
 804eea4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 804eea8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 804eeac:	00c00044 	movi	r3,1
 804eeb0:	e0bffa17 	ldw	r2,-24(fp)
 804eeb4:	1884983a 	sll	r2,r3,r2
 804eeb8:	0084303a 	nor	r2,zero,r2
 804eebc:	1007883a 	mov	r3,r2
 804eec0:	d0a70c17 	ldw	r2,-25552(gp)
 804eec4:	1884703a 	and	r2,r3,r2
 804eec8:	d0a70c15 	stw	r2,-25552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 804eecc:	d0a70c17 	ldw	r2,-25552(gp)
 804eed0:	100170fa 	wrctl	ienable,r2
 804eed4:	e0bffc17 	ldw	r2,-16(fp)
 804eed8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804eedc:	e0bffd17 	ldw	r2,-12(fp)
 804eee0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 804eee4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 804eee8:	0001883a 	nop
}
 804eeec:	e037883a 	mov	sp,fp
 804eef0:	df000017 	ldw	fp,0(sp)
 804eef4:	dec00104 	addi	sp,sp,4
 804eef8:	f800283a 	ret

0804eefc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 804eefc:	defffc04 	addi	sp,sp,-16
 804ef00:	df000315 	stw	fp,12(sp)
 804ef04:	df000304 	addi	fp,sp,12
 804ef08:	e13ffe15 	stw	r4,-8(fp)
 804ef0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 804ef10:	000530fa 	rdctl	r2,ienable
 804ef14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 804ef18:	00c00044 	movi	r3,1
 804ef1c:	e0bfff17 	ldw	r2,-4(fp)
 804ef20:	1884983a 	sll	r2,r3,r2
 804ef24:	1007883a 	mov	r3,r2
 804ef28:	e0bffd17 	ldw	r2,-12(fp)
 804ef2c:	1884703a 	and	r2,r3,r2
 804ef30:	1004c03a 	cmpne	r2,r2,zero
 804ef34:	10803fcc 	andi	r2,r2,255
}
 804ef38:	e037883a 	mov	sp,fp
 804ef3c:	df000017 	ldw	fp,0(sp)
 804ef40:	dec00104 	addi	sp,sp,4
 804ef44:	f800283a 	ret

0804ef48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 804ef48:	defff504 	addi	sp,sp,-44
 804ef4c:	dfc00a15 	stw	ra,40(sp)
 804ef50:	df000915 	stw	fp,36(sp)
 804ef54:	df000904 	addi	fp,sp,36
 804ef58:	e13ffc15 	stw	r4,-16(fp)
 804ef5c:	e17ffd15 	stw	r5,-12(fp)
 804ef60:	e1bffe15 	stw	r6,-8(fp)
 804ef64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 804ef68:	00bffa84 	movi	r2,-22
 804ef6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 804ef70:	e0bffd17 	ldw	r2,-12(fp)
 804ef74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 804ef78:	e0bff817 	ldw	r2,-32(fp)
 804ef7c:	10800808 	cmpgei	r2,r2,32
 804ef80:	1000271e 	bne	r2,zero,804f020 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 804ef84:	0005303a 	rdctl	r2,status
 804ef88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804ef8c:	e0fffb17 	ldw	r3,-20(fp)
 804ef90:	00bfff84 	movi	r2,-2
 804ef94:	1884703a 	and	r2,r3,r2
 804ef98:	1001703a 	wrctl	status,r2
  
  return context;
 804ef9c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 804efa0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 804efa4:	00820174 	movhi	r2,2053
 804efa8:	109ad104 	addi	r2,r2,27460
 804efac:	e0fff817 	ldw	r3,-32(fp)
 804efb0:	180690fa 	slli	r3,r3,3
 804efb4:	10c5883a 	add	r2,r2,r3
 804efb8:	e0fffe17 	ldw	r3,-8(fp)
 804efbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 804efc0:	00820174 	movhi	r2,2053
 804efc4:	109ad104 	addi	r2,r2,27460
 804efc8:	e0fff817 	ldw	r3,-32(fp)
 804efcc:	180690fa 	slli	r3,r3,3
 804efd0:	10c5883a 	add	r2,r2,r3
 804efd4:	10800104 	addi	r2,r2,4
 804efd8:	e0ffff17 	ldw	r3,-4(fp)
 804efdc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 804efe0:	e0bffe17 	ldw	r2,-8(fp)
 804efe4:	10000526 	beq	r2,zero,804effc <alt_iic_isr_register+0xb4>
 804efe8:	e0bff817 	ldw	r2,-32(fp)
 804efec:	100b883a 	mov	r5,r2
 804eff0:	e13ffc17 	ldw	r4,-16(fp)
 804eff4:	804ede80 	call	804ede8 <alt_ic_irq_enable>
 804eff8:	00000406 	br	804f00c <alt_iic_isr_register+0xc4>
 804effc:	e0bff817 	ldw	r2,-32(fp)
 804f000:	100b883a 	mov	r5,r2
 804f004:	e13ffc17 	ldw	r4,-16(fp)
 804f008:	804ee700 	call	804ee70 <alt_ic_irq_disable>
 804f00c:	e0bff715 	stw	r2,-36(fp)
 804f010:	e0bffa17 	ldw	r2,-24(fp)
 804f014:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804f018:	e0bff917 	ldw	r2,-28(fp)
 804f01c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 804f020:	e0bff717 	ldw	r2,-36(fp)
}
 804f024:	e037883a 	mov	sp,fp
 804f028:	dfc00117 	ldw	ra,4(sp)
 804f02c:	df000017 	ldw	fp,0(sp)
 804f030:	dec00204 	addi	sp,sp,8
 804f034:	f800283a 	ret

0804f038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 804f038:	defffe04 	addi	sp,sp,-8
 804f03c:	dfc00115 	stw	ra,4(sp)
 804f040:	df000015 	stw	fp,0(sp)
 804f044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804f048:	d0a00a17 	ldw	r2,-32728(gp)
 804f04c:	10000326 	beq	r2,zero,804f05c <alt_get_errno+0x24>
 804f050:	d0a00a17 	ldw	r2,-32728(gp)
 804f054:	103ee83a 	callr	r2
 804f058:	00000106 	br	804f060 <alt_get_errno+0x28>
 804f05c:	d0a70b04 	addi	r2,gp,-25556
}
 804f060:	e037883a 	mov	sp,fp
 804f064:	dfc00117 	ldw	ra,4(sp)
 804f068:	df000017 	ldw	fp,0(sp)
 804f06c:	dec00204 	addi	sp,sp,8
 804f070:	f800283a 	ret

0804f074 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 804f074:	deffed04 	addi	sp,sp,-76
 804f078:	dfc01215 	stw	ra,72(sp)
 804f07c:	df001115 	stw	fp,68(sp)
 804f080:	df001104 	addi	fp,sp,68
 804f084:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804f088:	e0bfff17 	ldw	r2,-4(fp)
 804f08c:	10000816 	blt	r2,zero,804f0b0 <isatty+0x3c>
 804f090:	01400304 	movi	r5,12
 804f094:	e13fff17 	ldw	r4,-4(fp)
 804f098:	80418e00 	call	80418e0 <__mulsi3>
 804f09c:	1007883a 	mov	r3,r2
 804f0a0:	00820174 	movhi	r2,2053
 804f0a4:	108f0004 	addi	r2,r2,15360
 804f0a8:	1885883a 	add	r2,r3,r2
 804f0ac:	00000106 	br	804f0b4 <isatty+0x40>
 804f0b0:	0005883a 	mov	r2,zero
 804f0b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 804f0b8:	e0bfef17 	ldw	r2,-68(fp)
 804f0bc:	10000e26 	beq	r2,zero,804f0f8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 804f0c0:	e0bfef17 	ldw	r2,-68(fp)
 804f0c4:	10800017 	ldw	r2,0(r2)
 804f0c8:	10800817 	ldw	r2,32(r2)
 804f0cc:	1000021e 	bne	r2,zero,804f0d8 <isatty+0x64>
    {
      return 1;
 804f0d0:	00800044 	movi	r2,1
 804f0d4:	00000d06 	br	804f10c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 804f0d8:	e0bff004 	addi	r2,fp,-64
 804f0dc:	100b883a 	mov	r5,r2
 804f0e0:	e13fff17 	ldw	r4,-4(fp)
 804f0e4:	804ece00 	call	804ece0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 804f0e8:	e0bff117 	ldw	r2,-60(fp)
 804f0ec:	10880020 	cmpeqi	r2,r2,8192
 804f0f0:	10803fcc 	andi	r2,r2,255
 804f0f4:	00000506 	br	804f10c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 804f0f8:	804f0380 	call	804f038 <alt_get_errno>
 804f0fc:	1007883a 	mov	r3,r2
 804f100:	00801444 	movi	r2,81
 804f104:	18800015 	stw	r2,0(r3)
    return 0;
 804f108:	0005883a 	mov	r2,zero
  }
}
 804f10c:	e037883a 	mov	sp,fp
 804f110:	dfc00117 	ldw	ra,4(sp)
 804f114:	df000017 	ldw	fp,0(sp)
 804f118:	dec00204 	addi	sp,sp,8
 804f11c:	f800283a 	ret

0804f120 <alt_load_section>:
 804f120:	defffc04 	addi	sp,sp,-16
 804f124:	df000315 	stw	fp,12(sp)
 804f128:	df000304 	addi	fp,sp,12
 804f12c:	e13ffd15 	stw	r4,-12(fp)
 804f130:	e17ffe15 	stw	r5,-8(fp)
 804f134:	e1bfff15 	stw	r6,-4(fp)
 804f138:	e0fffe17 	ldw	r3,-8(fp)
 804f13c:	e0bffd17 	ldw	r2,-12(fp)
 804f140:	18800c26 	beq	r3,r2,804f174 <alt_load_section+0x54>
 804f144:	00000806 	br	804f168 <alt_load_section+0x48>
 804f148:	e0bffe17 	ldw	r2,-8(fp)
 804f14c:	10c00104 	addi	r3,r2,4
 804f150:	e0fffe15 	stw	r3,-8(fp)
 804f154:	e0fffd17 	ldw	r3,-12(fp)
 804f158:	19000104 	addi	r4,r3,4
 804f15c:	e13ffd15 	stw	r4,-12(fp)
 804f160:	18c00017 	ldw	r3,0(r3)
 804f164:	10c00015 	stw	r3,0(r2)
 804f168:	e0fffe17 	ldw	r3,-8(fp)
 804f16c:	e0bfff17 	ldw	r2,-4(fp)
 804f170:	18bff51e 	bne	r3,r2,804f148 <__alt_data_end+0xfffe70a8>
 804f174:	0001883a 	nop
 804f178:	e037883a 	mov	sp,fp
 804f17c:	df000017 	ldw	fp,0(sp)
 804f180:	dec00104 	addi	sp,sp,4
 804f184:	f800283a 	ret

0804f188 <alt_load>:
 804f188:	defffe04 	addi	sp,sp,-8
 804f18c:	dfc00115 	stw	ra,4(sp)
 804f190:	df000015 	stw	fp,0(sp)
 804f194:	d839883a 	mov	fp,sp
 804f198:	01820174 	movhi	r6,2053
 804f19c:	3193bf04 	addi	r6,r6,20220
 804f1a0:	01420174 	movhi	r5,2053
 804f1a4:	294ccd04 	addi	r5,r5,13108
 804f1a8:	01020174 	movhi	r4,2053
 804f1ac:	2113bf04 	addi	r4,r4,20220
 804f1b0:	804f1200 	call	804f120 <alt_load_section>
 804f1b4:	01820134 	movhi	r6,2052
 804f1b8:	31808c04 	addi	r6,r6,560
 804f1bc:	01420134 	movhi	r5,2052
 804f1c0:	29400804 	addi	r5,r5,32
 804f1c4:	01020134 	movhi	r4,2052
 804f1c8:	21000804 	addi	r4,r4,32
 804f1cc:	804f1200 	call	804f120 <alt_load_section>
 804f1d0:	01820174 	movhi	r6,2053
 804f1d4:	318ccd04 	addi	r6,r6,13108
 804f1d8:	01420174 	movhi	r5,2053
 804f1dc:	294b7504 	addi	r5,r5,11732
 804f1e0:	01020174 	movhi	r4,2053
 804f1e4:	210b7504 	addi	r4,r4,11732
 804f1e8:	804f1200 	call	804f120 <alt_load_section>
 804f1ec:	80521600 	call	8052160 <alt_dcache_flush_all>
 804f1f0:	80523b00 	call	80523b0 <alt_icache_flush_all>
 804f1f4:	0001883a 	nop
 804f1f8:	e037883a 	mov	sp,fp
 804f1fc:	dfc00117 	ldw	ra,4(sp)
 804f200:	df000017 	ldw	fp,0(sp)
 804f204:	dec00204 	addi	sp,sp,8
 804f208:	f800283a 	ret

0804f20c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 804f20c:	defffe04 	addi	sp,sp,-8
 804f210:	dfc00115 	stw	ra,4(sp)
 804f214:	df000015 	stw	fp,0(sp)
 804f218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804f21c:	d0a00a17 	ldw	r2,-32728(gp)
 804f220:	10000326 	beq	r2,zero,804f230 <alt_get_errno+0x24>
 804f224:	d0a00a17 	ldw	r2,-32728(gp)
 804f228:	103ee83a 	callr	r2
 804f22c:	00000106 	br	804f234 <alt_get_errno+0x28>
 804f230:	d0a70b04 	addi	r2,gp,-25556
}
 804f234:	e037883a 	mov	sp,fp
 804f238:	dfc00117 	ldw	ra,4(sp)
 804f23c:	df000017 	ldw	fp,0(sp)
 804f240:	dec00204 	addi	sp,sp,8
 804f244:	f800283a 	ret

0804f248 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 804f248:	defff904 	addi	sp,sp,-28
 804f24c:	dfc00615 	stw	ra,24(sp)
 804f250:	df000515 	stw	fp,20(sp)
 804f254:	df000504 	addi	fp,sp,20
 804f258:	e13ffd15 	stw	r4,-12(fp)
 804f25c:	e17ffe15 	stw	r5,-8(fp)
 804f260:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 804f264:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804f268:	e0bffd17 	ldw	r2,-12(fp)
 804f26c:	10000816 	blt	r2,zero,804f290 <lseek+0x48>
 804f270:	01400304 	movi	r5,12
 804f274:	e13ffd17 	ldw	r4,-12(fp)
 804f278:	80418e00 	call	80418e0 <__mulsi3>
 804f27c:	1007883a 	mov	r3,r2
 804f280:	00820174 	movhi	r2,2053
 804f284:	108f0004 	addi	r2,r2,15360
 804f288:	1885883a 	add	r2,r3,r2
 804f28c:	00000106 	br	804f294 <lseek+0x4c>
 804f290:	0005883a 	mov	r2,zero
 804f294:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 804f298:	e0bffc17 	ldw	r2,-16(fp)
 804f29c:	10001026 	beq	r2,zero,804f2e0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 804f2a0:	e0bffc17 	ldw	r2,-16(fp)
 804f2a4:	10800017 	ldw	r2,0(r2)
 804f2a8:	10800717 	ldw	r2,28(r2)
 804f2ac:	10000926 	beq	r2,zero,804f2d4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 804f2b0:	e0bffc17 	ldw	r2,-16(fp)
 804f2b4:	10800017 	ldw	r2,0(r2)
 804f2b8:	10800717 	ldw	r2,28(r2)
 804f2bc:	e1bfff17 	ldw	r6,-4(fp)
 804f2c0:	e17ffe17 	ldw	r5,-8(fp)
 804f2c4:	e13ffc17 	ldw	r4,-16(fp)
 804f2c8:	103ee83a 	callr	r2
 804f2cc:	e0bffb15 	stw	r2,-20(fp)
 804f2d0:	00000506 	br	804f2e8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 804f2d4:	00bfde84 	movi	r2,-134
 804f2d8:	e0bffb15 	stw	r2,-20(fp)
 804f2dc:	00000206 	br	804f2e8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 804f2e0:	00bfebc4 	movi	r2,-81
 804f2e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 804f2e8:	e0bffb17 	ldw	r2,-20(fp)
 804f2ec:	1000070e 	bge	r2,zero,804f30c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 804f2f0:	804f20c0 	call	804f20c <alt_get_errno>
 804f2f4:	1007883a 	mov	r3,r2
 804f2f8:	e0bffb17 	ldw	r2,-20(fp)
 804f2fc:	0085c83a 	sub	r2,zero,r2
 804f300:	18800015 	stw	r2,0(r3)
    rc = -1;
 804f304:	00bfffc4 	movi	r2,-1
 804f308:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 804f30c:	e0bffb17 	ldw	r2,-20(fp)
}
 804f310:	e037883a 	mov	sp,fp
 804f314:	dfc00117 	ldw	ra,4(sp)
 804f318:	df000017 	ldw	fp,0(sp)
 804f31c:	dec00204 	addi	sp,sp,8
 804f320:	f800283a 	ret

0804f324 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 804f324:	defffd04 	addi	sp,sp,-12
 804f328:	dfc00215 	stw	ra,8(sp)
 804f32c:	df000115 	stw	fp,4(sp)
 804f330:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 804f334:	0009883a 	mov	r4,zero
 804f338:	804f9a00 	call	804f9a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 804f33c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 804f340:	804f9d80 	call	804f9d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 804f344:	01820174 	movhi	r6,2053
 804f348:	318c9b04 	addi	r6,r6,12908
 804f34c:	01420174 	movhi	r5,2053
 804f350:	294c9b04 	addi	r5,r5,12908
 804f354:	01020174 	movhi	r4,2053
 804f358:	210c9b04 	addi	r4,r4,12908
 804f35c:	80525500 	call	8052550 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 804f360:	80522600 	call	8052260 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 804f364:	01020174 	movhi	r4,2053
 804f368:	2108b004 	addi	r4,r4,8896
 804f36c:	8052a400 	call	8052a40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 804f370:	d0a70d17 	ldw	r2,-25548(gp)
 804f374:	d0e70e17 	ldw	r3,-25544(gp)
 804f378:	d1270f17 	ldw	r4,-25540(gp)
 804f37c:	200d883a 	mov	r6,r4
 804f380:	180b883a 	mov	r5,r3
 804f384:	1009883a 	mov	r4,r2
 804f388:	80403780 	call	8040378 <main>
 804f38c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 804f390:	01000044 	movi	r4,1
 804f394:	804eba00 	call	804eba0 <close>
  exit (result);
 804f398:	e13fff17 	ldw	r4,-4(fp)
 804f39c:	8052a540 	call	8052a54 <exit>

0804f3a0 <__malloc_lock>:
 804f3a0:	defffe04 	addi	sp,sp,-8
 804f3a4:	df000115 	stw	fp,4(sp)
 804f3a8:	df000104 	addi	fp,sp,4
 804f3ac:	e13fff15 	stw	r4,-4(fp)
 804f3b0:	0001883a 	nop
 804f3b4:	e037883a 	mov	sp,fp
 804f3b8:	df000017 	ldw	fp,0(sp)
 804f3bc:	dec00104 	addi	sp,sp,4
 804f3c0:	f800283a 	ret

0804f3c4 <__malloc_unlock>:
 804f3c4:	defffe04 	addi	sp,sp,-8
 804f3c8:	df000115 	stw	fp,4(sp)
 804f3cc:	df000104 	addi	fp,sp,4
 804f3d0:	e13fff15 	stw	r4,-4(fp)
 804f3d4:	0001883a 	nop
 804f3d8:	e037883a 	mov	sp,fp
 804f3dc:	df000017 	ldw	fp,0(sp)
 804f3e0:	dec00104 	addi	sp,sp,4
 804f3e4:	f800283a 	ret

0804f3e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 804f3e8:	defffe04 	addi	sp,sp,-8
 804f3ec:	dfc00115 	stw	ra,4(sp)
 804f3f0:	df000015 	stw	fp,0(sp)
 804f3f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804f3f8:	d0a00a17 	ldw	r2,-32728(gp)
 804f3fc:	10000326 	beq	r2,zero,804f40c <alt_get_errno+0x24>
 804f400:	d0a00a17 	ldw	r2,-32728(gp)
 804f404:	103ee83a 	callr	r2
 804f408:	00000106 	br	804f410 <alt_get_errno+0x28>
 804f40c:	d0a70b04 	addi	r2,gp,-25556
}
 804f410:	e037883a 	mov	sp,fp
 804f414:	dfc00117 	ldw	ra,4(sp)
 804f418:	df000017 	ldw	fp,0(sp)
 804f41c:	dec00204 	addi	sp,sp,8
 804f420:	f800283a 	ret

0804f424 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 804f424:	defff904 	addi	sp,sp,-28
 804f428:	dfc00615 	stw	ra,24(sp)
 804f42c:	df000515 	stw	fp,20(sp)
 804f430:	df000504 	addi	fp,sp,20
 804f434:	e13ffd15 	stw	r4,-12(fp)
 804f438:	e17ffe15 	stw	r5,-8(fp)
 804f43c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804f440:	e0bffd17 	ldw	r2,-12(fp)
 804f444:	10000816 	blt	r2,zero,804f468 <read+0x44>
 804f448:	01400304 	movi	r5,12
 804f44c:	e13ffd17 	ldw	r4,-12(fp)
 804f450:	80418e00 	call	80418e0 <__mulsi3>
 804f454:	1007883a 	mov	r3,r2
 804f458:	00820174 	movhi	r2,2053
 804f45c:	108f0004 	addi	r2,r2,15360
 804f460:	1885883a 	add	r2,r3,r2
 804f464:	00000106 	br	804f46c <read+0x48>
 804f468:	0005883a 	mov	r2,zero
 804f46c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 804f470:	e0bffb17 	ldw	r2,-20(fp)
 804f474:	10002226 	beq	r2,zero,804f500 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 804f478:	e0bffb17 	ldw	r2,-20(fp)
 804f47c:	10800217 	ldw	r2,8(r2)
 804f480:	108000cc 	andi	r2,r2,3
 804f484:	10800060 	cmpeqi	r2,r2,1
 804f488:	1000181e 	bne	r2,zero,804f4ec <read+0xc8>
        (fd->dev->read))
 804f48c:	e0bffb17 	ldw	r2,-20(fp)
 804f490:	10800017 	ldw	r2,0(r2)
 804f494:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 804f498:	10001426 	beq	r2,zero,804f4ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 804f49c:	e0bffb17 	ldw	r2,-20(fp)
 804f4a0:	10800017 	ldw	r2,0(r2)
 804f4a4:	10800517 	ldw	r2,20(r2)
 804f4a8:	e0ffff17 	ldw	r3,-4(fp)
 804f4ac:	180d883a 	mov	r6,r3
 804f4b0:	e17ffe17 	ldw	r5,-8(fp)
 804f4b4:	e13ffb17 	ldw	r4,-20(fp)
 804f4b8:	103ee83a 	callr	r2
 804f4bc:	e0bffc15 	stw	r2,-16(fp)
 804f4c0:	e0bffc17 	ldw	r2,-16(fp)
 804f4c4:	1000070e 	bge	r2,zero,804f4e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 804f4c8:	804f3e80 	call	804f3e8 <alt_get_errno>
 804f4cc:	1007883a 	mov	r3,r2
 804f4d0:	e0bffc17 	ldw	r2,-16(fp)
 804f4d4:	0085c83a 	sub	r2,zero,r2
 804f4d8:	18800015 	stw	r2,0(r3)
          return -1;
 804f4dc:	00bfffc4 	movi	r2,-1
 804f4e0:	00000c06 	br	804f514 <read+0xf0>
        }
        return rval;
 804f4e4:	e0bffc17 	ldw	r2,-16(fp)
 804f4e8:	00000a06 	br	804f514 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 804f4ec:	804f3e80 	call	804f3e8 <alt_get_errno>
 804f4f0:	1007883a 	mov	r3,r2
 804f4f4:	00800344 	movi	r2,13
 804f4f8:	18800015 	stw	r2,0(r3)
 804f4fc:	00000406 	br	804f510 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 804f500:	804f3e80 	call	804f3e8 <alt_get_errno>
 804f504:	1007883a 	mov	r3,r2
 804f508:	00801444 	movi	r2,81
 804f50c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 804f510:	00bfffc4 	movi	r2,-1
}
 804f514:	e037883a 	mov	sp,fp
 804f518:	dfc00117 	ldw	ra,4(sp)
 804f51c:	df000017 	ldw	fp,0(sp)
 804f520:	dec00204 	addi	sp,sp,8
 804f524:	f800283a 	ret

0804f528 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 804f528:	defffc04 	addi	sp,sp,-16
 804f52c:	dfc00315 	stw	ra,12(sp)
 804f530:	df000215 	stw	fp,8(sp)
 804f534:	dc000115 	stw	r16,4(sp)
 804f538:	df000204 	addi	fp,sp,8
 804f53c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 804f540:	e0bffe17 	ldw	r2,-8(fp)
 804f544:	108000d0 	cmplti	r2,r2,3
 804f548:	1000111e 	bne	r2,zero,804f590 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 804f54c:	04020174 	movhi	r16,2053
 804f550:	840f0004 	addi	r16,r16,15360
 804f554:	e0bffe17 	ldw	r2,-8(fp)
 804f558:	01400304 	movi	r5,12
 804f55c:	1009883a 	mov	r4,r2
 804f560:	80418e00 	call	80418e0 <__mulsi3>
 804f564:	8085883a 	add	r2,r16,r2
 804f568:	10800204 	addi	r2,r2,8
 804f56c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 804f570:	04020174 	movhi	r16,2053
 804f574:	840f0004 	addi	r16,r16,15360
 804f578:	e0bffe17 	ldw	r2,-8(fp)
 804f57c:	01400304 	movi	r5,12
 804f580:	1009883a 	mov	r4,r2
 804f584:	80418e00 	call	80418e0 <__mulsi3>
 804f588:	8085883a 	add	r2,r16,r2
 804f58c:	10000015 	stw	zero,0(r2)
  }
}
 804f590:	0001883a 	nop
 804f594:	e6ffff04 	addi	sp,fp,-4
 804f598:	dfc00217 	ldw	ra,8(sp)
 804f59c:	df000117 	ldw	fp,4(sp)
 804f5a0:	dc000017 	ldw	r16,0(sp)
 804f5a4:	dec00304 	addi	sp,sp,12
 804f5a8:	f800283a 	ret

0804f5ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 804f5ac:	defff904 	addi	sp,sp,-28
 804f5b0:	df000615 	stw	fp,24(sp)
 804f5b4:	df000604 	addi	fp,sp,24
 804f5b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 804f5bc:	0005303a 	rdctl	r2,status
 804f5c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804f5c4:	e0fffe17 	ldw	r3,-8(fp)
 804f5c8:	00bfff84 	movi	r2,-2
 804f5cc:	1884703a 	and	r2,r3,r2
 804f5d0:	1001703a 	wrctl	status,r2
  
  return context;
 804f5d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 804f5d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 804f5dc:	d0a00c17 	ldw	r2,-32720(gp)
 804f5e0:	10c000c4 	addi	r3,r2,3
 804f5e4:	00bfff04 	movi	r2,-4
 804f5e8:	1884703a 	and	r2,r3,r2
 804f5ec:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 804f5f0:	d0e00c17 	ldw	r3,-32720(gp)
 804f5f4:	e0bfff17 	ldw	r2,-4(fp)
 804f5f8:	1887883a 	add	r3,r3,r2
 804f5fc:	008201f4 	movhi	r2,2055
 804f600:	10a02804 	addi	r2,r2,-32608
 804f604:	10c0062e 	bgeu	r2,r3,804f620 <sbrk+0x74>
 804f608:	e0bffb17 	ldw	r2,-20(fp)
 804f60c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804f610:	e0bffa17 	ldw	r2,-24(fp)
 804f614:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 804f618:	00bfffc4 	movi	r2,-1
 804f61c:	00000b06 	br	804f64c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 804f620:	d0a00c17 	ldw	r2,-32720(gp)
 804f624:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 804f628:	d0e00c17 	ldw	r3,-32720(gp)
 804f62c:	e0bfff17 	ldw	r2,-4(fp)
 804f630:	1885883a 	add	r2,r3,r2
 804f634:	d0a00c15 	stw	r2,-32720(gp)
 804f638:	e0bffb17 	ldw	r2,-20(fp)
 804f63c:	e0bffc15 	stw	r2,-16(fp)
 804f640:	e0bffc17 	ldw	r2,-16(fp)
 804f644:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 804f648:	e0bffd17 	ldw	r2,-12(fp)
} 
 804f64c:	e037883a 	mov	sp,fp
 804f650:	df000017 	ldw	fp,0(sp)
 804f654:	dec00104 	addi	sp,sp,4
 804f658:	f800283a 	ret

0804f65c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 804f65c:	defffa04 	addi	sp,sp,-24
 804f660:	df000515 	stw	fp,20(sp)
 804f664:	df000504 	addi	fp,sp,20
 804f668:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 804f66c:	0005303a 	rdctl	r2,status
 804f670:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 804f674:	e0fffc17 	ldw	r3,-16(fp)
 804f678:	00bfff84 	movi	r2,-2
 804f67c:	1884703a 	and	r2,r3,r2
 804f680:	1001703a 	wrctl	status,r2
  
  return context;
 804f684:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 804f688:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 804f68c:	e0bfff17 	ldw	r2,-4(fp)
 804f690:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 804f694:	e0bffd17 	ldw	r2,-12(fp)
 804f698:	10800017 	ldw	r2,0(r2)
 804f69c:	e0fffd17 	ldw	r3,-12(fp)
 804f6a0:	18c00117 	ldw	r3,4(r3)
 804f6a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 804f6a8:	e0bffd17 	ldw	r2,-12(fp)
 804f6ac:	10800117 	ldw	r2,4(r2)
 804f6b0:	e0fffd17 	ldw	r3,-12(fp)
 804f6b4:	18c00017 	ldw	r3,0(r3)
 804f6b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 804f6bc:	e0bffd17 	ldw	r2,-12(fp)
 804f6c0:	e0fffd17 	ldw	r3,-12(fp)
 804f6c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 804f6c8:	e0bffd17 	ldw	r2,-12(fp)
 804f6cc:	e0fffd17 	ldw	r3,-12(fp)
 804f6d0:	10c00015 	stw	r3,0(r2)
 804f6d4:	e0bffb17 	ldw	r2,-20(fp)
 804f6d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 804f6dc:	e0bffe17 	ldw	r2,-8(fp)
 804f6e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 804f6e4:	0001883a 	nop
 804f6e8:	e037883a 	mov	sp,fp
 804f6ec:	df000017 	ldw	fp,0(sp)
 804f6f0:	dec00104 	addi	sp,sp,4
 804f6f4:	f800283a 	ret

0804f6f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 804f6f8:	defffb04 	addi	sp,sp,-20
 804f6fc:	dfc00415 	stw	ra,16(sp)
 804f700:	df000315 	stw	fp,12(sp)
 804f704:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 804f708:	d0a00d17 	ldw	r2,-32716(gp)
 804f70c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 804f710:	d0a71117 	ldw	r2,-25532(gp)
 804f714:	10800044 	addi	r2,r2,1
 804f718:	d0a71115 	stw	r2,-25532(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 804f71c:	00002e06 	br	804f7d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 804f720:	e0bffd17 	ldw	r2,-12(fp)
 804f724:	10800017 	ldw	r2,0(r2)
 804f728:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 804f72c:	e0bffd17 	ldw	r2,-12(fp)
 804f730:	10800403 	ldbu	r2,16(r2)
 804f734:	10803fcc 	andi	r2,r2,255
 804f738:	10000426 	beq	r2,zero,804f74c <alt_tick+0x54>
 804f73c:	d0a71117 	ldw	r2,-25532(gp)
 804f740:	1000021e 	bne	r2,zero,804f74c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 804f744:	e0bffd17 	ldw	r2,-12(fp)
 804f748:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 804f74c:	e0bffd17 	ldw	r2,-12(fp)
 804f750:	10800217 	ldw	r2,8(r2)
 804f754:	d0e71117 	ldw	r3,-25532(gp)
 804f758:	18801d36 	bltu	r3,r2,804f7d0 <alt_tick+0xd8>
 804f75c:	e0bffd17 	ldw	r2,-12(fp)
 804f760:	10800403 	ldbu	r2,16(r2)
 804f764:	10803fcc 	andi	r2,r2,255
 804f768:	1000191e 	bne	r2,zero,804f7d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 804f76c:	e0bffd17 	ldw	r2,-12(fp)
 804f770:	10800317 	ldw	r2,12(r2)
 804f774:	e0fffd17 	ldw	r3,-12(fp)
 804f778:	18c00517 	ldw	r3,20(r3)
 804f77c:	1809883a 	mov	r4,r3
 804f780:	103ee83a 	callr	r2
 804f784:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 804f788:	e0bfff17 	ldw	r2,-4(fp)
 804f78c:	1000031e 	bne	r2,zero,804f79c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 804f790:	e13ffd17 	ldw	r4,-12(fp)
 804f794:	804f65c0 	call	804f65c <alt_alarm_stop>
 804f798:	00000d06 	br	804f7d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 804f79c:	e0bffd17 	ldw	r2,-12(fp)
 804f7a0:	10c00217 	ldw	r3,8(r2)
 804f7a4:	e0bfff17 	ldw	r2,-4(fp)
 804f7a8:	1887883a 	add	r3,r3,r2
 804f7ac:	e0bffd17 	ldw	r2,-12(fp)
 804f7b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 804f7b4:	e0bffd17 	ldw	r2,-12(fp)
 804f7b8:	10c00217 	ldw	r3,8(r2)
 804f7bc:	d0a71117 	ldw	r2,-25532(gp)
 804f7c0:	1880032e 	bgeu	r3,r2,804f7d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 804f7c4:	e0bffd17 	ldw	r2,-12(fp)
 804f7c8:	00c00044 	movi	r3,1
 804f7cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 804f7d0:	e0bffe17 	ldw	r2,-8(fp)
 804f7d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 804f7d8:	e0fffd17 	ldw	r3,-12(fp)
 804f7dc:	d0a00d04 	addi	r2,gp,-32716
 804f7e0:	18bfcf1e 	bne	r3,r2,804f720 <__alt_data_end+0xfffe7680>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 804f7e4:	0001883a 	nop
}
 804f7e8:	0001883a 	nop
 804f7ec:	e037883a 	mov	sp,fp
 804f7f0:	dfc00117 	ldw	ra,4(sp)
 804f7f4:	df000017 	ldw	fp,0(sp)
 804f7f8:	dec00204 	addi	sp,sp,8
 804f7fc:	f800283a 	ret

0804f800 <usleep>:
 804f800:	defffd04 	addi	sp,sp,-12
 804f804:	dfc00215 	stw	ra,8(sp)
 804f808:	df000115 	stw	fp,4(sp)
 804f80c:	df000104 	addi	fp,sp,4
 804f810:	e13fff15 	stw	r4,-4(fp)
 804f814:	e13fff17 	ldw	r4,-4(fp)
 804f818:	80520080 	call	8052008 <alt_busy_sleep>
 804f81c:	e037883a 	mov	sp,fp
 804f820:	dfc00117 	ldw	ra,4(sp)
 804f824:	df000017 	ldw	fp,0(sp)
 804f828:	dec00204 	addi	sp,sp,8
 804f82c:	f800283a 	ret

0804f830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 804f830:	defffe04 	addi	sp,sp,-8
 804f834:	dfc00115 	stw	ra,4(sp)
 804f838:	df000015 	stw	fp,0(sp)
 804f83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 804f840:	d0a00a17 	ldw	r2,-32728(gp)
 804f844:	10000326 	beq	r2,zero,804f854 <alt_get_errno+0x24>
 804f848:	d0a00a17 	ldw	r2,-32728(gp)
 804f84c:	103ee83a 	callr	r2
 804f850:	00000106 	br	804f858 <alt_get_errno+0x28>
 804f854:	d0a70b04 	addi	r2,gp,-25556
}
 804f858:	e037883a 	mov	sp,fp
 804f85c:	dfc00117 	ldw	ra,4(sp)
 804f860:	df000017 	ldw	fp,0(sp)
 804f864:	dec00204 	addi	sp,sp,8
 804f868:	f800283a 	ret

0804f86c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 804f86c:	defff904 	addi	sp,sp,-28
 804f870:	dfc00615 	stw	ra,24(sp)
 804f874:	df000515 	stw	fp,20(sp)
 804f878:	df000504 	addi	fp,sp,20
 804f87c:	e13ffd15 	stw	r4,-12(fp)
 804f880:	e17ffe15 	stw	r5,-8(fp)
 804f884:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804f888:	e0bffd17 	ldw	r2,-12(fp)
 804f88c:	10000816 	blt	r2,zero,804f8b0 <write+0x44>
 804f890:	01400304 	movi	r5,12
 804f894:	e13ffd17 	ldw	r4,-12(fp)
 804f898:	80418e00 	call	80418e0 <__mulsi3>
 804f89c:	1007883a 	mov	r3,r2
 804f8a0:	00820174 	movhi	r2,2053
 804f8a4:	108f0004 	addi	r2,r2,15360
 804f8a8:	1885883a 	add	r2,r3,r2
 804f8ac:	00000106 	br	804f8b4 <write+0x48>
 804f8b0:	0005883a 	mov	r2,zero
 804f8b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 804f8b8:	e0bffb17 	ldw	r2,-20(fp)
 804f8bc:	10002126 	beq	r2,zero,804f944 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 804f8c0:	e0bffb17 	ldw	r2,-20(fp)
 804f8c4:	10800217 	ldw	r2,8(r2)
 804f8c8:	108000cc 	andi	r2,r2,3
 804f8cc:	10001826 	beq	r2,zero,804f930 <write+0xc4>
 804f8d0:	e0bffb17 	ldw	r2,-20(fp)
 804f8d4:	10800017 	ldw	r2,0(r2)
 804f8d8:	10800617 	ldw	r2,24(r2)
 804f8dc:	10001426 	beq	r2,zero,804f930 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 804f8e0:	e0bffb17 	ldw	r2,-20(fp)
 804f8e4:	10800017 	ldw	r2,0(r2)
 804f8e8:	10800617 	ldw	r2,24(r2)
 804f8ec:	e0ffff17 	ldw	r3,-4(fp)
 804f8f0:	180d883a 	mov	r6,r3
 804f8f4:	e17ffe17 	ldw	r5,-8(fp)
 804f8f8:	e13ffb17 	ldw	r4,-20(fp)
 804f8fc:	103ee83a 	callr	r2
 804f900:	e0bffc15 	stw	r2,-16(fp)
 804f904:	e0bffc17 	ldw	r2,-16(fp)
 804f908:	1000070e 	bge	r2,zero,804f928 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 804f90c:	804f8300 	call	804f830 <alt_get_errno>
 804f910:	1007883a 	mov	r3,r2
 804f914:	e0bffc17 	ldw	r2,-16(fp)
 804f918:	0085c83a 	sub	r2,zero,r2
 804f91c:	18800015 	stw	r2,0(r3)
        return -1;
 804f920:	00bfffc4 	movi	r2,-1
 804f924:	00000c06 	br	804f958 <write+0xec>
      }
      return rval;
 804f928:	e0bffc17 	ldw	r2,-16(fp)
 804f92c:	00000a06 	br	804f958 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 804f930:	804f8300 	call	804f830 <alt_get_errno>
 804f934:	1007883a 	mov	r3,r2
 804f938:	00800344 	movi	r2,13
 804f93c:	18800015 	stw	r2,0(r3)
 804f940:	00000406 	br	804f954 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 804f944:	804f8300 	call	804f830 <alt_get_errno>
 804f948:	1007883a 	mov	r3,r2
 804f94c:	00801444 	movi	r2,81
 804f950:	18800015 	stw	r2,0(r3)
  }
  return -1;
 804f954:	00bfffc4 	movi	r2,-1
}
 804f958:	e037883a 	mov	sp,fp
 804f95c:	dfc00117 	ldw	ra,4(sp)
 804f960:	df000017 	ldw	fp,0(sp)
 804f964:	dec00204 	addi	sp,sp,8
 804f968:	f800283a 	ret

0804f96c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 804f96c:	defffd04 	addi	sp,sp,-12
 804f970:	dfc00215 	stw	ra,8(sp)
 804f974:	df000115 	stw	fp,4(sp)
 804f978:	df000104 	addi	fp,sp,4
 804f97c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 804f980:	d1600704 	addi	r5,gp,-32740
 804f984:	e13fff17 	ldw	r4,-4(fp)
 804f988:	80521bc0 	call	80521bc <alt_dev_llist_insert>
}
 804f98c:	e037883a 	mov	sp,fp
 804f990:	dfc00117 	ldw	ra,4(sp)
 804f994:	df000017 	ldw	fp,0(sp)
 804f998:	dec00204 	addi	sp,sp,8
 804f99c:	f800283a 	ret

0804f9a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 804f9a0:	defffd04 	addi	sp,sp,-12
 804f9a4:	dfc00215 	stw	ra,8(sp)
 804f9a8:	df000115 	stw	fp,4(sp)
 804f9ac:	df000104 	addi	fp,sp,4
 804f9b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( TOP_LEVEL, top_level);
 804f9b4:	80528500 	call	8052850 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 804f9b8:	00800044 	movi	r2,1
 804f9bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 804f9c0:	0001883a 	nop
 804f9c4:	e037883a 	mov	sp,fp
 804f9c8:	dfc00117 	ldw	ra,4(sp)
 804f9cc:	df000017 	ldw	fp,0(sp)
 804f9d0:	dec00204 	addi	sp,sp,8
 804f9d4:	f800283a 	ret

0804f9d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 804f9d8:	defffd04 	addi	sp,sp,-12
 804f9dc:	dfc00215 	stw	ra,8(sp)
 804f9e0:	df000115 	stw	fp,4(sp)
 804f9e4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 804f9e8:	01c0fa04 	movi	r7,1000
 804f9ec:	01800044 	movi	r6,1
 804f9f0:	000b883a 	mov	r5,zero
 804f9f4:	01020234 	movhi	r4,2056
 804f9f8:	210c8804 	addi	r4,r4,12832
 804f9fc:	80507c80 	call	80507c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 804fa00:	000d883a 	mov	r6,zero
 804fa04:	000b883a 	mov	r5,zero
 804fa08:	01020174 	movhi	r4,2053
 804fa0c:	210f6a04 	addi	r4,r4,15784
 804fa10:	804fe4c0 	call	804fe4c <altera_avalon_jtag_uart_init>
 804fa14:	01020174 	movhi	r4,2053
 804fa18:	210f6004 	addi	r4,r4,15744
 804fa1c:	804f96c0 	call	804f96c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 804fa20:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 804fa24:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 804fa28:	01bfffc4 	movi	r6,-1
 804fa2c:	017fffc4 	movi	r5,-1
 804fa30:	01020174 	movhi	r4,2053
 804fa34:	21137804 	addi	r4,r4,19936
 804fa38:	80509980 	call	8050998 <altera_modular_adc_init>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 804fa3c:	00820174 	movhi	r2,2053
 804fa40:	10938704 	addi	r2,r2,19996
 804fa44:	10800a17 	ldw	r2,40(r2)
 804fa48:	10800104 	addi	r2,r2,4
 804fa4c:	10800017 	ldw	r2,0(r2)
 804fa50:	10ffffcc 	andi	r3,r2,65535
 804fa54:	00820174 	movhi	r2,2053
 804fa58:	10938704 	addi	r2,r2,19996
 804fa5c:	10c00c15 	stw	r3,48(r2)
 804fa60:	00820174 	movhi	r2,2053
 804fa64:	10938704 	addi	r2,r2,19996
 804fa68:	10800a17 	ldw	r2,40(r2)
 804fa6c:	10800104 	addi	r2,r2,4
 804fa70:	10800017 	ldw	r2,0(r2)
 804fa74:	1006d43a 	srli	r3,r2,16
 804fa78:	00820174 	movhi	r2,2053
 804fa7c:	10938704 	addi	r2,r2,19996
 804fa80:	10c00d15 	stw	r3,52(r2)
 804fa84:	00820174 	movhi	r2,2053
 804fa88:	10938704 	addi	r2,r2,19996
 804fa8c:	10800c17 	ldw	r2,48(r2)
 804fa90:	10801068 	cmpgeui	r2,r2,65
 804fa94:	1000081e 	bne	r2,zero,804fab8 <alt_sys_init+0xe0>
 804fa98:	00820174 	movhi	r2,2053
 804fa9c:	10938704 	addi	r2,r2,19996
 804faa0:	00c00fc4 	movi	r3,63
 804faa4:	10c00f15 	stw	r3,60(r2)
 804faa8:	00820174 	movhi	r2,2053
 804faac:	10938704 	addi	r2,r2,19996
 804fab0:	00c00184 	movi	r3,6
 804fab4:	10c01015 	stw	r3,64(r2)
 804fab8:	00820174 	movhi	r2,2053
 804fabc:	10938704 	addi	r2,r2,19996
 804fac0:	10800d17 	ldw	r2,52(r2)
 804fac4:	10800868 	cmpgeui	r2,r2,33
 804fac8:	1000041e 	bne	r2,zero,804fadc <alt_sys_init+0x104>
 804facc:	00820174 	movhi	r2,2053
 804fad0:	10938704 	addi	r2,r2,19996
 804fad4:	00c007c4 	movi	r3,31
 804fad8:	10c01115 	stw	r3,68(r2)
 804fadc:	01020174 	movhi	r4,2053
 804fae0:	21138704 	addi	r4,r4,19996
 804fae4:	8050db00 	call	8050db0 <alt_up_char_buffer_init>
 804fae8:	01020174 	movhi	r4,2053
 804faec:	21138704 	addi	r4,r4,19996
 804faf0:	804f96c0 	call	804f96c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 804faf4:	00820174 	movhi	r2,2053
 804faf8:	10939904 	addi	r2,r2,20068
 804fafc:	10800a17 	ldw	r2,40(r2)
 804fb00:	10800017 	ldw	r2,0(r2)
 804fb04:	1007883a 	mov	r3,r2
 804fb08:	00820174 	movhi	r2,2053
 804fb0c:	10939904 	addi	r2,r2,20068
 804fb10:	10c00b15 	stw	r3,44(r2)
 804fb14:	00820174 	movhi	r2,2053
 804fb18:	10939904 	addi	r2,r2,20068
 804fb1c:	10800a17 	ldw	r2,40(r2)
 804fb20:	10800104 	addi	r2,r2,4
 804fb24:	10800017 	ldw	r2,0(r2)
 804fb28:	1007883a 	mov	r3,r2
 804fb2c:	00820174 	movhi	r2,2053
 804fb30:	10939904 	addi	r2,r2,20068
 804fb34:	10c00c15 	stw	r3,48(r2)
 804fb38:	00820174 	movhi	r2,2053
 804fb3c:	10939904 	addi	r2,r2,20068
 804fb40:	10800a17 	ldw	r2,40(r2)
 804fb44:	10800204 	addi	r2,r2,8
 804fb48:	10800017 	ldw	r2,0(r2)
 804fb4c:	10ffffcc 	andi	r3,r2,65535
 804fb50:	00820174 	movhi	r2,2053
 804fb54:	10939904 	addi	r2,r2,20068
 804fb58:	10c00f15 	stw	r3,60(r2)
 804fb5c:	00820174 	movhi	r2,2053
 804fb60:	10939904 	addi	r2,r2,20068
 804fb64:	10800a17 	ldw	r2,40(r2)
 804fb68:	10800204 	addi	r2,r2,8
 804fb6c:	10800017 	ldw	r2,0(r2)
 804fb70:	1006d43a 	srli	r3,r2,16
 804fb74:	00820174 	movhi	r2,2053
 804fb78:	10939904 	addi	r2,r2,20068
 804fb7c:	10c01015 	stw	r3,64(r2)
 804fb80:	00820174 	movhi	r2,2053
 804fb84:	10939904 	addi	r2,r2,20068
 804fb88:	10800a17 	ldw	r2,40(r2)
 804fb8c:	10800304 	addi	r2,r2,12
 804fb90:	10800017 	ldw	r2,0(r2)
 804fb94:	1005d07a 	srai	r2,r2,1
 804fb98:	10c0004c 	andi	r3,r2,1
 804fb9c:	00820174 	movhi	r2,2053
 804fba0:	10939904 	addi	r2,r2,20068
 804fba4:	10c00d15 	stw	r3,52(r2)
 804fba8:	00820174 	movhi	r2,2053
 804fbac:	10939904 	addi	r2,r2,20068
 804fbb0:	10800a17 	ldw	r2,40(r2)
 804fbb4:	10800304 	addi	r2,r2,12
 804fbb8:	10800017 	ldw	r2,0(r2)
 804fbbc:	1005d13a 	srai	r2,r2,4
 804fbc0:	10c003cc 	andi	r3,r2,15
 804fbc4:	00820174 	movhi	r2,2053
 804fbc8:	10939904 	addi	r2,r2,20068
 804fbcc:	10c00e15 	stw	r3,56(r2)
 804fbd0:	00820174 	movhi	r2,2053
 804fbd4:	10939904 	addi	r2,r2,20068
 804fbd8:	10800a17 	ldw	r2,40(r2)
 804fbdc:	10800304 	addi	r2,r2,12
 804fbe0:	10800017 	ldw	r2,0(r2)
 804fbe4:	1005d43a 	srai	r2,r2,16
 804fbe8:	e0bfff05 	stb	r2,-4(fp)
 804fbec:	00820174 	movhi	r2,2053
 804fbf0:	10939904 	addi	r2,r2,20068
 804fbf4:	10800a17 	ldw	r2,40(r2)
 804fbf8:	10800304 	addi	r2,r2,12
 804fbfc:	10800017 	ldw	r2,0(r2)
 804fc00:	1004d63a 	srli	r2,r2,24
 804fc04:	e0bfff45 	stb	r2,-3(fp)
 804fc08:	00820174 	movhi	r2,2053
 804fc0c:	10939904 	addi	r2,r2,20068
 804fc10:	10800e17 	ldw	r2,56(r2)
 804fc14:	10800058 	cmpnei	r2,r2,1
 804fc18:	1000041e 	bne	r2,zero,804fc2c <alt_sys_init+0x254>
 804fc1c:	00820174 	movhi	r2,2053
 804fc20:	10939904 	addi	r2,r2,20068
 804fc24:	10001115 	stw	zero,68(r2)
 804fc28:	00000e06 	br	804fc64 <alt_sys_init+0x28c>
 804fc2c:	00820174 	movhi	r2,2053
 804fc30:	10939904 	addi	r2,r2,20068
 804fc34:	10800e17 	ldw	r2,56(r2)
 804fc38:	10800098 	cmpnei	r2,r2,2
 804fc3c:	1000051e 	bne	r2,zero,804fc54 <alt_sys_init+0x27c>
 804fc40:	00820174 	movhi	r2,2053
 804fc44:	10939904 	addi	r2,r2,20068
 804fc48:	00c00044 	movi	r3,1
 804fc4c:	10c01115 	stw	r3,68(r2)
 804fc50:	00000406 	br	804fc64 <alt_sys_init+0x28c>
 804fc54:	00820174 	movhi	r2,2053
 804fc58:	10939904 	addi	r2,r2,20068
 804fc5c:	00c00084 	movi	r3,2
 804fc60:	10c01115 	stw	r3,68(r2)
 804fc64:	e0bfff03 	ldbu	r2,-4(fp)
 804fc68:	00c00804 	movi	r3,32
 804fc6c:	1885c83a 	sub	r2,r3,r2
 804fc70:	00ffffc4 	movi	r3,-1
 804fc74:	1886d83a 	srl	r3,r3,r2
 804fc78:	00820174 	movhi	r2,2053
 804fc7c:	10939904 	addi	r2,r2,20068
 804fc80:	10c01215 	stw	r3,72(r2)
 804fc84:	e0ffff03 	ldbu	r3,-4(fp)
 804fc88:	00820174 	movhi	r2,2053
 804fc8c:	10939904 	addi	r2,r2,20068
 804fc90:	10801117 	ldw	r2,68(r2)
 804fc94:	1887883a 	add	r3,r3,r2
 804fc98:	00820174 	movhi	r2,2053
 804fc9c:	10939904 	addi	r2,r2,20068
 804fca0:	10c01315 	stw	r3,76(r2)
 804fca4:	e0bfff43 	ldbu	r2,-3(fp)
 804fca8:	00c00804 	movi	r3,32
 804fcac:	1885c83a 	sub	r2,r3,r2
 804fcb0:	00ffffc4 	movi	r3,-1
 804fcb4:	1886d83a 	srl	r3,r3,r2
 804fcb8:	00820174 	movhi	r2,2053
 804fcbc:	10939904 	addi	r2,r2,20068
 804fcc0:	10c01415 	stw	r3,80(r2)
 804fcc4:	01020174 	movhi	r4,2053
 804fcc8:	21139904 	addi	r4,r4,20068
 804fccc:	804f96c0 	call	804f96c <alt_dev_reg>
}
 804fcd0:	0001883a 	nop
 804fcd4:	e037883a 	mov	sp,fp
 804fcd8:	dfc00117 	ldw	ra,4(sp)
 804fcdc:	df000017 	ldw	fp,0(sp)
 804fce0:	dec00204 	addi	sp,sp,8
 804fce4:	f800283a 	ret

0804fce8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 804fce8:	defffa04 	addi	sp,sp,-24
 804fcec:	dfc00515 	stw	ra,20(sp)
 804fcf0:	df000415 	stw	fp,16(sp)
 804fcf4:	df000404 	addi	fp,sp,16
 804fcf8:	e13ffd15 	stw	r4,-12(fp)
 804fcfc:	e17ffe15 	stw	r5,-8(fp)
 804fd00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 804fd04:	e0bffd17 	ldw	r2,-12(fp)
 804fd08:	10800017 	ldw	r2,0(r2)
 804fd0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 804fd10:	e0bffc17 	ldw	r2,-16(fp)
 804fd14:	10c00a04 	addi	r3,r2,40
 804fd18:	e0bffd17 	ldw	r2,-12(fp)
 804fd1c:	10800217 	ldw	r2,8(r2)
 804fd20:	100f883a 	mov	r7,r2
 804fd24:	e1bfff17 	ldw	r6,-4(fp)
 804fd28:	e17ffe17 	ldw	r5,-8(fp)
 804fd2c:	1809883a 	mov	r4,r3
 804fd30:	80503100 	call	8050310 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 804fd34:	e037883a 	mov	sp,fp
 804fd38:	dfc00117 	ldw	ra,4(sp)
 804fd3c:	df000017 	ldw	fp,0(sp)
 804fd40:	dec00204 	addi	sp,sp,8
 804fd44:	f800283a 	ret

0804fd48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 804fd48:	defffa04 	addi	sp,sp,-24
 804fd4c:	dfc00515 	stw	ra,20(sp)
 804fd50:	df000415 	stw	fp,16(sp)
 804fd54:	df000404 	addi	fp,sp,16
 804fd58:	e13ffd15 	stw	r4,-12(fp)
 804fd5c:	e17ffe15 	stw	r5,-8(fp)
 804fd60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 804fd64:	e0bffd17 	ldw	r2,-12(fp)
 804fd68:	10800017 	ldw	r2,0(r2)
 804fd6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 804fd70:	e0bffc17 	ldw	r2,-16(fp)
 804fd74:	10c00a04 	addi	r3,r2,40
 804fd78:	e0bffd17 	ldw	r2,-12(fp)
 804fd7c:	10800217 	ldw	r2,8(r2)
 804fd80:	100f883a 	mov	r7,r2
 804fd84:	e1bfff17 	ldw	r6,-4(fp)
 804fd88:	e17ffe17 	ldw	r5,-8(fp)
 804fd8c:	1809883a 	mov	r4,r3
 804fd90:	805052c0 	call	805052c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 804fd94:	e037883a 	mov	sp,fp
 804fd98:	dfc00117 	ldw	ra,4(sp)
 804fd9c:	df000017 	ldw	fp,0(sp)
 804fda0:	dec00204 	addi	sp,sp,8
 804fda4:	f800283a 	ret

0804fda8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 804fda8:	defffc04 	addi	sp,sp,-16
 804fdac:	dfc00315 	stw	ra,12(sp)
 804fdb0:	df000215 	stw	fp,8(sp)
 804fdb4:	df000204 	addi	fp,sp,8
 804fdb8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 804fdbc:	e0bfff17 	ldw	r2,-4(fp)
 804fdc0:	10800017 	ldw	r2,0(r2)
 804fdc4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 804fdc8:	e0bffe17 	ldw	r2,-8(fp)
 804fdcc:	10c00a04 	addi	r3,r2,40
 804fdd0:	e0bfff17 	ldw	r2,-4(fp)
 804fdd4:	10800217 	ldw	r2,8(r2)
 804fdd8:	100b883a 	mov	r5,r2
 804fddc:	1809883a 	mov	r4,r3
 804fde0:	80501b80 	call	80501b8 <altera_avalon_jtag_uart_close>
}
 804fde4:	e037883a 	mov	sp,fp
 804fde8:	dfc00117 	ldw	ra,4(sp)
 804fdec:	df000017 	ldw	fp,0(sp)
 804fdf0:	dec00204 	addi	sp,sp,8
 804fdf4:	f800283a 	ret

0804fdf8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 804fdf8:	defffa04 	addi	sp,sp,-24
 804fdfc:	dfc00515 	stw	ra,20(sp)
 804fe00:	df000415 	stw	fp,16(sp)
 804fe04:	df000404 	addi	fp,sp,16
 804fe08:	e13ffd15 	stw	r4,-12(fp)
 804fe0c:	e17ffe15 	stw	r5,-8(fp)
 804fe10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 804fe14:	e0bffd17 	ldw	r2,-12(fp)
 804fe18:	10800017 	ldw	r2,0(r2)
 804fe1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 804fe20:	e0bffc17 	ldw	r2,-16(fp)
 804fe24:	10800a04 	addi	r2,r2,40
 804fe28:	e1bfff17 	ldw	r6,-4(fp)
 804fe2c:	e17ffe17 	ldw	r5,-8(fp)
 804fe30:	1009883a 	mov	r4,r2
 804fe34:	80502200 	call	8050220 <altera_avalon_jtag_uart_ioctl>
}
 804fe38:	e037883a 	mov	sp,fp
 804fe3c:	dfc00117 	ldw	ra,4(sp)
 804fe40:	df000017 	ldw	fp,0(sp)
 804fe44:	dec00204 	addi	sp,sp,8
 804fe48:	f800283a 	ret

0804fe4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 804fe4c:	defffa04 	addi	sp,sp,-24
 804fe50:	dfc00515 	stw	ra,20(sp)
 804fe54:	df000415 	stw	fp,16(sp)
 804fe58:	df000404 	addi	fp,sp,16
 804fe5c:	e13ffd15 	stw	r4,-12(fp)
 804fe60:	e17ffe15 	stw	r5,-8(fp)
 804fe64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 804fe68:	e0bffd17 	ldw	r2,-12(fp)
 804fe6c:	00c00044 	movi	r3,1
 804fe70:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 804fe74:	e0bffd17 	ldw	r2,-12(fp)
 804fe78:	10800017 	ldw	r2,0(r2)
 804fe7c:	10800104 	addi	r2,r2,4
 804fe80:	1007883a 	mov	r3,r2
 804fe84:	e0bffd17 	ldw	r2,-12(fp)
 804fe88:	10800817 	ldw	r2,32(r2)
 804fe8c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 804fe90:	e0bffe17 	ldw	r2,-8(fp)
 804fe94:	e0ffff17 	ldw	r3,-4(fp)
 804fe98:	d8000015 	stw	zero,0(sp)
 804fe9c:	e1fffd17 	ldw	r7,-12(fp)
 804fea0:	01820174 	movhi	r6,2053
 804fea4:	31bfc304 	addi	r6,r6,-244
 804fea8:	180b883a 	mov	r5,r3
 804feac:	1009883a 	mov	r4,r2
 804feb0:	804ed980 	call	804ed98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 804feb4:	e0bffd17 	ldw	r2,-12(fp)
 804feb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 804febc:	e0bffd17 	ldw	r2,-12(fp)
 804fec0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 804fec4:	d0e71017 	ldw	r3,-25536(gp)
 804fec8:	e1fffd17 	ldw	r7,-12(fp)
 804fecc:	01820174 	movhi	r6,2053
 804fed0:	31804604 	addi	r6,r6,280
 804fed4:	180b883a 	mov	r5,r3
 804fed8:	1009883a 	mov	r4,r2
 804fedc:	804ea380 	call	804ea38 <alt_alarm_start>
 804fee0:	1000040e 	bge	r2,zero,804fef4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 804fee4:	e0fffd17 	ldw	r3,-12(fp)
 804fee8:	00a00034 	movhi	r2,32768
 804feec:	10bfffc4 	addi	r2,r2,-1
 804fef0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 804fef4:	0001883a 	nop
 804fef8:	e037883a 	mov	sp,fp
 804fefc:	dfc00117 	ldw	ra,4(sp)
 804ff00:	df000017 	ldw	fp,0(sp)
 804ff04:	dec00204 	addi	sp,sp,8
 804ff08:	f800283a 	ret

0804ff0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 804ff0c:	defff804 	addi	sp,sp,-32
 804ff10:	df000715 	stw	fp,28(sp)
 804ff14:	df000704 	addi	fp,sp,28
 804ff18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 804ff1c:	e0bfff17 	ldw	r2,-4(fp)
 804ff20:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 804ff24:	e0bffb17 	ldw	r2,-20(fp)
 804ff28:	10800017 	ldw	r2,0(r2)
 804ff2c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 804ff30:	e0bffc17 	ldw	r2,-16(fp)
 804ff34:	10800104 	addi	r2,r2,4
 804ff38:	10800037 	ldwio	r2,0(r2)
 804ff3c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 804ff40:	e0bffd17 	ldw	r2,-12(fp)
 804ff44:	1080c00c 	andi	r2,r2,768
 804ff48:	10006d26 	beq	r2,zero,8050100 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 804ff4c:	e0bffd17 	ldw	r2,-12(fp)
 804ff50:	1080400c 	andi	r2,r2,256
 804ff54:	10003526 	beq	r2,zero,805002c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 804ff58:	00800074 	movhi	r2,1
 804ff5c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 804ff60:	e0bffb17 	ldw	r2,-20(fp)
 804ff64:	10800a17 	ldw	r2,40(r2)
 804ff68:	10800044 	addi	r2,r2,1
 804ff6c:	1081ffcc 	andi	r2,r2,2047
 804ff70:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 804ff74:	e0bffb17 	ldw	r2,-20(fp)
 804ff78:	10c00b17 	ldw	r3,44(r2)
 804ff7c:	e0bffe17 	ldw	r2,-8(fp)
 804ff80:	18801526 	beq	r3,r2,804ffd8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 804ff84:	e0bffc17 	ldw	r2,-16(fp)
 804ff88:	10800037 	ldwio	r2,0(r2)
 804ff8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 804ff90:	e0bff917 	ldw	r2,-28(fp)
 804ff94:	10a0000c 	andi	r2,r2,32768
 804ff98:	10001126 	beq	r2,zero,804ffe0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 804ff9c:	e0bffb17 	ldw	r2,-20(fp)
 804ffa0:	10800a17 	ldw	r2,40(r2)
 804ffa4:	e0fff917 	ldw	r3,-28(fp)
 804ffa8:	1809883a 	mov	r4,r3
 804ffac:	e0fffb17 	ldw	r3,-20(fp)
 804ffb0:	1885883a 	add	r2,r3,r2
 804ffb4:	10800e04 	addi	r2,r2,56
 804ffb8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 804ffbc:	e0bffb17 	ldw	r2,-20(fp)
 804ffc0:	10800a17 	ldw	r2,40(r2)
 804ffc4:	10800044 	addi	r2,r2,1
 804ffc8:	10c1ffcc 	andi	r3,r2,2047
 804ffcc:	e0bffb17 	ldw	r2,-20(fp)
 804ffd0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 804ffd4:	003fe206 	br	804ff60 <__alt_data_end+0xfffe7ec0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 804ffd8:	0001883a 	nop
 804ffdc:	00000106 	br	804ffe4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 804ffe0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 804ffe4:	e0bff917 	ldw	r2,-28(fp)
 804ffe8:	10bfffec 	andhi	r2,r2,65535
 804ffec:	10000f26 	beq	r2,zero,805002c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 804fff0:	e0bffb17 	ldw	r2,-20(fp)
 804fff4:	10c00817 	ldw	r3,32(r2)
 804fff8:	00bfff84 	movi	r2,-2
 804fffc:	1886703a 	and	r3,r3,r2
 8050000:	e0bffb17 	ldw	r2,-20(fp)
 8050004:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8050008:	e0bffc17 	ldw	r2,-16(fp)
 805000c:	10800104 	addi	r2,r2,4
 8050010:	1007883a 	mov	r3,r2
 8050014:	e0bffb17 	ldw	r2,-20(fp)
 8050018:	10800817 	ldw	r2,32(r2)
 805001c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8050020:	e0bffc17 	ldw	r2,-16(fp)
 8050024:	10800104 	addi	r2,r2,4
 8050028:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 805002c:	e0bffd17 	ldw	r2,-12(fp)
 8050030:	1080800c 	andi	r2,r2,512
 8050034:	103fbe26 	beq	r2,zero,804ff30 <__alt_data_end+0xfffe7e90>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8050038:	e0bffd17 	ldw	r2,-12(fp)
 805003c:	1004d43a 	srli	r2,r2,16
 8050040:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8050044:	00001406 	br	8050098 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8050048:	e0bffc17 	ldw	r2,-16(fp)
 805004c:	e0fffb17 	ldw	r3,-20(fp)
 8050050:	18c00d17 	ldw	r3,52(r3)
 8050054:	e13ffb17 	ldw	r4,-20(fp)
 8050058:	20c7883a 	add	r3,r4,r3
 805005c:	18c20e04 	addi	r3,r3,2104
 8050060:	18c00003 	ldbu	r3,0(r3)
 8050064:	18c03fcc 	andi	r3,r3,255
 8050068:	18c0201c 	xori	r3,r3,128
 805006c:	18ffe004 	addi	r3,r3,-128
 8050070:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8050074:	e0bffb17 	ldw	r2,-20(fp)
 8050078:	10800d17 	ldw	r2,52(r2)
 805007c:	10800044 	addi	r2,r2,1
 8050080:	10c1ffcc 	andi	r3,r2,2047
 8050084:	e0bffb17 	ldw	r2,-20(fp)
 8050088:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 805008c:	e0bffa17 	ldw	r2,-24(fp)
 8050090:	10bfffc4 	addi	r2,r2,-1
 8050094:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8050098:	e0bffa17 	ldw	r2,-24(fp)
 805009c:	10000526 	beq	r2,zero,80500b4 <altera_avalon_jtag_uart_irq+0x1a8>
 80500a0:	e0bffb17 	ldw	r2,-20(fp)
 80500a4:	10c00d17 	ldw	r3,52(r2)
 80500a8:	e0bffb17 	ldw	r2,-20(fp)
 80500ac:	10800c17 	ldw	r2,48(r2)
 80500b0:	18bfe51e 	bne	r3,r2,8050048 <__alt_data_end+0xfffe7fa8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80500b4:	e0bffa17 	ldw	r2,-24(fp)
 80500b8:	103f9d26 	beq	r2,zero,804ff30 <__alt_data_end+0xfffe7e90>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80500bc:	e0bffb17 	ldw	r2,-20(fp)
 80500c0:	10c00817 	ldw	r3,32(r2)
 80500c4:	00bfff44 	movi	r2,-3
 80500c8:	1886703a 	and	r3,r3,r2
 80500cc:	e0bffb17 	ldw	r2,-20(fp)
 80500d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80500d4:	e0bffb17 	ldw	r2,-20(fp)
 80500d8:	10800017 	ldw	r2,0(r2)
 80500dc:	10800104 	addi	r2,r2,4
 80500e0:	1007883a 	mov	r3,r2
 80500e4:	e0bffb17 	ldw	r2,-20(fp)
 80500e8:	10800817 	ldw	r2,32(r2)
 80500ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80500f0:	e0bffc17 	ldw	r2,-16(fp)
 80500f4:	10800104 	addi	r2,r2,4
 80500f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80500fc:	003f8c06 	br	804ff30 <__alt_data_end+0xfffe7e90>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8050100:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8050104:	0001883a 	nop
 8050108:	e037883a 	mov	sp,fp
 805010c:	df000017 	ldw	fp,0(sp)
 8050110:	dec00104 	addi	sp,sp,4
 8050114:	f800283a 	ret

08050118 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8050118:	defff804 	addi	sp,sp,-32
 805011c:	df000715 	stw	fp,28(sp)
 8050120:	df000704 	addi	fp,sp,28
 8050124:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8050128:	e0bffb17 	ldw	r2,-20(fp)
 805012c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8050130:	e0bff917 	ldw	r2,-28(fp)
 8050134:	10800017 	ldw	r2,0(r2)
 8050138:	10800104 	addi	r2,r2,4
 805013c:	10800037 	ldwio	r2,0(r2)
 8050140:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8050144:	e0bffa17 	ldw	r2,-24(fp)
 8050148:	1081000c 	andi	r2,r2,1024
 805014c:	10000b26 	beq	r2,zero,805017c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8050150:	e0bff917 	ldw	r2,-28(fp)
 8050154:	10800017 	ldw	r2,0(r2)
 8050158:	10800104 	addi	r2,r2,4
 805015c:	1007883a 	mov	r3,r2
 8050160:	e0bff917 	ldw	r2,-28(fp)
 8050164:	10800817 	ldw	r2,32(r2)
 8050168:	10810014 	ori	r2,r2,1024
 805016c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8050170:	e0bff917 	ldw	r2,-28(fp)
 8050174:	10000915 	stw	zero,36(r2)
 8050178:	00000a06 	br	80501a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 805017c:	e0bff917 	ldw	r2,-28(fp)
 8050180:	10c00917 	ldw	r3,36(r2)
 8050184:	00a00034 	movhi	r2,32768
 8050188:	10bfff04 	addi	r2,r2,-4
 805018c:	10c00536 	bltu	r2,r3,80501a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8050190:	e0bff917 	ldw	r2,-28(fp)
 8050194:	10800917 	ldw	r2,36(r2)
 8050198:	10c00044 	addi	r3,r2,1
 805019c:	e0bff917 	ldw	r2,-28(fp)
 80501a0:	10c00915 	stw	r3,36(r2)
 80501a4:	d0a71017 	ldw	r2,-25536(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80501a8:	e037883a 	mov	sp,fp
 80501ac:	df000017 	ldw	fp,0(sp)
 80501b0:	dec00104 	addi	sp,sp,4
 80501b4:	f800283a 	ret

080501b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80501b8:	defffd04 	addi	sp,sp,-12
 80501bc:	df000215 	stw	fp,8(sp)
 80501c0:	df000204 	addi	fp,sp,8
 80501c4:	e13ffe15 	stw	r4,-8(fp)
 80501c8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80501cc:	00000506 	br	80501e4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80501d0:	e0bfff17 	ldw	r2,-4(fp)
 80501d4:	1090000c 	andi	r2,r2,16384
 80501d8:	10000226 	beq	r2,zero,80501e4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80501dc:	00bffd44 	movi	r2,-11
 80501e0:	00000b06 	br	8050210 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80501e4:	e0bffe17 	ldw	r2,-8(fp)
 80501e8:	10c00d17 	ldw	r3,52(r2)
 80501ec:	e0bffe17 	ldw	r2,-8(fp)
 80501f0:	10800c17 	ldw	r2,48(r2)
 80501f4:	18800526 	beq	r3,r2,805020c <altera_avalon_jtag_uart_close+0x54>
 80501f8:	e0bffe17 	ldw	r2,-8(fp)
 80501fc:	10c00917 	ldw	r3,36(r2)
 8050200:	e0bffe17 	ldw	r2,-8(fp)
 8050204:	10800117 	ldw	r2,4(r2)
 8050208:	18bff136 	bltu	r3,r2,80501d0 <__alt_data_end+0xfffe8130>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 805020c:	0005883a 	mov	r2,zero
}
 8050210:	e037883a 	mov	sp,fp
 8050214:	df000017 	ldw	fp,0(sp)
 8050218:	dec00104 	addi	sp,sp,4
 805021c:	f800283a 	ret

08050220 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8050220:	defffa04 	addi	sp,sp,-24
 8050224:	df000515 	stw	fp,20(sp)
 8050228:	df000504 	addi	fp,sp,20
 805022c:	e13ffd15 	stw	r4,-12(fp)
 8050230:	e17ffe15 	stw	r5,-8(fp)
 8050234:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8050238:	00bff9c4 	movi	r2,-25
 805023c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8050240:	e0bffe17 	ldw	r2,-8(fp)
 8050244:	10da8060 	cmpeqi	r3,r2,27137
 8050248:	1800031e 	bne	r3,zero,8050258 <altera_avalon_jtag_uart_ioctl+0x38>
 805024c:	109a80a0 	cmpeqi	r2,r2,27138
 8050250:	1000181e 	bne	r2,zero,80502b4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8050254:	00002906 	br	80502fc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8050258:	e0bffd17 	ldw	r2,-12(fp)
 805025c:	10c00117 	ldw	r3,4(r2)
 8050260:	00a00034 	movhi	r2,32768
 8050264:	10bfffc4 	addi	r2,r2,-1
 8050268:	18802126 	beq	r3,r2,80502f0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 805026c:	e0bfff17 	ldw	r2,-4(fp)
 8050270:	10800017 	ldw	r2,0(r2)
 8050274:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8050278:	e0bffc17 	ldw	r2,-16(fp)
 805027c:	10800090 	cmplti	r2,r2,2
 8050280:	1000061e 	bne	r2,zero,805029c <altera_avalon_jtag_uart_ioctl+0x7c>
 8050284:	e0fffc17 	ldw	r3,-16(fp)
 8050288:	00a00034 	movhi	r2,32768
 805028c:	10bfffc4 	addi	r2,r2,-1
 8050290:	18800226 	beq	r3,r2,805029c <altera_avalon_jtag_uart_ioctl+0x7c>
 8050294:	e0bffc17 	ldw	r2,-16(fp)
 8050298:	00000206 	br	80502a4 <altera_avalon_jtag_uart_ioctl+0x84>
 805029c:	00a00034 	movhi	r2,32768
 80502a0:	10bfff84 	addi	r2,r2,-2
 80502a4:	e0fffd17 	ldw	r3,-12(fp)
 80502a8:	18800115 	stw	r2,4(r3)
      rc = 0;
 80502ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80502b0:	00000f06 	br	80502f0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80502b4:	e0bffd17 	ldw	r2,-12(fp)
 80502b8:	10c00117 	ldw	r3,4(r2)
 80502bc:	00a00034 	movhi	r2,32768
 80502c0:	10bfffc4 	addi	r2,r2,-1
 80502c4:	18800c26 	beq	r3,r2,80502f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80502c8:	e0bffd17 	ldw	r2,-12(fp)
 80502cc:	10c00917 	ldw	r3,36(r2)
 80502d0:	e0bffd17 	ldw	r2,-12(fp)
 80502d4:	10800117 	ldw	r2,4(r2)
 80502d8:	1885803a 	cmpltu	r2,r3,r2
 80502dc:	10c03fcc 	andi	r3,r2,255
 80502e0:	e0bfff17 	ldw	r2,-4(fp)
 80502e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80502e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80502ec:	00000206 	br	80502f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80502f0:	0001883a 	nop
 80502f4:	00000106 	br	80502fc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80502f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80502fc:	e0bffb17 	ldw	r2,-20(fp)
}
 8050300:	e037883a 	mov	sp,fp
 8050304:	df000017 	ldw	fp,0(sp)
 8050308:	dec00104 	addi	sp,sp,4
 805030c:	f800283a 	ret

08050310 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8050310:	defff304 	addi	sp,sp,-52
 8050314:	dfc00c15 	stw	ra,48(sp)
 8050318:	df000b15 	stw	fp,44(sp)
 805031c:	df000b04 	addi	fp,sp,44
 8050320:	e13ffc15 	stw	r4,-16(fp)
 8050324:	e17ffd15 	stw	r5,-12(fp)
 8050328:	e1bffe15 	stw	r6,-8(fp)
 805032c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8050330:	e0bffd17 	ldw	r2,-12(fp)
 8050334:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8050338:	00004706 	br	8050458 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 805033c:	e0bffc17 	ldw	r2,-16(fp)
 8050340:	10800a17 	ldw	r2,40(r2)
 8050344:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8050348:	e0bffc17 	ldw	r2,-16(fp)
 805034c:	10800b17 	ldw	r2,44(r2)
 8050350:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8050354:	e0fff717 	ldw	r3,-36(fp)
 8050358:	e0bff817 	ldw	r2,-32(fp)
 805035c:	18800536 	bltu	r3,r2,8050374 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8050360:	e0fff717 	ldw	r3,-36(fp)
 8050364:	e0bff817 	ldw	r2,-32(fp)
 8050368:	1885c83a 	sub	r2,r3,r2
 805036c:	e0bff615 	stw	r2,-40(fp)
 8050370:	00000406 	br	8050384 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8050374:	00c20004 	movi	r3,2048
 8050378:	e0bff817 	ldw	r2,-32(fp)
 805037c:	1885c83a 	sub	r2,r3,r2
 8050380:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8050384:	e0bff617 	ldw	r2,-40(fp)
 8050388:	10001e26 	beq	r2,zero,8050404 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 805038c:	e0fffe17 	ldw	r3,-8(fp)
 8050390:	e0bff617 	ldw	r2,-40(fp)
 8050394:	1880022e 	bgeu	r3,r2,80503a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8050398:	e0bffe17 	ldw	r2,-8(fp)
 805039c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80503a0:	e0bffc17 	ldw	r2,-16(fp)
 80503a4:	10c00e04 	addi	r3,r2,56
 80503a8:	e0bff817 	ldw	r2,-32(fp)
 80503ac:	1885883a 	add	r2,r3,r2
 80503b0:	e1bff617 	ldw	r6,-40(fp)
 80503b4:	100b883a 	mov	r5,r2
 80503b8:	e13ff517 	ldw	r4,-44(fp)
 80503bc:	80438b40 	call	80438b4 <memcpy>
      ptr   += n;
 80503c0:	e0fff517 	ldw	r3,-44(fp)
 80503c4:	e0bff617 	ldw	r2,-40(fp)
 80503c8:	1885883a 	add	r2,r3,r2
 80503cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80503d0:	e0fffe17 	ldw	r3,-8(fp)
 80503d4:	e0bff617 	ldw	r2,-40(fp)
 80503d8:	1885c83a 	sub	r2,r3,r2
 80503dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80503e0:	e0fff817 	ldw	r3,-32(fp)
 80503e4:	e0bff617 	ldw	r2,-40(fp)
 80503e8:	1885883a 	add	r2,r3,r2
 80503ec:	10c1ffcc 	andi	r3,r2,2047
 80503f0:	e0bffc17 	ldw	r2,-16(fp)
 80503f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80503f8:	e0bffe17 	ldw	r2,-8(fp)
 80503fc:	00bfcf16 	blt	zero,r2,805033c <__alt_data_end+0xfffe829c>
 8050400:	00000106 	br	8050408 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8050404:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8050408:	e0fff517 	ldw	r3,-44(fp)
 805040c:	e0bffd17 	ldw	r2,-12(fp)
 8050410:	1880141e 	bne	r3,r2,8050464 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8050414:	e0bfff17 	ldw	r2,-4(fp)
 8050418:	1090000c 	andi	r2,r2,16384
 805041c:	1000131e 	bne	r2,zero,805046c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8050420:	0001883a 	nop
 8050424:	e0bffc17 	ldw	r2,-16(fp)
 8050428:	10c00a17 	ldw	r3,40(r2)
 805042c:	e0bff717 	ldw	r2,-36(fp)
 8050430:	1880051e 	bne	r3,r2,8050448 <altera_avalon_jtag_uart_read+0x138>
 8050434:	e0bffc17 	ldw	r2,-16(fp)
 8050438:	10c00917 	ldw	r3,36(r2)
 805043c:	e0bffc17 	ldw	r2,-16(fp)
 8050440:	10800117 	ldw	r2,4(r2)
 8050444:	18bff736 	bltu	r3,r2,8050424 <__alt_data_end+0xfffe8384>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8050448:	e0bffc17 	ldw	r2,-16(fp)
 805044c:	10c00a17 	ldw	r3,40(r2)
 8050450:	e0bff717 	ldw	r2,-36(fp)
 8050454:	18800726 	beq	r3,r2,8050474 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8050458:	e0bffe17 	ldw	r2,-8(fp)
 805045c:	00bfb716 	blt	zero,r2,805033c <__alt_data_end+0xfffe829c>
 8050460:	00000506 	br	8050478 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8050464:	0001883a 	nop
 8050468:	00000306 	br	8050478 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 805046c:	0001883a 	nop
 8050470:	00000106 	br	8050478 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8050474:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8050478:	e0fff517 	ldw	r3,-44(fp)
 805047c:	e0bffd17 	ldw	r2,-12(fp)
 8050480:	18801826 	beq	r3,r2,80504e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8050484:	0005303a 	rdctl	r2,status
 8050488:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 805048c:	e0fffb17 	ldw	r3,-20(fp)
 8050490:	00bfff84 	movi	r2,-2
 8050494:	1884703a 	and	r2,r3,r2
 8050498:	1001703a 	wrctl	status,r2
  
  return context;
 805049c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80504a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80504a4:	e0bffc17 	ldw	r2,-16(fp)
 80504a8:	10800817 	ldw	r2,32(r2)
 80504ac:	10c00054 	ori	r3,r2,1
 80504b0:	e0bffc17 	ldw	r2,-16(fp)
 80504b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80504b8:	e0bffc17 	ldw	r2,-16(fp)
 80504bc:	10800017 	ldw	r2,0(r2)
 80504c0:	10800104 	addi	r2,r2,4
 80504c4:	1007883a 	mov	r3,r2
 80504c8:	e0bffc17 	ldw	r2,-16(fp)
 80504cc:	10800817 	ldw	r2,32(r2)
 80504d0:	18800035 	stwio	r2,0(r3)
 80504d4:	e0bffa17 	ldw	r2,-24(fp)
 80504d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80504dc:	e0bff917 	ldw	r2,-28(fp)
 80504e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80504e4:	e0fff517 	ldw	r3,-44(fp)
 80504e8:	e0bffd17 	ldw	r2,-12(fp)
 80504ec:	18800426 	beq	r3,r2,8050500 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80504f0:	e0fff517 	ldw	r3,-44(fp)
 80504f4:	e0bffd17 	ldw	r2,-12(fp)
 80504f8:	1885c83a 	sub	r2,r3,r2
 80504fc:	00000606 	br	8050518 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8050500:	e0bfff17 	ldw	r2,-4(fp)
 8050504:	1090000c 	andi	r2,r2,16384
 8050508:	10000226 	beq	r2,zero,8050514 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 805050c:	00bffd44 	movi	r2,-11
 8050510:	00000106 	br	8050518 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8050514:	00bffec4 	movi	r2,-5
}
 8050518:	e037883a 	mov	sp,fp
 805051c:	dfc00117 	ldw	ra,4(sp)
 8050520:	df000017 	ldw	fp,0(sp)
 8050524:	dec00204 	addi	sp,sp,8
 8050528:	f800283a 	ret

0805052c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 805052c:	defff304 	addi	sp,sp,-52
 8050530:	dfc00c15 	stw	ra,48(sp)
 8050534:	df000b15 	stw	fp,44(sp)
 8050538:	df000b04 	addi	fp,sp,44
 805053c:	e13ffc15 	stw	r4,-16(fp)
 8050540:	e17ffd15 	stw	r5,-12(fp)
 8050544:	e1bffe15 	stw	r6,-8(fp)
 8050548:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 805054c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8050550:	e0bffd17 	ldw	r2,-12(fp)
 8050554:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8050558:	00003706 	br	8050638 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 805055c:	e0bffc17 	ldw	r2,-16(fp)
 8050560:	10800c17 	ldw	r2,48(r2)
 8050564:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8050568:	e0bffc17 	ldw	r2,-16(fp)
 805056c:	10800d17 	ldw	r2,52(r2)
 8050570:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8050574:	e0fff917 	ldw	r3,-28(fp)
 8050578:	e0bff517 	ldw	r2,-44(fp)
 805057c:	1880062e 	bgeu	r3,r2,8050598 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8050580:	e0fff517 	ldw	r3,-44(fp)
 8050584:	e0bff917 	ldw	r2,-28(fp)
 8050588:	1885c83a 	sub	r2,r3,r2
 805058c:	10bfffc4 	addi	r2,r2,-1
 8050590:	e0bff615 	stw	r2,-40(fp)
 8050594:	00000b06 	br	80505c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8050598:	e0bff517 	ldw	r2,-44(fp)
 805059c:	10000526 	beq	r2,zero,80505b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80505a0:	00c20004 	movi	r3,2048
 80505a4:	e0bff917 	ldw	r2,-28(fp)
 80505a8:	1885c83a 	sub	r2,r3,r2
 80505ac:	e0bff615 	stw	r2,-40(fp)
 80505b0:	00000406 	br	80505c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80505b4:	00c1ffc4 	movi	r3,2047
 80505b8:	e0bff917 	ldw	r2,-28(fp)
 80505bc:	1885c83a 	sub	r2,r3,r2
 80505c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80505c4:	e0bff617 	ldw	r2,-40(fp)
 80505c8:	10001e26 	beq	r2,zero,8050644 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80505cc:	e0fffe17 	ldw	r3,-8(fp)
 80505d0:	e0bff617 	ldw	r2,-40(fp)
 80505d4:	1880022e 	bgeu	r3,r2,80505e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80505d8:	e0bffe17 	ldw	r2,-8(fp)
 80505dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80505e0:	e0bffc17 	ldw	r2,-16(fp)
 80505e4:	10c20e04 	addi	r3,r2,2104
 80505e8:	e0bff917 	ldw	r2,-28(fp)
 80505ec:	1885883a 	add	r2,r3,r2
 80505f0:	e1bff617 	ldw	r6,-40(fp)
 80505f4:	e17ffd17 	ldw	r5,-12(fp)
 80505f8:	1009883a 	mov	r4,r2
 80505fc:	80438b40 	call	80438b4 <memcpy>
      ptr   += n;
 8050600:	e0fffd17 	ldw	r3,-12(fp)
 8050604:	e0bff617 	ldw	r2,-40(fp)
 8050608:	1885883a 	add	r2,r3,r2
 805060c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8050610:	e0fffe17 	ldw	r3,-8(fp)
 8050614:	e0bff617 	ldw	r2,-40(fp)
 8050618:	1885c83a 	sub	r2,r3,r2
 805061c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8050620:	e0fff917 	ldw	r3,-28(fp)
 8050624:	e0bff617 	ldw	r2,-40(fp)
 8050628:	1885883a 	add	r2,r3,r2
 805062c:	10c1ffcc 	andi	r3,r2,2047
 8050630:	e0bffc17 	ldw	r2,-16(fp)
 8050634:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8050638:	e0bffe17 	ldw	r2,-8(fp)
 805063c:	00bfc716 	blt	zero,r2,805055c <__alt_data_end+0xfffe84bc>
 8050640:	00000106 	br	8050648 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8050644:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8050648:	0005303a 	rdctl	r2,status
 805064c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8050650:	e0fffb17 	ldw	r3,-20(fp)
 8050654:	00bfff84 	movi	r2,-2
 8050658:	1884703a 	and	r2,r3,r2
 805065c:	1001703a 	wrctl	status,r2
  
  return context;
 8050660:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8050664:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8050668:	e0bffc17 	ldw	r2,-16(fp)
 805066c:	10800817 	ldw	r2,32(r2)
 8050670:	10c00094 	ori	r3,r2,2
 8050674:	e0bffc17 	ldw	r2,-16(fp)
 8050678:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 805067c:	e0bffc17 	ldw	r2,-16(fp)
 8050680:	10800017 	ldw	r2,0(r2)
 8050684:	10800104 	addi	r2,r2,4
 8050688:	1007883a 	mov	r3,r2
 805068c:	e0bffc17 	ldw	r2,-16(fp)
 8050690:	10800817 	ldw	r2,32(r2)
 8050694:	18800035 	stwio	r2,0(r3)
 8050698:	e0bffa17 	ldw	r2,-24(fp)
 805069c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80506a0:	e0bff817 	ldw	r2,-32(fp)
 80506a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80506a8:	e0bffe17 	ldw	r2,-8(fp)
 80506ac:	0080100e 	bge	zero,r2,80506f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80506b0:	e0bfff17 	ldw	r2,-4(fp)
 80506b4:	1090000c 	andi	r2,r2,16384
 80506b8:	1000101e 	bne	r2,zero,80506fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80506bc:	0001883a 	nop
 80506c0:	e0bffc17 	ldw	r2,-16(fp)
 80506c4:	10c00d17 	ldw	r3,52(r2)
 80506c8:	e0bff517 	ldw	r2,-44(fp)
 80506cc:	1880051e 	bne	r3,r2,80506e4 <altera_avalon_jtag_uart_write+0x1b8>
 80506d0:	e0bffc17 	ldw	r2,-16(fp)
 80506d4:	10c00917 	ldw	r3,36(r2)
 80506d8:	e0bffc17 	ldw	r2,-16(fp)
 80506dc:	10800117 	ldw	r2,4(r2)
 80506e0:	18bff736 	bltu	r3,r2,80506c0 <__alt_data_end+0xfffe8620>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80506e4:	e0bffc17 	ldw	r2,-16(fp)
 80506e8:	10800917 	ldw	r2,36(r2)
 80506ec:	1000051e 	bne	r2,zero,8050704 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80506f0:	e0bffe17 	ldw	r2,-8(fp)
 80506f4:	00bfd016 	blt	zero,r2,8050638 <__alt_data_end+0xfffe8598>
 80506f8:	00000306 	br	8050708 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80506fc:	0001883a 	nop
 8050700:	00000106 	br	8050708 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8050704:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8050708:	e0fffd17 	ldw	r3,-12(fp)
 805070c:	e0bff717 	ldw	r2,-36(fp)
 8050710:	18800426 	beq	r3,r2,8050724 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8050714:	e0fffd17 	ldw	r3,-12(fp)
 8050718:	e0bff717 	ldw	r2,-36(fp)
 805071c:	1885c83a 	sub	r2,r3,r2
 8050720:	00000606 	br	805073c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8050724:	e0bfff17 	ldw	r2,-4(fp)
 8050728:	1090000c 	andi	r2,r2,16384
 805072c:	10000226 	beq	r2,zero,8050738 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8050730:	00bffd44 	movi	r2,-11
 8050734:	00000106 	br	805073c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8050738:	00bffec4 	movi	r2,-5
}
 805073c:	e037883a 	mov	sp,fp
 8050740:	dfc00117 	ldw	ra,4(sp)
 8050744:	df000017 	ldw	fp,0(sp)
 8050748:	dec00204 	addi	sp,sp,8
 805074c:	f800283a 	ret

08050750 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8050750:	defffa04 	addi	sp,sp,-24
 8050754:	dfc00515 	stw	ra,20(sp)
 8050758:	df000415 	stw	fp,16(sp)
 805075c:	df000404 	addi	fp,sp,16
 8050760:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8050764:	0007883a 	mov	r3,zero
 8050768:	e0bfff17 	ldw	r2,-4(fp)
 805076c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8050770:	e0bfff17 	ldw	r2,-4(fp)
 8050774:	10800104 	addi	r2,r2,4
 8050778:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 805077c:	0005303a 	rdctl	r2,status
 8050780:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8050784:	e0fffd17 	ldw	r3,-12(fp)
 8050788:	00bfff84 	movi	r2,-2
 805078c:	1884703a 	and	r2,r3,r2
 8050790:	1001703a 	wrctl	status,r2
  
  return context;
 8050794:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8050798:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 805079c:	804f6f80 	call	804f6f8 <alt_tick>
 80507a0:	e0bffc17 	ldw	r2,-16(fp)
 80507a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80507a8:	e0bffe17 	ldw	r2,-8(fp)
 80507ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80507b0:	0001883a 	nop
 80507b4:	e037883a 	mov	sp,fp
 80507b8:	dfc00117 	ldw	ra,4(sp)
 80507bc:	df000017 	ldw	fp,0(sp)
 80507c0:	dec00204 	addi	sp,sp,8
 80507c4:	f800283a 	ret

080507c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80507c8:	defff804 	addi	sp,sp,-32
 80507cc:	dfc00715 	stw	ra,28(sp)
 80507d0:	df000615 	stw	fp,24(sp)
 80507d4:	df000604 	addi	fp,sp,24
 80507d8:	e13ffc15 	stw	r4,-16(fp)
 80507dc:	e17ffd15 	stw	r5,-12(fp)
 80507e0:	e1bffe15 	stw	r6,-8(fp)
 80507e4:	e1ffff15 	stw	r7,-4(fp)
 80507e8:	e0bfff17 	ldw	r2,-4(fp)
 80507ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80507f0:	d0a71017 	ldw	r2,-25536(gp)
 80507f4:	1000021e 	bne	r2,zero,8050800 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80507f8:	e0bffb17 	ldw	r2,-20(fp)
 80507fc:	d0a71015 	stw	r2,-25536(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8050800:	e0bffc17 	ldw	r2,-16(fp)
 8050804:	10800104 	addi	r2,r2,4
 8050808:	00c001c4 	movi	r3,7
 805080c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8050810:	d8000015 	stw	zero,0(sp)
 8050814:	e1fffc17 	ldw	r7,-16(fp)
 8050818:	01820174 	movhi	r6,2053
 805081c:	3181d404 	addi	r6,r6,1872
 8050820:	e17ffe17 	ldw	r5,-8(fp)
 8050824:	e13ffd17 	ldw	r4,-12(fp)
 8050828:	804ed980 	call	804ed98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 805082c:	0001883a 	nop
 8050830:	e037883a 	mov	sp,fp
 8050834:	dfc00117 	ldw	ra,4(sp)
 8050838:	df000017 	ldw	fp,0(sp)
 805083c:	dec00204 	addi	sp,sp,8
 8050840:	f800283a 	ret

08050844 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 8050844:	defff904 	addi	sp,sp,-28
 8050848:	dfc00615 	stw	ra,24(sp)
 805084c:	df000515 	stw	fp,20(sp)
 8050850:	df000504 	addi	fp,sp,20
 8050854:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
 8050858:	e0bfff17 	ldw	r2,-4(fp)
 805085c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
 8050860:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
 8050864:	e0bffb17 	ldw	r2,-20(fp)
 8050868:	10001a26 	beq	r2,zero,80508d4 <alt_adc_irq+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 805086c:	0005303a 	rdctl	r2,status
 8050870:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8050874:	e0fffe17 	ldw	r3,-8(fp)
 8050878:	00bfff84 	movi	r2,-2
 805087c:	1884703a 	and	r2,r3,r2
 8050880:	1001703a 	wrctl	status,r2
  
  return context;
 8050884:	e0bffe17 	ldw	r2,-8(fp)
	{
	    cpu_sr = alt_irq_disable_all();
 8050888:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 805088c:	e0bffb17 	ldw	r2,-20(fp)
 8050890:	10800a17 	ldw	r2,40(r2)
 8050894:	10000626 	beq	r2,zero,80508b0 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
 8050898:	e0bffb17 	ldw	r2,-20(fp)
 805089c:	10800a17 	ldw	r2,40(r2)
 80508a0:	e0fffb17 	ldw	r3,-20(fp)
 80508a4:	18c00b17 	ldw	r3,44(r3)
 80508a8:	1809883a 	mov	r4,r3
 80508ac:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
 80508b0:	e0bffb17 	ldw	r2,-20(fp)
 80508b4:	10800c17 	ldw	r2,48(r2)
 80508b8:	1009883a 	mov	r4,r2
 80508bc:	8050cf00 	call	8050cf0 <adc_clear_interrupt_status>
 80508c0:	e0bffc17 	ldw	r2,-16(fp)
 80508c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80508c8:	e0bffd17 	ldw	r2,-12(fp)
 80508cc:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
 80508d0:	0001883a 	nop
 80508d4:	0001883a 	nop
}
 80508d8:	e037883a 	mov	sp,fp
 80508dc:	dfc00117 	ldw	ra,4(sp)
 80508e0:	df000017 	ldw	fp,0(sp)
 80508e4:	dec00204 	addi	sp,sp,8
 80508e8:	f800283a 	ret

080508ec <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
 80508ec:	defff804 	addi	sp,sp,-32
 80508f0:	df000715 	stw	fp,28(sp)
 80508f4:	df000704 	addi	fp,sp,28
 80508f8:	e13ffd15 	stw	r4,-12(fp)
 80508fc:	e17ffe15 	stw	r5,-8(fp)
 8050900:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
 8050904:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
 8050908:	e0bfff17 	ldw	r2,-4(fp)
 805090c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
 8050910:	e0bffe17 	ldw	r2,-8(fp)
 8050914:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
 8050918:	e0bffd17 	ldw	r2,-12(fp)
 805091c:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 8050920:	e0bffa17 	ldw	r2,-24(fp)
 8050924:	1000021e 	bne	r2,zero,8050930 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
 8050928:	00bffa84 	movi	r2,-22
 805092c:	00001606 	br	8050988 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
 8050930:	e03ff915 	stw	zero,-28(fp)
 8050934:	00001006 	br	8050978 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 8050938:	e0bff917 	ldw	r2,-28(fp)
 805093c:	1085883a 	add	r2,r2,r2
 8050940:	1085883a 	add	r2,r2,r2
 8050944:	1007883a 	mov	r3,r2
 8050948:	e0bffc17 	ldw	r2,-16(fp)
 805094c:	1885883a 	add	r2,r3,r2
 8050950:	10800037 	ldwio	r2,0(r2)
 8050954:	1007883a 	mov	r3,r2
 8050958:	e0bffa17 	ldw	r2,-24(fp)
 805095c:	10c00015 	stw	r3,0(r2)

       dest_buf++;
 8050960:	e0bffa17 	ldw	r2,-24(fp)
 8050964:	10800104 	addi	r2,r2,4
 8050968:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 805096c:	e0bff917 	ldw	r2,-28(fp)
 8050970:	10800044 	addi	r2,r2,1
 8050974:	e0bff915 	stw	r2,-28(fp)
 8050978:	e0fff917 	ldw	r3,-28(fp)
 805097c:	e0bffb17 	ldw	r2,-20(fp)
 8050980:	18bfed36 	bltu	r3,r2,8050938 <__alt_data_end+0xfffe8898>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 8050984:	0005883a 	mov	r2,zero

}
 8050988:	e037883a 	mov	sp,fp
 805098c:	df000017 	ldw	fp,0(sp)
 8050990:	dec00104 	addi	sp,sp,4
 8050994:	f800283a 	ret

08050998 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 8050998:	defffa04 	addi	sp,sp,-24
 805099c:	dfc00515 	stw	ra,20(sp)
 80509a0:	df000415 	stw	fp,16(sp)
 80509a4:	df000404 	addi	fp,sp,16
 80509a8:	e13ffd15 	stw	r4,-12(fp)
 80509ac:	e17ffe15 	stw	r5,-8(fp)
 80509b0:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 80509b4:	d1600f04 	addi	r5,gp,-32708
 80509b8:	e13ffd17 	ldw	r4,-12(fp)
 80509bc:	80521bc0 	call	80521bc <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 80509c0:	e0bffe17 	ldw	r2,-8(fp)
 80509c4:	10000b16 	blt	r2,zero,80509f4 <altera_modular_adc_init+0x5c>
 80509c8:	e0bfff17 	ldw	r2,-4(fp)
 80509cc:	10000916 	blt	r2,zero,80509f4 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 80509d0:	e0bffe17 	ldw	r2,-8(fp)
 80509d4:	e0ffff17 	ldw	r3,-4(fp)
 80509d8:	d8000015 	stw	zero,0(sp)
 80509dc:	e1fffd17 	ldw	r7,-12(fp)
 80509e0:	01820174 	movhi	r6,2053
 80509e4:	31821104 	addi	r6,r6,2116
 80509e8:	180b883a 	mov	r5,r3
 80509ec:	1009883a 	mov	r4,r2
 80509f0:	804ed980 	call	804ed98 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 80509f4:	0001883a 	nop
 80509f8:	e037883a 	mov	sp,fp
 80509fc:	dfc00117 	ldw	ra,4(sp)
 8050a00:	df000017 	ldw	fp,0(sp)
 8050a04:	dec00204 	addi	sp,sp,8
 8050a08:	f800283a 	ret

08050a0c <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
 8050a0c:	defffa04 	addi	sp,sp,-24
 8050a10:	dfc00515 	stw	ra,20(sp)
 8050a14:	df000415 	stw	fp,16(sp)
 8050a18:	df000404 	addi	fp,sp,16
 8050a1c:	e13ffc15 	stw	r4,-16(fp)
 8050a20:	e17ffd15 	stw	r5,-12(fp)
 8050a24:	e1bffe15 	stw	r6,-8(fp)
 8050a28:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 8050a2c:	e0bffc17 	ldw	r2,-16(fp)
 8050a30:	e0fffd17 	ldw	r3,-12(fp)
 8050a34:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
 8050a38:	e0bffc17 	ldw	r2,-16(fp)
 8050a3c:	e0fffe17 	ldw	r3,-8(fp)
 8050a40:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
 8050a44:	e0bffc17 	ldw	r2,-16(fp)
 8050a48:	e0ffff17 	ldw	r3,-4(fp)
 8050a4c:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
 8050a50:	e0bffd17 	ldw	r2,-12(fp)
 8050a54:	10000726 	beq	r2,zero,8050a74 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
 8050a58:	e0bfff17 	ldw	r2,-4(fp)
 8050a5c:	1009883a 	mov	r4,r2
 8050a60:	8050cf00 	call	8050cf0 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
 8050a64:	e0bfff17 	ldw	r2,-4(fp)
 8050a68:	1009883a 	mov	r4,r2
 8050a6c:	8050c640 	call	8050c64 <adc_interrupt_enable>
                adc_clear_interrupt_status(sample_store_base);
	}
	
    
	
    return ;
 8050a70:	00000706 	br	8050a90 <alt_adc_register_callback+0x84>
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
 8050a74:	e0bfff17 	ldw	r2,-4(fp)
 8050a78:	1009883a 	mov	r4,r2
 8050a7c:	8050ca80 	call	8050ca8 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
 8050a80:	e0bfff17 	ldw	r2,-4(fp)
 8050a84:	1009883a 	mov	r4,r2
 8050a88:	8050cf00 	call	8050cf0 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
 8050a8c:	0001883a 	nop
}
 8050a90:	e037883a 	mov	sp,fp
 8050a94:	dfc00117 	ldw	ra,4(sp)
 8050a98:	df000017 	ldw	fp,0(sp)
 8050a9c:	dec00204 	addi	sp,sp,8
 8050aa0:	f800283a 	ret

08050aa4 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
 8050aa4:	defffc04 	addi	sp,sp,-16
 8050aa8:	dfc00315 	stw	ra,12(sp)
 8050aac:	df000215 	stw	fp,8(sp)
 8050ab0:	df000204 	addi	fp,sp,8
 8050ab4:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
 8050ab8:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 8050abc:	d1600f04 	addi	r5,gp,-32708
 8050ac0:	e13fff17 	ldw	r4,-4(fp)
 8050ac4:	80523200 	call	8052320 <alt_find_dev>
 8050ac8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 8050acc:	e0bffe17 	ldw	r2,-8(fp)
}
 8050ad0:	e037883a 	mov	sp,fp
 8050ad4:	dfc00117 	ldw	ra,4(sp)
 8050ad8:	df000017 	ldw	fp,0(sp)
 8050adc:	dec00204 	addi	sp,sp,8
 8050ae0:	f800283a 	ret

08050ae4 <adc_stop>:

void adc_stop(int sequencer_base)
{
 8050ae4:	defffe04 	addi	sp,sp,-8
 8050ae8:	df000115 	stw	fp,4(sp)
 8050aec:	df000104 	addi	fp,sp,4
 8050af0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 8050af4:	e0bfff17 	ldw	r2,-4(fp)
 8050af8:	e0ffff17 	ldw	r3,-4(fp)
 8050afc:	19000037 	ldwio	r4,0(r3)
 8050b00:	00ffff84 	movi	r3,-2
 8050b04:	20c6703a 	and	r3,r4,r3
 8050b08:	10c00035 	stwio	r3,0(r2)
 8050b0c:	0001883a 	nop
 8050b10:	e0bfff17 	ldw	r2,-4(fp)
 8050b14:	10800037 	ldwio	r2,0(r2)
 8050b18:	1080004c 	andi	r2,r2,1
 8050b1c:	103ffc1e 	bne	r2,zero,8050b10 <__alt_data_end+0xfffe8a70>
}
 8050b20:	0001883a 	nop
 8050b24:	e037883a 	mov	sp,fp
 8050b28:	df000017 	ldw	fp,0(sp)
 8050b2c:	dec00104 	addi	sp,sp,4
 8050b30:	f800283a 	ret

08050b34 <adc_start>:

void adc_start(int sequencer_base)
{
 8050b34:	defffe04 	addi	sp,sp,-8
 8050b38:	df000115 	stw	fp,4(sp)
 8050b3c:	df000104 	addi	fp,sp,4
 8050b40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 8050b44:	e0bfff17 	ldw	r2,-4(fp)
 8050b48:	e0ffff17 	ldw	r3,-4(fp)
 8050b4c:	18c00037 	ldwio	r3,0(r3)
 8050b50:	18c00054 	ori	r3,r3,1
 8050b54:	10c00035 	stwio	r3,0(r2)
}
 8050b58:	0001883a 	nop
 8050b5c:	e037883a 	mov	sp,fp
 8050b60:	df000017 	ldw	fp,0(sp)
 8050b64:	dec00104 	addi	sp,sp,4
 8050b68:	f800283a 	ret

08050b6c <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
 8050b6c:	defffe04 	addi	sp,sp,-8
 8050b70:	df000115 	stw	fp,4(sp)
 8050b74:	df000104 	addi	fp,sp,4
 8050b78:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 8050b7c:	e0bfff17 	ldw	r2,-4(fp)
 8050b80:	e0ffff17 	ldw	r3,-4(fp)
 8050b84:	19000037 	ldwio	r4,0(r3)
 8050b88:	00fffc44 	movi	r3,-15
 8050b8c:	20c6703a 	and	r3,r4,r3
 8050b90:	18c00094 	ori	r3,r3,2
 8050b94:	10c00035 	stwio	r3,0(r2)
}
 8050b98:	0001883a 	nop
 8050b9c:	e037883a 	mov	sp,fp
 8050ba0:	df000017 	ldw	fp,0(sp)
 8050ba4:	dec00104 	addi	sp,sp,4
 8050ba8:	f800283a 	ret

08050bac <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
 8050bac:	defffe04 	addi	sp,sp,-8
 8050bb0:	df000115 	stw	fp,4(sp)
 8050bb4:	df000104 	addi	fp,sp,4
 8050bb8:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 8050bbc:	e0bfff17 	ldw	r2,-4(fp)
 8050bc0:	e0ffff17 	ldw	r3,-4(fp)
 8050bc4:	19000037 	ldwio	r4,0(r3)
 8050bc8:	00fffc44 	movi	r3,-15
 8050bcc:	20c6703a 	and	r3,r4,r3
 8050bd0:	10c00035 	stwio	r3,0(r2)
}
 8050bd4:	0001883a 	nop
 8050bd8:	e037883a 	mov	sp,fp
 8050bdc:	df000017 	ldw	fp,0(sp)
 8050be0:	dec00104 	addi	sp,sp,4
 8050be4:	f800283a 	ret

08050be8 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
 8050be8:	defffc04 	addi	sp,sp,-16
 8050bec:	dfc00315 	stw	ra,12(sp)
 8050bf0:	df000215 	stw	fp,8(sp)
 8050bf4:	df000204 	addi	fp,sp,8
 8050bf8:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 8050bfc:	e0bfff17 	ldw	r2,-4(fp)
 8050c00:	10800037 	ldwio	r2,0(r2)
 8050c04:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
 8050c08:	e13fff17 	ldw	r4,-4(fp)
 8050c0c:	8050ae40 	call	8050ae4 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 8050c10:	e0bfff17 	ldw	r2,-4(fp)
 8050c14:	e0ffff17 	ldw	r3,-4(fp)
 8050c18:	18c00037 	ldwio	r3,0(r3)
 8050c1c:	18c00394 	ori	r3,r3,14
 8050c20:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
 8050c24:	e13fff17 	ldw	r4,-4(fp)
 8050c28:	8050b340 	call	8050b34 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 8050c2c:	0001883a 	nop
 8050c30:	e0bfff17 	ldw	r2,-4(fp)
 8050c34:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
 8050c38:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 8050c3c:	103ffc1e 	bne	r2,zero,8050c30 <__alt_data_end+0xfffe8b90>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 8050c40:	e0bfff17 	ldw	r2,-4(fp)
 8050c44:	e0fffe17 	ldw	r3,-8(fp)
 8050c48:	10c00035 	stwio	r3,0(r2)
}
 8050c4c:	0001883a 	nop
 8050c50:	e037883a 	mov	sp,fp
 8050c54:	dfc00117 	ldw	ra,4(sp)
 8050c58:	df000017 	ldw	fp,0(sp)
 8050c5c:	dec00204 	addi	sp,sp,8
 8050c60:	f800283a 	ret

08050c64 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
 8050c64:	defffe04 	addi	sp,sp,-8
 8050c68:	df000115 	stw	fp,4(sp)
 8050c6c:	df000104 	addi	fp,sp,4
 8050c70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 8050c74:	e0bfff17 	ldw	r2,-4(fp)
 8050c78:	10804004 	addi	r2,r2,256
 8050c7c:	1007883a 	mov	r3,r2
 8050c80:	e0bfff17 	ldw	r2,-4(fp)
 8050c84:	10804004 	addi	r2,r2,256
 8050c88:	10800037 	ldwio	r2,0(r2)
 8050c8c:	10800054 	ori	r2,r2,1
 8050c90:	18800035 	stwio	r2,0(r3)
}
 8050c94:	0001883a 	nop
 8050c98:	e037883a 	mov	sp,fp
 8050c9c:	df000017 	ldw	fp,0(sp)
 8050ca0:	dec00104 	addi	sp,sp,4
 8050ca4:	f800283a 	ret

08050ca8 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
 8050ca8:	defffe04 	addi	sp,sp,-8
 8050cac:	df000115 	stw	fp,4(sp)
 8050cb0:	df000104 	addi	fp,sp,4
 8050cb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 8050cb8:	e0bfff17 	ldw	r2,-4(fp)
 8050cbc:	10804004 	addi	r2,r2,256
 8050cc0:	1009883a 	mov	r4,r2
 8050cc4:	e0bfff17 	ldw	r2,-4(fp)
 8050cc8:	10804004 	addi	r2,r2,256
 8050ccc:	10c00037 	ldwio	r3,0(r2)
 8050cd0:	00bfff84 	movi	r2,-2
 8050cd4:	1884703a 	and	r2,r3,r2
 8050cd8:	20800035 	stwio	r2,0(r4)
}
 8050cdc:	0001883a 	nop
 8050ce0:	e037883a 	mov	sp,fp
 8050ce4:	df000017 	ldw	fp,0(sp)
 8050ce8:	dec00104 	addi	sp,sp,4
 8050cec:	f800283a 	ret

08050cf0 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
 8050cf0:	defffe04 	addi	sp,sp,-8
 8050cf4:	df000115 	stw	fp,4(sp)
 8050cf8:	df000104 	addi	fp,sp,4
 8050cfc:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 8050d00:	e0bfff17 	ldw	r2,-4(fp)
 8050d04:	10804104 	addi	r2,r2,260
 8050d08:	1007883a 	mov	r3,r2
 8050d0c:	e0bfff17 	ldw	r2,-4(fp)
 8050d10:	10804104 	addi	r2,r2,260
 8050d14:	10800037 	ldwio	r2,0(r2)
 8050d18:	10800054 	ori	r2,r2,1
 8050d1c:	18800035 	stwio	r2,0(r3)
}
 8050d20:	0001883a 	nop
 8050d24:	e037883a 	mov	sp,fp
 8050d28:	df000017 	ldw	fp,0(sp)
 8050d2c:	dec00104 	addi	sp,sp,4
 8050d30:	f800283a 	ret

08050d34 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
 8050d34:	defffe04 	addi	sp,sp,-8
 8050d38:	df000115 	stw	fp,4(sp)
 8050d3c:	df000104 	addi	fp,sp,4
 8050d40:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 8050d44:	e0bfff17 	ldw	r2,-4(fp)
 8050d48:	10804104 	addi	r2,r2,260
 8050d4c:	10800037 	ldwio	r2,0(r2)
 8050d50:	1080004c 	andi	r2,r2,1
 8050d54:	10000226 	beq	r2,zero,8050d60 <adc_interrupt_asserted+0x2c>
 8050d58:	00bfffc4 	movi	r2,-1
 8050d5c:	00000106 	br	8050d64 <adc_interrupt_asserted+0x30>
 8050d60:	0005883a 	mov	r2,zero
}
 8050d64:	e037883a 	mov	sp,fp
 8050d68:	df000017 	ldw	fp,0(sp)
 8050d6c:	dec00104 	addi	sp,sp,4
 8050d70:	f800283a 	ret

08050d74 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 8050d74:	defffe04 	addi	sp,sp,-8
 8050d78:	df000115 	stw	fp,4(sp)
 8050d7c:	df000104 	addi	fp,sp,4
 8050d80:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 8050d84:	0001883a 	nop
 8050d88:	e0bfff17 	ldw	r2,-4(fp)
 8050d8c:	10804104 	addi	r2,r2,260
 8050d90:	10800037 	ldwio	r2,0(r2)
 8050d94:	1080004c 	andi	r2,r2,1
 8050d98:	103ffb26 	beq	r2,zero,8050d88 <__alt_data_end+0xfffe8ce8>
}
 8050d9c:	0001883a 	nop
 8050da0:	e037883a 	mov	sp,fp
 8050da4:	df000017 	ldw	fp,0(sp)
 8050da8:	dec00104 	addi	sp,sp,4
 8050dac:	f800283a 	ret

08050db0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 8050db0:	defffc04 	addi	sp,sp,-16
 8050db4:	dfc00315 	stw	ra,12(sp)
 8050db8:	df000215 	stw	fp,8(sp)
 8050dbc:	df000204 	addi	fp,sp,8
 8050dc0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 8050dc4:	e0bfff17 	ldw	r2,-4(fp)
 8050dc8:	10800217 	ldw	r2,8(r2)
 8050dcc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 8050dd0:	00000b06 	br	8050e00 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 8050dd4:	01420174 	movhi	r5,2053
 8050dd8:	294cc604 	addi	r5,r5,13080
 8050ddc:	e13ffe17 	ldw	r4,-8(fp)
 8050de0:	804a6080 	call	804a608 <strcmp>
 8050de4:	1000031e 	bne	r2,zero,8050df4 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
 8050de8:	e0bffe17 	ldw	r2,-8(fp)
 8050dec:	10000005 	stb	zero,0(r2)
			break;
 8050df0:	00000906 	br	8050e18 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 8050df4:	e0bffe17 	ldw	r2,-8(fp)
 8050df8:	10800044 	addi	r2,r2,1
 8050dfc:	e0bffe15 	stw	r2,-8(fp)
 8050e00:	e0bffe17 	ldw	r2,-8(fp)
 8050e04:	10800003 	ldbu	r2,0(r2)
 8050e08:	10803fcc 	andi	r2,r2,255
 8050e0c:	1080201c 	xori	r2,r2,128
 8050e10:	10bfe004 	addi	r2,r2,-128
 8050e14:	103fef1e 	bne	r2,zero,8050dd4 <__alt_data_end+0xfffe8d34>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 8050e18:	0001883a 	nop
}
 8050e1c:	e037883a 	mov	sp,fp
 8050e20:	dfc00117 	ldw	ra,4(sp)
 8050e24:	df000017 	ldw	fp,0(sp)
 8050e28:	dec00204 	addi	sp,sp,8
 8050e2c:	f800283a 	ret

08050e30 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 8050e30:	defffc04 	addi	sp,sp,-16
 8050e34:	dfc00315 	stw	ra,12(sp)
 8050e38:	df000215 	stw	fp,8(sp)
 8050e3c:	df000204 	addi	fp,sp,8
 8050e40:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 8050e44:	d1600704 	addi	r5,gp,-32740
 8050e48:	e13fff17 	ldw	r4,-4(fp)
 8050e4c:	80523200 	call	8052320 <alt_find_dev>
 8050e50:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8050e54:	e0bffe17 	ldw	r2,-8(fp)
}
 8050e58:	e037883a 	mov	sp,fp
 8050e5c:	dfc00117 	ldw	ra,4(sp)
 8050e60:	df000017 	ldw	fp,0(sp)
 8050e64:	dec00204 	addi	sp,sp,8
 8050e68:	f800283a 	ret

08050e6c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 8050e6c:	defffa04 	addi	sp,sp,-24
 8050e70:	df000515 	stw	fp,20(sp)
 8050e74:	df000504 	addi	fp,sp,20
 8050e78:	e13ffc15 	stw	r4,-16(fp)
 8050e7c:	2805883a 	mov	r2,r5
 8050e80:	e1bffe15 	stw	r6,-8(fp)
 8050e84:	e1ffff15 	stw	r7,-4(fp)
 8050e88:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 8050e8c:	e0bffc17 	ldw	r2,-16(fp)
 8050e90:	10800c17 	ldw	r2,48(r2)
 8050e94:	e0fffe17 	ldw	r3,-8(fp)
 8050e98:	1880042e 	bgeu	r3,r2,8050eac <alt_up_char_buffer_draw+0x40>
 8050e9c:	e0bffc17 	ldw	r2,-16(fp)
 8050ea0:	10800d17 	ldw	r2,52(r2)
 8050ea4:	e0ffff17 	ldw	r3,-4(fp)
 8050ea8:	18800236 	bltu	r3,r2,8050eb4 <alt_up_char_buffer_draw+0x48>
		return -1;
 8050eac:	00bfffc4 	movi	r2,-1
 8050eb0:	00001d06 	br	8050f28 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 8050eb4:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 8050eb8:	e0bffc17 	ldw	r2,-16(fp)
 8050ebc:	10c00f17 	ldw	r3,60(r2)
 8050ec0:	e0bffe17 	ldw	r2,-8(fp)
 8050ec4:	1886703a 	and	r3,r3,r2
 8050ec8:	e0bffc17 	ldw	r2,-16(fp)
 8050ecc:	10800e17 	ldw	r2,56(r2)
 8050ed0:	1884983a 	sll	r2,r3,r2
 8050ed4:	e0fffb17 	ldw	r3,-20(fp)
 8050ed8:	1884b03a 	or	r2,r3,r2
 8050edc:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 8050ee0:	e0bffc17 	ldw	r2,-16(fp)
 8050ee4:	10c01117 	ldw	r3,68(r2)
 8050ee8:	e0bfff17 	ldw	r2,-4(fp)
 8050eec:	1886703a 	and	r3,r3,r2
 8050ef0:	e0bffc17 	ldw	r2,-16(fp)
 8050ef4:	10801017 	ldw	r2,64(r2)
 8050ef8:	1884983a 	sll	r2,r3,r2
 8050efc:	e0fffb17 	ldw	r3,-20(fp)
 8050f00:	1884b03a 	or	r2,r3,r2
 8050f04:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 8050f08:	e0bffc17 	ldw	r2,-16(fp)
 8050f0c:	10c00b17 	ldw	r3,44(r2)
 8050f10:	e0bffb17 	ldw	r2,-20(fp)
 8050f14:	1885883a 	add	r2,r3,r2
 8050f18:	1007883a 	mov	r3,r2
 8050f1c:	e0bffd03 	ldbu	r2,-12(fp)
 8050f20:	18800025 	stbio	r2,0(r3)

	return 0;
 8050f24:	0005883a 	mov	r2,zero
}
 8050f28:	e037883a 	mov	sp,fp
 8050f2c:	df000017 	ldw	fp,0(sp)
 8050f30:	dec00104 	addi	sp,sp,4
 8050f34:	f800283a 	ret

08050f38 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 8050f38:	defffa04 	addi	sp,sp,-24
 8050f3c:	df000515 	stw	fp,20(sp)
 8050f40:	df000504 	addi	fp,sp,20
 8050f44:	e13ffc15 	stw	r4,-16(fp)
 8050f48:	e17ffd15 	stw	r5,-12(fp)
 8050f4c:	e1bffe15 	stw	r6,-8(fp)
 8050f50:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 8050f54:	e0bffc17 	ldw	r2,-16(fp)
 8050f58:	10800c17 	ldw	r2,48(r2)
 8050f5c:	e0fffe17 	ldw	r3,-8(fp)
 8050f60:	1880042e 	bgeu	r3,r2,8050f74 <alt_up_char_buffer_string+0x3c>
 8050f64:	e0bffc17 	ldw	r2,-16(fp)
 8050f68:	10800d17 	ldw	r2,52(r2)
 8050f6c:	e0ffff17 	ldw	r3,-4(fp)
 8050f70:	18800236 	bltu	r3,r2,8050f7c <alt_up_char_buffer_string+0x44>
		return -1;
 8050f74:	00bfffc4 	movi	r2,-1
 8050f78:	00002a06 	br	8051024 <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
 8050f7c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 8050f80:	e0bffc17 	ldw	r2,-16(fp)
 8050f84:	10801017 	ldw	r2,64(r2)
 8050f88:	e0ffff17 	ldw	r3,-4(fp)
 8050f8c:	1886983a 	sll	r3,r3,r2
 8050f90:	e0bffe17 	ldw	r2,-8(fp)
 8050f94:	1885883a 	add	r2,r3,r2
 8050f98:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 8050f9c:	00001a06 	br	8051008 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 8050fa0:	e0bffc17 	ldw	r2,-16(fp)
 8050fa4:	10c00b17 	ldw	r3,44(r2)
 8050fa8:	e0bffb17 	ldw	r2,-20(fp)
 8050fac:	1885883a 	add	r2,r3,r2
 8050fb0:	1007883a 	mov	r3,r2
 8050fb4:	e0bffd17 	ldw	r2,-12(fp)
 8050fb8:	10800003 	ldbu	r2,0(r2)
 8050fbc:	10803fcc 	andi	r2,r2,255
 8050fc0:	1080201c 	xori	r2,r2,128
 8050fc4:	10bfe004 	addi	r2,r2,-128
 8050fc8:	18800025 	stbio	r2,0(r3)
		++ptr;
 8050fcc:	e0bffd17 	ldw	r2,-12(fp)
 8050fd0:	10800044 	addi	r2,r2,1
 8050fd4:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 8050fd8:	e0bffe17 	ldw	r2,-8(fp)
 8050fdc:	10800044 	addi	r2,r2,1
 8050fe0:	e0bffe15 	stw	r2,-8(fp)
 8050fe4:	e0bffc17 	ldw	r2,-16(fp)
 8050fe8:	10800c17 	ldw	r2,48(r2)
 8050fec:	e0fffe17 	ldw	r3,-8(fp)
 8050ff0:	18800236 	bltu	r3,r2,8050ffc <alt_up_char_buffer_string+0xc4>
			return -1;
 8050ff4:	00bfffc4 	movi	r2,-1
 8050ff8:	00000a06 	br	8051024 <alt_up_char_buffer_string+0xec>
		++offset;
 8050ffc:	e0bffb17 	ldw	r2,-20(fp)
 8051000:	10800044 	addi	r2,r2,1
 8051004:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 8051008:	e0bffd17 	ldw	r2,-12(fp)
 805100c:	10800003 	ldbu	r2,0(r2)
 8051010:	10803fcc 	andi	r2,r2,255
 8051014:	1080201c 	xori	r2,r2,128
 8051018:	10bfe004 	addi	r2,r2,-128
 805101c:	103fe01e 	bne	r2,zero,8050fa0 <__alt_data_end+0xfffe8f00>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 8051020:	0005883a 	mov	r2,zero
}
 8051024:	e037883a 	mov	sp,fp
 8051028:	df000017 	ldw	fp,0(sp)
 805102c:	dec00104 	addi	sp,sp,4
 8051030:	f800283a 	ret

08051034 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 8051034:	defffe04 	addi	sp,sp,-8
 8051038:	df000115 	stw	fp,4(sp)
 805103c:	df000104 	addi	fp,sp,4
 8051040:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 8051044:	e0bfff17 	ldw	r2,-4(fp)
 8051048:	10800a17 	ldw	r2,40(r2)
 805104c:	10800084 	addi	r2,r2,2
 8051050:	1007883a 	mov	r3,r2
 8051054:	00800044 	movi	r2,1
 8051058:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 805105c:	0001883a 	nop
 8051060:	e0bfff17 	ldw	r2,-4(fp)
 8051064:	10800a17 	ldw	r2,40(r2)
 8051068:	10800084 	addi	r2,r2,2
 805106c:	10800023 	ldbuio	r2,0(r2)
 8051070:	10803fcc 	andi	r2,r2,255
 8051074:	1080004c 	andi	r2,r2,1
 8051078:	103ff91e 	bne	r2,zero,8051060 <__alt_data_end+0xfffe8fc0>
	return 0;
 805107c:	0005883a 	mov	r2,zero
}
 8051080:	e037883a 	mov	sp,fp
 8051084:	df000017 	ldw	fp,0(sp)
 8051088:	dec00104 	addi	sp,sp,4
 805108c:	f800283a 	ret

08051090 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8051090:	defffc04 	addi	sp,sp,-16
 8051094:	dfc00315 	stw	ra,12(sp)
 8051098:	df000215 	stw	fp,8(sp)
 805109c:	df000204 	addi	fp,sp,8
 80510a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 80510a4:	d1600704 	addi	r5,gp,-32740
 80510a8:	e13fff17 	ldw	r4,-4(fp)
 80510ac:	80523200 	call	8052320 <alt_find_dev>
 80510b0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80510b4:	e0bffe17 	ldw	r2,-8(fp)
}
 80510b8:	e037883a 	mov	sp,fp
 80510bc:	dfc00117 	ldw	ra,4(sp)
 80510c0:	df000017 	ldw	fp,0(sp)
 80510c4:	dec00204 	addi	sp,sp,8
 80510c8:	f800283a 	ret

080510cc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 80510cc:	defff904 	addi	sp,sp,-28
 80510d0:	dfc00615 	stw	ra,24(sp)
 80510d4:	df000515 	stw	fp,20(sp)
 80510d8:	df000504 	addi	fp,sp,20
 80510dc:	e13ffc15 	stw	r4,-16(fp)
 80510e0:	e17ffd15 	stw	r5,-12(fp)
 80510e4:	e1bffe15 	stw	r6,-8(fp)
 80510e8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 80510ec:	e0bffc17 	ldw	r2,-16(fp)
 80510f0:	10800f17 	ldw	r2,60(r2)
 80510f4:	e0fffe17 	ldw	r3,-8(fp)
 80510f8:	1880042e 	bgeu	r3,r2,805110c <alt_up_pixel_buffer_dma_draw+0x40>
 80510fc:	e0bffc17 	ldw	r2,-16(fp)
 8051100:	10801017 	ldw	r2,64(r2)
 8051104:	e0ffff17 	ldw	r3,-4(fp)
 8051108:	18800236 	bltu	r3,r2,8051114 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 805110c:	00bfffc4 	movi	r2,-1
 8051110:	00005306 	br	8051260 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 8051114:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8051118:	e0bffc17 	ldw	r2,-16(fp)
 805111c:	10800d17 	ldw	r2,52(r2)
 8051120:	1000151e 	bne	r2,zero,8051178 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8051124:	e0bffc17 	ldw	r2,-16(fp)
 8051128:	10c01217 	ldw	r3,72(r2)
 805112c:	e0bffe17 	ldw	r2,-8(fp)
 8051130:	1886703a 	and	r3,r3,r2
 8051134:	e0bffc17 	ldw	r2,-16(fp)
 8051138:	10801117 	ldw	r2,68(r2)
 805113c:	1884983a 	sll	r2,r3,r2
 8051140:	e0fffb17 	ldw	r3,-20(fp)
 8051144:	1885883a 	add	r2,r3,r2
 8051148:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 805114c:	e0bffc17 	ldw	r2,-16(fp)
 8051150:	10c01417 	ldw	r3,80(r2)
 8051154:	e0bfff17 	ldw	r2,-4(fp)
 8051158:	1886703a 	and	r3,r3,r2
 805115c:	e0bffc17 	ldw	r2,-16(fp)
 8051160:	10801317 	ldw	r2,76(r2)
 8051164:	1884983a 	sll	r2,r3,r2
 8051168:	e0fffb17 	ldw	r3,-20(fp)
 805116c:	1885883a 	add	r2,r3,r2
 8051170:	e0bffb15 	stw	r2,-20(fp)
 8051174:	00001a06 	br	80511e0 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8051178:	e0bffc17 	ldw	r2,-16(fp)
 805117c:	10c01217 	ldw	r3,72(r2)
 8051180:	e0bffe17 	ldw	r2,-8(fp)
 8051184:	1886703a 	and	r3,r3,r2
 8051188:	e0bffc17 	ldw	r2,-16(fp)
 805118c:	10801117 	ldw	r2,68(r2)
 8051190:	1884983a 	sll	r2,r3,r2
 8051194:	e0fffb17 	ldw	r3,-20(fp)
 8051198:	1885883a 	add	r2,r3,r2
 805119c:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 80511a0:	e0bffc17 	ldw	r2,-16(fp)
 80511a4:	10c01417 	ldw	r3,80(r2)
 80511a8:	e0bfff17 	ldw	r2,-4(fp)
 80511ac:	1886703a 	and	r3,r3,r2
 80511b0:	e0bffc17 	ldw	r2,-16(fp)
 80511b4:	10800f17 	ldw	r2,60(r2)
 80511b8:	100b883a 	mov	r5,r2
 80511bc:	1809883a 	mov	r4,r3
 80511c0:	80418e00 	call	80418e0 <__mulsi3>
 80511c4:	1007883a 	mov	r3,r2
 80511c8:	e0bffc17 	ldw	r2,-16(fp)
 80511cc:	10801117 	ldw	r2,68(r2)
 80511d0:	1884983a 	sll	r2,r3,r2
 80511d4:	e0fffb17 	ldw	r3,-20(fp)
 80511d8:	1885883a 	add	r2,r3,r2
 80511dc:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80511e0:	e0bffc17 	ldw	r2,-16(fp)
 80511e4:	10800e17 	ldw	r2,56(r2)
 80511e8:	10800058 	cmpnei	r2,r2,1
 80511ec:	1000081e 	bne	r2,zero,8051210 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80511f0:	e0bffc17 	ldw	r2,-16(fp)
 80511f4:	10c00c17 	ldw	r3,48(r2)
 80511f8:	e0bffb17 	ldw	r2,-20(fp)
 80511fc:	1885883a 	add	r2,r3,r2
 8051200:	1007883a 	mov	r3,r2
 8051204:	e0bffd17 	ldw	r2,-12(fp)
 8051208:	18800025 	stbio	r2,0(r3)
 805120c:	00001306 	br	805125c <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8051210:	e0bffc17 	ldw	r2,-16(fp)
 8051214:	10800e17 	ldw	r2,56(r2)
 8051218:	10800098 	cmpnei	r2,r2,2
 805121c:	1000081e 	bne	r2,zero,8051240 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8051220:	e0bffc17 	ldw	r2,-16(fp)
 8051224:	10c00c17 	ldw	r3,48(r2)
 8051228:	e0bffb17 	ldw	r2,-20(fp)
 805122c:	1885883a 	add	r2,r3,r2
 8051230:	1007883a 	mov	r3,r2
 8051234:	e0bffd17 	ldw	r2,-12(fp)
 8051238:	1880002d 	sthio	r2,0(r3)
 805123c:	00000706 	br	805125c <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8051240:	e0bffc17 	ldw	r2,-16(fp)
 8051244:	10c00c17 	ldw	r3,48(r2)
 8051248:	e0bffb17 	ldw	r2,-20(fp)
 805124c:	1885883a 	add	r2,r3,r2
 8051250:	1007883a 	mov	r3,r2
 8051254:	e0bffd17 	ldw	r2,-12(fp)
 8051258:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 805125c:	0005883a 	mov	r2,zero
}
 8051260:	e037883a 	mov	sp,fp
 8051264:	dfc00117 	ldw	ra,4(sp)
 8051268:	df000017 	ldw	fp,0(sp)
 805126c:	dec00204 	addi	sp,sp,8
 8051270:	f800283a 	ret

08051274 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8051274:	defffd04 	addi	sp,sp,-12
 8051278:	df000215 	stw	fp,8(sp)
 805127c:	df000204 	addi	fp,sp,8
 8051280:	e13ffe15 	stw	r4,-8(fp)
 8051284:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8051288:	e0bffe17 	ldw	r2,-8(fp)
 805128c:	10800a17 	ldw	r2,40(r2)
 8051290:	10800104 	addi	r2,r2,4
 8051294:	1007883a 	mov	r3,r2
 8051298:	e0bfff17 	ldw	r2,-4(fp)
 805129c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 80512a0:	e0bffe17 	ldw	r2,-8(fp)
 80512a4:	10800a17 	ldw	r2,40(r2)
 80512a8:	10800104 	addi	r2,r2,4
 80512ac:	10800037 	ldwio	r2,0(r2)
 80512b0:	1007883a 	mov	r3,r2
 80512b4:	e0bffe17 	ldw	r2,-8(fp)
 80512b8:	10c00c15 	stw	r3,48(r2)
	return 0;
 80512bc:	0005883a 	mov	r2,zero
}
 80512c0:	e037883a 	mov	sp,fp
 80512c4:	df000017 	ldw	fp,0(sp)
 80512c8:	dec00104 	addi	sp,sp,4
 80512cc:	f800283a 	ret

080512d0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 80512d0:	defffd04 	addi	sp,sp,-12
 80512d4:	df000215 	stw	fp,8(sp)
 80512d8:	dc000115 	stw	r16,4(sp)
 80512dc:	df000204 	addi	fp,sp,8
 80512e0:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 80512e4:	e0bffe17 	ldw	r2,-8(fp)
 80512e8:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 80512ec:	e0bffe17 	ldw	r2,-8(fp)
 80512f0:	10800a17 	ldw	r2,40(r2)
 80512f4:	1007883a 	mov	r3,r2
 80512f8:	00800044 	movi	r2,1
 80512fc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8051300:	e0bffe17 	ldw	r2,-8(fp)
 8051304:	10c00b17 	ldw	r3,44(r2)
 8051308:	e0bffe17 	ldw	r2,-8(fp)
 805130c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8051310:	e0bffe17 	ldw	r2,-8(fp)
 8051314:	14000b15 	stw	r16,44(r2)
	return 0;
 8051318:	0005883a 	mov	r2,zero
}
 805131c:	e6ffff04 	addi	sp,fp,-4
 8051320:	df000117 	ldw	fp,4(sp)
 8051324:	dc000017 	ldw	r16,0(sp)
 8051328:	dec00204 	addi	sp,sp,8
 805132c:	f800283a 	ret

08051330 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8051330:	defffe04 	addi	sp,sp,-8
 8051334:	df000115 	stw	fp,4(sp)
 8051338:	df000104 	addi	fp,sp,4
 805133c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8051340:	e0bfff17 	ldw	r2,-4(fp)
 8051344:	10800a17 	ldw	r2,40(r2)
 8051348:	10800304 	addi	r2,r2,12
 805134c:	10800037 	ldwio	r2,0(r2)
 8051350:	1080004c 	andi	r2,r2,1
}
 8051354:	e037883a 	mov	sp,fp
 8051358:	df000017 	ldw	fp,0(sp)
 805135c:	dec00104 	addi	sp,sp,4
 8051360:	f800283a 	ret

08051364 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8051364:	defff604 	addi	sp,sp,-40
 8051368:	dfc00915 	stw	ra,36(sp)
 805136c:	df000815 	stw	fp,32(sp)
 8051370:	dd400715 	stw	r21,28(sp)
 8051374:	dd000615 	stw	r20,24(sp)
 8051378:	dcc00515 	stw	r19,20(sp)
 805137c:	dc800415 	stw	r18,16(sp)
 8051380:	dc400315 	stw	r17,12(sp)
 8051384:	dc000215 	stw	r16,8(sp)
 8051388:	df000804 	addi	fp,sp,32
 805138c:	e13ff815 	stw	r4,-32(fp)
 8051390:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8051394:	e0bff917 	ldw	r2,-28(fp)
 8051398:	10800058 	cmpnei	r2,r2,1
 805139c:	1000031e 	bne	r2,zero,80513ac <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 80513a0:	e0bff817 	ldw	r2,-32(fp)
 80513a4:	14400c17 	ldw	r17,48(r2)
 80513a8:	00000206 	br	80513b4 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 80513ac:	e0bff817 	ldw	r2,-32(fp)
 80513b0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 80513b4:	e0bff817 	ldw	r2,-32(fp)
 80513b8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80513bc:	e0bff817 	ldw	r2,-32(fp)
 80513c0:	10800e17 	ldw	r2,56(r2)
 80513c4:	10800098 	cmpnei	r2,r2,2
 80513c8:	1000031e 	bne	r2,zero,80513d8 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 80513cc:	8405883a 	add	r2,r16,r16
 80513d0:	1021883a 	mov	r16,r2
 80513d4:	00000306 	br	80513e4 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 80513d8:	8405883a 	add	r2,r16,r16
 80513dc:	1085883a 	add	r2,r2,r2
 80513e0:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 80513e4:	e0bff817 	ldw	r2,-32(fp)
 80513e8:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80513ec:	e0bff817 	ldw	r2,-32(fp)
 80513f0:	10800d17 	ldw	r2,52(r2)
 80513f4:	1000111e 	bne	r2,zero,805143c <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80513f8:	e0bff817 	ldw	r2,-32(fp)
 80513fc:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 8051400:	0029883a 	mov	r20,zero
 8051404:	00000b06 	br	8051434 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8051408:	0025883a 	mov	r18,zero
 805140c:	00000406 	br	8051420 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 8051410:	9445883a 	add	r2,r18,r17
 8051414:	0007883a 	mov	r3,zero
 8051418:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 805141c:	94800104 	addi	r18,r18,4
 8051420:	943ffb36 	bltu	r18,r16,8051410 <__alt_data_end+0xfffe9370>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8051424:	00800044 	movi	r2,1
 8051428:	1544983a 	sll	r2,r2,r21
 805142c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8051430:	a5000044 	addi	r20,r20,1
 8051434:	a4fff436 	bltu	r20,r19,8051408 <__alt_data_end+0xfffe9368>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8051438:	00000d06 	br	8051470 <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 805143c:	800b883a 	mov	r5,r16
 8051440:	9809883a 	mov	r4,r19
 8051444:	80418e00 	call	80418e0 <__mulsi3>
 8051448:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 805144c:	0021883a 	mov	r16,zero
 8051450:	00000506 	br	8051468 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 8051454:	8005883a 	mov	r2,r16
 8051458:	1445883a 	add	r2,r2,r17
 805145c:	0007883a 	mov	r3,zero
 8051460:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8051464:	84000104 	addi	r16,r16,4
 8051468:	8005883a 	mov	r2,r16
 805146c:	14fff936 	bltu	r2,r19,8051454 <__alt_data_end+0xfffe93b4>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8051470:	0001883a 	nop
 8051474:	e6fffa04 	addi	sp,fp,-24
 8051478:	dfc00717 	ldw	ra,28(sp)
 805147c:	df000617 	ldw	fp,24(sp)
 8051480:	dd400517 	ldw	r21,20(sp)
 8051484:	dd000417 	ldw	r20,16(sp)
 8051488:	dcc00317 	ldw	r19,12(sp)
 805148c:	dc800217 	ldw	r18,8(sp)
 8051490:	dc400117 	ldw	r17,4(sp)
 8051494:	dc000017 	ldw	r16,0(sp)
 8051498:	dec00804 	addi	sp,sp,32
 805149c:	f800283a 	ret

080514a0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 80514a0:	defff204 	addi	sp,sp,-56
 80514a4:	dfc00d15 	stw	ra,52(sp)
 80514a8:	df000c15 	stw	fp,48(sp)
 80514ac:	ddc00b15 	stw	r23,44(sp)
 80514b0:	dd800a15 	stw	r22,40(sp)
 80514b4:	dd400915 	stw	r21,36(sp)
 80514b8:	dd000815 	stw	r20,32(sp)
 80514bc:	dcc00715 	stw	r19,28(sp)
 80514c0:	dc800615 	stw	r18,24(sp)
 80514c4:	dc400515 	stw	r17,20(sp)
 80514c8:	dc000415 	stw	r16,16(sp)
 80514cc:	df000c04 	addi	fp,sp,48
 80514d0:	e13ff415 	stw	r4,-48(fp)
 80514d4:	e17ff515 	stw	r5,-44(fp)
 80514d8:	e1bff615 	stw	r6,-40(fp)
 80514dc:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80514e0:	e0bff417 	ldw	r2,-48(fp)
 80514e4:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80514e8:	e0bff417 	ldw	r2,-48(fp)
 80514ec:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80514f0:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 80514f4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 80514f8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 80514fc:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 8051500:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8051504:	a580032e 	bgeu	r20,r22,8051514 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 8051508:	b02b883a 	mov	r21,r22
		l_x = r_x;
 805150c:	a02d883a 	mov	r22,r20
		r_x = temp;
 8051510:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 8051514:	9c40032e 	bgeu	r19,r17,8051524 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 8051518:	882b883a 	mov	r21,r17
		t_y = b_y;
 805151c:	9823883a 	mov	r17,r19
		b_y = temp;
 8051520:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8051524:	b4808f2e 	bgeu	r22,r18,8051764 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 8051528:	8c008e2e 	bgeu	r17,r16,8051764 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 805152c:	a4800136 	bltu	r20,r18,8051534 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 8051530:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8051534:	9c000136 	bltu	r19,r16,805153c <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8051538:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 805153c:	e0800417 	ldw	r2,16(fp)
 8051540:	10800058 	cmpnei	r2,r2,1
 8051544:	1000031e 	bne	r2,zero,8051554 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 8051548:	e0bff417 	ldw	r2,-48(fp)
 805154c:	14000c17 	ldw	r16,48(r2)
 8051550:	00000206 	br	805155c <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 8051554:	e0bff417 	ldw	r2,-48(fp)
 8051558:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 805155c:	e0bff417 	ldw	r2,-48(fp)
 8051560:	10800d17 	ldw	r2,52(r2)
 8051564:	10003c1e 	bne	r2,zero,8051658 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8051568:	e0bff417 	ldw	r2,-48(fp)
 805156c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8051570:	8d44983a 	sll	r2,r17,r21
 8051574:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8051578:	e0bff417 	ldw	r2,-48(fp)
 805157c:	10800e17 	ldw	r2,56(r2)
 8051580:	10800058 	cmpnei	r2,r2,1
 8051584:	10000f1e 	bne	r2,zero,80515c4 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 8051588:	8825883a 	mov	r18,r17
 805158c:	00000b06 	br	80515bc <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 8051590:	b023883a 	mov	r17,r22
 8051594:	00000406 	br	80515a8 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8051598:	8c05883a 	add	r2,r17,r16
 805159c:	b807883a 	mov	r3,r23
 80515a0:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80515a4:	8c400044 	addi	r17,r17,1
 80515a8:	a47ffb2e 	bgeu	r20,r17,8051598 <__alt_data_end+0xfffe94f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 80515ac:	00800044 	movi	r2,1
 80515b0:	1544983a 	sll	r2,r2,r21
 80515b4:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80515b8:	94800044 	addi	r18,r18,1
 80515bc:	9cbff42e 	bgeu	r19,r18,8051590 <__alt_data_end+0xfffe94f0>
 80515c0:	00006906 	br	8051768 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80515c4:	e0bff417 	ldw	r2,-48(fp)
 80515c8:	10800e17 	ldw	r2,56(r2)
 80515cc:	10800098 	cmpnei	r2,r2,2
 80515d0:	1000101e 	bne	r2,zero,8051614 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 80515d4:	8825883a 	mov	r18,r17
 80515d8:	00000c06 	br	805160c <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 80515dc:	b023883a 	mov	r17,r22
 80515e0:	00000506 	br	80515f8 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80515e4:	8c45883a 	add	r2,r17,r17
 80515e8:	1405883a 	add	r2,r2,r16
 80515ec:	b807883a 	mov	r3,r23
 80515f0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80515f4:	8c400044 	addi	r17,r17,1
 80515f8:	a47ffa2e 	bgeu	r20,r17,80515e4 <__alt_data_end+0xfffe9544>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 80515fc:	00800044 	movi	r2,1
 8051600:	1544983a 	sll	r2,r2,r21
 8051604:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8051608:	94800044 	addi	r18,r18,1
 805160c:	9cbff32e 	bgeu	r19,r18,80515dc <__alt_data_end+0xfffe953c>
 8051610:	00005506 	br	8051768 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8051614:	8825883a 	mov	r18,r17
 8051618:	00000d06 	br	8051650 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 805161c:	b023883a 	mov	r17,r22
 8051620:	00000606 	br	805163c <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8051624:	8c45883a 	add	r2,r17,r17
 8051628:	1085883a 	add	r2,r2,r2
 805162c:	1405883a 	add	r2,r2,r16
 8051630:	b807883a 	mov	r3,r23
 8051634:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8051638:	8c400044 	addi	r17,r17,1
 805163c:	a47ff92e 	bgeu	r20,r17,8051624 <__alt_data_end+0xfffe9584>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8051640:	00800044 	movi	r2,1
 8051644:	1544983a 	sll	r2,r2,r21
 8051648:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 805164c:	94800044 	addi	r18,r18,1
 8051650:	9cbff22e 	bgeu	r19,r18,805161c <__alt_data_end+0xfffe957c>
 8051654:	00004406 	br	8051768 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8051658:	e0bff417 	ldw	r2,-48(fp)
 805165c:	10800e17 	ldw	r2,56(r2)
 8051660:	10800058 	cmpnei	r2,r2,1
 8051664:	1000111e 	bne	r2,zero,80516ac <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 8051668:	900b883a 	mov	r5,r18
 805166c:	8809883a 	mov	r4,r17
 8051670:	80418e00 	call	80418e0 <__mulsi3>
 8051674:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8051678:	882b883a 	mov	r21,r17
 805167c:	00000906 	br	80516a4 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 8051680:	b023883a 	mov	r17,r22
 8051684:	00000406 	br	8051698 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8051688:	8c05883a 	add	r2,r17,r16
 805168c:	b807883a 	mov	r3,r23
 8051690:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8051694:	8c400044 	addi	r17,r17,1
 8051698:	a47ffb2e 	bgeu	r20,r17,8051688 <__alt_data_end+0xfffe95e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 805169c:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80516a0:	ad400044 	addi	r21,r21,1
 80516a4:	9d7ff62e 	bgeu	r19,r21,8051680 <__alt_data_end+0xfffe95e0>
 80516a8:	00002f06 	br	8051768 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80516ac:	e0bff417 	ldw	r2,-48(fp)
 80516b0:	10800e17 	ldw	r2,56(r2)
 80516b4:	10800098 	cmpnei	r2,r2,2
 80516b8:	1000141e 	bne	r2,zero,805170c <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 80516bc:	9485883a 	add	r2,r18,r18
 80516c0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 80516c4:	900b883a 	mov	r5,r18
 80516c8:	8809883a 	mov	r4,r17
 80516cc:	80418e00 	call	80418e0 <__mulsi3>
 80516d0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80516d4:	882b883a 	mov	r21,r17
 80516d8:	00000a06 	br	8051704 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 80516dc:	b023883a 	mov	r17,r22
 80516e0:	00000506 	br	80516f8 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80516e4:	8c45883a 	add	r2,r17,r17
 80516e8:	1405883a 	add	r2,r2,r16
 80516ec:	b807883a 	mov	r3,r23
 80516f0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80516f4:	8c400044 	addi	r17,r17,1
 80516f8:	a47ffa2e 	bgeu	r20,r17,80516e4 <__alt_data_end+0xfffe9644>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 80516fc:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8051700:	ad400044 	addi	r21,r21,1
 8051704:	9d7ff52e 	bgeu	r19,r21,80516dc <__alt_data_end+0xfffe963c>
 8051708:	00001706 	br	8051768 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 805170c:	9485883a 	add	r2,r18,r18
 8051710:	1085883a 	add	r2,r2,r2
 8051714:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8051718:	900b883a 	mov	r5,r18
 805171c:	8809883a 	mov	r4,r17
 8051720:	80418e00 	call	80418e0 <__mulsi3>
 8051724:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8051728:	882b883a 	mov	r21,r17
 805172c:	00000b06 	br	805175c <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 8051730:	b023883a 	mov	r17,r22
 8051734:	00000606 	br	8051750 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8051738:	8c45883a 	add	r2,r17,r17
 805173c:	1085883a 	add	r2,r2,r2
 8051740:	1405883a 	add	r2,r2,r16
 8051744:	b807883a 	mov	r3,r23
 8051748:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 805174c:	8c400044 	addi	r17,r17,1
 8051750:	a47ff92e 	bgeu	r20,r17,8051738 <__alt_data_end+0xfffe9698>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8051754:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8051758:	ad400044 	addi	r21,r21,1
 805175c:	9d7ff42e 	bgeu	r19,r21,8051730 <__alt_data_end+0xfffe9690>
 8051760:	00000106 	br	8051768 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8051764:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8051768:	e6fff804 	addi	sp,fp,-32
 805176c:	dfc00917 	ldw	ra,36(sp)
 8051770:	df000817 	ldw	fp,32(sp)
 8051774:	ddc00717 	ldw	r23,28(sp)
 8051778:	dd800617 	ldw	r22,24(sp)
 805177c:	dd400517 	ldw	r21,20(sp)
 8051780:	dd000417 	ldw	r20,16(sp)
 8051784:	dcc00317 	ldw	r19,12(sp)
 8051788:	dc800217 	ldw	r18,8(sp)
 805178c:	dc400117 	ldw	r17,4(sp)
 8051790:	dc000017 	ldw	r16,0(sp)
 8051794:	dec00a04 	addi	sp,sp,40
 8051798:	f800283a 	ret

0805179c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 805179c:	defff304 	addi	sp,sp,-52
 80517a0:	dfc00c15 	stw	ra,48(sp)
 80517a4:	df000b15 	stw	fp,44(sp)
 80517a8:	dd800a15 	stw	r22,40(sp)
 80517ac:	dd400915 	stw	r21,36(sp)
 80517b0:	dd000815 	stw	r20,32(sp)
 80517b4:	dcc00715 	stw	r19,28(sp)
 80517b8:	dc800615 	stw	r18,24(sp)
 80517bc:	dc400515 	stw	r17,20(sp)
 80517c0:	dc000415 	stw	r16,16(sp)
 80517c4:	df000b04 	addi	fp,sp,44
 80517c8:	e13ff515 	stw	r4,-44(fp)
 80517cc:	e17ff615 	stw	r5,-40(fp)
 80517d0:	e1bff715 	stw	r6,-36(fp)
 80517d4:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80517d8:	e0bff517 	ldw	r2,-44(fp)
 80517dc:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80517e0:	e0bff517 	ldw	r2,-44(fp)
 80517e4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80517e8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 80517ec:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 80517f0:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 80517f4:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80517f8:	9440032e 	bgeu	r18,r17,8051808 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 80517fc:	882d883a 	mov	r22,r17
		l_x = r_x;
 8051800:	9023883a 	mov	r17,r18
		r_x = temp;
 8051804:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8051808:	8cc0632e 	bgeu	r17,r19,8051998 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 805180c:	a400622e 	bgeu	r20,r16,8051998 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8051810:	94c00136 	bltu	r18,r19,8051818 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 8051814:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8051818:	e0800317 	ldw	r2,12(fp)
 805181c:	10800058 	cmpnei	r2,r2,1
 8051820:	1000031e 	bne	r2,zero,8051830 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8051824:	e0bff517 	ldw	r2,-44(fp)
 8051828:	14000c17 	ldw	r16,48(r2)
 805182c:	00000206 	br	8051838 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8051830:	e0bff517 	ldw	r2,-44(fp)
 8051834:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8051838:	e0bff517 	ldw	r2,-44(fp)
 805183c:	10800d17 	ldw	r2,52(r2)
 8051840:	1000231e 	bne	r2,zero,80518d0 <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8051844:	e0bff517 	ldw	r2,-44(fp)
 8051848:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 805184c:	a4c4983a 	sll	r2,r20,r19
 8051850:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8051854:	e0bff517 	ldw	r2,-44(fp)
 8051858:	10800e17 	ldw	r2,56(r2)
 805185c:	10800058 	cmpnei	r2,r2,1
 8051860:	1000071e 	bne	r2,zero,8051880 <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 8051864:	00000406 	br	8051878 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8051868:	8c05883a 	add	r2,r17,r16
 805186c:	a807883a 	mov	r3,r21
 8051870:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8051874:	8c400044 	addi	r17,r17,1
 8051878:	947ffb2e 	bgeu	r18,r17,8051868 <__alt_data_end+0xfffe97c8>
 805187c:	00004706 	br	805199c <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8051880:	e0bff517 	ldw	r2,-44(fp)
 8051884:	10800e17 	ldw	r2,56(r2)
 8051888:	10800098 	cmpnei	r2,r2,2
 805188c:	10000e1e 	bne	r2,zero,80518c8 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 8051890:	00000506 	br	80518a8 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8051894:	8c45883a 	add	r2,r17,r17
 8051898:	1405883a 	add	r2,r2,r16
 805189c:	a807883a 	mov	r3,r21
 80518a0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 80518a4:	8c400044 	addi	r17,r17,1
 80518a8:	947ffa2e 	bgeu	r18,r17,8051894 <__alt_data_end+0xfffe97f4>
 80518ac:	00003b06 	br	805199c <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 80518b0:	8c45883a 	add	r2,r17,r17
 80518b4:	1085883a 	add	r2,r2,r2
 80518b8:	1405883a 	add	r2,r2,r16
 80518bc:	a807883a 	mov	r3,r21
 80518c0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 80518c4:	8c400044 	addi	r17,r17,1
 80518c8:	947ff92e 	bgeu	r18,r17,80518b0 <__alt_data_end+0xfffe9810>
 80518cc:	00003306 	br	805199c <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80518d0:	e0bff517 	ldw	r2,-44(fp)
 80518d4:	10800e17 	ldw	r2,56(r2)
 80518d8:	10800058 	cmpnei	r2,r2,1
 80518dc:	10000b1e 	bne	r2,zero,805190c <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 80518e0:	980b883a 	mov	r5,r19
 80518e4:	a009883a 	mov	r4,r20
 80518e8:	80418e00 	call	80418e0 <__mulsi3>
 80518ec:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 80518f0:	00000406 	br	8051904 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 80518f4:	8c05883a 	add	r2,r17,r16
 80518f8:	a807883a 	mov	r3,r21
 80518fc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8051900:	8c400044 	addi	r17,r17,1
 8051904:	947ffb2e 	bgeu	r18,r17,80518f4 <__alt_data_end+0xfffe9854>
 8051908:	00002406 	br	805199c <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 805190c:	e0bff517 	ldw	r2,-44(fp)
 8051910:	10800e17 	ldw	r2,56(r2)
 8051914:	10800098 	cmpnei	r2,r2,2
 8051918:	10000e1e 	bne	r2,zero,8051954 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 805191c:	9cc5883a 	add	r2,r19,r19
 8051920:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8051924:	980b883a 	mov	r5,r19
 8051928:	a009883a 	mov	r4,r20
 805192c:	80418e00 	call	80418e0 <__mulsi3>
 8051930:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8051934:	00000506 	br	805194c <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8051938:	8c45883a 	add	r2,r17,r17
 805193c:	1405883a 	add	r2,r2,r16
 8051940:	a807883a 	mov	r3,r21
 8051944:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8051948:	8c400044 	addi	r17,r17,1
 805194c:	947ffa2e 	bgeu	r18,r17,8051938 <__alt_data_end+0xfffe9898>
 8051950:	00001206 	br	805199c <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8051954:	9cc5883a 	add	r2,r19,r19
 8051958:	1085883a 	add	r2,r2,r2
 805195c:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8051960:	980b883a 	mov	r5,r19
 8051964:	a009883a 	mov	r4,r20
 8051968:	80418e00 	call	80418e0 <__mulsi3>
 805196c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8051970:	00000606 	br	805198c <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8051974:	8c45883a 	add	r2,r17,r17
 8051978:	1085883a 	add	r2,r2,r2
 805197c:	1405883a 	add	r2,r2,r16
 8051980:	a807883a 	mov	r3,r21
 8051984:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8051988:	8c400044 	addi	r17,r17,1
 805198c:	947ff92e 	bgeu	r18,r17,8051974 <__alt_data_end+0xfffe98d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 8051990:	84e1883a 	add	r16,r16,r19
 8051994:	00000106 	br	805199c <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8051998:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 805199c:	e6fff904 	addi	sp,fp,-28
 80519a0:	dfc00817 	ldw	ra,32(sp)
 80519a4:	df000717 	ldw	fp,28(sp)
 80519a8:	dd800617 	ldw	r22,24(sp)
 80519ac:	dd400517 	ldw	r21,20(sp)
 80519b0:	dd000417 	ldw	r20,16(sp)
 80519b4:	dcc00317 	ldw	r19,12(sp)
 80519b8:	dc800217 	ldw	r18,8(sp)
 80519bc:	dc400117 	ldw	r17,4(sp)
 80519c0:	dc000017 	ldw	r16,0(sp)
 80519c4:	dec00904 	addi	sp,sp,36
 80519c8:	f800283a 	ret

080519cc <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 80519cc:	defff304 	addi	sp,sp,-52
 80519d0:	dfc00c15 	stw	ra,48(sp)
 80519d4:	df000b15 	stw	fp,44(sp)
 80519d8:	dd800a15 	stw	r22,40(sp)
 80519dc:	dd400915 	stw	r21,36(sp)
 80519e0:	dd000815 	stw	r20,32(sp)
 80519e4:	dcc00715 	stw	r19,28(sp)
 80519e8:	dc800615 	stw	r18,24(sp)
 80519ec:	dc400515 	stw	r17,20(sp)
 80519f0:	dc000415 	stw	r16,16(sp)
 80519f4:	df000b04 	addi	fp,sp,44
 80519f8:	e13ff515 	stw	r4,-44(fp)
 80519fc:	e17ff615 	stw	r5,-40(fp)
 8051a00:	e1bff715 	stw	r6,-36(fp)
 8051a04:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8051a08:	e0bff517 	ldw	r2,-44(fp)
 8051a0c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8051a10:	e0bff517 	ldw	r2,-44(fp)
 8051a14:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8051a18:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 8051a1c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 8051a20:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 8051a24:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8051a28:	9500032e 	bgeu	r18,r20,8051a38 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 8051a2c:	a02b883a 	mov	r21,r20
		t_y = b_y;
 8051a30:	9029883a 	mov	r20,r18
		b_y = temp;
 8051a34:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8051a38:	8cc0722e 	bgeu	r17,r19,8051c04 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 8051a3c:	a400712e 	bgeu	r20,r16,8051c04 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8051a40:	94000136 	bltu	r18,r16,8051a48 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 8051a44:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8051a48:	e0800317 	ldw	r2,12(fp)
 8051a4c:	10800058 	cmpnei	r2,r2,1
 8051a50:	1000031e 	bne	r2,zero,8051a60 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8051a54:	e0bff517 	ldw	r2,-44(fp)
 8051a58:	14000c17 	ldw	r16,48(r2)
 8051a5c:	00000206 	br	8051a68 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8051a60:	e0bff517 	ldw	r2,-44(fp)
 8051a64:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8051a68:	e0bff517 	ldw	r2,-44(fp)
 8051a6c:	10800d17 	ldw	r2,52(r2)
 8051a70:	1000301e 	bne	r2,zero,8051b34 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8051a74:	e0bff517 	ldw	r2,-44(fp)
 8051a78:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8051a7c:	a544983a 	sll	r2,r20,r21
 8051a80:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8051a84:	e0bff517 	ldw	r2,-44(fp)
 8051a88:	10800e17 	ldw	r2,56(r2)
 8051a8c:	10800058 	cmpnei	r2,r2,1
 8051a90:	10000b1e 	bne	r2,zero,8051ac0 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 8051a94:	a027883a 	mov	r19,r20
 8051a98:	00000706 	br	8051ab8 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8051a9c:	8c05883a 	add	r2,r17,r16
 8051aa0:	b007883a 	mov	r3,r22
 8051aa4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8051aa8:	00800044 	movi	r2,1
 8051aac:	1544983a 	sll	r2,r2,r21
 8051ab0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8051ab4:	9cc00044 	addi	r19,r19,1
 8051ab8:	94fff82e 	bgeu	r18,r19,8051a9c <__alt_data_end+0xfffe99fc>
 8051abc:	00005206 	br	8051c08 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8051ac0:	e0bff517 	ldw	r2,-44(fp)
 8051ac4:	10800e17 	ldw	r2,56(r2)
 8051ac8:	10800098 	cmpnei	r2,r2,2
 8051acc:	10000c1e 	bne	r2,zero,8051b00 <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 8051ad0:	a027883a 	mov	r19,r20
 8051ad4:	00000806 	br	8051af8 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8051ad8:	8c45883a 	add	r2,r17,r17
 8051adc:	1405883a 	add	r2,r2,r16
 8051ae0:	b007883a 	mov	r3,r22
 8051ae4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8051ae8:	00800044 	movi	r2,1
 8051aec:	1544983a 	sll	r2,r2,r21
 8051af0:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8051af4:	9cc00044 	addi	r19,r19,1
 8051af8:	94fff72e 	bgeu	r18,r19,8051ad8 <__alt_data_end+0xfffe9a38>
 8051afc:	00004206 	br	8051c08 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8051b00:	a027883a 	mov	r19,r20
 8051b04:	00000906 	br	8051b2c <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8051b08:	8c45883a 	add	r2,r17,r17
 8051b0c:	1085883a 	add	r2,r2,r2
 8051b10:	1405883a 	add	r2,r2,r16
 8051b14:	b007883a 	mov	r3,r22
 8051b18:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8051b1c:	00800044 	movi	r2,1
 8051b20:	1544983a 	sll	r2,r2,r21
 8051b24:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8051b28:	9cc00044 	addi	r19,r19,1
 8051b2c:	94fff62e 	bgeu	r18,r19,8051b08 <__alt_data_end+0xfffe9a68>
 8051b30:	00003506 	br	8051c08 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8051b34:	e0bff517 	ldw	r2,-44(fp)
 8051b38:	10800e17 	ldw	r2,56(r2)
 8051b3c:	10800058 	cmpnei	r2,r2,1
 8051b40:	10000c1e 	bne	r2,zero,8051b74 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 8051b44:	980b883a 	mov	r5,r19
 8051b48:	a009883a 	mov	r4,r20
 8051b4c:	80418e00 	call	80418e0 <__mulsi3>
 8051b50:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8051b54:	00000506 	br	8051b6c <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8051b58:	8c05883a 	add	r2,r17,r16
 8051b5c:	b007883a 	mov	r3,r22
 8051b60:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8051b64:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8051b68:	a5000044 	addi	r20,r20,1
 8051b6c:	953ffa2e 	bgeu	r18,r20,8051b58 <__alt_data_end+0xfffe9ab8>
 8051b70:	00002506 	br	8051c08 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8051b74:	e0bff517 	ldw	r2,-44(fp)
 8051b78:	10800e17 	ldw	r2,56(r2)
 8051b7c:	10800098 	cmpnei	r2,r2,2
 8051b80:	10000f1e 	bne	r2,zero,8051bc0 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 8051b84:	9cc5883a 	add	r2,r19,r19
 8051b88:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 8051b8c:	980b883a 	mov	r5,r19
 8051b90:	a009883a 	mov	r4,r20
 8051b94:	80418e00 	call	80418e0 <__mulsi3>
 8051b98:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8051b9c:	00000606 	br	8051bb8 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8051ba0:	8c45883a 	add	r2,r17,r17
 8051ba4:	1405883a 	add	r2,r2,r16
 8051ba8:	b007883a 	mov	r3,r22
 8051bac:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8051bb0:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8051bb4:	a5000044 	addi	r20,r20,1
 8051bb8:	953ff92e 	bgeu	r18,r20,8051ba0 <__alt_data_end+0xfffe9b00>
 8051bbc:	00001206 	br	8051c08 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8051bc0:	9cc5883a 	add	r2,r19,r19
 8051bc4:	1085883a 	add	r2,r2,r2
 8051bc8:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 8051bcc:	980b883a 	mov	r5,r19
 8051bd0:	a009883a 	mov	r4,r20
 8051bd4:	80418e00 	call	80418e0 <__mulsi3>
 8051bd8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8051bdc:	00000706 	br	8051bfc <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8051be0:	8c45883a 	add	r2,r17,r17
 8051be4:	1085883a 	add	r2,r2,r2
 8051be8:	1405883a 	add	r2,r2,r16
 8051bec:	b007883a 	mov	r3,r22
 8051bf0:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8051bf4:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8051bf8:	a5000044 	addi	r20,r20,1
 8051bfc:	953ff82e 	bgeu	r18,r20,8051be0 <__alt_data_end+0xfffe9b40>
 8051c00:	00000106 	br	8051c08 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8051c04:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8051c08:	e6fff904 	addi	sp,fp,-28
 8051c0c:	dfc00817 	ldw	ra,32(sp)
 8051c10:	df000717 	ldw	fp,28(sp)
 8051c14:	dd800617 	ldw	r22,24(sp)
 8051c18:	dd400517 	ldw	r21,20(sp)
 8051c1c:	dd000417 	ldw	r20,16(sp)
 8051c20:	dcc00317 	ldw	r19,12(sp)
 8051c24:	dc800217 	ldw	r18,8(sp)
 8051c28:	dc400117 	ldw	r17,4(sp)
 8051c2c:	dc000017 	ldw	r16,0(sp)
 8051c30:	dec00904 	addi	sp,sp,36
 8051c34:	f800283a 	ret

08051c38 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8051c38:	defff804 	addi	sp,sp,-32
 8051c3c:	dfc00715 	stw	ra,28(sp)
 8051c40:	df000615 	stw	fp,24(sp)
 8051c44:	df000604 	addi	fp,sp,24
 8051c48:	e13ffc15 	stw	r4,-16(fp)
 8051c4c:	e17ffd15 	stw	r5,-12(fp)
 8051c50:	e1bffe15 	stw	r6,-8(fp)
 8051c54:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8051c58:	e0800417 	ldw	r2,16(fp)
 8051c5c:	d8800115 	stw	r2,4(sp)
 8051c60:	e0800317 	ldw	r2,12(fp)
 8051c64:	d8800015 	stw	r2,0(sp)
 8051c68:	e1fffe17 	ldw	r7,-8(fp)
 8051c6c:	e1bfff17 	ldw	r6,-4(fp)
 8051c70:	e17ffd17 	ldw	r5,-12(fp)
 8051c74:	e13ffc17 	ldw	r4,-16(fp)
 8051c78:	805179c0 	call	805179c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8051c7c:	e0800417 	ldw	r2,16(fp)
 8051c80:	d8800115 	stw	r2,4(sp)
 8051c84:	e0800317 	ldw	r2,12(fp)
 8051c88:	d8800015 	stw	r2,0(sp)
 8051c8c:	e1c00217 	ldw	r7,8(fp)
 8051c90:	e1bfff17 	ldw	r6,-4(fp)
 8051c94:	e17ffd17 	ldw	r5,-12(fp)
 8051c98:	e13ffc17 	ldw	r4,-16(fp)
 8051c9c:	805179c0 	call	805179c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8051ca0:	e0800417 	ldw	r2,16(fp)
 8051ca4:	d8800115 	stw	r2,4(sp)
 8051ca8:	e0800317 	ldw	r2,12(fp)
 8051cac:	d8800015 	stw	r2,0(sp)
 8051cb0:	e1c00217 	ldw	r7,8(fp)
 8051cb4:	e1bffe17 	ldw	r6,-8(fp)
 8051cb8:	e17ffd17 	ldw	r5,-12(fp)
 8051cbc:	e13ffc17 	ldw	r4,-16(fp)
 8051cc0:	80519cc0 	call	80519cc <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8051cc4:	e0800417 	ldw	r2,16(fp)
 8051cc8:	d8800115 	stw	r2,4(sp)
 8051ccc:	e0800317 	ldw	r2,12(fp)
 8051cd0:	d8800015 	stw	r2,0(sp)
 8051cd4:	e1c00217 	ldw	r7,8(fp)
 8051cd8:	e1bffe17 	ldw	r6,-8(fp)
 8051cdc:	e17fff17 	ldw	r5,-4(fp)
 8051ce0:	e13ffc17 	ldw	r4,-16(fp)
 8051ce4:	80519cc0 	call	80519cc <alt_up_pixel_buffer_dma_draw_vline>
}
 8051ce8:	0001883a 	nop
 8051cec:	e037883a 	mov	sp,fp
 8051cf0:	dfc00117 	ldw	ra,4(sp)
 8051cf4:	df000017 	ldw	fp,0(sp)
 8051cf8:	dec00204 	addi	sp,sp,8
 8051cfc:	f800283a 	ret

08051d00 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8051d00:	defffb04 	addi	sp,sp,-20
 8051d04:	dfc00415 	stw	ra,16(sp)
 8051d08:	df000315 	stw	fp,12(sp)
 8051d0c:	dc800215 	stw	r18,8(sp)
 8051d10:	dc400115 	stw	r17,4(sp)
 8051d14:	dc000015 	stw	r16,0(sp)
 8051d18:	df000304 	addi	fp,sp,12
 8051d1c:	2021883a 	mov	r16,r4
 8051d20:	2807883a 	mov	r3,r5
 8051d24:	3023883a 	mov	r17,r6
 8051d28:	3809883a 	mov	r4,r7
 8051d2c:	e4800217 	ldw	r18,8(fp)
 8051d30:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 8051d34:	1000071e 	bne	r2,zero,8051d54 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8051d38:	200b883a 	mov	r5,r4
 8051d3c:	1809883a 	mov	r4,r3
 8051d40:	80418e00 	call	80418e0 <__mulsi3>
 8051d44:	1445883a 	add	r2,r2,r17
 8051d48:	1405883a 	add	r2,r2,r16
 8051d4c:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8051d50:	00001206 	br	8051d9c <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 8051d54:	10800058 	cmpnei	r2,r2,1
 8051d58:	1000081e 	bne	r2,zero,8051d7c <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8051d5c:	200b883a 	mov	r5,r4
 8051d60:	1809883a 	mov	r4,r3
 8051d64:	80418e00 	call	80418e0 <__mulsi3>
 8051d68:	1445883a 	add	r2,r2,r17
 8051d6c:	1085883a 	add	r2,r2,r2
 8051d70:	1405883a 	add	r2,r2,r16
 8051d74:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8051d78:	00000806 	br	8051d9c <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 8051d7c:	200b883a 	mov	r5,r4
 8051d80:	1809883a 	mov	r4,r3
 8051d84:	80418e00 	call	80418e0 <__mulsi3>
 8051d88:	1445883a 	add	r2,r2,r17
 8051d8c:	1085883a 	add	r2,r2,r2
 8051d90:	1085883a 	add	r2,r2,r2
 8051d94:	1405883a 	add	r2,r2,r16
 8051d98:	14800035 	stwio	r18,0(r2)
}
 8051d9c:	0001883a 	nop
 8051da0:	e6fffd04 	addi	sp,fp,-12
 8051da4:	dfc00417 	ldw	ra,16(sp)
 8051da8:	df000317 	ldw	fp,12(sp)
 8051dac:	dc800217 	ldw	r18,8(sp)
 8051db0:	dc400117 	ldw	r17,4(sp)
 8051db4:	dc000017 	ldw	r16,0(sp)
 8051db8:	dec00504 	addi	sp,sp,20
 8051dbc:	f800283a 	ret

08051dc0 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8051dc0:	deffeb04 	addi	sp,sp,-84
 8051dc4:	dfc01415 	stw	ra,80(sp)
 8051dc8:	df001315 	stw	fp,76(sp)
 8051dcc:	ddc01215 	stw	r23,72(sp)
 8051dd0:	dd801115 	stw	r22,68(sp)
 8051dd4:	dd401015 	stw	r21,64(sp)
 8051dd8:	dd000f15 	stw	r20,60(sp)
 8051ddc:	dcc00e15 	stw	r19,56(sp)
 8051de0:	dc800d15 	stw	r18,52(sp)
 8051de4:	dc400c15 	stw	r17,48(sp)
 8051de8:	dc000b15 	stw	r16,44(sp)
 8051dec:	df001304 	addi	fp,sp,76
 8051df0:	e13fef15 	stw	r4,-68(fp)
 8051df4:	e17ff015 	stw	r5,-64(fp)
 8051df8:	e1bff115 	stw	r6,-60(fp)
 8051dfc:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8051e00:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8051e04:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 8051e08:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 8051e0c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8051e10:	a4c5c83a 	sub	r2,r20,r19
 8051e14:	1000010e 	bge	r2,zero,8051e1c <alt_up_pixel_buffer_dma_draw_line+0x5c>
 8051e18:	0085c83a 	sub	r2,zero,r2
 8051e1c:	1007883a 	mov	r3,r2
 8051e20:	9445c83a 	sub	r2,r18,r17
 8051e24:	1000010e 	bge	r2,zero,8051e2c <alt_up_pixel_buffer_dma_draw_line+0x6c>
 8051e28:	0085c83a 	sub	r2,zero,r2
 8051e2c:	10c4803a 	cmplt	r2,r2,r3
 8051e30:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8051e34:	e0bfef17 	ldw	r2,-68(fp)
 8051e38:	10800e17 	ldw	r2,56(r2)
 8051e3c:	10800060 	cmpeqi	r2,r2,1
 8051e40:	1000081e 	bne	r2,zero,8051e64 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8051e44:	e0bfef17 	ldw	r2,-68(fp)
 8051e48:	10800e17 	ldw	r2,56(r2)
 8051e4c:	10800098 	cmpnei	r2,r2,2
 8051e50:	1000021e 	bne	r2,zero,8051e5c <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8051e54:	00800044 	movi	r2,1
 8051e58:	00000306 	br	8051e68 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 8051e5c:	00800084 	movi	r2,2
 8051e60:	00000106 	br	8051e68 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8051e64:	0005883a 	mov	r2,zero
 8051e68:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 8051e6c:	e0800317 	ldw	r2,12(fp)
 8051e70:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8051e74:	e0bfef17 	ldw	r2,-68(fp)
 8051e78:	10800d17 	ldw	r2,52(r2)
 8051e7c:	1000071e 	bne	r2,zero,8051e9c <alt_up_pixel_buffer_dma_draw_line+0xdc>
 8051e80:	e0bfef17 	ldw	r2,-68(fp)
 8051e84:	10801317 	ldw	r2,76(r2)
 8051e88:	e0fff417 	ldw	r3,-48(fp)
 8051e8c:	10c5c83a 	sub	r2,r2,r3
 8051e90:	00c00044 	movi	r3,1
 8051e94:	1884983a 	sll	r2,r3,r2
 8051e98:	00000206 	br	8051ea4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 8051e9c:	e0bfef17 	ldw	r2,-68(fp)
 8051ea0:	10800f17 	ldw	r2,60(r2)
 8051ea4:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 8051ea8:	e0800417 	ldw	r2,16(fp)
 8051eac:	10800058 	cmpnei	r2,r2,1
 8051eb0:	1000031e 	bne	r2,zero,8051ec0 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8051eb4:	e0bfef17 	ldw	r2,-68(fp)
 8051eb8:	15c00c17 	ldw	r23,48(r2)
 8051ebc:	00000206 	br	8051ec8 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8051ec0:	e0bfef17 	ldw	r2,-68(fp)
 8051ec4:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 8051ec8:	e0bff307 	ldb	r2,-52(fp)
 8051ecc:	0080060e 	bge	zero,r2,8051ee8 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8051ed0:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8051ed4:	9823883a 	mov	r17,r19
		y_0 = error;
 8051ed8:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 8051edc:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8051ee0:	a025883a 	mov	r18,r20
		y_1 = error;
 8051ee4:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 8051ee8:	9440060e 	bge	r18,r17,8051f04 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 8051eec:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8051ef0:	9023883a 	mov	r17,r18
		x_1 = error;
 8051ef4:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 8051ef8:	9821883a 	mov	r16,r19
		y_0 = y_1;
 8051efc:	a027883a 	mov	r19,r20
		y_1 = error;
 8051f00:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8051f04:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 8051f08:	a4c5c83a 	sub	r2,r20,r19
 8051f0c:	1000010e 	bge	r2,zero,8051f14 <alt_up_pixel_buffer_dma_draw_line+0x154>
 8051f10:	0085c83a 	sub	r2,zero,r2
 8051f14:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 8051f18:	a804d7fa 	srli	r2,r21,31
 8051f1c:	1545883a 	add	r2,r2,r21
 8051f20:	1005d07a 	srai	r2,r2,1
 8051f24:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8051f28:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8051f2c:	9d00020e 	bge	r19,r20,8051f38 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8051f30:	04c00044 	movi	r19,1
 8051f34:	00000106 	br	8051f3c <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 8051f38:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8051f3c:	e0bff307 	ldb	r2,-52(fp)
 8051f40:	10800058 	cmpnei	r2,r2,1
 8051f44:	1000211e 	bne	r2,zero,8051fcc <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 8051f48:	00000f06 	br	8051f88 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8051f4c:	e0bff417 	ldw	r2,-48(fp)
 8051f50:	d8800115 	stw	r2,4(sp)
 8051f54:	e0bff517 	ldw	r2,-44(fp)
 8051f58:	d8800015 	stw	r2,0(sp)
 8051f5c:	880f883a 	mov	r7,r17
 8051f60:	b00d883a 	mov	r6,r22
 8051f64:	e17ff617 	ldw	r5,-40(fp)
 8051f68:	b809883a 	mov	r4,r23
 8051f6c:	8051d000 	call	8051d00 <helper_plot_pixel>
			error = error + deltay;
 8051f70:	e0bff717 	ldw	r2,-36(fp)
 8051f74:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8051f78:	0400020e 	bge	zero,r16,8051f84 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 8051f7c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8051f80:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8051f84:	8c400044 	addi	r17,r17,1
 8051f88:	947ff00e 	bge	r18,r17,8051f4c <__alt_data_end+0xfffe9eac>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8051f8c:	00001006 	br	8051fd0 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8051f90:	e0bff417 	ldw	r2,-48(fp)
 8051f94:	d8800115 	stw	r2,4(sp)
 8051f98:	e0bff517 	ldw	r2,-44(fp)
 8051f9c:	d8800015 	stw	r2,0(sp)
 8051fa0:	b00f883a 	mov	r7,r22
 8051fa4:	880d883a 	mov	r6,r17
 8051fa8:	e17ff617 	ldw	r5,-40(fp)
 8051fac:	b809883a 	mov	r4,r23
 8051fb0:	8051d000 	call	8051d00 <helper_plot_pixel>
			error = error + deltay;
 8051fb4:	e0bff717 	ldw	r2,-36(fp)
 8051fb8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8051fbc:	0400020e 	bge	zero,r16,8051fc8 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8051fc0:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8051fc4:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8051fc8:	8c400044 	addi	r17,r17,1
 8051fcc:	947ff00e 	bge	r18,r17,8051f90 <__alt_data_end+0xfffe9ef0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8051fd0:	0001883a 	nop
 8051fd4:	e6fff804 	addi	sp,fp,-32
 8051fd8:	dfc00917 	ldw	ra,36(sp)
 8051fdc:	df000817 	ldw	fp,32(sp)
 8051fe0:	ddc00717 	ldw	r23,28(sp)
 8051fe4:	dd800617 	ldw	r22,24(sp)
 8051fe8:	dd400517 	ldw	r21,20(sp)
 8051fec:	dd000417 	ldw	r20,16(sp)
 8051ff0:	dcc00317 	ldw	r19,12(sp)
 8051ff4:	dc800217 	ldw	r18,8(sp)
 8051ff8:	dc400117 	ldw	r17,4(sp)
 8051ffc:	dc000017 	ldw	r16,0(sp)
 8052000:	dec00a04 	addi	sp,sp,40
 8052004:	f800283a 	ret

08052008 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8052008:	defffa04 	addi	sp,sp,-24
 805200c:	dfc00515 	stw	ra,20(sp)
 8052010:	df000415 	stw	fp,16(sp)
 8052014:	df000404 	addi	fp,sp,16
 8052018:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 805201c:	00800244 	movi	r2,9
 8052020:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8052024:	014003f4 	movhi	r5,15
 8052028:	29509004 	addi	r5,r5,16960
 805202c:	e13ffd17 	ldw	r4,-12(fp)
 8052030:	80418e00 	call	80418e0 <__mulsi3>
 8052034:	100b883a 	mov	r5,r2
 8052038:	0100bef4 	movhi	r4,763
 805203c:	213c2004 	addi	r4,r4,-3968
 8052040:	80437f80 	call	80437f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8052044:	100b883a 	mov	r5,r2
 8052048:	01200034 	movhi	r4,32768
 805204c:	213fffc4 	addi	r4,r4,-1
 8052050:	80437f80 	call	80437f8 <__udivsi3>
 8052054:	100b883a 	mov	r5,r2
 8052058:	e13fff17 	ldw	r4,-4(fp)
 805205c:	80437f80 	call	80437f8 <__udivsi3>
 8052060:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8052064:	e0bffe17 	ldw	r2,-8(fp)
 8052068:	10002a26 	beq	r2,zero,8052114 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 805206c:	e03ffc15 	stw	zero,-16(fp)
 8052070:	00001706 	br	80520d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8052074:	00a00034 	movhi	r2,32768
 8052078:	10bfffc4 	addi	r2,r2,-1
 805207c:	10bfffc4 	addi	r2,r2,-1
 8052080:	103ffe1e 	bne	r2,zero,805207c <__alt_data_end+0xfffe9fdc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8052084:	014003f4 	movhi	r5,15
 8052088:	29509004 	addi	r5,r5,16960
 805208c:	e13ffd17 	ldw	r4,-12(fp)
 8052090:	80418e00 	call	80418e0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8052094:	100b883a 	mov	r5,r2
 8052098:	0100bef4 	movhi	r4,763
 805209c:	213c2004 	addi	r4,r4,-3968
 80520a0:	80437f80 	call	80437f8 <__udivsi3>
 80520a4:	100b883a 	mov	r5,r2
 80520a8:	01200034 	movhi	r4,32768
 80520ac:	213fffc4 	addi	r4,r4,-1
 80520b0:	80437f80 	call	80437f8 <__udivsi3>
 80520b4:	1007883a 	mov	r3,r2
 80520b8:	e0bfff17 	ldw	r2,-4(fp)
 80520bc:	10c5c83a 	sub	r2,r2,r3
 80520c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80520c4:	e0bffc17 	ldw	r2,-16(fp)
 80520c8:	10800044 	addi	r2,r2,1
 80520cc:	e0bffc15 	stw	r2,-16(fp)
 80520d0:	e0fffc17 	ldw	r3,-16(fp)
 80520d4:	e0bffe17 	ldw	r2,-8(fp)
 80520d8:	18bfe616 	blt	r3,r2,8052074 <__alt_data_end+0xfffe9fd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80520dc:	014003f4 	movhi	r5,15
 80520e0:	29509004 	addi	r5,r5,16960
 80520e4:	e13ffd17 	ldw	r4,-12(fp)
 80520e8:	80418e00 	call	80418e0 <__mulsi3>
 80520ec:	100b883a 	mov	r5,r2
 80520f0:	0100bef4 	movhi	r4,763
 80520f4:	213c2004 	addi	r4,r4,-3968
 80520f8:	80437f80 	call	80437f8 <__udivsi3>
 80520fc:	e17fff17 	ldw	r5,-4(fp)
 8052100:	1009883a 	mov	r4,r2
 8052104:	80418e00 	call	80418e0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8052108:	10bfffc4 	addi	r2,r2,-1
 805210c:	103ffe1e 	bne	r2,zero,8052108 <__alt_data_end+0xfffea068>
 8052110:	00000d06 	br	8052148 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8052114:	014003f4 	movhi	r5,15
 8052118:	29509004 	addi	r5,r5,16960
 805211c:	e13ffd17 	ldw	r4,-12(fp)
 8052120:	80418e00 	call	80418e0 <__mulsi3>
 8052124:	100b883a 	mov	r5,r2
 8052128:	0100bef4 	movhi	r4,763
 805212c:	213c2004 	addi	r4,r4,-3968
 8052130:	80437f80 	call	80437f8 <__udivsi3>
 8052134:	e17fff17 	ldw	r5,-4(fp)
 8052138:	1009883a 	mov	r4,r2
 805213c:	80418e00 	call	80418e0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8052140:	10bfffc4 	addi	r2,r2,-1
 8052144:	00bffe16 	blt	zero,r2,8052140 <__alt_data_end+0xfffea0a0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8052148:	0005883a 	mov	r2,zero
}
 805214c:	e037883a 	mov	sp,fp
 8052150:	dfc00117 	ldw	ra,4(sp)
 8052154:	df000017 	ldw	fp,0(sp)
 8052158:	dec00204 	addi	sp,sp,8
 805215c:	f800283a 	ret

08052160 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8052160:	deffff04 	addi	sp,sp,-4
 8052164:	df000015 	stw	fp,0(sp)
 8052168:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 805216c:	0001883a 	nop
 8052170:	e037883a 	mov	sp,fp
 8052174:	df000017 	ldw	fp,0(sp)
 8052178:	dec00104 	addi	sp,sp,4
 805217c:	f800283a 	ret

08052180 <alt_get_errno>:
 8052180:	defffe04 	addi	sp,sp,-8
 8052184:	dfc00115 	stw	ra,4(sp)
 8052188:	df000015 	stw	fp,0(sp)
 805218c:	d839883a 	mov	fp,sp
 8052190:	d0a00a17 	ldw	r2,-32728(gp)
 8052194:	10000326 	beq	r2,zero,80521a4 <alt_get_errno+0x24>
 8052198:	d0a00a17 	ldw	r2,-32728(gp)
 805219c:	103ee83a 	callr	r2
 80521a0:	00000106 	br	80521a8 <alt_get_errno+0x28>
 80521a4:	d0a70b04 	addi	r2,gp,-25556
 80521a8:	e037883a 	mov	sp,fp
 80521ac:	dfc00117 	ldw	ra,4(sp)
 80521b0:	df000017 	ldw	fp,0(sp)
 80521b4:	dec00204 	addi	sp,sp,8
 80521b8:	f800283a 	ret

080521bc <alt_dev_llist_insert>:
 80521bc:	defffa04 	addi	sp,sp,-24
 80521c0:	dfc00515 	stw	ra,20(sp)
 80521c4:	df000415 	stw	fp,16(sp)
 80521c8:	df000404 	addi	fp,sp,16
 80521cc:	e13ffe15 	stw	r4,-8(fp)
 80521d0:	e17fff15 	stw	r5,-4(fp)
 80521d4:	e0bffe17 	ldw	r2,-8(fp)
 80521d8:	10000326 	beq	r2,zero,80521e8 <alt_dev_llist_insert+0x2c>
 80521dc:	e0bffe17 	ldw	r2,-8(fp)
 80521e0:	10800217 	ldw	r2,8(r2)
 80521e4:	1000061e 	bne	r2,zero,8052200 <alt_dev_llist_insert+0x44>
 80521e8:	80521800 	call	8052180 <alt_get_errno>
 80521ec:	1007883a 	mov	r3,r2
 80521f0:	00800584 	movi	r2,22
 80521f4:	18800015 	stw	r2,0(r3)
 80521f8:	00bffa84 	movi	r2,-22
 80521fc:	00001306 	br	805224c <alt_dev_llist_insert+0x90>
 8052200:	e0bffe17 	ldw	r2,-8(fp)
 8052204:	e0ffff17 	ldw	r3,-4(fp)
 8052208:	e0fffc15 	stw	r3,-16(fp)
 805220c:	e0bffd15 	stw	r2,-12(fp)
 8052210:	e0bffd17 	ldw	r2,-12(fp)
 8052214:	e0fffc17 	ldw	r3,-16(fp)
 8052218:	10c00115 	stw	r3,4(r2)
 805221c:	e0bffc17 	ldw	r2,-16(fp)
 8052220:	10c00017 	ldw	r3,0(r2)
 8052224:	e0bffd17 	ldw	r2,-12(fp)
 8052228:	10c00015 	stw	r3,0(r2)
 805222c:	e0bffc17 	ldw	r2,-16(fp)
 8052230:	10800017 	ldw	r2,0(r2)
 8052234:	e0fffd17 	ldw	r3,-12(fp)
 8052238:	10c00115 	stw	r3,4(r2)
 805223c:	e0bffc17 	ldw	r2,-16(fp)
 8052240:	e0fffd17 	ldw	r3,-12(fp)
 8052244:	10c00015 	stw	r3,0(r2)
 8052248:	0005883a 	mov	r2,zero
 805224c:	e037883a 	mov	sp,fp
 8052250:	dfc00117 	ldw	ra,4(sp)
 8052254:	df000017 	ldw	fp,0(sp)
 8052258:	dec00204 	addi	sp,sp,8
 805225c:	f800283a 	ret

08052260 <_do_ctors>:
 8052260:	defffd04 	addi	sp,sp,-12
 8052264:	dfc00215 	stw	ra,8(sp)
 8052268:	df000115 	stw	fp,4(sp)
 805226c:	df000104 	addi	fp,sp,4
 8052270:	00820174 	movhi	r2,2053
 8052274:	108b7404 	addi	r2,r2,11728
 8052278:	e0bfff15 	stw	r2,-4(fp)
 805227c:	00000606 	br	8052298 <_do_ctors+0x38>
 8052280:	e0bfff17 	ldw	r2,-4(fp)
 8052284:	10800017 	ldw	r2,0(r2)
 8052288:	103ee83a 	callr	r2
 805228c:	e0bfff17 	ldw	r2,-4(fp)
 8052290:	10bfff04 	addi	r2,r2,-4
 8052294:	e0bfff15 	stw	r2,-4(fp)
 8052298:	e0ffff17 	ldw	r3,-4(fp)
 805229c:	00820174 	movhi	r2,2053
 80522a0:	108b7504 	addi	r2,r2,11732
 80522a4:	18bff62e 	bgeu	r3,r2,8052280 <__alt_data_end+0xfffea1e0>
 80522a8:	0001883a 	nop
 80522ac:	e037883a 	mov	sp,fp
 80522b0:	dfc00117 	ldw	ra,4(sp)
 80522b4:	df000017 	ldw	fp,0(sp)
 80522b8:	dec00204 	addi	sp,sp,8
 80522bc:	f800283a 	ret

080522c0 <_do_dtors>:
 80522c0:	defffd04 	addi	sp,sp,-12
 80522c4:	dfc00215 	stw	ra,8(sp)
 80522c8:	df000115 	stw	fp,4(sp)
 80522cc:	df000104 	addi	fp,sp,4
 80522d0:	00820174 	movhi	r2,2053
 80522d4:	108b7404 	addi	r2,r2,11728
 80522d8:	e0bfff15 	stw	r2,-4(fp)
 80522dc:	00000606 	br	80522f8 <_do_dtors+0x38>
 80522e0:	e0bfff17 	ldw	r2,-4(fp)
 80522e4:	10800017 	ldw	r2,0(r2)
 80522e8:	103ee83a 	callr	r2
 80522ec:	e0bfff17 	ldw	r2,-4(fp)
 80522f0:	10bfff04 	addi	r2,r2,-4
 80522f4:	e0bfff15 	stw	r2,-4(fp)
 80522f8:	e0ffff17 	ldw	r3,-4(fp)
 80522fc:	00820174 	movhi	r2,2053
 8052300:	108b7504 	addi	r2,r2,11732
 8052304:	18bff62e 	bgeu	r3,r2,80522e0 <__alt_data_end+0xfffea240>
 8052308:	0001883a 	nop
 805230c:	e037883a 	mov	sp,fp
 8052310:	dfc00117 	ldw	ra,4(sp)
 8052314:	df000017 	ldw	fp,0(sp)
 8052318:	dec00204 	addi	sp,sp,8
 805231c:	f800283a 	ret

08052320 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8052320:	defffa04 	addi	sp,sp,-24
 8052324:	dfc00515 	stw	ra,20(sp)
 8052328:	df000415 	stw	fp,16(sp)
 805232c:	df000404 	addi	fp,sp,16
 8052330:	e13ffe15 	stw	r4,-8(fp)
 8052334:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8052338:	e0bfff17 	ldw	r2,-4(fp)
 805233c:	10800017 	ldw	r2,0(r2)
 8052340:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8052344:	e13ffe17 	ldw	r4,-8(fp)
 8052348:	8043b940 	call	8043b94 <strlen>
 805234c:	10800044 	addi	r2,r2,1
 8052350:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8052354:	00000d06 	br	805238c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8052358:	e0bffc17 	ldw	r2,-16(fp)
 805235c:	10800217 	ldw	r2,8(r2)
 8052360:	e0fffd17 	ldw	r3,-12(fp)
 8052364:	180d883a 	mov	r6,r3
 8052368:	e17ffe17 	ldw	r5,-8(fp)
 805236c:	1009883a 	mov	r4,r2
 8052370:	8052a8c0 	call	8052a8c <memcmp>
 8052374:	1000021e 	bne	r2,zero,8052380 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8052378:	e0bffc17 	ldw	r2,-16(fp)
 805237c:	00000706 	br	805239c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8052380:	e0bffc17 	ldw	r2,-16(fp)
 8052384:	10800017 	ldw	r2,0(r2)
 8052388:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 805238c:	e0fffc17 	ldw	r3,-16(fp)
 8052390:	e0bfff17 	ldw	r2,-4(fp)
 8052394:	18bff01e 	bne	r3,r2,8052358 <__alt_data_end+0xfffea2b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8052398:	0005883a 	mov	r2,zero
}
 805239c:	e037883a 	mov	sp,fp
 80523a0:	dfc00117 	ldw	ra,4(sp)
 80523a4:	df000017 	ldw	fp,0(sp)
 80523a8:	dec00204 	addi	sp,sp,8
 80523ac:	f800283a 	ret

080523b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80523b0:	deffff04 	addi	sp,sp,-4
 80523b4:	df000015 	stw	fp,0(sp)
 80523b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80523bc:	0001883a 	nop
 80523c0:	e037883a 	mov	sp,fp
 80523c4:	df000017 	ldw	fp,0(sp)
 80523c8:	dec00104 	addi	sp,sp,4
 80523cc:	f800283a 	ret

080523d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80523d0:	defffe04 	addi	sp,sp,-8
 80523d4:	df000115 	stw	fp,4(sp)
 80523d8:	df000104 	addi	fp,sp,4
 80523dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80523e0:	e0bfff17 	ldw	r2,-4(fp)
 80523e4:	10bffe84 	addi	r2,r2,-6
 80523e8:	10c00428 	cmpgeui	r3,r2,16
 80523ec:	18001a1e 	bne	r3,zero,8052458 <alt_exception_cause_generated_bad_addr+0x88>
 80523f0:	100690ba 	slli	r3,r2,2
 80523f4:	00820174 	movhi	r2,2053
 80523f8:	10890204 	addi	r2,r2,9224
 80523fc:	1885883a 	add	r2,r3,r2
 8052400:	10800017 	ldw	r2,0(r2)
 8052404:	1000683a 	jmp	r2
 8052408:	08052448 	cmpgei	zero,at,5265
 805240c:	08052448 	cmpgei	zero,at,5265
 8052410:	08052458 	cmpnei	zero,at,5265
 8052414:	08052458 	cmpnei	zero,at,5265
 8052418:	08052458 	cmpnei	zero,at,5265
 805241c:	08052448 	cmpgei	zero,at,5265
 8052420:	08052450 	cmplti	zero,at,5265
 8052424:	08052458 	cmpnei	zero,at,5265
 8052428:	08052448 	cmpgei	zero,at,5265
 805242c:	08052448 	cmpgei	zero,at,5265
 8052430:	08052458 	cmpnei	zero,at,5265
 8052434:	08052448 	cmpgei	zero,at,5265
 8052438:	08052450 	cmplti	zero,at,5265
 805243c:	08052458 	cmpnei	zero,at,5265
 8052440:	08052458 	cmpnei	zero,at,5265
 8052444:	08052448 	cmpgei	zero,at,5265
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8052448:	00800044 	movi	r2,1
 805244c:	00000306 	br	805245c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8052450:	0005883a 	mov	r2,zero
 8052454:	00000106 	br	805245c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8052458:	0005883a 	mov	r2,zero
  }
}
 805245c:	e037883a 	mov	sp,fp
 8052460:	df000017 	ldw	fp,0(sp)
 8052464:	dec00104 	addi	sp,sp,4
 8052468:	f800283a 	ret

0805246c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 805246c:	defff804 	addi	sp,sp,-32
 8052470:	dfc00715 	stw	ra,28(sp)
 8052474:	df000615 	stw	fp,24(sp)
 8052478:	dc000515 	stw	r16,20(sp)
 805247c:	df000604 	addi	fp,sp,24
 8052480:	e13ffb15 	stw	r4,-20(fp)
 8052484:	e17ffc15 	stw	r5,-16(fp)
 8052488:	e1bffd15 	stw	r6,-12(fp)
 805248c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8052490:	e1bffe17 	ldw	r6,-8(fp)
 8052494:	e17ffd17 	ldw	r5,-12(fp)
 8052498:	e13ffc17 	ldw	r4,-16(fp)
 805249c:	80526f40 	call	80526f4 <open>
 80524a0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80524a4:	e0bffa17 	ldw	r2,-24(fp)
 80524a8:	10002216 	blt	r2,zero,8052534 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80524ac:	04020174 	movhi	r16,2053
 80524b0:	840f0004 	addi	r16,r16,15360
 80524b4:	e0bffa17 	ldw	r2,-24(fp)
 80524b8:	01400304 	movi	r5,12
 80524bc:	1009883a 	mov	r4,r2
 80524c0:	80418e00 	call	80418e0 <__mulsi3>
 80524c4:	8085883a 	add	r2,r16,r2
 80524c8:	10c00017 	ldw	r3,0(r2)
 80524cc:	e0bffb17 	ldw	r2,-20(fp)
 80524d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80524d4:	04020174 	movhi	r16,2053
 80524d8:	840f0004 	addi	r16,r16,15360
 80524dc:	e0bffa17 	ldw	r2,-24(fp)
 80524e0:	01400304 	movi	r5,12
 80524e4:	1009883a 	mov	r4,r2
 80524e8:	80418e00 	call	80418e0 <__mulsi3>
 80524ec:	8085883a 	add	r2,r16,r2
 80524f0:	10800104 	addi	r2,r2,4
 80524f4:	10c00017 	ldw	r3,0(r2)
 80524f8:	e0bffb17 	ldw	r2,-20(fp)
 80524fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8052500:	04020174 	movhi	r16,2053
 8052504:	840f0004 	addi	r16,r16,15360
 8052508:	e0bffa17 	ldw	r2,-24(fp)
 805250c:	01400304 	movi	r5,12
 8052510:	1009883a 	mov	r4,r2
 8052514:	80418e00 	call	80418e0 <__mulsi3>
 8052518:	8085883a 	add	r2,r16,r2
 805251c:	10800204 	addi	r2,r2,8
 8052520:	10c00017 	ldw	r3,0(r2)
 8052524:	e0bffb17 	ldw	r2,-20(fp)
 8052528:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 805252c:	e13ffa17 	ldw	r4,-24(fp)
 8052530:	804f5280 	call	804f528 <alt_release_fd>
  }
} 
 8052534:	0001883a 	nop
 8052538:	e6ffff04 	addi	sp,fp,-4
 805253c:	dfc00217 	ldw	ra,8(sp)
 8052540:	df000117 	ldw	fp,4(sp)
 8052544:	dc000017 	ldw	r16,0(sp)
 8052548:	dec00304 	addi	sp,sp,12
 805254c:	f800283a 	ret

08052550 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8052550:	defffb04 	addi	sp,sp,-20
 8052554:	dfc00415 	stw	ra,16(sp)
 8052558:	df000315 	stw	fp,12(sp)
 805255c:	df000304 	addi	fp,sp,12
 8052560:	e13ffd15 	stw	r4,-12(fp)
 8052564:	e17ffe15 	stw	r5,-8(fp)
 8052568:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 805256c:	01c07fc4 	movi	r7,511
 8052570:	01800044 	movi	r6,1
 8052574:	e17ffd17 	ldw	r5,-12(fp)
 8052578:	01020174 	movhi	r4,2053
 805257c:	210f0304 	addi	r4,r4,15372
 8052580:	805246c0 	call	805246c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8052584:	01c07fc4 	movi	r7,511
 8052588:	000d883a 	mov	r6,zero
 805258c:	e17ffe17 	ldw	r5,-8(fp)
 8052590:	01020174 	movhi	r4,2053
 8052594:	210f0004 	addi	r4,r4,15360
 8052598:	805246c0 	call	805246c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 805259c:	01c07fc4 	movi	r7,511
 80525a0:	01800044 	movi	r6,1
 80525a4:	e17fff17 	ldw	r5,-4(fp)
 80525a8:	01020174 	movhi	r4,2053
 80525ac:	210f0604 	addi	r4,r4,15384
 80525b0:	805246c0 	call	805246c <alt_open_fd>
}  
 80525b4:	0001883a 	nop
 80525b8:	e037883a 	mov	sp,fp
 80525bc:	dfc00117 	ldw	ra,4(sp)
 80525c0:	df000017 	ldw	fp,0(sp)
 80525c4:	dec00204 	addi	sp,sp,8
 80525c8:	f800283a 	ret

080525cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80525cc:	defffe04 	addi	sp,sp,-8
 80525d0:	dfc00115 	stw	ra,4(sp)
 80525d4:	df000015 	stw	fp,0(sp)
 80525d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80525dc:	d0a00a17 	ldw	r2,-32728(gp)
 80525e0:	10000326 	beq	r2,zero,80525f0 <alt_get_errno+0x24>
 80525e4:	d0a00a17 	ldw	r2,-32728(gp)
 80525e8:	103ee83a 	callr	r2
 80525ec:	00000106 	br	80525f4 <alt_get_errno+0x28>
 80525f0:	d0a70b04 	addi	r2,gp,-25556
}
 80525f4:	e037883a 	mov	sp,fp
 80525f8:	dfc00117 	ldw	ra,4(sp)
 80525fc:	df000017 	ldw	fp,0(sp)
 8052600:	dec00204 	addi	sp,sp,8
 8052604:	f800283a 	ret

08052608 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8052608:	defffb04 	addi	sp,sp,-20
 805260c:	dfc00415 	stw	ra,16(sp)
 8052610:	df000315 	stw	fp,12(sp)
 8052614:	dc000215 	stw	r16,8(sp)
 8052618:	df000304 	addi	fp,sp,12
 805261c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8052620:	e0bffe17 	ldw	r2,-8(fp)
 8052624:	10800217 	ldw	r2,8(r2)
 8052628:	10d00034 	orhi	r3,r2,16384
 805262c:	e0bffe17 	ldw	r2,-8(fp)
 8052630:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8052634:	e03ffd15 	stw	zero,-12(fp)
 8052638:	00002306 	br	80526c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 805263c:	04020174 	movhi	r16,2053
 8052640:	840f0004 	addi	r16,r16,15360
 8052644:	e0bffd17 	ldw	r2,-12(fp)
 8052648:	01400304 	movi	r5,12
 805264c:	1009883a 	mov	r4,r2
 8052650:	80418e00 	call	80418e0 <__mulsi3>
 8052654:	8085883a 	add	r2,r16,r2
 8052658:	10c00017 	ldw	r3,0(r2)
 805265c:	e0bffe17 	ldw	r2,-8(fp)
 8052660:	10800017 	ldw	r2,0(r2)
 8052664:	1880151e 	bne	r3,r2,80526bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8052668:	04020174 	movhi	r16,2053
 805266c:	840f0004 	addi	r16,r16,15360
 8052670:	e0bffd17 	ldw	r2,-12(fp)
 8052674:	01400304 	movi	r5,12
 8052678:	1009883a 	mov	r4,r2
 805267c:	80418e00 	call	80418e0 <__mulsi3>
 8052680:	8085883a 	add	r2,r16,r2
 8052684:	10800204 	addi	r2,r2,8
 8052688:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 805268c:	10000b0e 	bge	r2,zero,80526bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8052690:	01400304 	movi	r5,12
 8052694:	e13ffd17 	ldw	r4,-12(fp)
 8052698:	80418e00 	call	80418e0 <__mulsi3>
 805269c:	1007883a 	mov	r3,r2
 80526a0:	00820174 	movhi	r2,2053
 80526a4:	108f0004 	addi	r2,r2,15360
 80526a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80526ac:	e0bffe17 	ldw	r2,-8(fp)
 80526b0:	18800226 	beq	r3,r2,80526bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80526b4:	00bffcc4 	movi	r2,-13
 80526b8:	00000806 	br	80526dc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80526bc:	e0bffd17 	ldw	r2,-12(fp)
 80526c0:	10800044 	addi	r2,r2,1
 80526c4:	e0bffd15 	stw	r2,-12(fp)
 80526c8:	d0a00917 	ldw	r2,-32732(gp)
 80526cc:	1007883a 	mov	r3,r2
 80526d0:	e0bffd17 	ldw	r2,-12(fp)
 80526d4:	18bfd92e 	bgeu	r3,r2,805263c <__alt_data_end+0xfffea59c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80526d8:	0005883a 	mov	r2,zero
}
 80526dc:	e6ffff04 	addi	sp,fp,-4
 80526e0:	dfc00217 	ldw	ra,8(sp)
 80526e4:	df000117 	ldw	fp,4(sp)
 80526e8:	dc000017 	ldw	r16,0(sp)
 80526ec:	dec00304 	addi	sp,sp,12
 80526f0:	f800283a 	ret

080526f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80526f4:	defff604 	addi	sp,sp,-40
 80526f8:	dfc00915 	stw	ra,36(sp)
 80526fc:	df000815 	stw	fp,32(sp)
 8052700:	df000804 	addi	fp,sp,32
 8052704:	e13ffd15 	stw	r4,-12(fp)
 8052708:	e17ffe15 	stw	r5,-8(fp)
 805270c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8052710:	00bfffc4 	movi	r2,-1
 8052714:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8052718:	00bffb44 	movi	r2,-19
 805271c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8052720:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8052724:	d1600704 	addi	r5,gp,-32740
 8052728:	e13ffd17 	ldw	r4,-12(fp)
 805272c:	80523200 	call	8052320 <alt_find_dev>
 8052730:	e0bff815 	stw	r2,-32(fp)
 8052734:	e0bff817 	ldw	r2,-32(fp)
 8052738:	1000051e 	bne	r2,zero,8052750 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 805273c:	e13ffd17 	ldw	r4,-12(fp)
 8052740:	80528740 	call	8052874 <alt_find_file>
 8052744:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8052748:	00800044 	movi	r2,1
 805274c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8052750:	e0bff817 	ldw	r2,-32(fp)
 8052754:	10002b26 	beq	r2,zero,8052804 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8052758:	e13ff817 	ldw	r4,-32(fp)
 805275c:	805297c0 	call	805297c <alt_get_fd>
 8052760:	e0bff915 	stw	r2,-28(fp)
 8052764:	e0bff917 	ldw	r2,-28(fp)
 8052768:	1000030e 	bge	r2,zero,8052778 <open+0x84>
    {
      status = index;
 805276c:	e0bff917 	ldw	r2,-28(fp)
 8052770:	e0bffa15 	stw	r2,-24(fp)
 8052774:	00002506 	br	805280c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8052778:	01400304 	movi	r5,12
 805277c:	e13ff917 	ldw	r4,-28(fp)
 8052780:	80418e00 	call	80418e0 <__mulsi3>
 8052784:	1007883a 	mov	r3,r2
 8052788:	00820174 	movhi	r2,2053
 805278c:	108f0004 	addi	r2,r2,15360
 8052790:	1885883a 	add	r2,r3,r2
 8052794:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8052798:	e0fffe17 	ldw	r3,-8(fp)
 805279c:	00900034 	movhi	r2,16384
 80527a0:	10bfffc4 	addi	r2,r2,-1
 80527a4:	1886703a 	and	r3,r3,r2
 80527a8:	e0bffc17 	ldw	r2,-16(fp)
 80527ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80527b0:	e0bffb17 	ldw	r2,-20(fp)
 80527b4:	1000051e 	bne	r2,zero,80527cc <open+0xd8>
 80527b8:	e13ffc17 	ldw	r4,-16(fp)
 80527bc:	80526080 	call	8052608 <alt_file_locked>
 80527c0:	e0bffa15 	stw	r2,-24(fp)
 80527c4:	e0bffa17 	ldw	r2,-24(fp)
 80527c8:	10001016 	blt	r2,zero,805280c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80527cc:	e0bff817 	ldw	r2,-32(fp)
 80527d0:	10800317 	ldw	r2,12(r2)
 80527d4:	10000826 	beq	r2,zero,80527f8 <open+0x104>
 80527d8:	e0bff817 	ldw	r2,-32(fp)
 80527dc:	10800317 	ldw	r2,12(r2)
 80527e0:	e1ffff17 	ldw	r7,-4(fp)
 80527e4:	e1bffe17 	ldw	r6,-8(fp)
 80527e8:	e17ffd17 	ldw	r5,-12(fp)
 80527ec:	e13ffc17 	ldw	r4,-16(fp)
 80527f0:	103ee83a 	callr	r2
 80527f4:	00000106 	br	80527fc <open+0x108>
 80527f8:	0005883a 	mov	r2,zero
 80527fc:	e0bffa15 	stw	r2,-24(fp)
 8052800:	00000206 	br	805280c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8052804:	00bffb44 	movi	r2,-19
 8052808:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 805280c:	e0bffa17 	ldw	r2,-24(fp)
 8052810:	1000090e 	bge	r2,zero,8052838 <open+0x144>
  {
    alt_release_fd (index);  
 8052814:	e13ff917 	ldw	r4,-28(fp)
 8052818:	804f5280 	call	804f528 <alt_release_fd>
    ALT_ERRNO = -status;
 805281c:	80525cc0 	call	80525cc <alt_get_errno>
 8052820:	1007883a 	mov	r3,r2
 8052824:	e0bffa17 	ldw	r2,-24(fp)
 8052828:	0085c83a 	sub	r2,zero,r2
 805282c:	18800015 	stw	r2,0(r3)
    return -1;
 8052830:	00bfffc4 	movi	r2,-1
 8052834:	00000106 	br	805283c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8052838:	e0bff917 	ldw	r2,-28(fp)
}
 805283c:	e037883a 	mov	sp,fp
 8052840:	dfc00117 	ldw	ra,4(sp)
 8052844:	df000017 	ldw	fp,0(sp)
 8052848:	dec00204 	addi	sp,sp,8
 805284c:	f800283a 	ret

08052850 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8052850:	deffff04 	addi	sp,sp,-4
 8052854:	df000015 	stw	fp,0(sp)
 8052858:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 805285c:	000170fa 	wrctl	ienable,zero
}
 8052860:	0001883a 	nop
 8052864:	e037883a 	mov	sp,fp
 8052868:	df000017 	ldw	fp,0(sp)
 805286c:	dec00104 	addi	sp,sp,4
 8052870:	f800283a 	ret

08052874 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8052874:	defffb04 	addi	sp,sp,-20
 8052878:	dfc00415 	stw	ra,16(sp)
 805287c:	df000315 	stw	fp,12(sp)
 8052880:	df000304 	addi	fp,sp,12
 8052884:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8052888:	d0a00517 	ldw	r2,-32748(gp)
 805288c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8052890:	00003106 	br	8052958 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8052894:	e0bffd17 	ldw	r2,-12(fp)
 8052898:	10800217 	ldw	r2,8(r2)
 805289c:	1009883a 	mov	r4,r2
 80528a0:	8043b940 	call	8043b94 <strlen>
 80528a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80528a8:	e0bffd17 	ldw	r2,-12(fp)
 80528ac:	10c00217 	ldw	r3,8(r2)
 80528b0:	e0bffe17 	ldw	r2,-8(fp)
 80528b4:	10bfffc4 	addi	r2,r2,-1
 80528b8:	1885883a 	add	r2,r3,r2
 80528bc:	10800003 	ldbu	r2,0(r2)
 80528c0:	10803fcc 	andi	r2,r2,255
 80528c4:	1080201c 	xori	r2,r2,128
 80528c8:	10bfe004 	addi	r2,r2,-128
 80528cc:	10800bd8 	cmpnei	r2,r2,47
 80528d0:	1000031e 	bne	r2,zero,80528e0 <alt_find_file+0x6c>
    {
      len -= 1;
 80528d4:	e0bffe17 	ldw	r2,-8(fp)
 80528d8:	10bfffc4 	addi	r2,r2,-1
 80528dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80528e0:	e0bffe17 	ldw	r2,-8(fp)
 80528e4:	e0ffff17 	ldw	r3,-4(fp)
 80528e8:	1885883a 	add	r2,r3,r2
 80528ec:	10800003 	ldbu	r2,0(r2)
 80528f0:	10803fcc 	andi	r2,r2,255
 80528f4:	1080201c 	xori	r2,r2,128
 80528f8:	10bfe004 	addi	r2,r2,-128
 80528fc:	10800be0 	cmpeqi	r2,r2,47
 8052900:	1000081e 	bne	r2,zero,8052924 <alt_find_file+0xb0>
 8052904:	e0bffe17 	ldw	r2,-8(fp)
 8052908:	e0ffff17 	ldw	r3,-4(fp)
 805290c:	1885883a 	add	r2,r3,r2
 8052910:	10800003 	ldbu	r2,0(r2)
 8052914:	10803fcc 	andi	r2,r2,255
 8052918:	1080201c 	xori	r2,r2,128
 805291c:	10bfe004 	addi	r2,r2,-128
 8052920:	10000a1e 	bne	r2,zero,805294c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8052924:	e0bffd17 	ldw	r2,-12(fp)
 8052928:	10800217 	ldw	r2,8(r2)
 805292c:	e0fffe17 	ldw	r3,-8(fp)
 8052930:	180d883a 	mov	r6,r3
 8052934:	e17fff17 	ldw	r5,-4(fp)
 8052938:	1009883a 	mov	r4,r2
 805293c:	8052a8c0 	call	8052a8c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8052940:	1000021e 	bne	r2,zero,805294c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8052944:	e0bffd17 	ldw	r2,-12(fp)
 8052948:	00000706 	br	8052968 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 805294c:	e0bffd17 	ldw	r2,-12(fp)
 8052950:	10800017 	ldw	r2,0(r2)
 8052954:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8052958:	e0fffd17 	ldw	r3,-12(fp)
 805295c:	d0a00504 	addi	r2,gp,-32748
 8052960:	18bfcc1e 	bne	r3,r2,8052894 <__alt_data_end+0xfffea7f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8052964:	0005883a 	mov	r2,zero
}
 8052968:	e037883a 	mov	sp,fp
 805296c:	dfc00117 	ldw	ra,4(sp)
 8052970:	df000017 	ldw	fp,0(sp)
 8052974:	dec00204 	addi	sp,sp,8
 8052978:	f800283a 	ret

0805297c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 805297c:	defffa04 	addi	sp,sp,-24
 8052980:	dfc00515 	stw	ra,20(sp)
 8052984:	df000415 	stw	fp,16(sp)
 8052988:	dc000315 	stw	r16,12(sp)
 805298c:	df000404 	addi	fp,sp,16
 8052990:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8052994:	00bffa04 	movi	r2,-24
 8052998:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 805299c:	e03ffc15 	stw	zero,-16(fp)
 80529a0:	00001d06 	br	8052a18 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80529a4:	04020174 	movhi	r16,2053
 80529a8:	840f0004 	addi	r16,r16,15360
 80529ac:	e0bffc17 	ldw	r2,-16(fp)
 80529b0:	01400304 	movi	r5,12
 80529b4:	1009883a 	mov	r4,r2
 80529b8:	80418e00 	call	80418e0 <__mulsi3>
 80529bc:	8085883a 	add	r2,r16,r2
 80529c0:	10800017 	ldw	r2,0(r2)
 80529c4:	1000111e 	bne	r2,zero,8052a0c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80529c8:	04020174 	movhi	r16,2053
 80529cc:	840f0004 	addi	r16,r16,15360
 80529d0:	e0bffc17 	ldw	r2,-16(fp)
 80529d4:	01400304 	movi	r5,12
 80529d8:	1009883a 	mov	r4,r2
 80529dc:	80418e00 	call	80418e0 <__mulsi3>
 80529e0:	8085883a 	add	r2,r16,r2
 80529e4:	e0fffe17 	ldw	r3,-8(fp)
 80529e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80529ec:	d0e00917 	ldw	r3,-32732(gp)
 80529f0:	e0bffc17 	ldw	r2,-16(fp)
 80529f4:	1880020e 	bge	r3,r2,8052a00 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80529f8:	e0bffc17 	ldw	r2,-16(fp)
 80529fc:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 8052a00:	e0bffc17 	ldw	r2,-16(fp)
 8052a04:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8052a08:	00000606 	br	8052a24 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8052a0c:	e0bffc17 	ldw	r2,-16(fp)
 8052a10:	10800044 	addi	r2,r2,1
 8052a14:	e0bffc15 	stw	r2,-16(fp)
 8052a18:	e0bffc17 	ldw	r2,-16(fp)
 8052a1c:	10800810 	cmplti	r2,r2,32
 8052a20:	103fe01e 	bne	r2,zero,80529a4 <__alt_data_end+0xfffea904>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8052a24:	e0bffd17 	ldw	r2,-12(fp)
}
 8052a28:	e6ffff04 	addi	sp,fp,-4
 8052a2c:	dfc00217 	ldw	ra,8(sp)
 8052a30:	df000117 	ldw	fp,4(sp)
 8052a34:	dc000017 	ldw	r16,0(sp)
 8052a38:	dec00304 	addi	sp,sp,12
 8052a3c:	f800283a 	ret

08052a40 <atexit>:
 8052a40:	200b883a 	mov	r5,r4
 8052a44:	000f883a 	mov	r7,zero
 8052a48:	000d883a 	mov	r6,zero
 8052a4c:	0009883a 	mov	r4,zero
 8052a50:	8052b081 	jmpi	8052b08 <__register_exitproc>

08052a54 <exit>:
 8052a54:	defffe04 	addi	sp,sp,-8
 8052a58:	000b883a 	mov	r5,zero
 8052a5c:	dc000015 	stw	r16,0(sp)
 8052a60:	dfc00115 	stw	ra,4(sp)
 8052a64:	2021883a 	mov	r16,r4
 8052a68:	8052c200 	call	8052c20 <__call_exitprocs>
 8052a6c:	00820174 	movhi	r2,2053
 8052a70:	1093ae04 	addi	r2,r2,20152
 8052a74:	11000017 	ldw	r4,0(r2)
 8052a78:	20800f17 	ldw	r2,60(r4)
 8052a7c:	10000126 	beq	r2,zero,8052a84 <exit+0x30>
 8052a80:	103ee83a 	callr	r2
 8052a84:	8009883a 	mov	r4,r16
 8052a88:	8052da00 	call	8052da0 <_exit>

08052a8c <memcmp>:
 8052a8c:	01c000c4 	movi	r7,3
 8052a90:	3980192e 	bgeu	r7,r6,8052af8 <memcmp+0x6c>
 8052a94:	2144b03a 	or	r2,r4,r5
 8052a98:	11c4703a 	and	r2,r2,r7
 8052a9c:	10000f26 	beq	r2,zero,8052adc <memcmp+0x50>
 8052aa0:	20800003 	ldbu	r2,0(r4)
 8052aa4:	28c00003 	ldbu	r3,0(r5)
 8052aa8:	10c0151e 	bne	r2,r3,8052b00 <memcmp+0x74>
 8052aac:	31bfff84 	addi	r6,r6,-2
 8052ab0:	01ffffc4 	movi	r7,-1
 8052ab4:	00000406 	br	8052ac8 <memcmp+0x3c>
 8052ab8:	20800003 	ldbu	r2,0(r4)
 8052abc:	28c00003 	ldbu	r3,0(r5)
 8052ac0:	31bfffc4 	addi	r6,r6,-1
 8052ac4:	10c00e1e 	bne	r2,r3,8052b00 <memcmp+0x74>
 8052ac8:	21000044 	addi	r4,r4,1
 8052acc:	29400044 	addi	r5,r5,1
 8052ad0:	31fff91e 	bne	r6,r7,8052ab8 <__alt_data_end+0xfffeaa18>
 8052ad4:	0005883a 	mov	r2,zero
 8052ad8:	f800283a 	ret
 8052adc:	20c00017 	ldw	r3,0(r4)
 8052ae0:	28800017 	ldw	r2,0(r5)
 8052ae4:	18bfee1e 	bne	r3,r2,8052aa0 <__alt_data_end+0xfffeaa00>
 8052ae8:	31bfff04 	addi	r6,r6,-4
 8052aec:	21000104 	addi	r4,r4,4
 8052af0:	29400104 	addi	r5,r5,4
 8052af4:	39bff936 	bltu	r7,r6,8052adc <__alt_data_end+0xfffeaa3c>
 8052af8:	303fe91e 	bne	r6,zero,8052aa0 <__alt_data_end+0xfffeaa00>
 8052afc:	003ff506 	br	8052ad4 <__alt_data_end+0xfffeaa34>
 8052b00:	10c5c83a 	sub	r2,r2,r3
 8052b04:	f800283a 	ret

08052b08 <__register_exitproc>:
 8052b08:	defffa04 	addi	sp,sp,-24
 8052b0c:	dc000315 	stw	r16,12(sp)
 8052b10:	04020174 	movhi	r16,2053
 8052b14:	8413ae04 	addi	r16,r16,20152
 8052b18:	80c00017 	ldw	r3,0(r16)
 8052b1c:	dc400415 	stw	r17,16(sp)
 8052b20:	dfc00515 	stw	ra,20(sp)
 8052b24:	18805217 	ldw	r2,328(r3)
 8052b28:	2023883a 	mov	r17,r4
 8052b2c:	10003726 	beq	r2,zero,8052c0c <__register_exitproc+0x104>
 8052b30:	10c00117 	ldw	r3,4(r2)
 8052b34:	010007c4 	movi	r4,31
 8052b38:	20c00e16 	blt	r4,r3,8052b74 <__register_exitproc+0x6c>
 8052b3c:	1a000044 	addi	r8,r3,1
 8052b40:	8800221e 	bne	r17,zero,8052bcc <__register_exitproc+0xc4>
 8052b44:	18c00084 	addi	r3,r3,2
 8052b48:	18c7883a 	add	r3,r3,r3
 8052b4c:	18c7883a 	add	r3,r3,r3
 8052b50:	12000115 	stw	r8,4(r2)
 8052b54:	10c7883a 	add	r3,r2,r3
 8052b58:	19400015 	stw	r5,0(r3)
 8052b5c:	0005883a 	mov	r2,zero
 8052b60:	dfc00517 	ldw	ra,20(sp)
 8052b64:	dc400417 	ldw	r17,16(sp)
 8052b68:	dc000317 	ldw	r16,12(sp)
 8052b6c:	dec00604 	addi	sp,sp,24
 8052b70:	f800283a 	ret
 8052b74:	00800034 	movhi	r2,0
 8052b78:	10800004 	addi	r2,r2,0
 8052b7c:	10002626 	beq	r2,zero,8052c18 <__register_exitproc+0x110>
 8052b80:	01006404 	movi	r4,400
 8052b84:	d9400015 	stw	r5,0(sp)
 8052b88:	d9800115 	stw	r6,4(sp)
 8052b8c:	d9c00215 	stw	r7,8(sp)
 8052b90:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8052b94:	d9400017 	ldw	r5,0(sp)
 8052b98:	d9800117 	ldw	r6,4(sp)
 8052b9c:	d9c00217 	ldw	r7,8(sp)
 8052ba0:	10001d26 	beq	r2,zero,8052c18 <__register_exitproc+0x110>
 8052ba4:	81000017 	ldw	r4,0(r16)
 8052ba8:	10000115 	stw	zero,4(r2)
 8052bac:	02000044 	movi	r8,1
 8052bb0:	22405217 	ldw	r9,328(r4)
 8052bb4:	0007883a 	mov	r3,zero
 8052bb8:	12400015 	stw	r9,0(r2)
 8052bbc:	20805215 	stw	r2,328(r4)
 8052bc0:	10006215 	stw	zero,392(r2)
 8052bc4:	10006315 	stw	zero,396(r2)
 8052bc8:	883fde26 	beq	r17,zero,8052b44 <__alt_data_end+0xfffeaaa4>
 8052bcc:	18c9883a 	add	r4,r3,r3
 8052bd0:	2109883a 	add	r4,r4,r4
 8052bd4:	1109883a 	add	r4,r2,r4
 8052bd8:	21802215 	stw	r6,136(r4)
 8052bdc:	01800044 	movi	r6,1
 8052be0:	12406217 	ldw	r9,392(r2)
 8052be4:	30cc983a 	sll	r6,r6,r3
 8052be8:	4992b03a 	or	r9,r9,r6
 8052bec:	12406215 	stw	r9,392(r2)
 8052bf0:	21c04215 	stw	r7,264(r4)
 8052bf4:	01000084 	movi	r4,2
 8052bf8:	893fd21e 	bne	r17,r4,8052b44 <__alt_data_end+0xfffeaaa4>
 8052bfc:	11006317 	ldw	r4,396(r2)
 8052c00:	218cb03a 	or	r6,r4,r6
 8052c04:	11806315 	stw	r6,396(r2)
 8052c08:	003fce06 	br	8052b44 <__alt_data_end+0xfffeaaa4>
 8052c0c:	18805304 	addi	r2,r3,332
 8052c10:	18805215 	stw	r2,328(r3)
 8052c14:	003fc606 	br	8052b30 <__alt_data_end+0xfffeaa90>
 8052c18:	00bfffc4 	movi	r2,-1
 8052c1c:	003fd006 	br	8052b60 <__alt_data_end+0xfffeaac0>

08052c20 <__call_exitprocs>:
 8052c20:	defff504 	addi	sp,sp,-44
 8052c24:	df000915 	stw	fp,36(sp)
 8052c28:	dd400615 	stw	r21,24(sp)
 8052c2c:	dc800315 	stw	r18,12(sp)
 8052c30:	dfc00a15 	stw	ra,40(sp)
 8052c34:	ddc00815 	stw	r23,32(sp)
 8052c38:	dd800715 	stw	r22,28(sp)
 8052c3c:	dd000515 	stw	r20,20(sp)
 8052c40:	dcc00415 	stw	r19,16(sp)
 8052c44:	dc400215 	stw	r17,8(sp)
 8052c48:	dc000115 	stw	r16,4(sp)
 8052c4c:	d9000015 	stw	r4,0(sp)
 8052c50:	2839883a 	mov	fp,r5
 8052c54:	04800044 	movi	r18,1
 8052c58:	057fffc4 	movi	r21,-1
 8052c5c:	00820174 	movhi	r2,2053
 8052c60:	1093ae04 	addi	r2,r2,20152
 8052c64:	12000017 	ldw	r8,0(r2)
 8052c68:	45005217 	ldw	r20,328(r8)
 8052c6c:	44c05204 	addi	r19,r8,328
 8052c70:	a0001c26 	beq	r20,zero,8052ce4 <__call_exitprocs+0xc4>
 8052c74:	a0800117 	ldw	r2,4(r20)
 8052c78:	15ffffc4 	addi	r23,r2,-1
 8052c7c:	b8000d16 	blt	r23,zero,8052cb4 <__call_exitprocs+0x94>
 8052c80:	14000044 	addi	r16,r2,1
 8052c84:	8421883a 	add	r16,r16,r16
 8052c88:	8421883a 	add	r16,r16,r16
 8052c8c:	84402004 	addi	r17,r16,128
 8052c90:	a463883a 	add	r17,r20,r17
 8052c94:	a421883a 	add	r16,r20,r16
 8052c98:	e0001e26 	beq	fp,zero,8052d14 <__call_exitprocs+0xf4>
 8052c9c:	80804017 	ldw	r2,256(r16)
 8052ca0:	e0801c26 	beq	fp,r2,8052d14 <__call_exitprocs+0xf4>
 8052ca4:	bdffffc4 	addi	r23,r23,-1
 8052ca8:	843fff04 	addi	r16,r16,-4
 8052cac:	8c7fff04 	addi	r17,r17,-4
 8052cb0:	bd7ff91e 	bne	r23,r21,8052c98 <__alt_data_end+0xfffeabf8>
 8052cb4:	00800034 	movhi	r2,0
 8052cb8:	10800004 	addi	r2,r2,0
 8052cbc:	10000926 	beq	r2,zero,8052ce4 <__call_exitprocs+0xc4>
 8052cc0:	a0800117 	ldw	r2,4(r20)
 8052cc4:	1000301e 	bne	r2,zero,8052d88 <__call_exitprocs+0x168>
 8052cc8:	a0800017 	ldw	r2,0(r20)
 8052ccc:	10003226 	beq	r2,zero,8052d98 <__call_exitprocs+0x178>
 8052cd0:	a009883a 	mov	r4,r20
 8052cd4:	98800015 	stw	r2,0(r19)
 8052cd8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8052cdc:	9d000017 	ldw	r20,0(r19)
 8052ce0:	a03fe41e 	bne	r20,zero,8052c74 <__alt_data_end+0xfffeabd4>
 8052ce4:	dfc00a17 	ldw	ra,40(sp)
 8052ce8:	df000917 	ldw	fp,36(sp)
 8052cec:	ddc00817 	ldw	r23,32(sp)
 8052cf0:	dd800717 	ldw	r22,28(sp)
 8052cf4:	dd400617 	ldw	r21,24(sp)
 8052cf8:	dd000517 	ldw	r20,20(sp)
 8052cfc:	dcc00417 	ldw	r19,16(sp)
 8052d00:	dc800317 	ldw	r18,12(sp)
 8052d04:	dc400217 	ldw	r17,8(sp)
 8052d08:	dc000117 	ldw	r16,4(sp)
 8052d0c:	dec00b04 	addi	sp,sp,44
 8052d10:	f800283a 	ret
 8052d14:	a0800117 	ldw	r2,4(r20)
 8052d18:	80c00017 	ldw	r3,0(r16)
 8052d1c:	10bfffc4 	addi	r2,r2,-1
 8052d20:	15c01426 	beq	r2,r23,8052d74 <__call_exitprocs+0x154>
 8052d24:	80000015 	stw	zero,0(r16)
 8052d28:	183fde26 	beq	r3,zero,8052ca4 <__alt_data_end+0xfffeac04>
 8052d2c:	95c8983a 	sll	r4,r18,r23
 8052d30:	a0806217 	ldw	r2,392(r20)
 8052d34:	a5800117 	ldw	r22,4(r20)
 8052d38:	2084703a 	and	r2,r4,r2
 8052d3c:	10000b26 	beq	r2,zero,8052d6c <__call_exitprocs+0x14c>
 8052d40:	a0806317 	ldw	r2,396(r20)
 8052d44:	2088703a 	and	r4,r4,r2
 8052d48:	20000c1e 	bne	r4,zero,8052d7c <__call_exitprocs+0x15c>
 8052d4c:	89400017 	ldw	r5,0(r17)
 8052d50:	d9000017 	ldw	r4,0(sp)
 8052d54:	183ee83a 	callr	r3
 8052d58:	a0800117 	ldw	r2,4(r20)
 8052d5c:	15bfbf1e 	bne	r2,r22,8052c5c <__alt_data_end+0xfffeabbc>
 8052d60:	98800017 	ldw	r2,0(r19)
 8052d64:	153fcf26 	beq	r2,r20,8052ca4 <__alt_data_end+0xfffeac04>
 8052d68:	003fbc06 	br	8052c5c <__alt_data_end+0xfffeabbc>
 8052d6c:	183ee83a 	callr	r3
 8052d70:	003ff906 	br	8052d58 <__alt_data_end+0xfffeacb8>
 8052d74:	a5c00115 	stw	r23,4(r20)
 8052d78:	003feb06 	br	8052d28 <__alt_data_end+0xfffeac88>
 8052d7c:	89000017 	ldw	r4,0(r17)
 8052d80:	183ee83a 	callr	r3
 8052d84:	003ff406 	br	8052d58 <__alt_data_end+0xfffeacb8>
 8052d88:	a0800017 	ldw	r2,0(r20)
 8052d8c:	a027883a 	mov	r19,r20
 8052d90:	1029883a 	mov	r20,r2
 8052d94:	003fb606 	br	8052c70 <__alt_data_end+0xfffeabd0>
 8052d98:	0005883a 	mov	r2,zero
 8052d9c:	003ffb06 	br	8052d8c <__alt_data_end+0xfffeacec>

08052da0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8052da0:	defffd04 	addi	sp,sp,-12
 8052da4:	df000215 	stw	fp,8(sp)
 8052da8:	df000204 	addi	fp,sp,8
 8052dac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8052db0:	0001883a 	nop
 8052db4:	e0bfff17 	ldw	r2,-4(fp)
 8052db8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8052dbc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8052dc0:	10000226 	beq	r2,zero,8052dcc <_exit+0x2c>
    ALT_SIM_FAIL();
 8052dc4:	002af070 	cmpltui	zero,zero,43969
 8052dc8:	00000106 	br	8052dd0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8052dcc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8052dd0:	003fff06 	br	8052dd0 <__alt_data_end+0xfffead30>
